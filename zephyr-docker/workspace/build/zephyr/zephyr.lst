
zephyr.elf:     file format elf32-littleriscv


Disassembly of section rom_start:

80000000 <__start>:
SECTION_FUNC(vectors, __start)
#if defined(CONFIG_RISCV_GP)
	/* Initialize global pointer */
	.option push
	.option norelax
	la gp, __global_pointer$
80000000:	0000b197          	auipc	gp,0xb
80000004:	5c018193          	addi	gp,gp,1472 # 8000b5c0 <__global_pointer$>
#else
	/*
	 * Set mtvec (Machine Trap-Vector Base-Address Register)
	 * to _isr_wrapper.
	 */
	la t0, _isr_wrapper
80000008:	00000297          	auipc	t0,0x0
8000000c:	01428293          	addi	t0,t0,20 # 8000001c <_isr_wrapper>
#endif

	csrw mtvec, t0
80000010:	30529073          	csrw	mtvec,t0

	/* Jump to __reset */
	tail __reset
80000014:	0040006f          	j	80000018 <__reset>

Disassembly of section reset:

80000018 <__reset>:
	/*
	 * jump to __initialize
	 * use call opcode in case __initialize is far away.
	 * This will be dependent on linker.ld configuration.
	 */
	call __initialize
80000018:	108050ef          	jal	ra,80005120 <__initialize>

Disassembly of section exceptions:

8000001c <_isr_wrapper>:
	csrrw sp, mscratch, sp
1:
#endif

	/* Save caller-saved registers on current thread stack. */
	addi sp, sp, -__z_arch_esf_t_SIZEOF
8000001c:	fb010113          	addi	sp,sp,-80
	DO_CALLER_SAVED(sr)		;
80000020:	00512223          	sw	t0,4(sp)
80000024:	00612423          	sw	t1,8(sp)
80000028:	00712623          	sw	t2,12(sp)
8000002c:	01c12823          	sw	t3,16(sp)
80000030:	01d12a23          	sw	t4,20(sp)
80000034:	01e12c23          	sw	t5,24(sp)
80000038:	01f12e23          	sw	t6,28(sp)
8000003c:	02a12023          	sw	a0,32(sp)
80000040:	02b12223          	sw	a1,36(sp)
80000044:	02c12423          	sw	a2,40(sp)
80000048:	02d12623          	sw	a3,44(sp)
8000004c:	02e12823          	sw	a4,48(sp)
80000050:	02f12a23          	sw	a5,52(sp)
80000054:	03012c23          	sw	a6,56(sp)
80000058:	03112e23          	sw	a7,60(sp)
8000005c:	00112023          	sw	ra,0(sp)

	/* Save s0 in the esf and load it with &_current_cpu. */
	sr s0, __z_arch_esf_t_s0_OFFSET(sp)
80000060:	04812423          	sw	s0,72(sp)
	GET_CURRENT_CPU(s0, t0)
80000064:	00008417          	auipc	s0,0x8
80000068:	69440413          	addi	s0,s0,1684 # 800086f8 <_kernel>
	add t0, t0, tp, %tprel_add(is_user_mode)
	sb zero, %tprel_lo(is_user_mode)(t0)
#endif

	/* Save MEPC register */
	csrr t0, mepc
8000006c:	341022f3          	csrr	t0,mepc
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
80000070:	04512023          	sw	t0,64(sp)

	/* Save MSTATUS register */
	csrr t2, mstatus
80000074:	300023f3          	csrr	t2,mstatus
	sr t2, __z_arch_esf_t_mstatus_OFFSET(sp)
80000078:	04712223          	sw	t2,68(sp)
	 * SOCs (like pulpino or riscv-qemu), the MSB is never set to indicate
	 * interrupt. Hence, check for interrupt/exception via the __soc_is_irq
	 * function (that needs to be implemented by each SOC). The result is
	 * returned via register a0 (1: interrupt, 0 exception)
	 */
	jal ra, __soc_is_irq
8000007c:	14c000ef          	jal	ra,800001c8 <__soc_is_irq>

	/* If a0 != 0, jump to is_interrupt */
	bnez a0, is_interrupt
80000080:	04051a63          	bnez	a0,800000d4 <is_interrupt>
	/*
	 * If the exception is the result of an ECALL, check whether to
	 * perform a context-switch or an IRQ offload. Otherwise call _Fault
	 * to report the exception.
	 */
	csrr t0, mcause
80000084:	342022f3          	csrr	t0,mcause
	li t2, SOC_MCAUSE_EXP_MASK
80000088:	800003b7          	lui	t2,0x80000
8000008c:	fff38393          	addi	t2,t2,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and t0, t0, t2
80000090:	0072f2b3          	and	t0,t0,t2

	/*
	 * If mcause == SOC_MCAUSE_ECALL_EXP, handle system call from
	 * kernel thread.
	 */
	li t1, SOC_MCAUSE_ECALL_EXP
80000094:	00b00313          	li	t1,11
	beq t0, t1, is_kernel_syscall
80000098:	00628a63          	beq	t0,t1,800000ac <is_kernel_syscall>
	 * Stack pointer is pointing to a z_arch_esf_t structure, pass it
	 * to _Fault (via register a0).
	 * If _Fault shall return, set return address to
	 * no_reschedule to restore stack.
	 */
	mv a0, sp
8000009c:	00010513          	mv	a0,sp
	la ra, no_reschedule
800000a0:	00000097          	auipc	ra,0x0
800000a4:	0bc08093          	addi	ra,ra,188 # 8000015c <z_riscv_thread_start>
	tail _Fault
800000a8:	0140506f          	j	800050bc <_Fault>

800000ac <is_kernel_syscall>:
	 * again upon exiting the ISR.
	 *
	 * It's safe to always increment by 4, even with compressed
	 * instructions, because the ecall instruction is always 4 bytes.
	 */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
800000ac:	04012283          	lw	t0,64(sp)
	addi t0, t0, 4
800000b0:	00428293          	addi	t0,t0,4
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
800000b4:	04512023          	sw	t0,64(sp)
	li t1, MSTATUS_MPRV
	csrs mstatus, t1
#endif

	/* Determine what to do. Operation code is in t0. */
	lr t0, __z_arch_esf_t_t0_OFFSET(sp)
800000b8:	00412283          	lw	t0,4(sp)

	.if RV_ECALL_RUNTIME_EXCEPT != 0; .err; .endif
	beqz t0, do_fault
800000bc:	00028663          	beqz	t0,800000c8 <do_fault>
	j reschedule
skip_schedule:
#endif

	/* default fault code is K_ERR_KERNEL_OOPS */
	li a0, 3
800000c0:	00300513          	li	a0,3
	j 1f
800000c4:	0080006f          	j	800000cc <do_fault+0x4>

800000c8 <do_fault>:

do_fault:
	/* Handle RV_ECALL_RUNTIME_EXCEPT. Retrieve reason in a0, esf in A1. */
	lr a0, __z_arch_esf_t_a0_OFFSET(sp)
800000c8:	02012503          	lw	a0,32(sp)
1:	mv a1, sp
800000cc:	00010593          	mv	a1,sp
	tail z_riscv_fatal_error
800000d0:	7dd0406f          	j	800050ac <z_riscv_fatal_error>

800000d4 <is_interrupt>:
	csrs mstatus, t1
2:
#endif

	/* Increment _current_cpu->nested */
	lw t1, ___cpu_t_nested_OFFSET(s0)
800000d4:	00042303          	lw	t1,0(s0)
	addi t2, t1, 1
800000d8:	00130393          	addi	t2,t1,1
	sw t2, ___cpu_t_nested_OFFSET(s0)
800000dc:	00742023          	sw	t2,0(s0)
	bnez t1, on_irq_stack
800000e0:	00031a63          	bnez	t1,800000f4 <on_irq_stack>

	/* Switch to interrupt stack */
	mv t0, sp
800000e4:	00010293          	mv	t0,sp
	lr sp, ___cpu_t_irq_stack_OFFSET(s0)
800000e8:	00442103          	lw	sp,4(s0)

	/*
	 * Save thread stack pointer on interrupt stack
	 * In RISC-V, stack pointer needs to be 16-byte aligned
	 */
	addi sp, sp, -16
800000ec:	ff010113          	addi	sp,sp,-16
	sr t0, 0(sp)
800000f0:	00512023          	sw	t0,0(sp)

800000f4 <on_irq_stack>:
#ifdef CONFIG_TRACING_ISR
	call sys_trace_isr_enter
#endif

	/* Get IRQ causing interrupt */
	csrr a0, mcause
800000f4:	34202573          	csrr	a0,mcause
	li t0, SOC_MCAUSE_EXP_MASK
800000f8:	800002b7          	lui	t0,0x80000
800000fc:	fff28293          	addi	t0,t0,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and a0, a0, t0
80000100:	00557533          	and	a0,a0,t0

	/*
	 * Clear pending IRQ generating the interrupt at SOC level
	 * Pass IRQ number to __soc_handle_irq via register a0
	 */
	jal ra, __soc_handle_irq
80000104:	0b4000ef          	jal	ra,800001b8 <__soc_handle_irq>

	/*
	 * Call corresponding registered function in _sw_isr_table.
	 * (table is 2-word wide, we should shift index accordingly)
	 */
	la t0, _sw_isr_table
80000108:	00008297          	auipc	t0,0x8
8000010c:	c9828293          	addi	t0,t0,-872 # 80007da0 <_sw_isr_table>
	slli a0, a0, (RV_REGSHIFT + 1)
80000110:	00351513          	slli	a0,a0,0x3
	add t0, t0, a0
80000114:	00a282b3          	add	t0,t0,a0

	/* Load argument in a0 register */
	lr a0, 0(t0)
80000118:	0002a503          	lw	a0,0(t0)

	/* Load ISR function address in register t1 */
	lr t1, RV_REGSIZE(t0)
8000011c:	0042a303          	lw	t1,4(t0)

	/* Call ISR function */
	jalr ra, t1, 0
80000120:	000300e7          	jalr	t1

80000124 <irq_done>:
    call sys_trace_isr_exit
#endif

irq_done:
	/* Decrement _current_cpu->nested */
	lw t2, ___cpu_t_nested_OFFSET(s0)
80000124:	00042383          	lw	t2,0(s0)
	addi t2, t2, -1
80000128:	fff38393          	addi	t2,t2,-1
	sw t2, ___cpu_t_nested_OFFSET(s0)
8000012c:	00742023          	sw	t2,0(s0)
	bnez t2, no_reschedule
80000130:	02039663          	bnez	t2,8000015c <z_riscv_thread_start>

	/* nested count is back to 0: Return to thread stack */
	lr sp, 0(sp)
80000134:	00012103          	lw	sp,0(sp)

80000138 <check_reschedule>:
#endif

check_reschedule:

	/* Get pointer to current thread on this CPU */
	lr a1, ___cpu_t_current_OFFSET(s0)
80000138:	00842583          	lw	a1,8(s0)
	/*
	 * Get next thread to schedule with z_get_next_switch_handle().
	 * We pass it a NULL as we didn't save the whole thread context yet.
	 * If no scheduling is necessary then NULL will be returned.
	 */
	addi sp, sp, -16
8000013c:	ff010113          	addi	sp,sp,-16
	sr a1, 0(sp)
80000140:	00b12023          	sw	a1,0(sp)
	mv a0, zero
80000144:	00000513          	li	a0,0
	call z_get_next_switch_handle
80000148:	261060ef          	jal	ra,80006ba8 <z_get_next_switch_handle>
	lr a1, 0(sp)
8000014c:	00012583          	lw	a1,0(sp)
	addi sp, sp, 16
80000150:	01010113          	addi	sp,sp,16
	beqz a0, no_reschedule
80000154:	00050463          	beqz	a0,8000015c <z_riscv_thread_start>

80000158 <reschedule>:
	/*
	 * Perform context switch:
	 * a0 = new thread
	 * a1 = old thread
	 */
	call z_riscv_switch
80000158:	044050ef          	jal	ra,8000519c <z_riscv_switch>

8000015c <z_riscv_thread_start>:
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
8000015c:	04012283          	lw	t0,64(sp)
	csrw mepc, t0
80000160:	34129073          	csrw	mepc,t0

	/* Restore MSTATUS register */
	lr t2, __z_arch_esf_t_mstatus_OFFSET(sp)
80000164:	04412383          	lw	t2,68(sp)
	csrrw t0, mstatus, t2
80000168:	300392f3          	csrrw	t0,mstatus,t2
	csrw mscratch, t0
1:
#endif

	/* Restore s0 (it is no longer ours) */
	lr s0, __z_arch_esf_t_s0_OFFSET(sp)
8000016c:	04812403          	lw	s0,72(sp)

	/* Restore caller-saved registers from thread stack */
	DO_CALLER_SAVED(lr)
80000170:	00412283          	lw	t0,4(sp)
80000174:	00812303          	lw	t1,8(sp)
80000178:	00c12383          	lw	t2,12(sp)
8000017c:	01012e03          	lw	t3,16(sp)
80000180:	01412e83          	lw	t4,20(sp)
80000184:	01812f03          	lw	t5,24(sp)
80000188:	01c12f83          	lw	t6,28(sp)
8000018c:	02012503          	lw	a0,32(sp)
80000190:	02412583          	lw	a1,36(sp)
80000194:	02812603          	lw	a2,40(sp)
80000198:	02c12683          	lw	a3,44(sp)
8000019c:	03012703          	lw	a4,48(sp)
800001a0:	03412783          	lw	a5,52(sp)
800001a4:	03812803          	lw	a6,56(sp)
800001a8:	03c12883          	lw	a7,60(sp)
800001ac:	00012083          	lw	ra,0(sp)
#ifdef CONFIG_USERSPACE
	/* retrieve saved stack pointer */
	lr sp, __z_arch_esf_t_sp_OFFSET(sp)
#else
	/* remove esf from the stack */
	addi sp, sp, __z_arch_esf_t_SIZEOF
800001b0:	05010113          	addi	sp,sp,80
#endif

	mret
800001b4:	30200073          	mret

800001b8 <__soc_handle_irq>:
 * SOC-specific function to handle pending IRQ number generating the interrupt.
 * Exception number is given as parameter via register a0.
 */
SECTION_FUNC(exception.other, __soc_handle_irq)
	/* Clear exception number from CSR mip register */
	li t1, 1
800001b8:	00100313          	li	t1,1
	sll t0, t1, a0
800001bc:	00a312b3          	sll	t0,t1,a0
	csrrc t1, mip, t0
800001c0:	3442b373          	csrrc	t1,mip,t0

	/* Return */
	ret
800001c4:	00008067          	ret

800001c8 <__soc_is_irq>:
 * return 1 (interrupt) or 0 (exception)
 *
 */
SECTION_FUNC(exception.other, __soc_is_irq)
	/* Read mcause and check if interrupt bit is set */
	csrr t0, mcause
800001c8:	342022f3          	csrr	t0,mcause
	li t1, SOC_MCAUSE_IRQ_MASK
800001cc:	80000337          	lui	t1,0x80000
	and t0, t0, t1
800001d0:	0062f2b3          	and	t0,t0,t1

	/* If interrupt bit is not set, return with 0 */
	addi a0, x0, 0
800001d4:	00000513          	li	a0,0
	beqz t0, not_interrupt
800001d8:	00028463          	beqz	t0,800001e0 <not_interrupt>
	addi a0, a0, 1
800001dc:	00150513          	addi	a0,a0,1

800001e0 <not_interrupt>:

not_interrupt:
	/* return */
	ret
800001e0:	00008067          	ret

Disassembly of section text:

800001e4 <__udivdi3>:
800001e4:	00050893          	mv	a7,a0
800001e8:	00058313          	mv	t1,a1
800001ec:	00060713          	mv	a4,a2
800001f0:	00050813          	mv	a6,a0
800001f4:	00058793          	mv	a5,a1
800001f8:	28069263          	bnez	a3,8000047c <__udivdi3+0x298>
800001fc:	800085b7          	lui	a1,0x80008
80000200:	fac58593          	addi	a1,a1,-84 # 80007fac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007fad>
80000204:	0ec37663          	bgeu	t1,a2,800002f0 <__udivdi3+0x10c>
80000208:	000106b7          	lui	a3,0x10
8000020c:	0cd67863          	bgeu	a2,a3,800002dc <__udivdi3+0xf8>
80000210:	10063693          	sltiu	a3,a2,256
80000214:	0016c693          	xori	a3,a3,1
80000218:	00369693          	slli	a3,a3,0x3
8000021c:	00d65533          	srl	a0,a2,a3
80000220:	00a585b3          	add	a1,a1,a0
80000224:	0005c583          	lbu	a1,0(a1)
80000228:	02000513          	li	a0,32
8000022c:	00d586b3          	add	a3,a1,a3
80000230:	40d505b3          	sub	a1,a0,a3
80000234:	00d50c63          	beq	a0,a3,8000024c <__udivdi3+0x68>
80000238:	00b317b3          	sll	a5,t1,a1
8000023c:	00d8d6b3          	srl	a3,a7,a3
80000240:	00b61733          	sll	a4,a2,a1
80000244:	00f6e7b3          	or	a5,a3,a5
80000248:	00b89833          	sll	a6,a7,a1
8000024c:	01075593          	srli	a1,a4,0x10
80000250:	02b7d333          	divu	t1,a5,a1
80000254:	01071613          	slli	a2,a4,0x10
80000258:	01065613          	srli	a2,a2,0x10
8000025c:	02b7f7b3          	remu	a5,a5,a1
80000260:	00030513          	mv	a0,t1
80000264:	026608b3          	mul	a7,a2,t1
80000268:	01079693          	slli	a3,a5,0x10
8000026c:	01085793          	srli	a5,a6,0x10
80000270:	00d7e7b3          	or	a5,a5,a3
80000274:	0117fe63          	bgeu	a5,a7,80000290 <__udivdi3+0xac>
80000278:	00f707b3          	add	a5,a4,a5
8000027c:	fff30513          	addi	a0,t1,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
80000280:	00e7e863          	bltu	a5,a4,80000290 <__udivdi3+0xac>
80000284:	0117f663          	bgeu	a5,a7,80000290 <__udivdi3+0xac>
80000288:	ffe30513          	addi	a0,t1,-2
8000028c:	00e787b3          	add	a5,a5,a4
80000290:	411787b3          	sub	a5,a5,a7
80000294:	02b7d8b3          	divu	a7,a5,a1
80000298:	01081813          	slli	a6,a6,0x10
8000029c:	01085813          	srli	a6,a6,0x10
800002a0:	02b7f7b3          	remu	a5,a5,a1
800002a4:	031606b3          	mul	a3,a2,a7
800002a8:	01079793          	slli	a5,a5,0x10
800002ac:	00f86833          	or	a6,a6,a5
800002b0:	00088793          	mv	a5,a7
800002b4:	00d87c63          	bgeu	a6,a3,800002cc <__udivdi3+0xe8>
800002b8:	01070833          	add	a6,a4,a6
800002bc:	fff88793          	addi	a5,a7,-1
800002c0:	00e86663          	bltu	a6,a4,800002cc <__udivdi3+0xe8>
800002c4:	00d87463          	bgeu	a6,a3,800002cc <__udivdi3+0xe8>
800002c8:	ffe88793          	addi	a5,a7,-2
800002cc:	01051513          	slli	a0,a0,0x10
800002d0:	00f56533          	or	a0,a0,a5
800002d4:	00000593          	li	a1,0
800002d8:	00008067          	ret
800002dc:	01000537          	lui	a0,0x1000
800002e0:	01000693          	li	a3,16
800002e4:	f2a66ce3          	bltu	a2,a0,8000021c <__udivdi3+0x38>
800002e8:	01800693          	li	a3,24
800002ec:	f31ff06f          	j	8000021c <__udivdi3+0x38>
800002f0:	00000693          	li	a3,0
800002f4:	00060c63          	beqz	a2,8000030c <__udivdi3+0x128>
800002f8:	000107b7          	lui	a5,0x10
800002fc:	0cf67063          	bgeu	a2,a5,800003bc <__udivdi3+0x1d8>
80000300:	10063693          	sltiu	a3,a2,256
80000304:	0016c693          	xori	a3,a3,1
80000308:	00369693          	slli	a3,a3,0x3
8000030c:	00d657b3          	srl	a5,a2,a3
80000310:	00f585b3          	add	a1,a1,a5
80000314:	0005c783          	lbu	a5,0(a1)
80000318:	00d787b3          	add	a5,a5,a3
8000031c:	02000693          	li	a3,32
80000320:	40f685b3          	sub	a1,a3,a5
80000324:	0af69663          	bne	a3,a5,800003d0 <__udivdi3+0x1ec>
80000328:	40c307b3          	sub	a5,t1,a2
8000032c:	00100593          	li	a1,1
80000330:	01075893          	srli	a7,a4,0x10
80000334:	0317de33          	divu	t3,a5,a7
80000338:	01071613          	slli	a2,a4,0x10
8000033c:	01065613          	srli	a2,a2,0x10
80000340:	01085693          	srli	a3,a6,0x10
80000344:	0317f7b3          	remu	a5,a5,a7
80000348:	000e0513          	mv	a0,t3
8000034c:	03c60333          	mul	t1,a2,t3
80000350:	01079793          	slli	a5,a5,0x10
80000354:	00f6e7b3          	or	a5,a3,a5
80000358:	0067fe63          	bgeu	a5,t1,80000374 <__udivdi3+0x190>
8000035c:	00f707b3          	add	a5,a4,a5
80000360:	fffe0513          	addi	a0,t3,-1
80000364:	00e7e863          	bltu	a5,a4,80000374 <__udivdi3+0x190>
80000368:	0067f663          	bgeu	a5,t1,80000374 <__udivdi3+0x190>
8000036c:	ffee0513          	addi	a0,t3,-2
80000370:	00e787b3          	add	a5,a5,a4
80000374:	406787b3          	sub	a5,a5,t1
80000378:	0317d333          	divu	t1,a5,a7
8000037c:	01081813          	slli	a6,a6,0x10
80000380:	01085813          	srli	a6,a6,0x10
80000384:	0317f7b3          	remu	a5,a5,a7
80000388:	026606b3          	mul	a3,a2,t1
8000038c:	01079793          	slli	a5,a5,0x10
80000390:	00f86833          	or	a6,a6,a5
80000394:	00030793          	mv	a5,t1
80000398:	00d87c63          	bgeu	a6,a3,800003b0 <__udivdi3+0x1cc>
8000039c:	01070833          	add	a6,a4,a6
800003a0:	fff30793          	addi	a5,t1,-1
800003a4:	00e86663          	bltu	a6,a4,800003b0 <__udivdi3+0x1cc>
800003a8:	00d87463          	bgeu	a6,a3,800003b0 <__udivdi3+0x1cc>
800003ac:	ffe30793          	addi	a5,t1,-2
800003b0:	01051513          	slli	a0,a0,0x10
800003b4:	00f56533          	or	a0,a0,a5
800003b8:	00008067          	ret
800003bc:	010007b7          	lui	a5,0x1000
800003c0:	01000693          	li	a3,16
800003c4:	f4f664e3          	bltu	a2,a5,8000030c <__udivdi3+0x128>
800003c8:	01800693          	li	a3,24
800003cc:	f41ff06f          	j	8000030c <__udivdi3+0x128>
800003d0:	00b61733          	sll	a4,a2,a1
800003d4:	00f356b3          	srl	a3,t1,a5
800003d8:	01075513          	srli	a0,a4,0x10
800003dc:	00b31333          	sll	t1,t1,a1
800003e0:	00f8d7b3          	srl	a5,a7,a5
800003e4:	0067e7b3          	or	a5,a5,t1
800003e8:	02a6d333          	divu	t1,a3,a0
800003ec:	01071613          	slli	a2,a4,0x10
800003f0:	01065613          	srli	a2,a2,0x10
800003f4:	00b89833          	sll	a6,a7,a1
800003f8:	02a6f6b3          	remu	a3,a3,a0
800003fc:	026608b3          	mul	a7,a2,t1
80000400:	01069593          	slli	a1,a3,0x10
80000404:	0107d693          	srli	a3,a5,0x10
80000408:	00b6e6b3          	or	a3,a3,a1
8000040c:	00030593          	mv	a1,t1
80000410:	0116fe63          	bgeu	a3,a7,8000042c <__udivdi3+0x248>
80000414:	00d706b3          	add	a3,a4,a3
80000418:	fff30593          	addi	a1,t1,-1
8000041c:	00e6e863          	bltu	a3,a4,8000042c <__udivdi3+0x248>
80000420:	0116f663          	bgeu	a3,a7,8000042c <__udivdi3+0x248>
80000424:	ffe30593          	addi	a1,t1,-2
80000428:	00e686b3          	add	a3,a3,a4
8000042c:	411686b3          	sub	a3,a3,a7
80000430:	02a6d8b3          	divu	a7,a3,a0
80000434:	01079793          	slli	a5,a5,0x10
80000438:	0107d793          	srli	a5,a5,0x10
8000043c:	02a6f6b3          	remu	a3,a3,a0
80000440:	03160633          	mul	a2,a2,a7
80000444:	01069693          	slli	a3,a3,0x10
80000448:	00d7e7b3          	or	a5,a5,a3
8000044c:	00088693          	mv	a3,a7
80000450:	00c7fe63          	bgeu	a5,a2,8000046c <__udivdi3+0x288>
80000454:	00f707b3          	add	a5,a4,a5
80000458:	fff88693          	addi	a3,a7,-1
8000045c:	00e7e863          	bltu	a5,a4,8000046c <__udivdi3+0x288>
80000460:	00c7f663          	bgeu	a5,a2,8000046c <__udivdi3+0x288>
80000464:	ffe88693          	addi	a3,a7,-2
80000468:	00e787b3          	add	a5,a5,a4
8000046c:	01059593          	slli	a1,a1,0x10
80000470:	40c787b3          	sub	a5,a5,a2
80000474:	00d5e5b3          	or	a1,a1,a3
80000478:	eb9ff06f          	j	80000330 <__udivdi3+0x14c>
8000047c:	18d5e663          	bltu	a1,a3,80000608 <__udivdi3+0x424>
80000480:	000107b7          	lui	a5,0x10
80000484:	04f6f463          	bgeu	a3,a5,800004cc <__udivdi3+0x2e8>
80000488:	1006b713          	sltiu	a4,a3,256
8000048c:	00174713          	xori	a4,a4,1
80000490:	00371713          	slli	a4,a4,0x3
80000494:	800087b7          	lui	a5,0x80008
80000498:	00e6d5b3          	srl	a1,a3,a4
8000049c:	fac78793          	addi	a5,a5,-84 # 80007fac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007fad>
800004a0:	00b787b3          	add	a5,a5,a1
800004a4:	0007c783          	lbu	a5,0(a5)
800004a8:	00e787b3          	add	a5,a5,a4
800004ac:	02000713          	li	a4,32
800004b0:	40f705b3          	sub	a1,a4,a5
800004b4:	02f71663          	bne	a4,a5,800004e0 <__udivdi3+0x2fc>
800004b8:	00100513          	li	a0,1
800004bc:	e066eee3          	bltu	a3,t1,800002d8 <__udivdi3+0xf4>
800004c0:	00c8b533          	sltu	a0,a7,a2
800004c4:	00154513          	xori	a0,a0,1
800004c8:	00008067          	ret
800004cc:	010007b7          	lui	a5,0x1000
800004d0:	01000713          	li	a4,16
800004d4:	fcf6e0e3          	bltu	a3,a5,80000494 <__udivdi3+0x2b0>
800004d8:	01800713          	li	a4,24
800004dc:	fb9ff06f          	j	80000494 <__udivdi3+0x2b0>
800004e0:	00f65733          	srl	a4,a2,a5
800004e4:	00b696b3          	sll	a3,a3,a1
800004e8:	00d766b3          	or	a3,a4,a3
800004ec:	00f35733          	srl	a4,t1,a5
800004f0:	00b31333          	sll	t1,t1,a1
800004f4:	00f8d7b3          	srl	a5,a7,a5
800004f8:	0067e7b3          	or	a5,a5,t1
800004fc:	0106d313          	srli	t1,a3,0x10
80000500:	02675eb3          	divu	t4,a4,t1
80000504:	01069813          	slli	a6,a3,0x10
80000508:	01085813          	srli	a6,a6,0x10
8000050c:	00b61633          	sll	a2,a2,a1
80000510:	02677733          	remu	a4,a4,t1
80000514:	03d80e33          	mul	t3,a6,t4
80000518:	01071513          	slli	a0,a4,0x10
8000051c:	0107d713          	srli	a4,a5,0x10
80000520:	00a76733          	or	a4,a4,a0
80000524:	000e8513          	mv	a0,t4
80000528:	01c77e63          	bgeu	a4,t3,80000544 <__udivdi3+0x360>
8000052c:	00e68733          	add	a4,a3,a4
80000530:	fffe8513          	addi	a0,t4,-1
80000534:	00d76863          	bltu	a4,a3,80000544 <__udivdi3+0x360>
80000538:	01c77663          	bgeu	a4,t3,80000544 <__udivdi3+0x360>
8000053c:	ffee8513          	addi	a0,t4,-2
80000540:	00d70733          	add	a4,a4,a3
80000544:	41c70733          	sub	a4,a4,t3
80000548:	02675e33          	divu	t3,a4,t1
8000054c:	01079793          	slli	a5,a5,0x10
80000550:	0107d793          	srli	a5,a5,0x10
80000554:	02677733          	remu	a4,a4,t1
80000558:	03c80833          	mul	a6,a6,t3
8000055c:	01071713          	slli	a4,a4,0x10
80000560:	00e7e7b3          	or	a5,a5,a4
80000564:	000e0713          	mv	a4,t3
80000568:	0107fe63          	bgeu	a5,a6,80000584 <__udivdi3+0x3a0>
8000056c:	00f687b3          	add	a5,a3,a5
80000570:	fffe0713          	addi	a4,t3,-1
80000574:	00d7e863          	bltu	a5,a3,80000584 <__udivdi3+0x3a0>
80000578:	0107f663          	bgeu	a5,a6,80000584 <__udivdi3+0x3a0>
8000057c:	ffee0713          	addi	a4,t3,-2
80000580:	00d787b3          	add	a5,a5,a3
80000584:	01051513          	slli	a0,a0,0x10
80000588:	00010e37          	lui	t3,0x10
8000058c:	00e56533          	or	a0,a0,a4
80000590:	fffe0693          	addi	a3,t3,-1 # ffff <__rom_region_size+0x7a63>
80000594:	00d57733          	and	a4,a0,a3
80000598:	410787b3          	sub	a5,a5,a6
8000059c:	00d676b3          	and	a3,a2,a3
800005a0:	01055813          	srli	a6,a0,0x10
800005a4:	01065613          	srli	a2,a2,0x10
800005a8:	02d70333          	mul	t1,a4,a3
800005ac:	02d806b3          	mul	a3,a6,a3
800005b0:	02c70733          	mul	a4,a4,a2
800005b4:	02c80833          	mul	a6,a6,a2
800005b8:	00d70633          	add	a2,a4,a3
800005bc:	01035713          	srli	a4,t1,0x10
800005c0:	00c70733          	add	a4,a4,a2
800005c4:	00d77463          	bgeu	a4,a3,800005cc <__udivdi3+0x3e8>
800005c8:	01c80833          	add	a6,a6,t3
800005cc:	01075693          	srli	a3,a4,0x10
800005d0:	010686b3          	add	a3,a3,a6
800005d4:	02d7e663          	bltu	a5,a3,80000600 <__udivdi3+0x41c>
800005d8:	ced79ee3          	bne	a5,a3,800002d4 <__udivdi3+0xf0>
800005dc:	000107b7          	lui	a5,0x10
800005e0:	fff78793          	addi	a5,a5,-1 # ffff <__rom_region_size+0x7a63>
800005e4:	00f77733          	and	a4,a4,a5
800005e8:	01071713          	slli	a4,a4,0x10
800005ec:	00f37333          	and	t1,t1,a5
800005f0:	00b898b3          	sll	a7,a7,a1
800005f4:	00670733          	add	a4,a4,t1
800005f8:	00000593          	li	a1,0
800005fc:	cce8fee3          	bgeu	a7,a4,800002d8 <__udivdi3+0xf4>
80000600:	fff50513          	addi	a0,a0,-1 # ffffff <CONFIG_SRAM_SIZE+0xefffff>
80000604:	cd1ff06f          	j	800002d4 <__udivdi3+0xf0>
80000608:	00000593          	li	a1,0
8000060c:	00000513          	li	a0,0
80000610:	00008067          	ret

80000614 <__umoddi3>:
80000614:	00060813          	mv	a6,a2
80000618:	00050793          	mv	a5,a0
8000061c:	00058713          	mv	a4,a1
80000620:	20069663          	bnez	a3,8000082c <__umoddi3+0x218>
80000624:	800088b7          	lui	a7,0x80008
80000628:	fac88893          	addi	a7,a7,-84 # 80007fac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007fad>
8000062c:	0cc5fc63          	bgeu	a1,a2,80000704 <__umoddi3+0xf0>
80000630:	000106b7          	lui	a3,0x10
80000634:	0ad67e63          	bgeu	a2,a3,800006f0 <__umoddi3+0xdc>
80000638:	10063693          	sltiu	a3,a2,256
8000063c:	0016c693          	xori	a3,a3,1
80000640:	00369693          	slli	a3,a3,0x3
80000644:	00d65333          	srl	t1,a2,a3
80000648:	006888b3          	add	a7,a7,t1
8000064c:	0008c883          	lbu	a7,0(a7)
80000650:	02000313          	li	t1,32
80000654:	00d886b3          	add	a3,a7,a3
80000658:	40d308b3          	sub	a7,t1,a3
8000065c:	00d30c63          	beq	t1,a3,80000674 <__umoddi3+0x60>
80000660:	01159733          	sll	a4,a1,a7
80000664:	00d556b3          	srl	a3,a0,a3
80000668:	01161833          	sll	a6,a2,a7
8000066c:	00e6e733          	or	a4,a3,a4
80000670:	011517b3          	sll	a5,a0,a7
80000674:	01085613          	srli	a2,a6,0x10
80000678:	02c756b3          	divu	a3,a4,a2
8000067c:	01081513          	slli	a0,a6,0x10
80000680:	01055513          	srli	a0,a0,0x10
80000684:	02c77733          	remu	a4,a4,a2
80000688:	02a686b3          	mul	a3,a3,a0
8000068c:	01071593          	slli	a1,a4,0x10
80000690:	0107d713          	srli	a4,a5,0x10
80000694:	00b76733          	or	a4,a4,a1
80000698:	00d77a63          	bgeu	a4,a3,800006ac <__umoddi3+0x98>
8000069c:	00e80733          	add	a4,a6,a4
800006a0:	01076663          	bltu	a4,a6,800006ac <__umoddi3+0x98>
800006a4:	00d77463          	bgeu	a4,a3,800006ac <__umoddi3+0x98>
800006a8:	01070733          	add	a4,a4,a6
800006ac:	40d70733          	sub	a4,a4,a3
800006b0:	02c756b3          	divu	a3,a4,a2
800006b4:	02c77733          	remu	a4,a4,a2
800006b8:	02a686b3          	mul	a3,a3,a0
800006bc:	01079793          	slli	a5,a5,0x10
800006c0:	01071713          	slli	a4,a4,0x10
800006c4:	0107d793          	srli	a5,a5,0x10
800006c8:	00e7e7b3          	or	a5,a5,a4
800006cc:	00d7fa63          	bgeu	a5,a3,800006e0 <__umoddi3+0xcc>
800006d0:	00f807b3          	add	a5,a6,a5
800006d4:	0107e663          	bltu	a5,a6,800006e0 <__umoddi3+0xcc>
800006d8:	00d7f463          	bgeu	a5,a3,800006e0 <__umoddi3+0xcc>
800006dc:	010787b3          	add	a5,a5,a6
800006e0:	40d787b3          	sub	a5,a5,a3
800006e4:	0117d533          	srl	a0,a5,a7
800006e8:	00000593          	li	a1,0
800006ec:	00008067          	ret
800006f0:	01000337          	lui	t1,0x1000
800006f4:	01000693          	li	a3,16
800006f8:	f46666e3          	bltu	a2,t1,80000644 <__umoddi3+0x30>
800006fc:	01800693          	li	a3,24
80000700:	f45ff06f          	j	80000644 <__umoddi3+0x30>
80000704:	00000693          	li	a3,0
80000708:	00060c63          	beqz	a2,80000720 <__umoddi3+0x10c>
8000070c:	00010737          	lui	a4,0x10
80000710:	06e67e63          	bgeu	a2,a4,8000078c <__umoddi3+0x178>
80000714:	10063693          	sltiu	a3,a2,256
80000718:	0016c693          	xori	a3,a3,1
8000071c:	00369693          	slli	a3,a3,0x3
80000720:	00d65733          	srl	a4,a2,a3
80000724:	00e888b3          	add	a7,a7,a4
80000728:	0008c703          	lbu	a4,0(a7)
8000072c:	00d70733          	add	a4,a4,a3
80000730:	02000693          	li	a3,32
80000734:	40e688b3          	sub	a7,a3,a4
80000738:	06e69463          	bne	a3,a4,800007a0 <__umoddi3+0x18c>
8000073c:	40c58733          	sub	a4,a1,a2
80000740:	01085593          	srli	a1,a6,0x10
80000744:	02b75633          	divu	a2,a4,a1
80000748:	01081513          	slli	a0,a6,0x10
8000074c:	01055513          	srli	a0,a0,0x10
80000750:	0107d693          	srli	a3,a5,0x10
80000754:	02b77733          	remu	a4,a4,a1
80000758:	02a60633          	mul	a2,a2,a0
8000075c:	01071713          	slli	a4,a4,0x10
80000760:	00e6e733          	or	a4,a3,a4
80000764:	00c77a63          	bgeu	a4,a2,80000778 <__umoddi3+0x164>
80000768:	00e80733          	add	a4,a6,a4
8000076c:	01076663          	bltu	a4,a6,80000778 <__umoddi3+0x164>
80000770:	00c77463          	bgeu	a4,a2,80000778 <__umoddi3+0x164>
80000774:	01070733          	add	a4,a4,a6
80000778:	40c70733          	sub	a4,a4,a2
8000077c:	02b756b3          	divu	a3,a4,a1
80000780:	02b77733          	remu	a4,a4,a1
80000784:	02a686b3          	mul	a3,a3,a0
80000788:	f35ff06f          	j	800006bc <__umoddi3+0xa8>
8000078c:	01000737          	lui	a4,0x1000
80000790:	01000693          	li	a3,16
80000794:	f8e666e3          	bltu	a2,a4,80000720 <__umoddi3+0x10c>
80000798:	01800693          	li	a3,24
8000079c:	f85ff06f          	j	80000720 <__umoddi3+0x10c>
800007a0:	01161833          	sll	a6,a2,a7
800007a4:	00e5d6b3          	srl	a3,a1,a4
800007a8:	011517b3          	sll	a5,a0,a7
800007ac:	011595b3          	sll	a1,a1,a7
800007b0:	00e55733          	srl	a4,a0,a4
800007b4:	01085513          	srli	a0,a6,0x10
800007b8:	00b76733          	or	a4,a4,a1
800007bc:	02a6d5b3          	divu	a1,a3,a0
800007c0:	01081313          	slli	t1,a6,0x10
800007c4:	01035313          	srli	t1,t1,0x10
800007c8:	02a6f6b3          	remu	a3,a3,a0
800007cc:	026585b3          	mul	a1,a1,t1
800007d0:	01069613          	slli	a2,a3,0x10
800007d4:	01075693          	srli	a3,a4,0x10
800007d8:	00c6e6b3          	or	a3,a3,a2
800007dc:	00b6fa63          	bgeu	a3,a1,800007f0 <__umoddi3+0x1dc>
800007e0:	00d806b3          	add	a3,a6,a3
800007e4:	0106e663          	bltu	a3,a6,800007f0 <__umoddi3+0x1dc>
800007e8:	00b6f463          	bgeu	a3,a1,800007f0 <__umoddi3+0x1dc>
800007ec:	010686b3          	add	a3,a3,a6
800007f0:	40b686b3          	sub	a3,a3,a1
800007f4:	02a6d633          	divu	a2,a3,a0
800007f8:	01071713          	slli	a4,a4,0x10
800007fc:	01075713          	srli	a4,a4,0x10
80000800:	02a6f6b3          	remu	a3,a3,a0
80000804:	02660633          	mul	a2,a2,t1
80000808:	01069693          	slli	a3,a3,0x10
8000080c:	00d76733          	or	a4,a4,a3
80000810:	00c77a63          	bgeu	a4,a2,80000824 <__umoddi3+0x210>
80000814:	00e80733          	add	a4,a6,a4
80000818:	01076663          	bltu	a4,a6,80000824 <__umoddi3+0x210>
8000081c:	00c77463          	bgeu	a4,a2,80000824 <__umoddi3+0x210>
80000820:	01070733          	add	a4,a4,a6
80000824:	40c70733          	sub	a4,a4,a2
80000828:	f19ff06f          	j	80000740 <__umoddi3+0x12c>
8000082c:	1cd5e463          	bltu	a1,a3,800009f4 <__umoddi3+0x3e0>
80000830:	00010837          	lui	a6,0x10
80000834:	0506fe63          	bgeu	a3,a6,80000890 <__umoddi3+0x27c>
80000838:	1006b813          	sltiu	a6,a3,256
8000083c:	00184813          	xori	a6,a6,1
80000840:	00381813          	slli	a6,a6,0x3
80000844:	800088b7          	lui	a7,0x80008
80000848:	0106d333          	srl	t1,a3,a6
8000084c:	fac88893          	addi	a7,a7,-84 # 80007fac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007fad>
80000850:	006888b3          	add	a7,a7,t1
80000854:	0008c883          	lbu	a7,0(a7)
80000858:	02000313          	li	t1,32
8000085c:	010888b3          	add	a7,a7,a6
80000860:	41130833          	sub	a6,t1,a7
80000864:	05131063          	bne	t1,a7,800008a4 <__umoddi3+0x290>
80000868:	00b6e463          	bltu	a3,a1,80000870 <__umoddi3+0x25c>
8000086c:	00c56c63          	bltu	a0,a2,80000884 <__umoddi3+0x270>
80000870:	40c50633          	sub	a2,a0,a2
80000874:	40d586b3          	sub	a3,a1,a3
80000878:	00c53733          	sltu	a4,a0,a2
8000087c:	00060793          	mv	a5,a2
80000880:	40e68733          	sub	a4,a3,a4
80000884:	00078513          	mv	a0,a5
80000888:	00070593          	mv	a1,a4
8000088c:	00008067          	ret
80000890:	010008b7          	lui	a7,0x1000
80000894:	01000813          	li	a6,16
80000898:	fb16e6e3          	bltu	a3,a7,80000844 <__umoddi3+0x230>
8000089c:	01800813          	li	a6,24
800008a0:	fa5ff06f          	j	80000844 <__umoddi3+0x230>
800008a4:	011657b3          	srl	a5,a2,a7
800008a8:	010696b3          	sll	a3,a3,a6
800008ac:	00d7e6b3          	or	a3,a5,a3
800008b0:	0115d733          	srl	a4,a1,a7
800008b4:	0106de13          	srli	t3,a3,0x10
800008b8:	03c75f33          	divu	t5,a4,t3
800008bc:	01069313          	slli	t1,a3,0x10
800008c0:	01035313          	srli	t1,t1,0x10
800008c4:	010597b3          	sll	a5,a1,a6
800008c8:	011555b3          	srl	a1,a0,a7
800008cc:	00f5e5b3          	or	a1,a1,a5
800008d0:	0105d793          	srli	a5,a1,0x10
800008d4:	01061633          	sll	a2,a2,a6
800008d8:	01051533          	sll	a0,a0,a6
800008dc:	03c77733          	remu	a4,a4,t3
800008e0:	03e30eb3          	mul	t4,t1,t5
800008e4:	01071713          	slli	a4,a4,0x10
800008e8:	00e7e7b3          	or	a5,a5,a4
800008ec:	000f0713          	mv	a4,t5
800008f0:	01d7fe63          	bgeu	a5,t4,8000090c <__umoddi3+0x2f8>
800008f4:	00f687b3          	add	a5,a3,a5
800008f8:	ffff0713          	addi	a4,t5,-1
800008fc:	00d7e863          	bltu	a5,a3,8000090c <__umoddi3+0x2f8>
80000900:	01d7f663          	bgeu	a5,t4,8000090c <__umoddi3+0x2f8>
80000904:	ffef0713          	addi	a4,t5,-2
80000908:	00d787b3          	add	a5,a5,a3
8000090c:	41d787b3          	sub	a5,a5,t4
80000910:	03c7deb3          	divu	t4,a5,t3
80000914:	01059593          	slli	a1,a1,0x10
80000918:	0105d593          	srli	a1,a1,0x10
8000091c:	03c7f7b3          	remu	a5,a5,t3
80000920:	000e8e13          	mv	t3,t4
80000924:	03d30333          	mul	t1,t1,t4
80000928:	01079793          	slli	a5,a5,0x10
8000092c:	00f5e5b3          	or	a1,a1,a5
80000930:	0065fe63          	bgeu	a1,t1,8000094c <__umoddi3+0x338>
80000934:	00b685b3          	add	a1,a3,a1
80000938:	fffe8e13          	addi	t3,t4,-1
8000093c:	00d5e863          	bltu	a1,a3,8000094c <__umoddi3+0x338>
80000940:	0065f663          	bgeu	a1,t1,8000094c <__umoddi3+0x338>
80000944:	ffee8e13          	addi	t3,t4,-2
80000948:	00d585b3          	add	a1,a1,a3
8000094c:	01071793          	slli	a5,a4,0x10
80000950:	00010f37          	lui	t5,0x10
80000954:	01c7e7b3          	or	a5,a5,t3
80000958:	406585b3          	sub	a1,a1,t1
8000095c:	ffff0313          	addi	t1,t5,-1 # ffff <__rom_region_size+0x7a63>
80000960:	0067f733          	and	a4,a5,t1
80000964:	01065e13          	srli	t3,a2,0x10
80000968:	0107d793          	srli	a5,a5,0x10
8000096c:	00667333          	and	t1,a2,t1
80000970:	02670eb3          	mul	t4,a4,t1
80000974:	02678333          	mul	t1,a5,t1
80000978:	03c70733          	mul	a4,a4,t3
8000097c:	03c787b3          	mul	a5,a5,t3
80000980:	00670e33          	add	t3,a4,t1
80000984:	010ed713          	srli	a4,t4,0x10
80000988:	01c70733          	add	a4,a4,t3
8000098c:	00677463          	bgeu	a4,t1,80000994 <__umoddi3+0x380>
80000990:	01e787b3          	add	a5,a5,t5
80000994:	01075313          	srli	t1,a4,0x10
80000998:	00f307b3          	add	a5,t1,a5
8000099c:	00010337          	lui	t1,0x10
800009a0:	fff30313          	addi	t1,t1,-1 # ffff <__rom_region_size+0x7a63>
800009a4:	00677733          	and	a4,a4,t1
800009a8:	01071713          	slli	a4,a4,0x10
800009ac:	006efeb3          	and	t4,t4,t1
800009b0:	01d70733          	add	a4,a4,t4
800009b4:	00f5e663          	bltu	a1,a5,800009c0 <__umoddi3+0x3ac>
800009b8:	00f59e63          	bne	a1,a5,800009d4 <__umoddi3+0x3c0>
800009bc:	00e57c63          	bgeu	a0,a4,800009d4 <__umoddi3+0x3c0>
800009c0:	40c70633          	sub	a2,a4,a2
800009c4:	00c73333          	sltu	t1,a4,a2
800009c8:	00d306b3          	add	a3,t1,a3
800009cc:	00060713          	mv	a4,a2
800009d0:	40d787b3          	sub	a5,a5,a3
800009d4:	40e50733          	sub	a4,a0,a4
800009d8:	00e53533          	sltu	a0,a0,a4
800009dc:	40f585b3          	sub	a1,a1,a5
800009e0:	40a585b3          	sub	a1,a1,a0
800009e4:	011598b3          	sll	a7,a1,a7
800009e8:	01075733          	srl	a4,a4,a6
800009ec:	00e8e533          	or	a0,a7,a4
800009f0:	0105d5b3          	srl	a1,a1,a6
800009f4:	00008067          	ret

800009f8 <malloc>:
800009f8:	00308013          	addi	zero,ra,3
800009fc:	00050593          	mv	a1,a0
80000a00:	8141a503          	lw	a0,-2028(gp) # 8000add4 <_impure_ptr>
80000a04:	6c40006f          	j	800010c8 <_malloc_r>

80000a08 <free>:
80000a08:	00308013          	addi	zero,ra,3
80000a0c:	00050593          	mv	a1,a0
80000a10:	8141a503          	lw	a0,-2028(gp) # 8000add4 <_impure_ptr>
80000a14:	5480006f          	j	80000f5c <_free_r>

80000a18 <memcpy>:
80000a18:	00308013          	addi	zero,ra,3
80000a1c:	f9010113          	addi	sp,sp,-112
80000a20:	06812623          	sw	s0,108(sp)
80000a24:	07010413          	addi	s0,sp,112
80000a28:	f8a42e23          	sw	a0,-100(s0)
80000a2c:	f8b42c23          	sw	a1,-104(s0)
80000a30:	f8c42a23          	sw	a2,-108(s0)
80000a34:	f9c42783          	lw	a5,-100(s0)
80000a38:	fef42623          	sw	a5,-20(s0)
80000a3c:	f9842783          	lw	a5,-104(s0)
80000a40:	fef42423          	sw	a5,-24(s0)
80000a44:	fec42703          	lw	a4,-20(s0)
80000a48:	f9442783          	lw	a5,-108(s0)
80000a4c:	00f707b3          	add	a5,a4,a5
80000a50:	fcf42e23          	sw	a5,-36(s0)
80000a54:	00300793          	li	a5,3
80000a58:	fcf42c23          	sw	a5,-40(s0)
80000a5c:	fec42703          	lw	a4,-20(s0)
80000a60:	fe842783          	lw	a5,-24(s0)
80000a64:	00f74733          	xor	a4,a4,a5
80000a68:	fd842783          	lw	a5,-40(s0)
80000a6c:	00f777b3          	and	a5,a4,a5
80000a70:	00f037b3          	snez	a5,a5
80000a74:	0ff7f793          	zext.b	a5,a5
80000a78:	00079a63          	bnez	a5,80000a8c <memcpy+0x74>
80000a7c:	f9442783          	lw	a5,-108(s0)
80000a80:	0047b793          	sltiu	a5,a5,4
80000a84:	0ff7f793          	zext.b	a5,a5
80000a88:	06078863          	beqz	a5,80000af8 <memcpy+0xe0>
80000a8c:	00000013          	nop
80000a90:	0080006f          	j	80000a98 <memcpy+0x80>
80000a94:	00000013          	nop
80000a98:	fec42703          	lw	a4,-20(s0)
80000a9c:	fdc42783          	lw	a5,-36(s0)
80000aa0:	00f737b3          	sltu	a5,a4,a5
80000aa4:	0ff7f793          	zext.b	a5,a5
80000aa8:	04078463          	beqz	a5,80000af0 <memcpy+0xd8>
80000aac:	0380006f          	j	80000ae4 <memcpy+0xcc>
80000ab0:	fe842783          	lw	a5,-24(s0)
80000ab4:	0007c783          	lbu	a5,0(a5)
80000ab8:	faf403a3          	sb	a5,-89(s0)
80000abc:	fec42783          	lw	a5,-20(s0)
80000ac0:	00178793          	addi	a5,a5,1
80000ac4:	fef42623          	sw	a5,-20(s0)
80000ac8:	fe842783          	lw	a5,-24(s0)
80000acc:	00178793          	addi	a5,a5,1
80000ad0:	fef42423          	sw	a5,-24(s0)
80000ad4:	fec42783          	lw	a5,-20(s0)
80000ad8:	fff78793          	addi	a5,a5,-1
80000adc:	fa744703          	lbu	a4,-89(s0)
80000ae0:	00e78023          	sb	a4,0(a5)
80000ae4:	fec42703          	lw	a4,-20(s0)
80000ae8:	fdc42783          	lw	a5,-36(s0)
80000aec:	fcf762e3          	bltu	a4,a5,80000ab0 <memcpy+0x98>
80000af0:	f9c42783          	lw	a5,-100(s0)
80000af4:	2880006f          	j	80000d7c <memcpy+0x364>
80000af8:	fec42703          	lw	a4,-20(s0)
80000afc:	fd842783          	lw	a5,-40(s0)
80000b00:	00f777b3          	and	a5,a4,a5
80000b04:	00f037b3          	snez	a5,a5
80000b08:	0ff7f793          	zext.b	a5,a5
80000b0c:	04078663          	beqz	a5,80000b58 <memcpy+0x140>
80000b10:	0380006f          	j	80000b48 <memcpy+0x130>
80000b14:	fe842783          	lw	a5,-24(s0)
80000b18:	0007c783          	lbu	a5,0(a5)
80000b1c:	fcf40ba3          	sb	a5,-41(s0)
80000b20:	fec42783          	lw	a5,-20(s0)
80000b24:	00178793          	addi	a5,a5,1
80000b28:	fef42623          	sw	a5,-20(s0)
80000b2c:	fe842783          	lw	a5,-24(s0)
80000b30:	00178793          	addi	a5,a5,1
80000b34:	fef42423          	sw	a5,-24(s0)
80000b38:	fec42783          	lw	a5,-20(s0)
80000b3c:	fff78793          	addi	a5,a5,-1
80000b40:	fd744703          	lbu	a4,-41(s0)
80000b44:	00e78023          	sb	a4,0(a5)
80000b48:	fec42703          	lw	a4,-20(s0)
80000b4c:	fd842783          	lw	a5,-40(s0)
80000b50:	00f777b3          	and	a5,a4,a5
80000b54:	fc0790e3          	bnez	a5,80000b14 <memcpy+0xfc>
80000b58:	fec42783          	lw	a5,-20(s0)
80000b5c:	fef42223          	sw	a5,-28(s0)
80000b60:	fe842783          	lw	a5,-24(s0)
80000b64:	fef42023          	sw	a5,-32(s0)
80000b68:	fd842783          	lw	a5,-40(s0)
80000b6c:	fff7c713          	not	a4,a5
80000b70:	fdc42783          	lw	a5,-36(s0)
80000b74:	00f777b3          	and	a5,a4,a5
80000b78:	fcf42823          	sw	a5,-48(s0)
80000b7c:	fd042783          	lw	a5,-48(s0)
80000b80:	fe078793          	addi	a5,a5,-32
80000b84:	fe442703          	lw	a4,-28(s0)
80000b88:	00f737b3          	sltu	a5,a4,a5
80000b8c:	0ff7f793          	zext.b	a5,a5
80000b90:	1a078c63          	beqz	a5,80000d48 <memcpy+0x330>
80000b94:	16c0006f          	j	80000d00 <memcpy+0x2e8>
80000b98:	fe042783          	lw	a5,-32(s0)
80000b9c:	00478713          	addi	a4,a5,4
80000ba0:	fee42023          	sw	a4,-32(s0)
80000ba4:	0007a783          	lw	a5,0(a5)
80000ba8:	fcf42623          	sw	a5,-52(s0)
80000bac:	fe042783          	lw	a5,-32(s0)
80000bb0:	00478713          	addi	a4,a5,4
80000bb4:	fee42023          	sw	a4,-32(s0)
80000bb8:	0007a783          	lw	a5,0(a5)
80000bbc:	fcf42423          	sw	a5,-56(s0)
80000bc0:	fe042783          	lw	a5,-32(s0)
80000bc4:	00478713          	addi	a4,a5,4
80000bc8:	fee42023          	sw	a4,-32(s0)
80000bcc:	0007a783          	lw	a5,0(a5)
80000bd0:	fcf42223          	sw	a5,-60(s0)
80000bd4:	fe042783          	lw	a5,-32(s0)
80000bd8:	00478713          	addi	a4,a5,4
80000bdc:	fee42023          	sw	a4,-32(s0)
80000be0:	0007a783          	lw	a5,0(a5)
80000be4:	fcf42023          	sw	a5,-64(s0)
80000be8:	fe042783          	lw	a5,-32(s0)
80000bec:	00478713          	addi	a4,a5,4
80000bf0:	fee42023          	sw	a4,-32(s0)
80000bf4:	0007a783          	lw	a5,0(a5)
80000bf8:	faf42e23          	sw	a5,-68(s0)
80000bfc:	fe042783          	lw	a5,-32(s0)
80000c00:	00478713          	addi	a4,a5,4
80000c04:	fee42023          	sw	a4,-32(s0)
80000c08:	0007a783          	lw	a5,0(a5)
80000c0c:	faf42c23          	sw	a5,-72(s0)
80000c10:	fe042783          	lw	a5,-32(s0)
80000c14:	00478713          	addi	a4,a5,4
80000c18:	fee42023          	sw	a4,-32(s0)
80000c1c:	0007a783          	lw	a5,0(a5)
80000c20:	faf42a23          	sw	a5,-76(s0)
80000c24:	fe042783          	lw	a5,-32(s0)
80000c28:	00478713          	addi	a4,a5,4
80000c2c:	fee42023          	sw	a4,-32(s0)
80000c30:	0007a783          	lw	a5,0(a5)
80000c34:	faf42823          	sw	a5,-80(s0)
80000c38:	fe042783          	lw	a5,-32(s0)
80000c3c:	00478713          	addi	a4,a5,4
80000c40:	fee42023          	sw	a4,-32(s0)
80000c44:	0007a783          	lw	a5,0(a5)
80000c48:	faf42623          	sw	a5,-84(s0)
80000c4c:	fe442783          	lw	a5,-28(s0)
80000c50:	00478713          	addi	a4,a5,4
80000c54:	fee42223          	sw	a4,-28(s0)
80000c58:	fcc42703          	lw	a4,-52(s0)
80000c5c:	00e7a023          	sw	a4,0(a5)
80000c60:	fe442783          	lw	a5,-28(s0)
80000c64:	00478713          	addi	a4,a5,4
80000c68:	fee42223          	sw	a4,-28(s0)
80000c6c:	fc842703          	lw	a4,-56(s0)
80000c70:	00e7a023          	sw	a4,0(a5)
80000c74:	fe442783          	lw	a5,-28(s0)
80000c78:	00478713          	addi	a4,a5,4
80000c7c:	fee42223          	sw	a4,-28(s0)
80000c80:	fc442703          	lw	a4,-60(s0)
80000c84:	00e7a023          	sw	a4,0(a5)
80000c88:	fe442783          	lw	a5,-28(s0)
80000c8c:	00478713          	addi	a4,a5,4
80000c90:	fee42223          	sw	a4,-28(s0)
80000c94:	fc042703          	lw	a4,-64(s0)
80000c98:	00e7a023          	sw	a4,0(a5)
80000c9c:	fe442783          	lw	a5,-28(s0)
80000ca0:	00478713          	addi	a4,a5,4
80000ca4:	fee42223          	sw	a4,-28(s0)
80000ca8:	fbc42703          	lw	a4,-68(s0)
80000cac:	00e7a023          	sw	a4,0(a5)
80000cb0:	fe442783          	lw	a5,-28(s0)
80000cb4:	00478713          	addi	a4,a5,4
80000cb8:	fee42223          	sw	a4,-28(s0)
80000cbc:	fb842703          	lw	a4,-72(s0)
80000cc0:	00e7a023          	sw	a4,0(a5)
80000cc4:	fe442783          	lw	a5,-28(s0)
80000cc8:	00478713          	addi	a4,a5,4
80000ccc:	fee42223          	sw	a4,-28(s0)
80000cd0:	fb442703          	lw	a4,-76(s0)
80000cd4:	00e7a023          	sw	a4,0(a5)
80000cd8:	fe442783          	lw	a5,-28(s0)
80000cdc:	00478713          	addi	a4,a5,4
80000ce0:	fee42223          	sw	a4,-28(s0)
80000ce4:	fb042703          	lw	a4,-80(s0)
80000ce8:	00e7a023          	sw	a4,0(a5)
80000cec:	fe442783          	lw	a5,-28(s0)
80000cf0:	00478713          	addi	a4,a5,4
80000cf4:	fee42223          	sw	a4,-28(s0)
80000cf8:	fac42703          	lw	a4,-84(s0)
80000cfc:	00e7a023          	sw	a4,0(a5)
80000d00:	fd042783          	lw	a5,-48(s0)
80000d04:	fe078793          	addi	a5,a5,-32
80000d08:	fe442703          	lw	a4,-28(s0)
80000d0c:	e8f766e3          	bltu	a4,a5,80000b98 <memcpy+0x180>
80000d10:	0380006f          	j	80000d48 <memcpy+0x330>
80000d14:	fe042783          	lw	a5,-32(s0)
80000d18:	0007a783          	lw	a5,0(a5)
80000d1c:	faf42423          	sw	a5,-88(s0)
80000d20:	fe442783          	lw	a5,-28(s0)
80000d24:	00478793          	addi	a5,a5,4
80000d28:	fef42223          	sw	a5,-28(s0)
80000d2c:	fe042783          	lw	a5,-32(s0)
80000d30:	00478793          	addi	a5,a5,4
80000d34:	fef42023          	sw	a5,-32(s0)
80000d38:	fe442783          	lw	a5,-28(s0)
80000d3c:	ffc78793          	addi	a5,a5,-4
80000d40:	fa842703          	lw	a4,-88(s0)
80000d44:	00e7a023          	sw	a4,0(a5)
80000d48:	fe442703          	lw	a4,-28(s0)
80000d4c:	fd042783          	lw	a5,-48(s0)
80000d50:	fcf762e3          	bltu	a4,a5,80000d14 <memcpy+0x2fc>
80000d54:	fe442783          	lw	a5,-28(s0)
80000d58:	fef42623          	sw	a5,-20(s0)
80000d5c:	fe042783          	lw	a5,-32(s0)
80000d60:	fef42423          	sw	a5,-24(s0)
80000d64:	fec42703          	lw	a4,-20(s0)
80000d68:	fdc42783          	lw	a5,-36(s0)
80000d6c:	00f737b3          	sltu	a5,a4,a5
80000d70:	0ff7f793          	zext.b	a5,a5
80000d74:	d20790e3          	bnez	a5,80000a94 <memcpy+0x7c>
80000d78:	f9c42783          	lw	a5,-100(s0)
80000d7c:	00078513          	mv	a0,a5
80000d80:	06c12403          	lw	s0,108(sp)
80000d84:	07010113          	addi	sp,sp,112
80000d88:	00008067          	ret

80000d8c <memset>:
80000d8c:	00308013          	addi	zero,ra,3
80000d90:	fc010113          	addi	sp,sp,-64
80000d94:	02812e23          	sw	s0,60(sp)
80000d98:	04010413          	addi	s0,sp,64
80000d9c:	fca42623          	sw	a0,-52(s0)
80000da0:	fcb42423          	sw	a1,-56(s0)
80000da4:	fcc42223          	sw	a2,-60(s0)
80000da8:	fcc42783          	lw	a5,-52(s0)
80000dac:	fef42623          	sw	a5,-20(s0)
80000db0:	fc842783          	lw	a5,-56(s0)
80000db4:	0ff7f793          	zext.b	a5,a5
80000db8:	fcf42e23          	sw	a5,-36(s0)
80000dbc:	0380006f          	j	80000df4 <memset+0x68>
80000dc0:	fc442783          	lw	a5,-60(s0)
80000dc4:	fff78713          	addi	a4,a5,-1
80000dc8:	fce42223          	sw	a4,-60(s0)
80000dcc:	02078063          	beqz	a5,80000dec <memset+0x60>
80000dd0:	fec42783          	lw	a5,-20(s0)
80000dd4:	00178713          	addi	a4,a5,1
80000dd8:	fee42623          	sw	a4,-20(s0)
80000ddc:	fc842703          	lw	a4,-56(s0)
80000de0:	0ff77713          	zext.b	a4,a4
80000de4:	00e78023          	sb	a4,0(a5)
80000de8:	00c0006f          	j	80000df4 <memset+0x68>
80000dec:	fcc42783          	lw	a5,-52(s0)
80000df0:	15c0006f          	j	80000f4c <memset+0x1c0>
80000df4:	fec42783          	lw	a5,-20(s0)
80000df8:	0037f793          	andi	a5,a5,3
80000dfc:	fc0792e3          	bnez	a5,80000dc0 <memset+0x34>
80000e00:	fc442703          	lw	a4,-60(s0)
80000e04:	00300793          	li	a5,3
80000e08:	12e7f863          	bgeu	a5,a4,80000f38 <memset+0x1ac>
80000e0c:	fec42783          	lw	a5,-20(s0)
80000e10:	fef42023          	sw	a5,-32(s0)
80000e14:	fdc42783          	lw	a5,-36(s0)
80000e18:	00879793          	slli	a5,a5,0x8
80000e1c:	fdc42703          	lw	a4,-36(s0)
80000e20:	00f767b3          	or	a5,a4,a5
80000e24:	fef42223          	sw	a5,-28(s0)
80000e28:	fe442783          	lw	a5,-28(s0)
80000e2c:	01079793          	slli	a5,a5,0x10
80000e30:	fe442703          	lw	a4,-28(s0)
80000e34:	00f767b3          	or	a5,a4,a5
80000e38:	fef42223          	sw	a5,-28(s0)
80000e3c:	02000793          	li	a5,32
80000e40:	fef42423          	sw	a5,-24(s0)
80000e44:	0280006f          	j	80000e6c <memset+0xe0>
80000e48:	fe842783          	lw	a5,-24(s0)
80000e4c:	fe442703          	lw	a4,-28(s0)
80000e50:	00f717b3          	sll	a5,a4,a5
80000e54:	fe442703          	lw	a4,-28(s0)
80000e58:	00f767b3          	or	a5,a4,a5
80000e5c:	fef42223          	sw	a5,-28(s0)
80000e60:	fe842783          	lw	a5,-24(s0)
80000e64:	00179793          	slli	a5,a5,0x1
80000e68:	fef42423          	sw	a5,-24(s0)
80000e6c:	fe842703          	lw	a4,-24(s0)
80000e70:	01f00793          	li	a5,31
80000e74:	fce7fae3          	bgeu	a5,a4,80000e48 <memset+0xbc>
80000e78:	0600006f          	j	80000ed8 <memset+0x14c>
80000e7c:	fe042783          	lw	a5,-32(s0)
80000e80:	00478713          	addi	a4,a5,4
80000e84:	fee42023          	sw	a4,-32(s0)
80000e88:	fe442703          	lw	a4,-28(s0)
80000e8c:	00e7a023          	sw	a4,0(a5)
80000e90:	fe042783          	lw	a5,-32(s0)
80000e94:	00478713          	addi	a4,a5,4
80000e98:	fee42023          	sw	a4,-32(s0)
80000e9c:	fe442703          	lw	a4,-28(s0)
80000ea0:	00e7a023          	sw	a4,0(a5)
80000ea4:	fe042783          	lw	a5,-32(s0)
80000ea8:	00478713          	addi	a4,a5,4
80000eac:	fee42023          	sw	a4,-32(s0)
80000eb0:	fe442703          	lw	a4,-28(s0)
80000eb4:	00e7a023          	sw	a4,0(a5)
80000eb8:	fe042783          	lw	a5,-32(s0)
80000ebc:	00478713          	addi	a4,a5,4
80000ec0:	fee42023          	sw	a4,-32(s0)
80000ec4:	fe442703          	lw	a4,-28(s0)
80000ec8:	00e7a023          	sw	a4,0(a5)
80000ecc:	fc442783          	lw	a5,-60(s0)
80000ed0:	ff078793          	addi	a5,a5,-16
80000ed4:	fcf42223          	sw	a5,-60(s0)
80000ed8:	fc442703          	lw	a4,-60(s0)
80000edc:	00f00793          	li	a5,15
80000ee0:	f8e7eee3          	bltu	a5,a4,80000e7c <memset+0xf0>
80000ee4:	0240006f          	j	80000f08 <memset+0x17c>
80000ee8:	fe042783          	lw	a5,-32(s0)
80000eec:	00478713          	addi	a4,a5,4
80000ef0:	fee42023          	sw	a4,-32(s0)
80000ef4:	fe442703          	lw	a4,-28(s0)
80000ef8:	00e7a023          	sw	a4,0(a5)
80000efc:	fc442783          	lw	a5,-60(s0)
80000f00:	ffc78793          	addi	a5,a5,-4
80000f04:	fcf42223          	sw	a5,-60(s0)
80000f08:	fc442703          	lw	a4,-60(s0)
80000f0c:	00300793          	li	a5,3
80000f10:	fce7ece3          	bltu	a5,a4,80000ee8 <memset+0x15c>
80000f14:	fe042783          	lw	a5,-32(s0)
80000f18:	fef42623          	sw	a5,-20(s0)
80000f1c:	01c0006f          	j	80000f38 <memset+0x1ac>
80000f20:	fec42783          	lw	a5,-20(s0)
80000f24:	00178713          	addi	a4,a5,1
80000f28:	fee42623          	sw	a4,-20(s0)
80000f2c:	fc842703          	lw	a4,-56(s0)
80000f30:	0ff77713          	zext.b	a4,a4
80000f34:	00e78023          	sb	a4,0(a5)
80000f38:	fc442783          	lw	a5,-60(s0)
80000f3c:	fff78713          	addi	a4,a5,-1
80000f40:	fce42223          	sw	a4,-60(s0)
80000f44:	fc079ee3          	bnez	a5,80000f20 <memset+0x194>
80000f48:	fcc42783          	lw	a5,-52(s0)
80000f4c:	00078513          	mv	a0,a5
80000f50:	03c12403          	lw	s0,60(sp)
80000f54:	04010113          	addi	sp,sp,64
80000f58:	00008067          	ret

80000f5c <_free_r>:
80000f5c:	00308013          	addi	zero,ra,3
80000f60:	14058263          	beqz	a1,800010a4 <_free_r+0x148>
80000f64:	ffc5a783          	lw	a5,-4(a1)
80000f68:	ff010113          	addi	sp,sp,-16
80000f6c:	00812423          	sw	s0,8(sp)
80000f70:	00912223          	sw	s1,4(sp)
80000f74:	00112623          	sw	ra,12(sp)
80000f78:	00050493          	mv	s1,a0
80000f7c:	ffc58413          	addi	s0,a1,-4
80000f80:	0807c463          	bltz	a5,80001008 <_free_r+0xac>
80000f84:	00048513          	mv	a0,s1
80000f88:	6c0000ef          	jal	ra,80001648 <__malloc_lock>
80000f8c:	80008737          	lui	a4,0x80008
80000f90:	5a472783          	lw	a5,1444(a4) # 800085a4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085a5>
80000f94:	10078a63          	beqz	a5,800010a8 <_free_r+0x14c>
80000f98:	02f47a63          	bgeu	s0,a5,80000fcc <_free_r+0x70>
80000f9c:	00042683          	lw	a3,0(s0)
80000fa0:	00d40633          	add	a2,s0,a3
80000fa4:	0ac78e63          	beq	a5,a2,80001060 <_free_r+0x104>
80000fa8:	00f42223          	sw	a5,4(s0)
80000fac:	00048513          	mv	a0,s1
80000fb0:	5a872223          	sw	s0,1444(a4)
80000fb4:	00812403          	lw	s0,8(sp)
80000fb8:	00c12083          	lw	ra,12(sp)
80000fbc:	00412483          	lw	s1,4(sp)
80000fc0:	01010113          	addi	sp,sp,16
80000fc4:	6940006f          	j	80001658 <__malloc_unlock>
80000fc8:	04f46463          	bltu	s0,a5,80001010 <_free_r+0xb4>
80000fcc:	00078713          	mv	a4,a5
80000fd0:	0047a783          	lw	a5,4(a5)
80000fd4:	fe079ae3          	bnez	a5,80000fc8 <_free_r+0x6c>
80000fd8:	00072603          	lw	a2,0(a4)
80000fdc:	00c706b3          	add	a3,a4,a2
80000fe0:	06d40663          	beq	s0,a3,8000104c <_free_r+0xf0>
80000fe4:	0cd46a63          	bltu	s0,a3,800010b8 <_free_r+0x15c>
80000fe8:	00f42223          	sw	a5,4(s0)
80000fec:	00872223          	sw	s0,4(a4)
80000ff0:	00048513          	mv	a0,s1
80000ff4:	00812403          	lw	s0,8(sp)
80000ff8:	00c12083          	lw	ra,12(sp)
80000ffc:	00412483          	lw	s1,4(sp)
80001000:	01010113          	addi	sp,sp,16
80001004:	6540006f          	j	80001658 <__malloc_unlock>
80001008:	00f40433          	add	s0,s0,a5
8000100c:	f79ff06f          	j	80000f84 <_free_r+0x28>
80001010:	00072683          	lw	a3,0(a4)
80001014:	00d70633          	add	a2,a4,a3
80001018:	04860e63          	beq	a2,s0,80001074 <_free_r+0x118>
8000101c:	08c46e63          	bltu	s0,a2,800010b8 <_free_r+0x15c>
80001020:	00042683          	lw	a3,0(s0)
80001024:	00d40633          	add	a2,s0,a3
80001028:	fcc790e3          	bne	a5,a2,80000fe8 <_free_r+0x8c>
8000102c:	0007a603          	lw	a2,0(a5)
80001030:	0047a583          	lw	a1,4(a5)
80001034:	00048513          	mv	a0,s1
80001038:	00d607b3          	add	a5,a2,a3
8000103c:	00f42023          	sw	a5,0(s0)
80001040:	00b42223          	sw	a1,4(s0)
80001044:	00872223          	sw	s0,4(a4)
80001048:	fadff06f          	j	80000ff4 <_free_r+0x98>
8000104c:	00042783          	lw	a5,0(s0)
80001050:	00048513          	mv	a0,s1
80001054:	00c787b3          	add	a5,a5,a2
80001058:	00f72023          	sw	a5,0(a4)
8000105c:	f99ff06f          	j	80000ff4 <_free_r+0x98>
80001060:	0007a603          	lw	a2,0(a5)
80001064:	0047a783          	lw	a5,4(a5)
80001068:	00d606b3          	add	a3,a2,a3
8000106c:	00d42023          	sw	a3,0(s0)
80001070:	f39ff06f          	j	80000fa8 <_free_r+0x4c>
80001074:	00042603          	lw	a2,0(s0)
80001078:	00c686b3          	add	a3,a3,a2
8000107c:	00d72023          	sw	a3,0(a4)
80001080:	00d70633          	add	a2,a4,a3
80001084:	f6c796e3          	bne	a5,a2,80000ff0 <_free_r+0x94>
80001088:	0007a603          	lw	a2,0(a5)
8000108c:	0047a583          	lw	a1,4(a5)
80001090:	00048513          	mv	a0,s1
80001094:	00d607b3          	add	a5,a2,a3
80001098:	00f72023          	sw	a5,0(a4)
8000109c:	00b72223          	sw	a1,4(a4)
800010a0:	f55ff06f          	j	80000ff4 <_free_r+0x98>
800010a4:	00008067          	ret
800010a8:	00042223          	sw	zero,4(s0)
800010ac:	00048513          	mv	a0,s1
800010b0:	5a872223          	sw	s0,1444(a4)
800010b4:	f01ff06f          	j	80000fb4 <_free_r+0x58>
800010b8:	00c00793          	li	a5,12
800010bc:	00f4a023          	sw	a5,0(s1)
800010c0:	00048513          	mv	a0,s1
800010c4:	f31ff06f          	j	80000ff4 <_free_r+0x98>

800010c8 <_malloc_r>:
800010c8:	00308013          	addi	zero,ra,3
800010cc:	fe010113          	addi	sp,sp,-32
800010d0:	00912a23          	sw	s1,20(sp)
800010d4:	00358493          	addi	s1,a1,3
800010d8:	ffc4f493          	andi	s1,s1,-4
800010dc:	01212823          	sw	s2,16(sp)
800010e0:	00112e23          	sw	ra,28(sp)
800010e4:	00812c23          	sw	s0,24(sp)
800010e8:	01312623          	sw	s3,12(sp)
800010ec:	00848493          	addi	s1,s1,8
800010f0:	00c00793          	li	a5,12
800010f4:	00050913          	mv	s2,a0
800010f8:	04f4fe63          	bgeu	s1,a5,80001154 <_malloc_r+0x8c>
800010fc:	00c00493          	li	s1,12
80001100:	04b4ec63          	bltu	s1,a1,80001158 <_malloc_r+0x90>
80001104:	00090513          	mv	a0,s2
80001108:	540000ef          	jal	ra,80001648 <__malloc_lock>
8000110c:	800086b7          	lui	a3,0x80008
80001110:	5a46a703          	lw	a4,1444(a3) # 800085a4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085a5>
80001114:	04070a63          	beqz	a4,80001168 <_malloc_r+0xa0>
80001118:	00070413          	mv	s0,a4
8000111c:	0140006f          	j	80001130 <_malloc_r+0x68>
80001120:	00442783          	lw	a5,4(s0)
80001124:	00040713          	mv	a4,s0
80001128:	04078063          	beqz	a5,80001168 <_malloc_r+0xa0>
8000112c:	00078413          	mv	s0,a5
80001130:	00042783          	lw	a5,0(s0)
80001134:	409787b3          	sub	a5,a5,s1
80001138:	fe07c4e3          	bltz	a5,80001120 <_malloc_r+0x58>
8000113c:	00b00613          	li	a2,11
80001140:	0af66663          	bltu	a2,a5,800011ec <_malloc_r+0x124>
80001144:	00442783          	lw	a5,4(s0)
80001148:	0ee40063          	beq	s0,a4,80001228 <_malloc_r+0x160>
8000114c:	00f72223          	sw	a5,4(a4)
80001150:	0580006f          	j	800011a8 <_malloc_r+0xe0>
80001154:	fa04d6e3          	bgez	s1,80001100 <_malloc_r+0x38>
80001158:	00c00793          	li	a5,12
8000115c:	00f92023          	sw	a5,0(s2)
80001160:	00000513          	li	a0,0
80001164:	06c0006f          	j	800011d0 <_malloc_r+0x108>
80001168:	80008437          	lui	s0,0x80008
8000116c:	5a042783          	lw	a5,1440(s0) # 800085a0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085a1>
80001170:	0a078263          	beqz	a5,80001214 <_malloc_r+0x14c>
80001174:	00048593          	mv	a1,s1
80001178:	00090513          	mv	a0,s2
8000117c:	148000ef          	jal	ra,800012c4 <_sbrk_r>
80001180:	fff00993          	li	s3,-1
80001184:	07350c63          	beq	a0,s3,800011fc <_malloc_r+0x134>
80001188:	00350413          	addi	s0,a0,3
8000118c:	ffc47413          	andi	s0,s0,-4
80001190:	00850a63          	beq	a0,s0,800011a4 <_malloc_r+0xdc>
80001194:	40a405b3          	sub	a1,s0,a0
80001198:	00090513          	mv	a0,s2
8000119c:	128000ef          	jal	ra,800012c4 <_sbrk_r>
800011a0:	05350e63          	beq	a0,s3,800011fc <_malloc_r+0x134>
800011a4:	00942023          	sw	s1,0(s0)
800011a8:	00090513          	mv	a0,s2
800011ac:	4ac000ef          	jal	ra,80001658 <__malloc_unlock>
800011b0:	00b40513          	addi	a0,s0,11
800011b4:	00440793          	addi	a5,s0,4
800011b8:	ff857513          	andi	a0,a0,-8
800011bc:	40f50733          	sub	a4,a0,a5
800011c0:	00f50863          	beq	a0,a5,800011d0 <_malloc_r+0x108>
800011c4:	00e40433          	add	s0,s0,a4
800011c8:	40a787b3          	sub	a5,a5,a0
800011cc:	00f42023          	sw	a5,0(s0)
800011d0:	01c12083          	lw	ra,28(sp)
800011d4:	01812403          	lw	s0,24(sp)
800011d8:	01412483          	lw	s1,20(sp)
800011dc:	01012903          	lw	s2,16(sp)
800011e0:	00c12983          	lw	s3,12(sp)
800011e4:	02010113          	addi	sp,sp,32
800011e8:	00008067          	ret
800011ec:	00f42023          	sw	a5,0(s0)
800011f0:	00f40433          	add	s0,s0,a5
800011f4:	00942023          	sw	s1,0(s0)
800011f8:	fb1ff06f          	j	800011a8 <_malloc_r+0xe0>
800011fc:	00c00793          	li	a5,12
80001200:	00090513          	mv	a0,s2
80001204:	00f92023          	sw	a5,0(s2)
80001208:	450000ef          	jal	ra,80001658 <__malloc_unlock>
8000120c:	00000513          	li	a0,0
80001210:	fc1ff06f          	j	800011d0 <_malloc_r+0x108>
80001214:	00000593          	li	a1,0
80001218:	00090513          	mv	a0,s2
8000121c:	0a8000ef          	jal	ra,800012c4 <_sbrk_r>
80001220:	5aa42023          	sw	a0,1440(s0)
80001224:	f51ff06f          	j	80001174 <_malloc_r+0xac>
80001228:	5af6a223          	sw	a5,1444(a3)
8000122c:	f7dff06f          	j	800011a8 <_malloc_r+0xe0>

80001230 <_printf_r>:
80001230:	00308013          	addi	zero,ra,3
80001234:	fc010113          	addi	sp,sp,-64
80001238:	02c12423          	sw	a2,40(sp)
8000123c:	02d12623          	sw	a3,44(sp)
80001240:	02e12823          	sw	a4,48(sp)
80001244:	02f12a23          	sw	a5,52(sp)
80001248:	03012c23          	sw	a6,56(sp)
8000124c:	03112e23          	sw	a7,60(sp)
80001250:	00058613          	mv	a2,a1
80001254:	00852583          	lw	a1,8(a0)
80001258:	02810693          	addi	a3,sp,40
8000125c:	00112e23          	sw	ra,28(sp)
80001260:	00d12623          	sw	a3,12(sp)
80001264:	538000ef          	jal	ra,8000179c <_vfiprintf_r>
80001268:	01c12083          	lw	ra,28(sp)
8000126c:	04010113          	addi	sp,sp,64
80001270:	00008067          	ret

80001274 <printf>:
80001274:	00308013          	addi	zero,ra,3
80001278:	8141a303          	lw	t1,-2028(gp) # 8000add4 <_impure_ptr>
8000127c:	fc010113          	addi	sp,sp,-64
80001280:	02c12423          	sw	a2,40(sp)
80001284:	02d12623          	sw	a3,44(sp)
80001288:	02b12223          	sw	a1,36(sp)
8000128c:	02e12823          	sw	a4,48(sp)
80001290:	02f12a23          	sw	a5,52(sp)
80001294:	03012c23          	sw	a6,56(sp)
80001298:	03112e23          	sw	a7,60(sp)
8000129c:	00832583          	lw	a1,8(t1)
800012a0:	02410693          	addi	a3,sp,36
800012a4:	00050613          	mv	a2,a0
800012a8:	00030513          	mv	a0,t1
800012ac:	00112e23          	sw	ra,28(sp)
800012b0:	00d12623          	sw	a3,12(sp)
800012b4:	4e8000ef          	jal	ra,8000179c <_vfiprintf_r>
800012b8:	01c12083          	lw	ra,28(sp)
800012bc:	04010113          	addi	sp,sp,64
800012c0:	00008067          	ret

800012c4 <_sbrk_r>:
800012c4:	00308013          	addi	zero,ra,3
800012c8:	ff010113          	addi	sp,sp,-16
800012cc:	00812423          	sw	s0,8(sp)
800012d0:	00912223          	sw	s1,4(sp)
800012d4:	00050413          	mv	s0,a0
800012d8:	800084b7          	lui	s1,0x80008
800012dc:	00058513          	mv	a0,a1
800012e0:	00112623          	sw	ra,12(sp)
800012e4:	5a04a423          	sw	zero,1448(s1) # 800085a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085a9>
800012e8:	164040ef          	jal	ra,8000544c <_sbrk>
800012ec:	fff00793          	li	a5,-1
800012f0:	00f50c63          	beq	a0,a5,80001308 <_sbrk_r+0x44>
800012f4:	00c12083          	lw	ra,12(sp)
800012f8:	00812403          	lw	s0,8(sp)
800012fc:	00412483          	lw	s1,4(sp)
80001300:	01010113          	addi	sp,sp,16
80001304:	00008067          	ret
80001308:	5a84a783          	lw	a5,1448(s1)
8000130c:	fe0784e3          	beqz	a5,800012f4 <_sbrk_r+0x30>
80001310:	00c12083          	lw	ra,12(sp)
80001314:	00f42023          	sw	a5,0(s0)
80001318:	00812403          	lw	s0,8(sp)
8000131c:	00412483          	lw	s1,4(sp)
80001320:	01010113          	addi	sp,sp,16
80001324:	00008067          	ret

80001328 <__libc_detect_null>:
80001328:	00308013          	addi	zero,ra,3
8000132c:	fd010113          	addi	sp,sp,-48
80001330:	02812623          	sw	s0,44(sp)
80001334:	03010413          	addi	s0,sp,48
80001338:	fca42e23          	sw	a0,-36(s0)
8000133c:	7f7f87b7          	lui	a5,0x7f7f8
80001340:	f7f78793          	addi	a5,a5,-129 # 7f7f7f7f <CONFIG_SRAM_SIZE+0x7f6f7f7f>
80001344:	fef42623          	sw	a5,-20(s0)
80001348:	fdc42703          	lw	a4,-36(s0)
8000134c:	fec42783          	lw	a5,-20(s0)
80001350:	00f77733          	and	a4,a4,a5
80001354:	fec42783          	lw	a5,-20(s0)
80001358:	00f70733          	add	a4,a4,a5
8000135c:	fdc42783          	lw	a5,-36(s0)
80001360:	00f76733          	or	a4,a4,a5
80001364:	fec42783          	lw	a5,-20(s0)
80001368:	00f767b3          	or	a5,a4,a5
8000136c:	fff7c793          	not	a5,a5
80001370:	00078513          	mv	a0,a5
80001374:	02c12403          	lw	s0,44(sp)
80001378:	03010113          	addi	sp,sp,48
8000137c:	00008067          	ret

80001380 <strlen>:
80001380:	00308013          	addi	zero,ra,3
80001384:	fc010113          	addi	sp,sp,-64
80001388:	02112e23          	sw	ra,60(sp)
8000138c:	02812c23          	sw	s0,56(sp)
80001390:	04010413          	addi	s0,sp,64
80001394:	fca42623          	sw	a0,-52(s0)
80001398:	fcc42783          	lw	a5,-52(s0)
8000139c:	fef42423          	sw	a5,-24(s0)
800013a0:	fcc42783          	lw	a5,-52(s0)
800013a4:	0037f793          	andi	a5,a5,3
800013a8:	04078263          	beqz	a5,800013ec <strlen+0x6c>
800013ac:	fcc42783          	lw	a5,-52(s0)
800013b0:	0007c783          	lbu	a5,0(a5)
800013b4:	fef403a3          	sb	a5,-25(s0)
800013b8:	fcc42783          	lw	a5,-52(s0)
800013bc:	00178793          	addi	a5,a5,1
800013c0:	fcf42623          	sw	a5,-52(s0)
800013c4:	fe744783          	lbu	a5,-25(s0)
800013c8:	00079c63          	bnez	a5,800013e0 <strlen+0x60>
800013cc:	fcc42703          	lw	a4,-52(s0)
800013d0:	fe842783          	lw	a5,-24(s0)
800013d4:	40f707b3          	sub	a5,a4,a5
800013d8:	fff78793          	addi	a5,a5,-1
800013dc:	21c0006f          	j	800015f8 <strlen+0x278>
800013e0:	fcc42783          	lw	a5,-52(s0)
800013e4:	0037f793          	andi	a5,a5,3
800013e8:	fc0792e3          	bnez	a5,800013ac <strlen+0x2c>
800013ec:	fcc42783          	lw	a5,-52(s0)
800013f0:	fef42623          	sw	a5,-20(s0)
800013f4:	00000013          	nop
800013f8:	fec42783          	lw	a5,-20(s0)
800013fc:	00478713          	addi	a4,a5,4
80001400:	fee42623          	sw	a4,-20(s0)
80001404:	0007a783          	lw	a5,0(a5)
80001408:	00078513          	mv	a0,a5
8000140c:	f1dff0ef          	jal	ra,80001328 <__libc_detect_null>
80001410:	00050793          	mv	a5,a0
80001414:	fe0782e3          	beqz	a5,800013f8 <strlen+0x78>
80001418:	fec42783          	lw	a5,-20(s0)
8000141c:	fef42623          	sw	a5,-20(s0)
80001420:	fec42783          	lw	a5,-20(s0)
80001424:	fcf42623          	sw	a5,-52(s0)
80001428:	fcc42703          	lw	a4,-52(s0)
8000142c:	fe842783          	lw	a5,-24(s0)
80001430:	40f707b3          	sub	a5,a4,a5
80001434:	fef42023          	sw	a5,-32(s0)
80001438:	00400793          	li	a5,4
8000143c:	fcf42e23          	sw	a5,-36(s0)
80001440:	fdc42783          	lw	a5,-36(s0)
80001444:	40f007b3          	neg	a5,a5
80001448:	fcc42703          	lw	a4,-52(s0)
8000144c:	00f707b3          	add	a5,a4,a5
80001450:	0007c783          	lbu	a5,0(a5)
80001454:	fcf40da3          	sb	a5,-37(s0)
80001458:	00100713          	li	a4,1
8000145c:	fdc42783          	lw	a5,-36(s0)
80001460:	40f707b3          	sub	a5,a4,a5
80001464:	fcc42703          	lw	a4,-52(s0)
80001468:	00f707b3          	add	a5,a4,a5
8000146c:	0007c783          	lbu	a5,0(a5)
80001470:	fcf40d23          	sb	a5,-38(s0)
80001474:	00200713          	li	a4,2
80001478:	fdc42783          	lw	a5,-36(s0)
8000147c:	40f707b3          	sub	a5,a4,a5
80001480:	fcc42703          	lw	a4,-52(s0)
80001484:	00f707b3          	add	a5,a4,a5
80001488:	0007c783          	lbu	a5,0(a5)
8000148c:	fcf40ca3          	sb	a5,-39(s0)
80001490:	00300713          	li	a4,3
80001494:	fdc42783          	lw	a5,-36(s0)
80001498:	40f707b3          	sub	a5,a4,a5
8000149c:	fcc42703          	lw	a4,-52(s0)
800014a0:	00f707b3          	add	a5,a4,a5
800014a4:	0007c783          	lbu	a5,0(a5)
800014a8:	fcf40c23          	sb	a5,-40(s0)
800014ac:	fdb44783          	lbu	a5,-37(s0)
800014b0:	00079a63          	bnez	a5,800014c4 <strlen+0x144>
800014b4:	fe042703          	lw	a4,-32(s0)
800014b8:	fdc42783          	lw	a5,-36(s0)
800014bc:	40f707b3          	sub	a5,a4,a5
800014c0:	1380006f          	j	800015f8 <strlen+0x278>
800014c4:	fda44783          	lbu	a5,-38(s0)
800014c8:	00079c63          	bnez	a5,800014e0 <strlen+0x160>
800014cc:	fe042703          	lw	a4,-32(s0)
800014d0:	fdc42783          	lw	a5,-36(s0)
800014d4:	40f707b3          	sub	a5,a4,a5
800014d8:	00178793          	addi	a5,a5,1
800014dc:	11c0006f          	j	800015f8 <strlen+0x278>
800014e0:	fd944783          	lbu	a5,-39(s0)
800014e4:	00079c63          	bnez	a5,800014fc <strlen+0x17c>
800014e8:	fe042703          	lw	a4,-32(s0)
800014ec:	fdc42783          	lw	a5,-36(s0)
800014f0:	40f707b3          	sub	a5,a4,a5
800014f4:	00278793          	addi	a5,a5,2
800014f8:	1000006f          	j	800015f8 <strlen+0x278>
800014fc:	fdc42703          	lw	a4,-36(s0)
80001500:	00400793          	li	a5,4
80001504:	00f70663          	beq	a4,a5,80001510 <strlen+0x190>
80001508:	fd844783          	lbu	a5,-40(s0)
8000150c:	00079c63          	bnez	a5,80001524 <strlen+0x1a4>
80001510:	fe042703          	lw	a4,-32(s0)
80001514:	fdc42783          	lw	a5,-36(s0)
80001518:	40f707b3          	sub	a5,a4,a5
8000151c:	00378793          	addi	a5,a5,3
80001520:	0d80006f          	j	800015f8 <strlen+0x278>
80001524:	00400713          	li	a4,4
80001528:	fdc42783          	lw	a5,-36(s0)
8000152c:	40f707b3          	sub	a5,a4,a5
80001530:	fcc42703          	lw	a4,-52(s0)
80001534:	00f707b3          	add	a5,a4,a5
80001538:	0007c783          	lbu	a5,0(a5)
8000153c:	fcf40da3          	sb	a5,-37(s0)
80001540:	00500713          	li	a4,5
80001544:	fdc42783          	lw	a5,-36(s0)
80001548:	40f707b3          	sub	a5,a4,a5
8000154c:	fcc42703          	lw	a4,-52(s0)
80001550:	00f707b3          	add	a5,a4,a5
80001554:	0007c783          	lbu	a5,0(a5)
80001558:	fcf40d23          	sb	a5,-38(s0)
8000155c:	00600713          	li	a4,6
80001560:	fdc42783          	lw	a5,-36(s0)
80001564:	40f707b3          	sub	a5,a4,a5
80001568:	fcc42703          	lw	a4,-52(s0)
8000156c:	00f707b3          	add	a5,a4,a5
80001570:	0007c783          	lbu	a5,0(a5)
80001574:	fcf40ca3          	sb	a5,-39(s0)
80001578:	00700713          	li	a4,7
8000157c:	fdc42783          	lw	a5,-36(s0)
80001580:	40f707b3          	sub	a5,a4,a5
80001584:	fcc42703          	lw	a4,-52(s0)
80001588:	00f707b3          	add	a5,a4,a5
8000158c:	0007c783          	lbu	a5,0(a5)
80001590:	fcf40c23          	sb	a5,-40(s0)
80001594:	fdb44783          	lbu	a5,-37(s0)
80001598:	00079c63          	bnez	a5,800015b0 <strlen+0x230>
8000159c:	fe042703          	lw	a4,-32(s0)
800015a0:	fdc42783          	lw	a5,-36(s0)
800015a4:	40f707b3          	sub	a5,a4,a5
800015a8:	00478793          	addi	a5,a5,4
800015ac:	04c0006f          	j	800015f8 <strlen+0x278>
800015b0:	fda44783          	lbu	a5,-38(s0)
800015b4:	00079c63          	bnez	a5,800015cc <strlen+0x24c>
800015b8:	fe042703          	lw	a4,-32(s0)
800015bc:	fdc42783          	lw	a5,-36(s0)
800015c0:	40f707b3          	sub	a5,a4,a5
800015c4:	00578793          	addi	a5,a5,5
800015c8:	0300006f          	j	800015f8 <strlen+0x278>
800015cc:	fd944783          	lbu	a5,-39(s0)
800015d0:	00079c63          	bnez	a5,800015e8 <strlen+0x268>
800015d4:	fe042703          	lw	a4,-32(s0)
800015d8:	fdc42783          	lw	a5,-36(s0)
800015dc:	40f707b3          	sub	a5,a4,a5
800015e0:	00678793          	addi	a5,a5,6
800015e4:	0140006f          	j	800015f8 <strlen+0x278>
800015e8:	fe042703          	lw	a4,-32(s0)
800015ec:	fdc42783          	lw	a5,-36(s0)
800015f0:	40f707b3          	sub	a5,a4,a5
800015f4:	00778793          	addi	a5,a5,7
800015f8:	00078513          	mv	a0,a5
800015fc:	03c12083          	lw	ra,60(sp)
80001600:	03812403          	lw	s0,56(sp)
80001604:	04010113          	addi	sp,sp,64
80001608:	00008067          	ret

8000160c <strnlen>:
8000160c:	00308013          	addi	zero,ra,3
80001610:	00b506b3          	add	a3,a0,a1
80001614:	00050793          	mv	a5,a0
80001618:	00059863          	bnez	a1,80001628 <strnlen+0x1c>
8000161c:	0240006f          	j	80001640 <strnlen+0x34>
80001620:	00178793          	addi	a5,a5,1
80001624:	00f68a63          	beq	a3,a5,80001638 <strnlen+0x2c>
80001628:	0007c703          	lbu	a4,0(a5)
8000162c:	fe071ae3          	bnez	a4,80001620 <strnlen+0x14>
80001630:	40a78533          	sub	a0,a5,a0
80001634:	00008067          	ret
80001638:	40a68533          	sub	a0,a3,a0
8000163c:	00008067          	ret
80001640:	00000513          	li	a0,0
80001644:	00008067          	ret

80001648 <__malloc_lock>:
80001648:	00308013          	addi	zero,ra,3
8000164c:	8000b537          	lui	a0,0x8000b
80001650:	ddc50513          	addi	a0,a0,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001654:	6690306f          	j	800054bc <__retarget_lock_acquire_recursive>

80001658 <__malloc_unlock>:
80001658:	00308013          	addi	zero,ra,3
8000165c:	8000b537          	lui	a0,0x8000b
80001660:	ddc50513          	addi	a0,a0,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001664:	67d0306f          	j	800054e0 <__retarget_lock_release_recursive>

80001668 <__sfputc_r>:
80001668:	00308013          	addi	zero,ra,3
8000166c:	00862783          	lw	a5,8(a2)
80001670:	fff78793          	addi	a5,a5,-1
80001674:	00f62423          	sw	a5,8(a2)
80001678:	0007da63          	bgez	a5,8000168c <__sfputc_r+0x24>
8000167c:	01862703          	lw	a4,24(a2)
80001680:	02e7c263          	blt	a5,a4,800016a4 <__sfputc_r+0x3c>
80001684:	00a00793          	li	a5,10
80001688:	00f58e63          	beq	a1,a5,800016a4 <__sfputc_r+0x3c>
8000168c:	00062783          	lw	a5,0(a2)
80001690:	00058513          	mv	a0,a1
80001694:	00178713          	addi	a4,a5,1
80001698:	00e62023          	sw	a4,0(a2)
8000169c:	00b78023          	sb	a1,0(a5)
800016a0:	00008067          	ret
800016a4:	5780006f          	j	80001c1c <__swbuf_r>

800016a8 <__sfputs_r>:
800016a8:	00308013          	addi	zero,ra,3
800016ac:	08068c63          	beqz	a3,80001744 <__sfputs_r+0x9c>
800016b0:	fe010113          	addi	sp,sp,-32
800016b4:	00812c23          	sw	s0,24(sp)
800016b8:	00912a23          	sw	s1,20(sp)
800016bc:	01212823          	sw	s2,16(sp)
800016c0:	01312623          	sw	s3,12(sp)
800016c4:	01412423          	sw	s4,8(sp)
800016c8:	00112e23          	sw	ra,28(sp)
800016cc:	00050913          	mv	s2,a0
800016d0:	00058993          	mv	s3,a1
800016d4:	00060413          	mv	s0,a2
800016d8:	00d604b3          	add	s1,a2,a3
800016dc:	fff00a13          	li	s4,-1
800016e0:	0080006f          	j	800016e8 <__sfputs_r+0x40>
800016e4:	02940e63          	beq	s0,s1,80001720 <__sfputs_r+0x78>
800016e8:	00044583          	lbu	a1,0(s0)
800016ec:	00098613          	mv	a2,s3
800016f0:	00090513          	mv	a0,s2
800016f4:	f75ff0ef          	jal	ra,80001668 <__sfputc_r>
800016f8:	00140413          	addi	s0,s0,1
800016fc:	ff4514e3          	bne	a0,s4,800016e4 <__sfputs_r+0x3c>
80001700:	01c12083          	lw	ra,28(sp)
80001704:	01812403          	lw	s0,24(sp)
80001708:	01412483          	lw	s1,20(sp)
8000170c:	01012903          	lw	s2,16(sp)
80001710:	00c12983          	lw	s3,12(sp)
80001714:	00812a03          	lw	s4,8(sp)
80001718:	02010113          	addi	sp,sp,32
8000171c:	00008067          	ret
80001720:	01c12083          	lw	ra,28(sp)
80001724:	01812403          	lw	s0,24(sp)
80001728:	01412483          	lw	s1,20(sp)
8000172c:	01012903          	lw	s2,16(sp)
80001730:	00c12983          	lw	s3,12(sp)
80001734:	00812a03          	lw	s4,8(sp)
80001738:	00000513          	li	a0,0
8000173c:	02010113          	addi	sp,sp,32
80001740:	00008067          	ret
80001744:	00000513          	li	a0,0
80001748:	00008067          	ret

8000174c <__sprint_r>:
8000174c:	00308013          	addi	zero,ra,3
80001750:	00862783          	lw	a5,8(a2)
80001754:	ff010113          	addi	sp,sp,-16
80001758:	00812423          	sw	s0,8(sp)
8000175c:	00112623          	sw	ra,12(sp)
80001760:	00060413          	mv	s0,a2
80001764:	00079e63          	bnez	a5,80001780 <__sprint_r+0x34>
80001768:	00c12083          	lw	ra,12(sp)
8000176c:	00042223          	sw	zero,4(s0)
80001770:	00812403          	lw	s0,8(sp)
80001774:	00000513          	li	a0,0
80001778:	01010113          	addi	sp,sp,16
8000177c:	00008067          	ret
80001780:	7c1000ef          	jal	ra,80002740 <__sfvwrite_r>
80001784:	00c12083          	lw	ra,12(sp)
80001788:	00042423          	sw	zero,8(s0)
8000178c:	00042223          	sw	zero,4(s0)
80001790:	00812403          	lw	s0,8(sp)
80001794:	01010113          	addi	sp,sp,16
80001798:	00008067          	ret

8000179c <_vfiprintf_r>:
8000179c:	00308013          	addi	zero,ra,3
800017a0:	f4010113          	addi	sp,sp,-192
800017a4:	0a812c23          	sw	s0,184(sp)
800017a8:	0b312623          	sw	s3,172(sp)
800017ac:	0b412423          	sw	s4,168(sp)
800017b0:	09912a23          	sw	s9,148(sp)
800017b4:	0a112e23          	sw	ra,188(sp)
800017b8:	0a912a23          	sw	s1,180(sp)
800017bc:	0b212823          	sw	s2,176(sp)
800017c0:	0b512223          	sw	s5,164(sp)
800017c4:	0b612023          	sw	s6,160(sp)
800017c8:	09712e23          	sw	s7,156(sp)
800017cc:	09812c23          	sw	s8,152(sp)
800017d0:	09a12823          	sw	s10,144(sp)
800017d4:	09b12623          	sw	s11,140(sp)
800017d8:	00050a13          	mv	s4,a0
800017dc:	00058993          	mv	s3,a1
800017e0:	00060c93          	mv	s9,a2
800017e4:	00068413          	mv	s0,a3
800017e8:	00050663          	beqz	a0,800017f4 <_vfiprintf_r+0x58>
800017ec:	03852783          	lw	a5,56(a0)
800017f0:	3e078c63          	beqz	a5,80001be8 <_vfiprintf_r+0x44c>
800017f4:	0649a703          	lw	a4,100(s3)
800017f8:	00c99783          	lh	a5,12(s3)
800017fc:	00177713          	andi	a4,a4,1
80001800:	00071663          	bnez	a4,8000180c <_vfiprintf_r+0x70>
80001804:	2007f713          	andi	a4,a5,512
80001808:	3e070463          	beqz	a4,80001bf0 <_vfiprintf_r+0x454>
8000180c:	0087f793          	andi	a5,a5,8
80001810:	0e078863          	beqz	a5,80001900 <_vfiprintf_r+0x164>
80001814:	0109a783          	lw	a5,16(s3)
80001818:	0e078463          	beqz	a5,80001900 <_vfiprintf_r+0x164>
8000181c:	02000793          	li	a5,32
80001820:	02f10ca3          	sb	a5,57(sp)
80001824:	03000793          	li	a5,48
80001828:	02f10d23          	sb	a5,58(sp)
8000182c:	00000793          	li	a5,0
80001830:	02012a23          	sw	zero,52(sp)
80001834:	00812e23          	sw	s0,28(sp)
80001838:	800084b7          	lui	s1,0x80008
8000183c:	00100913          	li	s2,1
80001840:	80008b37          	lui	s6,0x80008
80001844:	80008bb7          	lui	s7,0x80008
80001848:	00f12623          	sw	a5,12(sp)
8000184c:	000cc783          	lbu	a5,0(s9)
80001850:	04078863          	beqz	a5,800018a0 <_vfiprintf_r+0x104>
80001854:	000c8413          	mv	s0,s9
80001858:	02500713          	li	a4,37
8000185c:	0ce78e63          	beq	a5,a4,80001938 <_vfiprintf_r+0x19c>
80001860:	00144783          	lbu	a5,1(s0)
80001864:	00140413          	addi	s0,s0,1
80001868:	fe079ae3          	bnez	a5,8000185c <_vfiprintf_r+0xc0>
8000186c:	41940db3          	sub	s11,s0,s9
80001870:	03940863          	beq	s0,s9,800018a0 <_vfiprintf_r+0x104>
80001874:	00000c13          	li	s8,0
80001878:	fff00d13          	li	s10,-1
8000187c:	0080006f          	j	80001884 <_vfiprintf_r+0xe8>
80001880:	2bbc7a63          	bgeu	s8,s11,80001b34 <_vfiprintf_r+0x398>
80001884:	018c8733          	add	a4,s9,s8
80001888:	00074583          	lbu	a1,0(a4)
8000188c:	00098613          	mv	a2,s3
80001890:	000a0513          	mv	a0,s4
80001894:	dd5ff0ef          	jal	ra,80001668 <__sfputc_r>
80001898:	001c0c13          	addi	s8,s8,1
8000189c:	ffa512e3          	bne	a0,s10,80001880 <_vfiprintf_r+0xe4>
800018a0:	0649a783          	lw	a5,100(s3)
800018a4:	0017f793          	andi	a5,a5,1
800018a8:	32079c63          	bnez	a5,80001be0 <_vfiprintf_r+0x444>
800018ac:	00c9d783          	lhu	a5,12(s3)
800018b0:	2007f713          	andi	a4,a5,512
800018b4:	32070263          	beqz	a4,80001bd8 <_vfiprintf_r+0x43c>
800018b8:	0407f793          	andi	a5,a5,64
800018bc:	06079a63          	bnez	a5,80001930 <_vfiprintf_r+0x194>
800018c0:	03412503          	lw	a0,52(sp)
800018c4:	0bc12083          	lw	ra,188(sp)
800018c8:	0b812403          	lw	s0,184(sp)
800018cc:	0b412483          	lw	s1,180(sp)
800018d0:	0b012903          	lw	s2,176(sp)
800018d4:	0ac12983          	lw	s3,172(sp)
800018d8:	0a812a03          	lw	s4,168(sp)
800018dc:	0a412a83          	lw	s5,164(sp)
800018e0:	0a012b03          	lw	s6,160(sp)
800018e4:	09c12b83          	lw	s7,156(sp)
800018e8:	09812c03          	lw	s8,152(sp)
800018ec:	09412c83          	lw	s9,148(sp)
800018f0:	09012d03          	lw	s10,144(sp)
800018f4:	08c12d83          	lw	s11,140(sp)
800018f8:	0c010113          	addi	sp,sp,192
800018fc:	00008067          	ret
80001900:	00098593          	mv	a1,s3
80001904:	000a0513          	mv	a0,s4
80001908:	470000ef          	jal	ra,80001d78 <__swsetup_r>
8000190c:	f00508e3          	beqz	a0,8000181c <_vfiprintf_r+0x80>
80001910:	0649a783          	lw	a5,100(s3)
80001914:	0017f793          	andi	a5,a5,1
80001918:	00079c63          	bnez	a5,80001930 <_vfiprintf_r+0x194>
8000191c:	00c9d783          	lhu	a5,12(s3)
80001920:	2007f793          	andi	a5,a5,512
80001924:	00079663          	bnez	a5,80001930 <_vfiprintf_r+0x194>
80001928:	0589a503          	lw	a0,88(s3)
8000192c:	3b5030ef          	jal	ra,800054e0 <__retarget_lock_release_recursive>
80001930:	fff00513          	li	a0,-1
80001934:	f91ff06f          	j	800018c4 <_vfiprintf_r+0x128>
80001938:	41940db3          	sub	s11,s0,s9
8000193c:	f3941ce3          	bne	s0,s9,80001874 <_vfiprintf_r+0xd8>
80001940:	00044783          	lbu	a5,0(s0)
80001944:	f4078ee3          	beqz	a5,800018a0 <_vfiprintf_r+0x104>
80001948:	fff00793          	li	a5,-1
8000194c:	00140413          	addi	s0,s0,1
80001950:	02012023          	sw	zero,32(sp)
80001954:	02012623          	sw	zero,44(sp)
80001958:	02f12223          	sw	a5,36(sp)
8000195c:	02012423          	sw	zero,40(sp)
80001960:	060101a3          	sb	zero,99(sp)
80001964:	06012c23          	sw	zero,120(sp)
80001968:	0140006f          	j	8000197c <_vfiprintf_r+0x1e0>
8000196c:	00070413          	mv	s0,a4
80001970:	02012703          	lw	a4,32(sp)
80001974:	00f767b3          	or	a5,a4,a5
80001978:	02f12023          	sw	a5,32(sp)
8000197c:	00044583          	lbu	a1,0(s0)
80001980:	00500613          	li	a2,5
80001984:	56048513          	addi	a0,s1,1376 # 80008560 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008561>
80001988:	58c010ef          	jal	ra,80002f14 <memchr>
8000198c:	56048793          	addi	a5,s1,1376
80001990:	00140713          	addi	a4,s0,1
80001994:	40f507b3          	sub	a5,a0,a5
80001998:	00f917b3          	sll	a5,s2,a5
8000199c:	00070c93          	mv	s9,a4
800019a0:	fc0516e3          	bnez	a0,8000196c <_vfiprintf_r+0x1d0>
800019a4:	02012783          	lw	a5,32(sp)
800019a8:	0107f693          	andi	a3,a5,16
800019ac:	00068663          	beqz	a3,800019b8 <_vfiprintf_r+0x21c>
800019b0:	02000693          	li	a3,32
800019b4:	06d101a3          	sb	a3,99(sp)
800019b8:	0087f693          	andi	a3,a5,8
800019bc:	00068663          	beqz	a3,800019c8 <_vfiprintf_r+0x22c>
800019c0:	02b00693          	li	a3,43
800019c4:	06d101a3          	sb	a3,99(sp)
800019c8:	00044583          	lbu	a1,0(s0)
800019cc:	02a00693          	li	a3,42
800019d0:	0ad59c63          	bne	a1,a3,80001a88 <_vfiprintf_r+0x2ec>
800019d4:	01c12703          	lw	a4,28(sp)
800019d8:	00072683          	lw	a3,0(a4)
800019dc:	00470713          	addi	a4,a4,4
800019e0:	00e12e23          	sw	a4,28(sp)
800019e4:	1606c263          	bltz	a3,80001b48 <_vfiprintf_r+0x3ac>
800019e8:	02d12623          	sw	a3,44(sp)
800019ec:	00144583          	lbu	a1,1(s0)
800019f0:	02e00793          	li	a5,46
800019f4:	0ef58063          	beq	a1,a5,80001ad4 <_vfiprintf_r+0x338>
800019f8:	00300613          	li	a2,3
800019fc:	568b0513          	addi	a0,s6,1384 # 80008568 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008569>
80001a00:	514010ef          	jal	ra,80002f14 <memchr>
80001a04:	02050263          	beqz	a0,80001a28 <_vfiprintf_r+0x28c>
80001a08:	568b0793          	addi	a5,s6,1384
80001a0c:	40f50533          	sub	a0,a0,a5
80001a10:	02012783          	lw	a5,32(sp)
80001a14:	04000713          	li	a4,64
80001a18:	00a71733          	sll	a4,a4,a0
80001a1c:	00e7e7b3          	or	a5,a5,a4
80001a20:	001c8c93          	addi	s9,s9,1
80001a24:	02f12023          	sw	a5,32(sp)
80001a28:	000cc583          	lbu	a1,0(s9)
80001a2c:	00600613          	li	a2,6
80001a30:	56cb8513          	addi	a0,s7,1388 # 8000856c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000856d>
80001a34:	02b10c23          	sb	a1,56(sp)
80001a38:	4dc010ef          	jal	ra,80002f14 <memchr>
80001a3c:	001c8c93          	addi	s9,s9,1
80001a40:	12050863          	beqz	a0,80001b70 <_vfiprintf_r+0x3d4>
80001a44:	00c12783          	lw	a5,12(sp)
80001a48:	0c078063          	beqz	a5,80001b08 <_vfiprintf_r+0x36c>
80001a4c:	800017b7          	lui	a5,0x80001
80001a50:	01c10713          	addi	a4,sp,28
80001a54:	6a878693          	addi	a3,a5,1704 # 800016a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800016a9>
80001a58:	00098613          	mv	a2,s3
80001a5c:	02010593          	addi	a1,sp,32
80001a60:	000a0513          	mv	a0,s4
80001a64:	00000097          	auipc	ra,0x0
80001a68:	000000e7          	jalr	zero # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
80001a6c:	00050a93          	mv	s5,a0
80001a70:	fff00793          	li	a5,-1
80001a74:	e2fa86e3          	beq	s5,a5,800018a0 <_vfiprintf_r+0x104>
80001a78:	03412783          	lw	a5,52(sp)
80001a7c:	015787b3          	add	a5,a5,s5
80001a80:	02f12a23          	sw	a5,52(sp)
80001a84:	dc9ff06f          	j	8000184c <_vfiprintf_r+0xb0>
80001a88:	fd058693          	addi	a3,a1,-48
80001a8c:	00900793          	li	a5,9
80001a90:	00040c93          	mv	s9,s0
80001a94:	f4d7eee3          	bltu	a5,a3,800019f0 <_vfiprintf_r+0x254>
80001a98:	02c12603          	lw	a2,44(sp)
80001a9c:	00900513          	li	a0,9
80001aa0:	0080006f          	j	80001aa8 <_vfiprintf_r+0x30c>
80001aa4:	00170713          	addi	a4,a4,1
80001aa8:	00261793          	slli	a5,a2,0x2
80001aac:	00074583          	lbu	a1,0(a4)
80001ab0:	00c787b3          	add	a5,a5,a2
80001ab4:	00179793          	slli	a5,a5,0x1
80001ab8:	00d78633          	add	a2,a5,a3
80001abc:	fd058693          	addi	a3,a1,-48
80001ac0:	fed572e3          	bgeu	a0,a3,80001aa4 <_vfiprintf_r+0x308>
80001ac4:	02c12623          	sw	a2,44(sp)
80001ac8:	02e00793          	li	a5,46
80001acc:	00070c93          	mv	s9,a4
80001ad0:	f2f594e3          	bne	a1,a5,800019f8 <_vfiprintf_r+0x25c>
80001ad4:	001cc583          	lbu	a1,1(s9)
80001ad8:	02a00793          	li	a5,42
80001adc:	0af59c63          	bne	a1,a5,80001b94 <_vfiprintf_r+0x3f8>
80001ae0:	01c12783          	lw	a5,28(sp)
80001ae4:	002cc583          	lbu	a1,2(s9)
80001ae8:	002c8693          	addi	a3,s9,2
80001aec:	0007a703          	lw	a4,0(a5)
80001af0:	00478793          	addi	a5,a5,4
80001af4:	00f12e23          	sw	a5,28(sp)
80001af8:	02e12223          	sw	a4,36(sp)
80001afc:	02074463          	bltz	a4,80001b24 <_vfiprintf_r+0x388>
80001b00:	00068c93          	mv	s9,a3
80001b04:	ef5ff06f          	j	800019f8 <_vfiprintf_r+0x25c>
80001b08:	02012703          	lw	a4,32(sp)
80001b0c:	01c12783          	lw	a5,28(sp)
80001b10:	10077713          	andi	a4,a4,256
80001b14:	04070463          	beqz	a4,80001b5c <_vfiprintf_r+0x3c0>
80001b18:	00478793          	addi	a5,a5,4
80001b1c:	00f12e23          	sw	a5,28(sp)
80001b20:	f59ff06f          	j	80001a78 <_vfiprintf_r+0x2dc>
80001b24:	fff00793          	li	a5,-1
80001b28:	02f12223          	sw	a5,36(sp)
80001b2c:	00068c93          	mv	s9,a3
80001b30:	ec9ff06f          	j	800019f8 <_vfiprintf_r+0x25c>
80001b34:	03412703          	lw	a4,52(sp)
80001b38:	00044783          	lbu	a5,0(s0)
80001b3c:	01b70733          	add	a4,a4,s11
80001b40:	02e12a23          	sw	a4,52(sp)
80001b44:	e01ff06f          	j	80001944 <_vfiprintf_r+0x1a8>
80001b48:	40d006b3          	neg	a3,a3
80001b4c:	0027e793          	ori	a5,a5,2
80001b50:	02d12623          	sw	a3,44(sp)
80001b54:	02f12023          	sw	a5,32(sp)
80001b58:	e95ff06f          	j	800019ec <_vfiprintf_r+0x250>
80001b5c:	00778793          	addi	a5,a5,7
80001b60:	ff87f793          	andi	a5,a5,-8
80001b64:	00878793          	addi	a5,a5,8
80001b68:	00f12e23          	sw	a5,28(sp)
80001b6c:	f0dff06f          	j	80001a78 <_vfiprintf_r+0x2dc>
80001b70:	800017b7          	lui	a5,0x80001
80001b74:	01c10713          	addi	a4,sp,28
80001b78:	6a878693          	addi	a3,a5,1704 # 800016a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800016a9>
80001b7c:	00098613          	mv	a2,s3
80001b80:	02010593          	addi	a1,sp,32
80001b84:	000a0513          	mv	a0,s4
80001b88:	161010ef          	jal	ra,800034e8 <_printf_i>
80001b8c:	00050a93          	mv	s5,a0
80001b90:	ee1ff06f          	j	80001a70 <_vfiprintf_r+0x2d4>
80001b94:	02012223          	sw	zero,36(sp)
80001b98:	fd058713          	addi	a4,a1,-48
80001b9c:	00900793          	li	a5,9
80001ba0:	001c8c93          	addi	s9,s9,1
80001ba4:	e4e7eae3          	bltu	a5,a4,800019f8 <_vfiprintf_r+0x25c>
80001ba8:	00000693          	li	a3,0
80001bac:	00900613          	li	a2,9
80001bb0:	001cc583          	lbu	a1,1(s9)
80001bb4:	00269793          	slli	a5,a3,0x2
80001bb8:	00d787b3          	add	a5,a5,a3
80001bbc:	00179793          	slli	a5,a5,0x1
80001bc0:	00e786b3          	add	a3,a5,a4
80001bc4:	fd058713          	addi	a4,a1,-48
80001bc8:	001c8c93          	addi	s9,s9,1
80001bcc:	fee672e3          	bgeu	a2,a4,80001bb0 <_vfiprintf_r+0x414>
80001bd0:	02d12223          	sw	a3,36(sp)
80001bd4:	e25ff06f          	j	800019f8 <_vfiprintf_r+0x25c>
80001bd8:	0589a503          	lw	a0,88(s3)
80001bdc:	105030ef          	jal	ra,800054e0 <__retarget_lock_release_recursive>
80001be0:	00c9d783          	lhu	a5,12(s3)
80001be4:	cd5ff06f          	j	800018b8 <_vfiprintf_r+0x11c>
80001be8:	7c0000ef          	jal	ra,800023a8 <__sinit>
80001bec:	c09ff06f          	j	800017f4 <_vfiprintf_r+0x58>
80001bf0:	0589a503          	lw	a0,88(s3)
80001bf4:	0c9030ef          	jal	ra,800054bc <__retarget_lock_acquire_recursive>
80001bf8:	00c99783          	lh	a5,12(s3)
80001bfc:	c11ff06f          	j	8000180c <_vfiprintf_r+0x70>

80001c00 <vfiprintf>:
80001c00:	00308013          	addi	zero,ra,3 # 80001a67 <_vfiprintf_r+0x2cb>
80001c04:	00050793          	mv	a5,a0
80001c08:	8141a503          	lw	a0,-2028(gp) # 8000add4 <_impure_ptr>
80001c0c:	00060693          	mv	a3,a2
80001c10:	00058613          	mv	a2,a1
80001c14:	00078593          	mv	a1,a5
80001c18:	b85ff06f          	j	8000179c <_vfiprintf_r>

80001c1c <__swbuf_r>:
80001c1c:	00308013          	addi	zero,ra,3
80001c20:	fe010113          	addi	sp,sp,-32
80001c24:	00812c23          	sw	s0,24(sp)
80001c28:	00912a23          	sw	s1,20(sp)
80001c2c:	01212823          	sw	s2,16(sp)
80001c30:	00112e23          	sw	ra,28(sp)
80001c34:	01312623          	sw	s3,12(sp)
80001c38:	00050913          	mv	s2,a0
80001c3c:	00058493          	mv	s1,a1
80001c40:	00060413          	mv	s0,a2
80001c44:	00050663          	beqz	a0,80001c50 <__swbuf_r+0x34>
80001c48:	03852783          	lw	a5,56(a0)
80001c4c:	10078663          	beqz	a5,80001d58 <__swbuf_r+0x13c>
80001c50:	01842703          	lw	a4,24(s0)
80001c54:	00c45783          	lhu	a5,12(s0)
80001c58:	00e42423          	sw	a4,8(s0)
80001c5c:	0087f793          	andi	a5,a5,8
80001c60:	06078e63          	beqz	a5,80001cdc <__swbuf_r+0xc0>
80001c64:	01042783          	lw	a5,16(s0)
80001c68:	06078a63          	beqz	a5,80001cdc <__swbuf_r+0xc0>
80001c6c:	00042703          	lw	a4,0(s0)
80001c70:	01442683          	lw	a3,20(s0)
80001c74:	0ff4f993          	zext.b	s3,s1
80001c78:	40f707b3          	sub	a5,a4,a5
80001c7c:	0ff4f493          	zext.b	s1,s1
80001c80:	08d7d463          	bge	a5,a3,80001d08 <__swbuf_r+0xec>
80001c84:	00842683          	lw	a3,8(s0)
80001c88:	00170613          	addi	a2,a4,1
80001c8c:	00c42023          	sw	a2,0(s0)
80001c90:	fff68693          	addi	a3,a3,-1
80001c94:	00d42423          	sw	a3,8(s0)
80001c98:	01370023          	sb	s3,0(a4)
80001c9c:	01442703          	lw	a4,20(s0)
80001ca0:	00178793          	addi	a5,a5,1
80001ca4:	08f70e63          	beq	a4,a5,80001d40 <__swbuf_r+0x124>
80001ca8:	00c45783          	lhu	a5,12(s0)
80001cac:	0017f793          	andi	a5,a5,1
80001cb0:	00078663          	beqz	a5,80001cbc <__swbuf_r+0xa0>
80001cb4:	00a00793          	li	a5,10
80001cb8:	08f48463          	beq	s1,a5,80001d40 <__swbuf_r+0x124>
80001cbc:	01c12083          	lw	ra,28(sp)
80001cc0:	01812403          	lw	s0,24(sp)
80001cc4:	01012903          	lw	s2,16(sp)
80001cc8:	00c12983          	lw	s3,12(sp)
80001ccc:	00048513          	mv	a0,s1
80001cd0:	01412483          	lw	s1,20(sp)
80001cd4:	02010113          	addi	sp,sp,32
80001cd8:	00008067          	ret
80001cdc:	00040593          	mv	a1,s0
80001ce0:	00090513          	mv	a0,s2
80001ce4:	094000ef          	jal	ra,80001d78 <__swsetup_r>
80001ce8:	06051463          	bnez	a0,80001d50 <__swbuf_r+0x134>
80001cec:	01042783          	lw	a5,16(s0)
80001cf0:	00042703          	lw	a4,0(s0)
80001cf4:	01442683          	lw	a3,20(s0)
80001cf8:	0ff4f993          	zext.b	s3,s1
80001cfc:	40f707b3          	sub	a5,a4,a5
80001d00:	0ff4f493          	zext.b	s1,s1
80001d04:	f8d7c0e3          	blt	a5,a3,80001c84 <__swbuf_r+0x68>
80001d08:	00040593          	mv	a1,s0
80001d0c:	00090513          	mv	a0,s2
80001d10:	3c8000ef          	jal	ra,800020d8 <_fflush_r>
80001d14:	02051e63          	bnez	a0,80001d50 <__swbuf_r+0x134>
80001d18:	00042703          	lw	a4,0(s0)
80001d1c:	00842683          	lw	a3,8(s0)
80001d20:	00100793          	li	a5,1
80001d24:	00170613          	addi	a2,a4,1
80001d28:	fff68693          	addi	a3,a3,-1
80001d2c:	00c42023          	sw	a2,0(s0)
80001d30:	00d42423          	sw	a3,8(s0)
80001d34:	01370023          	sb	s3,0(a4)
80001d38:	01442703          	lw	a4,20(s0)
80001d3c:	f6f716e3          	bne	a4,a5,80001ca8 <__swbuf_r+0x8c>
80001d40:	00040593          	mv	a1,s0
80001d44:	00090513          	mv	a0,s2
80001d48:	390000ef          	jal	ra,800020d8 <_fflush_r>
80001d4c:	f60508e3          	beqz	a0,80001cbc <__swbuf_r+0xa0>
80001d50:	fff00493          	li	s1,-1
80001d54:	f69ff06f          	j	80001cbc <__swbuf_r+0xa0>
80001d58:	650000ef          	jal	ra,800023a8 <__sinit>
80001d5c:	ef5ff06f          	j	80001c50 <__swbuf_r+0x34>

80001d60 <__swbuf>:
80001d60:	00308013          	addi	zero,ra,3
80001d64:	00050793          	mv	a5,a0
80001d68:	8141a503          	lw	a0,-2028(gp) # 8000add4 <_impure_ptr>
80001d6c:	00058613          	mv	a2,a1
80001d70:	00078593          	mv	a1,a5
80001d74:	ea9ff06f          	j	80001c1c <__swbuf_r>

80001d78 <__swsetup_r>:
80001d78:	00308013          	addi	zero,ra,3
80001d7c:	8141a783          	lw	a5,-2028(gp) # 8000add4 <_impure_ptr>
80001d80:	ff010113          	addi	sp,sp,-16
80001d84:	00812423          	sw	s0,8(sp)
80001d88:	00912223          	sw	s1,4(sp)
80001d8c:	00112623          	sw	ra,12(sp)
80001d90:	00050493          	mv	s1,a0
80001d94:	00058413          	mv	s0,a1
80001d98:	00078663          	beqz	a5,80001da4 <__swsetup_r+0x2c>
80001d9c:	0387a703          	lw	a4,56(a5)
80001da0:	08070063          	beqz	a4,80001e20 <__swsetup_r+0xa8>
80001da4:	00c41783          	lh	a5,12(s0)
80001da8:	0087f713          	andi	a4,a5,8
80001dac:	08070463          	beqz	a4,80001e34 <__swsetup_r+0xbc>
80001db0:	01042703          	lw	a4,16(s0)
80001db4:	0a070063          	beqz	a4,80001e54 <__swsetup_r+0xdc>
80001db8:	0017f693          	andi	a3,a5,1
80001dbc:	02068863          	beqz	a3,80001dec <__swsetup_r+0x74>
80001dc0:	01442683          	lw	a3,20(s0)
80001dc4:	00042423          	sw	zero,8(s0)
80001dc8:	00000513          	li	a0,0
80001dcc:	40d006b3          	neg	a3,a3
80001dd0:	00d42c23          	sw	a3,24(s0)
80001dd4:	02070a63          	beqz	a4,80001e08 <__swsetup_r+0x90>
80001dd8:	00c12083          	lw	ra,12(sp)
80001ddc:	00812403          	lw	s0,8(sp)
80001de0:	00412483          	lw	s1,4(sp)
80001de4:	01010113          	addi	sp,sp,16
80001de8:	00008067          	ret
80001dec:	0027f693          	andi	a3,a5,2
80001df0:	00000613          	li	a2,0
80001df4:	00069463          	bnez	a3,80001dfc <__swsetup_r+0x84>
80001df8:	01442603          	lw	a2,20(s0)
80001dfc:	00c42423          	sw	a2,8(s0)
80001e00:	00000513          	li	a0,0
80001e04:	fc071ae3          	bnez	a4,80001dd8 <__swsetup_r+0x60>
80001e08:	0807f713          	andi	a4,a5,128
80001e0c:	fc0706e3          	beqz	a4,80001dd8 <__swsetup_r+0x60>
80001e10:	0407e793          	ori	a5,a5,64
80001e14:	00f41623          	sh	a5,12(s0)
80001e18:	fff00513          	li	a0,-1
80001e1c:	fbdff06f          	j	80001dd8 <__swsetup_r+0x60>
80001e20:	00078513          	mv	a0,a5
80001e24:	584000ef          	jal	ra,800023a8 <__sinit>
80001e28:	00c41783          	lh	a5,12(s0)
80001e2c:	0087f713          	andi	a4,a5,8
80001e30:	f80710e3          	bnez	a4,80001db0 <__swsetup_r+0x38>
80001e34:	0107f713          	andi	a4,a5,16
80001e38:	06070a63          	beqz	a4,80001eac <__swsetup_r+0x134>
80001e3c:	0047f713          	andi	a4,a5,4
80001e40:	02071c63          	bnez	a4,80001e78 <__swsetup_r+0x100>
80001e44:	01042703          	lw	a4,16(s0)
80001e48:	0087e793          	ori	a5,a5,8
80001e4c:	00f41623          	sh	a5,12(s0)
80001e50:	f60714e3          	bnez	a4,80001db8 <__swsetup_r+0x40>
80001e54:	2807f693          	andi	a3,a5,640
80001e58:	20000613          	li	a2,512
80001e5c:	f4c68ee3          	beq	a3,a2,80001db8 <__swsetup_r+0x40>
80001e60:	00040593          	mv	a1,s0
80001e64:	00048513          	mv	a0,s1
80001e68:	6d9000ef          	jal	ra,80002d40 <__smakebuf_r>
80001e6c:	00c41783          	lh	a5,12(s0)
80001e70:	01042703          	lw	a4,16(s0)
80001e74:	f45ff06f          	j	80001db8 <__swsetup_r+0x40>
80001e78:	03042583          	lw	a1,48(s0)
80001e7c:	00058e63          	beqz	a1,80001e98 <__swsetup_r+0x120>
80001e80:	04040713          	addi	a4,s0,64
80001e84:	00e58863          	beq	a1,a4,80001e94 <__swsetup_r+0x11c>
80001e88:	00048513          	mv	a0,s1
80001e8c:	8d0ff0ef          	jal	ra,80000f5c <_free_r>
80001e90:	00c41783          	lh	a5,12(s0)
80001e94:	02042823          	sw	zero,48(s0)
80001e98:	01042703          	lw	a4,16(s0)
80001e9c:	fdb7f793          	andi	a5,a5,-37
80001ea0:	00042223          	sw	zero,4(s0)
80001ea4:	00e42023          	sw	a4,0(s0)
80001ea8:	fa1ff06f          	j	80001e48 <__swsetup_r+0xd0>
80001eac:	00900713          	li	a4,9
80001eb0:	00e4a023          	sw	a4,0(s1)
80001eb4:	0407e793          	ori	a5,a5,64
80001eb8:	f5dff06f          	j	80001e14 <__swsetup_r+0x9c>

80001ebc <__sflush_r>:
80001ebc:	00308013          	addi	zero,ra,3
80001ec0:	00c59783          	lh	a5,12(a1)
80001ec4:	fe010113          	addi	sp,sp,-32
80001ec8:	00812c23          	sw	s0,24(sp)
80001ecc:	01312623          	sw	s3,12(sp)
80001ed0:	00112e23          	sw	ra,28(sp)
80001ed4:	00912a23          	sw	s1,20(sp)
80001ed8:	01212823          	sw	s2,16(sp)
80001edc:	0087f713          	andi	a4,a5,8
80001ee0:	00058413          	mv	s0,a1
80001ee4:	00050993          	mv	s3,a0
80001ee8:	0e071263          	bnez	a4,80001fcc <__sflush_r+0x110>
80001eec:	0045a703          	lw	a4,4(a1)
80001ef0:	16e05063          	blez	a4,80002050 <__sflush_r+0x194>
80001ef4:	02842803          	lw	a6,40(s0)
80001ef8:	0a080a63          	beqz	a6,80001fac <__sflush_r+0xf0>
80001efc:	00c7d713          	srli	a4,a5,0xc
80001f00:	0009a483          	lw	s1,0(s3)
80001f04:	00177713          	andi	a4,a4,1
80001f08:	0009a023          	sw	zero,0(s3)
80001f0c:	01c42583          	lw	a1,28(s0)
80001f10:	14071863          	bnez	a4,80002060 <__sflush_r+0x1a4>
80001f14:	00000613          	li	a2,0
80001f18:	00100693          	li	a3,1
80001f1c:	00098513          	mv	a0,s3
80001f20:	000800e7          	jalr	a6 # 10000 <__rom_region_size+0x7a64>
80001f24:	fff00793          	li	a5,-1
80001f28:	00050613          	mv	a2,a0
80001f2c:	18f50463          	beq	a0,a5,800020b4 <__sflush_r+0x1f8>
80001f30:	00c41783          	lh	a5,12(s0)
80001f34:	02842803          	lw	a6,40(s0)
80001f38:	01c42583          	lw	a1,28(s0)
80001f3c:	0047f793          	andi	a5,a5,4
80001f40:	00078e63          	beqz	a5,80001f5c <__sflush_r+0xa0>
80001f44:	00442703          	lw	a4,4(s0)
80001f48:	03042783          	lw	a5,48(s0)
80001f4c:	40e60633          	sub	a2,a2,a4
80001f50:	00078663          	beqz	a5,80001f5c <__sflush_r+0xa0>
80001f54:	03c42783          	lw	a5,60(s0)
80001f58:	40f60633          	sub	a2,a2,a5
80001f5c:	00000693          	li	a3,0
80001f60:	00098513          	mv	a0,s3
80001f64:	000800e7          	jalr	a6
80001f68:	fff00793          	li	a5,-1
80001f6c:	10f50e63          	beq	a0,a5,80002088 <__sflush_r+0x1cc>
80001f70:	01042703          	lw	a4,16(s0)
80001f74:	00c45783          	lhu	a5,12(s0)
80001f78:	00042223          	sw	zero,4(s0)
80001f7c:	00e42023          	sw	a4,0(s0)
80001f80:	00001737          	lui	a4,0x1
80001f84:	00e7f7b3          	and	a5,a5,a4
80001f88:	0e079c63          	bnez	a5,80002080 <__sflush_r+0x1c4>
80001f8c:	03042583          	lw	a1,48(s0)
80001f90:	0099a023          	sw	s1,0(s3)
80001f94:	00058c63          	beqz	a1,80001fac <__sflush_r+0xf0>
80001f98:	04040793          	addi	a5,s0,64
80001f9c:	00f58663          	beq	a1,a5,80001fa8 <__sflush_r+0xec>
80001fa0:	00098513          	mv	a0,s3
80001fa4:	fb9fe0ef          	jal	ra,80000f5c <_free_r>
80001fa8:	02042823          	sw	zero,48(s0)
80001fac:	00000513          	li	a0,0
80001fb0:	01c12083          	lw	ra,28(sp)
80001fb4:	01812403          	lw	s0,24(sp)
80001fb8:	01412483          	lw	s1,20(sp)
80001fbc:	01012903          	lw	s2,16(sp)
80001fc0:	00c12983          	lw	s3,12(sp)
80001fc4:	02010113          	addi	sp,sp,32
80001fc8:	00008067          	ret
80001fcc:	0105a903          	lw	s2,16(a1)
80001fd0:	fc090ee3          	beqz	s2,80001fac <__sflush_r+0xf0>
80001fd4:	0005a483          	lw	s1,0(a1)
80001fd8:	0037f793          	andi	a5,a5,3
80001fdc:	0125a023          	sw	s2,0(a1)
80001fe0:	412484b3          	sub	s1,s1,s2
80001fe4:	00000713          	li	a4,0
80001fe8:	00079463          	bnez	a5,80001ff0 <__sflush_r+0x134>
80001fec:	0145a703          	lw	a4,20(a1)
80001ff0:	00e42423          	sw	a4,8(s0)
80001ff4:	00904863          	bgtz	s1,80002004 <__sflush_r+0x148>
80001ff8:	fb5ff06f          	j	80001fac <__sflush_r+0xf0>
80001ffc:	00a90933          	add	s2,s2,a0
80002000:	fa9056e3          	blez	s1,80001fac <__sflush_r+0xf0>
80002004:	02442783          	lw	a5,36(s0)
80002008:	01c42583          	lw	a1,28(s0)
8000200c:	00048693          	mv	a3,s1
80002010:	00090613          	mv	a2,s2
80002014:	00098513          	mv	a0,s3
80002018:	000780e7          	jalr	a5
8000201c:	40a484b3          	sub	s1,s1,a0
80002020:	fca04ee3          	bgtz	a0,80001ffc <__sflush_r+0x140>
80002024:	00c41783          	lh	a5,12(s0)
80002028:	0407e793          	ori	a5,a5,64
8000202c:	01c12083          	lw	ra,28(sp)
80002030:	00f41623          	sh	a5,12(s0)
80002034:	01812403          	lw	s0,24(sp)
80002038:	01412483          	lw	s1,20(sp)
8000203c:	01012903          	lw	s2,16(sp)
80002040:	00c12983          	lw	s3,12(sp)
80002044:	fff00513          	li	a0,-1
80002048:	02010113          	addi	sp,sp,32
8000204c:	00008067          	ret
80002050:	03c5a703          	lw	a4,60(a1)
80002054:	eae040e3          	bgtz	a4,80001ef4 <__sflush_r+0x38>
80002058:	00000513          	li	a0,0
8000205c:	f55ff06f          	j	80001fb0 <__sflush_r+0xf4>
80002060:	05042603          	lw	a2,80(s0)
80002064:	ed9ff06f          	j	80001f3c <__sflush_r+0x80>
80002068:	01042703          	lw	a4,16(s0)
8000206c:	00c7d793          	srli	a5,a5,0xc
80002070:	00042223          	sw	zero,4(s0)
80002074:	00e42023          	sw	a4,0(s0)
80002078:	0017f793          	andi	a5,a5,1
8000207c:	f00788e3          	beqz	a5,80001f8c <__sflush_r+0xd0>
80002080:	04a42823          	sw	a0,80(s0)
80002084:	f09ff06f          	j	80001f8c <__sflush_r+0xd0>
80002088:	0009a703          	lw	a4,0(s3)
8000208c:	00c41783          	lh	a5,12(s0)
80002090:	fc070ce3          	beqz	a4,80002068 <__sflush_r+0x1ac>
80002094:	01d00693          	li	a3,29
80002098:	00d70663          	beq	a4,a3,800020a4 <__sflush_r+0x1e8>
8000209c:	01600693          	li	a3,22
800020a0:	f8d714e3          	bne	a4,a3,80002028 <__sflush_r+0x16c>
800020a4:	01042783          	lw	a5,16(s0)
800020a8:	00042223          	sw	zero,4(s0)
800020ac:	00f42023          	sw	a5,0(s0)
800020b0:	eddff06f          	j	80001f8c <__sflush_r+0xd0>
800020b4:	0009a783          	lw	a5,0(s3)
800020b8:	e6078ce3          	beqz	a5,80001f30 <__sflush_r+0x74>
800020bc:	01d00713          	li	a4,29
800020c0:	00e78663          	beq	a5,a4,800020cc <__sflush_r+0x210>
800020c4:	01600713          	li	a4,22
800020c8:	f4e79ee3          	bne	a5,a4,80002024 <__sflush_r+0x168>
800020cc:	0099a023          	sw	s1,0(s3)
800020d0:	00000513          	li	a0,0
800020d4:	eddff06f          	j	80001fb0 <__sflush_r+0xf4>

800020d8 <_fflush_r>:
800020d8:	00308013          	addi	zero,ra,3
800020dc:	ff010113          	addi	sp,sp,-16
800020e0:	00812423          	sw	s0,8(sp)
800020e4:	00912223          	sw	s1,4(sp)
800020e8:	00112623          	sw	ra,12(sp)
800020ec:	01212023          	sw	s2,0(sp)
800020f0:	00050493          	mv	s1,a0
800020f4:	00058413          	mv	s0,a1
800020f8:	00050663          	beqz	a0,80002104 <_fflush_r+0x2c>
800020fc:	03852783          	lw	a5,56(a0)
80002100:	06078463          	beqz	a5,80002168 <_fflush_r+0x90>
80002104:	00c41783          	lh	a5,12(s0)
80002108:	00000913          	li	s2,0
8000210c:	04078063          	beqz	a5,8000214c <_fflush_r+0x74>
80002110:	06442703          	lw	a4,100(s0)
80002114:	00177713          	andi	a4,a4,1
80002118:	00071663          	bnez	a4,80002124 <_fflush_r+0x4c>
8000211c:	2007f793          	andi	a5,a5,512
80002120:	04078863          	beqz	a5,80002170 <_fflush_r+0x98>
80002124:	00040593          	mv	a1,s0
80002128:	00048513          	mv	a0,s1
8000212c:	d91ff0ef          	jal	ra,80001ebc <__sflush_r>
80002130:	06442783          	lw	a5,100(s0)
80002134:	00050913          	mv	s2,a0
80002138:	0017f793          	andi	a5,a5,1
8000213c:	00079863          	bnez	a5,8000214c <_fflush_r+0x74>
80002140:	00c45783          	lhu	a5,12(s0)
80002144:	2007f793          	andi	a5,a5,512
80002148:	04078863          	beqz	a5,80002198 <_fflush_r+0xc0>
8000214c:	00c12083          	lw	ra,12(sp)
80002150:	00812403          	lw	s0,8(sp)
80002154:	00412483          	lw	s1,4(sp)
80002158:	00090513          	mv	a0,s2
8000215c:	00012903          	lw	s2,0(sp)
80002160:	01010113          	addi	sp,sp,16
80002164:	00008067          	ret
80002168:	240000ef          	jal	ra,800023a8 <__sinit>
8000216c:	f99ff06f          	j	80002104 <_fflush_r+0x2c>
80002170:	05842503          	lw	a0,88(s0)
80002174:	348030ef          	jal	ra,800054bc <__retarget_lock_acquire_recursive>
80002178:	00040593          	mv	a1,s0
8000217c:	00048513          	mv	a0,s1
80002180:	d3dff0ef          	jal	ra,80001ebc <__sflush_r>
80002184:	06442783          	lw	a5,100(s0)
80002188:	00050913          	mv	s2,a0
8000218c:	0017f793          	andi	a5,a5,1
80002190:	fa079ee3          	bnez	a5,8000214c <_fflush_r+0x74>
80002194:	fadff06f          	j	80002140 <_fflush_r+0x68>
80002198:	05842503          	lw	a0,88(s0)
8000219c:	344030ef          	jal	ra,800054e0 <__retarget_lock_release_recursive>
800021a0:	00c12083          	lw	ra,12(sp)
800021a4:	00812403          	lw	s0,8(sp)
800021a8:	00412483          	lw	s1,4(sp)
800021ac:	00090513          	mv	a0,s2
800021b0:	00012903          	lw	s2,0(sp)
800021b4:	01010113          	addi	sp,sp,16
800021b8:	00008067          	ret

800021bc <fflush>:
800021bc:	00308013          	addi	zero,ra,3
800021c0:	0a050a63          	beqz	a0,80002274 <fflush+0xb8>
800021c4:	ff010113          	addi	sp,sp,-16
800021c8:	01212023          	sw	s2,0(sp)
800021cc:	8141a903          	lw	s2,-2028(gp) # 8000add4 <_impure_ptr>
800021d0:	00812423          	sw	s0,8(sp)
800021d4:	00112623          	sw	ra,12(sp)
800021d8:	00912223          	sw	s1,4(sp)
800021dc:	00050413          	mv	s0,a0
800021e0:	00090663          	beqz	s2,800021ec <fflush+0x30>
800021e4:	03892783          	lw	a5,56(s2)
800021e8:	06078463          	beqz	a5,80002250 <fflush+0x94>
800021ec:	00c41783          	lh	a5,12(s0)
800021f0:	00000493          	li	s1,0
800021f4:	04078063          	beqz	a5,80002234 <fflush+0x78>
800021f8:	06442703          	lw	a4,100(s0)
800021fc:	00177713          	andi	a4,a4,1
80002200:	00071663          	bnez	a4,8000220c <fflush+0x50>
80002204:	2007f793          	andi	a5,a5,512
80002208:	04078a63          	beqz	a5,8000225c <fflush+0xa0>
8000220c:	00040593          	mv	a1,s0
80002210:	00090513          	mv	a0,s2
80002214:	ca9ff0ef          	jal	ra,80001ebc <__sflush_r>
80002218:	06442783          	lw	a5,100(s0)
8000221c:	00050493          	mv	s1,a0
80002220:	0017f793          	andi	a5,a5,1
80002224:	00079863          	bnez	a5,80002234 <fflush+0x78>
80002228:	00c45783          	lhu	a5,12(s0)
8000222c:	2007f793          	andi	a5,a5,512
80002230:	02078c63          	beqz	a5,80002268 <fflush+0xac>
80002234:	00c12083          	lw	ra,12(sp)
80002238:	00812403          	lw	s0,8(sp)
8000223c:	00012903          	lw	s2,0(sp)
80002240:	00048513          	mv	a0,s1
80002244:	00412483          	lw	s1,4(sp)
80002248:	01010113          	addi	sp,sp,16
8000224c:	00008067          	ret
80002250:	00090513          	mv	a0,s2
80002254:	154000ef          	jal	ra,800023a8 <__sinit>
80002258:	f95ff06f          	j	800021ec <fflush+0x30>
8000225c:	05842503          	lw	a0,88(s0)
80002260:	25c030ef          	jal	ra,800054bc <__retarget_lock_acquire_recursive>
80002264:	fa9ff06f          	j	8000220c <fflush+0x50>
80002268:	05842503          	lw	a0,88(s0)
8000226c:	274030ef          	jal	ra,800054e0 <__retarget_lock_release_recursive>
80002270:	fc5ff06f          	j	80002234 <fflush+0x78>
80002274:	800087b7          	lui	a5,0x80008
80002278:	fa87a503          	lw	a0,-88(a5) # 80007fa8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007fa9>
8000227c:	800025b7          	lui	a1,0x80002
80002280:	0d858593          	addi	a1,a1,216 # 800020d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800020d9>
80002284:	2050006f          	j	80002c88 <_fwalk_reent>

80002288 <_cleanup_r>:
80002288:	00308013          	addi	zero,ra,3
8000228c:	800025b7          	lui	a1,0x80002
80002290:	0d858593          	addi	a1,a1,216 # 800020d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800020d9>
80002294:	1f50006f          	j	80002c88 <_fwalk_reent>

80002298 <__fp_lock>:
80002298:	00308013          	addi	zero,ra,3
8000229c:	06452783          	lw	a5,100(a0)
800022a0:	0017f793          	andi	a5,a5,1
800022a4:	00079863          	bnez	a5,800022b4 <__fp_lock+0x1c>
800022a8:	00c55783          	lhu	a5,12(a0)
800022ac:	2007f793          	andi	a5,a5,512
800022b0:	00078663          	beqz	a5,800022bc <__fp_lock+0x24>
800022b4:	00000513          	li	a0,0
800022b8:	00008067          	ret
800022bc:	05852503          	lw	a0,88(a0)
800022c0:	ff010113          	addi	sp,sp,-16
800022c4:	00112623          	sw	ra,12(sp)
800022c8:	1f4030ef          	jal	ra,800054bc <__retarget_lock_acquire_recursive>
800022cc:	00c12083          	lw	ra,12(sp)
800022d0:	00000513          	li	a0,0
800022d4:	01010113          	addi	sp,sp,16
800022d8:	00008067          	ret

800022dc <__fp_unlock>:
800022dc:	00308013          	addi	zero,ra,3
800022e0:	06452783          	lw	a5,100(a0)
800022e4:	0017f793          	andi	a5,a5,1
800022e8:	00079863          	bnez	a5,800022f8 <__fp_unlock+0x1c>
800022ec:	00c55783          	lhu	a5,12(a0)
800022f0:	2007f793          	andi	a5,a5,512
800022f4:	00078663          	beqz	a5,80002300 <__fp_unlock+0x24>
800022f8:	00000513          	li	a0,0
800022fc:	00008067          	ret
80002300:	05852503          	lw	a0,88(a0)
80002304:	ff010113          	addi	sp,sp,-16
80002308:	00112623          	sw	ra,12(sp)
8000230c:	1d4030ef          	jal	ra,800054e0 <__retarget_lock_release_recursive>
80002310:	00c12083          	lw	ra,12(sp)
80002314:	00000513          	li	a0,0
80002318:	01010113          	addi	sp,sp,16
8000231c:	00008067          	ret

80002320 <__sfmoreglue>:
80002320:	00308013          	addi	zero,ra,3
80002324:	ff010113          	addi	sp,sp,-16
80002328:	00912223          	sw	s1,4(sp)
8000232c:	06800793          	li	a5,104
80002330:	fff58493          	addi	s1,a1,-1
80002334:	02f484b3          	mul	s1,s1,a5
80002338:	01212023          	sw	s2,0(sp)
8000233c:	00058913          	mv	s2,a1
80002340:	00812423          	sw	s0,8(sp)
80002344:	00112623          	sw	ra,12(sp)
80002348:	07448593          	addi	a1,s1,116
8000234c:	d7dfe0ef          	jal	ra,800010c8 <_malloc_r>
80002350:	00050413          	mv	s0,a0
80002354:	02050063          	beqz	a0,80002374 <__sfmoreglue+0x54>
80002358:	00c50513          	addi	a0,a0,12
8000235c:	00042023          	sw	zero,0(s0)
80002360:	01242223          	sw	s2,4(s0)
80002364:	00a42423          	sw	a0,8(s0)
80002368:	06848613          	addi	a2,s1,104
8000236c:	00000593          	li	a1,0
80002370:	a1dfe0ef          	jal	ra,80000d8c <memset>
80002374:	00c12083          	lw	ra,12(sp)
80002378:	00040513          	mv	a0,s0
8000237c:	00812403          	lw	s0,8(sp)
80002380:	00412483          	lw	s1,4(sp)
80002384:	00012903          	lw	s2,0(sp)
80002388:	01010113          	addi	sp,sp,16
8000238c:	00008067          	ret

80002390 <_cleanup>:
80002390:	00308013          	addi	zero,ra,3
80002394:	800087b7          	lui	a5,0x80008
80002398:	fa87a503          	lw	a0,-88(a5) # 80007fa8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007fa9>
8000239c:	800025b7          	lui	a1,0x80002
800023a0:	0d858593          	addi	a1,a1,216 # 800020d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800020d9>
800023a4:	0e50006f          	j	80002c88 <_fwalk_reent>

800023a8 <__sinit>:
800023a8:	00308013          	addi	zero,ra,3
800023ac:	fe010113          	addi	sp,sp,-32
800023b0:	01512223          	sw	s5,4(sp)
800023b4:	00912a23          	sw	s1,20(sp)
800023b8:	00050493          	mv	s1,a0
800023bc:	84418513          	addi	a0,gp,-1980 # 8000ae04 <__lock___sinit_recursive_mutex>
800023c0:	00112e23          	sw	ra,28(sp)
800023c4:	00812c23          	sw	s0,24(sp)
800023c8:	01212823          	sw	s2,16(sp)
800023cc:	01312623          	sw	s3,12(sp)
800023d0:	01412423          	sw	s4,8(sp)
800023d4:	01612023          	sw	s6,0(sp)
800023d8:	0e4030ef          	jal	ra,800054bc <__retarget_lock_acquire_recursive>
800023dc:	0384a783          	lw	a5,56(s1)
800023e0:	14079863          	bnez	a5,80002530 <__sinit+0x188>
800023e4:	800027b7          	lui	a5,0x80002
800023e8:	0044a403          	lw	s0,4(s1)
800023ec:	28878793          	addi	a5,a5,648 # 80002288 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80002289>
800023f0:	02f4ae23          	sw	a5,60(s1)
800023f4:	15848713          	addi	a4,s1,344
800023f8:	00300793          	li	a5,3
800023fc:	14e4aa23          	sw	a4,340(s1)
80002400:	14f4a823          	sw	a5,336(s1)
80002404:	1404a623          	sw	zero,332(s1)
80002408:	00400793          	li	a5,4
8000240c:	00f42623          	sw	a5,12(s0)
80002410:	00800613          	li	a2,8
80002414:	00000593          	li	a1,0
80002418:	00042023          	sw	zero,0(s0)
8000241c:	00042223          	sw	zero,4(s0)
80002420:	00042423          	sw	zero,8(s0)
80002424:	06042223          	sw	zero,100(s0)
80002428:	00042823          	sw	zero,16(s0)
8000242c:	00042a23          	sw	zero,20(s0)
80002430:	00042c23          	sw	zero,24(s0)
80002434:	05c40513          	addi	a0,s0,92
80002438:	80004b37          	lui	s6,0x80004
8000243c:	80004a37          	lui	s4,0x80004
80002440:	800049b7          	lui	s3,0x80004
80002444:	80004937          	lui	s2,0x80004
80002448:	945fe0ef          	jal	ra,80000d8c <memset>
8000244c:	8e8b0b13          	addi	s6,s6,-1816 # 800038e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800038e9>
80002450:	954a0a13          	addi	s4,s4,-1708 # 80003954 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003955>
80002454:	9e098993          	addi	s3,s3,-1568 # 800039e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800039e1>
80002458:	a5c90913          	addi	s2,s2,-1444 # 80003a5c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003a5d>
8000245c:	05840513          	addi	a0,s0,88
80002460:	00842e23          	sw	s0,28(s0)
80002464:	03642023          	sw	s6,32(s0)
80002468:	03442223          	sw	s4,36(s0)
8000246c:	03342423          	sw	s3,40(s0)
80002470:	03242623          	sw	s2,44(s0)
80002474:	014030ef          	jal	ra,80005488 <__retarget_lock_init_recursive>
80002478:	0084a403          	lw	s0,8(s1)
8000247c:	000107b7          	lui	a5,0x10
80002480:	00978793          	addi	a5,a5,9 # 10009 <__rom_region_size+0x7a6d>
80002484:	00f42623          	sw	a5,12(s0)
80002488:	00800613          	li	a2,8
8000248c:	00000593          	li	a1,0
80002490:	00042023          	sw	zero,0(s0)
80002494:	00042223          	sw	zero,4(s0)
80002498:	00042423          	sw	zero,8(s0)
8000249c:	06042223          	sw	zero,100(s0)
800024a0:	00042823          	sw	zero,16(s0)
800024a4:	00042a23          	sw	zero,20(s0)
800024a8:	00042c23          	sw	zero,24(s0)
800024ac:	05c40513          	addi	a0,s0,92
800024b0:	8ddfe0ef          	jal	ra,80000d8c <memset>
800024b4:	05840513          	addi	a0,s0,88
800024b8:	00842e23          	sw	s0,28(s0)
800024bc:	03642023          	sw	s6,32(s0)
800024c0:	03442223          	sw	s4,36(s0)
800024c4:	03342423          	sw	s3,40(s0)
800024c8:	03242623          	sw	s2,44(s0)
800024cc:	7bd020ef          	jal	ra,80005488 <__retarget_lock_init_recursive>
800024d0:	00c4a403          	lw	s0,12(s1)
800024d4:	000207b7          	lui	a5,0x20
800024d8:	01278793          	addi	a5,a5,18 # 20012 <__rom_region_size+0x17a76>
800024dc:	00f42623          	sw	a5,12(s0)
800024e0:	00800613          	li	a2,8
800024e4:	00000593          	li	a1,0
800024e8:	00042023          	sw	zero,0(s0)
800024ec:	00042223          	sw	zero,4(s0)
800024f0:	00042423          	sw	zero,8(s0)
800024f4:	06042223          	sw	zero,100(s0)
800024f8:	00042823          	sw	zero,16(s0)
800024fc:	00042a23          	sw	zero,20(s0)
80002500:	00042c23          	sw	zero,24(s0)
80002504:	05c40513          	addi	a0,s0,92
80002508:	885fe0ef          	jal	ra,80000d8c <memset>
8000250c:	05840513          	addi	a0,s0,88
80002510:	00842e23          	sw	s0,28(s0)
80002514:	03642023          	sw	s6,32(s0)
80002518:	03442223          	sw	s4,36(s0)
8000251c:	03342423          	sw	s3,40(s0)
80002520:	03242623          	sw	s2,44(s0)
80002524:	765020ef          	jal	ra,80005488 <__retarget_lock_init_recursive>
80002528:	00100793          	li	a5,1
8000252c:	02f4ac23          	sw	a5,56(s1)
80002530:	01812403          	lw	s0,24(sp)
80002534:	01c12083          	lw	ra,28(sp)
80002538:	01412483          	lw	s1,20(sp)
8000253c:	01012903          	lw	s2,16(sp)
80002540:	00c12983          	lw	s3,12(sp)
80002544:	00812a03          	lw	s4,8(sp)
80002548:	00012b03          	lw	s6,0(sp)
8000254c:	84418513          	addi	a0,gp,-1980 # 8000ae04 <__lock___sinit_recursive_mutex>
80002550:	00412a83          	lw	s5,4(sp)
80002554:	02010113          	addi	sp,sp,32
80002558:	7890206f          	j	800054e0 <__retarget_lock_release_recursive>

8000255c <__sfp>:
8000255c:	00308013          	addi	zero,ra,3
80002560:	fe010113          	addi	sp,sp,-32
80002564:	01312623          	sw	s3,12(sp)
80002568:	01412423          	sw	s4,8(sp)
8000256c:	00050a13          	mv	s4,a0
80002570:	83018513          	addi	a0,gp,-2000 # 8000adf0 <__lock___sfp_recursive_mutex>
80002574:	01212823          	sw	s2,16(sp)
80002578:	00112e23          	sw	ra,28(sp)
8000257c:	00812c23          	sw	s0,24(sp)
80002580:	00912a23          	sw	s1,20(sp)
80002584:	739020ef          	jal	ra,800054bc <__retarget_lock_acquire_recursive>
80002588:	800087b7          	lui	a5,0x80008
8000258c:	fa87a903          	lw	s2,-88(a5) # 80007fa8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007fa9>
80002590:	03892783          	lw	a5,56(s2)
80002594:	0c078063          	beqz	a5,80002654 <__sfp+0xf8>
80002598:	14c90913          	addi	s2,s2,332
8000259c:	fff00493          	li	s1,-1
800025a0:	00492783          	lw	a5,4(s2)
800025a4:	00892403          	lw	s0,8(s2)
800025a8:	fff78793          	addi	a5,a5,-1
800025ac:	0007d863          	bgez	a5,800025bc <__sfp+0x60>
800025b0:	0940006f          	j	80002644 <__sfp+0xe8>
800025b4:	06840413          	addi	s0,s0,104
800025b8:	08978663          	beq	a5,s1,80002644 <__sfp+0xe8>
800025bc:	00c41703          	lh	a4,12(s0)
800025c0:	fff78793          	addi	a5,a5,-1
800025c4:	fe0718e3          	bnez	a4,800025b4 <__sfp+0x58>
800025c8:	ffff07b7          	lui	a5,0xffff0
800025cc:	00178793          	addi	a5,a5,1 # ffff0001 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff0002>
800025d0:	00f42623          	sw	a5,12(s0)
800025d4:	05840513          	addi	a0,s0,88
800025d8:	06042223          	sw	zero,100(s0)
800025dc:	6ad020ef          	jal	ra,80005488 <__retarget_lock_init_recursive>
800025e0:	83018513          	addi	a0,gp,-2000 # 8000adf0 <__lock___sfp_recursive_mutex>
800025e4:	6fd020ef          	jal	ra,800054e0 <__retarget_lock_release_recursive>
800025e8:	00800613          	li	a2,8
800025ec:	00042023          	sw	zero,0(s0)
800025f0:	00042423          	sw	zero,8(s0)
800025f4:	00042223          	sw	zero,4(s0)
800025f8:	00042823          	sw	zero,16(s0)
800025fc:	00042a23          	sw	zero,20(s0)
80002600:	00042c23          	sw	zero,24(s0)
80002604:	00000593          	li	a1,0
80002608:	05c40513          	addi	a0,s0,92
8000260c:	f80fe0ef          	jal	ra,80000d8c <memset>
80002610:	02042823          	sw	zero,48(s0)
80002614:	02042a23          	sw	zero,52(s0)
80002618:	04042223          	sw	zero,68(s0)
8000261c:	04042423          	sw	zero,72(s0)
80002620:	01c12083          	lw	ra,28(sp)
80002624:	00040513          	mv	a0,s0
80002628:	01812403          	lw	s0,24(sp)
8000262c:	01412483          	lw	s1,20(sp)
80002630:	01012903          	lw	s2,16(sp)
80002634:	00c12983          	lw	s3,12(sp)
80002638:	00812a03          	lw	s4,8(sp)
8000263c:	02010113          	addi	sp,sp,32
80002640:	00008067          	ret
80002644:	00092403          	lw	s0,0(s2)
80002648:	00040c63          	beqz	s0,80002660 <__sfp+0x104>
8000264c:	00040913          	mv	s2,s0
80002650:	f51ff06f          	j	800025a0 <__sfp+0x44>
80002654:	00090513          	mv	a0,s2
80002658:	d51ff0ef          	jal	ra,800023a8 <__sinit>
8000265c:	f3dff06f          	j	80002598 <__sfp+0x3c>
80002660:	1ac00593          	li	a1,428
80002664:	000a0513          	mv	a0,s4
80002668:	a61fe0ef          	jal	ra,800010c8 <_malloc_r>
8000266c:	00050413          	mv	s0,a0
80002670:	02050863          	beqz	a0,800026a0 <__sfp+0x144>
80002674:	00c50513          	addi	a0,a0,12
80002678:	00400793          	li	a5,4
8000267c:	00042023          	sw	zero,0(s0)
80002680:	00f42223          	sw	a5,4(s0)
80002684:	00a42423          	sw	a0,8(s0)
80002688:	1a000613          	li	a2,416
8000268c:	00000593          	li	a1,0
80002690:	efcfe0ef          	jal	ra,80000d8c <memset>
80002694:	00892023          	sw	s0,0(s2)
80002698:	00040913          	mv	s2,s0
8000269c:	f05ff06f          	j	800025a0 <__sfp+0x44>
800026a0:	00092023          	sw	zero,0(s2)
800026a4:	83018513          	addi	a0,gp,-2000 # 8000adf0 <__lock___sfp_recursive_mutex>
800026a8:	639020ef          	jal	ra,800054e0 <__retarget_lock_release_recursive>
800026ac:	00c00793          	li	a5,12
800026b0:	00fa2023          	sw	a5,0(s4)
800026b4:	f6dff06f          	j	80002620 <__sfp+0xc4>

800026b8 <__sfp_lock_acquire>:
800026b8:	00308013          	addi	zero,ra,3
800026bc:	83018513          	addi	a0,gp,-2000 # 8000adf0 <__lock___sfp_recursive_mutex>
800026c0:	5fd0206f          	j	800054bc <__retarget_lock_acquire_recursive>

800026c4 <__sfp_lock_release>:
800026c4:	00308013          	addi	zero,ra,3
800026c8:	83018513          	addi	a0,gp,-2000 # 8000adf0 <__lock___sfp_recursive_mutex>
800026cc:	6150206f          	j	800054e0 <__retarget_lock_release_recursive>

800026d0 <__sinit_lock_acquire>:
800026d0:	00308013          	addi	zero,ra,3
800026d4:	84418513          	addi	a0,gp,-1980 # 8000ae04 <__lock___sinit_recursive_mutex>
800026d8:	5e50206f          	j	800054bc <__retarget_lock_acquire_recursive>

800026dc <__sinit_lock_release>:
800026dc:	00308013          	addi	zero,ra,3
800026e0:	84418513          	addi	a0,gp,-1980 # 8000ae04 <__lock___sinit_recursive_mutex>
800026e4:	5fd0206f          	j	800054e0 <__retarget_lock_release_recursive>

800026e8 <__fp_lock_all>:
800026e8:	00308013          	addi	zero,ra,3
800026ec:	ff010113          	addi	sp,sp,-16
800026f0:	83018513          	addi	a0,gp,-2000 # 8000adf0 <__lock___sfp_recursive_mutex>
800026f4:	00112623          	sw	ra,12(sp)
800026f8:	5c5020ef          	jal	ra,800054bc <__retarget_lock_acquire_recursive>
800026fc:	00c12083          	lw	ra,12(sp)
80002700:	8141a503          	lw	a0,-2028(gp) # 8000add4 <_impure_ptr>
80002704:	800025b7          	lui	a1,0x80002
80002708:	29858593          	addi	a1,a1,664 # 80002298 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80002299>
8000270c:	01010113          	addi	sp,sp,16
80002710:	4d00006f          	j	80002be0 <_fwalk>

80002714 <__fp_unlock_all>:
80002714:	00308013          	addi	zero,ra,3
80002718:	8141a503          	lw	a0,-2028(gp) # 8000add4 <_impure_ptr>
8000271c:	800025b7          	lui	a1,0x80002
80002720:	ff010113          	addi	sp,sp,-16
80002724:	2dc58593          	addi	a1,a1,732 # 800022dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800022dd>
80002728:	00112623          	sw	ra,12(sp)
8000272c:	4b4000ef          	jal	ra,80002be0 <_fwalk>
80002730:	00c12083          	lw	ra,12(sp)
80002734:	83018513          	addi	a0,gp,-2000 # 8000adf0 <__lock___sfp_recursive_mutex>
80002738:	01010113          	addi	sp,sp,16
8000273c:	5a50206f          	j	800054e0 <__retarget_lock_release_recursive>

80002740 <__sfvwrite_r>:
80002740:	00308013          	addi	zero,ra,3
80002744:	00862783          	lw	a5,8(a2)
80002748:	30078a63          	beqz	a5,80002a5c <__sfvwrite_r+0x31c>
8000274c:	00c59683          	lh	a3,12(a1)
80002750:	fd010113          	addi	sp,sp,-48
80002754:	02812423          	sw	s0,40(sp)
80002758:	01412c23          	sw	s4,24(sp)
8000275c:	01612823          	sw	s6,16(sp)
80002760:	02112623          	sw	ra,44(sp)
80002764:	02912223          	sw	s1,36(sp)
80002768:	03212023          	sw	s2,32(sp)
8000276c:	01312e23          	sw	s3,28(sp)
80002770:	01512a23          	sw	s5,20(sp)
80002774:	01712623          	sw	s7,12(sp)
80002778:	01812423          	sw	s8,8(sp)
8000277c:	01912223          	sw	s9,4(sp)
80002780:	0086f793          	andi	a5,a3,8
80002784:	00060b13          	mv	s6,a2
80002788:	00050a13          	mv	s4,a0
8000278c:	00058413          	mv	s0,a1
80002790:	08078663          	beqz	a5,8000281c <__sfvwrite_r+0xdc>
80002794:	0105a783          	lw	a5,16(a1)
80002798:	08078263          	beqz	a5,8000281c <__sfvwrite_r+0xdc>
8000279c:	0026f793          	andi	a5,a3,2
800027a0:	000b2483          	lw	s1,0(s6)
800027a4:	08078c63          	beqz	a5,8000283c <__sfvwrite_r+0xfc>
800027a8:	02442783          	lw	a5,36(s0)
800027ac:	01c42583          	lw	a1,28(s0)
800027b0:	80000ab7          	lui	s5,0x80000
800027b4:	00000993          	li	s3,0
800027b8:	00000913          	li	s2,0
800027bc:	c00aca93          	xori	s5,s5,-1024
800027c0:	00098613          	mv	a2,s3
800027c4:	000a0513          	mv	a0,s4
800027c8:	04090263          	beqz	s2,8000280c <__sfvwrite_r+0xcc>
800027cc:	00090693          	mv	a3,s2
800027d0:	012af463          	bgeu	s5,s2,800027d8 <__sfvwrite_r+0x98>
800027d4:	000a8693          	mv	a3,s5
800027d8:	000780e7          	jalr	a5
800027dc:	26a05663          	blez	a0,80002a48 <__sfvwrite_r+0x308>
800027e0:	008b2783          	lw	a5,8(s6)
800027e4:	00a989b3          	add	s3,s3,a0
800027e8:	40a90933          	sub	s2,s2,a0
800027ec:	40a787b3          	sub	a5,a5,a0
800027f0:	00fb2423          	sw	a5,8(s6)
800027f4:	20078663          	beqz	a5,80002a00 <__sfvwrite_r+0x2c0>
800027f8:	02442783          	lw	a5,36(s0)
800027fc:	01c42583          	lw	a1,28(s0)
80002800:	00098613          	mv	a2,s3
80002804:	000a0513          	mv	a0,s4
80002808:	fc0912e3          	bnez	s2,800027cc <__sfvwrite_r+0x8c>
8000280c:	0004a983          	lw	s3,0(s1)
80002810:	0044a903          	lw	s2,4(s1)
80002814:	00848493          	addi	s1,s1,8
80002818:	fa9ff06f          	j	800027c0 <__sfvwrite_r+0x80>
8000281c:	00040593          	mv	a1,s0
80002820:	000a0513          	mv	a0,s4
80002824:	d54ff0ef          	jal	ra,80001d78 <__swsetup_r>
80002828:	22051663          	bnez	a0,80002a54 <__sfvwrite_r+0x314>
8000282c:	00c41683          	lh	a3,12(s0)
80002830:	000b2483          	lw	s1,0(s6)
80002834:	0026f793          	andi	a5,a3,2
80002838:	f60798e3          	bnez	a5,800027a8 <__sfvwrite_r+0x68>
8000283c:	0016f793          	andi	a5,a3,1
80002840:	12079c63          	bnez	a5,80002978 <__sfvwrite_r+0x238>
80002844:	00042783          	lw	a5,0(s0)
80002848:	00842703          	lw	a4,8(s0)
8000284c:	80000ab7          	lui	s5,0x80000
80002850:	00000b93          	li	s7,0
80002854:	00000993          	li	s3,0
80002858:	fffaca93          	not	s5,s5
8000285c:	00078513          	mv	a0,a5
80002860:	00070c13          	mv	s8,a4
80002864:	10098263          	beqz	s3,80002968 <__sfvwrite_r+0x228>
80002868:	2006f613          	andi	a2,a3,512
8000286c:	24060c63          	beqz	a2,80002ac4 <__sfvwrite_r+0x384>
80002870:	00070c93          	mv	s9,a4
80002874:	2ee9e463          	bltu	s3,a4,80002b5c <__sfvwrite_r+0x41c>
80002878:	4806f713          	andi	a4,a3,1152
8000287c:	08070a63          	beqz	a4,80002910 <__sfvwrite_r+0x1d0>
80002880:	01442603          	lw	a2,20(s0)
80002884:	01042583          	lw	a1,16(s0)
80002888:	00161713          	slli	a4,a2,0x1
8000288c:	00c70733          	add	a4,a4,a2
80002890:	40b78933          	sub	s2,a5,a1
80002894:	01f75c13          	srli	s8,a4,0x1f
80002898:	00ec0c33          	add	s8,s8,a4
8000289c:	00190793          	addi	a5,s2,1
800028a0:	401c5c13          	srai	s8,s8,0x1
800028a4:	013787b3          	add	a5,a5,s3
800028a8:	000c0613          	mv	a2,s8
800028ac:	00fc7663          	bgeu	s8,a5,800028b8 <__sfvwrite_r+0x178>
800028b0:	00078c13          	mv	s8,a5
800028b4:	00078613          	mv	a2,a5
800028b8:	4006f693          	andi	a3,a3,1024
800028bc:	2c068c63          	beqz	a3,80002b94 <__sfvwrite_r+0x454>
800028c0:	00060593          	mv	a1,a2
800028c4:	000a0513          	mv	a0,s4
800028c8:	801fe0ef          	jal	ra,800010c8 <_malloc_r>
800028cc:	00050c93          	mv	s9,a0
800028d0:	30050063          	beqz	a0,80002bd0 <__sfvwrite_r+0x490>
800028d4:	01042583          	lw	a1,16(s0)
800028d8:	00090613          	mv	a2,s2
800028dc:	93cfe0ef          	jal	ra,80000a18 <memcpy>
800028e0:	00c45783          	lhu	a5,12(s0)
800028e4:	b7f7f793          	andi	a5,a5,-1153
800028e8:	0807e793          	ori	a5,a5,128
800028ec:	00f41623          	sh	a5,12(s0)
800028f0:	012c8533          	add	a0,s9,s2
800028f4:	412c07b3          	sub	a5,s8,s2
800028f8:	01942823          	sw	s9,16(s0)
800028fc:	01842a23          	sw	s8,20(s0)
80002900:	00a42023          	sw	a0,0(s0)
80002904:	00098c13          	mv	s8,s3
80002908:	00f42423          	sw	a5,8(s0)
8000290c:	00098c93          	mv	s9,s3
80002910:	000c8613          	mv	a2,s9
80002914:	000b8593          	mv	a1,s7
80002918:	6c4000ef          	jal	ra,80002fdc <memmove>
8000291c:	00842703          	lw	a4,8(s0)
80002920:	00042783          	lw	a5,0(s0)
80002924:	00098913          	mv	s2,s3
80002928:	41870733          	sub	a4,a4,s8
8000292c:	019787b3          	add	a5,a5,s9
80002930:	00e42423          	sw	a4,8(s0)
80002934:	00f42023          	sw	a5,0(s0)
80002938:	00000993          	li	s3,0
8000293c:	008b2783          	lw	a5,8(s6)
80002940:	012b8bb3          	add	s7,s7,s2
80002944:	412787b3          	sub	a5,a5,s2
80002948:	00fb2423          	sw	a5,8(s6)
8000294c:	0a078a63          	beqz	a5,80002a00 <__sfvwrite_r+0x2c0>
80002950:	00042783          	lw	a5,0(s0)
80002954:	00842703          	lw	a4,8(s0)
80002958:	00c41683          	lh	a3,12(s0)
8000295c:	00078513          	mv	a0,a5
80002960:	00070c13          	mv	s8,a4
80002964:	f00992e3          	bnez	s3,80002868 <__sfvwrite_r+0x128>
80002968:	0004ab83          	lw	s7,0(s1)
8000296c:	0044a983          	lw	s3,4(s1)
80002970:	00848493          	addi	s1,s1,8
80002974:	ee9ff06f          	j	8000285c <__sfvwrite_r+0x11c>
80002978:	00000a93          	li	s5,0
8000297c:	00000513          	li	a0,0
80002980:	00000c13          	li	s8,0
80002984:	00000993          	li	s3,0
80002988:	0c098e63          	beqz	s3,80002a64 <__sfvwrite_r+0x324>
8000298c:	0e050663          	beqz	a0,80002a78 <__sfvwrite_r+0x338>
80002990:	000a8793          	mv	a5,s5
80002994:	00098b93          	mv	s7,s3
80002998:	0137f463          	bgeu	a5,s3,800029a0 <__sfvwrite_r+0x260>
8000299c:	00078b93          	mv	s7,a5
800029a0:	00042503          	lw	a0,0(s0)
800029a4:	01042783          	lw	a5,16(s0)
800029a8:	00842903          	lw	s2,8(s0)
800029ac:	01442683          	lw	a3,20(s0)
800029b0:	00a7f663          	bgeu	a5,a0,800029bc <__sfvwrite_r+0x27c>
800029b4:	00d90933          	add	s2,s2,a3
800029b8:	0f794063          	blt	s2,s7,80002a98 <__sfvwrite_r+0x358>
800029bc:	1adbc663          	blt	s7,a3,80002b68 <__sfvwrite_r+0x428>
800029c0:	02442783          	lw	a5,36(s0)
800029c4:	01c42583          	lw	a1,28(s0)
800029c8:	000c0613          	mv	a2,s8
800029cc:	000a0513          	mv	a0,s4
800029d0:	000780e7          	jalr	a5
800029d4:	00050913          	mv	s2,a0
800029d8:	06a05863          	blez	a0,80002a48 <__sfvwrite_r+0x308>
800029dc:	412a8ab3          	sub	s5,s5,s2
800029e0:	00100513          	li	a0,1
800029e4:	040a8a63          	beqz	s5,80002a38 <__sfvwrite_r+0x2f8>
800029e8:	008b2783          	lw	a5,8(s6)
800029ec:	012c0c33          	add	s8,s8,s2
800029f0:	412989b3          	sub	s3,s3,s2
800029f4:	412787b3          	sub	a5,a5,s2
800029f8:	00fb2423          	sw	a5,8(s6)
800029fc:	f80796e3          	bnez	a5,80002988 <__sfvwrite_r+0x248>
80002a00:	00000513          	li	a0,0
80002a04:	02c12083          	lw	ra,44(sp)
80002a08:	02812403          	lw	s0,40(sp)
80002a0c:	02412483          	lw	s1,36(sp)
80002a10:	02012903          	lw	s2,32(sp)
80002a14:	01c12983          	lw	s3,28(sp)
80002a18:	01812a03          	lw	s4,24(sp)
80002a1c:	01412a83          	lw	s5,20(sp)
80002a20:	01012b03          	lw	s6,16(sp)
80002a24:	00c12b83          	lw	s7,12(sp)
80002a28:	00812c03          	lw	s8,8(sp)
80002a2c:	00412c83          	lw	s9,4(sp)
80002a30:	03010113          	addi	sp,sp,48
80002a34:	00008067          	ret
80002a38:	00040593          	mv	a1,s0
80002a3c:	000a0513          	mv	a0,s4
80002a40:	e98ff0ef          	jal	ra,800020d8 <_fflush_r>
80002a44:	fa0502e3          	beqz	a0,800029e8 <__sfvwrite_r+0x2a8>
80002a48:	00c41783          	lh	a5,12(s0)
80002a4c:	0407e793          	ori	a5,a5,64
80002a50:	00f41623          	sh	a5,12(s0)
80002a54:	fff00513          	li	a0,-1
80002a58:	fadff06f          	j	80002a04 <__sfvwrite_r+0x2c4>
80002a5c:	00000513          	li	a0,0
80002a60:	00008067          	ret
80002a64:	0044a983          	lw	s3,4(s1)
80002a68:	00048793          	mv	a5,s1
80002a6c:	00848493          	addi	s1,s1,8
80002a70:	fe098ae3          	beqz	s3,80002a64 <__sfvwrite_r+0x324>
80002a74:	0007ac03          	lw	s8,0(a5)
80002a78:	00098613          	mv	a2,s3
80002a7c:	00a00593          	li	a1,10
80002a80:	000c0513          	mv	a0,s8
80002a84:	490000ef          	jal	ra,80002f14 <memchr>
80002a88:	12050e63          	beqz	a0,80002bc4 <__sfvwrite_r+0x484>
80002a8c:	00150513          	addi	a0,a0,1
80002a90:	41850ab3          	sub	s5,a0,s8
80002a94:	efdff06f          	j	80002990 <__sfvwrite_r+0x250>
80002a98:	000c0593          	mv	a1,s8
80002a9c:	00090613          	mv	a2,s2
80002aa0:	53c000ef          	jal	ra,80002fdc <memmove>
80002aa4:	00042783          	lw	a5,0(s0)
80002aa8:	00040593          	mv	a1,s0
80002aac:	000a0513          	mv	a0,s4
80002ab0:	012787b3          	add	a5,a5,s2
80002ab4:	00f42023          	sw	a5,0(s0)
80002ab8:	e20ff0ef          	jal	ra,800020d8 <_fflush_r>
80002abc:	f20500e3          	beqz	a0,800029dc <__sfvwrite_r+0x29c>
80002ac0:	f89ff06f          	j	80002a48 <__sfvwrite_r+0x308>
80002ac4:	01042683          	lw	a3,16(s0)
80002ac8:	04f6e263          	bltu	a3,a5,80002b0c <__sfvwrite_r+0x3cc>
80002acc:	01442603          	lw	a2,20(s0)
80002ad0:	02c9ee63          	bltu	s3,a2,80002b0c <__sfvwrite_r+0x3cc>
80002ad4:	00098793          	mv	a5,s3
80002ad8:	013af463          	bgeu	s5,s3,80002ae0 <__sfvwrite_r+0x3a0>
80002adc:	000a8793          	mv	a5,s5
80002ae0:	02c7e6b3          	rem	a3,a5,a2
80002ae4:	02442703          	lw	a4,36(s0)
80002ae8:	01c42583          	lw	a1,28(s0)
80002aec:	000b8613          	mv	a2,s7
80002af0:	000a0513          	mv	a0,s4
80002af4:	40d786b3          	sub	a3,a5,a3
80002af8:	000700e7          	jalr	a4 # 1000 <CONFIG_ISR_STACK_SIZE>
80002afc:	00050913          	mv	s2,a0
80002b00:	f4a054e3          	blez	a0,80002a48 <__sfvwrite_r+0x308>
80002b04:	412989b3          	sub	s3,s3,s2
80002b08:	e35ff06f          	j	8000293c <__sfvwrite_r+0x1fc>
80002b0c:	00070913          	mv	s2,a4
80002b10:	00e9f463          	bgeu	s3,a4,80002b18 <__sfvwrite_r+0x3d8>
80002b14:	00098913          	mv	s2,s3
80002b18:	00078513          	mv	a0,a5
80002b1c:	00090613          	mv	a2,s2
80002b20:	000b8593          	mv	a1,s7
80002b24:	4b8000ef          	jal	ra,80002fdc <memmove>
80002b28:	00842703          	lw	a4,8(s0)
80002b2c:	00042783          	lw	a5,0(s0)
80002b30:	41270733          	sub	a4,a4,s2
80002b34:	012787b3          	add	a5,a5,s2
80002b38:	00e42423          	sw	a4,8(s0)
80002b3c:	00f42023          	sw	a5,0(s0)
80002b40:	fc0712e3          	bnez	a4,80002b04 <__sfvwrite_r+0x3c4>
80002b44:	00040593          	mv	a1,s0
80002b48:	000a0513          	mv	a0,s4
80002b4c:	d8cff0ef          	jal	ra,800020d8 <_fflush_r>
80002b50:	ee051ce3          	bnez	a0,80002a48 <__sfvwrite_r+0x308>
80002b54:	412989b3          	sub	s3,s3,s2
80002b58:	de5ff06f          	j	8000293c <__sfvwrite_r+0x1fc>
80002b5c:	00098c13          	mv	s8,s3
80002b60:	00098c93          	mv	s9,s3
80002b64:	dadff06f          	j	80002910 <__sfvwrite_r+0x1d0>
80002b68:	000b8613          	mv	a2,s7
80002b6c:	000c0593          	mv	a1,s8
80002b70:	46c000ef          	jal	ra,80002fdc <memmove>
80002b74:	00842703          	lw	a4,8(s0)
80002b78:	00042783          	lw	a5,0(s0)
80002b7c:	000b8913          	mv	s2,s7
80002b80:	41770733          	sub	a4,a4,s7
80002b84:	017787b3          	add	a5,a5,s7
80002b88:	00e42423          	sw	a4,8(s0)
80002b8c:	00f42023          	sw	a5,0(s0)
80002b90:	e4dff06f          	j	800029dc <__sfvwrite_r+0x29c>
80002b94:	000a0513          	mv	a0,s4
80002b98:	650000ef          	jal	ra,800031e8 <_realloc_r>
80002b9c:	00050c93          	mv	s9,a0
80002ba0:	d40518e3          	bnez	a0,800028f0 <__sfvwrite_r+0x1b0>
80002ba4:	01042583          	lw	a1,16(s0)
80002ba8:	000a0513          	mv	a0,s4
80002bac:	bb0fe0ef          	jal	ra,80000f5c <_free_r>
80002bb0:	00c41783          	lh	a5,12(s0)
80002bb4:	00c00713          	li	a4,12
80002bb8:	00ea2023          	sw	a4,0(s4)
80002bbc:	f7f7f793          	andi	a5,a5,-129
80002bc0:	e8dff06f          	j	80002a4c <__sfvwrite_r+0x30c>
80002bc4:	00198793          	addi	a5,s3,1
80002bc8:	00078a93          	mv	s5,a5
80002bcc:	dc9ff06f          	j	80002994 <__sfvwrite_r+0x254>
80002bd0:	00c00713          	li	a4,12
80002bd4:	00c41783          	lh	a5,12(s0)
80002bd8:	00ea2023          	sw	a4,0(s4)
80002bdc:	e71ff06f          	j	80002a4c <__sfvwrite_r+0x30c>

80002be0 <_fwalk>:
80002be0:	00308013          	addi	zero,ra,3
80002be4:	fe010113          	addi	sp,sp,-32
80002be8:	01212823          	sw	s2,16(sp)
80002bec:	01312623          	sw	s3,12(sp)
80002bf0:	01412423          	sw	s4,8(sp)
80002bf4:	01512223          	sw	s5,4(sp)
80002bf8:	01612023          	sw	s6,0(sp)
80002bfc:	00112e23          	sw	ra,28(sp)
80002c00:	00812c23          	sw	s0,24(sp)
80002c04:	00912a23          	sw	s1,20(sp)
80002c08:	00058b13          	mv	s6,a1
80002c0c:	14c50a93          	addi	s5,a0,332
80002c10:	00000a13          	li	s4,0
80002c14:	00100993          	li	s3,1
80002c18:	fff00913          	li	s2,-1
80002c1c:	004aa483          	lw	s1,4(s5) # 80000004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000005>
80002c20:	008aa403          	lw	s0,8(s5)
80002c24:	fff48493          	addi	s1,s1,-1
80002c28:	0204c663          	bltz	s1,80002c54 <_fwalk+0x74>
80002c2c:	00c45783          	lhu	a5,12(s0)
80002c30:	fff48493          	addi	s1,s1,-1
80002c34:	00f9fc63          	bgeu	s3,a5,80002c4c <_fwalk+0x6c>
80002c38:	00e41783          	lh	a5,14(s0)
80002c3c:	00040513          	mv	a0,s0
80002c40:	01278663          	beq	a5,s2,80002c4c <_fwalk+0x6c>
80002c44:	000b00e7          	jalr	s6
80002c48:	00aa6a33          	or	s4,s4,a0
80002c4c:	06840413          	addi	s0,s0,104
80002c50:	fd249ee3          	bne	s1,s2,80002c2c <_fwalk+0x4c>
80002c54:	000aaa83          	lw	s5,0(s5)
80002c58:	fc0a92e3          	bnez	s5,80002c1c <_fwalk+0x3c>
80002c5c:	01c12083          	lw	ra,28(sp)
80002c60:	01812403          	lw	s0,24(sp)
80002c64:	01412483          	lw	s1,20(sp)
80002c68:	01012903          	lw	s2,16(sp)
80002c6c:	00c12983          	lw	s3,12(sp)
80002c70:	00412a83          	lw	s5,4(sp)
80002c74:	00012b03          	lw	s6,0(sp)
80002c78:	000a0513          	mv	a0,s4
80002c7c:	00812a03          	lw	s4,8(sp)
80002c80:	02010113          	addi	sp,sp,32
80002c84:	00008067          	ret

80002c88 <_fwalk_reent>:
80002c88:	00308013          	addi	zero,ra,3
80002c8c:	fd010113          	addi	sp,sp,-48
80002c90:	03212023          	sw	s2,32(sp)
80002c94:	01312e23          	sw	s3,28(sp)
80002c98:	01412c23          	sw	s4,24(sp)
80002c9c:	01512a23          	sw	s5,20(sp)
80002ca0:	01612823          	sw	s6,16(sp)
80002ca4:	01712623          	sw	s7,12(sp)
80002ca8:	02112623          	sw	ra,44(sp)
80002cac:	02812423          	sw	s0,40(sp)
80002cb0:	02912223          	sw	s1,36(sp)
80002cb4:	00050a93          	mv	s5,a0
80002cb8:	00058b93          	mv	s7,a1
80002cbc:	14c50b13          	addi	s6,a0,332
80002cc0:	00000a13          	li	s4,0
80002cc4:	00100993          	li	s3,1
80002cc8:	fff00913          	li	s2,-1
80002ccc:	004b2483          	lw	s1,4(s6)
80002cd0:	008b2403          	lw	s0,8(s6)
80002cd4:	fff48493          	addi	s1,s1,-1
80002cd8:	0204c863          	bltz	s1,80002d08 <_fwalk_reent+0x80>
80002cdc:	00c45783          	lhu	a5,12(s0)
80002ce0:	fff48493          	addi	s1,s1,-1
80002ce4:	00f9fe63          	bgeu	s3,a5,80002d00 <_fwalk_reent+0x78>
80002ce8:	00e41783          	lh	a5,14(s0)
80002cec:	00040593          	mv	a1,s0
80002cf0:	000a8513          	mv	a0,s5
80002cf4:	01278663          	beq	a5,s2,80002d00 <_fwalk_reent+0x78>
80002cf8:	000b80e7          	jalr	s7
80002cfc:	00aa6a33          	or	s4,s4,a0
80002d00:	06840413          	addi	s0,s0,104
80002d04:	fd249ce3          	bne	s1,s2,80002cdc <_fwalk_reent+0x54>
80002d08:	000b2b03          	lw	s6,0(s6)
80002d0c:	fc0b10e3          	bnez	s6,80002ccc <_fwalk_reent+0x44>
80002d10:	02c12083          	lw	ra,44(sp)
80002d14:	02812403          	lw	s0,40(sp)
80002d18:	02412483          	lw	s1,36(sp)
80002d1c:	02012903          	lw	s2,32(sp)
80002d20:	01c12983          	lw	s3,28(sp)
80002d24:	01412a83          	lw	s5,20(sp)
80002d28:	01012b03          	lw	s6,16(sp)
80002d2c:	00c12b83          	lw	s7,12(sp)
80002d30:	000a0513          	mv	a0,s4
80002d34:	01812a03          	lw	s4,24(sp)
80002d38:	03010113          	addi	sp,sp,48
80002d3c:	00008067          	ret

80002d40 <__smakebuf_r>:
80002d40:	00308013          	addi	zero,ra,3
80002d44:	00c59783          	lh	a5,12(a1)
80002d48:	f8010113          	addi	sp,sp,-128
80002d4c:	06812c23          	sw	s0,120(sp)
80002d50:	06112e23          	sw	ra,124(sp)
80002d54:	06912a23          	sw	s1,116(sp)
80002d58:	07212823          	sw	s2,112(sp)
80002d5c:	07312623          	sw	s3,108(sp)
80002d60:	0027f713          	andi	a4,a5,2
80002d64:	00058413          	mv	s0,a1
80002d68:	02070a63          	beqz	a4,80002d9c <__smakebuf_r+0x5c>
80002d6c:	04358793          	addi	a5,a1,67
80002d70:	00f5a023          	sw	a5,0(a1)
80002d74:	00f5a823          	sw	a5,16(a1)
80002d78:	00100793          	li	a5,1
80002d7c:	00f5aa23          	sw	a5,20(a1)
80002d80:	07c12083          	lw	ra,124(sp)
80002d84:	07812403          	lw	s0,120(sp)
80002d88:	07412483          	lw	s1,116(sp)
80002d8c:	07012903          	lw	s2,112(sp)
80002d90:	06c12983          	lw	s3,108(sp)
80002d94:	08010113          	addi	sp,sp,128
80002d98:	00008067          	ret
80002d9c:	00e59583          	lh	a1,14(a1)
80002da0:	00050493          	mv	s1,a0
80002da4:	0805c663          	bltz	a1,80002e30 <__smakebuf_r+0xf0>
80002da8:	00810613          	addi	a2,sp,8
80002dac:	591000ef          	jal	ra,80003b3c <_fstat_r>
80002db0:	06054e63          	bltz	a0,80002e2c <__smakebuf_r+0xec>
80002db4:	00c12783          	lw	a5,12(sp)
80002db8:	0000f937          	lui	s2,0xf
80002dbc:	40000993          	li	s3,1024
80002dc0:	00f97933          	and	s2,s2,a5
80002dc4:	ffffe7b7          	lui	a5,0xffffe
80002dc8:	00f90933          	add	s2,s2,a5
80002dcc:	00193913          	seqz	s2,s2
80002dd0:	00098593          	mv	a1,s3
80002dd4:	00048513          	mv	a0,s1
80002dd8:	af0fe0ef          	jal	ra,800010c8 <_malloc_r>
80002ddc:	06050c63          	beqz	a0,80002e54 <__smakebuf_r+0x114>
80002de0:	00c45783          	lhu	a5,12(s0)
80002de4:	80002737          	lui	a4,0x80002
80002de8:	28870713          	addi	a4,a4,648 # 80002288 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80002289>
80002dec:	02e4ae23          	sw	a4,60(s1)
80002df0:	0807e793          	ori	a5,a5,128
80002df4:	00f41623          	sh	a5,12(s0)
80002df8:	00a42023          	sw	a0,0(s0)
80002dfc:	00a42823          	sw	a0,16(s0)
80002e00:	01342a23          	sw	s3,20(s0)
80002e04:	f6090ee3          	beqz	s2,80002d80 <__smakebuf_r+0x40>
80002e08:	00e41583          	lh	a1,14(s0)
80002e0c:	00048513          	mv	a0,s1
80002e10:	599000ef          	jal	ra,80003ba8 <_isatty_r>
80002e14:	f60506e3          	beqz	a0,80002d80 <__smakebuf_r+0x40>
80002e18:	00c45783          	lhu	a5,12(s0)
80002e1c:	ffc7f793          	andi	a5,a5,-4
80002e20:	0017e793          	ori	a5,a5,1
80002e24:	00f41623          	sh	a5,12(s0)
80002e28:	f59ff06f          	j	80002d80 <__smakebuf_r+0x40>
80002e2c:	00c41783          	lh	a5,12(s0)
80002e30:	0807f793          	andi	a5,a5,128
80002e34:	00000913          	li	s2,0
80002e38:	04000993          	li	s3,64
80002e3c:	f8079ae3          	bnez	a5,80002dd0 <__smakebuf_r+0x90>
80002e40:	40000993          	li	s3,1024
80002e44:	00098593          	mv	a1,s3
80002e48:	00048513          	mv	a0,s1
80002e4c:	a7cfe0ef          	jal	ra,800010c8 <_malloc_r>
80002e50:	f80518e3          	bnez	a0,80002de0 <__smakebuf_r+0xa0>
80002e54:	00c41783          	lh	a5,12(s0)
80002e58:	2007f713          	andi	a4,a5,512
80002e5c:	f20712e3          	bnez	a4,80002d80 <__smakebuf_r+0x40>
80002e60:	ffc7f793          	andi	a5,a5,-4
80002e64:	0027e793          	ori	a5,a5,2
80002e68:	04340713          	addi	a4,s0,67
80002e6c:	00f41623          	sh	a5,12(s0)
80002e70:	00100793          	li	a5,1
80002e74:	00e42023          	sw	a4,0(s0)
80002e78:	00e42823          	sw	a4,16(s0)
80002e7c:	00f42a23          	sw	a5,20(s0)
80002e80:	f01ff06f          	j	80002d80 <__smakebuf_r+0x40>

80002e84 <__swhatbuf_r>:
80002e84:	00308013          	addi	zero,ra,3
80002e88:	f9010113          	addi	sp,sp,-112
80002e8c:	06812423          	sw	s0,104(sp)
80002e90:	00058413          	mv	s0,a1
80002e94:	00e59583          	lh	a1,14(a1)
80002e98:	06912223          	sw	s1,100(sp)
80002e9c:	07212023          	sw	s2,96(sp)
80002ea0:	06112623          	sw	ra,108(sp)
80002ea4:	00060493          	mv	s1,a2
80002ea8:	00068913          	mv	s2,a3
80002eac:	0405c863          	bltz	a1,80002efc <__swhatbuf_r+0x78>
80002eb0:	00810613          	addi	a2,sp,8
80002eb4:	489000ef          	jal	ra,80003b3c <_fstat_r>
80002eb8:	04054263          	bltz	a0,80002efc <__swhatbuf_r+0x78>
80002ebc:	00c12703          	lw	a4,12(sp)
80002ec0:	0000f7b7          	lui	a5,0xf
80002ec4:	00e7f7b3          	and	a5,a5,a4
80002ec8:	ffffe737          	lui	a4,0xffffe
80002ecc:	00e787b3          	add	a5,a5,a4
80002ed0:	0017b793          	seqz	a5,a5
80002ed4:	40000713          	li	a4,1024
80002ed8:	06c12083          	lw	ra,108(sp)
80002edc:	06812403          	lw	s0,104(sp)
80002ee0:	00f92023          	sw	a5,0(s2) # f000 <__rom_region_size+0x6a64>
80002ee4:	00e4a023          	sw	a4,0(s1)
80002ee8:	06012903          	lw	s2,96(sp)
80002eec:	06412483          	lw	s1,100(sp)
80002ef0:	00000513          	li	a0,0
80002ef4:	07010113          	addi	sp,sp,112
80002ef8:	00008067          	ret
80002efc:	00c45783          	lhu	a5,12(s0)
80002f00:	0807f793          	andi	a5,a5,128
80002f04:	fc0788e3          	beqz	a5,80002ed4 <__swhatbuf_r+0x50>
80002f08:	00000793          	li	a5,0
80002f0c:	04000713          	li	a4,64
80002f10:	fc9ff06f          	j	80002ed8 <__swhatbuf_r+0x54>

80002f14 <memchr>:
80002f14:	00308013          	addi	zero,ra,3
80002f18:	00357793          	andi	a5,a0,3
80002f1c:	0ff5f693          	zext.b	a3,a1
80002f20:	02078e63          	beqz	a5,80002f5c <memchr+0x48>
80002f24:	fff60793          	addi	a5,a2,-1
80002f28:	02060663          	beqz	a2,80002f54 <memchr+0x40>
80002f2c:	fff00613          	li	a2,-1
80002f30:	0180006f          	j	80002f48 <memchr+0x34>
80002f34:	00150513          	addi	a0,a0,1
80002f38:	00357713          	andi	a4,a0,3
80002f3c:	02070263          	beqz	a4,80002f60 <memchr+0x4c>
80002f40:	fff78793          	addi	a5,a5,-1 # efff <__rom_region_size+0x6a63>
80002f44:	00c78863          	beq	a5,a2,80002f54 <memchr+0x40>
80002f48:	00054703          	lbu	a4,0(a0)
80002f4c:	fed714e3          	bne	a4,a3,80002f34 <memchr+0x20>
80002f50:	00008067          	ret
80002f54:	00000513          	li	a0,0
80002f58:	00008067          	ret
80002f5c:	00060793          	mv	a5,a2
80002f60:	00300713          	li	a4,3
80002f64:	04f77c63          	bgeu	a4,a5,80002fbc <memchr+0xa8>
80002f68:	0ff5f593          	zext.b	a1,a1
80002f6c:	00859713          	slli	a4,a1,0x8
80002f70:	00b705b3          	add	a1,a4,a1
80002f74:	01059713          	slli	a4,a1,0x10
80002f78:	feff08b7          	lui	a7,0xfeff0
80002f7c:	80808837          	lui	a6,0x80808
80002f80:	00e585b3          	add	a1,a1,a4
80002f84:	eff88893          	addi	a7,a7,-257 # fefefeff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfefeff00>
80002f88:	08080813          	addi	a6,a6,128 # 80808080 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80808081>
80002f8c:	00300313          	li	t1,3
80002f90:	0100006f          	j	80002fa0 <memchr+0x8c>
80002f94:	ffc78793          	addi	a5,a5,-4
80002f98:	00450513          	addi	a0,a0,4
80002f9c:	02f37063          	bgeu	t1,a5,80002fbc <memchr+0xa8>
80002fa0:	00052703          	lw	a4,0(a0)
80002fa4:	00e5c733          	xor	a4,a1,a4
80002fa8:	01170633          	add	a2,a4,a7
80002fac:	fff74713          	not	a4,a4
80002fb0:	00e67733          	and	a4,a2,a4
80002fb4:	01077733          	and	a4,a4,a6
80002fb8:	fc070ee3          	beqz	a4,80002f94 <memchr+0x80>
80002fbc:	00f50733          	add	a4,a0,a5
80002fc0:	00079863          	bnez	a5,80002fd0 <memchr+0xbc>
80002fc4:	f91ff06f          	j	80002f54 <memchr+0x40>
80002fc8:	00150513          	addi	a0,a0,1
80002fcc:	f8a704e3          	beq	a4,a0,80002f54 <memchr+0x40>
80002fd0:	00054783          	lbu	a5,0(a0)
80002fd4:	fed79ae3          	bne	a5,a3,80002fc8 <memchr+0xb4>
80002fd8:	00008067          	ret

80002fdc <memmove>:
80002fdc:	00308013          	addi	zero,ra,3
80002fe0:	fd010113          	addi	sp,sp,-48
80002fe4:	02812623          	sw	s0,44(sp)
80002fe8:	03010413          	addi	s0,sp,48
80002fec:	fca42e23          	sw	a0,-36(s0)
80002ff0:	fcb42c23          	sw	a1,-40(s0)
80002ff4:	fcc42a23          	sw	a2,-44(s0)
80002ff8:	fdc42783          	lw	a5,-36(s0)
80002ffc:	fef42623          	sw	a5,-20(s0)
80003000:	fd842783          	lw	a5,-40(s0)
80003004:	fef42423          	sw	a5,-24(s0)
80003008:	fe842703          	lw	a4,-24(s0)
8000300c:	fec42783          	lw	a5,-20(s0)
80003010:	06f77c63          	bgeu	a4,a5,80003088 <memmove+0xac>
80003014:	fe842703          	lw	a4,-24(s0)
80003018:	fd442783          	lw	a5,-44(s0)
8000301c:	00f707b3          	add	a5,a4,a5
80003020:	fec42703          	lw	a4,-20(s0)
80003024:	06f77263          	bgeu	a4,a5,80003088 <memmove+0xac>
80003028:	fe842703          	lw	a4,-24(s0)
8000302c:	fd442783          	lw	a5,-44(s0)
80003030:	00f707b3          	add	a5,a4,a5
80003034:	fef42423          	sw	a5,-24(s0)
80003038:	fec42703          	lw	a4,-20(s0)
8000303c:	fd442783          	lw	a5,-44(s0)
80003040:	00f707b3          	add	a5,a4,a5
80003044:	fef42623          	sw	a5,-20(s0)
80003048:	02c0006f          	j	80003074 <memmove+0x98>
8000304c:	fe842783          	lw	a5,-24(s0)
80003050:	fff78793          	addi	a5,a5,-1
80003054:	fef42423          	sw	a5,-24(s0)
80003058:	fec42783          	lw	a5,-20(s0)
8000305c:	fff78793          	addi	a5,a5,-1
80003060:	fef42623          	sw	a5,-20(s0)
80003064:	fe842783          	lw	a5,-24(s0)
80003068:	0007c703          	lbu	a4,0(a5)
8000306c:	fec42783          	lw	a5,-20(s0)
80003070:	00e78023          	sb	a4,0(a5)
80003074:	fd442783          	lw	a5,-44(s0)
80003078:	fff78713          	addi	a4,a5,-1
8000307c:	fce42a23          	sw	a4,-44(s0)
80003080:	fc0796e3          	bnez	a5,8000304c <memmove+0x70>
80003084:	1500006f          	j	800031d4 <memmove+0x1f8>
80003088:	fd442703          	lw	a4,-44(s0)
8000308c:	00f00793          	li	a5,15
80003090:	12e7fa63          	bgeu	a5,a4,800031c4 <memmove+0x1e8>
80003094:	fe842703          	lw	a4,-24(s0)
80003098:	fec42783          	lw	a5,-20(s0)
8000309c:	00f767b3          	or	a5,a4,a5
800030a0:	0037f793          	andi	a5,a5,3
800030a4:	12079063          	bnez	a5,800031c4 <memmove+0x1e8>
800030a8:	fec42783          	lw	a5,-20(s0)
800030ac:	fef42223          	sw	a5,-28(s0)
800030b0:	fe842783          	lw	a5,-24(s0)
800030b4:	fef42023          	sw	a5,-32(s0)
800030b8:	0900006f          	j	80003148 <memmove+0x16c>
800030bc:	fe042703          	lw	a4,-32(s0)
800030c0:	00470793          	addi	a5,a4,4 # ffffe004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffffe005>
800030c4:	fef42023          	sw	a5,-32(s0)
800030c8:	fe442783          	lw	a5,-28(s0)
800030cc:	00478693          	addi	a3,a5,4
800030d0:	fed42223          	sw	a3,-28(s0)
800030d4:	00072703          	lw	a4,0(a4)
800030d8:	00e7a023          	sw	a4,0(a5)
800030dc:	fe042703          	lw	a4,-32(s0)
800030e0:	00470793          	addi	a5,a4,4
800030e4:	fef42023          	sw	a5,-32(s0)
800030e8:	fe442783          	lw	a5,-28(s0)
800030ec:	00478693          	addi	a3,a5,4
800030f0:	fed42223          	sw	a3,-28(s0)
800030f4:	00072703          	lw	a4,0(a4)
800030f8:	00e7a023          	sw	a4,0(a5)
800030fc:	fe042703          	lw	a4,-32(s0)
80003100:	00470793          	addi	a5,a4,4
80003104:	fef42023          	sw	a5,-32(s0)
80003108:	fe442783          	lw	a5,-28(s0)
8000310c:	00478693          	addi	a3,a5,4
80003110:	fed42223          	sw	a3,-28(s0)
80003114:	00072703          	lw	a4,0(a4)
80003118:	00e7a023          	sw	a4,0(a5)
8000311c:	fe042703          	lw	a4,-32(s0)
80003120:	00470793          	addi	a5,a4,4
80003124:	fef42023          	sw	a5,-32(s0)
80003128:	fe442783          	lw	a5,-28(s0)
8000312c:	00478693          	addi	a3,a5,4
80003130:	fed42223          	sw	a3,-28(s0)
80003134:	00072703          	lw	a4,0(a4)
80003138:	00e7a023          	sw	a4,0(a5)
8000313c:	fd442783          	lw	a5,-44(s0)
80003140:	ff078793          	addi	a5,a5,-16
80003144:	fcf42a23          	sw	a5,-44(s0)
80003148:	fd442703          	lw	a4,-44(s0)
8000314c:	00f00793          	li	a5,15
80003150:	f6e7e6e3          	bltu	a5,a4,800030bc <memmove+0xe0>
80003154:	0300006f          	j	80003184 <memmove+0x1a8>
80003158:	fe042703          	lw	a4,-32(s0)
8000315c:	00470793          	addi	a5,a4,4
80003160:	fef42023          	sw	a5,-32(s0)
80003164:	fe442783          	lw	a5,-28(s0)
80003168:	00478693          	addi	a3,a5,4
8000316c:	fed42223          	sw	a3,-28(s0)
80003170:	00072703          	lw	a4,0(a4)
80003174:	00e7a023          	sw	a4,0(a5)
80003178:	fd442783          	lw	a5,-44(s0)
8000317c:	ffc78793          	addi	a5,a5,-4
80003180:	fcf42a23          	sw	a5,-44(s0)
80003184:	fd442703          	lw	a4,-44(s0)
80003188:	00300793          	li	a5,3
8000318c:	fce7e6e3          	bltu	a5,a4,80003158 <memmove+0x17c>
80003190:	fe442783          	lw	a5,-28(s0)
80003194:	fef42623          	sw	a5,-20(s0)
80003198:	fe042783          	lw	a5,-32(s0)
8000319c:	fef42423          	sw	a5,-24(s0)
800031a0:	0240006f          	j	800031c4 <memmove+0x1e8>
800031a4:	fe842703          	lw	a4,-24(s0)
800031a8:	00170793          	addi	a5,a4,1
800031ac:	fef42423          	sw	a5,-24(s0)
800031b0:	fec42783          	lw	a5,-20(s0)
800031b4:	00178693          	addi	a3,a5,1
800031b8:	fed42623          	sw	a3,-20(s0)
800031bc:	00074703          	lbu	a4,0(a4)
800031c0:	00e78023          	sb	a4,0(a5)
800031c4:	fd442783          	lw	a5,-44(s0)
800031c8:	fff78713          	addi	a4,a5,-1
800031cc:	fce42a23          	sw	a4,-44(s0)
800031d0:	fc079ae3          	bnez	a5,800031a4 <memmove+0x1c8>
800031d4:	fdc42783          	lw	a5,-36(s0)
800031d8:	00078513          	mv	a0,a5
800031dc:	02c12403          	lw	s0,44(sp)
800031e0:	03010113          	addi	sp,sp,48
800031e4:	00008067          	ret

800031e8 <_realloc_r>:
800031e8:	00308013          	addi	zero,ra,3
800031ec:	fe010113          	addi	sp,sp,-32
800031f0:	00812c23          	sw	s0,24(sp)
800031f4:	00112e23          	sw	ra,28(sp)
800031f8:	00912a23          	sw	s1,20(sp)
800031fc:	01212823          	sw	s2,16(sp)
80003200:	01312623          	sw	s3,12(sp)
80003204:	00060413          	mv	s0,a2
80003208:	0a058863          	beqz	a1,800032b8 <_realloc_r+0xd0>
8000320c:	08060263          	beqz	a2,80003290 <_realloc_r+0xa8>
80003210:	00058493          	mv	s1,a1
80003214:	00050913          	mv	s2,a0
80003218:	265000ef          	jal	ra,80003c7c <_malloc_usable_size_r>
8000321c:	00048993          	mv	s3,s1
80003220:	02856263          	bltu	a0,s0,80003244 <_realloc_r+0x5c>
80003224:	01c12083          	lw	ra,28(sp)
80003228:	01812403          	lw	s0,24(sp)
8000322c:	01412483          	lw	s1,20(sp)
80003230:	01012903          	lw	s2,16(sp)
80003234:	00098513          	mv	a0,s3
80003238:	00c12983          	lw	s3,12(sp)
8000323c:	02010113          	addi	sp,sp,32
80003240:	00008067          	ret
80003244:	00040593          	mv	a1,s0
80003248:	00090513          	mv	a0,s2
8000324c:	e7dfd0ef          	jal	ra,800010c8 <_malloc_r>
80003250:	00050993          	mv	s3,a0
80003254:	04050063          	beqz	a0,80003294 <_realloc_r+0xac>
80003258:	00040613          	mv	a2,s0
8000325c:	00048593          	mv	a1,s1
80003260:	fb8fd0ef          	jal	ra,80000a18 <memcpy>
80003264:	00090513          	mv	a0,s2
80003268:	00048593          	mv	a1,s1
8000326c:	cf1fd0ef          	jal	ra,80000f5c <_free_r>
80003270:	01c12083          	lw	ra,28(sp)
80003274:	01812403          	lw	s0,24(sp)
80003278:	01412483          	lw	s1,20(sp)
8000327c:	01012903          	lw	s2,16(sp)
80003280:	00098513          	mv	a0,s3
80003284:	00c12983          	lw	s3,12(sp)
80003288:	02010113          	addi	sp,sp,32
8000328c:	00008067          	ret
80003290:	ccdfd0ef          	jal	ra,80000f5c <_free_r>
80003294:	01c12083          	lw	ra,28(sp)
80003298:	01812403          	lw	s0,24(sp)
8000329c:	00000993          	li	s3,0
800032a0:	01412483          	lw	s1,20(sp)
800032a4:	01012903          	lw	s2,16(sp)
800032a8:	00098513          	mv	a0,s3
800032ac:	00c12983          	lw	s3,12(sp)
800032b0:	02010113          	addi	sp,sp,32
800032b4:	00008067          	ret
800032b8:	01812403          	lw	s0,24(sp)
800032bc:	01c12083          	lw	ra,28(sp)
800032c0:	01412483          	lw	s1,20(sp)
800032c4:	01012903          	lw	s2,16(sp)
800032c8:	00c12983          	lw	s3,12(sp)
800032cc:	00060593          	mv	a1,a2
800032d0:	02010113          	addi	sp,sp,32
800032d4:	df5fd06f          	j	800010c8 <_malloc_r>

800032d8 <_printf_common>:
800032d8:	00308013          	addi	zero,ra,3
800032dc:	fd010113          	addi	sp,sp,-48
800032e0:	02812423          	sw	s0,40(sp)
800032e4:	00058413          	mv	s0,a1
800032e8:	01042783          	lw	a5,16(s0)
800032ec:	0085a583          	lw	a1,8(a1)
800032f0:	03212023          	sw	s2,32(sp)
800032f4:	01312e23          	sw	s3,28(sp)
800032f8:	01412c23          	sw	s4,24(sp)
800032fc:	01512a23          	sw	s5,20(sp)
80003300:	02112623          	sw	ra,44(sp)
80003304:	02912223          	sw	s1,36(sp)
80003308:	01612823          	sw	s6,16(sp)
8000330c:	01712623          	sw	s7,12(sp)
80003310:	00050913          	mv	s2,a0
80003314:	00060a93          	mv	s5,a2
80003318:	00068993          	mv	s3,a3
8000331c:	00070a13          	mv	s4,a4
80003320:	00b7d463          	bge	a5,a1,80003328 <_printf_common+0x50>
80003324:	00058793          	mv	a5,a1
80003328:	00faa023          	sw	a5,0(s5)
8000332c:	04344683          	lbu	a3,67(s0)
80003330:	00068663          	beqz	a3,8000333c <_printf_common+0x64>
80003334:	00178793          	addi	a5,a5,1
80003338:	00faa023          	sw	a5,0(s5)
8000333c:	00042783          	lw	a5,0(s0)
80003340:	0207f713          	andi	a4,a5,32
80003344:	14070063          	beqz	a4,80003484 <_printf_common+0x1ac>
80003348:	000aa703          	lw	a4,0(s5)
8000334c:	00270713          	addi	a4,a4,2
80003350:	00eaa023          	sw	a4,0(s5)
80003354:	00042783          	lw	a5,0(s0)
80003358:	0067f693          	andi	a3,a5,6
8000335c:	00078613          	mv	a2,a5
80003360:	00069e63          	bnez	a3,8000337c <_printf_common+0xa4>
80003364:	00c42683          	lw	a3,12(s0)
80003368:	01940b93          	addi	s7,s0,25
8000336c:	00000493          	li	s1,0
80003370:	fff00b13          	li	s6,-1
80003374:	00078613          	mv	a2,a5
80003378:	0ed74663          	blt	a4,a3,80003464 <_printf_common+0x18c>
8000337c:	04344683          	lbu	a3,67(s0)
80003380:	02067613          	andi	a2,a2,32
80003384:	00d036b3          	snez	a3,a3
80003388:	02060263          	beqz	a2,800033ac <_printf_common+0xd4>
8000338c:	00d407b3          	add	a5,s0,a3
80003390:	03000713          	li	a4,48
80003394:	04e781a3          	sb	a4,67(a5)
80003398:	04544703          	lbu	a4,69(s0)
8000339c:	00168793          	addi	a5,a3,1
800033a0:	00f407b3          	add	a5,s0,a5
800033a4:	00268693          	addi	a3,a3,2
800033a8:	04e781a3          	sb	a4,67(a5)
800033ac:	04340613          	addi	a2,s0,67
800033b0:	00098593          	mv	a1,s3
800033b4:	00090513          	mv	a0,s2
800033b8:	000a00e7          	jalr	s4
800033bc:	fff00793          	li	a5,-1
800033c0:	06f50263          	beq	a0,a5,80003424 <_printf_common+0x14c>
800033c4:	00042783          	lw	a5,0(s0)
800033c8:	00400593          	li	a1,4
800033cc:	00c42683          	lw	a3,12(s0)
800033d0:	0067f793          	andi	a5,a5,6
800033d4:	000aa503          	lw	a0,0(s5)
800033d8:	00842703          	lw	a4,8(s0)
800033dc:	01042603          	lw	a2,16(s0)
800033e0:	0cb78863          	beq	a5,a1,800034b0 <_printf_common+0x1d8>
800033e4:	0ee65263          	bge	a2,a4,800034c8 <_printf_common+0x1f0>
800033e8:	00000a93          	li	s5,0
800033ec:	40c70733          	sub	a4,a4,a2
800033f0:	00ea8ab3          	add	s5,s5,a4
800033f4:	01a40413          	addi	s0,s0,26
800033f8:	00000493          	li	s1,0
800033fc:	fff00b13          	li	s6,-1
80003400:	0080006f          	j	80003408 <_printf_common+0x130>
80003404:	0d54d263          	bge	s1,s5,800034c8 <_printf_common+0x1f0>
80003408:	00100693          	li	a3,1
8000340c:	00040613          	mv	a2,s0
80003410:	00098593          	mv	a1,s3
80003414:	00090513          	mv	a0,s2
80003418:	000a00e7          	jalr	s4
8000341c:	00148493          	addi	s1,s1,1
80003420:	ff6512e3          	bne	a0,s6,80003404 <_printf_common+0x12c>
80003424:	fff00513          	li	a0,-1
80003428:	02c12083          	lw	ra,44(sp)
8000342c:	02812403          	lw	s0,40(sp)
80003430:	02412483          	lw	s1,36(sp)
80003434:	02012903          	lw	s2,32(sp)
80003438:	01c12983          	lw	s3,28(sp)
8000343c:	01812a03          	lw	s4,24(sp)
80003440:	01412a83          	lw	s5,20(sp)
80003444:	01012b03          	lw	s6,16(sp)
80003448:	00c12b83          	lw	s7,12(sp)
8000344c:	03010113          	addi	sp,sp,48
80003450:	00008067          	ret
80003454:	00c42783          	lw	a5,12(s0)
80003458:	000aa703          	lw	a4,0(s5)
8000345c:	40e787b3          	sub	a5,a5,a4
80003460:	06f4d863          	bge	s1,a5,800034d0 <_printf_common+0x1f8>
80003464:	00100693          	li	a3,1
80003468:	000b8613          	mv	a2,s7
8000346c:	00098593          	mv	a1,s3
80003470:	00090513          	mv	a0,s2
80003474:	000a00e7          	jalr	s4
80003478:	00148493          	addi	s1,s1,1
8000347c:	fd651ce3          	bne	a0,s6,80003454 <_printf_common+0x17c>
80003480:	fa5ff06f          	j	80003424 <_printf_common+0x14c>
80003484:	0067f713          	andi	a4,a5,6
80003488:	00d036b3          	snez	a3,a3
8000348c:	f20710e3          	bnez	a4,800033ac <_printf_common+0xd4>
80003490:	000aa703          	lw	a4,0(s5)
80003494:	00c42683          	lw	a3,12(s0)
80003498:	01940b93          	addi	s7,s0,25
8000349c:	00000493          	li	s1,0
800034a0:	fff00b13          	li	s6,-1
800034a4:	00078613          	mv	a2,a5
800034a8:	fad74ee3          	blt	a4,a3,80003464 <_printf_common+0x18c>
800034ac:	ed1ff06f          	j	8000337c <_printf_common+0xa4>
800034b0:	40a686b3          	sub	a3,a3,a0
800034b4:	fff6ca93          	not	s5,a3
800034b8:	41fada93          	srai	s5,s5,0x1f
800034bc:	0156fab3          	and	s5,a3,s5
800034c0:	f2e646e3          	blt	a2,a4,800033ec <_printf_common+0x114>
800034c4:	f2d048e3          	bgtz	a3,800033f4 <_printf_common+0x11c>
800034c8:	00000513          	li	a0,0
800034cc:	f5dff06f          	j	80003428 <_printf_common+0x150>
800034d0:	00042603          	lw	a2,0(s0)
800034d4:	04344683          	lbu	a3,67(s0)
800034d8:	02067613          	andi	a2,a2,32
800034dc:	00d036b3          	snez	a3,a3
800034e0:	ea0616e3          	bnez	a2,8000338c <_printf_common+0xb4>
800034e4:	ec9ff06f          	j	800033ac <_printf_common+0xd4>

800034e8 <_printf_i>:
800034e8:	00308013          	addi	zero,ra,3
800034ec:	fc010113          	addi	sp,sp,-64
800034f0:	02812c23          	sw	s0,56(sp)
800034f4:	03212823          	sw	s2,48(sp)
800034f8:	03312623          	sw	s3,44(sp)
800034fc:	03412423          	sw	s4,40(sp)
80003500:	02112e23          	sw	ra,60(sp)
80003504:	02912a23          	sw	s1,52(sp)
80003508:	03512223          	sw	s5,36(sp)
8000350c:	03612023          	sw	s6,32(sp)
80003510:	01712e23          	sw	s7,28(sp)
80003514:	0185c803          	lbu	a6,24(a1)
80003518:	00058413          	mv	s0,a1
8000351c:	00050913          	mv	s2,a0
80003520:	00060993          	mv	s3,a2
80003524:	00068a13          	mv	s4,a3
80003528:	04358593          	addi	a1,a1,67
8000352c:	04080863          	beqz	a6,8000357c <_printf_i+0x94>
80003530:	fa880793          	addi	a5,a6,-88
80003534:	0ff7f793          	zext.b	a5,a5
80003538:	02000693          	li	a3,32
8000353c:	10f6e663          	bltu	a3,a5,80003648 <_printf_i+0x160>
80003540:	800086b7          	lui	a3,0x80008
80003544:	00279793          	slli	a5,a5,0x2
80003548:	1b068693          	addi	a3,a3,432 # 800081b0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800081b1>
8000354c:	00d787b3          	add	a5,a5,a3
80003550:	0007a783          	lw	a5,0(a5)
80003554:	00078067          	jr	a5
80003558:	00042783          	lw	a5,0(s0)
8000355c:	00072683          	lw	a3,0(a4)
80003560:	01442503          	lw	a0,20(s0)
80003564:	0807f613          	andi	a2,a5,128
80003568:	00468813          	addi	a6,a3,4
8000356c:	2e060a63          	beqz	a2,80003860 <_printf_i+0x378>
80003570:	01072023          	sw	a6,0(a4)
80003574:	0006a783          	lw	a5,0(a3)
80003578:	00a7a023          	sw	a0,0(a5)
8000357c:	00042823          	sw	zero,16(s0)
80003580:	00058493          	mv	s1,a1
80003584:	000a0713          	mv	a4,s4
80003588:	00098693          	mv	a3,s3
8000358c:	00c10613          	addi	a2,sp,12
80003590:	00040593          	mv	a1,s0
80003594:	00090513          	mv	a0,s2
80003598:	d41ff0ef          	jal	ra,800032d8 <_printf_common>
8000359c:	fff00a93          	li	s5,-1
800035a0:	07550663          	beq	a0,s5,8000360c <_printf_i+0x124>
800035a4:	01042683          	lw	a3,16(s0)
800035a8:	00048613          	mv	a2,s1
800035ac:	00098593          	mv	a1,s3
800035b0:	00090513          	mv	a0,s2
800035b4:	000a00e7          	jalr	s4
800035b8:	05550a63          	beq	a0,s5,8000360c <_printf_i+0x124>
800035bc:	00042783          	lw	a5,0(s0)
800035c0:	00c42503          	lw	a0,12(s0)
800035c4:	00c12a83          	lw	s5,12(sp)
800035c8:	0027f793          	andi	a5,a5,2
800035cc:	06078863          	beqz	a5,8000363c <_printf_i+0x154>
800035d0:	06aad663          	bge	s5,a0,8000363c <_printf_i+0x154>
800035d4:	01940b93          	addi	s7,s0,25
800035d8:	00000493          	li	s1,0
800035dc:	fff00b13          	li	s6,-1
800035e0:	0140006f          	j	800035f4 <_printf_i+0x10c>
800035e4:	00c42503          	lw	a0,12(s0)
800035e8:	00148493          	addi	s1,s1,1
800035ec:	415507b3          	sub	a5,a0,s5
800035f0:	04f4d663          	bge	s1,a5,8000363c <_printf_i+0x154>
800035f4:	00100693          	li	a3,1
800035f8:	000b8613          	mv	a2,s7
800035fc:	00098593          	mv	a1,s3
80003600:	00090513          	mv	a0,s2
80003604:	000a00e7          	jalr	s4
80003608:	fd651ee3          	bne	a0,s6,800035e4 <_printf_i+0xfc>
8000360c:	fff00513          	li	a0,-1
80003610:	03c12083          	lw	ra,60(sp)
80003614:	03812403          	lw	s0,56(sp)
80003618:	03412483          	lw	s1,52(sp)
8000361c:	03012903          	lw	s2,48(sp)
80003620:	02c12983          	lw	s3,44(sp)
80003624:	02812a03          	lw	s4,40(sp)
80003628:	02412a83          	lw	s5,36(sp)
8000362c:	02012b03          	lw	s6,32(sp)
80003630:	01c12b83          	lw	s7,28(sp)
80003634:	04010113          	addi	sp,sp,64
80003638:	00008067          	ret
8000363c:	fd555ae3          	bge	a0,s5,80003610 <_printf_i+0x128>
80003640:	000a8513          	mv	a0,s5
80003644:	fcdff06f          	j	80003610 <_printf_i+0x128>
80003648:	04240493          	addi	s1,s0,66
8000364c:	05040123          	sb	a6,66(s0)
80003650:	00100793          	li	a5,1
80003654:	00f42823          	sw	a5,16(s0)
80003658:	040401a3          	sb	zero,67(s0)
8000365c:	f29ff06f          	j	80003584 <_printf_i+0x9c>
80003660:	00042683          	lw	a3,0(s0)
80003664:	00072783          	lw	a5,0(a4)
80003668:	0806f613          	andi	a2,a3,128
8000366c:	00478513          	addi	a0,a5,4
80003670:	00061663          	bnez	a2,8000367c <_printf_i+0x194>
80003674:	0406f613          	andi	a2,a3,64
80003678:	20061663          	bnez	a2,80003884 <_printf_i+0x39c>
8000367c:	0007a603          	lw	a2,0(a5)
80003680:	00a72023          	sw	a0,0(a4)
80003684:	00060793          	mv	a5,a2
80003688:	00442703          	lw	a4,4(s0)
8000368c:	20064a63          	bltz	a2,800038a0 <_printf_i+0x3b8>
80003690:	80008637          	lui	a2,0x80008
80003694:	57460613          	addi	a2,a2,1396 # 80008574 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008575>
80003698:	00a00513          	li	a0,10
8000369c:	0f00006f          	j	8000378c <_printf_i+0x2a4>
800036a0:	00042783          	lw	a5,0(s0)
800036a4:	00072683          	lw	a3,0(a4)
800036a8:	0807f613          	andi	a2,a5,128
800036ac:	00468513          	addi	a0,a3,4
800036b0:	00061663          	bnez	a2,800036bc <_printf_i+0x1d4>
800036b4:	0407f793          	andi	a5,a5,64
800036b8:	1c079063          	bnez	a5,80003878 <_printf_i+0x390>
800036bc:	0006a783          	lw	a5,0(a3)
800036c0:	00a72023          	sw	a0,0(a4)
800036c4:	80008637          	lui	a2,0x80008
800036c8:	06f00713          	li	a4,111
800036cc:	57460613          	addi	a2,a2,1396 # 80008574 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008575>
800036d0:	00800513          	li	a0,8
800036d4:	0ae80863          	beq	a6,a4,80003784 <_printf_i+0x29c>
800036d8:	00a00513          	li	a0,10
800036dc:	0a80006f          	j	80003784 <_printf_i+0x29c>
800036e0:	00072683          	lw	a3,0(a4)
800036e4:	04240493          	addi	s1,s0,66
800036e8:	00100793          	li	a5,1
800036ec:	0006a603          	lw	a2,0(a3)
800036f0:	00468693          	addi	a3,a3,4
800036f4:	00d72023          	sw	a3,0(a4)
800036f8:	04c40123          	sb	a2,66(s0)
800036fc:	f59ff06f          	j	80003654 <_printf_i+0x16c>
80003700:	00072783          	lw	a5,0(a4)
80003704:	00442603          	lw	a2,4(s0)
80003708:	00000593          	li	a1,0
8000370c:	00478693          	addi	a3,a5,4
80003710:	00d72023          	sw	a3,0(a4)
80003714:	0007a483          	lw	s1,0(a5)
80003718:	00048513          	mv	a0,s1
8000371c:	ff8ff0ef          	jal	ra,80002f14 <memchr>
80003720:	1c050063          	beqz	a0,800038e0 <_printf_i+0x3f8>
80003724:	409507b3          	sub	a5,a0,s1
80003728:	00f42223          	sw	a5,4(s0)
8000372c:	f29ff06f          	j	80003654 <_printf_i+0x16c>
80003730:	00042683          	lw	a3,0(s0)
80003734:	0206e693          	ori	a3,a3,32
80003738:	00d42023          	sw	a3,0(s0)
8000373c:	07800793          	li	a5,120
80003740:	04f402a3          	sb	a5,69(s0)
80003744:	00072503          	lw	a0,0(a4)
80003748:	80008637          	lui	a2,0x80008
8000374c:	0806f793          	andi	a5,a3,128
80003750:	58860613          	addi	a2,a2,1416 # 80008588 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008589>
80003754:	00450813          	addi	a6,a0,4
80003758:	08079e63          	bnez	a5,800037f4 <_printf_i+0x30c>
8000375c:	0406f793          	andi	a5,a3,64
80003760:	08078a63          	beqz	a5,800037f4 <_printf_i+0x30c>
80003764:	00055783          	lhu	a5,0(a0)
80003768:	01072023          	sw	a6,0(a4)
8000376c:	0016f713          	andi	a4,a3,1
80003770:	00070663          	beqz	a4,8000377c <_printf_i+0x294>
80003774:	0206e693          	ori	a3,a3,32
80003778:	00d42023          	sw	a3,0(s0)
8000377c:	04078263          	beqz	a5,800037c0 <_printf_i+0x2d8>
80003780:	01000513          	li	a0,16
80003784:	00442703          	lw	a4,4(s0)
80003788:	040401a3          	sb	zero,67(s0)
8000378c:	00e42423          	sw	a4,8(s0)
80003790:	06074c63          	bltz	a4,80003808 <_printf_i+0x320>
80003794:	00042683          	lw	a3,0(s0)
80003798:	ffb6f693          	andi	a3,a3,-5
8000379c:	00d42023          	sw	a3,0(s0)
800037a0:	06079463          	bnez	a5,80003808 <_printf_i+0x320>
800037a4:	00058493          	mv	s1,a1
800037a8:	12071463          	bnez	a4,800038d0 <_printf_i+0x3e8>
800037ac:	00800793          	li	a5,8
800037b0:	08f50463          	beq	a0,a5,80003838 <_printf_i+0x350>
800037b4:	409585b3          	sub	a1,a1,s1
800037b8:	00b42823          	sw	a1,16(s0)
800037bc:	dc9ff06f          	j	80003584 <_printf_i+0x9c>
800037c0:	00042703          	lw	a4,0(s0)
800037c4:	fdf77713          	andi	a4,a4,-33
800037c8:	00e42023          	sw	a4,0(s0)
800037cc:	fb5ff06f          	j	80003780 <_printf_i+0x298>
800037d0:	05800793          	li	a5,88
800037d4:	04f402a3          	sb	a5,69(s0)
800037d8:	00042683          	lw	a3,0(s0)
800037dc:	00072503          	lw	a0,0(a4)
800037e0:	80008637          	lui	a2,0x80008
800037e4:	0806f793          	andi	a5,a3,128
800037e8:	57460613          	addi	a2,a2,1396 # 80008574 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008575>
800037ec:	00450813          	addi	a6,a0,4
800037f0:	f60786e3          	beqz	a5,8000375c <_printf_i+0x274>
800037f4:	00052783          	lw	a5,0(a0)
800037f8:	01072023          	sw	a6,0(a4)
800037fc:	f71ff06f          	j	8000376c <_printf_i+0x284>
80003800:	00042683          	lw	a3,0(s0)
80003804:	f39ff06f          	j	8000373c <_printf_i+0x254>
80003808:	00050893          	mv	a7,a0
8000380c:	00058493          	mv	s1,a1
80003810:	0317f833          	remu	a6,a5,a7
80003814:	fff48493          	addi	s1,s1,-1
80003818:	00078713          	mv	a4,a5
8000381c:	01060833          	add	a6,a2,a6
80003820:	00084683          	lbu	a3,0(a6)
80003824:	0317d7b3          	divu	a5,a5,a7
80003828:	00d48023          	sb	a3,0(s1)
8000382c:	ff1772e3          	bgeu	a4,a7,80003810 <_printf_i+0x328>
80003830:	00800793          	li	a5,8
80003834:	f8f510e3          	bne	a0,a5,800037b4 <_printf_i+0x2cc>
80003838:	00042783          	lw	a5,0(s0)
8000383c:	0017f793          	andi	a5,a5,1
80003840:	f6078ae3          	beqz	a5,800037b4 <_printf_i+0x2cc>
80003844:	00442703          	lw	a4,4(s0)
80003848:	01042783          	lw	a5,16(s0)
8000384c:	f6e7c4e3          	blt	a5,a4,800037b4 <_printf_i+0x2cc>
80003850:	03000793          	li	a5,48
80003854:	fef48fa3          	sb	a5,-1(s1)
80003858:	fff48493          	addi	s1,s1,-1
8000385c:	f59ff06f          	j	800037b4 <_printf_i+0x2cc>
80003860:	0407f793          	andi	a5,a5,64
80003864:	01072023          	sw	a6,0(a4)
80003868:	02078663          	beqz	a5,80003894 <_printf_i+0x3ac>
8000386c:	0006a783          	lw	a5,0(a3)
80003870:	00a79023          	sh	a0,0(a5)
80003874:	d09ff06f          	j	8000357c <_printf_i+0x94>
80003878:	0006d783          	lhu	a5,0(a3)
8000387c:	00a72023          	sw	a0,0(a4)
80003880:	e45ff06f          	j	800036c4 <_printf_i+0x1dc>
80003884:	00079783          	lh	a5,0(a5)
80003888:	00a72023          	sw	a0,0(a4)
8000388c:	00078613          	mv	a2,a5
80003890:	df9ff06f          	j	80003688 <_printf_i+0x1a0>
80003894:	0006a783          	lw	a5,0(a3)
80003898:	00a7a023          	sw	a0,0(a5)
8000389c:	ce1ff06f          	j	8000357c <_printf_i+0x94>
800038a0:	02d00613          	li	a2,45
800038a4:	04c401a3          	sb	a2,67(s0)
800038a8:	00e42423          	sw	a4,8(s0)
800038ac:	00074663          	bltz	a4,800038b8 <_printf_i+0x3d0>
800038b0:	ffb6f693          	andi	a3,a3,-5
800038b4:	00d42023          	sw	a3,0(s0)
800038b8:	80008637          	lui	a2,0x80008
800038bc:	40f007b3          	neg	a5,a5
800038c0:	00a00893          	li	a7,10
800038c4:	57460613          	addi	a2,a2,1396 # 80008574 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008575>
800038c8:	00a00513          	li	a0,10
800038cc:	f41ff06f          	j	8000380c <_printf_i+0x324>
800038d0:	00064783          	lbu	a5,0(a2)
800038d4:	04240493          	addi	s1,s0,66
800038d8:	04f40123          	sb	a5,66(s0)
800038dc:	ed1ff06f          	j	800037ac <_printf_i+0x2c4>
800038e0:	00442783          	lw	a5,4(s0)
800038e4:	d71ff06f          	j	80003654 <_printf_i+0x16c>

800038e8 <__sread>:
800038e8:	00308013          	addi	zero,ra,3
800038ec:	ff010113          	addi	sp,sp,-16
800038f0:	00812423          	sw	s0,8(sp)
800038f4:	00058413          	mv	s0,a1
800038f8:	00e59583          	lh	a1,14(a1)
800038fc:	00112623          	sw	ra,12(sp)
80003900:	3a0000ef          	jal	ra,80003ca0 <_read_r>
80003904:	02054063          	bltz	a0,80003924 <__sread+0x3c>
80003908:	05042783          	lw	a5,80(s0)
8000390c:	00c12083          	lw	ra,12(sp)
80003910:	00a787b3          	add	a5,a5,a0
80003914:	04f42823          	sw	a5,80(s0)
80003918:	00812403          	lw	s0,8(sp)
8000391c:	01010113          	addi	sp,sp,16
80003920:	00008067          	ret
80003924:	00c45783          	lhu	a5,12(s0)
80003928:	fffff737          	lui	a4,0xfffff
8000392c:	fff70713          	addi	a4,a4,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
80003930:	00e7f7b3          	and	a5,a5,a4
80003934:	00c12083          	lw	ra,12(sp)
80003938:	00f41623          	sh	a5,12(s0)
8000393c:	00812403          	lw	s0,8(sp)
80003940:	01010113          	addi	sp,sp,16
80003944:	00008067          	ret

80003948 <__seofread>:
80003948:	00308013          	addi	zero,ra,3
8000394c:	00000513          	li	a0,0
80003950:	00008067          	ret

80003954 <__swrite>:
80003954:	00308013          	addi	zero,ra,3
80003958:	00c59783          	lh	a5,12(a1)
8000395c:	fe010113          	addi	sp,sp,-32
80003960:	00812c23          	sw	s0,24(sp)
80003964:	00912a23          	sw	s1,20(sp)
80003968:	01212823          	sw	s2,16(sp)
8000396c:	01312623          	sw	s3,12(sp)
80003970:	00112e23          	sw	ra,28(sp)
80003974:	1007f713          	andi	a4,a5,256
80003978:	00058413          	mv	s0,a1
8000397c:	00050493          	mv	s1,a0
80003980:	00060913          	mv	s2,a2
80003984:	00068993          	mv	s3,a3
80003988:	04071063          	bnez	a4,800039c8 <__swrite+0x74>
8000398c:	fffff737          	lui	a4,0xfffff
80003990:	fff70713          	addi	a4,a4,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
80003994:	00e7f7b3          	and	a5,a5,a4
80003998:	00e41583          	lh	a1,14(s0)
8000399c:	00f41623          	sh	a5,12(s0)
800039a0:	01812403          	lw	s0,24(sp)
800039a4:	01c12083          	lw	ra,28(sp)
800039a8:	00098693          	mv	a3,s3
800039ac:	00090613          	mv	a2,s2
800039b0:	00c12983          	lw	s3,12(sp)
800039b4:	01012903          	lw	s2,16(sp)
800039b8:	00048513          	mv	a0,s1
800039bc:	01412483          	lw	s1,20(sp)
800039c0:	02010113          	addi	sp,sp,32
800039c4:	0a40006f          	j	80003a68 <_write_r>
800039c8:	00e59583          	lh	a1,14(a1)
800039cc:	00200693          	li	a3,2
800039d0:	00000613          	li	a2,0
800039d4:	238000ef          	jal	ra,80003c0c <_lseek_r>
800039d8:	00c41783          	lh	a5,12(s0)
800039dc:	fb1ff06f          	j	8000398c <__swrite+0x38>

800039e0 <__sseek>:
800039e0:	00308013          	addi	zero,ra,3
800039e4:	ff010113          	addi	sp,sp,-16
800039e8:	00812423          	sw	s0,8(sp)
800039ec:	00058413          	mv	s0,a1
800039f0:	00e59583          	lh	a1,14(a1)
800039f4:	00112623          	sw	ra,12(sp)
800039f8:	214000ef          	jal	ra,80003c0c <_lseek_r>
800039fc:	fff00793          	li	a5,-1
80003a00:	02f50863          	beq	a0,a5,80003a30 <__sseek+0x50>
80003a04:	00c45783          	lhu	a5,12(s0)
80003a08:	00001737          	lui	a4,0x1
80003a0c:	00c12083          	lw	ra,12(sp)
80003a10:	00e7e7b3          	or	a5,a5,a4
80003a14:	01079793          	slli	a5,a5,0x10
80003a18:	4107d793          	srai	a5,a5,0x10
80003a1c:	04a42823          	sw	a0,80(s0)
80003a20:	00f41623          	sh	a5,12(s0)
80003a24:	00812403          	lw	s0,8(sp)
80003a28:	01010113          	addi	sp,sp,16
80003a2c:	00008067          	ret
80003a30:	00c45783          	lhu	a5,12(s0)
80003a34:	fffff737          	lui	a4,0xfffff
80003a38:	fff70713          	addi	a4,a4,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
80003a3c:	00e7f7b3          	and	a5,a5,a4
80003a40:	01079793          	slli	a5,a5,0x10
80003a44:	4107d793          	srai	a5,a5,0x10
80003a48:	00c12083          	lw	ra,12(sp)
80003a4c:	00f41623          	sh	a5,12(s0)
80003a50:	00812403          	lw	s0,8(sp)
80003a54:	01010113          	addi	sp,sp,16
80003a58:	00008067          	ret

80003a5c <__sclose>:
80003a5c:	00308013          	addi	zero,ra,3
80003a60:	00e59583          	lh	a1,14(a1)
80003a64:	0740006f          	j	80003ad8 <_close_r>

80003a68 <_write_r>:
80003a68:	00308013          	addi	zero,ra,3
80003a6c:	ff010113          	addi	sp,sp,-16
80003a70:	00058713          	mv	a4,a1
80003a74:	00812423          	sw	s0,8(sp)
80003a78:	00912223          	sw	s1,4(sp)
80003a7c:	00060593          	mv	a1,a2
80003a80:	00050413          	mv	s0,a0
80003a84:	800084b7          	lui	s1,0x80008
80003a88:	00068613          	mv	a2,a3
80003a8c:	00070513          	mv	a0,a4
80003a90:	00112623          	sw	ra,12(sp)
80003a94:	5a04a423          	sw	zero,1448(s1) # 800085a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085a9>
80003a98:	159010ef          	jal	ra,800053f0 <_write>
80003a9c:	fff00793          	li	a5,-1
80003aa0:	00f50c63          	beq	a0,a5,80003ab8 <_write_r+0x50>
80003aa4:	00c12083          	lw	ra,12(sp)
80003aa8:	00812403          	lw	s0,8(sp)
80003aac:	00412483          	lw	s1,4(sp)
80003ab0:	01010113          	addi	sp,sp,16
80003ab4:	00008067          	ret
80003ab8:	5a84a783          	lw	a5,1448(s1)
80003abc:	fe0784e3          	beqz	a5,80003aa4 <_write_r+0x3c>
80003ac0:	00c12083          	lw	ra,12(sp)
80003ac4:	00f42023          	sw	a5,0(s0)
80003ac8:	00812403          	lw	s0,8(sp)
80003acc:	00412483          	lw	s1,4(sp)
80003ad0:	01010113          	addi	sp,sp,16
80003ad4:	00008067          	ret

80003ad8 <_close_r>:
80003ad8:	00308013          	addi	zero,ra,3
80003adc:	ff010113          	addi	sp,sp,-16
80003ae0:	00812423          	sw	s0,8(sp)
80003ae4:	00912223          	sw	s1,4(sp)
80003ae8:	00050413          	mv	s0,a0
80003aec:	800084b7          	lui	s1,0x80008
80003af0:	00058513          	mv	a0,a1
80003af4:	00112623          	sw	ra,12(sp)
80003af8:	5a04a423          	sw	zero,1448(s1) # 800085a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085a9>
80003afc:	119010ef          	jal	ra,80005414 <_close>
80003b00:	fff00793          	li	a5,-1
80003b04:	00f50c63          	beq	a0,a5,80003b1c <_close_r+0x44>
80003b08:	00c12083          	lw	ra,12(sp)
80003b0c:	00812403          	lw	s0,8(sp)
80003b10:	00412483          	lw	s1,4(sp)
80003b14:	01010113          	addi	sp,sp,16
80003b18:	00008067          	ret
80003b1c:	5a84a783          	lw	a5,1448(s1)
80003b20:	fe0784e3          	beqz	a5,80003b08 <_close_r+0x30>
80003b24:	00c12083          	lw	ra,12(sp)
80003b28:	00f42023          	sw	a5,0(s0)
80003b2c:	00812403          	lw	s0,8(sp)
80003b30:	00412483          	lw	s1,4(sp)
80003b34:	01010113          	addi	sp,sp,16
80003b38:	00008067          	ret

80003b3c <_fstat_r>:
80003b3c:	00308013          	addi	zero,ra,3
80003b40:	ff010113          	addi	sp,sp,-16
80003b44:	00058713          	mv	a4,a1
80003b48:	00812423          	sw	s0,8(sp)
80003b4c:	00912223          	sw	s1,4(sp)
80003b50:	00050413          	mv	s0,a0
80003b54:	800084b7          	lui	s1,0x80008
80003b58:	00060593          	mv	a1,a2
80003b5c:	00070513          	mv	a0,a4
80003b60:	00112623          	sw	ra,12(sp)
80003b64:	5a04a423          	sw	zero,1448(s1) # 800085a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085a9>
80003b68:	0d1010ef          	jal	ra,80005438 <_fstat>
80003b6c:	fff00793          	li	a5,-1
80003b70:	00f50c63          	beq	a0,a5,80003b88 <_fstat_r+0x4c>
80003b74:	00c12083          	lw	ra,12(sp)
80003b78:	00812403          	lw	s0,8(sp)
80003b7c:	00412483          	lw	s1,4(sp)
80003b80:	01010113          	addi	sp,sp,16
80003b84:	00008067          	ret
80003b88:	5a84a783          	lw	a5,1448(s1)
80003b8c:	fe0784e3          	beqz	a5,80003b74 <_fstat_r+0x38>
80003b90:	00c12083          	lw	ra,12(sp)
80003b94:	00f42023          	sw	a5,0(s0)
80003b98:	00812403          	lw	s0,8(sp)
80003b9c:	00412483          	lw	s1,4(sp)
80003ba0:	01010113          	addi	sp,sp,16
80003ba4:	00008067          	ret

80003ba8 <_isatty_r>:
80003ba8:	00308013          	addi	zero,ra,3
80003bac:	ff010113          	addi	sp,sp,-16
80003bb0:	00812423          	sw	s0,8(sp)
80003bb4:	00912223          	sw	s1,4(sp)
80003bb8:	00050413          	mv	s0,a0
80003bbc:	800084b7          	lui	s1,0x80008
80003bc0:	00058513          	mv	a0,a1
80003bc4:	00112623          	sw	ra,12(sp)
80003bc8:	5a04a423          	sw	zero,1448(s1) # 800085a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085a9>
80003bcc:	061010ef          	jal	ra,8000542c <_isatty>
80003bd0:	fff00793          	li	a5,-1
80003bd4:	00f50c63          	beq	a0,a5,80003bec <_isatty_r+0x44>
80003bd8:	00c12083          	lw	ra,12(sp)
80003bdc:	00812403          	lw	s0,8(sp)
80003be0:	00412483          	lw	s1,4(sp)
80003be4:	01010113          	addi	sp,sp,16
80003be8:	00008067          	ret
80003bec:	5a84a783          	lw	a5,1448(s1)
80003bf0:	fe0784e3          	beqz	a5,80003bd8 <_isatty_r+0x30>
80003bf4:	00c12083          	lw	ra,12(sp)
80003bf8:	00f42023          	sw	a5,0(s0)
80003bfc:	00812403          	lw	s0,8(sp)
80003c00:	00412483          	lw	s1,4(sp)
80003c04:	01010113          	addi	sp,sp,16
80003c08:	00008067          	ret

80003c0c <_lseek_r>:
80003c0c:	00308013          	addi	zero,ra,3
80003c10:	ff010113          	addi	sp,sp,-16
80003c14:	00058713          	mv	a4,a1
80003c18:	00812423          	sw	s0,8(sp)
80003c1c:	00912223          	sw	s1,4(sp)
80003c20:	00060593          	mv	a1,a2
80003c24:	00050413          	mv	s0,a0
80003c28:	800084b7          	lui	s1,0x80008
80003c2c:	00068613          	mv	a2,a3
80003c30:	00070513          	mv	a0,a4
80003c34:	00112623          	sw	ra,12(sp)
80003c38:	5a04a423          	sw	zero,1448(s1) # 800085a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085a9>
80003c3c:	7e4010ef          	jal	ra,80005420 <_lseek>
80003c40:	fff00793          	li	a5,-1
80003c44:	00f50c63          	beq	a0,a5,80003c5c <_lseek_r+0x50>
80003c48:	00c12083          	lw	ra,12(sp)
80003c4c:	00812403          	lw	s0,8(sp)
80003c50:	00412483          	lw	s1,4(sp)
80003c54:	01010113          	addi	sp,sp,16
80003c58:	00008067          	ret
80003c5c:	5a84a783          	lw	a5,1448(s1)
80003c60:	fe0784e3          	beqz	a5,80003c48 <_lseek_r+0x3c>
80003c64:	00c12083          	lw	ra,12(sp)
80003c68:	00f42023          	sw	a5,0(s0)
80003c6c:	00812403          	lw	s0,8(sp)
80003c70:	00412483          	lw	s1,4(sp)
80003c74:	01010113          	addi	sp,sp,16
80003c78:	00008067          	ret

80003c7c <_malloc_usable_size_r>:
80003c7c:	00308013          	addi	zero,ra,3
80003c80:	ffc5a783          	lw	a5,-4(a1)
80003c84:	ffc78513          	addi	a0,a5,-4
80003c88:	0007c463          	bltz	a5,80003c90 <_malloc_usable_size_r+0x14>
80003c8c:	00008067          	ret
80003c90:	00a585b3          	add	a1,a1,a0
80003c94:	0005a783          	lw	a5,0(a1)
80003c98:	00f50533          	add	a0,a0,a5
80003c9c:	00008067          	ret

80003ca0 <_read_r>:
80003ca0:	00308013          	addi	zero,ra,3
80003ca4:	ff010113          	addi	sp,sp,-16
80003ca8:	00058713          	mv	a4,a1
80003cac:	00812423          	sw	s0,8(sp)
80003cb0:	00912223          	sw	s1,4(sp)
80003cb4:	00060593          	mv	a1,a2
80003cb8:	00050413          	mv	s0,a0
80003cbc:	800084b7          	lui	s1,0x80008
80003cc0:	00068613          	mv	a2,a3
80003cc4:	00070513          	mv	a0,a4
80003cc8:	00112623          	sw	ra,12(sp)
80003ccc:	5a04a423          	sw	zero,1448(s1) # 800085a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085a9>
80003cd0:	6fc010ef          	jal	ra,800053cc <_read>
80003cd4:	fff00793          	li	a5,-1
80003cd8:	00f50c63          	beq	a0,a5,80003cf0 <_read_r+0x50>
80003cdc:	00c12083          	lw	ra,12(sp)
80003ce0:	00812403          	lw	s0,8(sp)
80003ce4:	00412483          	lw	s1,4(sp)
80003ce8:	01010113          	addi	sp,sp,16
80003cec:	00008067          	ret
80003cf0:	5a84a783          	lw	a5,1448(s1)
80003cf4:	fe0784e3          	beqz	a5,80003cdc <_read_r+0x3c>
80003cf8:	00c12083          	lw	ra,12(sp)
80003cfc:	00f42023          	sw	a5,0(s0)
80003d00:	00812403          	lw	s0,8(sp)
80003d04:	00412483          	lw	s1,4(sp)
80003d08:	01010113          	addi	sp,sp,16
80003d0c:	00008067          	ret

80003d10 <function>:
80003d10:	00308013          	addi	zero,ra,3
{
80003d14:	fe010113          	addi	sp,sp,-32
        memset(str,'a',sizeof(str));
80003d18:	616167b7          	lui	a5,0x61616
80003d1c:	16178793          	addi	a5,a5,353 # 61616161 <CONFIG_SRAM_SIZE+0x61516161>
80003d20:	00f12623          	sw	a5,12(sp)
80003d24:	00f12823          	sw	a5,16(sp)
80003d28:	00f12a23          	sw	a5,20(sp)
80003d2c:	00f12c23          	sw	a5,24(sp)
80003d30:	00f12e23          	sw	a5,28(sp)
}
80003d34:	02010113          	addi	sp,sp,32
80003d38:	00008067          	ret

80003d3c <main>:
80003d3c:	00308013          	addi	zero,ra,3
80003d40:	00208013          	addi	zero,ra,2
{
80003d44:	fd010113          	addi	sp,sp,-48
80003d48:	02112623          	sw	ra,44(sp)
	__asm__("ADDI x0, x0, 0");
80003d4c:	00000013          	nop
	__asm__("ADDI x0, x1, 1");
80003d50:	00108013          	addi	zero,ra,1
	 __asm__("ADDI x0, x1, 2");
80003d54:	00208013          	addi	zero,ra,2
	 __asm__("ADDI x0, x1, 7");
80003d58:	00708013          	addi	zero,ra,7
	 function();
80003d5c:	fb5ff0ef          	jal	ra,80003d10 <function>
	printf("Vos darrons");
80003d60:	80008537          	lui	a0,0x80008
80003d64:	23450513          	addi	a0,a0,564 # 80008234 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008235>
80003d68:	d0cfd0ef          	jal	ra,80001274 <printf>
	__asm__("ADDI x0, x1, 7");
80003d6c:	00708013          	addi	zero,ra,7
	memset(str,'a',sizeof(str));
80003d70:	616167b7          	lui	a5,0x61616
80003d74:	16178793          	addi	a5,a5,353 # 61616161 <CONFIG_SRAM_SIZE+0x61516161>
80003d78:	00f12623          	sw	a5,12(sp)
80003d7c:	00f12823          	sw	a5,16(sp)
80003d80:	00f12a23          	sw	a5,20(sp)
80003d84:	00f12c23          	sw	a5,24(sp)
80003d88:	00f12e23          	sw	a5,28(sp)
	printk("WAOAOAO");
80003d8c:	80008537          	lui	a0,0x80008
80003d90:	24050513          	addi	a0,a0,576 # 80008240 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008241>
80003d94:	094000ef          	jal	ra,80003e28 <printk>
	printf("OK");
80003d98:	80008537          	lui	a0,0x80008
80003d9c:	24850513          	addi	a0,a0,584 # 80008248 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008249>
80003da0:	cd4fd0ef          	jal	ra,80001274 <printf>
	function();
80003da4:	f6dff0ef          	jal	ra,80003d10 <function>
}
80003da8:	02c12083          	lw	ra,44(sp)
80003dac:	03010113          	addi	sp,sp,48
80003db0:	00008067          	ret

80003db4 <arch_printk_char_out>:
80003db4:	00308013          	addi	zero,ra,3
}
80003db8:	00000513          	li	a0,0
80003dbc:	00008067          	ret

80003dc0 <char_out>:
80003dc0:	00308013          	addi	zero,ra,3
{
80003dc4:	ff010113          	addi	sp,sp,-16
80003dc8:	00112623          	sw	ra,12(sp)
	return _char_out(c);
80003dcc:	8000b7b7          	lui	a5,0x8000b
80003dd0:	dc07a783          	lw	a5,-576(a5) # 8000adc0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000adc1>
80003dd4:	000780e7          	jalr	a5
}
80003dd8:	00c12083          	lw	ra,12(sp)
80003ddc:	01010113          	addi	sp,sp,16
80003de0:	00008067          	ret

80003de4 <__printk_hook_install>:
80003de4:	00308013          	addi	zero,ra,3
	_char_out = fn;
80003de8:	8000b7b7          	lui	a5,0x8000b
80003dec:	dca7a023          	sw	a0,-576(a5) # 8000adc0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000adc1>
}
80003df0:	00008067          	ret

80003df4 <vprintk>:
80003df4:	00308013          	addi	zero,ra,3
{
80003df8:	ff010113          	addi	sp,sp,-16
80003dfc:	00112623          	sw	ra,12(sp)
80003e00:	00050613          	mv	a2,a0
80003e04:	00058693          	mv	a3,a1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
80003e08:	00000713          	li	a4,0
80003e0c:	00000593          	li	a1,0
80003e10:	80004537          	lui	a0,0x80004
80003e14:	dc050513          	addi	a0,a0,-576 # 80003dc0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003dc1>
80003e18:	1d5000ef          	jal	ra,800047ec <z_cbvprintf_impl>
}
80003e1c:	00c12083          	lw	ra,12(sp)
80003e20:	01010113          	addi	sp,sp,16
80003e24:	00008067          	ret

80003e28 <printk>:
80003e28:	00308013          	addi	zero,ra,3
{
80003e2c:	fc010113          	addi	sp,sp,-64
80003e30:	00112e23          	sw	ra,28(sp)
80003e34:	02b12223          	sw	a1,36(sp)
80003e38:	02c12423          	sw	a2,40(sp)
80003e3c:	02d12623          	sw	a3,44(sp)
80003e40:	02e12823          	sw	a4,48(sp)
80003e44:	02f12a23          	sw	a5,52(sp)
80003e48:	03012c23          	sw	a6,56(sp)
80003e4c:	03112e23          	sw	a7,60(sp)
	va_start(ap, fmt);
80003e50:	02410593          	addi	a1,sp,36
80003e54:	00b12623          	sw	a1,12(sp)
	vprintk(fmt, ap);
80003e58:	f9dff0ef          	jal	ra,80003df4 <vprintk>
}
80003e5c:	01c12083          	lw	ra,28(sp)
80003e60:	04010113          	addi	sp,sp,64
80003e64:	00008067          	ret

80003e68 <z_thread_entry>:
80003e68:	00308013          	addi	zero,ra,3
{
80003e6c:	ff010113          	addi	sp,sp,-16
80003e70:	00112623          	sw	ra,12(sp)
80003e74:	00050793          	mv	a5,a0
80003e78:	00058513          	mv	a0,a1
80003e7c:	00060593          	mv	a1,a2
	entry(p1, p2, p3);
80003e80:	00068613          	mv	a2,a3
80003e84:	000780e7          	jalr	a5
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
80003e88:	021030ef          	jal	ra,800076a8 <z_impl_z_current_get>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
80003e8c:	0d9030ef          	jal	ra,80007764 <z_impl_k_thread_abort>

80003e90 <extract_decimal>:
80003e90:	00308013          	addi	zero,ra,3
{
80003e94:	00050613          	mv	a2,a0
	const char *sp = *str;
80003e98:	00052703          	lw	a4,0(a0)
	size_t val = 0;
80003e9c:	00000513          	li	a0,0
	while (isdigit((int)(unsigned char)*sp)) {
80003ea0:	01c0006f          	j	80003ebc <extract_decimal+0x2c>
		val = 10U * val + *sp++ - '0';
80003ea4:	00251793          	slli	a5,a0,0x2
80003ea8:	00a787b3          	add	a5,a5,a0
80003eac:	00179793          	slli	a5,a5,0x1
80003eb0:	00170713          	addi	a4,a4,1
80003eb4:	00d787b3          	add	a5,a5,a3
80003eb8:	fd078513          	addi	a0,a5,-48
	while (isdigit((int)(unsigned char)*sp)) {
80003ebc:	00074683          	lbu	a3,0(a4)
80003ec0:	800087b7          	lui	a5,0x80008
80003ec4:	0ad78793          	addi	a5,a5,173 # 800080ad <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800080ae>
80003ec8:	00f687b3          	add	a5,a3,a5
80003ecc:	0007c783          	lbu	a5,0(a5)
80003ed0:	0047f793          	andi	a5,a5,4
80003ed4:	fc0798e3          	bnez	a5,80003ea4 <extract_decimal+0x14>
	*str = sp;
80003ed8:	00e62023          	sw	a4,0(a2)
}
80003edc:	00008067          	ret

80003ee0 <extract_flags>:
80003ee0:	00308013          	addi	zero,ra,3
{
80003ee4:	00050613          	mv	a2,a0
80003ee8:	00058513          	mv	a0,a1
	bool loop = true;
80003eec:	00100693          	li	a3,1
80003ef0:	0640006f          	j	80003f54 <extract_flags+0x74>
			conv->flag_dash = true;
80003ef4:	00065783          	lhu	a5,0(a2)
80003ef8:	0047e793          	ori	a5,a5,4
80003efc:	00f61023          	sh	a5,0(a2)
		if (loop) {
80003f00:	04068863          	beqz	a3,80003f50 <extract_flags+0x70>
			++sp;
80003f04:	00150513          	addi	a0,a0,1
80003f08:	0480006f          	j	80003f50 <extract_flags+0x70>
			conv->flag_plus = true;
80003f0c:	00065783          	lhu	a5,0(a2)
80003f10:	0087e793          	ori	a5,a5,8
80003f14:	00f61023          	sh	a5,0(a2)
			break;
80003f18:	fe9ff06f          	j	80003f00 <extract_flags+0x20>
			conv->flag_space = true;
80003f1c:	00065783          	lhu	a5,0(a2)
80003f20:	0107e793          	ori	a5,a5,16
80003f24:	00f61023          	sh	a5,0(a2)
			break;
80003f28:	fd9ff06f          	j	80003f00 <extract_flags+0x20>
			conv->flag_hash = true;
80003f2c:	00065783          	lhu	a5,0(a2)
80003f30:	0207e793          	ori	a5,a5,32
80003f34:	00f61023          	sh	a5,0(a2)
			break;
80003f38:	fc9ff06f          	j	80003f00 <extract_flags+0x20>
			conv->flag_zero = true;
80003f3c:	00065783          	lhu	a5,0(a2)
80003f40:	0407e793          	ori	a5,a5,64
80003f44:	00f61023          	sh	a5,0(a2)
			break;
80003f48:	fb9ff06f          	j	80003f00 <extract_flags+0x20>
		switch (*sp) {
80003f4c:	00000693          	li	a3,0
	} while (loop);
80003f50:	02068863          	beqz	a3,80003f80 <extract_flags+0xa0>
		switch (*sp) {
80003f54:	00054783          	lbu	a5,0(a0)
80003f58:	fe078793          	addi	a5,a5,-32
80003f5c:	0ff7f593          	zext.b	a1,a5
80003f60:	01000713          	li	a4,16
80003f64:	feb764e3          	bltu	a4,a1,80003f4c <extract_flags+0x6c>
80003f68:	00259793          	slli	a5,a1,0x2
80003f6c:	80008737          	lui	a4,0x80008
80003f70:	24c70713          	addi	a4,a4,588 # 8000824c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000824d>
80003f74:	00e787b3          	add	a5,a5,a4
80003f78:	0007a783          	lw	a5,0(a5)
80003f7c:	00078067          	jr	a5
	if (conv->flag_zero && conv->flag_dash) {
80003f80:	00062783          	lw	a5,0(a2)
80003f84:	0447f793          	andi	a5,a5,68
80003f88:	04400713          	li	a4,68
80003f8c:	00e78463          	beq	a5,a4,80003f94 <extract_flags+0xb4>
}
80003f90:	00008067          	ret
		conv->flag_zero = false;
80003f94:	00065783          	lhu	a5,0(a2)
80003f98:	fbf7f793          	andi	a5,a5,-65
80003f9c:	00f61023          	sh	a5,0(a2)
80003fa0:	ff1ff06f          	j	80003f90 <extract_flags+0xb0>

80003fa4 <extract_width>:
80003fa4:	00308013          	addi	zero,ra,3
{
80003fa8:	fe010113          	addi	sp,sp,-32
80003fac:	00112e23          	sw	ra,28(sp)
80003fb0:	00812c23          	sw	s0,24(sp)
80003fb4:	00912a23          	sw	s1,20(sp)
80003fb8:	00050413          	mv	s0,a0
80003fbc:	00b12623          	sw	a1,12(sp)
	conv->width_present = true;
80003fc0:	00055783          	lhu	a5,0(a0)
80003fc4:	0807e793          	ori	a5,a5,128
80003fc8:	00f51023          	sh	a5,0(a0)
	if (*sp == '*') {
80003fcc:	00058493          	mv	s1,a1
80003fd0:	0005c703          	lbu	a4,0(a1)
80003fd4:	02a00793          	li	a5,42
80003fd8:	06f70463          	beq	a4,a5,80004040 <extract_width+0x9c>
	size_t width = extract_decimal(&sp);
80003fdc:	00c10513          	addi	a0,sp,12
80003fe0:	eb1ff0ef          	jal	ra,80003e90 <extract_decimal>
	if (sp != wp) {
80003fe4:	00c12783          	lw	a5,12(sp)
80003fe8:	04f48063          	beq	s1,a5,80004028 <extract_width+0x84>
		conv->width_present = true;
80003fec:	00045783          	lhu	a5,0(s0)
80003ff0:	0807e793          	ori	a5,a5,128
80003ff4:	00f41023          	sh	a5,0(s0)
		conv->width_value = width;
80003ff8:	00a42223          	sw	a0,4(s0)
		conv->unsupported |= ((conv->width_value < 0)
80003ffc:	00042783          	lw	a5,0(s0)
80004000:	0017d793          	srli	a5,a5,0x1
80004004:	0017f793          	andi	a5,a5,1
				      || (width != (size_t)conv->width_value));
80004008:	04054863          	bltz	a0,80004058 <extract_width+0xb4>
8000400c:	00000713          	li	a4,0
		conv->unsupported |= ((conv->width_value < 0)
80004010:	00e7e7b3          	or	a5,a5,a4
80004014:	00179793          	slli	a5,a5,0x1
80004018:	00045703          	lhu	a4,0(s0)
8000401c:	ffd77713          	andi	a4,a4,-3
80004020:	00f767b3          	or	a5,a4,a5
80004024:	00f41023          	sh	a5,0(s0)
	return sp;
80004028:	00c12503          	lw	a0,12(sp)
}
8000402c:	01c12083          	lw	ra,28(sp)
80004030:	01812403          	lw	s0,24(sp)
80004034:	01412483          	lw	s1,20(sp)
80004038:	02010113          	addi	sp,sp,32
8000403c:	00008067          	ret
		conv->width_star = true;
80004040:	00055783          	lhu	a5,0(a0)
80004044:	1007e793          	ori	a5,a5,256
80004048:	00f51023          	sh	a5,0(a0)
		return ++sp;
8000404c:	00158513          	addi	a0,a1,1
80004050:	00a12623          	sw	a0,12(sp)
80004054:	fd9ff06f          	j	8000402c <extract_width+0x88>
				      || (width != (size_t)conv->width_value));
80004058:	00100713          	li	a4,1
8000405c:	fb5ff06f          	j	80004010 <extract_width+0x6c>

80004060 <extract_prec>:
80004060:	00308013          	addi	zero,ra,3
{
80004064:	fe010113          	addi	sp,sp,-32
80004068:	00112e23          	sw	ra,28(sp)
8000406c:	00812c23          	sw	s0,24(sp)
80004070:	00b12623          	sw	a1,12(sp)
	conv->prec_present = (*sp == '.');
80004074:	0005c703          	lbu	a4,0(a1)
80004078:	fd270713          	addi	a4,a4,-46
8000407c:	00173693          	seqz	a3,a4
80004080:	00969693          	slli	a3,a3,0x9
80004084:	00055783          	lhu	a5,0(a0)
80004088:	dff7f793          	andi	a5,a5,-513
8000408c:	00d7e7b3          	or	a5,a5,a3
80004090:	00f51023          	sh	a5,0(a0)
	if (!conv->prec_present) {
80004094:	06071663          	bnez	a4,80004100 <extract_prec+0xa0>
80004098:	00050413          	mv	s0,a0
	++sp;
8000409c:	00c12783          	lw	a5,12(sp)
800040a0:	00178713          	addi	a4,a5,1
800040a4:	00e12623          	sw	a4,12(sp)
	if (*sp == '*') {
800040a8:	0017c703          	lbu	a4,1(a5)
800040ac:	02a00793          	li	a5,42
800040b0:	04f70c63          	beq	a4,a5,80004108 <extract_prec+0xa8>
	size_t prec = extract_decimal(&sp);
800040b4:	00c10513          	addi	a0,sp,12
800040b8:	dd9ff0ef          	jal	ra,80003e90 <extract_decimal>
	conv->prec_value = prec;
800040bc:	00a42423          	sw	a0,8(s0)
	conv->unsupported |= ((conv->prec_value < 0)
800040c0:	00042783          	lw	a5,0(s0)
800040c4:	0017d793          	srli	a5,a5,0x1
800040c8:	0017f793          	andi	a5,a5,1
			      || (prec != (size_t)conv->prec_value));
800040cc:	04054c63          	bltz	a0,80004124 <extract_prec+0xc4>
800040d0:	00000713          	li	a4,0
	conv->unsupported |= ((conv->prec_value < 0)
800040d4:	00e7e7b3          	or	a5,a5,a4
800040d8:	00179793          	slli	a5,a5,0x1
800040dc:	00045703          	lhu	a4,0(s0)
800040e0:	ffd77713          	andi	a4,a4,-3
800040e4:	00f767b3          	or	a5,a4,a5
800040e8:	00f41023          	sh	a5,0(s0)
	return sp;
800040ec:	00c12503          	lw	a0,12(sp)
}
800040f0:	01c12083          	lw	ra,28(sp)
800040f4:	01812403          	lw	s0,24(sp)
800040f8:	02010113          	addi	sp,sp,32
800040fc:	00008067          	ret
		return sp;
80004100:	00058513          	mv	a0,a1
80004104:	fedff06f          	j	800040f0 <extract_prec+0x90>
		conv->prec_star = true;
80004108:	00055783          	lhu	a5,0(a0)
8000410c:	4007e793          	ori	a5,a5,1024
80004110:	00f51023          	sh	a5,0(a0)
		return ++sp;
80004114:	00c12503          	lw	a0,12(sp)
80004118:	00150513          	addi	a0,a0,1
8000411c:	00a12623          	sw	a0,12(sp)
80004120:	fd1ff06f          	j	800040f0 <extract_prec+0x90>
			      || (prec != (size_t)conv->prec_value));
80004124:	00100713          	li	a4,1
80004128:	fadff06f          	j	800040d4 <extract_prec+0x74>

8000412c <extract_length>:
8000412c:	00308013          	addi	zero,ra,3
{
80004130:	00050613          	mv	a2,a0
	switch (*sp) {
80004134:	0005c783          	lbu	a5,0(a1)
80004138:	fb478793          	addi	a5,a5,-76
8000413c:	0ff7f693          	zext.b	a3,a5
80004140:	02e00713          	li	a4,46
80004144:	16d76a63          	bltu	a4,a3,800042b8 <extract_length+0x18c>
80004148:	00269793          	slli	a5,a3,0x2
8000414c:	80008737          	lui	a4,0x80008
80004150:	29070713          	addi	a4,a4,656 # 80008290 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008291>
80004154:	00e787b3          	add	a5,a5,a4
80004158:	0007a783          	lw	a5,0(a5)
8000415c:	00078067          	jr	a5
		if (*++sp == 'h') {
80004160:	00158513          	addi	a0,a1,1
80004164:	0015c703          	lbu	a4,1(a1)
80004168:	06800793          	li	a5,104
8000416c:	02f70263          	beq	a4,a5,80004190 <extract_length+0x64>
			conv->length_mod = LENGTH_H;
80004170:	00065783          	lhu	a5,0(a2)
80004174:	ffff8737          	lui	a4,0xffff8
80004178:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
8000417c:	00e7f7b3          	and	a5,a5,a4
80004180:	00001737          	lui	a4,0x1
80004184:	00e7e7b3          	or	a5,a5,a4
80004188:	00f61023          	sh	a5,0(a2)
8000418c:	00008067          	ret
			conv->length_mod = LENGTH_HH;
80004190:	00065783          	lhu	a5,0(a2)
80004194:	ffff8737          	lui	a4,0xffff8
80004198:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
8000419c:	00e7f7b3          	and	a5,a5,a4
800041a0:	00001737          	lui	a4,0x1
800041a4:	80070713          	addi	a4,a4,-2048 # 800 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE>
800041a8:	00e7e7b3          	or	a5,a5,a4
800041ac:	00f61023          	sh	a5,0(a2)
			++sp;
800041b0:	00258513          	addi	a0,a1,2
800041b4:	00008067          	ret
		if (*++sp == 'l') {
800041b8:	00158513          	addi	a0,a1,1
800041bc:	0015c703          	lbu	a4,1(a1)
800041c0:	06c00793          	li	a5,108
800041c4:	02f70463          	beq	a4,a5,800041ec <extract_length+0xc0>
			conv->length_mod = LENGTH_L;
800041c8:	00065783          	lhu	a5,0(a2)
800041cc:	ffff8737          	lui	a4,0xffff8
800041d0:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
800041d4:	00e7f7b3          	and	a5,a5,a4
800041d8:	00002737          	lui	a4,0x2
800041dc:	80070713          	addi	a4,a4,-2048 # 1800 <CONFIG_ISR_STACK_SIZE+0x800>
800041e0:	00e7e7b3          	or	a5,a5,a4
800041e4:	00f61023          	sh	a5,0(a2)
800041e8:	00008067          	ret
			conv->length_mod = LENGTH_LL;
800041ec:	00065783          	lhu	a5,0(a2)
800041f0:	ffff8737          	lui	a4,0xffff8
800041f4:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
800041f8:	00e7f7b3          	and	a5,a5,a4
800041fc:	00002737          	lui	a4,0x2
80004200:	00e7e7b3          	or	a5,a5,a4
80004204:	00f61023          	sh	a5,0(a2)
			++sp;
80004208:	00258513          	addi	a0,a1,2
8000420c:	00008067          	ret
		conv->length_mod = LENGTH_J;
80004210:	00055783          	lhu	a5,0(a0)
80004214:	ffff8737          	lui	a4,0xffff8
80004218:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
8000421c:	00e7f7b3          	and	a5,a5,a4
80004220:	00003737          	lui	a4,0x3
80004224:	80070713          	addi	a4,a4,-2048 # 2800 <CONFIG_ISR_STACK_SIZE+0x1800>
80004228:	00e7e7b3          	or	a5,a5,a4
8000422c:	00f51023          	sh	a5,0(a0)
		++sp;
80004230:	00158513          	addi	a0,a1,1
		break;
80004234:	00008067          	ret
		conv->length_mod = LENGTH_Z;
80004238:	00055783          	lhu	a5,0(a0)
8000423c:	ffff8737          	lui	a4,0xffff8
80004240:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80004244:	00e7f7b3          	and	a5,a5,a4
80004248:	00003737          	lui	a4,0x3
8000424c:	00e7e7b3          	or	a5,a5,a4
80004250:	00f51023          	sh	a5,0(a0)
		++sp;
80004254:	00158513          	addi	a0,a1,1
		break;
80004258:	00008067          	ret
		conv->length_mod = LENGTH_T;
8000425c:	00055783          	lhu	a5,0(a0)
80004260:	ffff8737          	lui	a4,0xffff8
80004264:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80004268:	00e7f7b3          	and	a5,a5,a4
8000426c:	00004737          	lui	a4,0x4
80004270:	80070713          	addi	a4,a4,-2048 # 3800 <__kernel_ram_size+0xf88>
80004274:	00e7e7b3          	or	a5,a5,a4
80004278:	00f51023          	sh	a5,0(a0)
		++sp;
8000427c:	00158513          	addi	a0,a1,1
		break;
80004280:	00008067          	ret
		conv->length_mod = LENGTH_UPPER_L;
80004284:	00055783          	lhu	a5,0(a0)
80004288:	ffff8737          	lui	a4,0xffff8
8000428c:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80004290:	00e7f7b3          	and	a5,a5,a4
80004294:	00004737          	lui	a4,0x4
80004298:	00e7e7b3          	or	a5,a5,a4
8000429c:	00f51023          	sh	a5,0(a0)
		++sp;
800042a0:	00158513          	addi	a0,a1,1
		conv->unsupported = true;
800042a4:	01079793          	slli	a5,a5,0x10
800042a8:	0107d793          	srli	a5,a5,0x10
800042ac:	0027e793          	ori	a5,a5,2
800042b0:	00f61023          	sh	a5,0(a2)
		break;
800042b4:	00008067          	ret
		conv->length_mod = LENGTH_NONE;
800042b8:	00065783          	lhu	a5,0(a2)
800042bc:	ffff8737          	lui	a4,0xffff8
800042c0:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
800042c4:	00e7f7b3          	and	a5,a5,a4
800042c8:	00f61023          	sh	a5,0(a2)
		break;
800042cc:	00058513          	mv	a0,a1
}
800042d0:	00008067          	ret

800042d4 <extract_specifier>:
800042d4:	00308013          	addi	zero,ra,3
{
800042d8:	00050713          	mv	a4,a0
	conv->specifier = *sp++;
800042dc:	00158513          	addi	a0,a1,1
800042e0:	0005c783          	lbu	a5,0(a1)
800042e4:	00f701a3          	sb	a5,3(a4)
	switch (conv->specifier) {
800042e8:	07800693          	li	a3,120
800042ec:	04f6ea63          	bltu	a3,a5,80004340 <extract_specifier+0x6c>
800042f0:	06e00693          	li	a3,110
800042f4:	08d7fa63          	bgeu	a5,a3,80004388 <extract_specifier+0xb4>
800042f8:	06900693          	li	a3,105
800042fc:	04f6e263          	bltu	a3,a5,80004340 <extract_specifier+0x6c>
80004300:	05800693          	li	a3,88
80004304:	04d7e863          	bltu	a5,a3,80004354 <extract_specifier+0x80>
80004308:	fa878613          	addi	a2,a5,-88
8000430c:	00100693          	li	a3,1
80004310:	00c696b3          	sll	a3,a3,a2
80004314:	0000e637          	lui	a2,0xe
80004318:	20060613          	addi	a2,a2,512 # e200 <__rom_region_size+0x5c64>
8000431c:	00c6f633          	and	a2,a3,a2
80004320:	04061863          	bnez	a2,80004370 <extract_specifier+0x9c>
80004324:	00001637          	lui	a2,0x1
80004328:	80160613          	addi	a2,a2,-2047 # 801 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1>
8000432c:	00c6f633          	and	a2,a3,a2
80004330:	10061863          	bnez	a2,80004440 <extract_specifier+0x16c>
80004334:	00021637          	lui	a2,0x21
80004338:	00c6f6b3          	and	a3,a3,a2
8000433c:	0a069463          	bnez	a3,800043e4 <extract_specifier+0x110>
		conv->invalid = true;
80004340:	00075783          	lhu	a5,0(a4)
80004344:	0017e793          	ori	a5,a5,1
80004348:	00f71023          	sh	a5,0(a4)
	bool unsupported = false;
8000434c:	00000793          	li	a5,0
		break;
80004350:	0c80006f          	j	80004418 <extract_specifier+0x144>
	switch (conv->specifier) {
80004354:	04100693          	li	a3,65
80004358:	00d78c63          	beq	a5,a3,80004370 <extract_specifier+0x9c>
8000435c:	fed7e2e3          	bltu	a5,a3,80004340 <extract_specifier+0x6c>
80004360:	fbb78793          	addi	a5,a5,-69
80004364:	0ff7f793          	zext.b	a5,a5
80004368:	00200693          	li	a3,2
8000436c:	fcf6eae3          	bltu	a3,a5,80004340 <extract_specifier+0x6c>
		conv->specifier_cat = SPECIFIER_FP;
80004370:	00274783          	lbu	a5,2(a4)
80004374:	ff87f793          	andi	a5,a5,-8
80004378:	0047e793          	ori	a5,a5,4
8000437c:	00f70123          	sb	a5,2(a4)
			unsupported = true;
80004380:	00100793          	li	a5,1
			break;
80004384:	0940006f          	j	80004418 <extract_specifier+0x144>
	switch (conv->specifier) {
80004388:	f9278613          	addi	a2,a5,-110
8000438c:	00100693          	li	a3,1
80004390:	00c696b3          	sll	a3,a3,a2
80004394:	4826f613          	andi	a2,a3,1154
80004398:	00c035b3          	snez	a1,a2
8000439c:	0a061263          	bnez	a2,80004440 <extract_specifier+0x16c>
800043a0:	0246f613          	andi	a2,a3,36
800043a4:	00c037b3          	snez	a5,a2
800043a8:	0c061a63          	bnez	a2,8000447c <extract_specifier+0x1a8>
800043ac:	0016f693          	andi	a3,a3,1
800043b0:	f80688e3          	beqz	a3,80004340 <extract_specifier+0x6c>
		conv->specifier_cat = SPECIFIER_PTR;
800043b4:	00274603          	lbu	a2,2(a4)
800043b8:	ff867613          	andi	a2,a2,-8
800043bc:	00366613          	ori	a2,a2,3
800043c0:	00c70123          	sb	a2,2(a4)
		if (conv->length_mod == LENGTH_UPPER_L) {
800043c4:	00075603          	lhu	a2,0(a4)
800043c8:	000085b7          	lui	a1,0x8
800043cc:	80058593          	addi	a1,a1,-2048 # 7800 <__kernel_ram_size+0x4f88>
800043d0:	00b67633          	and	a2,a2,a1
800043d4:	000045b7          	lui	a1,0x4
800043d8:	04b61063          	bne	a2,a1,80004418 <extract_specifier+0x144>
			unsupported = true;
800043dc:	00068793          	mv	a5,a3
800043e0:	0380006f          	j	80004418 <extract_specifier+0x144>
		conv->specifier_cat = SPECIFIER_SINT;
800043e4:	00274683          	lbu	a3,2(a4)
800043e8:	ff86f693          	andi	a3,a3,-8
800043ec:	0016e693          	ori	a3,a3,1
800043f0:	00d70123          	sb	a3,2(a4)
		if (conv->length_mod == LENGTH_UPPER_L) {
800043f4:	00075683          	lhu	a3,0(a4)
800043f8:	00008637          	lui	a2,0x8
800043fc:	80060613          	addi	a2,a2,-2048 # 7800 <__kernel_ram_size+0x4f88>
80004400:	00c6f6b3          	and	a3,a3,a2
80004404:	00004637          	lui	a2,0x4
80004408:	04c68663          	beq	a3,a2,80004454 <extract_specifier+0x180>
		if (conv->specifier == 'c') {
8000440c:	06300693          	li	a3,99
80004410:	04d78a63          	beq	a5,a3,80004464 <extract_specifier+0x190>
	bool unsupported = false;
80004414:	00000793          	li	a5,0
	conv->unsupported |= unsupported;
80004418:	00072683          	lw	a3,0(a4)
8000441c:	0016d693          	srli	a3,a3,0x1
80004420:	0016f693          	andi	a3,a3,1
80004424:	00d7e7b3          	or	a5,a5,a3
80004428:	00179793          	slli	a5,a5,0x1
8000442c:	00075683          	lhu	a3,0(a4)
80004430:	ffd6f693          	andi	a3,a3,-3
80004434:	00f6e7b3          	or	a5,a3,a5
80004438:	00f71023          	sh	a5,0(a4)
}
8000443c:	00008067          	ret
		conv->specifier_cat = SPECIFIER_UINT;
80004440:	00274683          	lbu	a3,2(a4)
80004444:	ff86f693          	andi	a3,a3,-8
80004448:	0026e693          	ori	a3,a3,2
8000444c:	00d70123          	sb	a3,2(a4)
80004450:	fa5ff06f          	j	800043f4 <extract_specifier+0x120>
			conv->invalid = true;
80004454:	00075683          	lhu	a3,0(a4)
80004458:	0016e693          	ori	a3,a3,1
8000445c:	00d71023          	sh	a3,0(a4)
80004460:	fadff06f          	j	8000440c <extract_specifier+0x138>
			unsupported = (conv->length_mod != LENGTH_NONE);
80004464:	00075783          	lhu	a5,0(a4)
80004468:	000086b7          	lui	a3,0x8
8000446c:	80068693          	addi	a3,a3,-2048 # 7800 <__kernel_ram_size+0x4f88>
80004470:	00d7f7b3          	and	a5,a5,a3
80004474:	00f037b3          	snez	a5,a5
80004478:	fa1ff06f          	j	80004418 <extract_specifier+0x144>
		conv->specifier_cat = SPECIFIER_PTR;
8000447c:	00274683          	lbu	a3,2(a4)
80004480:	ff86f693          	andi	a3,a3,-8
80004484:	0036e693          	ori	a3,a3,3
80004488:	00d70123          	sb	a3,2(a4)
		if (conv->length_mod != LENGTH_NONE) {
8000448c:	00075683          	lhu	a3,0(a4)
80004490:	00008637          	lui	a2,0x8
80004494:	80060613          	addi	a2,a2,-2048 # 7800 <__kernel_ram_size+0x4f88>
80004498:	00c6f6b3          	and	a3,a3,a2
8000449c:	f6069ee3          	bnez	a3,80004418 <extract_specifier+0x144>
	bool unsupported = false;
800044a0:	00058793          	mv	a5,a1
800044a4:	f75ff06f          	j	80004418 <extract_specifier+0x144>

800044a8 <extract_conversion>:
800044a8:	00308013          	addi	zero,ra,3
{
800044ac:	ff010113          	addi	sp,sp,-16
800044b0:	00112623          	sw	ra,12(sp)
800044b4:	00812423          	sw	s0,8(sp)
800044b8:	00050413          	mv	s0,a0
	*conv = (struct conversion) {
800044bc:	00052023          	sw	zero,0(a0)
800044c0:	00052223          	sw	zero,4(a0)
800044c4:	00052423          	sw	zero,8(a0)
	if (*sp == '%') {
800044c8:	0015c783          	lbu	a5,1(a1) # 4001 <__kernel_ram_size+0x1789>
800044cc:	02500713          	li	a4,37
800044d0:	04e78863          	beq	a5,a4,80004520 <extract_conversion+0x78>
800044d4:	00158593          	addi	a1,a1,1
	sp = extract_flags(conv, sp);
800044d8:	00040513          	mv	a0,s0
800044dc:	a05ff0ef          	jal	ra,80003ee0 <extract_flags>
800044e0:	00050593          	mv	a1,a0
	sp = extract_width(conv, sp);
800044e4:	00040513          	mv	a0,s0
800044e8:	abdff0ef          	jal	ra,80003fa4 <extract_width>
800044ec:	00050593          	mv	a1,a0
	sp = extract_prec(conv, sp);
800044f0:	00040513          	mv	a0,s0
800044f4:	b6dff0ef          	jal	ra,80004060 <extract_prec>
800044f8:	00050593          	mv	a1,a0
	sp = extract_length(conv, sp);
800044fc:	00040513          	mv	a0,s0
80004500:	c2dff0ef          	jal	ra,8000412c <extract_length>
80004504:	00050593          	mv	a1,a0
	sp = extract_specifier(conv, sp);
80004508:	00040513          	mv	a0,s0
8000450c:	dc9ff0ef          	jal	ra,800042d4 <extract_specifier>
}
80004510:	00c12083          	lw	ra,12(sp)
80004514:	00812403          	lw	s0,8(sp)
80004518:	01010113          	addi	sp,sp,16
8000451c:	00008067          	ret
		conv->specifier = *sp++;
80004520:	00258513          	addi	a0,a1,2
80004524:	00f401a3          	sb	a5,3(s0)
		return sp;
80004528:	fe9ff06f          	j	80004510 <extract_conversion+0x68>

8000452c <conversion_radix>:
8000452c:	00308013          	addi	zero,ra,3
	switch (specifier) {
80004530:	06f00793          	li	a5,111
80004534:	02f50c63          	beq	a0,a5,8000456c <conversion_radix+0x40>
80004538:	00a7fe63          	bgeu	a5,a0,80004554 <conversion_radix+0x28>
8000453c:	07000793          	li	a5,112
80004540:	02f50a63          	beq	a0,a5,80004574 <conversion_radix+0x48>
80004544:	07800793          	li	a5,120
80004548:	02f51a63          	bne	a0,a5,8000457c <conversion_radix+0x50>
		return 16;
8000454c:	01000513          	li	a0,16
80004550:	00008067          	ret
	switch (specifier) {
80004554:	05800793          	li	a5,88
80004558:	00f50663          	beq	a0,a5,80004564 <conversion_radix+0x38>
8000455c:	00a00513          	li	a0,10
80004560:	00008067          	ret
		return 16;
80004564:	01000513          	li	a0,16
80004568:	00008067          	ret
		return 8;
8000456c:	00800513          	li	a0,8
80004570:	00008067          	ret
		return 16;
80004574:	01000513          	li	a0,16
80004578:	00008067          	ret
	switch (specifier) {
8000457c:	00a00513          	li	a0,10
}
80004580:	00008067          	ret

80004584 <encode_uint>:
80004584:	00308013          	addi	zero,ra,3
{
80004588:	fd010113          	addi	sp,sp,-48
8000458c:	02112623          	sw	ra,44(sp)
80004590:	02812423          	sw	s0,40(sp)
80004594:	02912223          	sw	s1,36(sp)
80004598:	03212023          	sw	s2,32(sp)
8000459c:	01312e23          	sw	s3,28(sp)
800045a0:	01412c23          	sw	s4,24(sp)
800045a4:	01512a23          	sw	s5,20(sp)
800045a8:	01612823          	sw	s6,16(sp)
800045ac:	01712623          	sw	s7,12(sp)
800045b0:	01812423          	sw	s8,8(sp)
800045b4:	00050993          	mv	s3,a0
800045b8:	00058413          	mv	s0,a1
800045bc:	00060c13          	mv	s8,a2
800045c0:	00068a93          	mv	s5,a3
800045c4:	00070493          	mv	s1,a4
	bool upcase = isupper((int)conv->specifier);
800045c8:	00364503          	lbu	a0,3(a2)
800045cc:	800087b7          	lui	a5,0x80008
800045d0:	0ad78793          	addi	a5,a5,173 # 800080ad <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800080ae>
800045d4:	00f507b3          	add	a5,a0,a5
800045d8:	0007cb83          	lbu	s7,0(a5)
800045dc:	003bfb93          	andi	s7,s7,3
	const unsigned int radix = conversion_radix(conv->specifier);
800045e0:	f4dff0ef          	jal	ra,8000452c <conversion_radix>
800045e4:	00050913          	mv	s2,a0
	char *bp = bps + (bpe - bps);
800045e8:	0480006f          	j	80004630 <encode_uint+0xac>
		*--bp = (lsv <= 9) ? ('0' + lsv)
800045ec:	00100793          	li	a5,1
800045f0:	06fb8a63          	beq	s7,a5,80004664 <encode_uint+0xe0>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
800045f4:	0ff57793          	zext.b	a5,a0
		*--bp = (lsv <= 9) ? ('0' + lsv)
800045f8:	05778793          	addi	a5,a5,87
800045fc:	0ff7f793          	zext.b	a5,a5
80004600:	fff48493          	addi	s1,s1,-1
80004604:	00f48023          	sb	a5,0(s1)
		value /= radix;
80004608:	00090613          	mv	a2,s2
8000460c:	00000693          	li	a3,0
80004610:	00098513          	mv	a0,s3
80004614:	00040593          	mv	a1,s0
80004618:	bcdfb0ef          	jal	ra,800001e4 <__udivdi3>
	} while ((value != 0) && (bps < bp));
8000461c:	05446e63          	bltu	s0,s4,80004678 <encode_uint+0xf4>
80004620:	048a0a63          	beq	s4,s0,80004674 <encode_uint+0xf0>
80004624:	049afa63          	bgeu	s5,s1,80004678 <encode_uint+0xf4>
		value /= radix;
80004628:	00050993          	mv	s3,a0
8000462c:	00058413          	mv	s0,a1
		unsigned int lsv = (unsigned int)(value % radix);
80004630:	00090b13          	mv	s6,s2
80004634:	00000a13          	li	s4,0
80004638:	00090613          	mv	a2,s2
8000463c:	00000693          	li	a3,0
80004640:	00098513          	mv	a0,s3
80004644:	00040593          	mv	a1,s0
80004648:	fcdfb0ef          	jal	ra,80000614 <__umoddi3>
		*--bp = (lsv <= 9) ? ('0' + lsv)
8000464c:	00900793          	li	a5,9
80004650:	f8a7eee3          	bltu	a5,a0,800045ec <encode_uint+0x68>
80004654:	0ff57793          	zext.b	a5,a0
80004658:	03078793          	addi	a5,a5,48
8000465c:	0ff7f793          	zext.b	a5,a5
80004660:	fa1ff06f          	j	80004600 <encode_uint+0x7c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
80004664:	0ff57793          	zext.b	a5,a0
		*--bp = (lsv <= 9) ? ('0' + lsv)
80004668:	03778793          	addi	a5,a5,55
8000466c:	0ff7f793          	zext.b	a5,a5
80004670:	f91ff06f          	j	80004600 <encode_uint+0x7c>
	} while ((value != 0) && (bps < bp));
80004674:	fb69f8e3          	bgeu	s3,s6,80004624 <encode_uint+0xa0>
	if (conv->flag_hash) {
80004678:	000c5783          	lhu	a5,0(s8)
8000467c:	0207f793          	andi	a5,a5,32
80004680:	00078a63          	beqz	a5,80004694 <encode_uint+0x110>
		if (radix == 8) {
80004684:	00800793          	li	a5,8
80004688:	04f90063          	beq	s2,a5,800046c8 <encode_uint+0x144>
		} else if (radix == 16) {
8000468c:	01000793          	li	a5,16
80004690:	04f90463          	beq	s2,a5,800046d8 <encode_uint+0x154>
}
80004694:	00048513          	mv	a0,s1
80004698:	02c12083          	lw	ra,44(sp)
8000469c:	02812403          	lw	s0,40(sp)
800046a0:	02412483          	lw	s1,36(sp)
800046a4:	02012903          	lw	s2,32(sp)
800046a8:	01c12983          	lw	s3,28(sp)
800046ac:	01812a03          	lw	s4,24(sp)
800046b0:	01412a83          	lw	s5,20(sp)
800046b4:	01012b03          	lw	s6,16(sp)
800046b8:	00c12b83          	lw	s7,12(sp)
800046bc:	00812c03          	lw	s8,8(sp)
800046c0:	03010113          	addi	sp,sp,48
800046c4:	00008067          	ret
			conv->altform_0 = true;
800046c8:	002c4783          	lbu	a5,2(s8)
800046cc:	0087e793          	ori	a5,a5,8
800046d0:	00fc0123          	sb	a5,2(s8)
800046d4:	fc1ff06f          	j	80004694 <encode_uint+0x110>
			conv->altform_0c = true;
800046d8:	002c4783          	lbu	a5,2(s8)
800046dc:	0107e793          	ori	a5,a5,16
800046e0:	00fc0123          	sb	a5,2(s8)
800046e4:	fb1ff06f          	j	80004694 <encode_uint+0x110>

800046e8 <store_count>:
800046e8:	00308013          	addi	zero,ra,3
	switch ((enum length_mod_enum)conv->length_mod) {
800046ec:	00052783          	lw	a5,0(a0)
800046f0:	00b7d793          	srli	a5,a5,0xb
800046f4:	00f7f793          	andi	a5,a5,15
800046f8:	00700713          	li	a4,7
800046fc:	06f76463          	bltu	a4,a5,80004764 <store_count+0x7c>
80004700:	00279793          	slli	a5,a5,0x2
80004704:	80008737          	lui	a4,0x80008
80004708:	34c70713          	addi	a4,a4,844 # 8000834c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000834d>
8000470c:	00e787b3          	add	a5,a5,a4
80004710:	0007a783          	lw	a5,0(a5)
80004714:	00078067          	jr	a5
		*(int *)dp = count;
80004718:	00c5a023          	sw	a2,0(a1)
		break;
8000471c:	00008067          	ret
		*(signed char *)dp = (signed char)count;
80004720:	00c58023          	sb	a2,0(a1)
		break;
80004724:	00008067          	ret
		*(short *)dp = (short)count;
80004728:	00c59023          	sh	a2,0(a1)
		break;
8000472c:	00008067          	ret
		*(long *)dp = (long)count;
80004730:	00c5a023          	sw	a2,0(a1)
		break;
80004734:	00008067          	ret
		*(long long *)dp = (long long)count;
80004738:	41f65793          	srai	a5,a2,0x1f
8000473c:	00c5a023          	sw	a2,0(a1)
80004740:	00f5a223          	sw	a5,4(a1)
		break;
80004744:	00008067          	ret
		*(intmax_t *)dp = (intmax_t)count;
80004748:	41f65793          	srai	a5,a2,0x1f
8000474c:	00c5a023          	sw	a2,0(a1)
80004750:	00f5a223          	sw	a5,4(a1)
		break;
80004754:	00008067          	ret
		*(size_t *)dp = (size_t)count;
80004758:	00c5a023          	sw	a2,0(a1)
		break;
8000475c:	00008067          	ret
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
80004760:	00c5a023          	sw	a2,0(a1)
}
80004764:	00008067          	ret

80004768 <outs>:
80004768:	00308013          	addi	zero,ra,3
{
8000476c:	fe010113          	addi	sp,sp,-32
80004770:	00112e23          	sw	ra,28(sp)
80004774:	00812c23          	sw	s0,24(sp)
80004778:	00912a23          	sw	s1,20(sp)
8000477c:	01212823          	sw	s2,16(sp)
80004780:	01312623          	sw	s3,12(sp)
80004784:	01412423          	sw	s4,8(sp)
80004788:	00050a13          	mv	s4,a0
8000478c:	00058993          	mv	s3,a1
80004790:	00068913          	mv	s2,a3
	size_t count = 0;
80004794:	00000413          	li	s0,0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
80004798:	0200006f          	j	800047b8 <outs+0x50>
		int rc = out((int)*sp++, ctx);
8000479c:	00160493          	addi	s1,a2,1
800047a0:	00098593          	mv	a1,s3
800047a4:	00064503          	lbu	a0,0(a2)
800047a8:	000a00e7          	jalr	s4
		if (rc < 0) {
800047ac:	02054063          	bltz	a0,800047cc <outs+0x64>
		++count;
800047b0:	00140413          	addi	s0,s0,1
		int rc = out((int)*sp++, ctx);
800047b4:	00048613          	mv	a2,s1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
800047b8:	ff2662e3          	bltu	a2,s2,8000479c <outs+0x34>
800047bc:	00091663          	bnez	s2,800047c8 <outs+0x60>
800047c0:	00064783          	lbu	a5,0(a2)
800047c4:	fc079ce3          	bnez	a5,8000479c <outs+0x34>
	return (int)count;
800047c8:	00040513          	mv	a0,s0
}
800047cc:	01c12083          	lw	ra,28(sp)
800047d0:	01812403          	lw	s0,24(sp)
800047d4:	01412483          	lw	s1,20(sp)
800047d8:	01012903          	lw	s2,16(sp)
800047dc:	00c12983          	lw	s3,12(sp)
800047e0:	00812a03          	lw	s4,8(sp)
800047e4:	02010113          	addi	sp,sp,32
800047e8:	00008067          	ret

800047ec <z_cbvprintf_impl>:
800047ec:	00308013          	addi	zero,ra,3
{
800047f0:	f8010113          	addi	sp,sp,-128
800047f4:	06112e23          	sw	ra,124(sp)
800047f8:	06812c23          	sw	s0,120(sp)
800047fc:	06912a23          	sw	s1,116(sp)
80004800:	07212823          	sw	s2,112(sp)
80004804:	07312623          	sw	s3,108(sp)
80004808:	07412423          	sw	s4,104(sp)
8000480c:	07512223          	sw	s5,100(sp)
80004810:	07612023          	sw	s6,96(sp)
80004814:	05712e23          	sw	s7,92(sp)
80004818:	05812c23          	sw	s8,88(sp)
8000481c:	00050913          	mv	s2,a0
80004820:	00058493          	mv	s1,a1
80004824:	00060a93          	mv	s5,a2
80004828:	00d12623          	sw	a3,12(sp)
	size_t count = 0;
8000482c:	00000413          	li	s0,0
	while (*fp != 0) {
80004830:	000ac503          	lbu	a0,0(s5)
80004834:	78050063          	beqz	a0,80004fb4 <z_cbvprintf_impl+0x7c8>
		if (*fp != '%') {
80004838:	02500793          	li	a5,37
8000483c:	00f50e63          	beq	a0,a5,80004858 <z_cbvprintf_impl+0x6c>
			OUTC(*fp++);
80004840:	001a8a93          	addi	s5,s5,1
80004844:	00048593          	mv	a1,s1
80004848:	000900e7          	jalr	s2
8000484c:	76054663          	bltz	a0,80004fb8 <z_cbvprintf_impl+0x7cc>
80004850:	00140413          	addi	s0,s0,1
			continue;
80004854:	fddff06f          	j	80004830 <z_cbvprintf_impl+0x44>
		} state = {
80004858:	00012823          	sw	zero,16(sp)
8000485c:	00012a23          	sw	zero,20(sp)
80004860:	00012c23          	sw	zero,24(sp)
80004864:	00012e23          	sw	zero,28(sp)
80004868:	02012023          	sw	zero,32(sp)
8000486c:	02012223          	sw	zero,36(sp)
80004870:	02012423          	sw	zero,40(sp)
80004874:	02012623          	sw	zero,44(sp)
		fp = extract_conversion(conv, sp);
80004878:	000a8593          	mv	a1,s5
8000487c:	02010513          	addi	a0,sp,32
80004880:	c29ff0ef          	jal	ra,800044a8 <extract_conversion>
80004884:	00050993          	mv	s3,a0
		if (conv->width_star) {
80004888:	02015783          	lhu	a5,32(sp)
8000488c:	1007f713          	andi	a4,a5,256
80004890:	0c070263          	beqz	a4,80004954 <z_cbvprintf_impl+0x168>
			width = va_arg(ap, int);
80004894:	00c12783          	lw	a5,12(sp)
80004898:	00478713          	addi	a4,a5,4
8000489c:	00e12623          	sw	a4,12(sp)
800048a0:	0007aa03          	lw	s4,0(a5)
			if (width < 0) {
800048a4:	080a4e63          	bltz	s4,80004940 <z_cbvprintf_impl+0x154>
		if (conv->prec_star) {
800048a8:	02015783          	lhu	a5,32(sp)
800048ac:	4007f713          	andi	a4,a5,1024
800048b0:	0c070863          	beqz	a4,80004980 <z_cbvprintf_impl+0x194>
			int arg = va_arg(ap, int);
800048b4:	00c12783          	lw	a5,12(sp)
800048b8:	00478713          	addi	a4,a5,4
800048bc:	00e12623          	sw	a4,12(sp)
800048c0:	0007ab03          	lw	s6,0(a5)
			if (arg < 0) {
800048c4:	0a0b4463          	bltz	s6,8000496c <z_cbvprintf_impl+0x180>
		conv->pad0_value = 0;
800048c8:	02012223          	sw	zero,36(sp)
		conv->pad0_pre_exp = 0;
800048cc:	02012423          	sw	zero,40(sp)
			= (enum specifier_cat_enum)conv->specifier_cat;
800048d0:	02012783          	lw	a5,32(sp)
800048d4:	0107d713          	srli	a4,a5,0x10
800048d8:	00777713          	andi	a4,a4,7
			= (enum length_mod_enum)conv->length_mod;
800048dc:	00b7d793          	srli	a5,a5,0xb
800048e0:	00f7f793          	andi	a5,a5,15
		enum length_mod_enum length_mod
800048e4:	00078693          	mv	a3,a5
		if (specifier_cat == SPECIFIER_SINT) {
800048e8:	00100613          	li	a2,1
800048ec:	0ac70663          	beq	a4,a2,80004998 <z_cbvprintf_impl+0x1ac>
		} else if (specifier_cat == SPECIFIER_UINT) {
800048f0:	00200613          	li	a2,2
800048f4:	1ec70063          	beq	a4,a2,80004ad4 <z_cbvprintf_impl+0x2e8>
		} else if (specifier_cat == SPECIFIER_FP) {
800048f8:	00400793          	li	a5,4
800048fc:	2cf70a63          	beq	a4,a5,80004bd0 <z_cbvprintf_impl+0x3e4>
		} else if (specifier_cat == SPECIFIER_PTR) {
80004900:	00300793          	li	a5,3
80004904:	32f70863          	beq	a4,a5,80004c34 <z_cbvprintf_impl+0x448>
		if (conv->invalid || conv->unsupported) {
80004908:	02012783          	lw	a5,32(sp)
8000490c:	0037f793          	andi	a5,a5,3
80004910:	32079e63          	bnez	a5,80004c4c <z_cbvprintf_impl+0x460>
		switch (conv->specifier) {
80004914:	02314783          	lbu	a5,35(sp)
80004918:	fdb78793          	addi	a5,a5,-37
8000491c:	0ff7f693          	zext.b	a3,a5
80004920:	05300713          	li	a4,83
80004924:	4cd76a63          	bltu	a4,a3,80004df8 <z_cbvprintf_impl+0x60c>
80004928:	00269793          	slli	a5,a3,0x2
8000492c:	80008737          	lui	a4,0x80008
80004930:	37470713          	addi	a4,a4,884 # 80008374 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008375>
80004934:	00e787b3          	add	a5,a5,a4
80004938:	0007a783          	lw	a5,0(a5)
8000493c:	00078067          	jr	a5
				conv->flag_dash = true;
80004940:	02015783          	lhu	a5,32(sp)
80004944:	0047e793          	ori	a5,a5,4
80004948:	02f11023          	sh	a5,32(sp)
				width = -width;
8000494c:	41400a33          	neg	s4,s4
80004950:	f59ff06f          	j	800048a8 <z_cbvprintf_impl+0xbc>
		} else if (conv->width_present) {
80004954:	0807f793          	andi	a5,a5,128
80004958:	00078663          	beqz	a5,80004964 <z_cbvprintf_impl+0x178>
			width = conv->width_value;
8000495c:	02412a03          	lw	s4,36(sp)
80004960:	f49ff06f          	j	800048a8 <z_cbvprintf_impl+0xbc>
		int width = -1;
80004964:	fff00a13          	li	s4,-1
80004968:	f41ff06f          	j	800048a8 <z_cbvprintf_impl+0xbc>
				conv->prec_present = false;
8000496c:	02015783          	lhu	a5,32(sp)
80004970:	dff7f793          	andi	a5,a5,-513
80004974:	02f11023          	sh	a5,32(sp)
		int precision = -1;
80004978:	fff00b13          	li	s6,-1
8000497c:	f4dff06f          	j	800048c8 <z_cbvprintf_impl+0xdc>
		} else if (conv->prec_present) {
80004980:	2007f793          	andi	a5,a5,512
80004984:	00078663          	beqz	a5,80004990 <z_cbvprintf_impl+0x1a4>
			precision = conv->prec_value;
80004988:	02812b03          	lw	s6,40(sp)
8000498c:	f3dff06f          	j	800048c8 <z_cbvprintf_impl+0xdc>
		int precision = -1;
80004990:	fff00b13          	li	s6,-1
80004994:	f35ff06f          	j	800048c8 <z_cbvprintf_impl+0xdc>
			switch (length_mod) {
80004998:	00500713          	li	a4,5
8000499c:	0ee78e63          	beq	a5,a4,80004a98 <z_cbvprintf_impl+0x2ac>
800049a0:	02f76e63          	bltu	a4,a5,800049dc <z_cbvprintf_impl+0x1f0>
800049a4:	00300713          	li	a4,3
800049a8:	0ae78263          	beq	a5,a4,80004a4c <z_cbvprintf_impl+0x260>
800049ac:	00400713          	li	a4,4
800049b0:	04e79e63          	bne	a5,a4,80004a0c <z_cbvprintf_impl+0x220>
					(sint_value_type)va_arg(ap, long long);
800049b4:	00c12783          	lw	a5,12(sp)
800049b8:	00778793          	addi	a5,a5,7
800049bc:	ff87f793          	andi	a5,a5,-8
800049c0:	00878713          	addi	a4,a5,8
800049c4:	00e12623          	sw	a4,12(sp)
800049c8:	0007a703          	lw	a4,0(a5)
800049cc:	0047a783          	lw	a5,4(a5)
				value->sint =
800049d0:	00e12823          	sw	a4,16(sp)
800049d4:	00f12a23          	sw	a5,20(sp)
				break;
800049d8:	0500006f          	j	80004a28 <z_cbvprintf_impl+0x23c>
			switch (length_mod) {
800049dc:	00a78793          	addi	a5,a5,10
800049e0:	00f7f793          	andi	a5,a5,15
800049e4:	00100713          	li	a4,1
800049e8:	02f76263          	bltu	a4,a5,80004a0c <z_cbvprintf_impl+0x220>
					(sint_value_type)va_arg(ap, ptrdiff_t);
800049ec:	00c12783          	lw	a5,12(sp)
800049f0:	00478713          	addi	a4,a5,4
800049f4:	00e12623          	sw	a4,12(sp)
800049f8:	0007a783          	lw	a5,0(a5)
800049fc:	41f7d713          	srai	a4,a5,0x1f
				value->sint =
80004a00:	00f12823          	sw	a5,16(sp)
80004a04:	00e12a23          	sw	a4,20(sp)
				break;
80004a08:	0200006f          	j	80004a28 <z_cbvprintf_impl+0x23c>
				value->sint = va_arg(ap, int);
80004a0c:	00c12783          	lw	a5,12(sp)
80004a10:	00478713          	addi	a4,a5,4
80004a14:	00e12623          	sw	a4,12(sp)
80004a18:	0007a783          	lw	a5,0(a5)
80004a1c:	41f7d713          	srai	a4,a5,0x1f
80004a20:	00f12823          	sw	a5,16(sp)
80004a24:	00e12a23          	sw	a4,20(sp)
			if (length_mod == LENGTH_HH) {
80004a28:	00100793          	li	a5,1
80004a2c:	08f68a63          	beq	a3,a5,80004ac0 <z_cbvprintf_impl+0x2d4>
			} else if (length_mod == LENGTH_H) {
80004a30:	00200793          	li	a5,2
80004a34:	ecf69ae3          	bne	a3,a5,80004908 <z_cbvprintf_impl+0x11c>
				value->sint = (short)value->sint;
80004a38:	01011783          	lh	a5,16(sp)
80004a3c:	41f7d713          	srai	a4,a5,0x1f
80004a40:	00f12823          	sw	a5,16(sp)
80004a44:	00e12a23          	sw	a4,20(sp)
80004a48:	ec1ff06f          	j	80004908 <z_cbvprintf_impl+0x11c>
				    && (conv->specifier == 'c')) {
80004a4c:	02314703          	lbu	a4,35(sp)
				if (WCHAR_IS_SIGNED
80004a50:	06300793          	li	a5,99
80004a54:	02f70263          	beq	a4,a5,80004a78 <z_cbvprintf_impl+0x28c>
					value->sint = va_arg(ap, long);
80004a58:	00c12783          	lw	a5,12(sp)
80004a5c:	00478713          	addi	a4,a5,4
80004a60:	00e12623          	sw	a4,12(sp)
80004a64:	0007a783          	lw	a5,0(a5)
80004a68:	41f7d713          	srai	a4,a5,0x1f
80004a6c:	00f12823          	sw	a5,16(sp)
80004a70:	00e12a23          	sw	a4,20(sp)
80004a74:	fb5ff06f          	j	80004a28 <z_cbvprintf_impl+0x23c>
					value->sint = (wchar_t)va_arg(ap,
80004a78:	00c12783          	lw	a5,12(sp)
80004a7c:	00478713          	addi	a4,a5,4
80004a80:	00e12623          	sw	a4,12(sp)
80004a84:	0007a783          	lw	a5,0(a5)
80004a88:	41f7d713          	srai	a4,a5,0x1f
80004a8c:	00f12823          	sw	a5,16(sp)
80004a90:	00e12a23          	sw	a4,20(sp)
80004a94:	f95ff06f          	j	80004a28 <z_cbvprintf_impl+0x23c>
					(sint_value_type)va_arg(ap, intmax_t);
80004a98:	00c12783          	lw	a5,12(sp)
80004a9c:	00778793          	addi	a5,a5,7
80004aa0:	ff87f793          	andi	a5,a5,-8
80004aa4:	00878713          	addi	a4,a5,8
80004aa8:	00e12623          	sw	a4,12(sp)
80004aac:	0007a703          	lw	a4,0(a5)
80004ab0:	0047a783          	lw	a5,4(a5)
				value->sint =
80004ab4:	00e12823          	sw	a4,16(sp)
80004ab8:	00f12a23          	sw	a5,20(sp)
				break;
80004abc:	f6dff06f          	j	80004a28 <z_cbvprintf_impl+0x23c>
				value->sint = (signed char)value->sint;
80004ac0:	01010783          	lb	a5,16(sp)
80004ac4:	41f7d713          	srai	a4,a5,0x1f
80004ac8:	00f12823          	sw	a5,16(sp)
80004acc:	00e12a23          	sw	a4,20(sp)
80004ad0:	e39ff06f          	j	80004908 <z_cbvprintf_impl+0x11c>
			switch (length_mod) {
80004ad4:	00500713          	li	a4,5
80004ad8:	0ce78063          	beq	a5,a4,80004b98 <z_cbvprintf_impl+0x3ac>
80004adc:	02f76e63          	bltu	a4,a5,80004b18 <z_cbvprintf_impl+0x32c>
80004ae0:	00300713          	li	a4,3
80004ae4:	08e78c63          	beq	a5,a4,80004b7c <z_cbvprintf_impl+0x390>
80004ae8:	00400713          	li	a4,4
80004aec:	04e79c63          	bne	a5,a4,80004b44 <z_cbvprintf_impl+0x358>
					(uint_value_type)va_arg(ap,
80004af0:	00c12783          	lw	a5,12(sp)
80004af4:	00778793          	addi	a5,a5,7
80004af8:	ff87f793          	andi	a5,a5,-8
80004afc:	00878713          	addi	a4,a5,8
80004b00:	00e12623          	sw	a4,12(sp)
80004b04:	0007a703          	lw	a4,0(a5)
80004b08:	0047a783          	lw	a5,4(a5)
				value->uint =
80004b0c:	00e12823          	sw	a4,16(sp)
80004b10:	00f12a23          	sw	a5,20(sp)
				break;
80004b14:	0480006f          	j	80004b5c <z_cbvprintf_impl+0x370>
			switch (length_mod) {
80004b18:	00a78793          	addi	a5,a5,10
80004b1c:	00f7f793          	andi	a5,a5,15
80004b20:	00100713          	li	a4,1
80004b24:	02f76063          	bltu	a4,a5,80004b44 <z_cbvprintf_impl+0x358>
					(uint_value_type)va_arg(ap, size_t);
80004b28:	00c12783          	lw	a5,12(sp)
80004b2c:	00478713          	addi	a4,a5,4
80004b30:	00e12623          	sw	a4,12(sp)
80004b34:	0007a783          	lw	a5,0(a5)
				value->uint =
80004b38:	00f12823          	sw	a5,16(sp)
80004b3c:	00012a23          	sw	zero,20(sp)
				break;
80004b40:	01c0006f          	j	80004b5c <z_cbvprintf_impl+0x370>
				value->uint = va_arg(ap, unsigned int);
80004b44:	00c12783          	lw	a5,12(sp)
80004b48:	00478713          	addi	a4,a5,4
80004b4c:	00e12623          	sw	a4,12(sp)
80004b50:	0007a783          	lw	a5,0(a5)
80004b54:	00f12823          	sw	a5,16(sp)
80004b58:	00012a23          	sw	zero,20(sp)
			if (length_mod == LENGTH_HH) {
80004b5c:	00100793          	li	a5,1
80004b60:	06f68063          	beq	a3,a5,80004bc0 <z_cbvprintf_impl+0x3d4>
			} else if (length_mod == LENGTH_H) {
80004b64:	00200793          	li	a5,2
80004b68:	daf690e3          	bne	a3,a5,80004908 <z_cbvprintf_impl+0x11c>
				value->uint = (unsigned short)value->uint;
80004b6c:	01015783          	lhu	a5,16(sp)
80004b70:	00f12823          	sw	a5,16(sp)
80004b74:	00012a23          	sw	zero,20(sp)
80004b78:	d91ff06f          	j	80004908 <z_cbvprintf_impl+0x11c>
					value->uint = va_arg(ap, unsigned long);
80004b7c:	00c12783          	lw	a5,12(sp)
80004b80:	00478713          	addi	a4,a5,4
80004b84:	00e12623          	sw	a4,12(sp)
80004b88:	0007a783          	lw	a5,0(a5)
80004b8c:	00f12823          	sw	a5,16(sp)
80004b90:	00012a23          	sw	zero,20(sp)
				break;
80004b94:	fc9ff06f          	j	80004b5c <z_cbvprintf_impl+0x370>
					(uint_value_type)va_arg(ap,
80004b98:	00c12783          	lw	a5,12(sp)
80004b9c:	00778793          	addi	a5,a5,7
80004ba0:	ff87f793          	andi	a5,a5,-8
80004ba4:	00878713          	addi	a4,a5,8
80004ba8:	00e12623          	sw	a4,12(sp)
80004bac:	0007a703          	lw	a4,0(a5)
80004bb0:	0047a783          	lw	a5,4(a5)
				value->uint =
80004bb4:	00e12823          	sw	a4,16(sp)
80004bb8:	00f12a23          	sw	a5,20(sp)
				break;
80004bbc:	fa1ff06f          	j	80004b5c <z_cbvprintf_impl+0x370>
				value->uint = (unsigned char)value->uint;
80004bc0:	01014783          	lbu	a5,16(sp)
80004bc4:	00f12823          	sw	a5,16(sp)
80004bc8:	00012a23          	sw	zero,20(sp)
80004bcc:	d3dff06f          	j	80004908 <z_cbvprintf_impl+0x11c>
			if (length_mod == LENGTH_UPPER_L) {
80004bd0:	00800793          	li	a5,8
80004bd4:	02f68663          	beq	a3,a5,80004c00 <z_cbvprintf_impl+0x414>
				value->dbl = va_arg(ap, double);
80004bd8:	00c12783          	lw	a5,12(sp)
80004bdc:	00778793          	addi	a5,a5,7
80004be0:	ff87f793          	andi	a5,a5,-8
80004be4:	00878713          	addi	a4,a5,8
80004be8:	00e12623          	sw	a4,12(sp)
80004bec:	0007a703          	lw	a4,0(a5)
80004bf0:	0047a783          	lw	a5,4(a5)
80004bf4:	00e12823          	sw	a4,16(sp)
80004bf8:	00f12a23          	sw	a5,20(sp)
80004bfc:	d0dff06f          	j	80004908 <z_cbvprintf_impl+0x11c>
				value->ldbl = va_arg(ap, long double);
80004c00:	00c12783          	lw	a5,12(sp)
80004c04:	00478713          	addi	a4,a5,4
80004c08:	00e12623          	sw	a4,12(sp)
80004c0c:	0007a783          	lw	a5,0(a5)
80004c10:	0007a603          	lw	a2,0(a5)
80004c14:	0047a683          	lw	a3,4(a5)
80004c18:	0087a703          	lw	a4,8(a5)
80004c1c:	00c7a783          	lw	a5,12(a5)
80004c20:	00c12823          	sw	a2,16(sp)
80004c24:	00d12a23          	sw	a3,20(sp)
80004c28:	00e12c23          	sw	a4,24(sp)
80004c2c:	00f12e23          	sw	a5,28(sp)
80004c30:	cd9ff06f          	j	80004908 <z_cbvprintf_impl+0x11c>
			value->ptr = va_arg(ap, void *);
80004c34:	00c12783          	lw	a5,12(sp)
80004c38:	00478713          	addi	a4,a5,4
80004c3c:	00e12623          	sw	a4,12(sp)
80004c40:	0007a783          	lw	a5,0(a5)
80004c44:	00f12823          	sw	a5,16(sp)
80004c48:	cc1ff06f          	j	80004908 <z_cbvprintf_impl+0x11c>
			OUTS(sp, fp);
80004c4c:	00098693          	mv	a3,s3
80004c50:	000a8613          	mv	a2,s5
80004c54:	00048593          	mv	a1,s1
80004c58:	00090513          	mv	a0,s2
80004c5c:	b0dff0ef          	jal	ra,80004768 <outs>
80004c60:	34054c63          	bltz	a0,80004fb8 <z_cbvprintf_impl+0x7cc>
80004c64:	00a40433          	add	s0,s0,a0
		fp = extract_conversion(conv, sp);
80004c68:	00098a93          	mv	s5,s3
			continue;
80004c6c:	bc5ff06f          	j	80004830 <z_cbvprintf_impl+0x44>
			OUTC('%');
80004c70:	00048593          	mv	a1,s1
80004c74:	02500513          	li	a0,37
80004c78:	000900e7          	jalr	s2
80004c7c:	32054e63          	bltz	a0,80004fb8 <z_cbvprintf_impl+0x7cc>
80004c80:	00140413          	addi	s0,s0,1
		char sign = 0;
80004c84:	00000b93          	li	s7,0
		const char *bpe = buf + sizeof(buf);
80004c88:	04e10b13          	addi	s6,sp,78
		const char *bps = NULL;
80004c8c:	00000a93          	li	s5,0
			break;
80004c90:	1740006f          	j	80004e04 <z_cbvprintf_impl+0x618>
			bps = (const char *)value->ptr;
80004c94:	01012a83          	lw	s5,16(sp)
			if (precision >= 0) {
80004c98:	000b4e63          	bltz	s6,80004cb4 <z_cbvprintf_impl+0x4c8>
				len = strnlen(bps, precision);
80004c9c:	000b0593          	mv	a1,s6
80004ca0:	000a8513          	mv	a0,s5
80004ca4:	969fc0ef          	jal	ra,8000160c <strnlen>
			bpe = bps + len;
80004ca8:	00aa8b33          	add	s6,s5,a0
		char sign = 0;
80004cac:	00000b93          	li	s7,0
			break;
80004cb0:	1540006f          	j	80004e04 <z_cbvprintf_impl+0x618>
				len = strlen(bps);
80004cb4:	000a8513          	mv	a0,s5
80004cb8:	ec8fc0ef          	jal	ra,80001380 <strlen>
80004cbc:	fedff06f          	j	80004ca8 <z_cbvprintf_impl+0x4bc>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
80004cc0:	01012783          	lw	a5,16(sp)
80004cc4:	02f10c23          	sb	a5,56(sp)
		char sign = 0;
80004cc8:	00000b93          	li	s7,0
			bpe = buf + 1;
80004ccc:	03910b13          	addi	s6,sp,57
			bps = buf;
80004cd0:	03810a93          	addi	s5,sp,56
			break;
80004cd4:	1300006f          	j	80004e04 <z_cbvprintf_impl+0x618>
			if (conv->flag_plus) {
80004cd8:	02015783          	lhu	a5,32(sp)
80004cdc:	0087f713          	andi	a4,a5,8
80004ce0:	00071a63          	bnez	a4,80004cf4 <z_cbvprintf_impl+0x508>
			} else if (conv->flag_space) {
80004ce4:	0107f793          	andi	a5,a5,16
80004ce8:	02079463          	bnez	a5,80004d10 <z_cbvprintf_impl+0x524>
		char sign = 0;
80004cec:	00000b93          	li	s7,0
80004cf0:	0080006f          	j	80004cf8 <z_cbvprintf_impl+0x50c>
				sign = '+';
80004cf4:	02b00b93          	li	s7,43
			sint = value->sint;
80004cf8:	01012703          	lw	a4,16(sp)
80004cfc:	01412783          	lw	a5,20(sp)
			if (sint < 0) {
80004d00:	0007cc63          	bltz	a5,80004d18 <z_cbvprintf_impl+0x52c>
				value->uint = (uint_value_type)sint;
80004d04:	00e12823          	sw	a4,16(sp)
80004d08:	00f12a23          	sw	a5,20(sp)
80004d0c:	0300006f          	j	80004d3c <z_cbvprintf_impl+0x550>
				sign = ' ';
80004d10:	02000b93          	li	s7,32
80004d14:	fe5ff06f          	j	80004cf8 <z_cbvprintf_impl+0x50c>
				value->uint = (uint_value_type)-sint;
80004d18:	40e006b3          	neg	a3,a4
80004d1c:	00e03733          	snez	a4,a4
80004d20:	40f007b3          	neg	a5,a5
80004d24:	40e787b3          	sub	a5,a5,a4
80004d28:	00d12823          	sw	a3,16(sp)
80004d2c:	00f12a23          	sw	a5,20(sp)
				sign = '-';
80004d30:	02d00b93          	li	s7,45
80004d34:	0080006f          	j	80004d3c <z_cbvprintf_impl+0x550>
		switch (conv->specifier) {
80004d38:	00000b93          	li	s7,0
			bps = encode_uint(value->uint, conv, buf, bpe);
80004d3c:	04e10713          	addi	a4,sp,78
80004d40:	03810693          	addi	a3,sp,56
80004d44:	02010613          	addi	a2,sp,32
80004d48:	01012503          	lw	a0,16(sp)
80004d4c:	01412583          	lw	a1,20(sp)
80004d50:	835ff0ef          	jal	ra,80004584 <encode_uint>
80004d54:	00050a93          	mv	s5,a0
			if (precision >= 0) {
80004d58:	120b4663          	bltz	s6,80004e84 <z_cbvprintf_impl+0x698>
				size_t len = bpe - bps;
80004d5c:	04e10793          	addi	a5,sp,78
80004d60:	415787b3          	sub	a5,a5,s5
				conv->flag_zero = false;
80004d64:	02015703          	lhu	a4,32(sp)
80004d68:	fbf77713          	andi	a4,a4,-65
80004d6c:	02e11023          	sh	a4,32(sp)
				if (len < (size_t)precision) {
80004d70:	1167fe63          	bgeu	a5,s6,80004e8c <z_cbvprintf_impl+0x6a0>
					conv->pad0_value = precision - (int)len;
80004d74:	40fb07b3          	sub	a5,s6,a5
80004d78:	02f12223          	sw	a5,36(sp)
		const char *bpe = buf + sizeof(buf);
80004d7c:	04e10b13          	addi	s6,sp,78
80004d80:	0840006f          	j	80004e04 <z_cbvprintf_impl+0x618>
			if (value->ptr != NULL) {
80004d84:	01012503          	lw	a0,16(sp)
80004d88:	00051e63          	bnez	a0,80004da4 <z_cbvprintf_impl+0x5b8>
		char sign = 0;
80004d8c:	00000b93          	li	s7,0
			bpe = bps + 5;
80004d90:	80008b37          	lui	s6,0x80008
80004d94:	371b0b13          	addi	s6,s6,881 # 80008371 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008372>
			bps = "(nil)";
80004d98:	80008ab7          	lui	s5,0x80008
80004d9c:	36ca8a93          	addi	s5,s5,876 # 8000836c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000836d>
80004da0:	0640006f          	j	80004e04 <z_cbvprintf_impl+0x618>
				bps = encode_uint((uintptr_t)value->ptr, conv,
80004da4:	04e10713          	addi	a4,sp,78
80004da8:	03810693          	addi	a3,sp,56
80004dac:	02010613          	addi	a2,sp,32
80004db0:	00000593          	li	a1,0
80004db4:	fd0ff0ef          	jal	ra,80004584 <encode_uint>
80004db8:	00050a93          	mv	s5,a0
				conv->altform_0c = true;
80004dbc:	02214783          	lbu	a5,34(sp)
80004dc0:	0107e793          	ori	a5,a5,16
80004dc4:	02f10123          	sb	a5,34(sp)
				conv->specifier = 'x';
80004dc8:	07800793          	li	a5,120
80004dcc:	02f101a3          	sb	a5,35(sp)
		char sign = 0;
80004dd0:	00000b93          	li	s7,0
				goto prec_int_pad0;
80004dd4:	f85ff06f          	j	80004d58 <z_cbvprintf_impl+0x56c>
				store_count(conv, value->ptr, count);
80004dd8:	00040613          	mv	a2,s0
80004ddc:	01012583          	lw	a1,16(sp)
80004de0:	02010513          	addi	a0,sp,32
80004de4:	905ff0ef          	jal	ra,800046e8 <store_count>
		char sign = 0;
80004de8:	00000b93          	li	s7,0
		const char *bpe = buf + sizeof(buf);
80004dec:	04e10b13          	addi	s6,sp,78
		const char *bps = NULL;
80004df0:	00000a93          	li	s5,0
			break;
80004df4:	0100006f          	j	80004e04 <z_cbvprintf_impl+0x618>
		switch (conv->specifier) {
80004df8:	00000b93          	li	s7,0
80004dfc:	04e10b13          	addi	s6,sp,78
80004e00:	00000a93          	li	s5,0
		if (bps == NULL) {
80004e04:	1a0a8463          	beqz	s5,80004fac <z_cbvprintf_impl+0x7c0>
		size_t nj_len = (bpe - bps);
80004e08:	415b06b3          	sub	a3,s6,s5
		if (sign != 0) {
80004e0c:	000b8463          	beqz	s7,80004e14 <z_cbvprintf_impl+0x628>
			nj_len += 1U;
80004e10:	00168693          	addi	a3,a3,1
		if (conv->altform_0c) {
80004e14:	02214783          	lbu	a5,34(sp)
80004e18:	0107f713          	andi	a4,a5,16
80004e1c:	06070c63          	beqz	a4,80004e94 <z_cbvprintf_impl+0x6a8>
			nj_len += 2U;
80004e20:	00268693          	addi	a3,a3,2
		nj_len += conv->pad0_value;
80004e24:	02412703          	lw	a4,36(sp)
80004e28:	00d70733          	add	a4,a4,a3
		if (conv->pad_fp) {
80004e2c:	0407f793          	andi	a5,a5,64
80004e30:	00078663          	beqz	a5,80004e3c <z_cbvprintf_impl+0x650>
			nj_len += conv->pad0_pre_exp;
80004e34:	02812783          	lw	a5,40(sp)
80004e38:	00f70733          	add	a4,a4,a5
		if (width > 0) {
80004e3c:	09405e63          	blez	s4,80004ed8 <z_cbvprintf_impl+0x6ec>
			width -= (int)nj_len;
80004e40:	40ea0a33          	sub	s4,s4,a4
			if (!conv->flag_dash) {
80004e44:	02012783          	lw	a5,32(sp)
80004e48:	0027d793          	srli	a5,a5,0x2
80004e4c:	0017f793          	andi	a5,a5,1
80004e50:	08079463          	bnez	a5,80004ed8 <z_cbvprintf_impl+0x6ec>
				if (conv->flag_zero) {
80004e54:	02015783          	lhu	a5,32(sp)
80004e58:	0407f793          	andi	a5,a5,64
80004e5c:	04078463          	beqz	a5,80004ea4 <z_cbvprintf_impl+0x6b8>
					if (sign != 0) {
80004e60:	040b8663          	beqz	s7,80004eac <z_cbvprintf_impl+0x6c0>
						OUTC(sign);
80004e64:	00048593          	mv	a1,s1
80004e68:	000b8513          	mv	a0,s7
80004e6c:	000900e7          	jalr	s2
80004e70:	14054463          	bltz	a0,80004fb8 <z_cbvprintf_impl+0x7cc>
80004e74:	00140413          	addi	s0,s0,1
					pad = '0';
80004e78:	03000c13          	li	s8,48
						sign = 0;
80004e7c:	00000b93          	li	s7,0
80004e80:	0300006f          	j	80004eb0 <z_cbvprintf_impl+0x6c4>
		const char *bpe = buf + sizeof(buf);
80004e84:	04e10b13          	addi	s6,sp,78
80004e88:	f7dff06f          	j	80004e04 <z_cbvprintf_impl+0x618>
80004e8c:	04e10b13          	addi	s6,sp,78
80004e90:	f75ff06f          	j	80004e04 <z_cbvprintf_impl+0x618>
		} else if (conv->altform_0) {
80004e94:	0087f713          	andi	a4,a5,8
80004e98:	f80706e3          	beqz	a4,80004e24 <z_cbvprintf_impl+0x638>
			nj_len += 1U;
80004e9c:	00168693          	addi	a3,a3,1
80004ea0:	f85ff06f          	j	80004e24 <z_cbvprintf_impl+0x638>
				char pad = ' ';
80004ea4:	02000c13          	li	s8,32
80004ea8:	0080006f          	j	80004eb0 <z_cbvprintf_impl+0x6c4>
					pad = '0';
80004eac:	03000c13          	li	s8,48
80004eb0:	000a0793          	mv	a5,s4
				while (width-- > 0) {
80004eb4:	fff78a13          	addi	s4,a5,-1
80004eb8:	02f05063          	blez	a5,80004ed8 <z_cbvprintf_impl+0x6ec>
					OUTC(pad);
80004ebc:	00048593          	mv	a1,s1
80004ec0:	000c0513          	mv	a0,s8
80004ec4:	000900e7          	jalr	s2
80004ec8:	0e054863          	bltz	a0,80004fb8 <z_cbvprintf_impl+0x7cc>
80004ecc:	00140413          	addi	s0,s0,1
				while (width-- > 0) {
80004ed0:	000a0793          	mv	a5,s4
80004ed4:	fe1ff06f          	j	80004eb4 <z_cbvprintf_impl+0x6c8>
		if (sign != 0) {
80004ed8:	000b8c63          	beqz	s7,80004ef0 <z_cbvprintf_impl+0x704>
			OUTC(sign);
80004edc:	00048593          	mv	a1,s1
80004ee0:	000b8513          	mv	a0,s7
80004ee4:	000900e7          	jalr	s2
80004ee8:	0c054863          	bltz	a0,80004fb8 <z_cbvprintf_impl+0x7cc>
80004eec:	00140413          	addi	s0,s0,1
			if (conv->altform_0c | conv->altform_0) {
80004ef0:	02012783          	lw	a5,32(sp)
80004ef4:	0147d713          	srli	a4,a5,0x14
80004ef8:	00177713          	andi	a4,a4,1
80004efc:	0137d793          	srli	a5,a5,0x13
80004f00:	0017f793          	andi	a5,a5,1
80004f04:	00f767b3          	or	a5,a4,a5
80004f08:	00078c63          	beqz	a5,80004f20 <z_cbvprintf_impl+0x734>
				OUTC('0');
80004f0c:	00048593          	mv	a1,s1
80004f10:	03000513          	li	a0,48
80004f14:	000900e7          	jalr	s2
80004f18:	0a054063          	bltz	a0,80004fb8 <z_cbvprintf_impl+0x7cc>
80004f1c:	00140413          	addi	s0,s0,1
			if (conv->altform_0c) {
80004f20:	02214783          	lbu	a5,34(sp)
80004f24:	0107f793          	andi	a5,a5,16
80004f28:	00078c63          	beqz	a5,80004f40 <z_cbvprintf_impl+0x754>
				OUTC(conv->specifier);
80004f2c:	00048593          	mv	a1,s1
80004f30:	02314503          	lbu	a0,35(sp)
80004f34:	000900e7          	jalr	s2
80004f38:	08054063          	bltz	a0,80004fb8 <z_cbvprintf_impl+0x7cc>
80004f3c:	00140413          	addi	s0,s0,1
			pad_len = conv->pad0_value;
80004f40:	02412783          	lw	a5,36(sp)
			while (pad_len-- > 0) {
80004f44:	fff78b93          	addi	s7,a5,-1
80004f48:	02f05063          	blez	a5,80004f68 <z_cbvprintf_impl+0x77c>
				OUTC('0');
80004f4c:	00048593          	mv	a1,s1
80004f50:	03000513          	li	a0,48
80004f54:	000900e7          	jalr	s2
80004f58:	06054063          	bltz	a0,80004fb8 <z_cbvprintf_impl+0x7cc>
80004f5c:	00140413          	addi	s0,s0,1
			while (pad_len-- > 0) {
80004f60:	000b8793          	mv	a5,s7
80004f64:	fe1ff06f          	j	80004f44 <z_cbvprintf_impl+0x758>
			OUTS(bps, bpe);
80004f68:	000b0693          	mv	a3,s6
80004f6c:	000a8613          	mv	a2,s5
80004f70:	00048593          	mv	a1,s1
80004f74:	00090513          	mv	a0,s2
80004f78:	ff0ff0ef          	jal	ra,80004768 <outs>
80004f7c:	02054e63          	bltz	a0,80004fb8 <z_cbvprintf_impl+0x7cc>
80004f80:	00a40433          	add	s0,s0,a0
		while (width > 0) {
80004f84:	03405063          	blez	s4,80004fa4 <z_cbvprintf_impl+0x7b8>
			OUTC(' ');
80004f88:	00048593          	mv	a1,s1
80004f8c:	02000513          	li	a0,32
80004f90:	000900e7          	jalr	s2
80004f94:	02054263          	bltz	a0,80004fb8 <z_cbvprintf_impl+0x7cc>
80004f98:	00140413          	addi	s0,s0,1
			--width;
80004f9c:	fffa0a13          	addi	s4,s4,-1
80004fa0:	fe5ff06f          	j	80004f84 <z_cbvprintf_impl+0x798>
		fp = extract_conversion(conv, sp);
80004fa4:	00098a93          	mv	s5,s3
80004fa8:	889ff06f          	j	80004830 <z_cbvprintf_impl+0x44>
80004fac:	00098a93          	mv	s5,s3
80004fb0:	881ff06f          	j	80004830 <z_cbvprintf_impl+0x44>
	return count;
80004fb4:	00040513          	mv	a0,s0
}
80004fb8:	07c12083          	lw	ra,124(sp)
80004fbc:	07812403          	lw	s0,120(sp)
80004fc0:	07412483          	lw	s1,116(sp)
80004fc4:	07012903          	lw	s2,112(sp)
80004fc8:	06c12983          	lw	s3,108(sp)
80004fcc:	06812a03          	lw	s4,104(sp)
80004fd0:	06412a83          	lw	s5,100(sp)
80004fd4:	06012b03          	lw	s6,96(sp)
80004fd8:	05c12b83          	lw	s7,92(sp)
80004fdc:	05812c03          	lw	s8,88(sp)
80004fe0:	08010113          	addi	sp,sp,128
80004fe4:	00008067          	ret

80004fe8 <_ConfigAbsSyms>:
80004fe8:	00308013          	addi	zero,ra,3
GEN_ABS_SYM_END
80004fec:	00008067          	ret

80004ff0 <arch_cpu_idle>:
80004ff0:	00308013          	addi	zero,ra,3
{
80004ff4:	ff010113          	addi	sp,sp,-16
80004ff8:	00112623          	sw	ra,12(sp)
	sys_trace_idle();
80004ffc:	09c000ef          	jal	ra,80005098 <sys_trace_idle>
 * use atomic instruction csrs to unlock global irq
 * csrs: atomic set bits in CSR register
 */
static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	__asm__ volatile ("csrs mstatus, %0"
80005000:	00800793          	li	a5,8
80005004:	3007a073          	csrs	mstatus,a5
	__asm__ volatile("wfi");
80005008:	10500073          	wfi
}
8000500c:	00c12083          	lw	ra,12(sp)
80005010:	01010113          	addi	sp,sp,16
80005014:	00008067          	ret

80005018 <arch_irq_enable>:
80005018:	00308013          	addi	zero,ra,3
{
#if defined(CONFIG_3RD_LEVEL_INTERRUPTS)
	return ((irq >> 16) & 0xFF) != 0 ? 3 :
		(((irq >> 8) & 0xFF) == 0 ? 1 : 2);
#elif defined(CONFIG_2ND_LEVEL_INTERRUPTS)
	return ((irq >> 8) & 0xFF) == 0 ? 1 : 2;
8000501c:	00855793          	srli	a5,a0,0x8
80005020:	0ff7f713          	zext.b	a4,a5
80005024:	00071a63          	bnez	a4,80005038 <arch_irq_enable+0x20>
			  : "r" (1 << irq));
80005028:	00100793          	li	a5,1
8000502c:	00a797b3          	sll	a5,a5,a0
	__asm__ volatile ("csrrs %0, mie, %1\n"
80005030:	3047a7f3          	csrrs	a5,mie,a5
80005034:	00008067          	ret
{
80005038:	ff010113          	addi	sp,sp,-16
8000503c:	00112623          	sw	ra,12(sp)
		riscv_plic_irq_enable(irq);
80005040:	fff78513          	addi	a0,a5,-1
80005044:	5ac000ef          	jal	ra,800055f0 <riscv_plic_irq_enable>
}
80005048:	00c12083          	lw	ra,12(sp)
8000504c:	01010113          	addi	sp,sp,16
80005050:	00008067          	ret

80005054 <z_riscv_irq_priority_set>:
80005054:	00308013          	addi	zero,ra,3
80005058:	00855513          	srli	a0,a0,0x8
8000505c:	0ff57793          	zext.b	a5,a0
80005060:	00079463          	bnez	a5,80005068 <z_riscv_irq_priority_set+0x14>
80005064:	00008067          	ret
{
80005068:	ff010113          	addi	sp,sp,-16
8000506c:	00112623          	sw	ra,12(sp)
		riscv_plic_set_priority(irq, prio);
80005070:	fff50513          	addi	a0,a0,-1
80005074:	5b4000ef          	jal	ra,80005628 <riscv_plic_set_priority>
}
80005078:	00c12083          	lw	ra,12(sp)
8000507c:	01010113          	addi	sp,sp,16
80005080:	00008067          	ret

80005084 <soc_interrupt_init>:
80005084:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005088:	300477f3          	csrrci	a5,mstatus,8
	__asm__ volatile ("csrwi mie, 0\n"
8000508c:	30405073          	csrwi	mie,0
80005090:	34405073          	csrwi	mip,0
}
80005094:	00008067          	ret

80005098 <sys_trace_idle>:
80005098:	00308013          	addi	zero,ra,3
void sys_trace_idle(void) {}
8000509c:	00008067          	ret

800050a0 <bad_stack_pointer>:
800050a0:	00308013          	addi	zero,ra,3
}
800050a4:	00000513          	li	a0,0
800050a8:	00008067          	ret

800050ac <z_riscv_fatal_error>:
800050ac:	00308013          	addi	zero,ra,3
{
800050b0:	ff010113          	addi	sp,sp,-16
800050b4:	00112623          	sw	ra,12(sp)
	z_fatal_error(reason, esf);
800050b8:	5e9000ef          	jal	ra,80005ea0 <z_fatal_error>

800050bc <_Fault>:
800050bc:	00308013          	addi	zero,ra,3
{
800050c0:	ff010113          	addi	sp,sp,-16
800050c4:	00112623          	sw	ra,12(sp)
800050c8:	00812423          	sw	s0,8(sp)
800050cc:	00050413          	mv	s0,a0
	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
800050d0:	342027f3          	csrr	a5,mcause
	__asm__ volatile("csrr %0, mtval" : "=r" (mtval));
800050d4:	343027f3          	csrr	a5,mtval
	if (bad_stack_pointer(esf)) {
800050d8:	fc9ff0ef          	jal	ra,800050a0 <bad_stack_pointer>
800050dc:	00050463          	beqz	a0,800050e4 <_Fault+0x28>
		reason = K_ERR_STACK_CHK_FAIL;
800050e0:	00200513          	li	a0,2
	z_riscv_fatal_error(reason, esf);
800050e4:	00040593          	mv	a1,s0
800050e8:	fc5ff0ef          	jal	ra,800050ac <z_riscv_fatal_error>

800050ec <z_irq_spurious>:
800050ec:	00308013          	addi	zero,ra,3
{
800050f0:	ff010113          	addi	sp,sp,-16
800050f4:	00112623          	sw	ra,12(sp)
	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
800050f8:	342027f3          	csrr	a5,mcause
	z_riscv_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
800050fc:	00000593          	li	a1,0
80005100:	00100513          	li	a0,1
80005104:	fa9ff0ef          	jal	ra,800050ac <z_riscv_fatal_error>

80005108 <_PrepC>:
80005108:	00308013          	addi	zero,ra,3
{
8000510c:	ff010113          	addi	sp,sp,-16
80005110:	00112623          	sw	ra,12(sp)
	z_bss_zero();
80005114:	7a5000ef          	jal	ra,800060b8 <z_bss_zero>
	soc_interrupt_init();
80005118:	f6dff0ef          	jal	ra,80005084 <soc_interrupt_init>
	z_cstart();
8000511c:	108010ef          	jal	ra,80006224 <z_cstart>

80005120 <__initialize>:
/*
 * Remainder of asm-land initialization code before we can jump into
 * the C domain
 */
SECTION_FUNC(TEXT, __initialize)
	csrr a0, mhartid
80005120:	f1402573          	csrr	a0,mhartid
	beqz a0, boot_first_core
80005124:	00050a63          	beqz	a0,80005138 <boot_first_core>

	li t0, CONFIG_MP_NUM_CPUS
80005128:	00100293          	li	t0,1
	blt a0, t0, boot_secondary_core
8000512c:	04554263          	blt	a0,t0,80005170 <boot_secondary_core>

80005130 <loop_unconfigured_cores>:

loop_unconfigured_cores:
	wfi
80005130:	10500073          	wfi
	j loop_unconfigured_cores
80005134:	ffdff06f          	j	80005130 <loop_unconfigured_cores>

80005138 <boot_first_core>:
	fscsr zero
#endif

#ifdef CONFIG_INIT_STACKS
	/* Pre-populate all bytes in z_interrupt_stacks with 0xAA */
	la t0, z_interrupt_stacks
80005138:	00003297          	auipc	t0,0x3
8000513c:	5e828293          	addi	t0,t0,1512 # 80008720 <z_interrupt_stacks>
	li t1, __z_interrupt_stack_SIZEOF
80005140:	00001337          	lui	t1,0x1
	add t1, t1, t0
80005144:	00530333          	add	t1,t1,t0

	/* Populate z_interrupt_stacks with 0xaaaaaaaa */
	li t2, 0xaaaaaaaa
80005148:	aaaab3b7          	lui	t2,0xaaaab
8000514c:	aaa38393          	addi	t2,t2,-1366 # aaaaaaaa <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xaaaaaaab>

80005150 <aa_loop>:
aa_loop:
	sw t2, 0x00(t0)
80005150:	0072a023          	sw	t2,0(t0)
	addi t0, t0, 4
80005154:	00428293          	addi	t0,t0,4
	blt t0, t1, aa_loop
80005158:	fe62cce3          	blt	t0,t1,80005150 <aa_loop>

	/*
	 * Initially, setup stack pointer to
	 * z_interrupt_stacks + __z_interrupt_stack_SIZEOF
	 */
	la sp, z_interrupt_stacks
8000515c:	00003117          	auipc	sp,0x3
80005160:	5c410113          	addi	sp,sp,1476 # 80008720 <z_interrupt_stacks>
	li t0, __z_interrupt_stack_SIZEOF
80005164:	000012b7          	lui	t0,0x1
	add sp, sp, t0
80005168:	00510133          	add	sp,sp,t0

	/*
	 * Jump into C domain. _PrepC zeroes BSS, copies rw data into RAM,
	 * and then enters kernel z_cstart
	 */
	call _PrepC
8000516c:	f9dff0ef          	jal	ra,80005108 <_PrepC>

80005170 <boot_secondary_core>:

boot_secondary_core:
	la t0, riscv_cpu_wake_flag
80005170:	00003297          	auipc	t0,0x3
80005174:	45428293          	addi	t0,t0,1108 # 800085c4 <riscv_cpu_wake_flag>
	lr t0, 0(t0)
80005178:	0002a283          	lw	t0,0(t0)
	bne a0, t0, boot_secondary_core
8000517c:	fe551ae3          	bne	a0,t0,80005170 <boot_secondary_core>

	/* Set up stack */
	la t0, riscv_cpu_sp
80005180:	00003297          	auipc	t0,0x3
80005184:	44028293          	addi	t0,t0,1088 # 800085c0 <riscv_cpu_sp>
	lr sp, 0(t0)
80005188:	0002a103          	lw	sp,0(t0)

	la t0, riscv_cpu_wake_flag
8000518c:	00003297          	auipc	t0,0x3
80005190:	43828293          	addi	t0,t0,1080 # 800085c4 <riscv_cpu_wake_flag>
	sr zero, 0(t0)
80005194:	0002a023          	sw	zero,0(t0)
	j z_riscv_secondary_cpu_init
80005198:	07c0006f          	j	80005214 <z_riscv_secondary_cpu_init>

8000519c <z_riscv_switch>:

/* void z_riscv_switch(k_thread_t *switch_to, k_thread_t *switch_from) */
SECTION_FUNC(TEXT, z_riscv_switch)

	/* Save the old thread's callee-saved registers */
	DO_CALLEE_SAVED(sr, a1)
8000519c:	0215aa23          	sw	ra,52(a1)
800051a0:	0285ac23          	sw	s0,56(a1)
800051a4:	0295ae23          	sw	s1,60(a1)
800051a8:	0525a023          	sw	s2,64(a1)
800051ac:	0535a223          	sw	s3,68(a1)
800051b0:	0545a423          	sw	s4,72(a1)
800051b4:	0555a623          	sw	s5,76(a1)
800051b8:	0565a823          	sw	s6,80(a1)
800051bc:	0575aa23          	sw	s7,84(a1)
800051c0:	0585ac23          	sw	s8,88(a1)
800051c4:	0595ae23          	sw	s9,92(a1)
800051c8:	07a5a023          	sw	s10,96(a1)
800051cc:	07b5a223          	sw	s11,100(a1)
	DO_FP_CALLEE_SAVED(fsr, a1)
skip_store_fp_callee_saved:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Save the old thread's stack pointer */
	sr sp, _thread_offset_to_sp(a1)
800051d0:	0225a823          	sw	sp,48(a1)

	/* Set thread->switch_handle = thread to mark completion */
	sr a1, ___thread_t_switch_handle_OFFSET(a1)
800051d4:	06b5ae23          	sw	a1,124(a1)

	/* Get the new thread's stack pointer */
	lr sp, _thread_offset_to_sp(a0)
800051d8:	03052103          	lw	sp,48(a0)
	call z_thread_mark_switched_in
	mv a0, s0
#endif

	/* Restore the new thread's callee-saved registers */
	DO_CALLEE_SAVED(lr, a0)
800051dc:	03452083          	lw	ra,52(a0)
800051e0:	03852403          	lw	s0,56(a0)
800051e4:	03c52483          	lw	s1,60(a0)
800051e8:	04052903          	lw	s2,64(a0)
800051ec:	04452983          	lw	s3,68(a0)
800051f0:	04852a03          	lw	s4,72(a0)
800051f4:	04c52a83          	lw	s5,76(a0)
800051f8:	05052b03          	lw	s6,80(a0)
800051fc:	05452b83          	lw	s7,84(a0)
80005200:	05852c03          	lw	s8,88(a0)
80005204:	05c52c83          	lw	s9,92(a0)
80005208:	06052d03          	lw	s10,96(a0)
8000520c:	06452d83          	lw	s11,100(a0)
	csrc mstatus, t1
1:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Return to arch_switch() or _irq_wrapper() */
	ret
80005210:	00008067          	ret

80005214 <z_riscv_secondary_cpu_init>:
80005214:	00308013          	addi	zero,ra,3
{
80005218:	ff010113          	addi	sp,sp,-16
8000521c:	00112623          	sw	ra,12(sp)
80005220:	00812423          	sw	s0,8(sp)
80005224:	00050413          	mv	s0,a0
	soc_interrupt_init();
80005228:	e5dff0ef          	jal	ra,80005084 <soc_interrupt_init>
	riscv_cpu_init[cpu_num].fn(riscv_cpu_init[cpu_num].arg);
8000522c:	800087b7          	lui	a5,0x80008
80005230:	00341413          	slli	s0,s0,0x3
80005234:	5c878793          	addi	a5,a5,1480 # 800085c8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085c9>
80005238:	008787b3          	add	a5,a5,s0
8000523c:	0007a703          	lw	a4,0(a5)
80005240:	0047a503          	lw	a0,4(a5)
80005244:	000700e7          	jalr	a4

80005248 <arch_new_thread>:
80005248:	00308013          	addi	zero,ra,3
	stack_init = (struct __esf *)Z_STACK_PTR_ALIGN(
8000524c:	fb060613          	addi	a2,a2,-80
 * @param ptr Proposed stack pointer address
 * @return Properly aligned stack pointer address
 */
static inline char *z_stack_ptr_align(char *ptr)
{
	return (char *)ROUND_DOWN(ptr, ARCH_STACK_PTR_ALIGN);
80005250:	ff067613          	andi	a2,a2,-16
	stack_init->a0 = (unsigned long)entry;
80005254:	02d62023          	sw	a3,32(a2)
	stack_init->a1 = (unsigned long)p1;
80005258:	02e62223          	sw	a4,36(a2)
	stack_init->a2 = (unsigned long)p2;
8000525c:	02f62423          	sw	a5,40(a2)
	stack_init->a3 = (unsigned long)p3;
80005260:	03062623          	sw	a6,44(a2)
	stack_init->mstatus = MSTATUS_DEF_RESTORE;
80005264:	000027b7          	lui	a5,0x2
80005268:	88078793          	addi	a5,a5,-1920 # 1880 <CONFIG_ISR_STACK_SIZE+0x880>
8000526c:	04f62223          	sw	a5,68(a2)
		stack_init->mepc = (unsigned long)z_thread_entry;
80005270:	800047b7          	lui	a5,0x80004
80005274:	e6878793          	addi	a5,a5,-408 # 80003e68 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003e69>
80005278:	04f62023          	sw	a5,64(a2)
	thread->callee_saved.sp = (unsigned long)stack_init;
8000527c:	02c52823          	sw	a2,48(a0)
	thread->callee_saved.ra = (unsigned long)z_riscv_thread_start;
80005280:	800007b7          	lui	a5,0x80000
80005284:	15c78793          	addi	a5,a5,348 # 8000015c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000015d>
80005288:	02f52a23          	sw	a5,52(a0)
	thread->switch_handle = thread;
8000528c:	06a52e23          	sw	a0,124(a0)
}
80005290:	00008067          	ret

80005294 <malloc_prepare>:
80005294:	00308013          	addi	zero,ra,3
}
80005298:	00000513          	li	a0,0
8000529c:	00008067          	ret

800052a0 <_stdout_hook_default>:
800052a0:	00308013          	addi	zero,ra,3
}
800052a4:	fff00513          	li	a0,-1
800052a8:	00008067          	ret

800052ac <_stdin_hook_default>:
800052ac:	00308013          	addi	zero,ra,3
}
800052b0:	00000513          	li	a0,0
800052b4:	00008067          	ret

800052b8 <__stdout_hook_install>:
800052b8:	00308013          	addi	zero,ra,3
	_stdout_hook = hook;
800052bc:	8000b7b7          	lui	a5,0x8000b
800052c0:	dca7a423          	sw	a0,-568(a5) # 8000adc8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000adc9>
}
800052c4:	00008067          	ret

800052c8 <z_impl_zephyr_read_stdin>:
800052c8:	00308013          	addi	zero,ra,3
{
800052cc:	fe010113          	addi	sp,sp,-32
800052d0:	00112e23          	sw	ra,28(sp)
800052d4:	00812c23          	sw	s0,24(sp)
800052d8:	00912a23          	sw	s1,20(sp)
800052dc:	01212823          	sw	s2,16(sp)
800052e0:	01312623          	sw	s3,12(sp)
800052e4:	00050993          	mv	s3,a0
800052e8:	00058913          	mv	s2,a1
	for (i = 0; i < nbytes; i++) {
800052ec:	00000413          	li	s0,0
800052f0:	0080006f          	j	800052f8 <z_impl_zephyr_read_stdin+0x30>
800052f4:	00140413          	addi	s0,s0,1
800052f8:	03245663          	bge	s0,s2,80005324 <z_impl_zephyr_read_stdin+0x5c>
		*(buf + i) = _stdin_hook();
800052fc:	008984b3          	add	s1,s3,s0
80005300:	8000b7b7          	lui	a5,0x8000b
80005304:	dc47a783          	lw	a5,-572(a5) # 8000adc4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000adc5>
80005308:	000780e7          	jalr	a5
8000530c:	00a48023          	sb	a0,0(s1)
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
80005310:	00a00793          	li	a5,10
80005314:	00f50663          	beq	a0,a5,80005320 <z_impl_zephyr_read_stdin+0x58>
80005318:	00d00793          	li	a5,13
8000531c:	fcf51ce3          	bne	a0,a5,800052f4 <z_impl_zephyr_read_stdin+0x2c>
			i++;
80005320:	00140413          	addi	s0,s0,1
}
80005324:	00040513          	mv	a0,s0
80005328:	01c12083          	lw	ra,28(sp)
8000532c:	01812403          	lw	s0,24(sp)
80005330:	01412483          	lw	s1,20(sp)
80005334:	01012903          	lw	s2,16(sp)
80005338:	00c12983          	lw	s3,12(sp)
8000533c:	02010113          	addi	sp,sp,32
80005340:	00008067          	ret

80005344 <z_impl_zephyr_write_stdout>:
80005344:	00308013          	addi	zero,ra,3
{
80005348:	fe010113          	addi	sp,sp,-32
8000534c:	00112e23          	sw	ra,28(sp)
80005350:	00812c23          	sw	s0,24(sp)
80005354:	00912a23          	sw	s1,20(sp)
80005358:	01212823          	sw	s2,16(sp)
8000535c:	01312623          	sw	s3,12(sp)
80005360:	00050993          	mv	s3,a0
80005364:	00058913          	mv	s2,a1
	for (i = 0; i < nbytes; i++) {
80005368:	00000413          	li	s0,0
8000536c:	0180006f          	j	80005384 <z_impl_zephyr_write_stdout+0x40>
		_stdout_hook(*(buf + i));
80005370:	8000b7b7          	lui	a5,0x8000b
80005374:	dc87a783          	lw	a5,-568(a5) # 8000adc8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000adc9>
80005378:	0004c503          	lbu	a0,0(s1)
8000537c:	000780e7          	jalr	a5
	for (i = 0; i < nbytes; i++) {
80005380:	00140413          	addi	s0,s0,1
80005384:	03245463          	bge	s0,s2,800053ac <z_impl_zephyr_write_stdout+0x68>
		if (*(buf + i) == '\n') {
80005388:	008984b3          	add	s1,s3,s0
8000538c:	0004c703          	lbu	a4,0(s1)
80005390:	00a00793          	li	a5,10
80005394:	fcf71ee3          	bne	a4,a5,80005370 <z_impl_zephyr_write_stdout+0x2c>
			_stdout_hook('\r');
80005398:	8000b7b7          	lui	a5,0x8000b
8000539c:	dc87a783          	lw	a5,-568(a5) # 8000adc8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000adc9>
800053a0:	00d00513          	li	a0,13
800053a4:	000780e7          	jalr	a5
800053a8:	fc9ff06f          	j	80005370 <z_impl_zephyr_write_stdout+0x2c>
}
800053ac:	00090513          	mv	a0,s2
800053b0:	01c12083          	lw	ra,28(sp)
800053b4:	01812403          	lw	s0,24(sp)
800053b8:	01412483          	lw	s1,20(sp)
800053bc:	01012903          	lw	s2,16(sp)
800053c0:	00c12983          	lw	s3,12(sp)
800053c4:	02010113          	addi	sp,sp,32
800053c8:	00008067          	ret

800053cc <_read>:
800053cc:	00308013          	addi	zero,ra,3
{
800053d0:	ff010113          	addi	sp,sp,-16
800053d4:	00112623          	sw	ra,12(sp)
800053d8:	00058513          	mv	a0,a1
800053dc:	00060593          	mv	a1,a2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
800053e0:	ee9ff0ef          	jal	ra,800052c8 <z_impl_zephyr_read_stdin>
}
800053e4:	00c12083          	lw	ra,12(sp)
800053e8:	01010113          	addi	sp,sp,16
800053ec:	00008067          	ret

800053f0 <_write>:
800053f0:	00308013          	addi	zero,ra,3
{
800053f4:	ff010113          	addi	sp,sp,-16
800053f8:	00112623          	sw	ra,12(sp)
800053fc:	00058513          	mv	a0,a1
80005400:	00060593          	mv	a1,a2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
80005404:	f41ff0ef          	jal	ra,80005344 <z_impl_zephyr_write_stdout>
}
80005408:	00c12083          	lw	ra,12(sp)
8000540c:	01010113          	addi	sp,sp,16
80005410:	00008067          	ret

80005414 <_close>:
80005414:	00308013          	addi	zero,ra,3
}
80005418:	fff00513          	li	a0,-1
8000541c:	00008067          	ret

80005420 <_lseek>:
80005420:	00308013          	addi	zero,ra,3
}
80005424:	00000513          	li	a0,0
80005428:	00008067          	ret

8000542c <_isatty>:
8000542c:	00308013          	addi	zero,ra,3
}
80005430:	00352513          	slti	a0,a0,3
80005434:	00008067          	ret

80005438 <_fstat>:
80005438:	00308013          	addi	zero,ra,3
	st->st_mode = S_IFCHR;
8000543c:	000027b7          	lui	a5,0x2
80005440:	00f5a223          	sw	a5,4(a1)
}
80005444:	00000513          	li	a0,0
80005448:	00008067          	ret

8000544c <_sbrk>:
8000544c:	00308013          	addi	zero,ra,3
{
80005450:	00050713          	mv	a4,a0
	ptr = ((char *)HEAP_BASE) + heap_sz;
80005454:	800087b7          	lui	a5,0x80008
80005458:	5d07a683          	lw	a3,1488(a5) # 800085d0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085d1>
8000545c:	85818793          	addi	a5,gp,-1960 # 8000ae18 <__data_region_end>
80005460:	00f68533          	add	a0,a3,a5
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
80005464:	00d70733          	add	a4,a4,a3
80005468:	c00006b7          	lui	a3,0xc0000
8000546c:	40f687b3          	sub	a5,a3,a5
80005470:	00f77863          	bgeu	a4,a5,80005480 <_sbrk+0x34>
		heap_sz += count;
80005474:	800087b7          	lui	a5,0x80008
80005478:	5ce7a823          	sw	a4,1488(a5) # 800085d0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085d1>
		ret = ptr;
8000547c:	00008067          	ret
		ret = (void *)-1;
80005480:	fff00513          	li	a0,-1
}
80005484:	00008067          	ret

80005488 <__retarget_lock_init_recursive>:
80005488:	00308013          	addi	zero,ra,3
{
8000548c:	ff010113          	addi	sp,sp,-16
80005490:	00112623          	sw	ra,12(sp)
80005494:	00812423          	sw	s0,8(sp)
80005498:	00050413          	mv	s0,a0
	*lock = malloc(sizeof(struct k_mutex));
8000549c:	01400513          	li	a0,20
800054a0:	d58fb0ef          	jal	ra,800009f8 <malloc>
800054a4:	00a42023          	sw	a0,0(s0)
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
800054a8:	0c0010ef          	jal	ra,80006568 <z_impl_k_mutex_init>
}
800054ac:	00c12083          	lw	ra,12(sp)
800054b0:	00812403          	lw	s0,8(sp)
800054b4:	01010113          	addi	sp,sp,16
800054b8:	00008067          	ret

800054bc <__retarget_lock_acquire_recursive>:
800054bc:	00308013          	addi	zero,ra,3
{
800054c0:	ff010113          	addi	sp,sp,-16
800054c4:	00112623          	sw	ra,12(sp)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
800054c8:	fff00593          	li	a1,-1
800054cc:	fff00613          	li	a2,-1
800054d0:	0b4010ef          	jal	ra,80006584 <z_impl_k_mutex_lock>
}
800054d4:	00c12083          	lw	ra,12(sp)
800054d8:	01010113          	addi	sp,sp,16
800054dc:	00008067          	ret

800054e0 <__retarget_lock_release_recursive>:
800054e0:	00308013          	addi	zero,ra,3
{
800054e4:	ff010113          	addi	sp,sp,-16
800054e8:	00112623          	sw	ra,12(sp)
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
800054ec:	218010ef          	jal	ra,80006704 <z_impl_k_mutex_unlock>
}
800054f0:	00c12083          	lw	ra,12(sp)
800054f4:	01010113          	addi	sp,sp,16
800054f8:	00008067          	ret

800054fc <plic_init>:
800054fc:	00308013          	addi	zero,ra,3
{
80005500:	ff010113          	addi	sp,sp,-16
80005504:	00112623          	sw	ra,12(sp)
	for (i = 0; i < PLIC_EN_SIZE; i++) {
80005508:	00000793          	li	a5,0
	volatile uint32_t *en = (volatile uint32_t *)PLIC_IRQ_EN;
8000550c:	0c002737          	lui	a4,0xc002
	for (i = 0; i < PLIC_EN_SIZE; i++) {
80005510:	0100006f          	j	80005520 <plic_init+0x24>
		*en = 0U;
80005514:	00072023          	sw	zero,0(a4) # c002000 <CONFIG_SRAM_SIZE+0xbf02000>
		en++;
80005518:	00470713          	addi	a4,a4,4
	for (i = 0; i < PLIC_EN_SIZE; i++) {
8000551c:	00178793          	addi	a5,a5,1
80005520:	00100693          	li	a3,1
80005524:	fef6d8e3          	bge	a3,a5,80005514 <plic_init+0x18>
	for (i = 0; i < PLIC_IRQS; i++) {
80005528:	00000793          	li	a5,0
	volatile uint32_t *prio = (volatile uint32_t *)PLIC_PRIO;
8000552c:	0c000737          	lui	a4,0xc000
80005530:	0100006f          	j	80005540 <plic_init+0x44>
		*prio = 0U;
80005534:	00072023          	sw	zero,0(a4) # c000000 <CONFIG_SRAM_SIZE+0xbf00000>
		prio++;
80005538:	00470713          	addi	a4,a4,4
	for (i = 0; i < PLIC_IRQS; i++) {
8000553c:	00178793          	addi	a5,a5,1
80005540:	03300693          	li	a3,51
80005544:	fef6d8e3          	bge	a3,a5,80005534 <plic_init+0x38>
	regs->threshold_prio = 0U;
80005548:	0c2007b7          	lui	a5,0xc200
8000554c:	0007a023          	sw	zero,0(a5) # c200000 <CONFIG_SRAM_SIZE+0xc100000>
	IRQ_CONNECT(RISCV_MACHINE_EXT_IRQ,
80005550:	00000613          	li	a2,0
80005554:	00000593          	li	a1,0
80005558:	00b00513          	li	a0,11
8000555c:	af9ff0ef          	jal	ra,80005054 <z_riscv_irq_priority_set>
	irq_enable(RISCV_MACHINE_EXT_IRQ);
80005560:	00b00513          	li	a0,11
80005564:	ab5ff0ef          	jal	ra,80005018 <arch_irq_enable>
}
80005568:	00000513          	li	a0,0
8000556c:	00c12083          	lw	ra,12(sp)
80005570:	01010113          	addi	sp,sp,16
80005574:	00008067          	ret

80005578 <plic_irq_handler>:
80005578:	00308013          	addi	zero,ra,3
{
8000557c:	ff010113          	addi	sp,sp,-16
80005580:	00112623          	sw	ra,12(sp)
80005584:	00812423          	sw	s0,8(sp)
	irq = regs->claim_complete;
80005588:	0c2007b7          	lui	a5,0xc200
8000558c:	0047a403          	lw	s0,4(a5) # c200004 <CONFIG_SRAM_SIZE+0xc100004>
	save_irq = irq;
80005590:	800087b7          	lui	a5,0x80008
80005594:	5c87aa23          	sw	s0,1492(a5) # 800085d4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085d5>
	if (irq == 0U || irq >= PLIC_IRQS)
80005598:	fff40713          	addi	a4,s0,-1
8000559c:	03200793          	li	a5,50
800055a0:	04e7e263          	bltu	a5,a4,800055e4 <plic_irq_handler+0x6c>
	irq += CONFIG_2ND_LVL_ISR_TBL_OFFSET;
800055a4:	00c40413          	addi	s0,s0,12
	ite->isr(ite->arg);
800055a8:	800087b7          	lui	a5,0x80008
800055ac:	00341413          	slli	s0,s0,0x3
800055b0:	da078793          	addi	a5,a5,-608 # 80007da0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007da1>
800055b4:	008787b3          	add	a5,a5,s0
800055b8:	0047a703          	lw	a4,4(a5)
800055bc:	0007a503          	lw	a0,0(a5)
800055c0:	000700e7          	jalr	a4
	regs->claim_complete = save_irq;
800055c4:	800087b7          	lui	a5,0x80008
800055c8:	5d47a703          	lw	a4,1492(a5) # 800085d4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085d5>
800055cc:	0c2007b7          	lui	a5,0xc200
800055d0:	00e7a223          	sw	a4,4(a5) # c200004 <CONFIG_SRAM_SIZE+0xc100004>
}
800055d4:	00c12083          	lw	ra,12(sp)
800055d8:	00812403          	lw	s0,8(sp)
800055dc:	01010113          	addi	sp,sp,16
800055e0:	00008067          	ret
		z_irq_spurious(NULL);
800055e4:	00000513          	li	a0,0
800055e8:	b05ff0ef          	jal	ra,800050ec <z_irq_spurious>
800055ec:	fb9ff06f          	j	800055a4 <plic_irq_handler+0x2c>

800055f0 <riscv_plic_irq_enable>:
800055f0:	00308013          	addi	zero,ra,3
800055f4:	30047773          	csrrci	a4,mstatus,8
	en += (irq >> 5);
800055f8:	00555693          	srli	a3,a0,0x5
800055fc:	00269693          	slli	a3,a3,0x2
80005600:	0c0027b7          	lui	a5,0xc002
80005604:	00d787b3          	add	a5,a5,a3
	*en |= (1 << (irq & 31));
80005608:	0007a683          	lw	a3,0(a5) # c002000 <CONFIG_SRAM_SIZE+0xbf02000>
8000560c:	00100613          	li	a2,1
80005610:	00a61633          	sll	a2,a2,a0
80005614:	00c6e6b3          	or	a3,a3,a2
80005618:	00d7a023          	sw	a3,0(a5)
			  :
			  : "r" (key & MSTATUS_IEN)
8000561c:	00877793          	andi	a5,a4,8
	__asm__ volatile ("csrs mstatus, %0"
80005620:	3007a073          	csrs	mstatus,a5
}
80005624:	00008067          	ret

80005628 <riscv_plic_set_priority>:
80005628:	00308013          	addi	zero,ra,3
	if (priority > PLIC_MAX_PRIO)
8000562c:	00700793          	li	a5,7
80005630:	00b7f463          	bgeu	a5,a1,80005638 <riscv_plic_set_priority+0x10>
		priority = PLIC_MAX_PRIO;
80005634:	00700593          	li	a1,7
	prio += irq;
80005638:	00251513          	slli	a0,a0,0x2
8000563c:	0c0007b7          	lui	a5,0xc000
80005640:	00a787b3          	add	a5,a5,a0
	*prio = priority;
80005644:	00b7a023          	sw	a1,0(a5) # c000000 <CONFIG_SRAM_SIZE+0xbf00000>
}
80005648:	00008067          	ret

8000564c <console_out>:
8000564c:	00308013          	addi	zero,ra,3
{
80005650:	ff010113          	addi	sp,sp,-16
80005654:	00112623          	sw	ra,12(sp)
80005658:	00812423          	sw	s0,8(sp)
8000565c:	00050413          	mv	s0,a0
	if ('\n' == c) {
80005660:	00a00793          	li	a5,10
80005664:	02f50a63          	beq	a0,a5,80005698 <console_out+0x4c>
	uart_poll_out(uart_console_dev, c);
80005668:	0ff47593          	zext.b	a1,s0
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
8000566c:	80008537          	lui	a0,0x80008
80005670:	d8850793          	addi	a5,a0,-632 # 80007d88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d89>
80005674:	0087a783          	lw	a5,8(a5)
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
80005678:	0047a783          	lw	a5,4(a5)
8000567c:	d8850513          	addi	a0,a0,-632
80005680:	000780e7          	jalr	a5
}
80005684:	00040513          	mv	a0,s0
80005688:	00c12083          	lw	ra,12(sp)
8000568c:	00812403          	lw	s0,8(sp)
80005690:	01010113          	addi	sp,sp,16
80005694:	00008067          	ret
	const struct uart_driver_api *api =
80005698:	80008537          	lui	a0,0x80008
8000569c:	d8850793          	addi	a5,a0,-632 # 80007d88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d89>
800056a0:	0087a783          	lw	a5,8(a5)
	api->poll_out(dev, out_char);
800056a4:	0047a783          	lw	a5,4(a5)
800056a8:	00d00593          	li	a1,13
800056ac:	d8850513          	addi	a0,a0,-632
800056b0:	000780e7          	jalr	a5
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
800056b4:	fb5ff06f          	j	80005668 <console_out+0x1c>

800056b8 <uart_console_hook_install>:
800056b8:	00308013          	addi	zero,ra,3
{
800056bc:	ff010113          	addi	sp,sp,-16
800056c0:	00112623          	sw	ra,12(sp)
800056c4:	00812423          	sw	s0,8(sp)
	__stdout_hook_install(console_out);
800056c8:	80005437          	lui	s0,0x80005
800056cc:	64c40513          	addi	a0,s0,1612 # 8000564c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000564d>
800056d0:	be9ff0ef          	jal	ra,800052b8 <__stdout_hook_install>
	__printk_hook_install(console_out);
800056d4:	64c40513          	addi	a0,s0,1612
800056d8:	f0cfe0ef          	jal	ra,80003de4 <__printk_hook_install>
}
800056dc:	00c12083          	lw	ra,12(sp)
800056e0:	00812403          	lw	s0,8(sp)
800056e4:	01010113          	addi	sp,sp,16
800056e8:	00008067          	ret

800056ec <uart_console_init>:
800056ec:	00308013          	addi	zero,ra,3
{
800056f0:	ff010113          	addi	sp,sp,-16
800056f4:	00112623          	sw	ra,12(sp)
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
800056f8:	80008537          	lui	a0,0x80008
800056fc:	d8850513          	addi	a0,a0,-632 # 80007d88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d89>
80005700:	75c000ef          	jal	ra,80005e5c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
80005704:	00050c63          	beqz	a0,8000571c <uart_console_init+0x30>
	uart_console_hook_install();
80005708:	fb1ff0ef          	jal	ra,800056b8 <uart_console_hook_install>
	return 0;
8000570c:	00000513          	li	a0,0
}
80005710:	00c12083          	lw	ra,12(sp)
80005714:	01010113          	addi	sp,sp,16
80005718:	00008067          	ret
		return -ENODEV;
8000571c:	fed00513          	li	a0,-19
80005720:	ff1ff06f          	j	80005710 <uart_console_init+0x24>

80005724 <clock_control_get_rate>:
80005724:	00308013          	addi	zero,ra,3
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
80005728:	00852783          	lw	a5,8(a0)
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
8000572c:	00c7a783          	lw	a5,12(a5)
80005730:	00078e63          	beqz	a5,8000574c <clock_control_get_rate+0x28>
{
80005734:	ff010113          	addi	sp,sp,-16
80005738:	00112623          	sw	ra,12(sp)
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
8000573c:	000780e7          	jalr	a5
}
80005740:	00c12083          	lw	ra,12(sp)
80005744:	01010113          	addi	sp,sp,16
80005748:	00008067          	ret
		return -ENOSYS;
8000574c:	fa800513          	li	a0,-88
}
80005750:	00008067          	ret

80005754 <set_baud_rate>:
80005754:	00308013          	addi	zero,ra,3
	struct uart_ns16550_dev_data * const dev_data = dev->data;
80005758:	01052703          	lw	a4,16(a0)
	if ((baud_rate != 0U) && (pclk != 0U)) {
8000575c:	08058263          	beqz	a1,800057e0 <set_baud_rate+0x8c>
80005760:	08060063          	beqz	a2,800057e0 <set_baud_rate+0x8c>
		divisor = (pclk / (baud_rate << 4));
80005764:	00459793          	slli	a5,a1,0x4
80005768:	02f65633          	divu	a2,a2,a5
	return DEVICE_MMIO_GET(dev);
8000576c:	00452783          	lw	a5,4(a0)
80005770:	0007a803          	lw	a6,0(a5)
	return config->reg_interval;
80005774:	0107c683          	lbu	a3,16(a5)
		lcr_cache = INBYTE(LCR(dev));
80005778:	00169793          	slli	a5,a3,0x1
8000577c:	00d787b3          	add	a5,a5,a3
80005780:	010787b3          	add	a5,a5,a6
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
80005784:	0007c683          	lbu	a3,0(a5)
80005788:	0ff6f813          	zext.b	a6,a3
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
8000578c:	0806e693          	ori	a3,a3,128
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
80005790:	00d78023          	sb	a3,0(a5)
		OUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));
80005794:	0ff67693          	zext.b	a3,a2
	const struct uart_ns16550_device_config *config = dev->config;
80005798:	00452783          	lw	a5,4(a0)
	return DEVICE_MMIO_GET(dev);
8000579c:	0007a783          	lw	a5,0(a5)
800057a0:	00d78023          	sb	a3,0(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
800057a4:	00865613          	srli	a2,a2,0x8
800057a8:	0ff67613          	zext.b	a2,a2
	return DEVICE_MMIO_GET(dev);
800057ac:	00452783          	lw	a5,4(a0)
800057b0:	0007a683          	lw	a3,0(a5)
	return config->reg_interval;
800057b4:	0107c783          	lbu	a5,16(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
800057b8:	00d787b3          	add	a5,a5,a3
800057bc:	00c78023          	sb	a2,0(a5)
	return DEVICE_MMIO_GET(dev);
800057c0:	00452783          	lw	a5,4(a0)
800057c4:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
800057c8:	0107c683          	lbu	a3,16(a5)
		OUTBYTE(LCR(dev), lcr_cache);
800057cc:	00169793          	slli	a5,a3,0x1
800057d0:	00d787b3          	add	a5,a5,a3
800057d4:	00c787b3          	add	a5,a5,a2
800057d8:	01078023          	sb	a6,0(a5)
		dev_data->uart_config.baudrate = baud_rate;
800057dc:	00b72023          	sw	a1,0(a4)
}
800057e0:	00008067          	ret

800057e4 <uart_ns16550_config_get>:
800057e4:	00308013          	addi	zero,ra,3
	struct uart_ns16550_dev_data *data = dev->data;
800057e8:	01052783          	lw	a5,16(a0)
	cfg->baudrate = data->uart_config.baudrate;
800057ec:	0007a703          	lw	a4,0(a5)
800057f0:	00e5a023          	sw	a4,0(a1)
	cfg->parity = data->uart_config.parity;
800057f4:	0047c703          	lbu	a4,4(a5)
800057f8:	00e58223          	sb	a4,4(a1)
	cfg->stop_bits = data->uart_config.stop_bits;
800057fc:	0057c703          	lbu	a4,5(a5)
80005800:	00e582a3          	sb	a4,5(a1)
	cfg->data_bits = data->uart_config.data_bits;
80005804:	0067c703          	lbu	a4,6(a5)
80005808:	00e58323          	sb	a4,6(a1)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
8000580c:	0077c783          	lbu	a5,7(a5)
80005810:	00f583a3          	sb	a5,7(a1)
}
80005814:	00000513          	li	a0,0
80005818:	00008067          	ret

8000581c <uart_ns16550_poll_in>:
8000581c:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005820:	30047773          	csrrci	a4,mstatus,8
	return DEVICE_MMIO_GET(dev);
80005824:	00452783          	lw	a5,4(a0)
80005828:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
8000582c:	0107c683          	lbu	a3,16(a5)
	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
80005830:	00269793          	slli	a5,a3,0x2
80005834:	00d787b3          	add	a5,a5,a3
80005838:	00c787b3          	add	a5,a5,a2
	return *(volatile uint8_t *)addr;
8000583c:	0007c783          	lbu	a5,0(a5)
80005840:	0017f793          	andi	a5,a5,1
80005844:	00078e63          	beqz	a5,80005860 <uart_ns16550_poll_in+0x44>
80005848:	00064783          	lbu	a5,0(a2)
		*c = INBYTE(RDR(dev));
8000584c:	00f58023          	sb	a5,0(a1)
		ret = 0;
80005850:	00000513          	li	a0,0
	__asm__ volatile ("csrs mstatus, %0"
80005854:	00877793          	andi	a5,a4,8
80005858:	3007a073          	csrs	mstatus,a5
}
8000585c:	00008067          	ret
	int ret = -1;
80005860:	fff00513          	li	a0,-1
80005864:	ff1ff06f          	j	80005854 <uart_ns16550_poll_in+0x38>

80005868 <uart_ns16550_poll_out>:
80005868:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000586c:	30047673          	csrrci	a2,mstatus,8
	return DEVICE_MMIO_GET(dev);
80005870:	00452783          	lw	a5,4(a0)
80005874:	0007a683          	lw	a3,0(a5)
	return config->reg_interval;
80005878:	0107c703          	lbu	a4,16(a5)
	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0) {
8000587c:	00271793          	slli	a5,a4,0x2
80005880:	00e787b3          	add	a5,a5,a4
80005884:	00d787b3          	add	a5,a5,a3
80005888:	0007c783          	lbu	a5,0(a5)
8000588c:	0207f793          	andi	a5,a5,32
80005890:	fe0780e3          	beqz	a5,80005870 <uart_ns16550_poll_out+0x8>
	*(volatile uint8_t *)addr = data;
80005894:	00b68023          	sb	a1,0(a3) # c0000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xc0000001>
	__asm__ volatile ("csrs mstatus, %0"
80005898:	00867793          	andi	a5,a2,8
8000589c:	3007a073          	csrs	mstatus,a5
}
800058a0:	00008067          	ret

800058a4 <uart_ns16550_err_check>:
800058a4:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
800058a8:	30047773          	csrrci	a4,mstatus,8
	return DEVICE_MMIO_GET(dev);
800058ac:	00452783          	lw	a5,4(a0)
800058b0:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
800058b4:	0107c683          	lbu	a3,16(a5)
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
800058b8:	00269793          	slli	a5,a3,0x2
800058bc:	00d787b3          	add	a5,a5,a3
800058c0:	00c787b3          	add	a5,a5,a2
	return *(volatile uint8_t *)addr;
800058c4:	0007c503          	lbu	a0,0(a5)
800058c8:	01e57513          	andi	a0,a0,30
	__asm__ volatile ("csrs mstatus, %0"
800058cc:	00877793          	andi	a5,a4,8
800058d0:	3007a073          	csrs	mstatus,a5
}
800058d4:	40155513          	srai	a0,a0,0x1
800058d8:	00008067          	ret

800058dc <uart_ns16550_configure>:
800058dc:	00308013          	addi	zero,ra,3
{
800058e0:	fd010113          	addi	sp,sp,-48
800058e4:	02112623          	sw	ra,44(sp)
800058e8:	02812423          	sw	s0,40(sp)
800058ec:	02912223          	sw	s1,36(sp)
800058f0:	03212023          	sw	s2,32(sp)
800058f4:	01312e23          	sw	s3,28(sp)
800058f8:	01412c23          	sw	s4,24(sp)
800058fc:	00050413          	mv	s0,a0
80005900:	00058493          	mv	s1,a1
	struct uart_ns16550_dev_data * const dev_data = dev->data;
80005904:	01052a03          	lw	s4,16(a0)
	const struct uart_ns16550_device_config * const dev_cfg = dev->config;
80005908:	00452983          	lw	s3,4(a0)
	uint32_t pclk = 0U;
8000590c:	00012623          	sw	zero,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005910:	30047973          	csrrci	s2,mstatus,8
	if (dev_cfg->sys_clk_freq != 0U) {
80005914:	0049a783          	lw	a5,4(s3)
80005918:	04078063          	beqz	a5,80005958 <uart_ns16550_configure+0x7c>
		pclk = dev_cfg->sys_clk_freq;
8000591c:	00f12623          	sw	a5,12(sp)
	set_baud_rate(dev, cfg->baudrate, pclk);
80005920:	00c12603          	lw	a2,12(sp)
80005924:	0004a583          	lw	a1,0(s1)
80005928:	00040513          	mv	a0,s0
8000592c:	e29ff0ef          	jal	ra,80005754 <set_baud_rate>
	switch (cfg->data_bits) {
80005930:	0064c783          	lbu	a5,6(s1)
80005934:	00200713          	li	a4,2
80005938:	0ae78463          	beq	a5,a4,800059e0 <uart_ns16550_configure+0x104>
8000593c:	04f76263          	bltu	a4,a5,80005980 <uart_ns16550_configure+0xa4>
80005940:	04078e63          	beqz	a5,8000599c <uart_ns16550_configure+0xc0>
80005944:	00100713          	li	a4,1
80005948:	02e79863          	bne	a5,a4,80005978 <uart_ns16550_configure+0x9c>
		uart_cfg.data_bits = LCR_CS6;
8000594c:	00100793          	li	a5,1
80005950:	00f10523          	sb	a5,10(sp)
		break;
80005954:	04c0006f          	j	800059a0 <uart_ns16550_configure+0xc4>
		if (!device_is_ready(dev_cfg->clock_dev)) {
80005958:	0089a503          	lw	a0,8(s3)
8000595c:	500000ef          	jal	ra,80005e5c <z_device_is_ready>
80005960:	18050a63          	beqz	a0,80005af4 <uart_ns16550_configure+0x218>
		clock_control_get_rate(dev_cfg->clock_dev, dev_cfg->clock_subsys,
80005964:	00c10613          	addi	a2,sp,12
80005968:	00c9a583          	lw	a1,12(s3)
8000596c:	0089a503          	lw	a0,8(s3)
80005970:	db5ff0ef          	jal	ra,80005724 <clock_control_get_rate>
80005974:	fadff06f          	j	80005920 <uart_ns16550_configure+0x44>
	switch (cfg->data_bits) {
80005978:	f7a00513          	li	a0,-134
8000597c:	03c0006f          	j	800059b8 <uart_ns16550_configure+0xdc>
80005980:	00300713          	li	a4,3
80005984:	00e79863          	bne	a5,a4,80005994 <uart_ns16550_configure+0xb8>
		uart_cfg.data_bits = LCR_CS8;
80005988:	00300793          	li	a5,3
8000598c:	00f10523          	sb	a5,10(sp)
		break;
80005990:	0100006f          	j	800059a0 <uart_ns16550_configure+0xc4>
	switch (cfg->data_bits) {
80005994:	f7a00513          	li	a0,-134
80005998:	0200006f          	j	800059b8 <uart_ns16550_configure+0xdc>
		uart_cfg.data_bits = LCR_CS5;
8000599c:	00010523          	sb	zero,10(sp)
	switch (cfg->stop_bits) {
800059a0:	0054c783          	lbu	a5,5(s1)
800059a4:	00100713          	li	a4,1
800059a8:	04e78263          	beq	a5,a4,800059ec <uart_ns16550_configure+0x110>
800059ac:	00300713          	li	a4,3
800059b0:	04e78c63          	beq	a5,a4,80005a08 <uart_ns16550_configure+0x12c>
800059b4:	f7a00513          	li	a0,-134
			  : "r" (key & MSTATUS_IEN)
800059b8:	00897913          	andi	s2,s2,8
	__asm__ volatile ("csrs mstatus, %0"
800059bc:	30092073          	csrs	mstatus,s2
};
800059c0:	02c12083          	lw	ra,44(sp)
800059c4:	02812403          	lw	s0,40(sp)
800059c8:	02412483          	lw	s1,36(sp)
800059cc:	02012903          	lw	s2,32(sp)
800059d0:	01c12983          	lw	s3,28(sp)
800059d4:	01812a03          	lw	s4,24(sp)
800059d8:	03010113          	addi	sp,sp,48
800059dc:	00008067          	ret
		uart_cfg.data_bits = LCR_CS7;
800059e0:	00200793          	li	a5,2
800059e4:	00f10523          	sb	a5,10(sp)
		break;
800059e8:	fb9ff06f          	j	800059a0 <uart_ns16550_configure+0xc4>
		uart_cfg.stop_bits = LCR_1_STB;
800059ec:	000104a3          	sb	zero,9(sp)
	switch (cfg->parity) {
800059f0:	0044c783          	lbu	a5,4(s1)
800059f4:	02078063          	beqz	a5,80005a14 <uart_ns16550_configure+0x138>
800059f8:	00200713          	li	a4,2
800059fc:	0ee78063          	beq	a5,a4,80005adc <uart_ns16550_configure+0x200>
80005a00:	f7a00513          	li	a0,-134
80005a04:	fb5ff06f          	j	800059b8 <uart_ns16550_configure+0xdc>
		uart_cfg.stop_bits = LCR_2_STB;
80005a08:	00400793          	li	a5,4
80005a0c:	00f104a3          	sb	a5,9(sp)
		break;
80005a10:	fe1ff06f          	j	800059f0 <uart_ns16550_configure+0x114>
		uart_cfg.parity = LCR_PDIS;
80005a14:	00010423          	sb	zero,8(sp)
	dev_data->uart_config = *cfg;
80005a18:	0004a783          	lw	a5,0(s1)
80005a1c:	00fa2023          	sw	a5,0(s4)
80005a20:	0044a783          	lw	a5,4(s1)
80005a24:	00fa2223          	sw	a5,4(s4)
	OUTBYTE(LCR(dev),
80005a28:	00a14783          	lbu	a5,10(sp)
80005a2c:	00914683          	lbu	a3,9(sp)
80005a30:	00814703          	lbu	a4,8(sp)
80005a34:	00d7e7b3          	or	a5,a5,a3
80005a38:	00f76733          	or	a4,a4,a5
	return DEVICE_MMIO_GET(dev);
80005a3c:	00442783          	lw	a5,4(s0)
80005a40:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
80005a44:	0107c683          	lbu	a3,16(a5)
	OUTBYTE(LCR(dev),
80005a48:	00169793          	slli	a5,a3,0x1
80005a4c:	00d787b3          	add	a5,a5,a3
80005a50:	00c787b3          	add	a5,a5,a2
	*(volatile uint8_t *)addr = data;
80005a54:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
80005a58:	00442783          	lw	a5,4(s0)
80005a5c:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
80005a60:	0107c783          	lbu	a5,16(a5)
	OUTBYTE(MDC(dev), mdc);
80005a64:	00279793          	slli	a5,a5,0x2
80005a68:	00e787b3          	add	a5,a5,a4
80005a6c:	00b00713          	li	a4,11
80005a70:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
80005a74:	00442783          	lw	a5,4(s0)
80005a78:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
80005a7c:	0107c783          	lbu	a5,16(a5)
	OUTBYTE(FCR(dev),
80005a80:	00179793          	slli	a5,a5,0x1
80005a84:	00e787b3          	add	a5,a5,a4
80005a88:	f8700713          	li	a4,-121
80005a8c:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
80005a90:	00442783          	lw	a5,4(s0)
80005a94:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
80005a98:	0107c783          	lbu	a5,16(a5)
	if ((INBYTE(IIR(dev)) & IIR_FE) == IIR_FE) {
80005a9c:	00179793          	slli	a5,a5,0x1
80005aa0:	00e787b3          	add	a5,a5,a4
	return *(volatile uint8_t *)addr;
80005aa4:	0007c783          	lbu	a5,0(a5)
80005aa8:	0c07f793          	andi	a5,a5,192
80005aac:	0c000713          	li	a4,192
80005ab0:	02e78c63          	beq	a5,a4,80005ae8 <uart_ns16550_configure+0x20c>
		dev_data->fifo_size = 1;
80005ab4:	00100793          	li	a5,1
80005ab8:	00fa0423          	sb	a5,8(s4)
	const struct uart_ns16550_device_config *config = dev->config;
80005abc:	00442703          	lw	a4,4(s0)
	return config->reg_interval;
80005ac0:	01074783          	lbu	a5,16(a4)
	return DEVICE_MMIO_GET(dev);
80005ac4:	00072703          	lw	a4,0(a4)
80005ac8:	00074683          	lbu	a3,0(a4)
	OUTBYTE(IER(dev), 0x00);
80005acc:	00e787b3          	add	a5,a5,a4
	*(volatile uint8_t *)addr = data;
80005ad0:	00078023          	sb	zero,0(a5)
	int ret = 0;
80005ad4:	00000513          	li	a0,0
}
80005ad8:	ee1ff06f          	j	800059b8 <uart_ns16550_configure+0xdc>
		uart_cfg.parity = LCR_EPS;
80005adc:	01000793          	li	a5,16
80005ae0:	00f10423          	sb	a5,8(sp)
		break;
80005ae4:	f35ff06f          	j	80005a18 <uart_ns16550_configure+0x13c>
		dev_data->fifo_size = 16;
80005ae8:	01000793          	li	a5,16
80005aec:	00fa0423          	sb	a5,8(s4)
80005af0:	fcdff06f          	j	80005abc <uart_ns16550_configure+0x1e0>
			ret = -EINVAL;
80005af4:	fea00513          	li	a0,-22
80005af8:	ec1ff06f          	j	800059b8 <uart_ns16550_configure+0xdc>

80005afc <uart_ns16550_init>:
80005afc:	00308013          	addi	zero,ra,3
{
80005b00:	ff010113          	addi	sp,sp,-16
80005b04:	00112623          	sw	ra,12(sp)
	ret = uart_ns16550_configure(dev, &data->uart_config);
80005b08:	01052583          	lw	a1,16(a0)
80005b0c:	dd1ff0ef          	jal	ra,800058dc <uart_ns16550_configure>
}
80005b10:	00c12083          	lw	ra,12(sp)
80005b14:	01010113          	addi	sp,sp,16
80005b18:	00008067          	ret

80005b1c <get_hart_mtimecmp>:
80005b1c:	00308013          	addi	zero,ra,3
	return MTIMECMP_REG + (_current_cpu->id * 8);
80005b20:	800087b7          	lui	a5,0x80008
80005b24:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80005b28:	0147c783          	lbu	a5,20(a5)
80005b2c:	00379793          	slli	a5,a5,0x3
}
80005b30:	02004537          	lui	a0,0x2004
80005b34:	00a78533          	add	a0,a5,a0
80005b38:	00000593          	li	a1,0
80005b3c:	00008067          	ret

80005b40 <set_mtimecmp>:
80005b40:	00308013          	addi	zero,ra,3
{
80005b44:	ff010113          	addi	sp,sp,-16
80005b48:	00112623          	sw	ra,12(sp)
80005b4c:	00812423          	sw	s0,8(sp)
80005b50:	00912223          	sw	s1,4(sp)
80005b54:	00050493          	mv	s1,a0
80005b58:	00058413          	mv	s0,a1
	volatile uint32_t *r = (uint32_t *)(uint32_t)get_hart_mtimecmp();
80005b5c:	fc1ff0ef          	jal	ra,80005b1c <get_hart_mtimecmp>
	r[1] = 0xffffffff;
80005b60:	fff00793          	li	a5,-1
80005b64:	00f52223          	sw	a5,4(a0) # 2004004 <CONFIG_SRAM_SIZE+0x1f04004>
	r[0] = (uint32_t)time;
80005b68:	00952023          	sw	s1,0(a0)
	r[1] = (uint32_t)(time >> 32);
80005b6c:	00852223          	sw	s0,4(a0)
}
80005b70:	00c12083          	lw	ra,12(sp)
80005b74:	00812403          	lw	s0,8(sp)
80005b78:	00412483          	lw	s1,4(sp)
80005b7c:	01010113          	addi	sp,sp,16
80005b80:	00008067          	ret

80005b84 <mtime>:
{
80005b84:	00308013          	addi	zero,ra,3
		hi = r[1];
80005b88:	0200c7b7          	lui	a5,0x200c
80005b8c:	ffc7a583          	lw	a1,-4(a5) # 200bffc <CONFIG_SRAM_SIZE+0x1f0bffc>
		lo = r[0];
80005b90:	ff87a503          	lw	a0,-8(a5)
	} while (r[1] != hi);
80005b94:	ffc7a783          	lw	a5,-4(a5)
80005b98:	feb796e3          	bne	a5,a1,80005b84 <mtime>
}
80005b9c:	00008067          	ret

80005ba0 <sys_clock_driver_init>:
80005ba0:	00308013          	addi	zero,ra,3
{
80005ba4:	ff010113          	addi	sp,sp,-16
80005ba8:	00112623          	sw	ra,12(sp)
	IRQ_CONNECT(TIMER_IRQN, 0, timer_isr, NULL, 0);
80005bac:	00000613          	li	a2,0
80005bb0:	00000593          	li	a1,0
80005bb4:	00700513          	li	a0,7
80005bb8:	c9cff0ef          	jal	ra,80005054 <z_riscv_irq_priority_set>
	last_count = mtime();
80005bbc:	fc9ff0ef          	jal	ra,80005b84 <mtime>
80005bc0:	00050793          	mv	a5,a0
80005bc4:	80008737          	lui	a4,0x80008
80005bc8:	5aa72823          	sw	a0,1456(a4) # 800085b0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085b1>
80005bcc:	5ab72a23          	sw	a1,1460(a4)
	set_mtimecmp(last_count + CYC_PER_TICK);
80005bd0:	10050513          	addi	a0,a0,256
80005bd4:	00f537b3          	sltu	a5,a0,a5
80005bd8:	00b785b3          	add	a1,a5,a1
80005bdc:	f65ff0ef          	jal	ra,80005b40 <set_mtimecmp>
	irq_enable(TIMER_IRQN);
80005be0:	00700513          	li	a0,7
80005be4:	c34ff0ef          	jal	ra,80005018 <arch_irq_enable>
}
80005be8:	00000513          	li	a0,0
80005bec:	00c12083          	lw	ra,12(sp)
80005bf0:	01010113          	addi	sp,sp,16
80005bf4:	00008067          	ret

80005bf8 <timer_isr>:
80005bf8:	00308013          	addi	zero,ra,3
{
80005bfc:	ff010113          	addi	sp,sp,-16
80005c00:	00112623          	sw	ra,12(sp)
80005c04:	00812423          	sw	s0,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005c08:	30047473          	csrrci	s0,mstatus,8
	uint64_t now = mtime();
80005c0c:	f79ff0ef          	jal	ra,80005b84 <mtime>
80005c10:	00050693          	mv	a3,a0
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
80005c14:	80008637          	lui	a2,0x80008
80005c18:	5b062783          	lw	a5,1456(a2) # 800085b0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085b1>
80005c1c:	5b462703          	lw	a4,1460(a2)
80005c20:	40f507b3          	sub	a5,a0,a5
80005c24:	00f53533          	sltu	a0,a0,a5
80005c28:	40e58733          	sub	a4,a1,a4
80005c2c:	40a70733          	sub	a4,a4,a0
80005c30:	01871713          	slli	a4,a4,0x18
80005c34:	0087d513          	srli	a0,a5,0x8
80005c38:	00a76533          	or	a0,a4,a0
	last_count = now;
80005c3c:	5ad62823          	sw	a3,1456(a2)
80005c40:	5ab62a23          	sw	a1,1460(a2)
	__asm__ volatile ("csrs mstatus, %0"
80005c44:	00847413          	andi	s0,s0,8
80005c48:	30042073          	csrs	mstatus,s0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
80005c4c:	785010ef          	jal	ra,80007bd0 <sys_clock_announce>
}
80005c50:	00c12083          	lw	ra,12(sp)
80005c54:	00812403          	lw	s0,8(sp)
80005c58:	01010113          	addi	sp,sp,16
80005c5c:	00008067          	ret

80005c60 <sys_clock_set_timeout>:
80005c60:	00308013          	addi	zero,ra,3
	if (idle) {
80005c64:	0c059c63          	bnez	a1,80005d3c <sys_clock_set_timeout+0xdc>
{
80005c68:	ff010113          	addi	sp,sp,-16
80005c6c:	00112623          	sw	ra,12(sp)
80005c70:	00812423          	sw	s0,8(sp)
80005c74:	00912223          	sw	s1,4(sp)
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
80005c78:	fff00793          	li	a5,-1
80005c7c:	04f50a63          	beq	a0,a5,80005cd0 <sys_clock_set_timeout+0x70>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
80005c80:	00100793          	li	a5,1
80005c84:	04a7dc63          	bge	a5,a0,80005cdc <sys_clock_set_timeout+0x7c>
80005c88:	008007b7          	lui	a5,0x800
80005c8c:	ffe78793          	addi	a5,a5,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
80005c90:	04a7ca63          	blt	a5,a0,80005ce4 <sys_clock_set_timeout+0x84>
80005c94:	fff50413          	addi	s0,a0,-1
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005c98:	300474f3          	csrrci	s1,mstatus,8
	uint64_t now = mtime();
80005c9c:	ee9ff0ef          	jal	ra,80005b84 <mtime>
	uint32_t adj, cyc = ticks * CYC_PER_TICK;
80005ca0:	00841793          	slli	a5,s0,0x8
	adj = (uint32_t)(now - last_count) + (CYC_PER_TICK - 1);
80005ca4:	800086b7          	lui	a3,0x80008
80005ca8:	5b06a703          	lw	a4,1456(a3) # 800085b0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085b1>
80005cac:	5b46a583          	lw	a1,1460(a3)
80005cb0:	40e50633          	sub	a2,a0,a4
80005cb4:	0ff60613          	addi	a2,a2,255
	if (cyc <= MAX_CYC - adj) {
80005cb8:	800006b7          	lui	a3,0x80000
80005cbc:	fff6c693          	not	a3,a3
80005cc0:	40c686b3          	sub	a3,a3,a2
80005cc4:	02f6e663          	bltu	a3,a5,80005cf0 <sys_clock_set_timeout+0x90>
		cyc += adj;
80005cc8:	00c787b3          	add	a5,a5,a2
80005ccc:	02c0006f          	j	80005cf8 <sys_clock_set_timeout+0x98>
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
80005cd0:	00800537          	lui	a0,0x800
80005cd4:	ffe50513          	addi	a0,a0,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
80005cd8:	fb1ff06f          	j	80005c88 <sys_clock_set_timeout+0x28>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
80005cdc:	00000413          	li	s0,0
80005ce0:	fb9ff06f          	j	80005c98 <sys_clock_set_timeout+0x38>
80005ce4:	00800537          	lui	a0,0x800
80005ce8:	ffe50413          	addi	s0,a0,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
80005cec:	fadff06f          	j	80005c98 <sys_clock_set_timeout+0x38>
		cyc = MAX_CYC;
80005cf0:	800007b7          	lui	a5,0x80000
80005cf4:	fff7c793          	not	a5,a5
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
80005cf8:	f007f793          	andi	a5,a5,-256
	if ((int32_t)(cyc + last_count - now) < MIN_DELAY) {
80005cfc:	00f706b3          	add	a3,a4,a5
80005d00:	40a686b3          	sub	a3,a3,a0
80005d04:	06300613          	li	a2,99
80005d08:	00d64463          	blt	a2,a3,80005d10 <sys_clock_set_timeout+0xb0>
		cyc += CYC_PER_TICK;
80005d0c:	10078793          	addi	a5,a5,256 # 80000100 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000101>
	set_mtimecmp(cyc + last_count);
80005d10:	00e78533          	add	a0,a5,a4
80005d14:	00f537b3          	sltu	a5,a0,a5
80005d18:	00b785b3          	add	a1,a5,a1
80005d1c:	e25ff0ef          	jal	ra,80005b40 <set_mtimecmp>
	__asm__ volatile ("csrs mstatus, %0"
80005d20:	0084f493          	andi	s1,s1,8
80005d24:	3004a073          	csrs	mstatus,s1
}
80005d28:	00c12083          	lw	ra,12(sp)
80005d2c:	00812403          	lw	s0,8(sp)
80005d30:	00412483          	lw	s1,4(sp)
80005d34:	01010113          	addi	sp,sp,16
80005d38:	00008067          	ret
80005d3c:	00008067          	ret

80005d40 <sys_clock_elapsed>:
80005d40:	00308013          	addi	zero,ra,3
{
80005d44:	ff010113          	addi	sp,sp,-16
80005d48:	00112623          	sw	ra,12(sp)
80005d4c:	00812423          	sw	s0,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005d50:	30047473          	csrrci	s0,mstatus,8
	uint32_t ret = ((uint32_t)mtime() - (uint32_t)last_count) / CYC_PER_TICK;
80005d54:	e31ff0ef          	jal	ra,80005b84 <mtime>
80005d58:	800087b7          	lui	a5,0x80008
80005d5c:	5b07a783          	lw	a5,1456(a5) # 800085b0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085b1>
80005d60:	40f50533          	sub	a0,a0,a5
80005d64:	00855513          	srli	a0,a0,0x8
	__asm__ volatile ("csrs mstatus, %0"
80005d68:	00847413          	andi	s0,s0,8
80005d6c:	30042073          	csrs	mstatus,s0
}
80005d70:	00c12083          	lw	ra,12(sp)
80005d74:	00812403          	lw	s0,8(sp)
80005d78:	01010113          	addi	sp,sp,16
80005d7c:	00008067          	ret

80005d80 <z_device_state_init>:
80005d80:	00308013          	addi	zero,ra,3
	const struct device *dev = __device_start;
80005d84:	80008737          	lui	a4,0x80008
80005d88:	d8870713          	addi	a4,a4,-632 # 80007d88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d89>
	while (dev < __device_end) {
80005d8c:	0080006f          	j	80005d94 <z_device_state_init+0x14>
		++dev;
80005d90:	01870713          	addi	a4,a4,24
	while (dev < __device_end) {
80005d94:	800087b7          	lui	a5,0x80008
80005d98:	da078793          	addi	a5,a5,-608 # 80007da0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007da1>
80005d9c:	fef76ae3          	bltu	a4,a5,80005d90 <z_device_state_init+0x10>
}
80005da0:	00008067          	ret

80005da4 <z_sys_init_run_level>:
80005da4:	00308013          	addi	zero,ra,3
{
80005da8:	ff010113          	addi	sp,sp,-16
80005dac:	00112623          	sw	ra,12(sp)
80005db0:	00812423          	sw	s0,8(sp)
80005db4:	00912223          	sw	s1,4(sp)
80005db8:	01212023          	sw	s2,0(sp)
80005dbc:	00050913          	mv	s2,a0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
80005dc0:	800087b7          	lui	a5,0x80008
80005dc4:	00251713          	slli	a4,a0,0x2
80005dc8:	4fc78793          	addi	a5,a5,1276 # 800084fc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800084fd>
80005dcc:	00e787b3          	add	a5,a5,a4
80005dd0:	0007a403          	lw	s0,0(a5)
80005dd4:	0280006f          	j	80005dfc <z_sys_init_run_level+0x58>
					rc = -rc;
80005dd8:	40a00533          	neg	a0,a0
80005ddc:	0580006f          	j	80005e34 <z_sys_init_run_level+0x90>
				dev->state->init_res = rc;
80005de0:	00c4a783          	lw	a5,12(s1)
80005de4:	00a78023          	sb	a0,0(a5)
			dev->state->initialized = true;
80005de8:	00c4a703          	lw	a4,12(s1)
80005dec:	00075783          	lhu	a5,0(a4)
80005df0:	1007e793          	ori	a5,a5,256
80005df4:	00f71023          	sh	a5,0(a4)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
80005df8:	00840413          	addi	s0,s0,8
80005dfc:	00190713          	addi	a4,s2,1
80005e00:	800087b7          	lui	a5,0x80008
80005e04:	00271713          	slli	a4,a4,0x2
80005e08:	4fc78793          	addi	a5,a5,1276 # 800084fc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800084fd>
80005e0c:	00e787b3          	add	a5,a5,a4
80005e10:	0007a783          	lw	a5,0(a5)
80005e14:	02f47863          	bgeu	s0,a5,80005e44 <z_sys_init_run_level+0xa0>
		const struct device *dev = entry->dev;
80005e18:	00442483          	lw	s1,4(s0)
		int rc = entry->init(dev);
80005e1c:	00042783          	lw	a5,0(s0)
80005e20:	00048513          	mv	a0,s1
80005e24:	000780e7          	jalr	a5
		if (dev != NULL) {
80005e28:	fc0488e3          	beqz	s1,80005df8 <z_sys_init_run_level+0x54>
			if (rc != 0) {
80005e2c:	fa050ee3          	beqz	a0,80005de8 <z_sys_init_run_level+0x44>
				if (rc < 0) {
80005e30:	fa0544e3          	bltz	a0,80005dd8 <z_sys_init_run_level+0x34>
				if (rc > UINT8_MAX) {
80005e34:	0ff00793          	li	a5,255
80005e38:	faa7d4e3          	bge	a5,a0,80005de0 <z_sys_init_run_level+0x3c>
					rc = UINT8_MAX;
80005e3c:	0ff00513          	li	a0,255
80005e40:	fa1ff06f          	j	80005de0 <z_sys_init_run_level+0x3c>
}
80005e44:	00c12083          	lw	ra,12(sp)
80005e48:	00812403          	lw	s0,8(sp)
80005e4c:	00412483          	lw	s1,4(sp)
80005e50:	00012903          	lw	s2,0(sp)
80005e54:	01010113          	addi	sp,sp,16
80005e58:	00008067          	ret

80005e5c <z_device_is_ready>:
80005e5c:	00308013          	addi	zero,ra,3
	if (dev == NULL) {
80005e60:	00050e63          	beqz	a0,80005e7c <z_device_is_ready+0x20>
	return dev->state->initialized && (dev->state->init_res == 0U);
80005e64:	00c52783          	lw	a5,12(a0)
80005e68:	0007a503          	lw	a0,0(a5)
80005e6c:	1ff57513          	andi	a0,a0,511
80005e70:	f0050513          	addi	a0,a0,-256
80005e74:	00153513          	seqz	a0,a0
80005e78:	00008067          	ret
		return false;
80005e7c:	00000513          	li	a0,0
}
80005e80:	00008067          	ret

80005e84 <arch_system_halt>:
80005e84:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005e88:	300477f3          	csrrci	a5,mstatus,8
	for (;;) {
80005e8c:	0000006f          	j	80005e8c <arch_system_halt+0x8>

80005e90 <k_sys_fatal_error_handler>:
80005e90:	00308013          	addi	zero,ra,3
{
80005e94:	ff010113          	addi	sp,sp,-16
80005e98:	00112623          	sw	ra,12(sp)
	arch_system_halt(reason);
80005e9c:	fe9ff0ef          	jal	ra,80005e84 <arch_system_halt>

80005ea0 <z_fatal_error>:
80005ea0:	00308013          	addi	zero,ra,3
{
80005ea4:	fe010113          	addi	sp,sp,-32
80005ea8:	00112e23          	sw	ra,28(sp)
80005eac:	00812c23          	sw	s0,24(sp)
80005eb0:	00912a23          	sw	s1,20(sp)
80005eb4:	01212823          	sw	s2,16(sp)
80005eb8:	01312623          	sw	s3,12(sp)
80005ebc:	00050913          	mv	s2,a0
80005ec0:	00058993          	mv	s3,a1
80005ec4:	300474f3          	csrrci	s1,mstatus,8
	return z_impl_z_current_get();
80005ec8:	7e0010ef          	jal	ra,800076a8 <z_impl_z_current_get>
80005ecc:	00050413          	mv	s0,a0
	k_sys_fatal_error_handler(reason, esf);
80005ed0:	00098593          	mv	a1,s3
80005ed4:	00090513          	mv	a0,s2
80005ed8:	fb9ff0ef          	jal	ra,80005e90 <k_sys_fatal_error_handler>
			  : "r" (key & MSTATUS_IEN)
80005edc:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80005ee0:	3004a073          	csrs	mstatus,s1
	z_impl_k_thread_abort(thread);
80005ee4:	00040513          	mv	a0,s0
80005ee8:	07d010ef          	jal	ra,80007764 <z_impl_k_thread_abort>
}
80005eec:	01c12083          	lw	ra,28(sp)
80005ef0:	01812403          	lw	s0,24(sp)
80005ef4:	01412483          	lw	s1,20(sp)
80005ef8:	01012903          	lw	s2,16(sp)
80005efc:	00c12983          	lw	s3,12(sp)
80005f00:	02010113          	addi	sp,sp,32
80005f04:	00008067          	ret

80005f08 <init_idle_thread>:
80005f08:	00308013          	addi	zero,ra,3
{
80005f0c:	fd010113          	addi	sp,sp,-48
80005f10:	02112623          	sw	ra,44(sp)
80005f14:	02812423          	sw	s0,40(sp)
80005f18:	02912223          	sw	s1,36(sp)
80005f1c:	03212023          	sw	s2,32(sp)
80005f20:	01312e23          	sw	s3,28(sp)
80005f24:	00050413          	mv	s0,a0
	struct k_thread *thread = &z_idle_threads[i];
80005f28:	00451913          	slli	s2,a0,0x4
80005f2c:	00a909b3          	add	s3,s2,a0
80005f30:	00399993          	slli	s3,s3,0x3
80005f34:	800084b7          	lui	s1,0x80008
80005f38:	5e848493          	addi	s1,s1,1512 # 800085e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085e9>
80005f3c:	009989b3          	add	s3,s3,s1
	k_thread_stack_t *stack = z_idle_stacks[i];
80005f40:	00a51513          	slli	a0,a0,0xa
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
80005f44:	00141693          	slli	a3,s0,0x1
80005f48:	008686b3          	add	a3,a3,s0
80005f4c:	00369693          	slli	a3,a3,0x3
	z_setup_new_thread(thread, stack,
80005f50:	00012223          	sw	zero,4(sp)
80005f54:	00100793          	li	a5,1
80005f58:	00f12023          	sw	a5,0(sp)
80005f5c:	00f00893          	li	a7,15
80005f60:	00000813          	li	a6,0
80005f64:	00000793          	li	a5,0
80005f68:	80008737          	lui	a4,0x80008
80005f6c:	6f870713          	addi	a4,a4,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80005f70:	00d70733          	add	a4,a4,a3
80005f74:	800066b7          	lui	a3,0x80006
80005f78:	4fc68693          	addi	a3,a3,1276 # 800064fc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800064fd>
80005f7c:	40000613          	li	a2,1024
80005f80:	800095b7          	lui	a1,0x80009
80005f84:	72058593          	addi	a1,a1,1824 # 80009720 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009721>
80005f88:	00a585b3          	add	a1,a1,a0
80005f8c:	00098513          	mv	a0,s3
80005f90:	398000ef          	jal	ra,80006328 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
80005f94:	00d9c783          	lbu	a5,13(s3)
80005f98:	ffb7f793          	andi	a5,a5,-5
80005f9c:	00f986a3          	sb	a5,13(s3)
}
80005fa0:	02c12083          	lw	ra,44(sp)
80005fa4:	02812403          	lw	s0,40(sp)
80005fa8:	02412483          	lw	s1,36(sp)
80005fac:	02012903          	lw	s2,32(sp)
80005fb0:	01c12983          	lw	s3,28(sp)
80005fb4:	03010113          	addi	sp,sp,48
80005fb8:	00008067          	ret

80005fbc <bg_thread_main>:
80005fbc:	00308013          	addi	zero,ra,3
{
80005fc0:	ff010113          	addi	sp,sp,-16
80005fc4:	00112623          	sw	ra,12(sp)
	z_sys_post_kernel = true;
80005fc8:	800087b7          	lui	a5,0x80008
80005fcc:	00100713          	li	a4,1
80005fd0:	5ee78223          	sb	a4,1508(a5) # 800085e4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085e5>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
80005fd4:	00200513          	li	a0,2
80005fd8:	dcdff0ef          	jal	ra,80005da4 <z_sys_init_run_level>
	boot_banner();
80005fdc:	549010ef          	jal	ra,80007d24 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
80005fe0:	00300513          	li	a0,3
80005fe4:	dc1ff0ef          	jal	ra,80005da4 <z_sys_init_run_level>
	z_init_static_threads();
80005fe8:	418000ef          	jal	ra,80006400 <z_init_static_threads>
	main();
80005fec:	d51fd0ef          	jal	ra,80003d3c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
80005ff0:	800087b7          	lui	a5,0x80008
80005ff4:	67078793          	addi	a5,a5,1648 # 80008670 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008671>
80005ff8:	00c7c703          	lbu	a4,12(a5)
80005ffc:	ffe77713          	andi	a4,a4,-2
80006000:	00e78623          	sb	a4,12(a5)
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
80006004:	00c12083          	lw	ra,12(sp)
80006008:	01010113          	addi	sp,sp,16
8000600c:	00008067          	ret

80006010 <z_swap_unlocked>:
80006010:	00308013          	addi	zero,ra,3
{
	return do_swap(key.key, lock, true);
}

static inline void z_swap_unlocked(void)
{
80006014:	ff010113          	addi	sp,sp,-16
80006018:	00112623          	sw	ra,12(sp)
8000601c:	00812423          	sw	s0,8(sp)
80006020:	00912223          	sw	s1,4(sp)
80006024:	01212023          	sw	s2,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006028:	300474f3          	csrrci	s1,mstatus,8
	old_thread = _current;
8000602c:	800087b7          	lui	a5,0x80008
80006030:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006034:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
80006038:	ff500793          	li	a5,-11
8000603c:	06f92c23          	sw	a5,120(s2)
80006040:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80006044:	1a9000ef          	jal	ra,800069ec <z_swap_next_thread>
	if (new_thread != old_thread) {
80006048:	02a90263          	beq	s2,a0,8000606c <z_swap_unlocked+0x5c>
8000604c:	00050413          	mv	s0,a0
		_current_cpu->current = new_thread;
80006050:	800087b7          	lui	a5,0x80008
80006054:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006058:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
8000605c:	045000ef          	jal	ra,800068a0 <z_reset_time_slice>
	struct k_thread *old = CONTAINER_OF(switched_from, struct k_thread,
					    switch_handle);
#ifdef CONFIG_RISCV_ALWAYS_SWITCH_THROUGH_ECALL
	arch_syscall_invoke2((uintptr_t)new, (uintptr_t)old, RV_ECALL_SCHEDULE);
#else
	z_riscv_switch(new, old);
80006060:	00090593          	mv	a1,s2
80006064:	07c42503          	lw	a0,124(s0)
80006068:	934ff0ef          	jal	ra,8000519c <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
8000606c:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80006070:	3004a073          	csrs	mstatus,s1
	(void) do_swap(arch_irq_lock(), NULL, true);
}
80006074:	00c12083          	lw	ra,12(sp)
80006078:	00812403          	lw	s0,8(sp)
8000607c:	00412483          	lw	s1,4(sp)
80006080:	00012903          	lw	s2,0(sp)
80006084:	01010113          	addi	sp,sp,16
80006088:	00008067          	ret

8000608c <switch_to_main_thread>:
8000608c:	00308013          	addi	zero,ra,3
{
80006090:	ff010113          	addi	sp,sp,-16
80006094:	00112623          	sw	ra,12(sp)
	z_swap_unlocked();
80006098:	f79ff0ef          	jal	ra,80006010 <z_swap_unlocked>

8000609c <z_early_memset>:
8000609c:	00308013          	addi	zero,ra,3
{
800060a0:	ff010113          	addi	sp,sp,-16
800060a4:	00112623          	sw	ra,12(sp)

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
800060a8:	ce5fa0ef          	jal	ra,80000d8c <memset>
}
800060ac:	00c12083          	lw	ra,12(sp)
800060b0:	01010113          	addi	sp,sp,16
800060b4:	00008067          	ret

800060b8 <z_bss_zero>:
800060b8:	00308013          	addi	zero,ra,3
{
800060bc:	ff010113          	addi	sp,sp,-16
800060c0:	00112623          	sw	ra,12(sp)
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
800060c4:	80008537          	lui	a0,0x80008
800060c8:	5a050613          	addi	a2,a0,1440 # 800085a0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085a1>
800060cc:	800087b7          	lui	a5,0x80008
800060d0:	71c78793          	addi	a5,a5,1820 # 8000871c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000871d>
800060d4:	40c78633          	sub	a2,a5,a2
800060d8:	00000593          	li	a1,0
800060dc:	5a050513          	addi	a0,a0,1440
800060e0:	fbdff0ef          	jal	ra,8000609c <z_early_memset>
}
800060e4:	00c12083          	lw	ra,12(sp)
800060e8:	01010113          	addi	sp,sp,16
800060ec:	00008067          	ret

800060f0 <z_init_cpu>:
800060f0:	00308013          	addi	zero,ra,3
{
800060f4:	ff010113          	addi	sp,sp,-16
800060f8:	00112623          	sw	ra,12(sp)
800060fc:	00812423          	sw	s0,8(sp)
80006100:	00050413          	mv	s0,a0
	init_idle_thread(id);
80006104:	e05ff0ef          	jal	ra,80005f08 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
80006108:	00441793          	slli	a5,s0,0x4
8000610c:	008787b3          	add	a5,a5,s0
80006110:	00379793          	slli	a5,a5,0x3
80006114:	80008737          	lui	a4,0x80008
80006118:	5e870713          	addi	a4,a4,1512 # 800085e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085e9>
8000611c:	00e787b3          	add	a5,a5,a4
80006120:	80008737          	lui	a4,0x80008
80006124:	6f870713          	addi	a4,a4,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006128:	00141693          	slli	a3,s0,0x1
8000612c:	00868633          	add	a2,a3,s0
80006130:	00361613          	slli	a2,a2,0x3
80006134:	00c70633          	add	a2,a4,a2
80006138:	00f62623          	sw	a5,12(a2)
	_kernel.cpus[id].id = id;
8000613c:	00860a23          	sb	s0,20(a2)
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
80006140:	00c41793          	slli	a5,s0,0xc
80006144:	80008637          	lui	a2,0x80008
80006148:	72060613          	addi	a2,a2,1824 # 80008720 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008721>
8000614c:	00c787b3          	add	a5,a5,a2
80006150:	00001637          	lui	a2,0x1
80006154:	00c787b3          	add	a5,a5,a2
	_kernel.cpus[id].irq_stack =
80006158:	008686b3          	add	a3,a3,s0
8000615c:	00369693          	slli	a3,a3,0x3
80006160:	00d70733          	add	a4,a4,a3
80006164:	00f72223          	sw	a5,4(a4)
}
80006168:	00c12083          	lw	ra,12(sp)
8000616c:	00812403          	lw	s0,8(sp)
80006170:	01010113          	addi	sp,sp,16
80006174:	00008067          	ret

80006178 <prepare_multithreading>:
80006178:	00308013          	addi	zero,ra,3
{
8000617c:	fe010113          	addi	sp,sp,-32
80006180:	00112e23          	sw	ra,28(sp)
80006184:	00812c23          	sw	s0,24(sp)
80006188:	00912a23          	sw	s1,20(sp)
8000618c:	01212823          	sw	s2,16(sp)
	z_sched_init();
80006190:	4e8010ef          	jal	ra,80007678 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
80006194:	800087b7          	lui	a5,0x80008
80006198:	800084b7          	lui	s1,0x80008
8000619c:	67048913          	addi	s2,s1,1648 # 80008670 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008671>
800061a0:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
800061a4:	0127ac23          	sw	s2,24(a5)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
800061a8:	800087b7          	lui	a5,0x80008
800061ac:	51078793          	addi	a5,a5,1296 # 80008510 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008511>
800061b0:	00f12223          	sw	a5,4(sp)
800061b4:	00100793          	li	a5,1
800061b8:	00f12023          	sw	a5,0(sp)
800061bc:	00000893          	li	a7,0
800061c0:	00000813          	li	a6,0
800061c4:	00000793          	li	a5,0
800061c8:	00000713          	li	a4,0
800061cc:	800066b7          	lui	a3,0x80006
800061d0:	fbc68693          	addi	a3,a3,-68 # 80005fbc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80005fbd>
800061d4:	00001637          	lui	a2,0x1
800061d8:	8000a5b7          	lui	a1,0x8000a
800061dc:	b2058593          	addi	a1,a1,-1248 # 80009b20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009b21>
800061e0:	67048513          	addi	a0,s1,1648
800061e4:	144000ef          	jal	ra,80006328 <z_setup_new_thread>
800061e8:	00050413          	mv	s0,a0
800061ec:	00d94783          	lbu	a5,13(s2)
800061f0:	ffb7f793          	andi	a5,a5,-5
800061f4:	00f906a3          	sb	a5,13(s2)
	z_ready_thread(&z_main_thread);
800061f8:	67048513          	addi	a0,s1,1648
800061fc:	601000ef          	jal	ra,80006ffc <z_ready_thread>
	z_init_cpu(0);
80006200:	00000513          	li	a0,0
80006204:	eedff0ef          	jal	ra,800060f0 <z_init_cpu>
}
80006208:	00040513          	mv	a0,s0
8000620c:	01c12083          	lw	ra,28(sp)
80006210:	01812403          	lw	s0,24(sp)
80006214:	01412483          	lw	s1,20(sp)
80006218:	01012903          	lw	s2,16(sp)
8000621c:	02010113          	addi	sp,sp,32
80006220:	00008067          	ret

80006224 <z_cstart>:
80006224:	00308013          	addi	zero,ra,3
{
80006228:	f6010113          	addi	sp,sp,-160
8000622c:	08112e23          	sw	ra,156(sp)
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
80006230:	00100793          	li	a5,1
80006234:	00f10aa3          	sb	a5,21(sp)
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
80006238:	00f10a23          	sb	a5,20(sp)
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
8000623c:	08012423          	sw	zero,136(sp)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
80006240:	800087b7          	lui	a5,0x80008
80006244:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006248:	00810713          	addi	a4,sp,8
8000624c:	00e7a423          	sw	a4,8(a5)
	z_device_state_init();
80006250:	b31ff0ef          	jal	ra,80005d80 <z_device_state_init>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
80006254:	00000513          	li	a0,0
80006258:	b4dff0ef          	jal	ra,80005da4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
8000625c:	00100513          	li	a0,1
80006260:	b45ff0ef          	jal	ra,80005da4 <z_sys_init_run_level>
	switch_to_main_thread(prepare_multithreading());
80006264:	f15ff0ef          	jal	ra,80006178 <prepare_multithreading>
80006268:	e25ff0ef          	jal	ra,8000608c <switch_to_main_thread>

8000626c <setup_thread_stack>:
8000626c:	00308013          	addi	zero,ra,3
{
80006270:	ff010113          	addi	sp,sp,-16
80006274:	00112623          	sw	ra,12(sp)
80006278:	00812423          	sw	s0,8(sp)
8000627c:	00058513          	mv	a0,a1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
80006280:	00f60613          	addi	a2,a2,15 # 100f <CONFIG_ISR_STACK_SIZE+0xf>
80006284:	ff067613          	andi	a2,a2,-16
	stack_ptr = (char *)stack + stack_obj_size;
80006288:	00c58433          	add	s0,a1,a2
8000628c:	0aa00593          	li	a1,170
80006290:	afdfa0ef          	jal	ra,80000d8c <memset>
}
80006294:	00040513          	mv	a0,s0
80006298:	00c12083          	lw	ra,12(sp)
8000629c:	00812403          	lw	s0,8(sp)
800062a0:	01010113          	addi	sp,sp,16
800062a4:	00008067          	ret

800062a8 <z_impl_k_thread_start>:
800062a8:	00308013          	addi	zero,ra,3
{
800062ac:	ff010113          	addi	sp,sp,-16
800062b0:	00112623          	sw	ra,12(sp)
	z_sched_start(thread);
800062b4:	5a9000ef          	jal	ra,8000705c <z_sched_start>
}
800062b8:	00c12083          	lw	ra,12(sp)
800062bc:	01010113          	addi	sp,sp,16
800062c0:	00008067          	ret

800062c4 <schedule_new_thread>:
800062c4:	00308013          	addi	zero,ra,3
{
800062c8:	ff010113          	addi	sp,sp,-16
800062cc:	00112623          	sw	ra,12(sp)
800062d0:	00060693          	mv	a3,a2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
800062d4:	00b667b3          	or	a5,a2,a1
800062d8:	00079a63          	bnez	a5,800062ec <schedule_new_thread+0x28>
	z_impl_k_thread_start(thread);
800062dc:	fcdff0ef          	jal	ra,800062a8 <z_impl_k_thread_start>
}
800062e0:	00c12083          	lw	ra,12(sp)
800062e4:	01010113          	addi	sp,sp,16
800062e8:	00008067          	ret
800062ec:	00058613          	mv	a2,a1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
800062f0:	800075b7          	lui	a1,0x80007
800062f4:	0b458593          	addi	a1,a1,180 # 800070b4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800070b5>
800062f8:	01850513          	addi	a0,a0,24
800062fc:	5f8010ef          	jal	ra,800078f4 <z_add_timeout>
80006300:	fe1ff06f          	j	800062e0 <schedule_new_thread+0x1c>

80006304 <z_init_thread_base>:
80006304:	00308013          	addi	zero,ra,3
	thread_base->pended_on = NULL;
80006308:	00052423          	sw	zero,8(a0)
	thread_base->user_options = (uint8_t)options;
8000630c:	00d50623          	sb	a3,12(a0)
	thread_base->thread_state = (uint8_t)initial_state;
80006310:	00c506a3          	sb	a2,13(a0)
	thread_base->prio = priority;
80006314:	00b50723          	sb	a1,14(a0)
	thread_base->sched_locked = 0U;
80006318:	000507a3          	sb	zero,15(a0)
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
8000631c:	00052c23          	sw	zero,24(a0)
	node->prev = NULL;
80006320:	00052e23          	sw	zero,28(a0)
}
80006324:	00008067          	ret

80006328 <z_setup_new_thread>:
80006328:	00308013          	addi	zero,ra,3
{
8000632c:	fe010113          	addi	sp,sp,-32
80006330:	00112e23          	sw	ra,28(sp)
80006334:	00812c23          	sw	s0,24(sp)
80006338:	00912a23          	sw	s1,20(sp)
8000633c:	01212823          	sw	s2,16(sp)
80006340:	01312623          	sw	s3,12(sp)
80006344:	01412423          	sw	s4,8(sp)
80006348:	01512223          	sw	s5,4(sp)
8000634c:	01612023          	sw	s6,0(sp)
80006350:	00050413          	mv	s0,a0
80006354:	00058913          	mv	s2,a1
80006358:	00060493          	mv	s1,a2
8000635c:	00068993          	mv	s3,a3
80006360:	00070a13          	mv	s4,a4
80006364:	00078a93          	mv	s5,a5
80006368:	00080b13          	mv	s6,a6
8000636c:	00088593          	mv	a1,a7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
80006370:	06c50793          	addi	a5,a0,108
	list->head = (sys_dnode_t *)list;
80006374:	06f52623          	sw	a5,108(a0)
	list->tail = (sys_dnode_t *)list;
80006378:	06f52823          	sw	a5,112(a0)
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
8000637c:	02012683          	lw	a3,32(sp)
80006380:	00400613          	li	a2,4
80006384:	f81ff0ef          	jal	ra,80006304 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
80006388:	00048613          	mv	a2,s1
8000638c:	00090593          	mv	a1,s2
80006390:	00040513          	mv	a0,s0
80006394:	ed9ff0ef          	jal	ra,8000626c <setup_thread_stack>
80006398:	00050493          	mv	s1,a0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
8000639c:	000b0813          	mv	a6,s6
800063a0:	000a8793          	mv	a5,s5
800063a4:	000a0713          	mv	a4,s4
800063a8:	00098693          	mv	a3,s3
800063ac:	00050613          	mv	a2,a0
800063b0:	00090593          	mv	a1,s2
800063b4:	00040513          	mv	a0,s0
800063b8:	e91fe0ef          	jal	ra,80005248 <arch_new_thread>
	new_thread->init_data = NULL;
800063bc:	06042423          	sw	zero,104(s0)
	new_thread->resource_pool = _current->resource_pool;
800063c0:	800087b7          	lui	a5,0x80008
800063c4:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
800063c8:	0087a783          	lw	a5,8(a5)
800063cc:	0807a783          	lw	a5,128(a5)
800063d0:	08f42023          	sw	a5,128(s0)
}
800063d4:	00048513          	mv	a0,s1
800063d8:	01c12083          	lw	ra,28(sp)
800063dc:	01812403          	lw	s0,24(sp)
800063e0:	01412483          	lw	s1,20(sp)
800063e4:	01012903          	lw	s2,16(sp)
800063e8:	00c12983          	lw	s3,12(sp)
800063ec:	00812a03          	lw	s4,8(sp)
800063f0:	00412a83          	lw	s5,4(sp)
800063f4:	00012b03          	lw	s6,0(sp)
800063f8:	02010113          	addi	sp,sp,32
800063fc:	00008067          	ret

80006400 <z_init_static_threads>:
80006400:	00308013          	addi	zero,ra,3
{
80006404:	fe010113          	addi	sp,sp,-32
80006408:	00112e23          	sw	ra,28(sp)
8000640c:	00812c23          	sw	s0,24(sp)
80006410:	00912a23          	sw	s1,20(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
80006414:	80008437          	lui	s0,0x80008
80006418:	fa040413          	addi	s0,s0,-96 # 80007fa0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007fa1>
8000641c:	0440006f          	j	80006460 <z_init_static_threads+0x60>
		z_setup_new_thread(
80006420:	02c42783          	lw	a5,44(s0)
80006424:	00f12223          	sw	a5,4(sp)
80006428:	02042783          	lw	a5,32(s0)
8000642c:	00f12023          	sw	a5,0(sp)
80006430:	01c42883          	lw	a7,28(s0)
80006434:	01842803          	lw	a6,24(s0)
80006438:	01442783          	lw	a5,20(s0)
8000643c:	01042703          	lw	a4,16(s0)
80006440:	00c42683          	lw	a3,12(s0)
80006444:	00842603          	lw	a2,8(s0)
80006448:	00442583          	lw	a1,4(s0)
8000644c:	00042503          	lw	a0,0(s0)
80006450:	ed9ff0ef          	jal	ra,80006328 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
80006454:	00042783          	lw	a5,0(s0)
80006458:	0687a423          	sw	s0,104(a5)
	_FOREACH_STATIC_THREAD(thread_data) {
8000645c:	03040413          	addi	s0,s0,48
80006460:	800087b7          	lui	a5,0x80008
80006464:	fa078793          	addi	a5,a5,-96 # 80007fa0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007fa1>
80006468:	faf46ce3          	bltu	s0,a5,80006420 <z_init_static_threads+0x20>
	k_sched_lock();
8000646c:	544000ef          	jal	ra,800069b0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
80006470:	80008437          	lui	s0,0x80008
80006474:	fa040413          	addi	s0,s0,-96 # 80007fa0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007fa1>
80006478:	0440006f          	j	800064bc <z_init_static_threads+0xbc>
					    K_MSEC(thread_data->init_delay));
8000647c:	41f7d593          	srai	a1,a5,0x1f
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
80006480:	0197d713          	srli	a4,a5,0x19
80006484:	00759593          	slli	a1,a1,0x7
80006488:	00b765b3          	or	a1,a4,a1
8000648c:	00779793          	slli	a5,a5,0x7
80006490:	3e778513          	addi	a0,a5,999
80006494:	00f537b3          	sltu	a5,a0,a5
80006498:	3e800613          	li	a2,1000
8000649c:	00000693          	li	a3,0
800064a0:	00b785b3          	add	a1,a5,a1
800064a4:	d41f90ef          	jal	ra,800001e4 <__udivdi3>
			schedule_new_thread(thread_data->init_thread,
800064a8:	00058613          	mv	a2,a1
800064ac:	00050593          	mv	a1,a0
800064b0:	00048513          	mv	a0,s1
800064b4:	e11ff0ef          	jal	ra,800062c4 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
800064b8:	03040413          	addi	s0,s0,48
800064bc:	800087b7          	lui	a5,0x80008
800064c0:	fa078793          	addi	a5,a5,-96 # 80007fa0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007fa1>
800064c4:	02f47063          	bgeu	s0,a5,800064e4 <z_init_static_threads+0xe4>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
800064c8:	02442783          	lw	a5,36(s0)
800064cc:	fff00713          	li	a4,-1
800064d0:	fee784e3          	beq	a5,a4,800064b8 <z_init_static_threads+0xb8>
			schedule_new_thread(thread_data->init_thread,
800064d4:	00042483          	lw	s1,0(s0)
					    K_MSEC(thread_data->init_delay));
800064d8:	fa07d2e3          	bgez	a5,8000647c <z_init_static_threads+0x7c>
800064dc:	00000793          	li	a5,0
800064e0:	f9dff06f          	j	8000647c <z_init_static_threads+0x7c>
	k_sched_unlock();
800064e4:	008010ef          	jal	ra,800074ec <k_sched_unlock>
}
800064e8:	01c12083          	lw	ra,28(sp)
800064ec:	01812403          	lw	s0,24(sp)
800064f0:	01412483          	lw	s1,20(sp)
800064f4:	02010113          	addi	sp,sp,32
800064f8:	00008067          	ret

800064fc <idle>:
800064fc:	00308013          	addi	zero,ra,3
{
80006500:	ff010113          	addi	sp,sp,-16
80006504:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006508:	300477f3          	csrrci	a5,mstatus,8
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
8000650c:	ae5fe0ef          	jal	ra,80004ff0 <arch_cpu_idle>
80006510:	ff9ff06f          	j	80006508 <idle+0xc>

80006514 <new_prio_for_inheritance>:
80006514:	00308013          	addi	zero,ra,3
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
80006518:	00b55463          	bge	a0,a1,80006520 <new_prio_for_inheritance+0xc>
8000651c:	00050593          	mv	a1,a0
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
80006520:	f8100793          	li	a5,-127
80006524:	00f5c663          	blt	a1,a5,80006530 <new_prio_for_inheritance+0x1c>
80006528:	00058513          	mv	a0,a1
8000652c:	00008067          	ret
80006530:	f8100513          	li	a0,-127
}
80006534:	00008067          	ret

80006538 <adjust_owner_prio>:
80006538:	00308013          	addi	zero,ra,3
	if (mutex->owner->base.prio != new_prio) {
8000653c:	00852503          	lw	a0,8(a0)
80006540:	00e50783          	lb	a5,14(a0)
80006544:	00b79663          	bne	a5,a1,80006550 <adjust_owner_prio+0x18>
	return false;
80006548:	00000513          	li	a0,0
}
8000654c:	00008067          	ret
{
80006550:	ff010113          	addi	sp,sp,-16
80006554:	00112623          	sw	ra,12(sp)
		return z_set_prio(mutex->owner, new_prio);
80006558:	645000ef          	jal	ra,8000739c <z_set_prio>
}
8000655c:	00c12083          	lw	ra,12(sp)
80006560:	01010113          	addi	sp,sp,16
80006564:	00008067          	ret

80006568 <z_impl_k_mutex_init>:
80006568:	00308013          	addi	zero,ra,3
	mutex->owner = NULL;
8000656c:	00052423          	sw	zero,8(a0)
	mutex->lock_count = 0U;
80006570:	00052623          	sw	zero,12(a0)
	list->head = (sys_dnode_t *)list;
80006574:	00a52023          	sw	a0,0(a0)
	list->tail = (sys_dnode_t *)list;
80006578:	00a52223          	sw	a0,4(a0)
}
8000657c:	00000513          	li	a0,0
80006580:	00008067          	ret

80006584 <z_impl_k_mutex_lock>:
80006584:	00308013          	addi	zero,ra,3
{
80006588:	fe010113          	addi	sp,sp,-32
8000658c:	00112e23          	sw	ra,28(sp)
80006590:	00812c23          	sw	s0,24(sp)
80006594:	00912a23          	sw	s1,20(sp)
80006598:	01212823          	sw	s2,16(sp)
8000659c:	01312623          	sw	s3,12(sp)
800065a0:	01412423          	sw	s4,8(sp)
800065a4:	00050413          	mv	s0,a0
800065a8:	300474f3          	csrrci	s1,mstatus,8
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
800065ac:	00c52783          	lw	a5,12(a0)
800065b0:	06079063          	bnez	a5,80006610 <z_impl_k_mutex_lock+0x8c>
					_current->base.prio :
800065b4:	10079063          	bnez	a5,800066b4 <z_impl_k_mutex_lock+0x130>
800065b8:	80008737          	lui	a4,0x80008
800065bc:	6f870713          	addi	a4,a4,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
800065c0:	00872703          	lw	a4,8(a4)
800065c4:	00e70703          	lb	a4,14(a4)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
800065c8:	00e42823          	sw	a4,16(s0)
		mutex->lock_count++;
800065cc:	00178793          	addi	a5,a5,1
800065d0:	00f42623          	sw	a5,12(s0)
		mutex->owner = _current;
800065d4:	800087b7          	lui	a5,0x80008
800065d8:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
800065dc:	0087a783          	lw	a5,8(a5)
800065e0:	00f42423          	sw	a5,8(s0)
	__asm__ volatile ("csrs mstatus, %0"
800065e4:	0084f493          	andi	s1,s1,8
800065e8:	3004a073          	csrs	mstatus,s1
		return 0;
800065ec:	00000513          	li	a0,0
}
800065f0:	01c12083          	lw	ra,28(sp)
800065f4:	01812403          	lw	s0,24(sp)
800065f8:	01412483          	lw	s1,20(sp)
800065fc:	01012903          	lw	s2,16(sp)
80006600:	00c12983          	lw	s3,12(sp)
80006604:	00812a03          	lw	s4,8(sp)
80006608:	02010113          	addi	sp,sp,32
8000660c:	00008067          	ret
80006610:	00058993          	mv	s3,a1
80006614:	00060913          	mv	s2,a2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
80006618:	00852683          	lw	a3,8(a0)
8000661c:	80008737          	lui	a4,0x80008
80006620:	6f870713          	addi	a4,a4,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006624:	00872703          	lw	a4,8(a4)
80006628:	f8e686e3          	beq	a3,a4,800065b4 <z_impl_k_mutex_lock+0x30>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
8000662c:	00b667b3          	or	a5,a2,a1
80006630:	08078663          	beqz	a5,800066bc <z_impl_k_mutex_lock+0x138>
					    mutex->owner->base.prio);
80006634:	00e68a03          	lb	s4,14(a3)
	new_prio = new_prio_for_inheritance(_current->base.prio,
80006638:	000a0593          	mv	a1,s4
8000663c:	00e70503          	lb	a0,14(a4)
80006640:	ed5ff0ef          	jal	ra,80006514 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
80006644:	09454463          	blt	a0,s4,800066cc <z_impl_k_mutex_lock+0x148>
	bool resched = false;
80006648:	00000a13          	li	s4,0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
8000664c:	00098693          	mv	a3,s3
80006650:	00090713          	mv	a4,s2
80006654:	00040613          	mv	a2,s0
80006658:	00048593          	mv	a1,s1
8000665c:	80008537          	lui	a0,0x80008
80006660:	71c50513          	addi	a0,a0,1820 # 8000871c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000871d>
80006664:	4e1000ef          	jal	ra,80007344 <z_pend_curr>
	if (got_mutex == 0) {
80006668:	f80504e3          	beqz	a0,800065f0 <z_impl_k_mutex_lock+0x6c>
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000666c:	300474f3          	csrrci	s1,mstatus,8
	if (likely(mutex->owner != NULL)) {
80006670:	00842783          	lw	a5,8(s0)
80006674:	06078a63          	beqz	a5,800066e8 <z_impl_k_mutex_lock+0x164>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
80006678:	00042783          	lw	a5,0(s0)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
8000667c:	06878263          	beq	a5,s0,800066e0 <z_impl_k_mutex_lock+0x15c>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
80006680:	06078063          	beqz	a5,800066e0 <z_impl_k_mutex_lock+0x15c>
80006684:	01042583          	lw	a1,16(s0)
80006688:	00e78503          	lb	a0,14(a5)
8000668c:	e89ff0ef          	jal	ra,80006514 <new_prio_for_inheritance>
80006690:	00050593          	mv	a1,a0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
80006694:	00040513          	mv	a0,s0
80006698:	ea1ff0ef          	jal	ra,80006538 <adjust_owner_prio>
8000669c:	04051863          	bnez	a0,800066ec <z_impl_k_mutex_lock+0x168>
800066a0:	040a1663          	bnez	s4,800066ec <z_impl_k_mutex_lock+0x168>
	__asm__ volatile ("csrs mstatus, %0"
800066a4:	0084f493          	andi	s1,s1,8
800066a8:	3004a073          	csrs	mstatus,s1
	return -EAGAIN;
800066ac:	ff500513          	li	a0,-11
800066b0:	f41ff06f          	j	800065f0 <z_impl_k_mutex_lock+0x6c>
					_current->base.prio :
800066b4:	01042703          	lw	a4,16(s0)
800066b8:	f11ff06f          	j	800065c8 <z_impl_k_mutex_lock+0x44>
800066bc:	0084f493          	andi	s1,s1,8
800066c0:	3004a073          	csrs	mstatus,s1
		return -EBUSY;
800066c4:	ff000513          	li	a0,-16
800066c8:	f29ff06f          	j	800065f0 <z_impl_k_mutex_lock+0x6c>
		resched = adjust_owner_prio(mutex, new_prio);
800066cc:	00050593          	mv	a1,a0
800066d0:	00040513          	mv	a0,s0
800066d4:	e65ff0ef          	jal	ra,80006538 <adjust_owner_prio>
800066d8:	00050a13          	mv	s4,a0
800066dc:	f71ff06f          	j	8000664c <z_impl_k_mutex_lock+0xc8>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
800066e0:	01042583          	lw	a1,16(s0)
800066e4:	fb1ff06f          	j	80006694 <z_impl_k_mutex_lock+0x110>
	if (resched) {
800066e8:	fa0a0ee3          	beqz	s4,800066a4 <z_impl_k_mutex_lock+0x120>
		z_reschedule(&lock, key);
800066ec:	00048593          	mv	a1,s1
800066f0:	80008537          	lui	a0,0x80008
800066f4:	71c50513          	addi	a0,a0,1820 # 8000871c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000871d>
800066f8:	464000ef          	jal	ra,80006b5c <z_reschedule>
	return -EAGAIN;
800066fc:	ff500513          	li	a0,-11
80006700:	ef1ff06f          	j	800065f0 <z_impl_k_mutex_lock+0x6c>

80006704 <z_impl_k_mutex_unlock>:
80006704:	00308013          	addi	zero,ra,3
	CHECKIF(mutex->owner == NULL) {
80006708:	00852703          	lw	a4,8(a0)
8000670c:	0a070663          	beqz	a4,800067b8 <z_impl_k_mutex_unlock+0xb4>
{
80006710:	ff010113          	addi	sp,sp,-16
80006714:	00112623          	sw	ra,12(sp)
80006718:	00812423          	sw	s0,8(sp)
8000671c:	00912223          	sw	s1,4(sp)
80006720:	00050413          	mv	s0,a0
	CHECKIF(mutex->owner != _current) {
80006724:	800087b7          	lui	a5,0x80008
80006728:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
8000672c:	0087a783          	lw	a5,8(a5)
80006730:	08f71863          	bne	a4,a5,800067c0 <z_impl_k_mutex_unlock+0xbc>
	if (mutex->lock_count > 1U) {
80006734:	00c52783          	lw	a5,12(a0)
80006738:	00100713          	li	a4,1
8000673c:	02f77263          	bgeu	a4,a5,80006760 <z_impl_k_mutex_unlock+0x5c>
		mutex->lock_count--;
80006740:	fff78793          	addi	a5,a5,-1
80006744:	00f52623          	sw	a5,12(a0)
	return 0;
80006748:	00000513          	li	a0,0
}
8000674c:	00c12083          	lw	ra,12(sp)
80006750:	00812403          	lw	s0,8(sp)
80006754:	00412483          	lw	s1,4(sp)
80006758:	01010113          	addi	sp,sp,16
8000675c:	00008067          	ret
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006760:	300474f3          	csrrci	s1,mstatus,8
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
80006764:	01052583          	lw	a1,16(a0)
80006768:	dd1ff0ef          	jal	ra,80006538 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
8000676c:	00040513          	mv	a0,s0
80006770:	67d000ef          	jal	ra,800075ec <z_unpend_first_thread>
	mutex->owner = new_owner;
80006774:	00a42423          	sw	a0,8(s0)
	if (new_owner != NULL) {
80006778:	02050663          	beqz	a0,800067a4 <z_impl_k_mutex_unlock+0xa0>
		mutex->owner_orig_prio = new_owner->base.prio;
8000677c:	00e50783          	lb	a5,14(a0)
80006780:	00f42823          	sw	a5,16(s0)
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
80006784:	06052c23          	sw	zero,120(a0)
		z_ready_thread(new_owner);
80006788:	075000ef          	jal	ra,80006ffc <z_ready_thread>
		z_reschedule(&lock, key);
8000678c:	00048593          	mv	a1,s1
80006790:	80008537          	lui	a0,0x80008
80006794:	71c50513          	addi	a0,a0,1820 # 8000871c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000871d>
80006798:	3c4000ef          	jal	ra,80006b5c <z_reschedule>
	return 0;
8000679c:	00000513          	li	a0,0
800067a0:	fadff06f          	j	8000674c <z_impl_k_mutex_unlock+0x48>
		mutex->lock_count = 0U;
800067a4:	00042623          	sw	zero,12(s0)
	__asm__ volatile ("csrs mstatus, %0"
800067a8:	0084f493          	andi	s1,s1,8
800067ac:	3004a073          	csrs	mstatus,s1
	return 0;
800067b0:	00000513          	li	a0,0
800067b4:	f99ff06f          	j	8000674c <z_impl_k_mutex_unlock+0x48>
		return -EINVAL;
800067b8:	fea00513          	li	a0,-22
}
800067bc:	00008067          	ret
		return -EPERM;
800067c0:	fff00513          	li	a0,-1
800067c4:	f89ff06f          	j	8000674c <z_impl_k_mutex_unlock+0x48>

800067c8 <sliceable>:
800067c8:	00308013          	addi	zero,ra,3
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
800067cc:	00e55703          	lhu	a4,14(a0)
		&& !z_is_idle_thread_object(thread);
800067d0:	07f00793          	li	a5,127
800067d4:	02e7ea63          	bltu	a5,a4,80006808 <sliceable+0x40>
	uint8_t state = thread->base.thread_state;
800067d8:	00d54783          	lbu	a5,13(a0)
		&& !z_is_thread_prevented_from_running(thread)
800067dc:	01f7f793          	andi	a5,a5,31
800067e0:	02079863          	bnez	a5,80006810 <sliceable+0x48>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
800067e4:	00e50703          	lb	a4,14(a0)
800067e8:	800087b7          	lui	a5,0x80008
800067ec:	5d87a783          	lw	a5,1496(a5) # 800085d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085d9>
800067f0:	02f74463          	blt	a4,a5,80006818 <sliceable+0x50>
		&& !z_is_idle_thread_object(thread);
800067f4:	800087b7          	lui	a5,0x80008
800067f8:	5e878793          	addi	a5,a5,1512 # 800085e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085e9>
800067fc:	02f50263          	beq	a0,a5,80006820 <sliceable+0x58>
80006800:	00100513          	li	a0,1
80006804:	00008067          	ret
80006808:	00000513          	li	a0,0
8000680c:	00008067          	ret
80006810:	00000513          	li	a0,0
80006814:	00008067          	ret
80006818:	00000513          	li	a0,0
8000681c:	00008067          	ret
80006820:	00000513          	li	a0,0
}
80006824:	00008067          	ret

80006828 <thread_active_elsewhere>:
80006828:	00308013          	addi	zero,ra,3
}
8000682c:	00000513          	li	a0,0
80006830:	00008067          	ret

80006834 <pended_on_thread>:
80006834:	00308013          	addi	zero,ra,3
}
80006838:	00852503          	lw	a0,8(a0)
8000683c:	00008067          	ret

80006840 <add_thread_timeout>:
80006840:	00308013          	addi	zero,ra,3
{
80006844:	00060693          	mv	a3,a2
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
80006848:	fff00793          	li	a5,-1
8000684c:	00b79663          	bne	a5,a1,80006858 <add_thread_timeout+0x18>
80006850:	00f61463          	bne	a2,a5,80006858 <add_thread_timeout+0x18>
80006854:	00008067          	ret
{
80006858:	ff010113          	addi	sp,sp,-16
8000685c:	00112623          	sw	ra,12(sp)
80006860:	00058613          	mv	a2,a1
80006864:	800075b7          	lui	a1,0x80007
80006868:	0b458593          	addi	a1,a1,180 # 800070b4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800070b5>
8000686c:	01850513          	addi	a0,a0,24
80006870:	084010ef          	jal	ra,800078f4 <z_add_timeout>
}
80006874:	00c12083          	lw	ra,12(sp)
80006878:	01010113          	addi	sp,sp,16
8000687c:	00008067          	ret

80006880 <z_sched_prio_cmp>:
80006880:	00308013          	addi	zero,ra,3
	int32_t b1 = thread_1->base.prio;
80006884:	00e50783          	lb	a5,14(a0)
	int32_t b2 = thread_2->base.prio;
80006888:	00e58503          	lb	a0,14(a1)
	if (b1 != b2) {
8000688c:	00a78663          	beq	a5,a0,80006898 <z_sched_prio_cmp+0x18>
		return b2 - b1;
80006890:	40f50533          	sub	a0,a0,a5
80006894:	00008067          	ret
	return 0;
80006898:	00000513          	li	a0,0
}
8000689c:	00008067          	ret

800068a0 <z_reset_time_slice>:
800068a0:	00308013          	addi	zero,ra,3
{
800068a4:	ff010113          	addi	sp,sp,-16
800068a8:	00112623          	sw	ra,12(sp)
800068ac:	00812423          	sw	s0,8(sp)
	int ret = slice_ticks;
800068b0:	800087b7          	lui	a5,0x80008
800068b4:	5dc7a403          	lw	s0,1500(a5) # 800085dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085dd>
	if (slice_time(curr) != 0) {
800068b8:	00041a63          	bnez	s0,800068cc <z_reset_time_slice+0x2c>
}
800068bc:	00c12083          	lw	ra,12(sp)
800068c0:	00812403          	lw	s0,8(sp)
800068c4:	01010113          	addi	sp,sp,16
800068c8:	00008067          	ret
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
800068cc:	c74ff0ef          	jal	ra,80005d40 <sys_clock_elapsed>
800068d0:	00a40433          	add	s0,s0,a0
800068d4:	800087b7          	lui	a5,0x80008
800068d8:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
800068dc:	0087a823          	sw	s0,16(a5)
		z_set_timeout_expiry(slice_time(curr), false);
800068e0:	00000593          	li	a1,0
800068e4:	800087b7          	lui	a5,0x80008
800068e8:	5dc7a503          	lw	a0,1500(a5) # 800085dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085dd>
800068ec:	248010ef          	jal	ra,80007b34 <z_set_timeout_expiry>
}
800068f0:	fcdff06f          	j	800068bc <z_reset_time_slice+0x1c>

800068f4 <k_sched_time_slice_set>:
800068f4:	00308013          	addi	zero,ra,3
{
800068f8:	ff010113          	addi	sp,sp,-16
800068fc:	00112623          	sw	ra,12(sp)
80006900:	00812423          	sw	s0,8(sp)
80006904:	00912223          	sw	s1,4(sp)
80006908:	01212023          	sw	s2,0(sp)
8000690c:	00050413          	mv	s0,a0
80006910:	00058493          	mv	s1,a1
	LOCKED(&sched_spinlock) {
80006914:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006918:	30047973          	csrrci	s2,mstatus,8
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
8000691c:	0300006f          	j	8000694c <k_sched_time_slice_set+0x58>
			slice_ticks = MAX(2, slice_ticks);
80006920:	800087b7          	lui	a5,0x80008
80006924:	5ca7ae23          	sw	a0,1500(a5) # 800085dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085dd>
		slice_max_prio = prio;
80006928:	800087b7          	lui	a5,0x80008
8000692c:	5c97ac23          	sw	s1,1496(a5) # 800085d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085d9>
		z_reset_time_slice(_current);
80006930:	800087b7          	lui	a5,0x80008
80006934:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006938:	0087a503          	lw	a0,8(a5)
8000693c:	f65ff0ef          	jal	ra,800068a0 <z_reset_time_slice>
			  : "r" (key & MSTATUS_IEN)
80006940:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80006944:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80006948:	00100793          	li	a5,1
8000694c:	04079663          	bnez	a5,80006998 <k_sched_time_slice_set+0xa4>
		_current_cpu->slice_ticks = 0;
80006950:	800087b7          	lui	a5,0x80008
80006954:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006958:	0007a823          	sw	zero,16(a5)
			return (uint32_t)((t * to_hz + off) / from_hz);
8000695c:	01945593          	srli	a1,s0,0x19
80006960:	00741793          	slli	a5,s0,0x7
80006964:	3e778513          	addi	a0,a5,999
80006968:	00f537b3          	sltu	a5,a0,a5
8000696c:	3e800613          	li	a2,1000
80006970:	00000693          	li	a3,0
80006974:	00b785b3          	add	a1,a5,a1
80006978:	86df90ef          	jal	ra,800001e4 <__udivdi3>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
8000697c:	800087b7          	lui	a5,0x80008
80006980:	5ca7ae23          	sw	a0,1500(a5) # 800085dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085dd>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
80006984:	fa8052e3          	blez	s0,80006928 <k_sched_time_slice_set+0x34>
			slice_ticks = MAX(2, slice_ticks);
80006988:	00200793          	li	a5,2
8000698c:	f8f55ae3          	bge	a0,a5,80006920 <k_sched_time_slice_set+0x2c>
80006990:	00200513          	li	a0,2
80006994:	f8dff06f          	j	80006920 <k_sched_time_slice_set+0x2c>
}
80006998:	00c12083          	lw	ra,12(sp)
8000699c:	00812403          	lw	s0,8(sp)
800069a0:	00412483          	lw	s1,4(sp)
800069a4:	00012903          	lw	s2,0(sp)
800069a8:	01010113          	addi	sp,sp,16
800069ac:	00008067          	ret

800069b0 <k_sched_lock>:
800069b0:	00308013          	addi	zero,ra,3
	LOCKED(&sched_spinlock) {
800069b4:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800069b8:	300476f3          	csrrci	a3,mstatus,8
800069bc:	0280006f          	j	800069e4 <k_sched_lock+0x34>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
800069c0:	800087b7          	lui	a5,0x80008
800069c4:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
800069c8:	0087a703          	lw	a4,8(a5)
800069cc:	00f74783          	lbu	a5,15(a4)
800069d0:	fff78793          	addi	a5,a5,-1
800069d4:	00f707a3          	sb	a5,15(a4)
			  : "r" (key & MSTATUS_IEN)
800069d8:	0086f793          	andi	a5,a3,8
	__asm__ volatile ("csrs mstatus, %0"
800069dc:	3007a073          	csrs	mstatus,a5
800069e0:	00100793          	li	a5,1
800069e4:	fc078ee3          	beqz	a5,800069c0 <k_sched_lock+0x10>
}
800069e8:	00008067          	ret

800069ec <z_swap_next_thread>:
800069ec:	00308013          	addi	zero,ra,3
	return _kernel.ready_q.cache;
800069f0:	800087b7          	lui	a5,0x80008
}
800069f4:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
800069f8:	0187a503          	lw	a0,24(a5)
800069fc:	00008067          	ret

80006a00 <z_swap_irqlock>:
80006a00:	00308013          	addi	zero,ra,3
{
80006a04:	ff010113          	addi	sp,sp,-16
80006a08:	00112623          	sw	ra,12(sp)
80006a0c:	00812423          	sw	s0,8(sp)
80006a10:	00912223          	sw	s1,4(sp)
80006a14:	01212023          	sw	s2,0(sp)
80006a18:	00050413          	mv	s0,a0
	old_thread = _current;
80006a1c:	800087b7          	lui	a5,0x80008
80006a20:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006a24:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
80006a28:	ff500793          	li	a5,-11
80006a2c:	06f92c23          	sw	a5,120(s2)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006a30:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80006a34:	fb9ff0ef          	jal	ra,800069ec <z_swap_next_thread>
	if (new_thread != old_thread) {
80006a38:	02a90263          	beq	s2,a0,80006a5c <z_swap_irqlock+0x5c>
80006a3c:	00050493          	mv	s1,a0
		_current_cpu->current = new_thread;
80006a40:	800087b7          	lui	a5,0x80008
80006a44:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006a48:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
80006a4c:	e55ff0ef          	jal	ra,800068a0 <z_reset_time_slice>
80006a50:	00090593          	mv	a1,s2
80006a54:	07c4a503          	lw	a0,124(s1)
80006a58:	f44fe0ef          	jal	ra,8000519c <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
80006a5c:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80006a60:	30042073          	csrs	mstatus,s0
	return _current->swap_retval;
80006a64:	800087b7          	lui	a5,0x80008
80006a68:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006a6c:	0087a783          	lw	a5,8(a5)
}
80006a70:	0787a503          	lw	a0,120(a5)
80006a74:	00c12083          	lw	ra,12(sp)
80006a78:	00812403          	lw	s0,8(sp)
80006a7c:	00412483          	lw	s1,4(sp)
80006a80:	00012903          	lw	s2,0(sp)
80006a84:	01010113          	addi	sp,sp,16
80006a88:	00008067          	ret

80006a8c <z_reschedule_irqlock>:
80006a8c:	00308013          	addi	zero,ra,3
			  : "memory");
}

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	return (key & MSTATUS_IEN) != 0;
80006a90:	00857793          	andi	a5,a0,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
80006a94:	02078463          	beqz	a5,80006abc <z_reschedule_irqlock+0x30>
	bool ret = arch_curr_cpu()->nested != 0U;

	arch_irq_unlock(key);
	return ret;
#else
	return _kernel.cpus[0].nested != 0U;
80006a98:	80008737          	lui	a4,0x80008
80006a9c:	6f872703          	lw	a4,1784(a4) # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006aa0:	00071e63          	bnez	a4,80006abc <z_reschedule_irqlock+0x30>
{
80006aa4:	ff010113          	addi	sp,sp,-16
80006aa8:	00112623          	sw	ra,12(sp)
		z_swap_irqlock(key);
80006aac:	f55ff0ef          	jal	ra,80006a00 <z_swap_irqlock>
}
80006ab0:	00c12083          	lw	ra,12(sp)
80006ab4:	01010113          	addi	sp,sp,16
80006ab8:	00008067          	ret
	__asm__ volatile ("csrs mstatus, %0"
80006abc:	3007a073          	csrs	mstatus,a5
		signal_pending_ipi();
80006ac0:	00008067          	ret

80006ac4 <z_swap>:
80006ac4:	00308013          	addi	zero,ra,3
{
80006ac8:	ff010113          	addi	sp,sp,-16
80006acc:	00112623          	sw	ra,12(sp)
80006ad0:	00812423          	sw	s0,8(sp)
80006ad4:	00912223          	sw	s1,4(sp)
80006ad8:	01212023          	sw	s2,0(sp)
80006adc:	00058413          	mv	s0,a1
	old_thread = _current;
80006ae0:	800087b7          	lui	a5,0x80008
80006ae4:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006ae8:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
80006aec:	ff500793          	li	a5,-11
80006af0:	06f92c23          	sw	a5,120(s2)
	if (!is_spinlock || lock != &sched_spinlock) {
80006af4:	800087b7          	lui	a5,0x80008
80006af8:	71c78793          	addi	a5,a5,1820 # 8000871c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000871d>
80006afc:	00a78463          	beq	a5,a0,80006b04 <z_swap+0x40>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006b00:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80006b04:	ee9ff0ef          	jal	ra,800069ec <z_swap_next_thread>
80006b08:	00050493          	mv	s1,a0
	if (new_thread != old_thread) {
80006b0c:	02a90063          	beq	s2,a0,80006b2c <z_swap+0x68>
		_current_cpu->current = new_thread;
80006b10:	800087b7          	lui	a5,0x80008
80006b14:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006b18:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
80006b1c:	d85ff0ef          	jal	ra,800068a0 <z_reset_time_slice>
	z_riscv_switch(new, old);
80006b20:	00090593          	mv	a1,s2
80006b24:	07c4a503          	lw	a0,124(s1)
80006b28:	e74fe0ef          	jal	ra,8000519c <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
80006b2c:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80006b30:	30042073          	csrs	mstatus,s0
	return _current->swap_retval;
80006b34:	800087b7          	lui	a5,0x80008
80006b38:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006b3c:	0087a783          	lw	a5,8(a5)
}
80006b40:	0787a503          	lw	a0,120(a5)
80006b44:	00c12083          	lw	ra,12(sp)
80006b48:	00812403          	lw	s0,8(sp)
80006b4c:	00412483          	lw	s1,4(sp)
80006b50:	00012903          	lw	s2,0(sp)
80006b54:	01010113          	addi	sp,sp,16
80006b58:	00008067          	ret

80006b5c <z_reschedule>:
80006b5c:	00308013          	addi	zero,ra,3
	return (key & MSTATUS_IEN) != 0;
80006b60:	0085f793          	andi	a5,a1,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
80006b64:	02078e63          	beqz	a5,80006ba0 <z_reschedule+0x44>
	return _kernel.cpus[0].nested != 0U;
80006b68:	80008737          	lui	a4,0x80008
80006b6c:	6f872703          	lw	a4,1784(a4) # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006b70:	02071863          	bnez	a4,80006ba0 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
80006b74:	80008737          	lui	a4,0x80008
80006b78:	6f870713          	addi	a4,a4,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006b7c:	01872683          	lw	a3,24(a4)
	return new_thread != _current;
80006b80:	00872703          	lw	a4,8(a4)
	if (resched(key.key) && need_swap()) {
80006b84:	00e68e63          	beq	a3,a4,80006ba0 <z_reschedule+0x44>
{
80006b88:	ff010113          	addi	sp,sp,-16
80006b8c:	00112623          	sw	ra,12(sp)
		z_swap(lock, key);
80006b90:	f35ff0ef          	jal	ra,80006ac4 <z_swap>
}
80006b94:	00c12083          	lw	ra,12(sp)
80006b98:	01010113          	addi	sp,sp,16
80006b9c:	00008067          	ret
	__asm__ volatile ("csrs mstatus, %0"
80006ba0:	3007a073          	csrs	mstatus,a5
		signal_pending_ipi();
80006ba4:	00008067          	ret

80006ba8 <z_get_next_switch_handle>:
80006ba8:	00308013          	addi	zero,ra,3
	z_sched_usage_switch(_kernel.ready_q.cache);
80006bac:	800087b7          	lui	a5,0x80008
80006bb0:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006bb4:	0187a703          	lw	a4,24(a5)
	_current->switch_handle = interrupted;
80006bb8:	0087a683          	lw	a3,8(a5)
80006bbc:	06a6ae23          	sw	a0,124(a3)
	_current_cpu->current = new_thread;
80006bc0:	00e7a423          	sw	a4,8(a5)
}
80006bc4:	07c72503          	lw	a0,124(a4)
80006bc8:	00008067          	ret

80006bcc <z_priq_dumb_remove>:
80006bcc:	00308013          	addi	zero,ra,3
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
80006bd0:	0045a703          	lw	a4,4(a1)
	sys_dnode_t *const next = node->next;
80006bd4:	0005a783          	lw	a5,0(a1)

	prev->next = next;
80006bd8:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
80006bdc:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
80006be0:	0005a023          	sw	zero,0(a1)
	node->prev = NULL;
80006be4:	0005a223          	sw	zero,4(a1)
}
80006be8:	00008067          	ret

80006bec <unpend_thread_no_timeout>:
80006bec:	00308013          	addi	zero,ra,3
{
80006bf0:	ff010113          	addi	sp,sp,-16
80006bf4:	00112623          	sw	ra,12(sp)
80006bf8:	00812423          	sw	s0,8(sp)
80006bfc:	00050413          	mv	s0,a0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
80006c00:	c35ff0ef          	jal	ra,80006834 <pended_on_thread>
80006c04:	00040593          	mv	a1,s0
80006c08:	fc5ff0ef          	jal	ra,80006bcc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
80006c0c:	00d44783          	lbu	a5,13(s0)
80006c10:	ffd7f793          	andi	a5,a5,-3
80006c14:	00f406a3          	sb	a5,13(s0)
	thread->base.pended_on = NULL;
80006c18:	00042423          	sw	zero,8(s0)
}
80006c1c:	00c12083          	lw	ra,12(sp)
80006c20:	00812403          	lw	s0,8(sp)
80006c24:	01010113          	addi	sp,sp,16
80006c28:	00008067          	ret

80006c2c <z_priq_dumb_best>:
80006c2c:	00308013          	addi	zero,ra,3
{
80006c30:	00050793          	mv	a5,a0
	return list->head == list;
80006c34:	00052503          	lw	a0,0(a0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80006c38:	00a78463          	beq	a5,a0,80006c40 <z_priq_dumb_best+0x14>
}
80006c3c:	00008067          	ret
	struct k_thread *thread = NULL;
80006c40:	00000513          	li	a0,0
	return thread;
80006c44:	ff9ff06f          	j	80006c3c <z_priq_dumb_best+0x10>

80006c48 <update_cache>:
80006c48:	00308013          	addi	zero,ra,3
{
80006c4c:	ff010113          	addi	sp,sp,-16
80006c50:	00112623          	sw	ra,12(sp)
80006c54:	00812423          	sw	s0,8(sp)
80006c58:	00912223          	sw	s1,4(sp)
80006c5c:	00050493          	mv	s1,a0
	return _priq_run_best(curr_cpu_runq());
80006c60:	80008537          	lui	a0,0x80008
80006c64:	71450513          	addi	a0,a0,1812 # 80008714 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008715>
80006c68:	fc5ff0ef          	jal	ra,80006c2c <z_priq_dumb_best>
80006c6c:	00050413          	mv	s0,a0
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
80006c70:	02050e63          	beqz	a0,80006cac <update_cache+0x64>
	if (preempt_ok != 0) {
80006c74:	04049463          	bnez	s1,80006cbc <update_cache+0x74>
	if (z_is_thread_prevented_from_running(_current)) {
80006c78:	800087b7          	lui	a5,0x80008
80006c7c:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006c80:	0087a703          	lw	a4,8(a5)
	uint8_t state = thread->base.thread_state;
80006c84:	00d74783          	lbu	a5,13(a4)
80006c88:	01f7f793          	andi	a5,a5,31
80006c8c:	02079863          	bnez	a5,80006cbc <update_cache+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
80006c90:	00e75683          	lhu	a3,14(a4)
	if (is_preempt(_current) || is_metairq(thread)) {
80006c94:	07f00793          	li	a5,127
80006c98:	02d7f263          	bgeu	a5,a3,80006cbc <update_cache+0x74>
		_kernel.ready_q.cache = _current;
80006c9c:	800087b7          	lui	a5,0x80008
80006ca0:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006ca4:	00e7ac23          	sw	a4,24(a5)
80006ca8:	0380006f          	j	80006ce0 <update_cache+0x98>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
80006cac:	800087b7          	lui	a5,0x80008
80006cb0:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006cb4:	00c7a403          	lw	s0,12(a5)
80006cb8:	fbdff06f          	j	80006c74 <update_cache+0x2c>
		if (thread != _current) {
80006cbc:	800087b7          	lui	a5,0x80008
80006cc0:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006cc4:	0087a783          	lw	a5,8(a5)
80006cc8:	00878663          	beq	a5,s0,80006cd4 <update_cache+0x8c>
			z_reset_time_slice(thread);
80006ccc:	00040513          	mv	a0,s0
80006cd0:	bd1ff0ef          	jal	ra,800068a0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
80006cd4:	800087b7          	lui	a5,0x80008
80006cd8:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006cdc:	0087ac23          	sw	s0,24(a5)
}
80006ce0:	00c12083          	lw	ra,12(sp)
80006ce4:	00812403          	lw	s0,8(sp)
80006ce8:	00412483          	lw	s1,4(sp)
80006cec:	01010113          	addi	sp,sp,16
80006cf0:	00008067          	ret

80006cf4 <move_thread_to_end_of_prio_q>:
80006cf4:	00308013          	addi	zero,ra,3
{
80006cf8:	ff010113          	addi	sp,sp,-16
80006cfc:	00112623          	sw	ra,12(sp)
80006d00:	00812423          	sw	s0,8(sp)
80006d04:	00912223          	sw	s1,4(sp)
80006d08:	00050493          	mv	s1,a0
	return (thread->base.thread_state & state) != 0U;
80006d0c:	00d54783          	lbu	a5,13(a0)
	if (z_is_thread_queued(thread)) {
80006d10:	01879713          	slli	a4,a5,0x18
80006d14:	41875713          	srai	a4,a4,0x18
80006d18:	02074863          	bltz	a4,80006d48 <move_thread_to_end_of_prio_q+0x54>
	thread->base.thread_state |= _THREAD_QUEUED;
80006d1c:	00d4c783          	lbu	a5,13(s1)
80006d20:	f807e793          	ori	a5,a5,-128
80006d24:	00f486a3          	sb	a5,13(s1)
	return list->head == list;
80006d28:	800087b7          	lui	a5,0x80008
80006d2c:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006d30:	01c7a403          	lw	s0,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80006d34:	800087b7          	lui	a5,0x80008
80006d38:	71478793          	addi	a5,a5,1812 # 80008714 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008715>
80006d3c:	04f41263          	bne	s0,a5,80006d80 <move_thread_to_end_of_prio_q+0x8c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80006d40:	00000413          	li	s0,0
80006d44:	03c0006f          	j	80006d80 <move_thread_to_end_of_prio_q+0x8c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
80006d48:	07f7f793          	andi	a5,a5,127
80006d4c:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
80006d50:	00050593          	mv	a1,a0
80006d54:	80008537          	lui	a0,0x80008
80006d58:	71450513          	addi	a0,a0,1812 # 80008714 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008715>
80006d5c:	e71ff0ef          	jal	ra,80006bcc <z_priq_dumb_remove>
}
80006d60:	fbdff06f          	j	80006d1c <move_thread_to_end_of_prio_q+0x28>
	sys_dnode_t *const prev = successor->prev;
80006d64:	00442783          	lw	a5,4(s0)
	node->prev = prev;
80006d68:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
80006d6c:	0084a023          	sw	s0,0(s1)
	prev->next = node;
80006d70:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
80006d74:	00942223          	sw	s1,4(s0)
}
80006d78:	05c0006f          	j	80006dd4 <move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80006d7c:	00000413          	li	s0,0
80006d80:	02040863          	beqz	s0,80006db0 <move_thread_to_end_of_prio_q+0xbc>
		if (z_sched_prio_cmp(thread, t) > 0) {
80006d84:	00040593          	mv	a1,s0
80006d88:	00048513          	mv	a0,s1
80006d8c:	af5ff0ef          	jal	ra,80006880 <z_sched_prio_cmp>
80006d90:	fca04ae3          	bgtz	a0,80006d64 <move_thread_to_end_of_prio_q+0x70>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80006d94:	fe0406e3          	beqz	s0,80006d80 <move_thread_to_end_of_prio_q+0x8c>
	return (node == list->tail) ? NULL : node->next;
80006d98:	800087b7          	lui	a5,0x80008
80006d9c:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006da0:	0207a783          	lw	a5,32(a5)
80006da4:	fcf40ce3          	beq	s0,a5,80006d7c <move_thread_to_end_of_prio_q+0x88>
80006da8:	00042403          	lw	s0,0(s0)
80006dac:	fd5ff06f          	j	80006d80 <move_thread_to_end_of_prio_q+0x8c>
	sys_dnode_t *const tail = list->tail;
80006db0:	800087b7          	lui	a5,0x80008
80006db4:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006db8:	0207a683          	lw	a3,32(a5)
	node->next = list;
80006dbc:	80008737          	lui	a4,0x80008
80006dc0:	71470713          	addi	a4,a4,1812 # 80008714 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008715>
80006dc4:	00e4a023          	sw	a4,0(s1)
	node->prev = tail;
80006dc8:	00d4a223          	sw	a3,4(s1)
	tail->next = node;
80006dcc:	0096a023          	sw	s1,0(a3)
	list->tail = node;
80006dd0:	0297a023          	sw	s1,32(a5)
	update_cache(thread == _current);
80006dd4:	800087b7          	lui	a5,0x80008
80006dd8:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006ddc:	0087a503          	lw	a0,8(a5)
80006de0:	40950533          	sub	a0,a0,s1
80006de4:	00153513          	seqz	a0,a0
80006de8:	e61ff0ef          	jal	ra,80006c48 <update_cache>
}
80006dec:	00c12083          	lw	ra,12(sp)
80006df0:	00812403          	lw	s0,8(sp)
80006df4:	00412483          	lw	s1,4(sp)
80006df8:	01010113          	addi	sp,sp,16
80006dfc:	00008067          	ret

80006e00 <slice_expired_locked>:
80006e00:	00308013          	addi	zero,ra,3
{
80006e04:	ff010113          	addi	sp,sp,-16
80006e08:	00112623          	sw	ra,12(sp)
80006e0c:	00812423          	sw	s0,8(sp)
80006e10:	00912223          	sw	s1,4(sp)
80006e14:	00050413          	mv	s0,a0
	struct k_thread *curr = _current;
80006e18:	800087b7          	lui	a5,0x80008
80006e1c:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006e20:	0087a483          	lw	s1,8(a5)
	uint8_t state = thread->base.thread_state;
80006e24:	00d4c783          	lbu	a5,13(s1)
	if (!z_is_thread_prevented_from_running(curr)) {
80006e28:	01f7f793          	andi	a5,a5,31
80006e2c:	02078263          	beqz	a5,80006e50 <slice_expired_locked+0x50>
	z_reset_time_slice(curr);
80006e30:	00048513          	mv	a0,s1
80006e34:	a6dff0ef          	jal	ra,800068a0 <z_reset_time_slice>
}
80006e38:	00040513          	mv	a0,s0
80006e3c:	00c12083          	lw	ra,12(sp)
80006e40:	00812403          	lw	s0,8(sp)
80006e44:	00412483          	lw	s1,4(sp)
80006e48:	01010113          	addi	sp,sp,16
80006e4c:	00008067          	ret
		move_thread_to_end_of_prio_q(curr);
80006e50:	00048513          	mv	a0,s1
80006e54:	ea1ff0ef          	jal	ra,80006cf4 <move_thread_to_end_of_prio_q>
80006e58:	fd9ff06f          	j	80006e30 <slice_expired_locked+0x30>

80006e5c <z_time_slice>:
80006e5c:	00308013          	addi	zero,ra,3
{
80006e60:	ff010113          	addi	sp,sp,-16
80006e64:	00112623          	sw	ra,12(sp)
80006e68:	00812423          	sw	s0,8(sp)
80006e6c:	00912223          	sw	s1,4(sp)
80006e70:	01212023          	sw	s2,0(sp)
80006e74:	00050913          	mv	s2,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006e78:	300474f3          	csrrci	s1,mstatus,8
80006e7c:	00048413          	mv	s0,s1
	if (slice_time(_current) && sliceable(_current)) {
80006e80:	800087b7          	lui	a5,0x80008
80006e84:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006e88:	0087a503          	lw	a0,8(a5)
	int ret = slice_ticks;
80006e8c:	800087b7          	lui	a5,0x80008
80006e90:	5dc7a783          	lw	a5,1500(a5) # 800085dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085dd>
	if (slice_time(_current) && sliceable(_current)) {
80006e94:	04078063          	beqz	a5,80006ed4 <z_time_slice+0x78>
80006e98:	931ff0ef          	jal	ra,800067c8 <sliceable>
80006e9c:	02050c63          	beqz	a0,80006ed4 <z_time_slice+0x78>
		if (ticks >= _current_cpu->slice_ticks) {
80006ea0:	800087b7          	lui	a5,0x80008
80006ea4:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006ea8:	0107a783          	lw	a5,16(a5)
80006eac:	00f95c63          	bge	s2,a5,80006ec4 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
80006eb0:	80008737          	lui	a4,0x80008
80006eb4:	412787b3          	sub	a5,a5,s2
80006eb8:	6f870713          	addi	a4,a4,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006ebc:	00f72823          	sw	a5,16(a4)
80006ec0:	0200006f          	j	80006ee0 <z_time_slice+0x84>
			key = slice_expired_locked(key);
80006ec4:	00048513          	mv	a0,s1
80006ec8:	f39ff0ef          	jal	ra,80006e00 <slice_expired_locked>
80006ecc:	00050413          	mv	s0,a0
80006ed0:	0100006f          	j	80006ee0 <z_time_slice+0x84>
		_current_cpu->slice_ticks = 0;
80006ed4:	800087b7          	lui	a5,0x80008
80006ed8:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006edc:	0007a823          	sw	zero,16(a5)
			  : "r" (key & MSTATUS_IEN)
80006ee0:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80006ee4:	30042073          	csrs	mstatus,s0
}
80006ee8:	00c12083          	lw	ra,12(sp)
80006eec:	00812403          	lw	s0,8(sp)
80006ef0:	00412483          	lw	s1,4(sp)
80006ef4:	00012903          	lw	s2,0(sp)
80006ef8:	01010113          	addi	sp,sp,16
80006efc:	00008067          	ret

80006f00 <ready_thread>:
80006f00:	00308013          	addi	zero,ra,3
	return (thread->base.thread_state & state) != 0U;
80006f04:	00d54783          	lbu	a5,13(a0)
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
80006f08:	01879713          	slli	a4,a5,0x18
80006f0c:	41875713          	srai	a4,a4,0x18
80006f10:	0e074463          	bltz	a4,80006ff8 <ready_thread+0xf8>
{
80006f14:	ff010113          	addi	sp,sp,-16
80006f18:	00112623          	sw	ra,12(sp)
80006f1c:	00812423          	sw	s0,8(sp)
80006f20:	00912223          	sw	s1,4(sp)
80006f24:	01212023          	sw	s2,0(sp)
80006f28:	00050413          	mv	s0,a0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
80006f2c:	01f7f713          	andi	a4,a5,31
80006f30:	00071663          	bnez	a4,80006f3c <ready_thread+0x3c>
	return node->next != NULL;
80006f34:	01852903          	lw	s2,24(a0)
80006f38:	00090e63          	beqz	s2,80006f54 <ready_thread+0x54>
}
80006f3c:	00c12083          	lw	ra,12(sp)
80006f40:	00812403          	lw	s0,8(sp)
80006f44:	00412483          	lw	s1,4(sp)
80006f48:	00012903          	lw	s2,0(sp)
80006f4c:	01010113          	addi	sp,sp,16
80006f50:	00008067          	ret
	thread->base.thread_state |= _THREAD_QUEUED;
80006f54:	f807e793          	ori	a5,a5,-128
80006f58:	00f506a3          	sb	a5,13(a0)
	return list->head == list;
80006f5c:	800087b7          	lui	a5,0x80008
80006f60:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006f64:	01c7a483          	lw	s1,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80006f68:	800087b7          	lui	a5,0x80008
80006f6c:	71478793          	addi	a5,a5,1812 # 80008714 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008715>
80006f70:	02f49463          	bne	s1,a5,80006f98 <ready_thread+0x98>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80006f74:	00090493          	mv	s1,s2
80006f78:	0200006f          	j	80006f98 <ready_thread+0x98>
	sys_dnode_t *const prev = successor->prev;
80006f7c:	0044a783          	lw	a5,4(s1)
	node->prev = prev;
80006f80:	00f42223          	sw	a5,4(s0)
	node->next = successor;
80006f84:	00942023          	sw	s1,0(s0)
	prev->next = node;
80006f88:	0087a023          	sw	s0,0(a5)
	successor->prev = node;
80006f8c:	0084a223          	sw	s0,4(s1)
}
80006f90:	05c0006f          	j	80006fec <ready_thread+0xec>
80006f94:	00090493          	mv	s1,s2
80006f98:	02048863          	beqz	s1,80006fc8 <ready_thread+0xc8>
		if (z_sched_prio_cmp(thread, t) > 0) {
80006f9c:	00048593          	mv	a1,s1
80006fa0:	00040513          	mv	a0,s0
80006fa4:	8ddff0ef          	jal	ra,80006880 <z_sched_prio_cmp>
80006fa8:	fca04ae3          	bgtz	a0,80006f7c <ready_thread+0x7c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80006fac:	fe0486e3          	beqz	s1,80006f98 <ready_thread+0x98>
	return (node == list->tail) ? NULL : node->next;
80006fb0:	800087b7          	lui	a5,0x80008
80006fb4:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006fb8:	0207a783          	lw	a5,32(a5)
80006fbc:	fcf48ce3          	beq	s1,a5,80006f94 <ready_thread+0x94>
80006fc0:	0004a483          	lw	s1,0(s1)
80006fc4:	fd5ff06f          	j	80006f98 <ready_thread+0x98>
	sys_dnode_t *const tail = list->tail;
80006fc8:	800087b7          	lui	a5,0x80008
80006fcc:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80006fd0:	0207a683          	lw	a3,32(a5)
	node->next = list;
80006fd4:	80008737          	lui	a4,0x80008
80006fd8:	71470713          	addi	a4,a4,1812 # 80008714 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008715>
80006fdc:	00e42023          	sw	a4,0(s0)
	node->prev = tail;
80006fe0:	00d42223          	sw	a3,4(s0)
	tail->next = node;
80006fe4:	0086a023          	sw	s0,0(a3)
	list->tail = node;
80006fe8:	0287a023          	sw	s0,32(a5)
		update_cache(0);
80006fec:	00000513          	li	a0,0
80006ff0:	c59ff0ef          	jal	ra,80006c48 <update_cache>
}
80006ff4:	f49ff06f          	j	80006f3c <ready_thread+0x3c>
80006ff8:	00008067          	ret

80006ffc <z_ready_thread>:
80006ffc:	00308013          	addi	zero,ra,3
{
80007000:	ff010113          	addi	sp,sp,-16
80007004:	00112623          	sw	ra,12(sp)
80007008:	00812423          	sw	s0,8(sp)
8000700c:	00912223          	sw	s1,4(sp)
80007010:	00050413          	mv	s0,a0
	LOCKED(&sched_spinlock) {
80007014:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007018:	300474f3          	csrrci	s1,mstatus,8
8000701c:	0100006f          	j	8000702c <z_ready_thread+0x30>
			  : "r" (key & MSTATUS_IEN)
80007020:	0084f793          	andi	a5,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80007024:	3007a073          	csrs	mstatus,a5
80007028:	00100793          	li	a5,1
8000702c:	00079e63          	bnez	a5,80007048 <z_ready_thread+0x4c>
		if (!thread_active_elsewhere(thread)) {
80007030:	00040513          	mv	a0,s0
80007034:	ff4ff0ef          	jal	ra,80006828 <thread_active_elsewhere>
80007038:	fe0514e3          	bnez	a0,80007020 <z_ready_thread+0x24>
			ready_thread(thread);
8000703c:	00040513          	mv	a0,s0
80007040:	ec1ff0ef          	jal	ra,80006f00 <ready_thread>
80007044:	fddff06f          	j	80007020 <z_ready_thread+0x24>
}
80007048:	00c12083          	lw	ra,12(sp)
8000704c:	00812403          	lw	s0,8(sp)
80007050:	00412483          	lw	s1,4(sp)
80007054:	01010113          	addi	sp,sp,16
80007058:	00008067          	ret

8000705c <z_sched_start>:
8000705c:	00308013          	addi	zero,ra,3
{
80007060:	ff010113          	addi	sp,sp,-16
80007064:	00112623          	sw	ra,12(sp)
80007068:	00812423          	sw	s0,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000706c:	30047473          	csrrci	s0,mstatus,8
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
80007070:	00d54783          	lbu	a5,13(a0)
	if (z_has_thread_started(thread)) {
80007074:	0047f713          	andi	a4,a5,4
80007078:	00071e63          	bnez	a4,80007094 <z_sched_start+0x38>
	__asm__ volatile ("csrs mstatus, %0"
8000707c:	00847413          	andi	s0,s0,8
80007080:	30042073          	csrs	mstatus,s0
}
80007084:	00c12083          	lw	ra,12(sp)
80007088:	00812403          	lw	s0,8(sp)
8000708c:	01010113          	addi	sp,sp,16
80007090:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_PRESTART;
80007094:	ffb7f793          	andi	a5,a5,-5
80007098:	00f506a3          	sb	a5,13(a0)
	ready_thread(thread);
8000709c:	e65ff0ef          	jal	ra,80006f00 <ready_thread>
	z_reschedule(&sched_spinlock, key);
800070a0:	00040593          	mv	a1,s0
800070a4:	80008537          	lui	a0,0x80008
800070a8:	71c50513          	addi	a0,a0,1820 # 8000871c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000871d>
800070ac:	ab1ff0ef          	jal	ra,80006b5c <z_reschedule>
800070b0:	fd5ff06f          	j	80007084 <z_sched_start+0x28>

800070b4 <z_thread_timeout>:
800070b4:	00308013          	addi	zero,ra,3
{
800070b8:	ff010113          	addi	sp,sp,-16
800070bc:	00112623          	sw	ra,12(sp)
800070c0:	00812423          	sw	s0,8(sp)
800070c4:	00912223          	sw	s1,4(sp)
800070c8:	01212023          	sw	s2,0(sp)
800070cc:	00050413          	mv	s0,a0
	struct k_thread *thread = CONTAINER_OF(timeout,
800070d0:	fe850913          	addi	s2,a0,-24
	LOCKED(&sched_spinlock) {
800070d4:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800070d8:	300474f3          	csrrci	s1,mstatus,8
800070dc:	02c0006f          	j	80007108 <z_thread_timeout+0x54>
800070e0:	ff544783          	lbu	a5,-11(s0)
800070e4:	ffb7f713          	andi	a4,a5,-5
800070e8:	fee40aa3          	sb	a4,-11(s0)
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
800070ec:	feb7f793          	andi	a5,a5,-21
800070f0:	fef40aa3          	sb	a5,-11(s0)
			ready_thread(thread);
800070f4:	00090513          	mv	a0,s2
800070f8:	e09ff0ef          	jal	ra,80006f00 <ready_thread>
			  : "r" (key & MSTATUS_IEN)
800070fc:	0084f793          	andi	a5,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80007100:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80007104:	00100793          	li	a5,1
80007108:	02079263          	bnez	a5,8000712c <z_thread_timeout+0x78>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
8000710c:	ff544783          	lbu	a5,-11(s0)
		if (!killed) {
80007110:	0287f793          	andi	a5,a5,40
80007114:	fe0794e3          	bnez	a5,800070fc <z_thread_timeout+0x48>
			if (thread->base.pended_on != NULL) {
80007118:	ff042783          	lw	a5,-16(s0)
8000711c:	fc0782e3          	beqz	a5,800070e0 <z_thread_timeout+0x2c>
				unpend_thread_no_timeout(thread);
80007120:	00090513          	mv	a0,s2
80007124:	ac9ff0ef          	jal	ra,80006bec <unpend_thread_no_timeout>
80007128:	fb9ff06f          	j	800070e0 <z_thread_timeout+0x2c>
}
8000712c:	00c12083          	lw	ra,12(sp)
80007130:	00812403          	lw	s0,8(sp)
80007134:	00412483          	lw	s1,4(sp)
80007138:	00012903          	lw	s2,0(sp)
8000713c:	01010113          	addi	sp,sp,16
80007140:	00008067          	ret

80007144 <unpend_all>:
80007144:	00308013          	addi	zero,ra,3
{
80007148:	ff010113          	addi	sp,sp,-16
8000714c:	00112623          	sw	ra,12(sp)
80007150:	00812423          	sw	s0,8(sp)
80007154:	00912223          	sw	s1,4(sp)
80007158:	00050493          	mv	s1,a0
	return list->head == list;
8000715c:	0004a403          	lw	s0,0(s1)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80007160:	02848463          	beq	s1,s0,80007188 <unpend_all+0x44>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
80007164:	02040263          	beqz	s0,80007188 <unpend_all+0x44>
		unpend_thread_no_timeout(thread);
80007168:	00040513          	mv	a0,s0
8000716c:	a81ff0ef          	jal	ra,80006bec <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
80007170:	01840513          	addi	a0,s0,24
80007174:	155000ef          	jal	ra,80007ac8 <z_abort_timeout>
80007178:	06042c23          	sw	zero,120(s0)
		ready_thread(thread);
8000717c:	00040513          	mv	a0,s0
80007180:	d81ff0ef          	jal	ra,80006f00 <ready_thread>
80007184:	fd9ff06f          	j	8000715c <unpend_all+0x18>
}
80007188:	00c12083          	lw	ra,12(sp)
8000718c:	00812403          	lw	s0,8(sp)
80007190:	00412483          	lw	s1,4(sp)
80007194:	01010113          	addi	sp,sp,16
80007198:	00008067          	ret

8000719c <unready_thread>:
8000719c:	00308013          	addi	zero,ra,3
{
800071a0:	ff010113          	addi	sp,sp,-16
800071a4:	00112623          	sw	ra,12(sp)
800071a8:	00812423          	sw	s0,8(sp)
800071ac:	00050413          	mv	s0,a0
	return (thread->base.thread_state & state) != 0U;
800071b0:	00d54783          	lbu	a5,13(a0)
	if (z_is_thread_queued(thread)) {
800071b4:	01879713          	slli	a4,a5,0x18
800071b8:	41875713          	srai	a4,a4,0x18
800071bc:	02074663          	bltz	a4,800071e8 <unready_thread+0x4c>
	update_cache(thread == _current);
800071c0:	800087b7          	lui	a5,0x80008
800071c4:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
800071c8:	0087a503          	lw	a0,8(a5)
800071cc:	40850533          	sub	a0,a0,s0
800071d0:	00153513          	seqz	a0,a0
800071d4:	a75ff0ef          	jal	ra,80006c48 <update_cache>
}
800071d8:	00c12083          	lw	ra,12(sp)
800071dc:	00812403          	lw	s0,8(sp)
800071e0:	01010113          	addi	sp,sp,16
800071e4:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_QUEUED;
800071e8:	07f7f793          	andi	a5,a5,127
800071ec:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
800071f0:	00050593          	mv	a1,a0
800071f4:	80008537          	lui	a0,0x80008
800071f8:	71450513          	addi	a0,a0,1812 # 80008714 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008715>
800071fc:	9d1ff0ef          	jal	ra,80006bcc <z_priq_dumb_remove>
}
80007200:	fc1ff06f          	j	800071c0 <unready_thread+0x24>

80007204 <add_to_waitq_locked>:
80007204:	00308013          	addi	zero,ra,3
{
80007208:	ff010113          	addi	sp,sp,-16
8000720c:	00112623          	sw	ra,12(sp)
80007210:	00812423          	sw	s0,8(sp)
80007214:	00912223          	sw	s1,4(sp)
80007218:	01212023          	sw	s2,0(sp)
8000721c:	00050493          	mv	s1,a0
80007220:	00058913          	mv	s2,a1
	unready_thread(thread);
80007224:	f79ff0ef          	jal	ra,8000719c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
80007228:	00d4c783          	lbu	a5,13(s1)
8000722c:	0027e793          	ori	a5,a5,2
80007230:	00f486a3          	sb	a5,13(s1)
	if (wait_q != NULL) {
80007234:	06090863          	beqz	s2,800072a4 <add_to_waitq_locked+0xa0>
		thread->base.pended_on = wait_q;
80007238:	0124a423          	sw	s2,8(s1)
	return list->head == list;
8000723c:	00092403          	lw	s0,0(s2)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80007240:	02891463          	bne	s2,s0,80007268 <add_to_waitq_locked+0x64>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80007244:	00000413          	li	s0,0
80007248:	0200006f          	j	80007268 <add_to_waitq_locked+0x64>
	sys_dnode_t *const prev = successor->prev;
8000724c:	00442783          	lw	a5,4(s0)
	node->prev = prev;
80007250:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
80007254:	0084a023          	sw	s0,0(s1)
	prev->next = node;
80007258:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
8000725c:	00942223          	sw	s1,4(s0)
}
80007260:	0440006f          	j	800072a4 <add_to_waitq_locked+0xa0>
80007264:	00000413          	li	s0,0
80007268:	02040463          	beqz	s0,80007290 <add_to_waitq_locked+0x8c>
		if (z_sched_prio_cmp(thread, t) > 0) {
8000726c:	00040593          	mv	a1,s0
80007270:	00048513          	mv	a0,s1
80007274:	e0cff0ef          	jal	ra,80006880 <z_sched_prio_cmp>
80007278:	fca04ae3          	bgtz	a0,8000724c <add_to_waitq_locked+0x48>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
8000727c:	fe0406e3          	beqz	s0,80007268 <add_to_waitq_locked+0x64>
	return (node == list->tail) ? NULL : node->next;
80007280:	00492703          	lw	a4,4(s2)
80007284:	fee400e3          	beq	s0,a4,80007264 <add_to_waitq_locked+0x60>
80007288:	00042403          	lw	s0,0(s0)
8000728c:	fddff06f          	j	80007268 <add_to_waitq_locked+0x64>
	sys_dnode_t *const tail = list->tail;
80007290:	00492783          	lw	a5,4(s2)
	node->next = list;
80007294:	0124a023          	sw	s2,0(s1)
	node->prev = tail;
80007298:	00f4a223          	sw	a5,4(s1)
	tail->next = node;
8000729c:	0097a023          	sw	s1,0(a5)
	list->tail = node;
800072a0:	00992223          	sw	s1,4(s2)
}
800072a4:	00c12083          	lw	ra,12(sp)
800072a8:	00812403          	lw	s0,8(sp)
800072ac:	00412483          	lw	s1,4(sp)
800072b0:	00012903          	lw	s2,0(sp)
800072b4:	01010113          	addi	sp,sp,16
800072b8:	00008067          	ret

800072bc <pend>:
800072bc:	00308013          	addi	zero,ra,3
{
800072c0:	fe010113          	addi	sp,sp,-32
800072c4:	00112e23          	sw	ra,28(sp)
800072c8:	00812c23          	sw	s0,24(sp)
800072cc:	00912a23          	sw	s1,20(sp)
800072d0:	01212823          	sw	s2,16(sp)
800072d4:	01312623          	sw	s3,12(sp)
800072d8:	01412423          	sw	s4,8(sp)
800072dc:	00050413          	mv	s0,a0
800072e0:	00058493          	mv	s1,a1
800072e4:	00060a13          	mv	s4,a2
800072e8:	00068993          	mv	s3,a3
	LOCKED(&sched_spinlock) {
800072ec:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800072f0:	30047973          	csrrci	s2,mstatus,8
800072f4:	01c0006f          	j	80007310 <pend+0x54>
		add_to_waitq_locked(thread, wait_q);
800072f8:	00048593          	mv	a1,s1
800072fc:	00040513          	mv	a0,s0
80007300:	f05ff0ef          	jal	ra,80007204 <add_to_waitq_locked>
			  : "r" (key & MSTATUS_IEN)
80007304:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80007308:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
8000730c:	00100793          	li	a5,1
80007310:	fe0784e3          	beqz	a5,800072f8 <pend+0x3c>
	add_thread_timeout(thread, timeout);
80007314:	000a0593          	mv	a1,s4
80007318:	00098613          	mv	a2,s3
8000731c:	00040513          	mv	a0,s0
80007320:	d20ff0ef          	jal	ra,80006840 <add_thread_timeout>
}
80007324:	01c12083          	lw	ra,28(sp)
80007328:	01812403          	lw	s0,24(sp)
8000732c:	01412483          	lw	s1,20(sp)
80007330:	01012903          	lw	s2,16(sp)
80007334:	00c12983          	lw	s3,12(sp)
80007338:	00812a03          	lw	s4,8(sp)
8000733c:	02010113          	addi	sp,sp,32
80007340:	00008067          	ret

80007344 <z_pend_curr>:
80007344:	00308013          	addi	zero,ra,3
{
80007348:	ff010113          	addi	sp,sp,-16
8000734c:	00112623          	sw	ra,12(sp)
80007350:	00812423          	sw	s0,8(sp)
80007354:	00912223          	sw	s1,4(sp)
80007358:	00050413          	mv	s0,a0
8000735c:	00058493          	mv	s1,a1
80007360:	00060593          	mv	a1,a2
80007364:	00068613          	mv	a2,a3
80007368:	00070693          	mv	a3,a4
	pend(_current, wait_q, timeout);
8000736c:	800087b7          	lui	a5,0x80008
80007370:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80007374:	0087a503          	lw	a0,8(a5)
80007378:	f45ff0ef          	jal	ra,800072bc <pend>
	return z_swap(lock, key);
8000737c:	00048593          	mv	a1,s1
80007380:	00040513          	mv	a0,s0
80007384:	f40ff0ef          	jal	ra,80006ac4 <z_swap>
}
80007388:	00c12083          	lw	ra,12(sp)
8000738c:	00812403          	lw	s0,8(sp)
80007390:	00412483          	lw	s1,4(sp)
80007394:	01010113          	addi	sp,sp,16
80007398:	00008067          	ret

8000739c <z_set_prio>:
8000739c:	00308013          	addi	zero,ra,3
{
800073a0:	fe010113          	addi	sp,sp,-32
800073a4:	00112e23          	sw	ra,28(sp)
800073a8:	00812c23          	sw	s0,24(sp)
800073ac:	00912a23          	sw	s1,20(sp)
800073b0:	01212823          	sw	s2,16(sp)
800073b4:	01312623          	sw	s3,12(sp)
800073b8:	01412423          	sw	s4,8(sp)
800073bc:	01512223          	sw	s5,4(sp)
800073c0:	00050493          	mv	s1,a0
800073c4:	00058913          	mv	s2,a1
	LOCKED(&sched_spinlock) {
800073c8:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800073cc:	300479f3          	csrrci	s3,mstatus,8
	bool need_sched = 0;
800073d0:	00000513          	li	a0,0
800073d4:	0980006f          	j	8000746c <z_set_prio+0xd0>
	sys_dnode_t *const prev = successor->prev;
800073d8:	00442783          	lw	a5,4(s0)
	node->prev = prev;
800073dc:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
800073e0:	0084a023          	sw	s0,0(s1)
	prev->next = node;
800073e4:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
800073e8:	00942223          	sw	s1,4(s0)
}
800073ec:	05c0006f          	j	80007448 <z_set_prio+0xac>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800073f0:	000a0413          	mv	s0,s4
800073f4:	02040863          	beqz	s0,80007424 <z_set_prio+0x88>
		if (z_sched_prio_cmp(thread, t) > 0) {
800073f8:	00040593          	mv	a1,s0
800073fc:	00048513          	mv	a0,s1
80007400:	c80ff0ef          	jal	ra,80006880 <z_sched_prio_cmp>
80007404:	fca04ae3          	bgtz	a0,800073d8 <z_set_prio+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80007408:	fe0406e3          	beqz	s0,800073f4 <z_set_prio+0x58>
	return (node == list->tail) ? NULL : node->next;
8000740c:	800087b7          	lui	a5,0x80008
80007410:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80007414:	0207a783          	lw	a5,32(a5)
80007418:	fcf40ce3          	beq	s0,a5,800073f0 <z_set_prio+0x54>
8000741c:	00042403          	lw	s0,0(s0)
80007420:	fd5ff06f          	j	800073f4 <z_set_prio+0x58>
	sys_dnode_t *const tail = list->tail;
80007424:	800087b7          	lui	a5,0x80008
80007428:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
8000742c:	0207a683          	lw	a3,32(a5)
	node->next = list;
80007430:	80008737          	lui	a4,0x80008
80007434:	71470713          	addi	a4,a4,1812 # 80008714 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008715>
80007438:	00e4a023          	sw	a4,0(s1)
	node->prev = tail;
8000743c:	00d4a223          	sw	a3,4(s1)
	tail->next = node;
80007440:	0096a023          	sw	s1,0(a3)
	list->tail = node;
80007444:	0297a023          	sw	s1,32(a5)
			update_cache(1);
80007448:	00100513          	li	a0,1
8000744c:	ffcff0ef          	jal	ra,80006c48 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
80007450:	00100513          	li	a0,1
80007454:	00c0006f          	j	80007460 <z_set_prio+0xc4>
			thread->base.prio = prio;
80007458:	01248723          	sb	s2,14(s1)
8000745c:	00000513          	li	a0,0
			  : "r" (key & MSTATUS_IEN)
80007460:	0089f793          	andi	a5,s3,8
	__asm__ volatile ("csrs mstatus, %0"
80007464:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80007468:	00100793          	li	a5,1
8000746c:	04079e63          	bnez	a5,800074c8 <z_set_prio+0x12c>
	uint8_t state = thread->base.thread_state;
80007470:	00d4c783          	lbu	a5,13(s1)
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
80007474:	01f7f713          	andi	a4,a5,31
80007478:	fe0710e3          	bnez	a4,80007458 <z_set_prio+0xbc>
	return node->next != NULL;
8000747c:	0184aa03          	lw	s4,24(s1)
80007480:	fc0a1ce3          	bnez	s4,80007458 <z_set_prio+0xbc>
	thread->base.thread_state &= ~_THREAD_QUEUED;
80007484:	07f7f793          	andi	a5,a5,127
80007488:	00f486a3          	sb	a5,13(s1)
	_priq_run_remove(thread_runq(thread), thread);
8000748c:	00048593          	mv	a1,s1
80007490:	80008ab7          	lui	s5,0x80008
80007494:	714a8513          	addi	a0,s5,1812 # 80008714 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008715>
80007498:	f34ff0ef          	jal	ra,80006bcc <z_priq_dumb_remove>
				thread->base.prio = prio;
8000749c:	01248723          	sb	s2,14(s1)
	thread->base.thread_state |= _THREAD_QUEUED;
800074a0:	00d4c783          	lbu	a5,13(s1)
800074a4:	f807e793          	ori	a5,a5,-128
800074a8:	00f486a3          	sb	a5,13(s1)
	return list->head == list;
800074ac:	800087b7          	lui	a5,0x80008
800074b0:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
800074b4:	01c7a403          	lw	s0,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
800074b8:	714a8a93          	addi	s5,s5,1812
800074bc:	f3541ce3          	bne	s0,s5,800073f4 <z_set_prio+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800074c0:	000a0413          	mv	s0,s4
800074c4:	f31ff06f          	j	800073f4 <z_set_prio+0x58>
}
800074c8:	01c12083          	lw	ra,28(sp)
800074cc:	01812403          	lw	s0,24(sp)
800074d0:	01412483          	lw	s1,20(sp)
800074d4:	01012903          	lw	s2,16(sp)
800074d8:	00c12983          	lw	s3,12(sp)
800074dc:	00812a03          	lw	s4,8(sp)
800074e0:	00412a83          	lw	s5,4(sp)
800074e4:	02010113          	addi	sp,sp,32
800074e8:	00008067          	ret

800074ec <k_sched_unlock>:
800074ec:	00308013          	addi	zero,ra,3
{
800074f0:	ff010113          	addi	sp,sp,-16
800074f4:	00112623          	sw	ra,12(sp)
800074f8:	00812423          	sw	s0,8(sp)
	LOCKED(&sched_spinlock) {
800074fc:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007500:	30047473          	csrrci	s0,mstatus,8
80007504:	0300006f          	j	80007534 <k_sched_unlock+0x48>
		++_current->base.sched_locked;
80007508:	800087b7          	lui	a5,0x80008
8000750c:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80007510:	0087a703          	lw	a4,8(a5)
80007514:	00f74783          	lbu	a5,15(a4)
80007518:	00178793          	addi	a5,a5,1
8000751c:	00f707a3          	sb	a5,15(a4)
		update_cache(0);
80007520:	00000513          	li	a0,0
80007524:	f24ff0ef          	jal	ra,80006c48 <update_cache>
			  : "r" (key & MSTATUS_IEN)
80007528:	00847793          	andi	a5,s0,8
	__asm__ volatile ("csrs mstatus, %0"
8000752c:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80007530:	00100793          	li	a5,1
80007534:	fc078ae3          	beqz	a5,80007508 <k_sched_unlock+0x1c>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007538:	30047573          	csrrci	a0,mstatus,8
	(void) z_reschedule_irqlock(arch_irq_lock());
8000753c:	d50ff0ef          	jal	ra,80006a8c <z_reschedule_irqlock>
}
80007540:	00c12083          	lw	ra,12(sp)
80007544:	00812403          	lw	s0,8(sp)
80007548:	01010113          	addi	sp,sp,16
8000754c:	00008067          	ret

80007550 <end_thread>:
80007550:	00308013          	addi	zero,ra,3
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
80007554:	00d54783          	lbu	a5,13(a0)
80007558:	0087f713          	andi	a4,a5,8
8000755c:	08071663          	bnez	a4,800075e8 <end_thread+0x98>
{
80007560:	ff010113          	addi	sp,sp,-16
80007564:	00112623          	sw	ra,12(sp)
80007568:	00812423          	sw	s0,8(sp)
8000756c:	00050413          	mv	s0,a0
		thread->base.thread_state |= _THREAD_DEAD;
80007570:	0087e713          	ori	a4,a5,8
80007574:	00e506a3          	sb	a4,13(a0)
		thread->base.thread_state &= ~_THREAD_ABORTING;
80007578:	fdf7f713          	andi	a4,a5,-33
8000757c:	00876713          	ori	a4,a4,8
80007580:	00e506a3          	sb	a4,13(a0)
		if (z_is_thread_queued(thread)) {
80007584:	01871713          	slli	a4,a4,0x18
80007588:	41875713          	srai	a4,a4,0x18
8000758c:	02074e63          	bltz	a4,800075c8 <end_thread+0x78>
		if (thread->base.pended_on != NULL) {
80007590:	00842783          	lw	a5,8(s0)
80007594:	00078663          	beqz	a5,800075a0 <end_thread+0x50>
			unpend_thread_no_timeout(thread);
80007598:	00040513          	mv	a0,s0
8000759c:	e50ff0ef          	jal	ra,80006bec <unpend_thread_no_timeout>
800075a0:	01840513          	addi	a0,s0,24
800075a4:	524000ef          	jal	ra,80007ac8 <z_abort_timeout>
		unpend_all(&thread->join_queue);
800075a8:	06c40513          	addi	a0,s0,108
800075ac:	b99ff0ef          	jal	ra,80007144 <unpend_all>
		update_cache(1);
800075b0:	00100513          	li	a0,1
800075b4:	e94ff0ef          	jal	ra,80006c48 <update_cache>
}
800075b8:	00c12083          	lw	ra,12(sp)
800075bc:	00812403          	lw	s0,8(sp)
800075c0:	01010113          	addi	sp,sp,16
800075c4:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_QUEUED;
800075c8:	05f7f793          	andi	a5,a5,95
800075cc:	0087e793          	ori	a5,a5,8
800075d0:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
800075d4:	00050593          	mv	a1,a0
800075d8:	80008537          	lui	a0,0x80008
800075dc:	71450513          	addi	a0,a0,1812 # 80008714 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008715>
800075e0:	decff0ef          	jal	ra,80006bcc <z_priq_dumb_remove>
}
800075e4:	fadff06f          	j	80007590 <end_thread+0x40>
800075e8:	00008067          	ret

800075ec <z_unpend_first_thread>:
800075ec:	00308013          	addi	zero,ra,3
{
800075f0:	ff010113          	addi	sp,sp,-16
800075f4:	00112623          	sw	ra,12(sp)
800075f8:	00812423          	sw	s0,8(sp)
800075fc:	00912223          	sw	s1,4(sp)
80007600:	01212023          	sw	s2,0(sp)
80007604:	00050493          	mv	s1,a0
	LOCKED(&sched_spinlock) {
80007608:	00000793          	li	a5,0
8000760c:	30047973          	csrrci	s2,mstatus,8
	struct k_thread *thread = NULL;
80007610:	00000413          	li	s0,0
80007614:	0100006f          	j	80007624 <z_unpend_first_thread+0x38>
			  : "r" (key & MSTATUS_IEN)
80007618:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
8000761c:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80007620:	00100793          	li	a5,1
80007624:	02079263          	bnez	a5,80007648 <z_unpend_first_thread+0x5c>
		thread = _priq_wait_best(&wait_q->waitq);
80007628:	00048513          	mv	a0,s1
8000762c:	e00ff0ef          	jal	ra,80006c2c <z_priq_dumb_best>
80007630:	00050413          	mv	s0,a0
		if (thread != NULL) {
80007634:	fe0502e3          	beqz	a0,80007618 <z_unpend_first_thread+0x2c>
			unpend_thread_no_timeout(thread);
80007638:	db4ff0ef          	jal	ra,80006bec <unpend_thread_no_timeout>
8000763c:	01840513          	addi	a0,s0,24
80007640:	488000ef          	jal	ra,80007ac8 <z_abort_timeout>
80007644:	fd5ff06f          	j	80007618 <z_unpend_first_thread+0x2c>
}
80007648:	00040513          	mv	a0,s0
8000764c:	00c12083          	lw	ra,12(sp)
80007650:	00812403          	lw	s0,8(sp)
80007654:	00412483          	lw	s1,4(sp)
80007658:	00012903          	lw	s2,0(sp)
8000765c:	01010113          	addi	sp,sp,16
80007660:	00008067          	ret

80007664 <init_ready_q>:
80007664:	00308013          	addi	zero,ra,3
	sys_dlist_init(&rq->runq);
80007668:	00450793          	addi	a5,a0,4
	list->head = (sys_dnode_t *)list;
8000766c:	00f52223          	sw	a5,4(a0)
	list->tail = (sys_dnode_t *)list;
80007670:	00f52423          	sw	a5,8(a0)
}
80007674:	00008067          	ret

80007678 <z_sched_init>:
80007678:	00308013          	addi	zero,ra,3
{
8000767c:	ff010113          	addi	sp,sp,-16
80007680:	00112623          	sw	ra,12(sp)
	init_ready_q(&_kernel.ready_q);
80007684:	80008537          	lui	a0,0x80008
80007688:	71050513          	addi	a0,a0,1808 # 80008710 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008711>
8000768c:	fd9ff0ef          	jal	ra,80007664 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
80007690:	00000593          	li	a1,0
80007694:	00000513          	li	a0,0
80007698:	a5cff0ef          	jal	ra,800068f4 <k_sched_time_slice_set>
}
8000769c:	00c12083          	lw	ra,12(sp)
800076a0:	01010113          	addi	sp,sp,16
800076a4:	00008067          	ret

800076a8 <z_impl_z_current_get>:
800076a8:	00308013          	addi	zero,ra,3
	k_tid_t ret = _current_cpu->current;
800076ac:	800087b7          	lui	a5,0x80008
}
800076b0:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
800076b4:	0087a503          	lw	a0,8(a5)
800076b8:	00008067          	ret

800076bc <z_thread_abort>:
800076bc:	00308013          	addi	zero,ra,3
{
800076c0:	ff010113          	addi	sp,sp,-16
800076c4:	00112623          	sw	ra,12(sp)
800076c8:	00812423          	sw	s0,8(sp)
800076cc:	00912223          	sw	s1,4(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
800076d0:	300474f3          	csrrci	s1,mstatus,8
	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
800076d4:	00c54783          	lbu	a5,12(a0)
800076d8:	0017f793          	andi	a5,a5,1
800076dc:	02079063          	bnez	a5,800076fc <z_thread_abort+0x40>
800076e0:	00050413          	mv	s0,a0
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
800076e4:	00d54783          	lbu	a5,13(a0)
800076e8:	0087f793          	andi	a5,a5,8
800076ec:	02078c63          	beqz	a5,80007724 <z_thread_abort+0x68>
	__asm__ volatile ("csrs mstatus, %0"
800076f0:	0084f493          	andi	s1,s1,8
800076f4:	3004a073          	csrs	mstatus,s1
		return;
800076f8:	0180006f          	j	80007710 <z_thread_abort+0x54>
800076fc:	0084f493          	andi	s1,s1,8
80007700:	3004a073          	csrs	mstatus,s1
	return a0;
}

static inline uintptr_t arch_syscall_invoke1(uintptr_t arg1, uintptr_t call_id)
{
	register unsigned long a0 __asm__ ("a0") = arg1;
80007704:	00400513          	li	a0,4
	register unsigned long t0 __asm__ ("t0") = call_id;
80007708:	00000293          	li	t0,0

	__asm__ volatile ("ecall"
8000770c:	00000073          	ecall
}
80007710:	00c12083          	lw	ra,12(sp)
80007714:	00812403          	lw	s0,8(sp)
80007718:	00412483          	lw	s1,4(sp)
8000771c:	01010113          	addi	sp,sp,16
80007720:	00008067          	ret
	end_thread(thread);
80007724:	e2dff0ef          	jal	ra,80007550 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
80007728:	800087b7          	lui	a5,0x80008
8000772c:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80007730:	0087a783          	lw	a5,8(a5)
80007734:	00878863          	beq	a5,s0,80007744 <z_thread_abort+0x88>
80007738:	0084f493          	andi	s1,s1,8
8000773c:	3004a073          	csrs	mstatus,s1
80007740:	fd1ff06f          	j	80007710 <z_thread_abort+0x54>
80007744:	800087b7          	lui	a5,0x80008
80007748:	6f87a783          	lw	a5,1784(a5) # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
8000774c:	fe0796e3          	bnez	a5,80007738 <z_thread_abort+0x7c>
		z_swap(&sched_spinlock, key);
80007750:	00048593          	mv	a1,s1
80007754:	80008537          	lui	a0,0x80008
80007758:	71c50513          	addi	a0,a0,1820 # 8000871c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000871d>
8000775c:	b68ff0ef          	jal	ra,80006ac4 <z_swap>
80007760:	fd9ff06f          	j	80007738 <z_thread_abort+0x7c>

80007764 <z_impl_k_thread_abort>:
80007764:	00308013          	addi	zero,ra,3
{
80007768:	ff010113          	addi	sp,sp,-16
8000776c:	00112623          	sw	ra,12(sp)
	z_thread_abort(thread);
80007770:	f4dff0ef          	jal	ra,800076bc <z_thread_abort>
}
80007774:	00c12083          	lw	ra,12(sp)
80007778:	01010113          	addi	sp,sp,16
8000777c:	00008067          	ret

80007780 <first>:
80007780:	00308013          	addi	zero,ra,3
	return list->head == list;
80007784:	8000b7b7          	lui	a5,0x8000b
80007788:	dcc78793          	addi	a5,a5,-564 # 8000adcc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000adcd>
8000778c:	0007a503          	lw	a0,0(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80007790:	00f50463          	beq	a0,a5,80007798 <first+0x18>
}
80007794:	00008067          	ret
80007798:	00000513          	li	a0,0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
8000779c:	ff9ff06f          	j	80007794 <first+0x14>

800077a0 <next>:
800077a0:	00308013          	addi	zero,ra,3
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
800077a4:	02050063          	beqz	a0,800077c4 <next+0x24>
	return (node == list->tail) ? NULL : node->next;
800077a8:	8000b737          	lui	a4,0x8000b
800077ac:	dcc70713          	addi	a4,a4,-564 # 8000adcc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000adcd>
800077b0:	00472703          	lw	a4,4(a4)
800077b4:	00e50663          	beq	a0,a4,800077c0 <next+0x20>
800077b8:	00052503          	lw	a0,0(a0)
800077bc:	00008067          	ret
800077c0:	00000513          	li	a0,0
}
800077c4:	00008067          	ret

800077c8 <remove_timeout>:
800077c8:	00308013          	addi	zero,ra,3
{
800077cc:	ff010113          	addi	sp,sp,-16
800077d0:	00112623          	sw	ra,12(sp)
800077d4:	00812423          	sw	s0,8(sp)
800077d8:	00050413          	mv	s0,a0
	if (next(t) != NULL) {
800077dc:	fc5ff0ef          	jal	ra,800077a0 <next>
800077e0:	02050663          	beqz	a0,8000780c <remove_timeout+0x44>
		next(t)->dticks += t->dticks;
800077e4:	01052783          	lw	a5,16(a0)
800077e8:	01452683          	lw	a3,20(a0)
800077ec:	01042703          	lw	a4,16(s0)
800077f0:	01442603          	lw	a2,20(s0)
800077f4:	00e78733          	add	a4,a5,a4
800077f8:	00f737b3          	sltu	a5,a4,a5
800077fc:	00c686b3          	add	a3,a3,a2
80007800:	00d787b3          	add	a5,a5,a3
80007804:	00e52823          	sw	a4,16(a0)
80007808:	00f52a23          	sw	a5,20(a0)
	sys_dnode_t *const prev = node->prev;
8000780c:	00442703          	lw	a4,4(s0)
	sys_dnode_t *const next = node->next;
80007810:	00042783          	lw	a5,0(s0)
	prev->next = next;
80007814:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
80007818:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
8000781c:	00042023          	sw	zero,0(s0)
	node->prev = NULL;
80007820:	00042223          	sw	zero,4(s0)
}
80007824:	00c12083          	lw	ra,12(sp)
80007828:	00812403          	lw	s0,8(sp)
8000782c:	01010113          	addi	sp,sp,16
80007830:	00008067          	ret

80007834 <elapsed>:
80007834:	00308013          	addi	zero,ra,3
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
80007838:	800087b7          	lui	a5,0x80008
8000783c:	5e07a783          	lw	a5,1504(a5) # 800085e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085e1>
80007840:	00078663          	beqz	a5,8000784c <elapsed+0x18>
80007844:	00000513          	li	a0,0
}
80007848:	00008067          	ret
{
8000784c:	ff010113          	addi	sp,sp,-16
80007850:	00112623          	sw	ra,12(sp)
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
80007854:	cecfe0ef          	jal	ra,80005d40 <sys_clock_elapsed>
}
80007858:	00c12083          	lw	ra,12(sp)
8000785c:	01010113          	addi	sp,sp,16
80007860:	00008067          	ret

80007864 <next_timeout>:
80007864:	00308013          	addi	zero,ra,3
{
80007868:	ff010113          	addi	sp,sp,-16
8000786c:	00112623          	sw	ra,12(sp)
80007870:	00812423          	sw	s0,8(sp)
	struct _timeout *to = first();
80007874:	f0dff0ef          	jal	ra,80007780 <first>
80007878:	00050413          	mv	s0,a0
	int32_t ticks_elapsed = elapsed();
8000787c:	fb9ff0ef          	jal	ra,80007834 <elapsed>
	if ((to == NULL) ||
80007880:	02040c63          	beqz	s0,800078b8 <next_timeout+0x54>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
80007884:	01042703          	lw	a4,16(s0)
80007888:	01442783          	lw	a5,20(s0)
8000788c:	41f55693          	srai	a3,a0,0x1f
80007890:	40a70533          	sub	a0,a4,a0
80007894:	00a73733          	sltu	a4,a4,a0
80007898:	40d787b3          	sub	a5,a5,a3
8000789c:	40e787b3          	sub	a5,a5,a4
	if ((to == NULL) ||
800078a0:	02f04263          	bgtz	a5,800078c4 <next_timeout+0x60>
800078a4:	00079463          	bnez	a5,800078ac <next_timeout+0x48>
800078a8:	00054e63          	bltz	a0,800078c4 <next_timeout+0x60>
		ret = MAX(0, to->dticks - ticks_elapsed);
800078ac:	0207d063          	bgez	a5,800078cc <next_timeout+0x68>
800078b0:	00000513          	li	a0,0
800078b4:	0180006f          	j	800078cc <next_timeout+0x68>
		ret = MAX_WAIT;
800078b8:	80000537          	lui	a0,0x80000
800078bc:	fff54513          	not	a0,a0
800078c0:	00c0006f          	j	800078cc <next_timeout+0x68>
800078c4:	80000537          	lui	a0,0x80000
800078c8:	fff54513          	not	a0,a0
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
800078cc:	800087b7          	lui	a5,0x80008
800078d0:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
800078d4:	0107a783          	lw	a5,16(a5)
800078d8:	00078663          	beqz	a5,800078e4 <next_timeout+0x80>
800078dc:	00a7d463          	bge	a5,a0,800078e4 <next_timeout+0x80>
		ret = _current_cpu->slice_ticks;
800078e0:	00078513          	mv	a0,a5
}
800078e4:	00c12083          	lw	ra,12(sp)
800078e8:	00812403          	lw	s0,8(sp)
800078ec:	01010113          	addi	sp,sp,16
800078f0:	00008067          	ret

800078f4 <z_add_timeout>:
800078f4:	00308013          	addi	zero,ra,3
{
800078f8:	fe010113          	addi	sp,sp,-32
800078fc:	00112e23          	sw	ra,28(sp)
80007900:	00812c23          	sw	s0,24(sp)
80007904:	00912a23          	sw	s1,20(sp)
80007908:	01212823          	sw	s2,16(sp)
8000790c:	01312623          	sw	s3,12(sp)
80007910:	01412423          	sw	s4,8(sp)
80007914:	01512223          	sw	s5,4(sp)
80007918:	00050413          	mv	s0,a0
8000791c:	00060493          	mv	s1,a2
80007920:	00068913          	mv	s2,a3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
80007924:	fff00793          	li	a5,-1
80007928:	00c78a63          	beq	a5,a2,8000793c <z_add_timeout+0x48>
	to->fn = fn;
8000792c:	00b42423          	sw	a1,8(s0)
	LOCKED(&timeout_lock) {
80007930:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007934:	300479f3          	csrrci	s3,mstatus,8
80007938:	10c0006f          	j	80007a44 <z_add_timeout+0x150>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
8000793c:	fef698e3          	bne	a3,a5,8000792c <z_add_timeout+0x38>
}
80007940:	01c12083          	lw	ra,28(sp)
80007944:	01812403          	lw	s0,24(sp)
80007948:	01412483          	lw	s1,20(sp)
8000794c:	01012903          	lw	s2,16(sp)
80007950:	00c12983          	lw	s3,12(sp)
80007954:	00812a03          	lw	s4,8(sp)
80007958:	00412a83          	lw	s5,4(sp)
8000795c:	02010113          	addi	sp,sp,32
80007960:	00008067          	ret
			to->dticks = MAX(1, ticks);
80007964:	00071463          	bnez	a4,8000796c <z_add_timeout+0x78>
80007968:	12079663          	bnez	a5,80007a94 <z_add_timeout+0x1a0>
8000796c:	00100793          	li	a5,1
80007970:	00000713          	li	a4,0
80007974:	1200006f          	j	80007a94 <z_add_timeout+0x1a0>
			to->dticks = timeout.ticks + 1 + elapsed();
80007978:	00148a13          	addi	s4,s1,1
8000797c:	009a3ab3          	sltu	s5,s4,s1
80007980:	012a8ab3          	add	s5,s5,s2
80007984:	eb1ff0ef          	jal	ra,80007834 <elapsed>
80007988:	41f55713          	srai	a4,a0,0x1f
8000798c:	00aa07b3          	add	a5,s4,a0
80007990:	0147ba33          	sltu	s4,a5,s4
80007994:	00ea8ab3          	add	s5,s5,a4
80007998:	015a0a33          	add	s4,s4,s5
8000799c:	00f42823          	sw	a5,16(s0)
800079a0:	01442a23          	sw	s4,20(s0)
800079a4:	0f80006f          	j	80007a9c <z_add_timeout+0x1a8>
			to->dticks -= t->dticks;
800079a8:	40d706b3          	sub	a3,a4,a3
800079ac:	00d73733          	sltu	a4,a4,a3
800079b0:	40c787b3          	sub	a5,a5,a2
800079b4:	40e787b3          	sub	a5,a5,a4
800079b8:	00d42823          	sw	a3,16(s0)
800079bc:	00f42a23          	sw	a5,20(s0)
		for (t = first(); t != NULL; t = next(t)) {
800079c0:	de1ff0ef          	jal	ra,800077a0 <next>
800079c4:	04050863          	beqz	a0,80007a14 <z_add_timeout+0x120>
			if (t->dticks > to->dticks) {
800079c8:	01052683          	lw	a3,16(a0) # 80000010 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000011>
800079cc:	01452603          	lw	a2,20(a0)
800079d0:	01042703          	lw	a4,16(s0)
800079d4:	01442783          	lw	a5,20(s0)
800079d8:	00c7c663          	blt	a5,a2,800079e4 <z_add_timeout+0xf0>
800079dc:	fcf616e3          	bne	a2,a5,800079a8 <z_add_timeout+0xb4>
800079e0:	fcd774e3          	bgeu	a4,a3,800079a8 <z_add_timeout+0xb4>
				t->dticks -= to->dticks;
800079e4:	40e68733          	sub	a4,a3,a4
800079e8:	00e6b6b3          	sltu	a3,a3,a4
800079ec:	40f60633          	sub	a2,a2,a5
800079f0:	40d60633          	sub	a2,a2,a3
800079f4:	00e52823          	sw	a4,16(a0)
800079f8:	00c52a23          	sw	a2,20(a0)
	sys_dnode_t *const prev = successor->prev;
800079fc:	00452783          	lw	a5,4(a0)
	node->prev = prev;
80007a00:	00f42223          	sw	a5,4(s0)
	node->next = successor;
80007a04:	00a42023          	sw	a0,0(s0)
	prev->next = node;
80007a08:	0087a023          	sw	s0,0(a5)
	successor->prev = node;
80007a0c:	00852223          	sw	s0,4(a0)
		if (t == NULL) {
80007a10:	0200006f          	j	80007a30 <z_add_timeout+0x13c>
	sys_dnode_t *const tail = list->tail;
80007a14:	8000b7b7          	lui	a5,0x8000b
80007a18:	dcc78793          	addi	a5,a5,-564 # 8000adcc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000adcd>
80007a1c:	0047a703          	lw	a4,4(a5)
	node->next = list;
80007a20:	00f42023          	sw	a5,0(s0)
	node->prev = tail;
80007a24:	00e42223          	sw	a4,4(s0)
	tail->next = node;
80007a28:	00872023          	sw	s0,0(a4)
	list->tail = node;
80007a2c:	0087a223          	sw	s0,4(a5)
		if (to == first()) {
80007a30:	d51ff0ef          	jal	ra,80007780 <first>
80007a34:	06a40863          	beq	s0,a0,80007aa4 <z_add_timeout+0x1b0>
			  : "r" (key & MSTATUS_IEN)
80007a38:	0089f793          	andi	a5,s3,8
	__asm__ volatile ("csrs mstatus, %0"
80007a3c:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
80007a40:	00100793          	li	a5,1
80007a44:	ee079ee3          	bnez	a5,80007940 <z_add_timeout+0x4c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
80007a48:	ffe00793          	li	a5,-2
80007a4c:	40978733          	sub	a4,a5,s1
80007a50:	00e7b733          	sltu	a4,a5,a4
80007a54:	fff94793          	not	a5,s2
80007a58:	40e787b3          	sub	a5,a5,a4
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
80007a5c:	f007cee3          	bltz	a5,80007978 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
80007a60:	80008737          	lui	a4,0x80008
80007a64:	5b872783          	lw	a5,1464(a4) # 800085b8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085b9>
80007a68:	5bc72683          	lw	a3,1468(a4)
80007a6c:	009787b3          	add	a5,a5,s1
80007a70:	0097b733          	sltu	a4,a5,s1
80007a74:	012686b3          	add	a3,a3,s2
80007a78:	00d70733          	add	a4,a4,a3
80007a7c:	ffe00693          	li	a3,-2
80007a80:	40f687b3          	sub	a5,a3,a5
80007a84:	00f6b6b3          	sltu	a3,a3,a5
80007a88:	fff74713          	not	a4,a4
			to->dticks = MAX(1, ticks);
80007a8c:	40d70733          	sub	a4,a4,a3
80007a90:	ece05ae3          	blez	a4,80007964 <z_add_timeout+0x70>
80007a94:	00f42823          	sw	a5,16(s0)
80007a98:	00e42a23          	sw	a4,20(s0)
		for (t = first(); t != NULL; t = next(t)) {
80007a9c:	ce5ff0ef          	jal	ra,80007780 <first>
80007aa0:	f25ff06f          	j	800079c4 <z_add_timeout+0xd0>
			int32_t next_time = next_timeout();
80007aa4:	dc1ff0ef          	jal	ra,80007864 <next_timeout>
			if (next_time == 0 ||
80007aa8:	00050a63          	beqz	a0,80007abc <z_add_timeout+0x1c8>
			    _current_cpu->slice_ticks != next_time) {
80007aac:	800087b7          	lui	a5,0x80008
80007ab0:	6f878793          	addi	a5,a5,1784 # 800086f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086f9>
80007ab4:	0107a783          	lw	a5,16(a5)
			if (next_time == 0 ||
80007ab8:	f8a780e3          	beq	a5,a0,80007a38 <z_add_timeout+0x144>
				sys_clock_set_timeout(next_time, false);
80007abc:	00000593          	li	a1,0
80007ac0:	9a0fe0ef          	jal	ra,80005c60 <sys_clock_set_timeout>
80007ac4:	f75ff06f          	j	80007a38 <z_add_timeout+0x144>

80007ac8 <z_abort_timeout>:
80007ac8:	00308013          	addi	zero,ra,3
{
80007acc:	ff010113          	addi	sp,sp,-16
80007ad0:	00112623          	sw	ra,12(sp)
80007ad4:	00812423          	sw	s0,8(sp)
80007ad8:	00912223          	sw	s1,4(sp)
80007adc:	01212023          	sw	s2,0(sp)
80007ae0:	00050493          	mv	s1,a0
	LOCKED(&timeout_lock) {
80007ae4:	00000413          	li	s0,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007ae8:	30047973          	csrrci	s2,mstatus,8
	int ret = -EINVAL;
80007aec:	fea00513          	li	a0,-22
80007af0:	0100006f          	j	80007b00 <z_abort_timeout+0x38>
			  : "r" (key & MSTATUS_IEN)
80007af4:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80007af8:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
80007afc:	00100413          	li	s0,1
80007b00:	00041e63          	bnez	s0,80007b1c <z_abort_timeout+0x54>
	return node->next != NULL;
80007b04:	0004a783          	lw	a5,0(s1)
		if (sys_dnode_is_linked(&to->node)) {
80007b08:	fe0786e3          	beqz	a5,80007af4 <z_abort_timeout+0x2c>
			remove_timeout(to);
80007b0c:	00048513          	mv	a0,s1
80007b10:	cb9ff0ef          	jal	ra,800077c8 <remove_timeout>
			ret = 0;
80007b14:	00040513          	mv	a0,s0
80007b18:	fddff06f          	j	80007af4 <z_abort_timeout+0x2c>
}
80007b1c:	00c12083          	lw	ra,12(sp)
80007b20:	00812403          	lw	s0,8(sp)
80007b24:	00412483          	lw	s1,4(sp)
80007b28:	00012903          	lw	s2,0(sp)
80007b2c:	01010113          	addi	sp,sp,16
80007b30:	00008067          	ret

80007b34 <z_set_timeout_expiry>:
80007b34:	00308013          	addi	zero,ra,3
{
80007b38:	fe010113          	addi	sp,sp,-32
80007b3c:	00112e23          	sw	ra,28(sp)
80007b40:	00812c23          	sw	s0,24(sp)
80007b44:	00912a23          	sw	s1,20(sp)
80007b48:	01212823          	sw	s2,16(sp)
80007b4c:	01312623          	sw	s3,12(sp)
80007b50:	00050493          	mv	s1,a0
80007b54:	00058993          	mv	s3,a1
	LOCKED(&timeout_lock) {
80007b58:	00000413          	li	s0,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007b5c:	30047973          	csrrci	s2,mstatus,8
80007b60:	0240006f          	j	80007b84 <z_set_timeout_expiry+0x50>
			      || (ticks <= next_to);
80007b64:	00100413          	li	s0,1
		bool sooner = (next_to == K_TICKS_FOREVER)
80007b68:	00147413          	andi	s0,s0,1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
80007b6c:	00100793          	li	a5,1
80007b70:	00a7d463          	bge	a5,a0,80007b78 <z_set_timeout_expiry+0x44>
80007b74:	02041663          	bnez	s0,80007ba0 <z_set_timeout_expiry+0x6c>
			  : "r" (key & MSTATUS_IEN)
80007b78:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80007b7c:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
80007b80:	00100413          	li	s0,1
80007b84:	02041863          	bnez	s0,80007bb4 <z_set_timeout_expiry+0x80>
		int next_to = next_timeout();
80007b88:	cddff0ef          	jal	ra,80007864 <next_timeout>
			      || (ticks <= next_to);
80007b8c:	fff00793          	li	a5,-1
80007b90:	fcf50ae3          	beq	a0,a5,80007b64 <z_set_timeout_expiry+0x30>
80007b94:	fc954ae3          	blt	a0,s1,80007b68 <z_set_timeout_expiry+0x34>
80007b98:	00100413          	li	s0,1
80007b9c:	fcdff06f          	j	80007b68 <z_set_timeout_expiry+0x34>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
80007ba0:	00a4d463          	bge	s1,a0,80007ba8 <z_set_timeout_expiry+0x74>
80007ba4:	00048513          	mv	a0,s1
80007ba8:	00098593          	mv	a1,s3
80007bac:	8b4fe0ef          	jal	ra,80005c60 <sys_clock_set_timeout>
80007bb0:	fc9ff06f          	j	80007b78 <z_set_timeout_expiry+0x44>
}
80007bb4:	01c12083          	lw	ra,28(sp)
80007bb8:	01812403          	lw	s0,24(sp)
80007bbc:	01412483          	lw	s1,20(sp)
80007bc0:	01012903          	lw	s2,16(sp)
80007bc4:	00c12983          	lw	s3,12(sp)
80007bc8:	02010113          	addi	sp,sp,32
80007bcc:	00008067          	ret

80007bd0 <sys_clock_announce>:
80007bd0:	00308013          	addi	zero,ra,3
{
80007bd4:	ff010113          	addi	sp,sp,-16
80007bd8:	00112623          	sw	ra,12(sp)
80007bdc:	00812423          	sw	s0,8(sp)
80007be0:	00912223          	sw	s1,4(sp)
80007be4:	01212023          	sw	s2,0(sp)
80007be8:	00050413          	mv	s0,a0
	z_time_slice(ticks);
80007bec:	a70ff0ef          	jal	ra,80006e5c <z_time_slice>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007bf0:	300474f3          	csrrci	s1,mstatus,8
	announce_remaining = ticks;
80007bf4:	800087b7          	lui	a5,0x80008
80007bf8:	5e87a023          	sw	s0,1504(a5) # 800085e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085e1>
	while (first() != NULL && first()->dticks <= announce_remaining) {
80007bfc:	06c0006f          	j	80007c68 <sys_clock_announce+0x98>
		curr_tick += dt;
80007c00:	80008737          	lui	a4,0x80008
80007c04:	41f95593          	srai	a1,s2,0x1f
80007c08:	5b872783          	lw	a5,1464(a4) # 800085b8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085b9>
80007c0c:	5bc72683          	lw	a3,1468(a4)
80007c10:	01278633          	add	a2,a5,s2
80007c14:	00f637b3          	sltu	a5,a2,a5
80007c18:	00b686b3          	add	a3,a3,a1
80007c1c:	00d787b3          	add	a5,a5,a3
80007c20:	5ac72c23          	sw	a2,1464(a4)
80007c24:	5af72e23          	sw	a5,1468(a4)
		t->dticks = 0;
80007c28:	00000793          	li	a5,0
80007c2c:	00000813          	li	a6,0
80007c30:	00f42823          	sw	a5,16(s0)
80007c34:	01042a23          	sw	a6,20(s0)
		remove_timeout(t);
80007c38:	00040513          	mv	a0,s0
80007c3c:	b8dff0ef          	jal	ra,800077c8 <remove_timeout>
			  : "r" (key & MSTATUS_IEN)
80007c40:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80007c44:	3004a073          	csrs	mstatus,s1
		t->fn(t);
80007c48:	00842783          	lw	a5,8(s0)
80007c4c:	00040513          	mv	a0,s0
80007c50:	000780e7          	jalr	a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007c54:	300474f3          	csrrci	s1,mstatus,8
		announce_remaining -= dt;
80007c58:	80008737          	lui	a4,0x80008
80007c5c:	5e072783          	lw	a5,1504(a4) # 800085e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085e1>
80007c60:	412787b3          	sub	a5,a5,s2
80007c64:	5ef72023          	sw	a5,1504(a4)
	while (first() != NULL && first()->dticks <= announce_remaining) {
80007c68:	b19ff0ef          	jal	ra,80007780 <first>
80007c6c:	00050413          	mv	s0,a0
80007c70:	02050263          	beqz	a0,80007c94 <sys_clock_announce+0xc4>
80007c74:	01052903          	lw	s2,16(a0)
80007c78:	01452703          	lw	a4,20(a0)
80007c7c:	800087b7          	lui	a5,0x80008
80007c80:	5e07a683          	lw	a3,1504(a5) # 800085e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085e1>
80007c84:	41f6d793          	srai	a5,a3,0x1f
80007c88:	00e7c663          	blt	a5,a4,80007c94 <sys_clock_announce+0xc4>
80007c8c:	f6f71ae3          	bne	a4,a5,80007c00 <sys_clock_announce+0x30>
80007c90:	f726f8e3          	bgeu	a3,s2,80007c00 <sys_clock_announce+0x30>
	if (first() != NULL) {
80007c94:	02040863          	beqz	s0,80007cc4 <sys_clock_announce+0xf4>
		first()->dticks -= announce_remaining;
80007c98:	01042683          	lw	a3,16(s0)
80007c9c:	01442783          	lw	a5,20(s0)
80007ca0:	80008737          	lui	a4,0x80008
80007ca4:	5e072703          	lw	a4,1504(a4) # 800085e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085e1>
80007ca8:	41f75613          	srai	a2,a4,0x1f
80007cac:	40e68733          	sub	a4,a3,a4
80007cb0:	00e6b6b3          	sltu	a3,a3,a4
80007cb4:	40c787b3          	sub	a5,a5,a2
80007cb8:	40d787b3          	sub	a5,a5,a3
80007cbc:	00e42823          	sw	a4,16(s0)
80007cc0:	00f42a23          	sw	a5,20(s0)
	curr_tick += announce_remaining;
80007cc4:	800086b7          	lui	a3,0x80008
80007cc8:	800085b7          	lui	a1,0x80008
80007ccc:	5e05a703          	lw	a4,1504(a1) # 800085e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085e1>
80007cd0:	41f75513          	srai	a0,a4,0x1f
80007cd4:	5b86a783          	lw	a5,1464(a3) # 800085b8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085b9>
80007cd8:	5bc6a603          	lw	a2,1468(a3)
80007cdc:	00e78733          	add	a4,a5,a4
80007ce0:	00f737b3          	sltu	a5,a4,a5
80007ce4:	00a60633          	add	a2,a2,a0
80007ce8:	00c787b3          	add	a5,a5,a2
80007cec:	5ae6ac23          	sw	a4,1464(a3)
80007cf0:	5af6ae23          	sw	a5,1468(a3)
	announce_remaining = 0;
80007cf4:	5e05a023          	sw	zero,1504(a1)
	sys_clock_set_timeout(next_timeout(), false);
80007cf8:	b6dff0ef          	jal	ra,80007864 <next_timeout>
80007cfc:	00000593          	li	a1,0
80007d00:	f61fd0ef          	jal	ra,80005c60 <sys_clock_set_timeout>
			  : "r" (key & MSTATUS_IEN)
80007d04:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80007d08:	3004a073          	csrs	mstatus,s1
}
80007d0c:	00c12083          	lw	ra,12(sp)
80007d10:	00812403          	lw	s0,8(sp)
80007d14:	00412483          	lw	s1,4(sp)
80007d18:	00012903          	lw	s2,0(sp)
80007d1c:	01010113          	addi	sp,sp,16
80007d20:	00008067          	ret

80007d24 <boot_banner>:
80007d24:	00308013          	addi	zero,ra,3
{
80007d28:	ff010113          	addi	sp,sp,-16
80007d2c:	00112623          	sw	ra,12(sp)
	printk("*** Booting Zephyr OS build %s %s ***\n",
80007d30:	80008637          	lui	a2,0x80008
80007d34:	58460613          	addi	a2,a2,1412 # 80008584 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008585>
80007d38:	800085b7          	lui	a1,0x80008
80007d3c:	51858593          	addi	a1,a1,1304 # 80008518 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008519>
80007d40:	80008537          	lui	a0,0x80008
80007d44:	53850513          	addi	a0,a0,1336 # 80008538 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008539>
80007d48:	8e0fc0ef          	jal	ra,80003e28 <printk>
}
80007d4c:	00c12083          	lw	ra,12(sp)
80007d50:	01010113          	addi	sp,sp,16
80007d54:	00008067          	ret

80007d58 <_OffsetAbsSyms>:
80007d58:	00308013          	addi	zero,ra,3
GEN_ABS_SYM_END
80007d5c:	00008067          	ret
