
zephyr.elf:     file format elf32-littleriscv


Disassembly of section rom_start:

80000000 <__start>:
SECTION_FUNC(vectors, __start)
#if defined(CONFIG_RISCV_GP)
	/* Initialize global pointer */
	.option push
	.option norelax
	la gp, __global_pointer$
80000000:	0000a197          	auipc	gp,0xa
80000004:	9e018193          	addi	gp,gp,-1568 # 800099e0 <__global_pointer$>
#else
	/*
	 * Set mtvec (Machine Trap-Vector Base-Address Register)
	 * to _isr_wrapper.
	 */
	la t0, _isr_wrapper
80000008:	00000297          	auipc	t0,0x0
8000000c:	01428293          	addi	t0,t0,20 # 8000001c <_isr_wrapper>
#endif

	csrw mtvec, t0
80000010:	30529073          	csrw	mtvec,t0

	/* Jump to __reset */
	tail __reset
80000014:	0040006f          	j	80000018 <__reset>

Disassembly of section reset:

80000018 <__reset>:
	/*
	 * jump to __initialize
	 * use call opcode in case __initialize is far away.
	 * This will be dependent on linker.ld configuration.
	 */
	call __initialize
80000018:	571010ef          	jal	ra,80001d88 <__initialize>

Disassembly of section exceptions:

8000001c <_isr_wrapper>:
	csrrw sp, mscratch, sp
1:
#endif

	/* Save caller-saved registers on current thread stack. */
	addi sp, sp, -__z_arch_esf_t_SIZEOF
8000001c:	fb010113          	addi	sp,sp,-80
	DO_CALLER_SAVED(sr)		;
80000020:	00512223          	sw	t0,4(sp)
80000024:	00612423          	sw	t1,8(sp)
80000028:	00712623          	sw	t2,12(sp)
8000002c:	01c12823          	sw	t3,16(sp)
80000030:	01d12a23          	sw	t4,20(sp)
80000034:	01e12c23          	sw	t5,24(sp)
80000038:	01f12e23          	sw	t6,28(sp)
8000003c:	02a12023          	sw	a0,32(sp)
80000040:	02b12223          	sw	a1,36(sp)
80000044:	02c12423          	sw	a2,40(sp)
80000048:	02d12623          	sw	a3,44(sp)
8000004c:	02e12823          	sw	a4,48(sp)
80000050:	02f12a23          	sw	a5,52(sp)
80000054:	03012c23          	sw	a6,56(sp)
80000058:	03112e23          	sw	a7,60(sp)
8000005c:	00112023          	sw	ra,0(sp)

	/* Save s0 in the esf and load it with &_current_cpu. */
	sr s0, __z_arch_esf_t_s0_OFFSET(sp)
80000060:	04812423          	sw	s0,72(sp)
	GET_CURRENT_CPU(s0, t0)
80000064:	00007417          	auipc	s0,0x7
80000068:	ce440413          	addi	s0,s0,-796 # 80006d48 <_kernel>
	add t0, t0, tp, %tprel_add(is_user_mode)
	sb zero, %tprel_lo(is_user_mode)(t0)
#endif

	/* Save MEPC register */
	csrr t0, mepc
8000006c:	341022f3          	csrr	t0,mepc
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
80000070:	04512023          	sw	t0,64(sp)

	/* Save MSTATUS register */
	csrr t2, mstatus
80000074:	300023f3          	csrr	t2,mstatus
	sr t2, __z_arch_esf_t_mstatus_OFFSET(sp)
80000078:	04712223          	sw	t2,68(sp)
	 * SOCs (like pulpino or riscv-qemu), the MSB is never set to indicate
	 * interrupt. Hence, check for interrupt/exception via the __soc_is_irq
	 * function (that needs to be implemented by each SOC). The result is
	 * returned via register a0 (1: interrupt, 0 exception)
	 */
	jal ra, __soc_is_irq
8000007c:	14c000ef          	jal	ra,800001c8 <__soc_is_irq>

	/* If a0 != 0, jump to is_interrupt */
	bnez a0, is_interrupt
80000080:	04051a63          	bnez	a0,800000d4 <is_interrupt>
	/*
	 * If the exception is the result of an ECALL, check whether to
	 * perform a context-switch or an IRQ offload. Otherwise call _Fault
	 * to report the exception.
	 */
	csrr t0, mcause
80000084:	342022f3          	csrr	t0,mcause
	li t2, SOC_MCAUSE_EXP_MASK
80000088:	800003b7          	lui	t2,0x80000
8000008c:	fff38393          	addi	t2,t2,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and t0, t0, t2
80000090:	0072f2b3          	and	t0,t0,t2

	/*
	 * If mcause == SOC_MCAUSE_ECALL_EXP, handle system call from
	 * kernel thread.
	 */
	li t1, SOC_MCAUSE_ECALL_EXP
80000094:	00b00313          	li	t1,11
	beq t0, t1, is_kernel_syscall
80000098:	00628a63          	beq	t0,t1,800000ac <is_kernel_syscall>
	 * Stack pointer is pointing to a z_arch_esf_t structure, pass it
	 * to _Fault (via register a0).
	 * If _Fault shall return, set return address to
	 * no_reschedule to restore stack.
	 */
	mv a0, sp
8000009c:	00010513          	mv	a0,sp
	la ra, no_reschedule
800000a0:	00000097          	auipc	ra,0x0
800000a4:	0bc08093          	addi	ra,ra,188 # 8000015c <z_riscv_thread_start>
	tail _Fault
800000a8:	4890106f          	j	80001d30 <_Fault>

800000ac <is_kernel_syscall>:
	 * again upon exiting the ISR.
	 *
	 * It's safe to always increment by 4, even with compressed
	 * instructions, because the ecall instruction is always 4 bytes.
	 */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
800000ac:	04012283          	lw	t0,64(sp)
	addi t0, t0, 4
800000b0:	00428293          	addi	t0,t0,4
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
800000b4:	04512023          	sw	t0,64(sp)
	li t1, MSTATUS_MPRV
	csrs mstatus, t1
#endif

	/* Determine what to do. Operation code is in t0. */
	lr t0, __z_arch_esf_t_t0_OFFSET(sp)
800000b8:	00412283          	lw	t0,4(sp)

	.if RV_ECALL_RUNTIME_EXCEPT != 0; .err; .endif
	beqz t0, do_fault
800000bc:	00028663          	beqz	t0,800000c8 <do_fault>
	j reschedule
skip_schedule:
#endif

	/* default fault code is K_ERR_KERNEL_OOPS */
	li a0, 3
800000c0:	00300513          	li	a0,3
	j 1f
800000c4:	0080006f          	j	800000cc <do_fault+0x4>

800000c8 <do_fault>:

do_fault:
	/* Handle RV_ECALL_RUNTIME_EXCEPT. Retrieve reason in a0, esf in A1. */
	lr a0, __z_arch_esf_t_a0_OFFSET(sp)
800000c8:	02012503          	lw	a0,32(sp)
1:	mv a1, sp
800000cc:	00010593          	mv	a1,sp
	tail z_riscv_fatal_error
800000d0:	4550106f          	j	80001d24 <z_riscv_fatal_error>

800000d4 <is_interrupt>:
	csrs mstatus, t1
2:
#endif

	/* Increment _current_cpu->nested */
	lw t1, ___cpu_t_nested_OFFSET(s0)
800000d4:	00042303          	lw	t1,0(s0)
	addi t2, t1, 1
800000d8:	00130393          	addi	t2,t1,1
	sw t2, ___cpu_t_nested_OFFSET(s0)
800000dc:	00742023          	sw	t2,0(s0)
	bnez t1, on_irq_stack
800000e0:	00031a63          	bnez	t1,800000f4 <on_irq_stack>

	/* Switch to interrupt stack */
	mv t0, sp
800000e4:	00010293          	mv	t0,sp
	lr sp, ___cpu_t_irq_stack_OFFSET(s0)
800000e8:	00442103          	lw	sp,4(s0)

	/*
	 * Save thread stack pointer on interrupt stack
	 * In RISC-V, stack pointer needs to be 16-byte aligned
	 */
	addi sp, sp, -16
800000ec:	ff010113          	addi	sp,sp,-16
	sr t0, 0(sp)
800000f0:	00512023          	sw	t0,0(sp)

800000f4 <on_irq_stack>:
#ifdef CONFIG_TRACING_ISR
	call sys_trace_isr_enter
#endif

	/* Get IRQ causing interrupt */
	csrr a0, mcause
800000f4:	34202573          	csrr	a0,mcause
	li t0, SOC_MCAUSE_EXP_MASK
800000f8:	800002b7          	lui	t0,0x80000
800000fc:	fff28293          	addi	t0,t0,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and a0, a0, t0
80000100:	00557533          	and	a0,a0,t0

	/*
	 * Clear pending IRQ generating the interrupt at SOC level
	 * Pass IRQ number to __soc_handle_irq via register a0
	 */
	jal ra, __soc_handle_irq
80000104:	0b4000ef          	jal	ra,800001b8 <__soc_handle_irq>

	/*
	 * Call corresponding registered function in _sw_isr_table.
	 * (table is 2-word wide, we should shift index accordingly)
	 */
	la t0, _sw_isr_table
80000108:	00006297          	auipc	t0,0x6
8000010c:	27828293          	addi	t0,t0,632 # 80006380 <_sw_isr_table>
	slli a0, a0, (RV_REGSHIFT + 1)
80000110:	00351513          	slli	a0,a0,0x3
	add t0, t0, a0
80000114:	00a282b3          	add	t0,t0,a0

	/* Load argument in a0 register */
	lr a0, 0(t0)
80000118:	0002a503          	lw	a0,0(t0)

	/* Load ISR function address in register t1 */
	lr t1, RV_REGSIZE(t0)
8000011c:	0042a303          	lw	t1,4(t0)

	/* Call ISR function */
	jalr ra, t1, 0
80000120:	000300e7          	jalr	t1

80000124 <irq_done>:
    call sys_trace_isr_exit
#endif

irq_done:
	/* Decrement _current_cpu->nested */
	lw t2, ___cpu_t_nested_OFFSET(s0)
80000124:	00042383          	lw	t2,0(s0)
	addi t2, t2, -1
80000128:	fff38393          	addi	t2,t2,-1
	sw t2, ___cpu_t_nested_OFFSET(s0)
8000012c:	00742023          	sw	t2,0(s0)
	bnez t2, no_reschedule
80000130:	02039663          	bnez	t2,8000015c <z_riscv_thread_start>

	/* nested count is back to 0: Return to thread stack */
	lr sp, 0(sp)
80000134:	00012103          	lw	sp,0(sp)

80000138 <check_reschedule>:
#endif

check_reschedule:

	/* Get pointer to current thread on this CPU */
	lr a1, ___cpu_t_current_OFFSET(s0)
80000138:	00842583          	lw	a1,8(s0)
	/*
	 * Get next thread to schedule with z_get_next_switch_handle().
	 * We pass it a NULL as we didn't save the whole thread context yet.
	 * If no scheduling is necessary then NULL will be returned.
	 */
	addi sp, sp, -16
8000013c:	ff010113          	addi	sp,sp,-16
	sr a1, 0(sp)
80000140:	00b12023          	sw	a1,0(sp)
	mv a0, zero
80000144:	00000513          	li	a0,0
	call z_get_next_switch_handle
80000148:	57c030ef          	jal	ra,800036c4 <z_get_next_switch_handle>
	lr a1, 0(sp)
8000014c:	00012583          	lw	a1,0(sp)
	addi sp, sp, 16
80000150:	01010113          	addi	sp,sp,16
	beqz a0, no_reschedule
80000154:	00050463          	beqz	a0,8000015c <z_riscv_thread_start>

80000158 <reschedule>:
	/*
	 * Perform context switch:
	 * a0 = new thread
	 * a1 = old thread
	 */
	call z_riscv_switch
80000158:	4ad010ef          	jal	ra,80001e04 <z_riscv_switch>

8000015c <z_riscv_thread_start>:
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
8000015c:	04012283          	lw	t0,64(sp)
	csrw mepc, t0
80000160:	34129073          	csrw	mepc,t0

	/* Restore MSTATUS register */
	lr t2, __z_arch_esf_t_mstatus_OFFSET(sp)
80000164:	04412383          	lw	t2,68(sp)
	csrrw t0, mstatus, t2
80000168:	300392f3          	csrrw	t0,mstatus,t2
	csrw mscratch, t0
1:
#endif

	/* Restore s0 (it is no longer ours) */
	lr s0, __z_arch_esf_t_s0_OFFSET(sp)
8000016c:	04812403          	lw	s0,72(sp)

	/* Restore caller-saved registers from thread stack */
	DO_CALLER_SAVED(lr)
80000170:	00412283          	lw	t0,4(sp)
80000174:	00812303          	lw	t1,8(sp)
80000178:	00c12383          	lw	t2,12(sp)
8000017c:	01012e03          	lw	t3,16(sp)
80000180:	01412e83          	lw	t4,20(sp)
80000184:	01812f03          	lw	t5,24(sp)
80000188:	01c12f83          	lw	t6,28(sp)
8000018c:	02012503          	lw	a0,32(sp)
80000190:	02412583          	lw	a1,36(sp)
80000194:	02812603          	lw	a2,40(sp)
80000198:	02c12683          	lw	a3,44(sp)
8000019c:	03012703          	lw	a4,48(sp)
800001a0:	03412783          	lw	a5,52(sp)
800001a4:	03812803          	lw	a6,56(sp)
800001a8:	03c12883          	lw	a7,60(sp)
800001ac:	00012083          	lw	ra,0(sp)
#ifdef CONFIG_USERSPACE
	/* retrieve saved stack pointer */
	lr sp, __z_arch_esf_t_sp_OFFSET(sp)
#else
	/* remove esf from the stack */
	addi sp, sp, __z_arch_esf_t_SIZEOF
800001b0:	05010113          	addi	sp,sp,80
#endif

	mret
800001b4:	30200073          	mret

800001b8 <__soc_handle_irq>:
 * SOC-specific function to handle pending IRQ number generating the interrupt.
 * Exception number is given as parameter via register a0.
 */
SECTION_FUNC(exception.other, __soc_handle_irq)
	/* Clear exception number from CSR mip register */
	li t1, 1
800001b8:	00100313          	li	t1,1
	sll t0, t1, a0
800001bc:	00a312b3          	sll	t0,t1,a0
	csrrc t1, mip, t0
800001c0:	3442b373          	csrrc	t1,mip,t0

	/* Return */
	ret
800001c4:	00008067          	ret

800001c8 <__soc_is_irq>:
 * return 1 (interrupt) or 0 (exception)
 *
 */
SECTION_FUNC(exception.other, __soc_is_irq)
	/* Read mcause and check if interrupt bit is set */
	csrr t0, mcause
800001c8:	342022f3          	csrr	t0,mcause
	li t1, SOC_MCAUSE_IRQ_MASK
800001cc:	80000337          	lui	t1,0x80000
	and t0, t0, t1
800001d0:	0062f2b3          	and	t0,t0,t1

	/* If interrupt bit is not set, return with 0 */
	addi a0, x0, 0
800001d4:	00000513          	li	a0,0
	beqz t0, not_interrupt
800001d8:	00028463          	beqz	t0,800001e0 <not_interrupt>
	addi a0, a0, 1
800001dc:	00150513          	addi	a0,a0,1

800001e0 <not_interrupt>:

not_interrupt:
	/* return */
	ret
800001e0:	00008067          	ret

Disassembly of section text:

800001e4 <__udivdi3>:
800001e4:	00050893          	mv	a7,a0
800001e8:	00058313          	mv	t1,a1
800001ec:	00060713          	mv	a4,a2
800001f0:	00050813          	mv	a6,a0
800001f4:	00058793          	mv	a5,a1
800001f8:	28069263          	bnez	a3,8000047c <__udivdi3+0x298>
800001fc:	800065b7          	lui	a1,0x80006
80000200:	58c58593          	addi	a1,a1,1420 # 8000658c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000658d>
80000204:	0ec37663          	bgeu	t1,a2,800002f0 <__udivdi3+0x10c>
80000208:	000106b7          	lui	a3,0x10
8000020c:	0cd67863          	bgeu	a2,a3,800002dc <__udivdi3+0xf8>
80000210:	10063693          	sltiu	a3,a2,256
80000214:	0016c693          	xori	a3,a3,1
80000218:	00369693          	slli	a3,a3,0x3
8000021c:	00d65533          	srl	a0,a2,a3
80000220:	00a585b3          	add	a1,a1,a0
80000224:	0005c583          	lbu	a1,0(a1)
80000228:	02000513          	li	a0,32
8000022c:	00d586b3          	add	a3,a1,a3
80000230:	40d505b3          	sub	a1,a0,a3
80000234:	00d50c63          	beq	a0,a3,8000024c <__udivdi3+0x68>
80000238:	00b317b3          	sll	a5,t1,a1
8000023c:	00d8d6b3          	srl	a3,a7,a3
80000240:	00b61733          	sll	a4,a2,a1
80000244:	00f6e7b3          	or	a5,a3,a5
80000248:	00b89833          	sll	a6,a7,a1
8000024c:	01075593          	srli	a1,a4,0x10
80000250:	02b7d333          	divu	t1,a5,a1
80000254:	01071613          	slli	a2,a4,0x10
80000258:	01065613          	srli	a2,a2,0x10
8000025c:	02b7f7b3          	remu	a5,a5,a1
80000260:	00030513          	mv	a0,t1
80000264:	026608b3          	mul	a7,a2,t1
80000268:	01079693          	slli	a3,a5,0x10
8000026c:	01085793          	srli	a5,a6,0x10
80000270:	00d7e7b3          	or	a5,a5,a3
80000274:	0117fe63          	bgeu	a5,a7,80000290 <__udivdi3+0xac>
80000278:	00f707b3          	add	a5,a4,a5
8000027c:	fff30513          	addi	a0,t1,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
80000280:	00e7e863          	bltu	a5,a4,80000290 <__udivdi3+0xac>
80000284:	0117f663          	bgeu	a5,a7,80000290 <__udivdi3+0xac>
80000288:	ffe30513          	addi	a0,t1,-2
8000028c:	00e787b3          	add	a5,a5,a4
80000290:	411787b3          	sub	a5,a5,a7
80000294:	02b7d8b3          	divu	a7,a5,a1
80000298:	01081813          	slli	a6,a6,0x10
8000029c:	01085813          	srli	a6,a6,0x10
800002a0:	02b7f7b3          	remu	a5,a5,a1
800002a4:	031606b3          	mul	a3,a2,a7
800002a8:	01079793          	slli	a5,a5,0x10
800002ac:	00f86833          	or	a6,a6,a5
800002b0:	00088793          	mv	a5,a7
800002b4:	00d87c63          	bgeu	a6,a3,800002cc <__udivdi3+0xe8>
800002b8:	01070833          	add	a6,a4,a6
800002bc:	fff88793          	addi	a5,a7,-1
800002c0:	00e86663          	bltu	a6,a4,800002cc <__udivdi3+0xe8>
800002c4:	00d87463          	bgeu	a6,a3,800002cc <__udivdi3+0xe8>
800002c8:	ffe88793          	addi	a5,a7,-2
800002cc:	01051513          	slli	a0,a0,0x10
800002d0:	00f56533          	or	a0,a0,a5
800002d4:	00000593          	li	a1,0
800002d8:	00008067          	ret
800002dc:	01000537          	lui	a0,0x1000
800002e0:	01000693          	li	a3,16
800002e4:	f2a66ce3          	bltu	a2,a0,8000021c <__udivdi3+0x38>
800002e8:	01800693          	li	a3,24
800002ec:	f31ff06f          	j	8000021c <__udivdi3+0x38>
800002f0:	00000693          	li	a3,0
800002f4:	00060c63          	beqz	a2,8000030c <__udivdi3+0x128>
800002f8:	000107b7          	lui	a5,0x10
800002fc:	0cf67063          	bgeu	a2,a5,800003bc <__udivdi3+0x1d8>
80000300:	10063693          	sltiu	a3,a2,256
80000304:	0016c693          	xori	a3,a3,1
80000308:	00369693          	slli	a3,a3,0x3
8000030c:	00d657b3          	srl	a5,a2,a3
80000310:	00f585b3          	add	a1,a1,a5
80000314:	0005c783          	lbu	a5,0(a1)
80000318:	00d787b3          	add	a5,a5,a3
8000031c:	02000693          	li	a3,32
80000320:	40f685b3          	sub	a1,a3,a5
80000324:	0af69663          	bne	a3,a5,800003d0 <__udivdi3+0x1ec>
80000328:	40c307b3          	sub	a5,t1,a2
8000032c:	00100593          	li	a1,1
80000330:	01075893          	srli	a7,a4,0x10
80000334:	0317de33          	divu	t3,a5,a7
80000338:	01071613          	slli	a2,a4,0x10
8000033c:	01065613          	srli	a2,a2,0x10
80000340:	01085693          	srli	a3,a6,0x10
80000344:	0317f7b3          	remu	a5,a5,a7
80000348:	000e0513          	mv	a0,t3
8000034c:	03c60333          	mul	t1,a2,t3
80000350:	01079793          	slli	a5,a5,0x10
80000354:	00f6e7b3          	or	a5,a3,a5
80000358:	0067fe63          	bgeu	a5,t1,80000374 <__udivdi3+0x190>
8000035c:	00f707b3          	add	a5,a4,a5
80000360:	fffe0513          	addi	a0,t3,-1
80000364:	00e7e863          	bltu	a5,a4,80000374 <__udivdi3+0x190>
80000368:	0067f663          	bgeu	a5,t1,80000374 <__udivdi3+0x190>
8000036c:	ffee0513          	addi	a0,t3,-2
80000370:	00e787b3          	add	a5,a5,a4
80000374:	406787b3          	sub	a5,a5,t1
80000378:	0317d333          	divu	t1,a5,a7
8000037c:	01081813          	slli	a6,a6,0x10
80000380:	01085813          	srli	a6,a6,0x10
80000384:	0317f7b3          	remu	a5,a5,a7
80000388:	026606b3          	mul	a3,a2,t1
8000038c:	01079793          	slli	a5,a5,0x10
80000390:	00f86833          	or	a6,a6,a5
80000394:	00030793          	mv	a5,t1
80000398:	00d87c63          	bgeu	a6,a3,800003b0 <__udivdi3+0x1cc>
8000039c:	01070833          	add	a6,a4,a6
800003a0:	fff30793          	addi	a5,t1,-1
800003a4:	00e86663          	bltu	a6,a4,800003b0 <__udivdi3+0x1cc>
800003a8:	00d87463          	bgeu	a6,a3,800003b0 <__udivdi3+0x1cc>
800003ac:	ffe30793          	addi	a5,t1,-2
800003b0:	01051513          	slli	a0,a0,0x10
800003b4:	00f56533          	or	a0,a0,a5
800003b8:	00008067          	ret
800003bc:	010007b7          	lui	a5,0x1000
800003c0:	01000693          	li	a3,16
800003c4:	f4f664e3          	bltu	a2,a5,8000030c <__udivdi3+0x128>
800003c8:	01800693          	li	a3,24
800003cc:	f41ff06f          	j	8000030c <__udivdi3+0x128>
800003d0:	00b61733          	sll	a4,a2,a1
800003d4:	00f356b3          	srl	a3,t1,a5
800003d8:	01075513          	srli	a0,a4,0x10
800003dc:	00b31333          	sll	t1,t1,a1
800003e0:	00f8d7b3          	srl	a5,a7,a5
800003e4:	0067e7b3          	or	a5,a5,t1
800003e8:	02a6d333          	divu	t1,a3,a0
800003ec:	01071613          	slli	a2,a4,0x10
800003f0:	01065613          	srli	a2,a2,0x10
800003f4:	00b89833          	sll	a6,a7,a1
800003f8:	02a6f6b3          	remu	a3,a3,a0
800003fc:	026608b3          	mul	a7,a2,t1
80000400:	01069593          	slli	a1,a3,0x10
80000404:	0107d693          	srli	a3,a5,0x10
80000408:	00b6e6b3          	or	a3,a3,a1
8000040c:	00030593          	mv	a1,t1
80000410:	0116fe63          	bgeu	a3,a7,8000042c <__udivdi3+0x248>
80000414:	00d706b3          	add	a3,a4,a3
80000418:	fff30593          	addi	a1,t1,-1
8000041c:	00e6e863          	bltu	a3,a4,8000042c <__udivdi3+0x248>
80000420:	0116f663          	bgeu	a3,a7,8000042c <__udivdi3+0x248>
80000424:	ffe30593          	addi	a1,t1,-2
80000428:	00e686b3          	add	a3,a3,a4
8000042c:	411686b3          	sub	a3,a3,a7
80000430:	02a6d8b3          	divu	a7,a3,a0
80000434:	01079793          	slli	a5,a5,0x10
80000438:	0107d793          	srli	a5,a5,0x10
8000043c:	02a6f6b3          	remu	a3,a3,a0
80000440:	03160633          	mul	a2,a2,a7
80000444:	01069693          	slli	a3,a3,0x10
80000448:	00d7e7b3          	or	a5,a5,a3
8000044c:	00088693          	mv	a3,a7
80000450:	00c7fe63          	bgeu	a5,a2,8000046c <__udivdi3+0x288>
80000454:	00f707b3          	add	a5,a4,a5
80000458:	fff88693          	addi	a3,a7,-1
8000045c:	00e7e863          	bltu	a5,a4,8000046c <__udivdi3+0x288>
80000460:	00c7f663          	bgeu	a5,a2,8000046c <__udivdi3+0x288>
80000464:	ffe88693          	addi	a3,a7,-2
80000468:	00e787b3          	add	a5,a5,a4
8000046c:	01059593          	slli	a1,a1,0x10
80000470:	40c787b3          	sub	a5,a5,a2
80000474:	00d5e5b3          	or	a1,a1,a3
80000478:	eb9ff06f          	j	80000330 <__udivdi3+0x14c>
8000047c:	18d5e663          	bltu	a1,a3,80000608 <__udivdi3+0x424>
80000480:	000107b7          	lui	a5,0x10
80000484:	04f6f463          	bgeu	a3,a5,800004cc <__udivdi3+0x2e8>
80000488:	1006b713          	sltiu	a4,a3,256
8000048c:	00174713          	xori	a4,a4,1
80000490:	00371713          	slli	a4,a4,0x3
80000494:	800067b7          	lui	a5,0x80006
80000498:	00e6d5b3          	srl	a1,a3,a4
8000049c:	58c78793          	addi	a5,a5,1420 # 8000658c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000658d>
800004a0:	00b787b3          	add	a5,a5,a1
800004a4:	0007c783          	lbu	a5,0(a5)
800004a8:	00e787b3          	add	a5,a5,a4
800004ac:	02000713          	li	a4,32
800004b0:	40f705b3          	sub	a1,a4,a5
800004b4:	02f71663          	bne	a4,a5,800004e0 <__udivdi3+0x2fc>
800004b8:	00100513          	li	a0,1
800004bc:	e066eee3          	bltu	a3,t1,800002d8 <__udivdi3+0xf4>
800004c0:	00c8b533          	sltu	a0,a7,a2
800004c4:	00154513          	xori	a0,a0,1
800004c8:	00008067          	ret
800004cc:	010007b7          	lui	a5,0x1000
800004d0:	01000713          	li	a4,16
800004d4:	fcf6e0e3          	bltu	a3,a5,80000494 <__udivdi3+0x2b0>
800004d8:	01800713          	li	a4,24
800004dc:	fb9ff06f          	j	80000494 <__udivdi3+0x2b0>
800004e0:	00f65733          	srl	a4,a2,a5
800004e4:	00b696b3          	sll	a3,a3,a1
800004e8:	00d766b3          	or	a3,a4,a3
800004ec:	00f35733          	srl	a4,t1,a5
800004f0:	00b31333          	sll	t1,t1,a1
800004f4:	00f8d7b3          	srl	a5,a7,a5
800004f8:	0067e7b3          	or	a5,a5,t1
800004fc:	0106d313          	srli	t1,a3,0x10
80000500:	02675eb3          	divu	t4,a4,t1
80000504:	01069813          	slli	a6,a3,0x10
80000508:	01085813          	srli	a6,a6,0x10
8000050c:	00b61633          	sll	a2,a2,a1
80000510:	02677733          	remu	a4,a4,t1
80000514:	03d80e33          	mul	t3,a6,t4
80000518:	01071513          	slli	a0,a4,0x10
8000051c:	0107d713          	srli	a4,a5,0x10
80000520:	00a76733          	or	a4,a4,a0
80000524:	000e8513          	mv	a0,t4
80000528:	01c77e63          	bgeu	a4,t3,80000544 <__udivdi3+0x360>
8000052c:	00e68733          	add	a4,a3,a4
80000530:	fffe8513          	addi	a0,t4,-1
80000534:	00d76863          	bltu	a4,a3,80000544 <__udivdi3+0x360>
80000538:	01c77663          	bgeu	a4,t3,80000544 <__udivdi3+0x360>
8000053c:	ffee8513          	addi	a0,t4,-2
80000540:	00d70733          	add	a4,a4,a3
80000544:	41c70733          	sub	a4,a4,t3
80000548:	02675e33          	divu	t3,a4,t1
8000054c:	01079793          	slli	a5,a5,0x10
80000550:	0107d793          	srli	a5,a5,0x10
80000554:	02677733          	remu	a4,a4,t1
80000558:	03c80833          	mul	a6,a6,t3
8000055c:	01071713          	slli	a4,a4,0x10
80000560:	00e7e7b3          	or	a5,a5,a4
80000564:	000e0713          	mv	a4,t3
80000568:	0107fe63          	bgeu	a5,a6,80000584 <__udivdi3+0x3a0>
8000056c:	00f687b3          	add	a5,a3,a5
80000570:	fffe0713          	addi	a4,t3,-1
80000574:	00d7e863          	bltu	a5,a3,80000584 <__udivdi3+0x3a0>
80000578:	0107f663          	bgeu	a5,a6,80000584 <__udivdi3+0x3a0>
8000057c:	ffee0713          	addi	a4,t3,-2
80000580:	00d787b3          	add	a5,a5,a3
80000584:	01051513          	slli	a0,a0,0x10
80000588:	00010e37          	lui	t3,0x10
8000058c:	00e56533          	or	a0,a0,a4
80000590:	fffe0693          	addi	a3,t3,-1 # ffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7fff>
80000594:	00d57733          	and	a4,a0,a3
80000598:	410787b3          	sub	a5,a5,a6
8000059c:	00d676b3          	and	a3,a2,a3
800005a0:	01055813          	srli	a6,a0,0x10
800005a4:	01065613          	srli	a2,a2,0x10
800005a8:	02d70333          	mul	t1,a4,a3
800005ac:	02d806b3          	mul	a3,a6,a3
800005b0:	02c70733          	mul	a4,a4,a2
800005b4:	02c80833          	mul	a6,a6,a2
800005b8:	00d70633          	add	a2,a4,a3
800005bc:	01035713          	srli	a4,t1,0x10
800005c0:	00c70733          	add	a4,a4,a2
800005c4:	00d77463          	bgeu	a4,a3,800005cc <__udivdi3+0x3e8>
800005c8:	01c80833          	add	a6,a6,t3
800005cc:	01075693          	srli	a3,a4,0x10
800005d0:	010686b3          	add	a3,a3,a6
800005d4:	02d7e663          	bltu	a5,a3,80000600 <__udivdi3+0x41c>
800005d8:	ced79ee3          	bne	a5,a3,800002d4 <__udivdi3+0xf0>
800005dc:	000107b7          	lui	a5,0x10
800005e0:	fff78793          	addi	a5,a5,-1 # ffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7fff>
800005e4:	00f77733          	and	a4,a4,a5
800005e8:	01071713          	slli	a4,a4,0x10
800005ec:	00f37333          	and	t1,t1,a5
800005f0:	00b898b3          	sll	a7,a7,a1
800005f4:	00670733          	add	a4,a4,t1
800005f8:	00000593          	li	a1,0
800005fc:	cce8fee3          	bgeu	a7,a4,800002d8 <__udivdi3+0xf4>
80000600:	fff50513          	addi	a0,a0,-1 # ffffff <CONFIG_SRAM_SIZE+0xefffff>
80000604:	cd1ff06f          	j	800002d4 <__udivdi3+0xf0>
80000608:	00000593          	li	a1,0
8000060c:	00000513          	li	a0,0
80000610:	00008067          	ret

80000614 <__umoddi3>:
80000614:	00060813          	mv	a6,a2
80000618:	00050793          	mv	a5,a0
8000061c:	00058713          	mv	a4,a1
80000620:	20069663          	bnez	a3,8000082c <__umoddi3+0x218>
80000624:	800068b7          	lui	a7,0x80006
80000628:	58c88893          	addi	a7,a7,1420 # 8000658c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000658d>
8000062c:	0cc5fc63          	bgeu	a1,a2,80000704 <__umoddi3+0xf0>
80000630:	000106b7          	lui	a3,0x10
80000634:	0ad67e63          	bgeu	a2,a3,800006f0 <__umoddi3+0xdc>
80000638:	10063693          	sltiu	a3,a2,256
8000063c:	0016c693          	xori	a3,a3,1
80000640:	00369693          	slli	a3,a3,0x3
80000644:	00d65333          	srl	t1,a2,a3
80000648:	006888b3          	add	a7,a7,t1
8000064c:	0008c883          	lbu	a7,0(a7)
80000650:	02000313          	li	t1,32
80000654:	00d886b3          	add	a3,a7,a3
80000658:	40d308b3          	sub	a7,t1,a3
8000065c:	00d30c63          	beq	t1,a3,80000674 <__umoddi3+0x60>
80000660:	01159733          	sll	a4,a1,a7
80000664:	00d556b3          	srl	a3,a0,a3
80000668:	01161833          	sll	a6,a2,a7
8000066c:	00e6e733          	or	a4,a3,a4
80000670:	011517b3          	sll	a5,a0,a7
80000674:	01085613          	srli	a2,a6,0x10
80000678:	02c756b3          	divu	a3,a4,a2
8000067c:	01081513          	slli	a0,a6,0x10
80000680:	01055513          	srli	a0,a0,0x10
80000684:	02c77733          	remu	a4,a4,a2
80000688:	02a686b3          	mul	a3,a3,a0
8000068c:	01071593          	slli	a1,a4,0x10
80000690:	0107d713          	srli	a4,a5,0x10
80000694:	00b76733          	or	a4,a4,a1
80000698:	00d77a63          	bgeu	a4,a3,800006ac <__umoddi3+0x98>
8000069c:	00e80733          	add	a4,a6,a4
800006a0:	01076663          	bltu	a4,a6,800006ac <__umoddi3+0x98>
800006a4:	00d77463          	bgeu	a4,a3,800006ac <__umoddi3+0x98>
800006a8:	01070733          	add	a4,a4,a6
800006ac:	40d70733          	sub	a4,a4,a3
800006b0:	02c756b3          	divu	a3,a4,a2
800006b4:	02c77733          	remu	a4,a4,a2
800006b8:	02a686b3          	mul	a3,a3,a0
800006bc:	01079793          	slli	a5,a5,0x10
800006c0:	01071713          	slli	a4,a4,0x10
800006c4:	0107d793          	srli	a5,a5,0x10
800006c8:	00e7e7b3          	or	a5,a5,a4
800006cc:	00d7fa63          	bgeu	a5,a3,800006e0 <__umoddi3+0xcc>
800006d0:	00f807b3          	add	a5,a6,a5
800006d4:	0107e663          	bltu	a5,a6,800006e0 <__umoddi3+0xcc>
800006d8:	00d7f463          	bgeu	a5,a3,800006e0 <__umoddi3+0xcc>
800006dc:	010787b3          	add	a5,a5,a6
800006e0:	40d787b3          	sub	a5,a5,a3
800006e4:	0117d533          	srl	a0,a5,a7
800006e8:	00000593          	li	a1,0
800006ec:	00008067          	ret
800006f0:	01000337          	lui	t1,0x1000
800006f4:	01000693          	li	a3,16
800006f8:	f46666e3          	bltu	a2,t1,80000644 <__umoddi3+0x30>
800006fc:	01800693          	li	a3,24
80000700:	f45ff06f          	j	80000644 <__umoddi3+0x30>
80000704:	00000693          	li	a3,0
80000708:	00060c63          	beqz	a2,80000720 <__umoddi3+0x10c>
8000070c:	00010737          	lui	a4,0x10
80000710:	06e67e63          	bgeu	a2,a4,8000078c <__umoddi3+0x178>
80000714:	10063693          	sltiu	a3,a2,256
80000718:	0016c693          	xori	a3,a3,1
8000071c:	00369693          	slli	a3,a3,0x3
80000720:	00d65733          	srl	a4,a2,a3
80000724:	00e888b3          	add	a7,a7,a4
80000728:	0008c703          	lbu	a4,0(a7)
8000072c:	00d70733          	add	a4,a4,a3
80000730:	02000693          	li	a3,32
80000734:	40e688b3          	sub	a7,a3,a4
80000738:	06e69463          	bne	a3,a4,800007a0 <__umoddi3+0x18c>
8000073c:	40c58733          	sub	a4,a1,a2
80000740:	01085593          	srli	a1,a6,0x10
80000744:	02b75633          	divu	a2,a4,a1
80000748:	01081513          	slli	a0,a6,0x10
8000074c:	01055513          	srli	a0,a0,0x10
80000750:	0107d693          	srli	a3,a5,0x10
80000754:	02b77733          	remu	a4,a4,a1
80000758:	02a60633          	mul	a2,a2,a0
8000075c:	01071713          	slli	a4,a4,0x10
80000760:	00e6e733          	or	a4,a3,a4
80000764:	00c77a63          	bgeu	a4,a2,80000778 <__umoddi3+0x164>
80000768:	00e80733          	add	a4,a6,a4
8000076c:	01076663          	bltu	a4,a6,80000778 <__umoddi3+0x164>
80000770:	00c77463          	bgeu	a4,a2,80000778 <__umoddi3+0x164>
80000774:	01070733          	add	a4,a4,a6
80000778:	40c70733          	sub	a4,a4,a2
8000077c:	02b756b3          	divu	a3,a4,a1
80000780:	02b77733          	remu	a4,a4,a1
80000784:	02a686b3          	mul	a3,a3,a0
80000788:	f35ff06f          	j	800006bc <__umoddi3+0xa8>
8000078c:	01000737          	lui	a4,0x1000
80000790:	01000693          	li	a3,16
80000794:	f8e666e3          	bltu	a2,a4,80000720 <__umoddi3+0x10c>
80000798:	01800693          	li	a3,24
8000079c:	f85ff06f          	j	80000720 <__umoddi3+0x10c>
800007a0:	01161833          	sll	a6,a2,a7
800007a4:	00e5d6b3          	srl	a3,a1,a4
800007a8:	011517b3          	sll	a5,a0,a7
800007ac:	011595b3          	sll	a1,a1,a7
800007b0:	00e55733          	srl	a4,a0,a4
800007b4:	01085513          	srli	a0,a6,0x10
800007b8:	00b76733          	or	a4,a4,a1
800007bc:	02a6d5b3          	divu	a1,a3,a0
800007c0:	01081313          	slli	t1,a6,0x10
800007c4:	01035313          	srli	t1,t1,0x10
800007c8:	02a6f6b3          	remu	a3,a3,a0
800007cc:	026585b3          	mul	a1,a1,t1
800007d0:	01069613          	slli	a2,a3,0x10
800007d4:	01075693          	srli	a3,a4,0x10
800007d8:	00c6e6b3          	or	a3,a3,a2
800007dc:	00b6fa63          	bgeu	a3,a1,800007f0 <__umoddi3+0x1dc>
800007e0:	00d806b3          	add	a3,a6,a3
800007e4:	0106e663          	bltu	a3,a6,800007f0 <__umoddi3+0x1dc>
800007e8:	00b6f463          	bgeu	a3,a1,800007f0 <__umoddi3+0x1dc>
800007ec:	010686b3          	add	a3,a3,a6
800007f0:	40b686b3          	sub	a3,a3,a1
800007f4:	02a6d633          	divu	a2,a3,a0
800007f8:	01071713          	slli	a4,a4,0x10
800007fc:	01075713          	srli	a4,a4,0x10
80000800:	02a6f6b3          	remu	a3,a3,a0
80000804:	02660633          	mul	a2,a2,t1
80000808:	01069693          	slli	a3,a3,0x10
8000080c:	00d76733          	or	a4,a4,a3
80000810:	00c77a63          	bgeu	a4,a2,80000824 <__umoddi3+0x210>
80000814:	00e80733          	add	a4,a6,a4
80000818:	01076663          	bltu	a4,a6,80000824 <__umoddi3+0x210>
8000081c:	00c77463          	bgeu	a4,a2,80000824 <__umoddi3+0x210>
80000820:	01070733          	add	a4,a4,a6
80000824:	40c70733          	sub	a4,a4,a2
80000828:	f19ff06f          	j	80000740 <__umoddi3+0x12c>
8000082c:	1cd5e463          	bltu	a1,a3,800009f4 <__umoddi3+0x3e0>
80000830:	00010837          	lui	a6,0x10
80000834:	0506fe63          	bgeu	a3,a6,80000890 <__umoddi3+0x27c>
80000838:	1006b813          	sltiu	a6,a3,256
8000083c:	00184813          	xori	a6,a6,1
80000840:	00381813          	slli	a6,a6,0x3
80000844:	800068b7          	lui	a7,0x80006
80000848:	0106d333          	srl	t1,a3,a6
8000084c:	58c88893          	addi	a7,a7,1420 # 8000658c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000658d>
80000850:	006888b3          	add	a7,a7,t1
80000854:	0008c883          	lbu	a7,0(a7)
80000858:	02000313          	li	t1,32
8000085c:	010888b3          	add	a7,a7,a6
80000860:	41130833          	sub	a6,t1,a7
80000864:	05131063          	bne	t1,a7,800008a4 <__umoddi3+0x290>
80000868:	00b6e463          	bltu	a3,a1,80000870 <__umoddi3+0x25c>
8000086c:	00c56c63          	bltu	a0,a2,80000884 <__umoddi3+0x270>
80000870:	40c50633          	sub	a2,a0,a2
80000874:	40d586b3          	sub	a3,a1,a3
80000878:	00c53733          	sltu	a4,a0,a2
8000087c:	00060793          	mv	a5,a2
80000880:	40e68733          	sub	a4,a3,a4
80000884:	00078513          	mv	a0,a5
80000888:	00070593          	mv	a1,a4
8000088c:	00008067          	ret
80000890:	010008b7          	lui	a7,0x1000
80000894:	01000813          	li	a6,16
80000898:	fb16e6e3          	bltu	a3,a7,80000844 <__umoddi3+0x230>
8000089c:	01800813          	li	a6,24
800008a0:	fa5ff06f          	j	80000844 <__umoddi3+0x230>
800008a4:	011657b3          	srl	a5,a2,a7
800008a8:	010696b3          	sll	a3,a3,a6
800008ac:	00d7e6b3          	or	a3,a5,a3
800008b0:	0115d733          	srl	a4,a1,a7
800008b4:	0106de13          	srli	t3,a3,0x10
800008b8:	03c75f33          	divu	t5,a4,t3
800008bc:	01069313          	slli	t1,a3,0x10
800008c0:	01035313          	srli	t1,t1,0x10
800008c4:	010597b3          	sll	a5,a1,a6
800008c8:	011555b3          	srl	a1,a0,a7
800008cc:	00f5e5b3          	or	a1,a1,a5
800008d0:	0105d793          	srli	a5,a1,0x10
800008d4:	01061633          	sll	a2,a2,a6
800008d8:	01051533          	sll	a0,a0,a6
800008dc:	03c77733          	remu	a4,a4,t3
800008e0:	03e30eb3          	mul	t4,t1,t5
800008e4:	01071713          	slli	a4,a4,0x10
800008e8:	00e7e7b3          	or	a5,a5,a4
800008ec:	000f0713          	mv	a4,t5
800008f0:	01d7fe63          	bgeu	a5,t4,8000090c <__umoddi3+0x2f8>
800008f4:	00f687b3          	add	a5,a3,a5
800008f8:	ffff0713          	addi	a4,t5,-1
800008fc:	00d7e863          	bltu	a5,a3,8000090c <__umoddi3+0x2f8>
80000900:	01d7f663          	bgeu	a5,t4,8000090c <__umoddi3+0x2f8>
80000904:	ffef0713          	addi	a4,t5,-2
80000908:	00d787b3          	add	a5,a5,a3
8000090c:	41d787b3          	sub	a5,a5,t4
80000910:	03c7deb3          	divu	t4,a5,t3
80000914:	01059593          	slli	a1,a1,0x10
80000918:	0105d593          	srli	a1,a1,0x10
8000091c:	03c7f7b3          	remu	a5,a5,t3
80000920:	000e8e13          	mv	t3,t4
80000924:	03d30333          	mul	t1,t1,t4
80000928:	01079793          	slli	a5,a5,0x10
8000092c:	00f5e5b3          	or	a1,a1,a5
80000930:	0065fe63          	bgeu	a1,t1,8000094c <__umoddi3+0x338>
80000934:	00b685b3          	add	a1,a3,a1
80000938:	fffe8e13          	addi	t3,t4,-1
8000093c:	00d5e863          	bltu	a1,a3,8000094c <__umoddi3+0x338>
80000940:	0065f663          	bgeu	a1,t1,8000094c <__umoddi3+0x338>
80000944:	ffee8e13          	addi	t3,t4,-2
80000948:	00d585b3          	add	a1,a1,a3
8000094c:	01071793          	slli	a5,a4,0x10
80000950:	00010f37          	lui	t5,0x10
80000954:	01c7e7b3          	or	a5,a5,t3
80000958:	406585b3          	sub	a1,a1,t1
8000095c:	ffff0313          	addi	t1,t5,-1 # ffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7fff>
80000960:	0067f733          	and	a4,a5,t1
80000964:	01065e13          	srli	t3,a2,0x10
80000968:	0107d793          	srli	a5,a5,0x10
8000096c:	00667333          	and	t1,a2,t1
80000970:	02670eb3          	mul	t4,a4,t1
80000974:	02678333          	mul	t1,a5,t1
80000978:	03c70733          	mul	a4,a4,t3
8000097c:	03c787b3          	mul	a5,a5,t3
80000980:	00670e33          	add	t3,a4,t1
80000984:	010ed713          	srli	a4,t4,0x10
80000988:	01c70733          	add	a4,a4,t3
8000098c:	00677463          	bgeu	a4,t1,80000994 <__umoddi3+0x380>
80000990:	01e787b3          	add	a5,a5,t5
80000994:	01075313          	srli	t1,a4,0x10
80000998:	00f307b3          	add	a5,t1,a5
8000099c:	00010337          	lui	t1,0x10
800009a0:	fff30313          	addi	t1,t1,-1 # ffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7fff>
800009a4:	00677733          	and	a4,a4,t1
800009a8:	01071713          	slli	a4,a4,0x10
800009ac:	006efeb3          	and	t4,t4,t1
800009b0:	01d70733          	add	a4,a4,t4
800009b4:	00f5e663          	bltu	a1,a5,800009c0 <__umoddi3+0x3ac>
800009b8:	00f59e63          	bne	a1,a5,800009d4 <__umoddi3+0x3c0>
800009bc:	00e57c63          	bgeu	a0,a4,800009d4 <__umoddi3+0x3c0>
800009c0:	40c70633          	sub	a2,a4,a2
800009c4:	00c73333          	sltu	t1,a4,a2
800009c8:	00d306b3          	add	a3,t1,a3
800009cc:	00060713          	mv	a4,a2
800009d0:	40d787b3          	sub	a5,a5,a3
800009d4:	40e50733          	sub	a4,a0,a4
800009d8:	00e53533          	sltu	a0,a0,a4
800009dc:	40f585b3          	sub	a1,a1,a5
800009e0:	40a585b3          	sub	a1,a1,a0
800009e4:	011598b3          	sll	a7,a1,a7
800009e8:	01075733          	srl	a4,a4,a6
800009ec:	00e8e533          	or	a0,a7,a4
800009f0:	0105d5b3          	srl	a1,a1,a6
800009f4:	00008067          	ret

800009f8 <memset>:
800009f8:	00050313          	mv	t1,a0
800009fc:	00060a63          	beqz	a2,80000a10 <memset+0x18>
80000a00:	00b30023          	sb	a1,0(t1)
80000a04:	fff60613          	addi	a2,a2,-1
80000a08:	00130313          	addi	t1,t1,1
80000a0c:	fe061ae3          	bnez	a2,80000a00 <memset+0x8>
80000a10:	00008067          	ret

80000a14 <fonction_cache>:
        variable_1  = variable_2;

        return 0;
}
void fonction_cache()
{
80000a14:	ff010113          	addi	sp,sp,-16
80000a18:	00112623          	sw	ra,12(sp)
        printf("OUI");
80000a1c:	80006537          	lui	a0,0x80006
80000a20:	68c50513          	addi	a0,a0,1676 # 8000668c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000668d>
80000a24:	010040ef          	jal	ra,80004a34 <iprintf>
        int x = 1;
        int y = 2;
        printf("Je suis dedans1\n");
80000a28:	80006537          	lui	a0,0x80006
80000a2c:	69050513          	addi	a0,a0,1680 # 80006690 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006691>
80000a30:	004040ef          	jal	ra,80004a34 <iprintf>
        printf("yaa");
80000a34:	80006537          	lui	a0,0x80006
80000a38:	6a450513          	addi	a0,a0,1700 # 800066a4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800066a5>
80000a3c:	7f9030ef          	jal	ra,80004a34 <iprintf>
        printf("3");
80000a40:	80006537          	lui	a0,0x80006
80000a44:	6a850513          	addi	a0,a0,1704 # 800066a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800066a9>
80000a48:	7ed030ef          	jal	ra,80004a34 <iprintf>
}
80000a4c:	00c12083          	lw	ra,12(sp)
80000a50:	01010113          	addi	sp,sp,16
80000a54:	00008067          	ret

80000a58 <main>:
{
80000a58:	ff010113          	addi	sp,sp,-16
80000a5c:	00112623          	sw	ra,12(sp)
        printf("Je pars vers ma fonction\n");
80000a60:	80006537          	lui	a0,0x80006
80000a64:	6ac50513          	addi	a0,a0,1708 # 800066ac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800066ad>
80000a68:	7cd030ef          	jal	ra,80004a34 <iprintf>
	fonction_cache();
80000a6c:	fa9ff0ef          	jal	ra,80000a14 <fonction_cache>
        __asm__("ADDI x0, x0, 0");
80000a70:	00000013          	nop
        printf("Je reviens de ma fonction\n");
80000a74:	80006537          	lui	a0,0x80006
80000a78:	6c850513          	addi	a0,a0,1736 # 800066c8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800066c9>
80000a7c:	7b9030ef          	jal	ra,80004a34 <iprintf>
}
80000a80:	00000513          	li	a0,0
80000a84:	00c12083          	lw	ra,12(sp)
80000a88:	01010113          	addi	sp,sp,16
80000a8c:	00008067          	ret

80000a90 <arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
80000a90:	00000513          	li	a0,0
80000a94:	00008067          	ret

80000a98 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
80000a98:	ff010113          	addi	sp,sp,-16
80000a9c:	00112623          	sw	ra,12(sp)
	(void) ctx_p;
	return _char_out(c);
80000aa0:	800097b7          	lui	a5,0x80009
80000aa4:	1e07a783          	lw	a5,480(a5) # 800091e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800091e1>
80000aa8:	000780e7          	jalr	a5
}
80000aac:	00c12083          	lw	ra,12(sp)
80000ab0:	01010113          	addi	sp,sp,16
80000ab4:	00008067          	ret

80000ab8 <__printk_hook_install>:
	_char_out = fn;
80000ab8:	800097b7          	lui	a5,0x80009
80000abc:	1ea7a023          	sw	a0,480(a5) # 800091e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800091e1>
}
80000ac0:	00008067          	ret

80000ac4 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
80000ac4:	ff010113          	addi	sp,sp,-16
80000ac8:	00112623          	sw	ra,12(sp)
80000acc:	00050613          	mv	a2,a0
80000ad0:	00058693          	mv	a3,a1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
80000ad4:	00000713          	li	a4,0
80000ad8:	00000593          	li	a1,0
80000adc:	80001537          	lui	a0,0x80001
80000ae0:	a9850513          	addi	a0,a0,-1384 # 80000a98 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000a99>
80000ae4:	1a1000ef          	jal	ra,80001484 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
80000ae8:	00c12083          	lw	ra,12(sp)
80000aec:	01010113          	addi	sp,sp,16
80000af0:	00008067          	ret

80000af4 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
80000af4:	fc010113          	addi	sp,sp,-64
80000af8:	00112e23          	sw	ra,28(sp)
80000afc:	02b12223          	sw	a1,36(sp)
80000b00:	02c12423          	sw	a2,40(sp)
80000b04:	02d12623          	sw	a3,44(sp)
80000b08:	02e12823          	sw	a4,48(sp)
80000b0c:	02f12a23          	sw	a5,52(sp)
80000b10:	03012c23          	sw	a6,56(sp)
80000b14:	03112e23          	sw	a7,60(sp)
	va_list ap;

	va_start(ap, fmt);
80000b18:	02410593          	addi	a1,sp,36
80000b1c:	00b12623          	sw	a1,12(sp)

	vprintk(fmt, ap);
80000b20:	fa5ff0ef          	jal	ra,80000ac4 <vprintk>

	va_end(ap);
}
80000b24:	01c12083          	lw	ra,28(sp)
80000b28:	04010113          	addi	sp,sp,64
80000b2c:	00008067          	ret

80000b30 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
80000b30:	ff010113          	addi	sp,sp,-16
80000b34:	00112623          	sw	ra,12(sp)
80000b38:	00050793          	mv	a5,a0
80000b3c:	00058513          	mv	a0,a1
80000b40:	00060593          	mv	a1,a2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
80000b44:	00068613          	mv	a2,a3
80000b48:	000780e7          	jalr	a5
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
80000b4c:	61c030ef          	jal	ra,80004168 <z_impl_z_current_get>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
80000b50:	6cc030ef          	jal	ra,8000421c <z_impl_k_thread_abort>

80000b54 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
80000b54:	00050613          	mv	a2,a0
	const char *sp = *str;
80000b58:	00052703          	lw	a4,0(a0)
	size_t val = 0;
80000b5c:	00000513          	li	a0,0

	while (isdigit((int)(unsigned char)*sp)) {
80000b60:	01c0006f          	j	80000b7c <extract_decimal+0x28>
		val = 10U * val + *sp++ - '0';
80000b64:	00251793          	slli	a5,a0,0x2
80000b68:	00a787b3          	add	a5,a5,a0
80000b6c:	00179793          	slli	a5,a5,0x1
80000b70:	00170713          	addi	a4,a4,1 # 1000001 <CONFIG_SRAM_SIZE+0xf00001>
80000b74:	00d787b3          	add	a5,a5,a3
80000b78:	fd078513          	addi	a0,a5,-48
	while (isdigit((int)(unsigned char)*sp)) {
80000b7c:	00074683          	lbu	a3,0(a4)
80000b80:	800077b7          	lui	a5,0x80007
80000b84:	9f978793          	addi	a5,a5,-1543 # 800069f9 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800069fa>
80000b88:	00f687b3          	add	a5,a3,a5
80000b8c:	0007c783          	lbu	a5,0(a5)
80000b90:	0047f793          	andi	a5,a5,4
80000b94:	fc0798e3          	bnez	a5,80000b64 <extract_decimal+0x10>
	}
	*str = sp;
80000b98:	00e62023          	sw	a4,0(a2)
	return val;
}
80000b9c:	00008067          	ret

80000ba0 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
80000ba0:	00050613          	mv	a2,a0
80000ba4:	00058513          	mv	a0,a1
	bool loop = true;
80000ba8:	00100693          	li	a3,1
80000bac:	0640006f          	j	80000c10 <extract_flags+0x70>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
80000bb0:	00065783          	lhu	a5,0(a2)
80000bb4:	0047e793          	ori	a5,a5,4
80000bb8:	00f61023          	sh	a5,0(a2)
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
80000bbc:	04068863          	beqz	a3,80000c0c <extract_flags+0x6c>
			++sp;
80000bc0:	00150513          	addi	a0,a0,1
80000bc4:	0480006f          	j	80000c0c <extract_flags+0x6c>
			conv->flag_plus = true;
80000bc8:	00065783          	lhu	a5,0(a2)
80000bcc:	0087e793          	ori	a5,a5,8
80000bd0:	00f61023          	sh	a5,0(a2)
			break;
80000bd4:	fe9ff06f          	j	80000bbc <extract_flags+0x1c>
			conv->flag_space = true;
80000bd8:	00065783          	lhu	a5,0(a2)
80000bdc:	0107e793          	ori	a5,a5,16
80000be0:	00f61023          	sh	a5,0(a2)
			break;
80000be4:	fd9ff06f          	j	80000bbc <extract_flags+0x1c>
			conv->flag_hash = true;
80000be8:	00065783          	lhu	a5,0(a2)
80000bec:	0207e793          	ori	a5,a5,32
80000bf0:	00f61023          	sh	a5,0(a2)
			break;
80000bf4:	fc9ff06f          	j	80000bbc <extract_flags+0x1c>
			conv->flag_zero = true;
80000bf8:	00065783          	lhu	a5,0(a2)
80000bfc:	0407e793          	ori	a5,a5,64
80000c00:	00f61023          	sh	a5,0(a2)
			break;
80000c04:	fb9ff06f          	j	80000bbc <extract_flags+0x1c>
		switch (*sp) {
80000c08:	00000693          	li	a3,0
		}
	} while (loop);
80000c0c:	02068863          	beqz	a3,80000c3c <extract_flags+0x9c>
		switch (*sp) {
80000c10:	00054783          	lbu	a5,0(a0)
80000c14:	fe078793          	addi	a5,a5,-32
80000c18:	0ff7f593          	zext.b	a1,a5
80000c1c:	01000713          	li	a4,16
80000c20:	feb764e3          	bltu	a4,a1,80000c08 <extract_flags+0x68>
80000c24:	00259793          	slli	a5,a1,0x2
80000c28:	80006737          	lui	a4,0x80006
80000c2c:	6e470713          	addi	a4,a4,1764 # 800066e4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800066e5>
80000c30:	00e787b3          	add	a5,a5,a4
80000c34:	0007a783          	lw	a5,0(a5)
80000c38:	00078067          	jr	a5

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
80000c3c:	00062783          	lw	a5,0(a2)
80000c40:	0447f793          	andi	a5,a5,68
80000c44:	04400713          	li	a4,68
80000c48:	00e78463          	beq	a5,a4,80000c50 <extract_flags+0xb0>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
80000c4c:	00008067          	ret
		conv->flag_zero = false;
80000c50:	00065783          	lhu	a5,0(a2)
80000c54:	fbf7f793          	andi	a5,a5,-65
80000c58:	00f61023          	sh	a5,0(a2)
80000c5c:	ff1ff06f          	j	80000c4c <extract_flags+0xac>

80000c60 <extract_width>:
 *
 * @return a pointer the first character that follows the width.
 */
static inline const char *extract_width(struct conversion *conv,
					const char *sp)
{
80000c60:	fe010113          	addi	sp,sp,-32
80000c64:	00112e23          	sw	ra,28(sp)
80000c68:	00812c23          	sw	s0,24(sp)
80000c6c:	00912a23          	sw	s1,20(sp)
80000c70:	00050413          	mv	s0,a0
80000c74:	00b12623          	sw	a1,12(sp)
	conv->width_present = true;
80000c78:	00055783          	lhu	a5,0(a0)
80000c7c:	0807e793          	ori	a5,a5,128
80000c80:	00f51023          	sh	a5,0(a0)

	if (*sp == '*') {
80000c84:	00058493          	mv	s1,a1
80000c88:	0005c703          	lbu	a4,0(a1)
80000c8c:	02a00793          	li	a5,42
80000c90:	06f70463          	beq	a4,a5,80000cf8 <extract_width+0x98>
		conv->width_star = true;
		return ++sp;
	}

	const char *wp = sp;
	size_t width = extract_decimal(&sp);
80000c94:	00c10513          	addi	a0,sp,12
80000c98:	ebdff0ef          	jal	ra,80000b54 <extract_decimal>

	if (sp != wp) {
80000c9c:	00c12783          	lw	a5,12(sp)
80000ca0:	04f48063          	beq	s1,a5,80000ce0 <extract_width+0x80>
		conv->width_present = true;
80000ca4:	00045783          	lhu	a5,0(s0)
80000ca8:	0807e793          	ori	a5,a5,128
80000cac:	00f41023          	sh	a5,0(s0)
		conv->width_value = width;
80000cb0:	00a42223          	sw	a0,4(s0)
		conv->unsupported |= ((conv->width_value < 0)
80000cb4:	00042783          	lw	a5,0(s0)
80000cb8:	0017d793          	srli	a5,a5,0x1
80000cbc:	0017f793          	andi	a5,a5,1
				      || (width != (size_t)conv->width_value));
80000cc0:	04054863          	bltz	a0,80000d10 <extract_width+0xb0>
80000cc4:	00000713          	li	a4,0
		conv->unsupported |= ((conv->width_value < 0)
80000cc8:	00e7e7b3          	or	a5,a5,a4
80000ccc:	00179793          	slli	a5,a5,0x1
80000cd0:	00045703          	lhu	a4,0(s0)
80000cd4:	ffd77713          	andi	a4,a4,-3
80000cd8:	00f767b3          	or	a5,a4,a5
80000cdc:	00f41023          	sh	a5,0(s0)
	}

	return sp;
80000ce0:	00c12503          	lw	a0,12(sp)
}
80000ce4:	01c12083          	lw	ra,28(sp)
80000ce8:	01812403          	lw	s0,24(sp)
80000cec:	01412483          	lw	s1,20(sp)
80000cf0:	02010113          	addi	sp,sp,32
80000cf4:	00008067          	ret
		conv->width_star = true;
80000cf8:	00055783          	lhu	a5,0(a0)
80000cfc:	1007e793          	ori	a5,a5,256
80000d00:	00f51023          	sh	a5,0(a0)
		return ++sp;
80000d04:	00158513          	addi	a0,a1,1
80000d08:	00a12623          	sw	a0,12(sp)
80000d0c:	fd9ff06f          	j	80000ce4 <extract_width+0x84>
				      || (width != (size_t)conv->width_value));
80000d10:	00100713          	li	a4,1
80000d14:	fb5ff06f          	j	80000cc8 <extract_width+0x68>

80000d18 <extract_prec>:
 *
 * @return a pointer the first character that follows the precision.
 */
static inline const char *extract_prec(struct conversion *conv,
				       const char *sp)
{
80000d18:	fe010113          	addi	sp,sp,-32
80000d1c:	00112e23          	sw	ra,28(sp)
80000d20:	00812c23          	sw	s0,24(sp)
80000d24:	00b12623          	sw	a1,12(sp)
	conv->prec_present = (*sp == '.');
80000d28:	0005c703          	lbu	a4,0(a1)
80000d2c:	fd270713          	addi	a4,a4,-46
80000d30:	00173693          	seqz	a3,a4
80000d34:	00969693          	slli	a3,a3,0x9
80000d38:	00055783          	lhu	a5,0(a0)
80000d3c:	dff7f793          	andi	a5,a5,-513
80000d40:	00d7e7b3          	or	a5,a5,a3
80000d44:	00f51023          	sh	a5,0(a0)

	if (!conv->prec_present) {
80000d48:	06071663          	bnez	a4,80000db4 <extract_prec+0x9c>
80000d4c:	00050413          	mv	s0,a0
		return sp;
	}
	++sp;
80000d50:	00c12783          	lw	a5,12(sp)
80000d54:	00178713          	addi	a4,a5,1
80000d58:	00e12623          	sw	a4,12(sp)

	if (*sp == '*') {
80000d5c:	0017c703          	lbu	a4,1(a5)
80000d60:	02a00793          	li	a5,42
80000d64:	04f70c63          	beq	a4,a5,80000dbc <extract_prec+0xa4>
		conv->prec_star = true;
		return ++sp;
	}

	size_t prec = extract_decimal(&sp);
80000d68:	00c10513          	addi	a0,sp,12
80000d6c:	de9ff0ef          	jal	ra,80000b54 <extract_decimal>

	conv->prec_value = prec;
80000d70:	00a42423          	sw	a0,8(s0)
	conv->unsupported |= ((conv->prec_value < 0)
80000d74:	00042783          	lw	a5,0(s0)
80000d78:	0017d793          	srli	a5,a5,0x1
80000d7c:	0017f793          	andi	a5,a5,1
			      || (prec != (size_t)conv->prec_value));
80000d80:	04054c63          	bltz	a0,80000dd8 <extract_prec+0xc0>
80000d84:	00000713          	li	a4,0
	conv->unsupported |= ((conv->prec_value < 0)
80000d88:	00e7e7b3          	or	a5,a5,a4
80000d8c:	00179793          	slli	a5,a5,0x1
80000d90:	00045703          	lhu	a4,0(s0)
80000d94:	ffd77713          	andi	a4,a4,-3
80000d98:	00f767b3          	or	a5,a4,a5
80000d9c:	00f41023          	sh	a5,0(s0)

	return sp;
80000da0:	00c12503          	lw	a0,12(sp)
}
80000da4:	01c12083          	lw	ra,28(sp)
80000da8:	01812403          	lw	s0,24(sp)
80000dac:	02010113          	addi	sp,sp,32
80000db0:	00008067          	ret
		return sp;
80000db4:	00058513          	mv	a0,a1
80000db8:	fedff06f          	j	80000da4 <extract_prec+0x8c>
		conv->prec_star = true;
80000dbc:	00055783          	lhu	a5,0(a0)
80000dc0:	4007e793          	ori	a5,a5,1024
80000dc4:	00f51023          	sh	a5,0(a0)
		return ++sp;
80000dc8:	00c12503          	lw	a0,12(sp)
80000dcc:	00150513          	addi	a0,a0,1
80000dd0:	00a12623          	sw	a0,12(sp)
80000dd4:	fd1ff06f          	j	80000da4 <extract_prec+0x8c>
			      || (prec != (size_t)conv->prec_value));
80000dd8:	00100713          	li	a4,1
80000ddc:	fadff06f          	j	80000d88 <extract_prec+0x70>

80000de0 <extract_length>:
 *
 * @return a pointer the first character that follows the precision.
 */
static inline const char *extract_length(struct conversion *conv,
					 const char *sp)
{
80000de0:	00050613          	mv	a2,a0
	switch (*sp) {
80000de4:	0005c783          	lbu	a5,0(a1)
80000de8:	fb478793          	addi	a5,a5,-76
80000dec:	0ff7f693          	zext.b	a3,a5
80000df0:	02e00713          	li	a4,46
80000df4:	16d76a63          	bltu	a4,a3,80000f68 <extract_length+0x188>
80000df8:	00269793          	slli	a5,a3,0x2
80000dfc:	80006737          	lui	a4,0x80006
80000e00:	72870713          	addi	a4,a4,1832 # 80006728 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006729>
80000e04:	00e787b3          	add	a5,a5,a4
80000e08:	0007a783          	lw	a5,0(a5)
80000e0c:	00078067          	jr	a5
	case 'h':
		if (*++sp == 'h') {
80000e10:	00158513          	addi	a0,a1,1
80000e14:	0015c703          	lbu	a4,1(a1)
80000e18:	06800793          	li	a5,104
80000e1c:	02f70263          	beq	a4,a5,80000e40 <extract_length+0x60>
			conv->length_mod = LENGTH_HH;
			++sp;
		} else {
			conv->length_mod = LENGTH_H;
80000e20:	00065783          	lhu	a5,0(a2)
80000e24:	ffff8737          	lui	a4,0xffff8
80000e28:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80000e2c:	00e7f7b3          	and	a5,a5,a4
80000e30:	00001737          	lui	a4,0x1
80000e34:	00e7e7b3          	or	a5,a5,a4
80000e38:	00f61023          	sh	a5,0(a2)
80000e3c:	00008067          	ret
			conv->length_mod = LENGTH_HH;
80000e40:	00065783          	lhu	a5,0(a2)
80000e44:	ffff8737          	lui	a4,0xffff8
80000e48:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80000e4c:	00e7f7b3          	and	a5,a5,a4
80000e50:	00001737          	lui	a4,0x1
80000e54:	80070713          	addi	a4,a4,-2048 # 800 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE>
80000e58:	00e7e7b3          	or	a5,a5,a4
80000e5c:	00f61023          	sh	a5,0(a2)
			++sp;
80000e60:	00258513          	addi	a0,a1,2
80000e64:	00008067          	ret
		}
		break;
	case 'l':
		if (*++sp == 'l') {
80000e68:	00158513          	addi	a0,a1,1
80000e6c:	0015c703          	lbu	a4,1(a1)
80000e70:	06c00793          	li	a5,108
80000e74:	02f70463          	beq	a4,a5,80000e9c <extract_length+0xbc>
			conv->length_mod = LENGTH_LL;
			++sp;
		} else {
			conv->length_mod = LENGTH_L;
80000e78:	00065783          	lhu	a5,0(a2)
80000e7c:	ffff8737          	lui	a4,0xffff8
80000e80:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80000e84:	00e7f7b3          	and	a5,a5,a4
80000e88:	00002737          	lui	a4,0x2
80000e8c:	80070713          	addi	a4,a4,-2048 # 1800 <CONFIG_ISR_STACK_SIZE+0x800>
80000e90:	00e7e7b3          	or	a5,a5,a4
80000e94:	00f61023          	sh	a5,0(a2)
80000e98:	00008067          	ret
			conv->length_mod = LENGTH_LL;
80000e9c:	00065783          	lhu	a5,0(a2)
80000ea0:	ffff8737          	lui	a4,0xffff8
80000ea4:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80000ea8:	00e7f7b3          	and	a5,a5,a4
80000eac:	00002737          	lui	a4,0x2
80000eb0:	00e7e7b3          	or	a5,a5,a4
80000eb4:	00f61023          	sh	a5,0(a2)
			++sp;
80000eb8:	00258513          	addi	a0,a1,2
80000ebc:	00008067          	ret
		}
		break;
	case 'j':
		conv->length_mod = LENGTH_J;
80000ec0:	00055783          	lhu	a5,0(a0)
80000ec4:	ffff8737          	lui	a4,0xffff8
80000ec8:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80000ecc:	00e7f7b3          	and	a5,a5,a4
80000ed0:	00003737          	lui	a4,0x3
80000ed4:	80070713          	addi	a4,a4,-2048 # 2800 <__kernel_ram_size+0x1b8>
80000ed8:	00e7e7b3          	or	a5,a5,a4
80000edc:	00f51023          	sh	a5,0(a0)
		++sp;
80000ee0:	00158513          	addi	a0,a1,1
		break;
80000ee4:	00008067          	ret
	case 'z':
		conv->length_mod = LENGTH_Z;
80000ee8:	00055783          	lhu	a5,0(a0)
80000eec:	ffff8737          	lui	a4,0xffff8
80000ef0:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80000ef4:	00e7f7b3          	and	a5,a5,a4
80000ef8:	00003737          	lui	a4,0x3
80000efc:	00e7e7b3          	or	a5,a5,a4
80000f00:	00f51023          	sh	a5,0(a0)
		++sp;
80000f04:	00158513          	addi	a0,a1,1
		break;
80000f08:	00008067          	ret
	case 't':
		conv->length_mod = LENGTH_T;
80000f0c:	00055783          	lhu	a5,0(a0)
80000f10:	ffff8737          	lui	a4,0xffff8
80000f14:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80000f18:	00e7f7b3          	and	a5,a5,a4
80000f1c:	00004737          	lui	a4,0x4
80000f20:	80070713          	addi	a4,a4,-2048 # 3800 <__kernel_ram_size+0x11b8>
80000f24:	00e7e7b3          	or	a5,a5,a4
80000f28:	00f51023          	sh	a5,0(a0)
		++sp;
80000f2c:	00158513          	addi	a0,a1,1
		break;
80000f30:	00008067          	ret
	case 'L':
		conv->length_mod = LENGTH_UPPER_L;
80000f34:	00055783          	lhu	a5,0(a0)
80000f38:	ffff8737          	lui	a4,0xffff8
80000f3c:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80000f40:	00e7f7b3          	and	a5,a5,a4
80000f44:	00004737          	lui	a4,0x4
80000f48:	00e7e7b3          	or	a5,a5,a4
80000f4c:	00f51023          	sh	a5,0(a0)
		++sp;
80000f50:	00158513          	addi	a0,a1,1

		/* We recognize and consume these, but can't format
		 * them.
		 */
		conv->unsupported = true;
80000f54:	01079793          	slli	a5,a5,0x10
80000f58:	0107d793          	srli	a5,a5,0x10
80000f5c:	0027e793          	ori	a5,a5,2
80000f60:	00f61023          	sh	a5,0(a2)
		break;
80000f64:	00008067          	ret
	default:
		conv->length_mod = LENGTH_NONE;
80000f68:	00065783          	lhu	a5,0(a2)
80000f6c:	ffff8737          	lui	a4,0xffff8
80000f70:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80000f74:	00e7f7b3          	and	a5,a5,a4
80000f78:	00f61023          	sh	a5,0(a2)
		break;
80000f7c:	00058513          	mv	a0,a1
	}
	return sp;
}
80000f80:	00008067          	ret

80000f84 <extract_specifier>:
 *
 * @return a pointer the first character that follows the specifier.
 */
static inline const char *extract_specifier(struct conversion *conv,
					    const char *sp)
{
80000f84:	00050713          	mv	a4,a0
	bool unsupported = false;

	conv->specifier = *sp++;
80000f88:	00158513          	addi	a0,a1,1
80000f8c:	0005c783          	lbu	a5,0(a1)
80000f90:	00f701a3          	sb	a5,3(a4)

	switch (conv->specifier) {
80000f94:	07800693          	li	a3,120
80000f98:	04f6ea63          	bltu	a3,a5,80000fec <extract_specifier+0x68>
80000f9c:	06e00693          	li	a3,110
80000fa0:	08d7fa63          	bgeu	a5,a3,80001034 <extract_specifier+0xb0>
80000fa4:	06900693          	li	a3,105
80000fa8:	04f6e263          	bltu	a3,a5,80000fec <extract_specifier+0x68>
80000fac:	05800693          	li	a3,88
80000fb0:	04d7e863          	bltu	a5,a3,80001000 <extract_specifier+0x7c>
80000fb4:	fa878613          	addi	a2,a5,-88
80000fb8:	00100693          	li	a3,1
80000fbc:	00c696b3          	sll	a3,a3,a2
80000fc0:	0000e637          	lui	a2,0xe
80000fc4:	20060613          	addi	a2,a2,512 # e200 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6200>
80000fc8:	00c6f633          	and	a2,a3,a2
80000fcc:	04061863          	bnez	a2,8000101c <extract_specifier+0x98>
80000fd0:	00001637          	lui	a2,0x1
80000fd4:	80160613          	addi	a2,a2,-2047 # 801 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1>
80000fd8:	00c6f633          	and	a2,a3,a2
80000fdc:	10061863          	bnez	a2,800010ec <extract_specifier+0x168>
80000fe0:	00021637          	lui	a2,0x21
80000fe4:	00c6f6b3          	and	a3,a3,a2
80000fe8:	0a069463          	bnez	a3,80001090 <extract_specifier+0x10c>
			unsupported = true;
		}
		break;

	default:
		conv->invalid = true;
80000fec:	00075783          	lhu	a5,0(a4)
80000ff0:	0017e793          	ori	a5,a5,1
80000ff4:	00f71023          	sh	a5,0(a4)
	bool unsupported = false;
80000ff8:	00000793          	li	a5,0
		break;
80000ffc:	0c80006f          	j	800010c4 <extract_specifier+0x140>
	switch (conv->specifier) {
80001000:	04100693          	li	a3,65
80001004:	00d78c63          	beq	a5,a3,8000101c <extract_specifier+0x98>
80001008:	fed7e2e3          	bltu	a5,a3,80000fec <extract_specifier+0x68>
8000100c:	fbb78793          	addi	a5,a5,-69
80001010:	0ff7f793          	zext.b	a5,a5
80001014:	00200693          	li	a3,2
80001018:	fcf6eae3          	bltu	a3,a5,80000fec <extract_specifier+0x68>
		conv->specifier_cat = SPECIFIER_FP;
8000101c:	00274783          	lbu	a5,2(a4)
80001020:	ff87f793          	andi	a5,a5,-8
80001024:	0047e793          	ori	a5,a5,4
80001028:	00f70123          	sb	a5,2(a4)
			unsupported = true;
8000102c:	00100793          	li	a5,1
			break;
80001030:	0940006f          	j	800010c4 <extract_specifier+0x140>
	switch (conv->specifier) {
80001034:	f9278613          	addi	a2,a5,-110
80001038:	00100693          	li	a3,1
8000103c:	00c696b3          	sll	a3,a3,a2
80001040:	4826f613          	andi	a2,a3,1154
80001044:	00c035b3          	snez	a1,a2
80001048:	0a061263          	bnez	a2,800010ec <extract_specifier+0x168>
8000104c:	0246f613          	andi	a2,a3,36
80001050:	00c037b3          	snez	a5,a2
80001054:	0c061a63          	bnez	a2,80001128 <extract_specifier+0x1a4>
80001058:	0016f693          	andi	a3,a3,1
8000105c:	f80688e3          	beqz	a3,80000fec <extract_specifier+0x68>
		conv->specifier_cat = SPECIFIER_PTR;
80001060:	00274603          	lbu	a2,2(a4)
80001064:	ff867613          	andi	a2,a2,-8
80001068:	00366613          	ori	a2,a2,3
8000106c:	00c70123          	sb	a2,2(a4)
		if (conv->length_mod == LENGTH_UPPER_L) {
80001070:	00075603          	lhu	a2,0(a4)
80001074:	000085b7          	lui	a1,0x8
80001078:	80058593          	addi	a1,a1,-2048 # 7800 <__rom_region_size+0xc10>
8000107c:	00b67633          	and	a2,a2,a1
80001080:	000045b7          	lui	a1,0x4
80001084:	04b61063          	bne	a2,a1,800010c4 <extract_specifier+0x140>
			unsupported = true;
80001088:	00068793          	mv	a5,a3
8000108c:	0380006f          	j	800010c4 <extract_specifier+0x140>
		conv->specifier_cat = SPECIFIER_SINT;
80001090:	00274683          	lbu	a3,2(a4)
80001094:	ff86f693          	andi	a3,a3,-8
80001098:	0016e693          	ori	a3,a3,1
8000109c:	00d70123          	sb	a3,2(a4)
		if (conv->length_mod == LENGTH_UPPER_L) {
800010a0:	00075683          	lhu	a3,0(a4)
800010a4:	00008637          	lui	a2,0x8
800010a8:	80060613          	addi	a2,a2,-2048 # 7800 <__rom_region_size+0xc10>
800010ac:	00c6f6b3          	and	a3,a3,a2
800010b0:	00004637          	lui	a2,0x4
800010b4:	04c68663          	beq	a3,a2,80001100 <extract_specifier+0x17c>
		if (conv->specifier == 'c') {
800010b8:	06300693          	li	a3,99
800010bc:	04d78a63          	beq	a5,a3,80001110 <extract_specifier+0x18c>
	bool unsupported = false;
800010c0:	00000793          	li	a5,0
	}

	conv->unsupported |= unsupported;
800010c4:	00072683          	lw	a3,0(a4)
800010c8:	0016d693          	srli	a3,a3,0x1
800010cc:	0016f693          	andi	a3,a3,1
800010d0:	00d7e7b3          	or	a5,a5,a3
800010d4:	00179793          	slli	a5,a5,0x1
800010d8:	00075683          	lhu	a3,0(a4)
800010dc:	ffd6f693          	andi	a3,a3,-3
800010e0:	00f6e7b3          	or	a5,a3,a5
800010e4:	00f71023          	sh	a5,0(a4)

	return sp;
}
800010e8:	00008067          	ret
		conv->specifier_cat = SPECIFIER_UINT;
800010ec:	00274683          	lbu	a3,2(a4)
800010f0:	ff86f693          	andi	a3,a3,-8
800010f4:	0026e693          	ori	a3,a3,2
800010f8:	00d70123          	sb	a3,2(a4)
800010fc:	fa5ff06f          	j	800010a0 <extract_specifier+0x11c>
			conv->invalid = true;
80001100:	00075683          	lhu	a3,0(a4)
80001104:	0016e693          	ori	a3,a3,1
80001108:	00d71023          	sh	a3,0(a4)
8000110c:	fadff06f          	j	800010b8 <extract_specifier+0x134>
			unsupported = (conv->length_mod != LENGTH_NONE);
80001110:	00075783          	lhu	a5,0(a4)
80001114:	000086b7          	lui	a3,0x8
80001118:	80068693          	addi	a3,a3,-2048 # 7800 <__rom_region_size+0xc10>
8000111c:	00d7f7b3          	and	a5,a5,a3
80001120:	00f037b3          	snez	a5,a5
80001124:	fa1ff06f          	j	800010c4 <extract_specifier+0x140>
		conv->specifier_cat = SPECIFIER_PTR;
80001128:	00274683          	lbu	a3,2(a4)
8000112c:	ff86f693          	andi	a3,a3,-8
80001130:	0036e693          	ori	a3,a3,3
80001134:	00d70123          	sb	a3,2(a4)
		if (conv->length_mod != LENGTH_NONE) {
80001138:	00075683          	lhu	a3,0(a4)
8000113c:	00008637          	lui	a2,0x8
80001140:	80060613          	addi	a2,a2,-2048 # 7800 <__rom_region_size+0xc10>
80001144:	00c6f6b3          	and	a3,a3,a2
80001148:	f6069ee3          	bnez	a3,800010c4 <extract_specifier+0x140>
	bool unsupported = false;
8000114c:	00058793          	mv	a5,a1
80001150:	f75ff06f          	j	800010c4 <extract_specifier+0x140>

80001154 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
80001154:	ff010113          	addi	sp,sp,-16
80001158:	00112623          	sw	ra,12(sp)
8000115c:	00812423          	sw	s0,8(sp)
80001160:	00050413          	mv	s0,a0
	*conv = (struct conversion) {
80001164:	00052023          	sw	zero,0(a0)
80001168:	00052223          	sw	zero,4(a0)
8000116c:	00052423          	sw	zero,8(a0)
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
80001170:	0015c783          	lbu	a5,1(a1) # 4001 <__kernel_ram_size+0x19b9>
80001174:	02500713          	li	a4,37
80001178:	04e78863          	beq	a5,a4,800011c8 <extract_conversion+0x74>
8000117c:	00158593          	addi	a1,a1,1
		conv->specifier = *sp++;
		return sp;
	}

	sp = extract_flags(conv, sp);
80001180:	00040513          	mv	a0,s0
80001184:	a1dff0ef          	jal	ra,80000ba0 <extract_flags>
80001188:	00050593          	mv	a1,a0
	sp = extract_width(conv, sp);
8000118c:	00040513          	mv	a0,s0
80001190:	ad1ff0ef          	jal	ra,80000c60 <extract_width>
80001194:	00050593          	mv	a1,a0
	sp = extract_prec(conv, sp);
80001198:	00040513          	mv	a0,s0
8000119c:	b7dff0ef          	jal	ra,80000d18 <extract_prec>
800011a0:	00050593          	mv	a1,a0
	sp = extract_length(conv, sp);
800011a4:	00040513          	mv	a0,s0
800011a8:	c39ff0ef          	jal	ra,80000de0 <extract_length>
800011ac:	00050593          	mv	a1,a0
	sp = extract_specifier(conv, sp);
800011b0:	00040513          	mv	a0,s0
800011b4:	dd1ff0ef          	jal	ra,80000f84 <extract_specifier>

	return sp;
}
800011b8:	00c12083          	lw	ra,12(sp)
800011bc:	00812403          	lw	s0,8(sp)
800011c0:	01010113          	addi	sp,sp,16
800011c4:	00008067          	ret
		conv->specifier = *sp++;
800011c8:	00258513          	addi	a0,a1,2
800011cc:	00f401a3          	sb	a5,3(s0)
		return sp;
800011d0:	fe9ff06f          	j	800011b8 <extract_conversion+0x64>

800011d4 <conversion_radix>:
	return rval;
}

static inline size_t conversion_radix(char specifier)
{
	switch (specifier) {
800011d4:	06f00793          	li	a5,111
800011d8:	02f50c63          	beq	a0,a5,80001210 <conversion_radix+0x3c>
800011dc:	00a7fe63          	bgeu	a5,a0,800011f8 <conversion_radix+0x24>
800011e0:	07000793          	li	a5,112
800011e4:	02f50a63          	beq	a0,a5,80001218 <conversion_radix+0x44>
800011e8:	07800793          	li	a5,120
800011ec:	02f51a63          	bne	a0,a5,80001220 <conversion_radix+0x4c>
	case 'o':
		return 8;
	case 'p':
	case 'x':
	case 'X':
		return 16;
800011f0:	01000513          	li	a0,16
800011f4:	00008067          	ret
	switch (specifier) {
800011f8:	05800793          	li	a5,88
800011fc:	00f50663          	beq	a0,a5,80001208 <conversion_radix+0x34>
80001200:	00a00513          	li	a0,10
80001204:	00008067          	ret
		return 16;
80001208:	01000513          	li	a0,16
8000120c:	00008067          	ret
		return 8;
80001210:	00800513          	li	a0,8
80001214:	00008067          	ret
		return 16;
80001218:	01000513          	li	a0,16
8000121c:	00008067          	ret
	switch (specifier) {
80001220:	00a00513          	li	a0,10
	}
}
80001224:	00008067          	ret

80001228 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
80001228:	fd010113          	addi	sp,sp,-48
8000122c:	02112623          	sw	ra,44(sp)
80001230:	02812423          	sw	s0,40(sp)
80001234:	02912223          	sw	s1,36(sp)
80001238:	03212023          	sw	s2,32(sp)
8000123c:	01312e23          	sw	s3,28(sp)
80001240:	01412c23          	sw	s4,24(sp)
80001244:	01512a23          	sw	s5,20(sp)
80001248:	01612823          	sw	s6,16(sp)
8000124c:	01712623          	sw	s7,12(sp)
80001250:	01812423          	sw	s8,8(sp)
80001254:	00050993          	mv	s3,a0
80001258:	00058413          	mv	s0,a1
8000125c:	00060c13          	mv	s8,a2
80001260:	00068a93          	mv	s5,a3
80001264:	00070493          	mv	s1,a4
	bool upcase = isupper((int)conv->specifier);
80001268:	00364503          	lbu	a0,3(a2)
8000126c:	800077b7          	lui	a5,0x80007
80001270:	9f978793          	addi	a5,a5,-1543 # 800069f9 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800069fa>
80001274:	00f507b3          	add	a5,a0,a5
80001278:	0007cb83          	lbu	s7,0(a5)
8000127c:	003bfb93          	andi	s7,s7,3
	const unsigned int radix = conversion_radix(conv->specifier);
80001280:	f55ff0ef          	jal	ra,800011d4 <conversion_radix>
80001284:	00050913          	mv	s2,a0
	char *bp = bps + (bpe - bps);
80001288:	0480006f          	j	800012d0 <encode_uint+0xa8>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
8000128c:	00100793          	li	a5,1
80001290:	06fb8a63          	beq	s7,a5,80001304 <encode_uint+0xdc>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
80001294:	0ff57793          	zext.b	a5,a0
		*--bp = (lsv <= 9) ? ('0' + lsv)
80001298:	05778793          	addi	a5,a5,87
8000129c:	0ff7f793          	zext.b	a5,a5
800012a0:	fff48493          	addi	s1,s1,-1
800012a4:	00f48023          	sb	a5,0(s1)
		value /= radix;
800012a8:	00090613          	mv	a2,s2
800012ac:	00000693          	li	a3,0
800012b0:	00098513          	mv	a0,s3
800012b4:	00040593          	mv	a1,s0
800012b8:	f2dfe0ef          	jal	ra,800001e4 <__udivdi3>
	} while ((value != 0) && (bps < bp));
800012bc:	05446e63          	bltu	s0,s4,80001318 <encode_uint+0xf0>
800012c0:	048a0a63          	beq	s4,s0,80001314 <encode_uint+0xec>
800012c4:	049afa63          	bgeu	s5,s1,80001318 <encode_uint+0xf0>
		value /= radix;
800012c8:	00050993          	mv	s3,a0
800012cc:	00058413          	mv	s0,a1
		unsigned int lsv = (unsigned int)(value % radix);
800012d0:	00090b13          	mv	s6,s2
800012d4:	00000a13          	li	s4,0
800012d8:	00090613          	mv	a2,s2
800012dc:	00000693          	li	a3,0
800012e0:	00098513          	mv	a0,s3
800012e4:	00040593          	mv	a1,s0
800012e8:	b2cff0ef          	jal	ra,80000614 <__umoddi3>
		*--bp = (lsv <= 9) ? ('0' + lsv)
800012ec:	00900793          	li	a5,9
800012f0:	f8a7eee3          	bltu	a5,a0,8000128c <encode_uint+0x64>
800012f4:	0ff57793          	zext.b	a5,a0
800012f8:	03078793          	addi	a5,a5,48
800012fc:	0ff7f793          	zext.b	a5,a5
80001300:	fa1ff06f          	j	800012a0 <encode_uint+0x78>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
80001304:	0ff57793          	zext.b	a5,a0
		*--bp = (lsv <= 9) ? ('0' + lsv)
80001308:	03778793          	addi	a5,a5,55
8000130c:	0ff7f793          	zext.b	a5,a5
80001310:	f91ff06f          	j	800012a0 <encode_uint+0x78>
	} while ((value != 0) && (bps < bp));
80001314:	fb69f8e3          	bgeu	s3,s6,800012c4 <encode_uint+0x9c>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
80001318:	000c5783          	lhu	a5,0(s8)
8000131c:	0207f793          	andi	a5,a5,32
80001320:	00078a63          	beqz	a5,80001334 <encode_uint+0x10c>
		if (radix == 8) {
80001324:	00800793          	li	a5,8
80001328:	04f90063          	beq	s2,a5,80001368 <encode_uint+0x140>
			conv->altform_0 = true;
		} else if (radix == 16) {
8000132c:	01000793          	li	a5,16
80001330:	04f90463          	beq	s2,a5,80001378 <encode_uint+0x150>
			;
		}
	}

	return bp;
}
80001334:	00048513          	mv	a0,s1
80001338:	02c12083          	lw	ra,44(sp)
8000133c:	02812403          	lw	s0,40(sp)
80001340:	02412483          	lw	s1,36(sp)
80001344:	02012903          	lw	s2,32(sp)
80001348:	01c12983          	lw	s3,28(sp)
8000134c:	01812a03          	lw	s4,24(sp)
80001350:	01412a83          	lw	s5,20(sp)
80001354:	01012b03          	lw	s6,16(sp)
80001358:	00c12b83          	lw	s7,12(sp)
8000135c:	00812c03          	lw	s8,8(sp)
80001360:	03010113          	addi	sp,sp,48
80001364:	00008067          	ret
			conv->altform_0 = true;
80001368:	002c4783          	lbu	a5,2(s8)
8000136c:	0087e793          	ori	a5,a5,8
80001370:	00fc0123          	sb	a5,2(s8)
80001374:	fc1ff06f          	j	80001334 <encode_uint+0x10c>
			conv->altform_0c = true;
80001378:	002c4783          	lbu	a5,2(s8)
8000137c:	0107e793          	ori	a5,a5,16
80001380:	00fc0123          	sb	a5,2(s8)
80001384:	fb1ff06f          	j	80001334 <encode_uint+0x10c>

80001388 <store_count>:
 */
static inline void store_count(const struct conversion *conv,
			       void *dp,
			       int count)
{
	switch ((enum length_mod_enum)conv->length_mod) {
80001388:	00052783          	lw	a5,0(a0)
8000138c:	00b7d793          	srli	a5,a5,0xb
80001390:	00f7f793          	andi	a5,a5,15
80001394:	00700713          	li	a4,7
80001398:	06f76463          	bltu	a4,a5,80001400 <store_count+0x78>
8000139c:	00279793          	slli	a5,a5,0x2
800013a0:	80006737          	lui	a4,0x80006
800013a4:	7e470713          	addi	a4,a4,2020 # 800067e4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800067e5>
800013a8:	00e787b3          	add	a5,a5,a4
800013ac:	0007a783          	lw	a5,0(a5)
800013b0:	00078067          	jr	a5
	case LENGTH_NONE:
		*(int *)dp = count;
800013b4:	00c5a023          	sw	a2,0(a1)
		break;
800013b8:	00008067          	ret
	case LENGTH_HH:
		*(signed char *)dp = (signed char)count;
800013bc:	00c58023          	sb	a2,0(a1)
		break;
800013c0:	00008067          	ret
	case LENGTH_H:
		*(short *)dp = (short)count;
800013c4:	00c59023          	sh	a2,0(a1)
		break;
800013c8:	00008067          	ret
	case LENGTH_L:
		*(long *)dp = (long)count;
800013cc:	00c5a023          	sw	a2,0(a1)
		break;
800013d0:	00008067          	ret
	case LENGTH_LL:
		*(long long *)dp = (long long)count;
800013d4:	41f65793          	srai	a5,a2,0x1f
800013d8:	00c5a023          	sw	a2,0(a1)
800013dc:	00f5a223          	sw	a5,4(a1)
		break;
800013e0:	00008067          	ret
	case LENGTH_J:
		*(intmax_t *)dp = (intmax_t)count;
800013e4:	41f65793          	srai	a5,a2,0x1f
800013e8:	00c5a023          	sw	a2,0(a1)
800013ec:	00f5a223          	sw	a5,4(a1)
		break;
800013f0:	00008067          	ret
	case LENGTH_Z:
		*(size_t *)dp = (size_t)count;
800013f4:	00c5a023          	sw	a2,0(a1)
		break;
800013f8:	00008067          	ret
	case LENGTH_T:
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
800013fc:	00c5a023          	sw	a2,0(a1)
		 * Static analysis tool won't raise a violation if default is empty,
		 * but has that comment.
		 */
		break;
	}
}
80001400:	00008067          	ret

80001404 <outs>:
/* Outline function to emit all characters in [sp, ep). */
static int outs(cbprintf_cb out,
		void *ctx,
		const char *sp,
		const char *ep)
{
80001404:	fe010113          	addi	sp,sp,-32
80001408:	00112e23          	sw	ra,28(sp)
8000140c:	00812c23          	sw	s0,24(sp)
80001410:	00912a23          	sw	s1,20(sp)
80001414:	01212823          	sw	s2,16(sp)
80001418:	01312623          	sw	s3,12(sp)
8000141c:	01412423          	sw	s4,8(sp)
80001420:	00050a13          	mv	s4,a0
80001424:	00058993          	mv	s3,a1
80001428:	00068913          	mv	s2,a3
	size_t count = 0;
8000142c:	00000413          	li	s0,0

	while ((sp < ep) || ((ep == NULL) && *sp)) {
80001430:	0200006f          	j	80001450 <outs+0x4c>
		int rc = out((int)*sp++, ctx);
80001434:	00160493          	addi	s1,a2,1
80001438:	00098593          	mv	a1,s3
8000143c:	00064503          	lbu	a0,0(a2)
80001440:	000a00e7          	jalr	s4

		if (rc < 0) {
80001444:	02054063          	bltz	a0,80001464 <outs+0x60>
			return rc;
		}
		++count;
80001448:	00140413          	addi	s0,s0,1
		int rc = out((int)*sp++, ctx);
8000144c:	00048613          	mv	a2,s1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
80001450:	ff2662e3          	bltu	a2,s2,80001434 <outs+0x30>
80001454:	00091663          	bnez	s2,80001460 <outs+0x5c>
80001458:	00064783          	lbu	a5,0(a2)
8000145c:	fc079ce3          	bnez	a5,80001434 <outs+0x30>
	}

	return (int)count;
80001460:	00040513          	mv	a0,s0
}
80001464:	01c12083          	lw	ra,28(sp)
80001468:	01812403          	lw	s0,24(sp)
8000146c:	01412483          	lw	s1,20(sp)
80001470:	01012903          	lw	s2,16(sp)
80001474:	00c12983          	lw	s3,12(sp)
80001478:	00812a03          	lw	s4,8(sp)
8000147c:	02010113          	addi	sp,sp,32
80001480:	00008067          	ret

80001484 <z_cbvprintf_impl>:

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
80001484:	f8010113          	addi	sp,sp,-128
80001488:	06112e23          	sw	ra,124(sp)
8000148c:	06812c23          	sw	s0,120(sp)
80001490:	06912a23          	sw	s1,116(sp)
80001494:	07212823          	sw	s2,112(sp)
80001498:	07312623          	sw	s3,108(sp)
8000149c:	07412423          	sw	s4,104(sp)
800014a0:	07512223          	sw	s5,100(sp)
800014a4:	07612023          	sw	s6,96(sp)
800014a8:	05712e23          	sw	s7,92(sp)
800014ac:	05812c23          	sw	s8,88(sp)
800014b0:	00050913          	mv	s2,a0
800014b4:	00058493          	mv	s1,a1
800014b8:	00060a93          	mv	s5,a2
800014bc:	00d12623          	sw	a3,12(sp)
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
800014c0:	00000413          	li	s0,0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
800014c4:	000ac503          	lbu	a0,0(s5)
800014c8:	78050063          	beqz	a0,80001c48 <z_cbvprintf_impl+0x7c4>
		if (*fp != '%') {
800014cc:	02500793          	li	a5,37
800014d0:	00f50e63          	beq	a0,a5,800014ec <z_cbvprintf_impl+0x68>
			OUTC(*fp++);
800014d4:	001a8a93          	addi	s5,s5,1
800014d8:	00048593          	mv	a1,s1
800014dc:	000900e7          	jalr	s2
800014e0:	76054663          	bltz	a0,80001c4c <z_cbvprintf_impl+0x7c8>
800014e4:	00140413          	addi	s0,s0,1
			continue;
800014e8:	fddff06f          	j	800014c4 <z_cbvprintf_impl+0x40>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
800014ec:	00012823          	sw	zero,16(sp)
800014f0:	00012a23          	sw	zero,20(sp)
800014f4:	00012c23          	sw	zero,24(sp)
800014f8:	00012e23          	sw	zero,28(sp)
800014fc:	02012023          	sw	zero,32(sp)
80001500:	02012223          	sw	zero,36(sp)
80001504:	02012423          	sw	zero,40(sp)
80001508:	02012623          	sw	zero,44(sp)
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
8000150c:	000a8593          	mv	a1,s5
80001510:	02010513          	addi	a0,sp,32
80001514:	c41ff0ef          	jal	ra,80001154 <extract_conversion>
80001518:	00050993          	mv	s3,a0

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
8000151c:	02015783          	lhu	a5,32(sp)
80001520:	1007f713          	andi	a4,a5,256
80001524:	0c070263          	beqz	a4,800015e8 <z_cbvprintf_impl+0x164>
			width = va_arg(ap, int);
80001528:	00c12783          	lw	a5,12(sp)
8000152c:	00478713          	addi	a4,a5,4
80001530:	00e12623          	sw	a4,12(sp)
80001534:	0007aa03          	lw	s4,0(a5)

			if (width < 0) {
80001538:	080a4e63          	bltz	s4,800015d4 <z_cbvprintf_impl+0x150>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
8000153c:	02015783          	lhu	a5,32(sp)
80001540:	4007f713          	andi	a4,a5,1024
80001544:	0c070863          	beqz	a4,80001614 <z_cbvprintf_impl+0x190>
			int arg = va_arg(ap, int);
80001548:	00c12783          	lw	a5,12(sp)
8000154c:	00478713          	addi	a4,a5,4
80001550:	00e12623          	sw	a4,12(sp)
80001554:	0007ab03          	lw	s6,0(a5)

			if (arg < 0) {
80001558:	0a0b4463          	bltz	s6,80001600 <z_cbvprintf_impl+0x17c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
8000155c:	02012223          	sw	zero,36(sp)
		conv->pad0_pre_exp = 0;
80001560:	02012423          	sw	zero,40(sp)
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
80001564:	02012783          	lw	a5,32(sp)
80001568:	0107d713          	srli	a4,a5,0x10
8000156c:	00777713          	andi	a4,a4,7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
80001570:	00b7d793          	srli	a5,a5,0xb
80001574:	00f7f793          	andi	a5,a5,15
		enum length_mod_enum length_mod
80001578:	00078693          	mv	a3,a5
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
8000157c:	00100613          	li	a2,1
80001580:	0ac70663          	beq	a4,a2,8000162c <z_cbvprintf_impl+0x1a8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
80001584:	00200613          	li	a2,2
80001588:	1ec70063          	beq	a4,a2,80001768 <z_cbvprintf_impl+0x2e4>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
8000158c:	00400793          	li	a5,4
80001590:	2cf70a63          	beq	a4,a5,80001864 <z_cbvprintf_impl+0x3e0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
80001594:	00300793          	li	a5,3
80001598:	32f70863          	beq	a4,a5,800018c8 <z_cbvprintf_impl+0x444>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
8000159c:	02012783          	lw	a5,32(sp)
800015a0:	0037f793          	andi	a5,a5,3
800015a4:	32079e63          	bnez	a5,800018e0 <z_cbvprintf_impl+0x45c>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
800015a8:	02314783          	lbu	a5,35(sp)
800015ac:	fdb78793          	addi	a5,a5,-37
800015b0:	0ff7f693          	zext.b	a3,a5
800015b4:	05300713          	li	a4,83
800015b8:	4cd76a63          	bltu	a4,a3,80001a8c <z_cbvprintf_impl+0x608>
800015bc:	00269793          	slli	a5,a3,0x2
800015c0:	80007737          	lui	a4,0x80007
800015c4:	80c70713          	addi	a4,a4,-2036 # 8000680c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000680d>
800015c8:	00e787b3          	add	a5,a5,a4
800015cc:	0007a783          	lw	a5,0(a5)
800015d0:	00078067          	jr	a5
				conv->flag_dash = true;
800015d4:	02015783          	lhu	a5,32(sp)
800015d8:	0047e793          	ori	a5,a5,4
800015dc:	02f11023          	sh	a5,32(sp)
				width = -width;
800015e0:	41400a33          	neg	s4,s4
800015e4:	f59ff06f          	j	8000153c <z_cbvprintf_impl+0xb8>
		} else if (conv->width_present) {
800015e8:	0807f793          	andi	a5,a5,128
800015ec:	00078663          	beqz	a5,800015f8 <z_cbvprintf_impl+0x174>
			width = conv->width_value;
800015f0:	02412a03          	lw	s4,36(sp)
800015f4:	f49ff06f          	j	8000153c <z_cbvprintf_impl+0xb8>
		int width = -1;
800015f8:	fff00a13          	li	s4,-1
800015fc:	f41ff06f          	j	8000153c <z_cbvprintf_impl+0xb8>
				conv->prec_present = false;
80001600:	02015783          	lhu	a5,32(sp)
80001604:	dff7f793          	andi	a5,a5,-513
80001608:	02f11023          	sh	a5,32(sp)
		int precision = -1;
8000160c:	fff00b13          	li	s6,-1
80001610:	f4dff06f          	j	8000155c <z_cbvprintf_impl+0xd8>
		} else if (conv->prec_present) {
80001614:	2007f793          	andi	a5,a5,512
80001618:	00078663          	beqz	a5,80001624 <z_cbvprintf_impl+0x1a0>
			precision = conv->prec_value;
8000161c:	02812b03          	lw	s6,40(sp)
80001620:	f3dff06f          	j	8000155c <z_cbvprintf_impl+0xd8>
		int precision = -1;
80001624:	fff00b13          	li	s6,-1
80001628:	f35ff06f          	j	8000155c <z_cbvprintf_impl+0xd8>
			switch (length_mod) {
8000162c:	00500713          	li	a4,5
80001630:	0ee78e63          	beq	a5,a4,8000172c <z_cbvprintf_impl+0x2a8>
80001634:	02f76e63          	bltu	a4,a5,80001670 <z_cbvprintf_impl+0x1ec>
80001638:	00300713          	li	a4,3
8000163c:	0ae78263          	beq	a5,a4,800016e0 <z_cbvprintf_impl+0x25c>
80001640:	00400713          	li	a4,4
80001644:	04e79e63          	bne	a5,a4,800016a0 <z_cbvprintf_impl+0x21c>
					(sint_value_type)va_arg(ap, long long);
80001648:	00c12783          	lw	a5,12(sp)
8000164c:	00778793          	addi	a5,a5,7
80001650:	ff87f793          	andi	a5,a5,-8
80001654:	00878713          	addi	a4,a5,8
80001658:	00e12623          	sw	a4,12(sp)
8000165c:	0007a703          	lw	a4,0(a5)
80001660:	0047a783          	lw	a5,4(a5)
				value->sint =
80001664:	00e12823          	sw	a4,16(sp)
80001668:	00f12a23          	sw	a5,20(sp)
				break;
8000166c:	0500006f          	j	800016bc <z_cbvprintf_impl+0x238>
			switch (length_mod) {
80001670:	00a78793          	addi	a5,a5,10
80001674:	00f7f793          	andi	a5,a5,15
80001678:	00100713          	li	a4,1
8000167c:	02f76263          	bltu	a4,a5,800016a0 <z_cbvprintf_impl+0x21c>
					(sint_value_type)va_arg(ap, ptrdiff_t);
80001680:	00c12783          	lw	a5,12(sp)
80001684:	00478713          	addi	a4,a5,4
80001688:	00e12623          	sw	a4,12(sp)
8000168c:	0007a783          	lw	a5,0(a5)
80001690:	41f7d713          	srai	a4,a5,0x1f
				value->sint =
80001694:	00f12823          	sw	a5,16(sp)
80001698:	00e12a23          	sw	a4,20(sp)
				break;
8000169c:	0200006f          	j	800016bc <z_cbvprintf_impl+0x238>
				value->sint = va_arg(ap, int);
800016a0:	00c12783          	lw	a5,12(sp)
800016a4:	00478713          	addi	a4,a5,4
800016a8:	00e12623          	sw	a4,12(sp)
800016ac:	0007a783          	lw	a5,0(a5)
800016b0:	41f7d713          	srai	a4,a5,0x1f
800016b4:	00f12823          	sw	a5,16(sp)
800016b8:	00e12a23          	sw	a4,20(sp)
			if (length_mod == LENGTH_HH) {
800016bc:	00100793          	li	a5,1
800016c0:	08f68a63          	beq	a3,a5,80001754 <z_cbvprintf_impl+0x2d0>
			} else if (length_mod == LENGTH_H) {
800016c4:	00200793          	li	a5,2
800016c8:	ecf69ae3          	bne	a3,a5,8000159c <z_cbvprintf_impl+0x118>
				value->sint = (short)value->sint;
800016cc:	01011783          	lh	a5,16(sp)
800016d0:	41f7d713          	srai	a4,a5,0x1f
800016d4:	00f12823          	sw	a5,16(sp)
800016d8:	00e12a23          	sw	a4,20(sp)
800016dc:	ec1ff06f          	j	8000159c <z_cbvprintf_impl+0x118>
				    && (conv->specifier == 'c')) {
800016e0:	02314703          	lbu	a4,35(sp)
				if (WCHAR_IS_SIGNED
800016e4:	06300793          	li	a5,99
800016e8:	02f70263          	beq	a4,a5,8000170c <z_cbvprintf_impl+0x288>
					value->sint = va_arg(ap, long);
800016ec:	00c12783          	lw	a5,12(sp)
800016f0:	00478713          	addi	a4,a5,4
800016f4:	00e12623          	sw	a4,12(sp)
800016f8:	0007a783          	lw	a5,0(a5)
800016fc:	41f7d713          	srai	a4,a5,0x1f
80001700:	00f12823          	sw	a5,16(sp)
80001704:	00e12a23          	sw	a4,20(sp)
80001708:	fb5ff06f          	j	800016bc <z_cbvprintf_impl+0x238>
					value->sint = (wchar_t)va_arg(ap,
8000170c:	00c12783          	lw	a5,12(sp)
80001710:	00478713          	addi	a4,a5,4
80001714:	00e12623          	sw	a4,12(sp)
80001718:	0007a783          	lw	a5,0(a5)
8000171c:	41f7d713          	srai	a4,a5,0x1f
80001720:	00f12823          	sw	a5,16(sp)
80001724:	00e12a23          	sw	a4,20(sp)
80001728:	f95ff06f          	j	800016bc <z_cbvprintf_impl+0x238>
					(sint_value_type)va_arg(ap, intmax_t);
8000172c:	00c12783          	lw	a5,12(sp)
80001730:	00778793          	addi	a5,a5,7
80001734:	ff87f793          	andi	a5,a5,-8
80001738:	00878713          	addi	a4,a5,8
8000173c:	00e12623          	sw	a4,12(sp)
80001740:	0007a703          	lw	a4,0(a5)
80001744:	0047a783          	lw	a5,4(a5)
				value->sint =
80001748:	00e12823          	sw	a4,16(sp)
8000174c:	00f12a23          	sw	a5,20(sp)
				break;
80001750:	f6dff06f          	j	800016bc <z_cbvprintf_impl+0x238>
				value->sint = (signed char)value->sint;
80001754:	01010783          	lb	a5,16(sp)
80001758:	41f7d713          	srai	a4,a5,0x1f
8000175c:	00f12823          	sw	a5,16(sp)
80001760:	00e12a23          	sw	a4,20(sp)
80001764:	e39ff06f          	j	8000159c <z_cbvprintf_impl+0x118>
			switch (length_mod) {
80001768:	00500713          	li	a4,5
8000176c:	0ce78063          	beq	a5,a4,8000182c <z_cbvprintf_impl+0x3a8>
80001770:	02f76e63          	bltu	a4,a5,800017ac <z_cbvprintf_impl+0x328>
80001774:	00300713          	li	a4,3
80001778:	08e78c63          	beq	a5,a4,80001810 <z_cbvprintf_impl+0x38c>
8000177c:	00400713          	li	a4,4
80001780:	04e79c63          	bne	a5,a4,800017d8 <z_cbvprintf_impl+0x354>
					(uint_value_type)va_arg(ap,
80001784:	00c12783          	lw	a5,12(sp)
80001788:	00778793          	addi	a5,a5,7
8000178c:	ff87f793          	andi	a5,a5,-8
80001790:	00878713          	addi	a4,a5,8
80001794:	00e12623          	sw	a4,12(sp)
80001798:	0007a703          	lw	a4,0(a5)
8000179c:	0047a783          	lw	a5,4(a5)
				value->uint =
800017a0:	00e12823          	sw	a4,16(sp)
800017a4:	00f12a23          	sw	a5,20(sp)
				break;
800017a8:	0480006f          	j	800017f0 <z_cbvprintf_impl+0x36c>
			switch (length_mod) {
800017ac:	00a78793          	addi	a5,a5,10
800017b0:	00f7f793          	andi	a5,a5,15
800017b4:	00100713          	li	a4,1
800017b8:	02f76063          	bltu	a4,a5,800017d8 <z_cbvprintf_impl+0x354>
					(uint_value_type)va_arg(ap, size_t);
800017bc:	00c12783          	lw	a5,12(sp)
800017c0:	00478713          	addi	a4,a5,4
800017c4:	00e12623          	sw	a4,12(sp)
800017c8:	0007a783          	lw	a5,0(a5)
				value->uint =
800017cc:	00f12823          	sw	a5,16(sp)
800017d0:	00012a23          	sw	zero,20(sp)
				break;
800017d4:	01c0006f          	j	800017f0 <z_cbvprintf_impl+0x36c>
				value->uint = va_arg(ap, unsigned int);
800017d8:	00c12783          	lw	a5,12(sp)
800017dc:	00478713          	addi	a4,a5,4
800017e0:	00e12623          	sw	a4,12(sp)
800017e4:	0007a783          	lw	a5,0(a5)
800017e8:	00f12823          	sw	a5,16(sp)
800017ec:	00012a23          	sw	zero,20(sp)
			if (length_mod == LENGTH_HH) {
800017f0:	00100793          	li	a5,1
800017f4:	06f68063          	beq	a3,a5,80001854 <z_cbvprintf_impl+0x3d0>
			} else if (length_mod == LENGTH_H) {
800017f8:	00200793          	li	a5,2
800017fc:	daf690e3          	bne	a3,a5,8000159c <z_cbvprintf_impl+0x118>
				value->uint = (unsigned short)value->uint;
80001800:	01015783          	lhu	a5,16(sp)
80001804:	00f12823          	sw	a5,16(sp)
80001808:	00012a23          	sw	zero,20(sp)
8000180c:	d91ff06f          	j	8000159c <z_cbvprintf_impl+0x118>
					value->uint = va_arg(ap, unsigned long);
80001810:	00c12783          	lw	a5,12(sp)
80001814:	00478713          	addi	a4,a5,4
80001818:	00e12623          	sw	a4,12(sp)
8000181c:	0007a783          	lw	a5,0(a5)
80001820:	00f12823          	sw	a5,16(sp)
80001824:	00012a23          	sw	zero,20(sp)
				break;
80001828:	fc9ff06f          	j	800017f0 <z_cbvprintf_impl+0x36c>
					(uint_value_type)va_arg(ap,
8000182c:	00c12783          	lw	a5,12(sp)
80001830:	00778793          	addi	a5,a5,7
80001834:	ff87f793          	andi	a5,a5,-8
80001838:	00878713          	addi	a4,a5,8
8000183c:	00e12623          	sw	a4,12(sp)
80001840:	0007a703          	lw	a4,0(a5)
80001844:	0047a783          	lw	a5,4(a5)
				value->uint =
80001848:	00e12823          	sw	a4,16(sp)
8000184c:	00f12a23          	sw	a5,20(sp)
				break;
80001850:	fa1ff06f          	j	800017f0 <z_cbvprintf_impl+0x36c>
				value->uint = (unsigned char)value->uint;
80001854:	01014783          	lbu	a5,16(sp)
80001858:	00f12823          	sw	a5,16(sp)
8000185c:	00012a23          	sw	zero,20(sp)
80001860:	d3dff06f          	j	8000159c <z_cbvprintf_impl+0x118>
			if (length_mod == LENGTH_UPPER_L) {
80001864:	00800793          	li	a5,8
80001868:	02f68663          	beq	a3,a5,80001894 <z_cbvprintf_impl+0x410>
				value->dbl = va_arg(ap, double);
8000186c:	00c12783          	lw	a5,12(sp)
80001870:	00778793          	addi	a5,a5,7
80001874:	ff87f793          	andi	a5,a5,-8
80001878:	00878713          	addi	a4,a5,8
8000187c:	00e12623          	sw	a4,12(sp)
80001880:	0007a703          	lw	a4,0(a5)
80001884:	0047a783          	lw	a5,4(a5)
80001888:	00e12823          	sw	a4,16(sp)
8000188c:	00f12a23          	sw	a5,20(sp)
80001890:	d0dff06f          	j	8000159c <z_cbvprintf_impl+0x118>
				value->ldbl = va_arg(ap, long double);
80001894:	00c12783          	lw	a5,12(sp)
80001898:	00478713          	addi	a4,a5,4
8000189c:	00e12623          	sw	a4,12(sp)
800018a0:	0007a783          	lw	a5,0(a5)
800018a4:	0007a603          	lw	a2,0(a5)
800018a8:	0047a683          	lw	a3,4(a5)
800018ac:	0087a703          	lw	a4,8(a5)
800018b0:	00c7a783          	lw	a5,12(a5)
800018b4:	00c12823          	sw	a2,16(sp)
800018b8:	00d12a23          	sw	a3,20(sp)
800018bc:	00e12c23          	sw	a4,24(sp)
800018c0:	00f12e23          	sw	a5,28(sp)
800018c4:	cd9ff06f          	j	8000159c <z_cbvprintf_impl+0x118>
			value->ptr = va_arg(ap, void *);
800018c8:	00c12783          	lw	a5,12(sp)
800018cc:	00478713          	addi	a4,a5,4
800018d0:	00e12623          	sw	a4,12(sp)
800018d4:	0007a783          	lw	a5,0(a5)
800018d8:	00f12823          	sw	a5,16(sp)
800018dc:	cc1ff06f          	j	8000159c <z_cbvprintf_impl+0x118>
			OUTS(sp, fp);
800018e0:	00098693          	mv	a3,s3
800018e4:	000a8613          	mv	a2,s5
800018e8:	00048593          	mv	a1,s1
800018ec:	00090513          	mv	a0,s2
800018f0:	b15ff0ef          	jal	ra,80001404 <outs>
800018f4:	34054c63          	bltz	a0,80001c4c <z_cbvprintf_impl+0x7c8>
800018f8:	00a40433          	add	s0,s0,a0
		fp = extract_conversion(conv, sp);
800018fc:	00098a93          	mv	s5,s3
			continue;
80001900:	bc5ff06f          	j	800014c4 <z_cbvprintf_impl+0x40>
		case '%':
			OUTC('%');
80001904:	00048593          	mv	a1,s1
80001908:	02500513          	li	a0,37
8000190c:	000900e7          	jalr	s2
80001910:	32054e63          	bltz	a0,80001c4c <z_cbvprintf_impl+0x7c8>
80001914:	00140413          	addi	s0,s0,1
		char sign = 0;
80001918:	00000b93          	li	s7,0
		const char *bpe = buf + sizeof(buf);
8000191c:	04e10b13          	addi	s6,sp,78
		const char *bps = NULL;
80001920:	00000a93          	li	s5,0
			break;
80001924:	1740006f          	j	80001a98 <z_cbvprintf_impl+0x614>
		case 's': {
			bps = (const char *)value->ptr;
80001928:	01012a83          	lw	s5,16(sp)

			size_t len;

			if (precision >= 0) {
8000192c:	000b4e63          	bltz	s6,80001948 <z_cbvprintf_impl+0x4c4>
				len = strnlen(bps, precision);
80001930:	000b0593          	mv	a1,s6
80001934:	000a8513          	mv	a0,s5
80001938:	1d0030ef          	jal	ra,80004b08 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
8000193c:	00aa8b33          	add	s6,s5,a0
		char sign = 0;
80001940:	00000b93          	li	s7,0
			precision = -1;

			break;
80001944:	1540006f          	j	80001a98 <z_cbvprintf_impl+0x614>
				len = strlen(bps);
80001948:	000a8513          	mv	a0,s5
8000194c:	1a0030ef          	jal	ra,80004aec <strlen>
80001950:	fedff06f          	j	8000193c <z_cbvprintf_impl+0x4b8>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
80001954:	01012783          	lw	a5,16(sp)
80001958:	02f10c23          	sb	a5,56(sp)
		char sign = 0;
8000195c:	00000b93          	li	s7,0
			bpe = buf + 1;
80001960:	03910b13          	addi	s6,sp,57
			bps = buf;
80001964:	03810a93          	addi	s5,sp,56
			break;
80001968:	1300006f          	j	80001a98 <z_cbvprintf_impl+0x614>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
8000196c:	02015783          	lhu	a5,32(sp)
80001970:	0087f713          	andi	a4,a5,8
80001974:	00071a63          	bnez	a4,80001988 <z_cbvprintf_impl+0x504>
				sign = '+';
			} else if (conv->flag_space) {
80001978:	0107f793          	andi	a5,a5,16
8000197c:	02079463          	bnez	a5,800019a4 <z_cbvprintf_impl+0x520>
		char sign = 0;
80001980:	00000b93          	li	s7,0
80001984:	0080006f          	j	8000198c <z_cbvprintf_impl+0x508>
				sign = '+';
80001988:	02b00b93          	li	s7,43

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
8000198c:	01012703          	lw	a4,16(sp)
80001990:	01412783          	lw	a5,20(sp)
			if (sint < 0) {
80001994:	0007cc63          	bltz	a5,800019ac <z_cbvprintf_impl+0x528>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
80001998:	00e12823          	sw	a4,16(sp)
8000199c:	00f12a23          	sw	a5,20(sp)
800019a0:	0300006f          	j	800019d0 <z_cbvprintf_impl+0x54c>
				sign = ' ';
800019a4:	02000b93          	li	s7,32
800019a8:	fe5ff06f          	j	8000198c <z_cbvprintf_impl+0x508>
				value->uint = (uint_value_type)-sint;
800019ac:	40e006b3          	neg	a3,a4
800019b0:	00e03733          	snez	a4,a4
800019b4:	40f007b3          	neg	a5,a5
800019b8:	40e787b3          	sub	a5,a5,a4
800019bc:	00d12823          	sw	a3,16(sp)
800019c0:	00f12a23          	sw	a5,20(sp)
				sign = '-';
800019c4:	02d00b93          	li	s7,45
800019c8:	0080006f          	j	800019d0 <z_cbvprintf_impl+0x54c>
		switch (conv->specifier) {
800019cc:	00000b93          	li	s7,0
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
800019d0:	04e10713          	addi	a4,sp,78
800019d4:	03810693          	addi	a3,sp,56
800019d8:	02010613          	addi	a2,sp,32
800019dc:	01012503          	lw	a0,16(sp)
800019e0:	01412583          	lw	a1,20(sp)
800019e4:	845ff0ef          	jal	ra,80001228 <encode_uint>
800019e8:	00050a93          	mv	s5,a0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
800019ec:	120b4663          	bltz	s6,80001b18 <z_cbvprintf_impl+0x694>
				size_t len = bpe - bps;
800019f0:	04e10793          	addi	a5,sp,78
800019f4:	415787b3          	sub	a5,a5,s5

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
800019f8:	02015703          	lhu	a4,32(sp)
800019fc:	fbf77713          	andi	a4,a4,-65
80001a00:	02e11023          	sh	a4,32(sp)

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
80001a04:	1167fe63          	bgeu	a5,s6,80001b20 <z_cbvprintf_impl+0x69c>
					conv->pad0_value = precision - (int)len;
80001a08:	40fb07b3          	sub	a5,s6,a5
80001a0c:	02f12223          	sw	a5,36(sp)
		const char *bpe = buf + sizeof(buf);
80001a10:	04e10b13          	addi	s6,sp,78
80001a14:	0840006f          	j	80001a98 <z_cbvprintf_impl+0x614>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
80001a18:	01012503          	lw	a0,16(sp)
80001a1c:	00051e63          	bnez	a0,80001a38 <z_cbvprintf_impl+0x5b4>
		char sign = 0;
80001a20:	00000b93          	li	s7,0

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
80001a24:	80007b37          	lui	s6,0x80007
80001a28:	809b0b13          	addi	s6,s6,-2039 # 80006809 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000680a>
			bps = "(nil)";
80001a2c:	80007ab7          	lui	s5,0x80007
80001a30:	804a8a93          	addi	s5,s5,-2044 # 80006804 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006805>
80001a34:	0640006f          	j	80001a98 <z_cbvprintf_impl+0x614>
				bps = encode_uint((uintptr_t)value->ptr, conv,
80001a38:	04e10713          	addi	a4,sp,78
80001a3c:	03810693          	addi	a3,sp,56
80001a40:	02010613          	addi	a2,sp,32
80001a44:	00000593          	li	a1,0
80001a48:	fe0ff0ef          	jal	ra,80001228 <encode_uint>
80001a4c:	00050a93          	mv	s5,a0
				conv->altform_0c = true;
80001a50:	02214783          	lbu	a5,34(sp)
80001a54:	0107e793          	ori	a5,a5,16
80001a58:	02f10123          	sb	a5,34(sp)
				conv->specifier = 'x';
80001a5c:	07800793          	li	a5,120
80001a60:	02f101a3          	sb	a5,35(sp)
		char sign = 0;
80001a64:	00000b93          	li	s7,0
				goto prec_int_pad0;
80001a68:	f85ff06f          	j	800019ec <z_cbvprintf_impl+0x568>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
80001a6c:	00040613          	mv	a2,s0
80001a70:	01012583          	lw	a1,16(sp)
80001a74:	02010513          	addi	a0,sp,32
80001a78:	911ff0ef          	jal	ra,80001388 <store_count>
		char sign = 0;
80001a7c:	00000b93          	li	s7,0
		const char *bpe = buf + sizeof(buf);
80001a80:	04e10b13          	addi	s6,sp,78
		const char *bps = NULL;
80001a84:	00000a93          	li	s5,0
			}

			break;
80001a88:	0100006f          	j	80001a98 <z_cbvprintf_impl+0x614>
		switch (conv->specifier) {
80001a8c:	00000b93          	li	s7,0
80001a90:	04e10b13          	addi	s6,sp,78
80001a94:	00000a93          	li	s5,0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
80001a98:	1a0a8463          	beqz	s5,80001c40 <z_cbvprintf_impl+0x7bc>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
80001a9c:	415b06b3          	sub	a3,s6,s5
		int pad_len = 0;

		if (sign != 0) {
80001aa0:	000b8463          	beqz	s7,80001aa8 <z_cbvprintf_impl+0x624>
			nj_len += 1U;
80001aa4:	00168693          	addi	a3,a3,1
		}

		if (conv->altform_0c) {
80001aa8:	02214783          	lbu	a5,34(sp)
80001aac:	0107f713          	andi	a4,a5,16
80001ab0:	06070c63          	beqz	a4,80001b28 <z_cbvprintf_impl+0x6a4>
			nj_len += 2U;
80001ab4:	00268693          	addi	a3,a3,2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
80001ab8:	02412703          	lw	a4,36(sp)
80001abc:	00d70733          	add	a4,a4,a3
		if (conv->pad_fp) {
80001ac0:	0407f793          	andi	a5,a5,64
80001ac4:	00078663          	beqz	a5,80001ad0 <z_cbvprintf_impl+0x64c>
			nj_len += conv->pad0_pre_exp;
80001ac8:	02812783          	lw	a5,40(sp)
80001acc:	00f70733          	add	a4,a4,a5
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
80001ad0:	09405e63          	blez	s4,80001b6c <z_cbvprintf_impl+0x6e8>
			width -= (int)nj_len;
80001ad4:	40ea0a33          	sub	s4,s4,a4

			if (!conv->flag_dash) {
80001ad8:	02012783          	lw	a5,32(sp)
80001adc:	0027d793          	srli	a5,a5,0x2
80001ae0:	0017f793          	andi	a5,a5,1
80001ae4:	08079463          	bnez	a5,80001b6c <z_cbvprintf_impl+0x6e8>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
80001ae8:	02015783          	lhu	a5,32(sp)
80001aec:	0407f793          	andi	a5,a5,64
80001af0:	04078463          	beqz	a5,80001b38 <z_cbvprintf_impl+0x6b4>
					if (sign != 0) {
80001af4:	040b8663          	beqz	s7,80001b40 <z_cbvprintf_impl+0x6bc>
						OUTC(sign);
80001af8:	00048593          	mv	a1,s1
80001afc:	000b8513          	mv	a0,s7
80001b00:	000900e7          	jalr	s2
80001b04:	14054463          	bltz	a0,80001c4c <z_cbvprintf_impl+0x7c8>
80001b08:	00140413          	addi	s0,s0,1
						sign = 0;
					}
					pad = '0';
80001b0c:	03000c13          	li	s8,48
						sign = 0;
80001b10:	00000b93          	li	s7,0
80001b14:	0300006f          	j	80001b44 <z_cbvprintf_impl+0x6c0>
		const char *bpe = buf + sizeof(buf);
80001b18:	04e10b13          	addi	s6,sp,78
80001b1c:	f7dff06f          	j	80001a98 <z_cbvprintf_impl+0x614>
80001b20:	04e10b13          	addi	s6,sp,78
80001b24:	f75ff06f          	j	80001a98 <z_cbvprintf_impl+0x614>
		} else if (conv->altform_0) {
80001b28:	0087f713          	andi	a4,a5,8
80001b2c:	f80706e3          	beqz	a4,80001ab8 <z_cbvprintf_impl+0x634>
			nj_len += 1U;
80001b30:	00168693          	addi	a3,a3,1
80001b34:	f85ff06f          	j	80001ab8 <z_cbvprintf_impl+0x634>
				char pad = ' ';
80001b38:	02000c13          	li	s8,32
80001b3c:	0080006f          	j	80001b44 <z_cbvprintf_impl+0x6c0>
					pad = '0';
80001b40:	03000c13          	li	s8,48
80001b44:	000a0793          	mv	a5,s4
				}

				while (width-- > 0) {
80001b48:	fff78a13          	addi	s4,a5,-1
80001b4c:	02f05063          	blez	a5,80001b6c <z_cbvprintf_impl+0x6e8>
					OUTC(pad);
80001b50:	00048593          	mv	a1,s1
80001b54:	000c0513          	mv	a0,s8
80001b58:	000900e7          	jalr	s2
80001b5c:	0e054863          	bltz	a0,80001c4c <z_cbvprintf_impl+0x7c8>
80001b60:	00140413          	addi	s0,s0,1
				while (width-- > 0) {
80001b64:	000a0793          	mv	a5,s4
80001b68:	fe1ff06f          	j	80001b48 <z_cbvprintf_impl+0x6c4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
80001b6c:	000b8c63          	beqz	s7,80001b84 <z_cbvprintf_impl+0x700>
			OUTC(sign);
80001b70:	00048593          	mv	a1,s1
80001b74:	000b8513          	mv	a0,s7
80001b78:	000900e7          	jalr	s2
80001b7c:	0c054863          	bltz	a0,80001c4c <z_cbvprintf_impl+0x7c8>
80001b80:	00140413          	addi	s0,s0,1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
80001b84:	02012783          	lw	a5,32(sp)
80001b88:	0147d713          	srli	a4,a5,0x14
80001b8c:	00177713          	andi	a4,a4,1
80001b90:	0137d793          	srli	a5,a5,0x13
80001b94:	0017f793          	andi	a5,a5,1
80001b98:	00f767b3          	or	a5,a4,a5
80001b9c:	00078c63          	beqz	a5,80001bb4 <z_cbvprintf_impl+0x730>
				OUTC('0');
80001ba0:	00048593          	mv	a1,s1
80001ba4:	03000513          	li	a0,48
80001ba8:	000900e7          	jalr	s2
80001bac:	0a054063          	bltz	a0,80001c4c <z_cbvprintf_impl+0x7c8>
80001bb0:	00140413          	addi	s0,s0,1
			}

			if (conv->altform_0c) {
80001bb4:	02214783          	lbu	a5,34(sp)
80001bb8:	0107f793          	andi	a5,a5,16
80001bbc:	00078c63          	beqz	a5,80001bd4 <z_cbvprintf_impl+0x750>
				OUTC(conv->specifier);
80001bc0:	00048593          	mv	a1,s1
80001bc4:	02314503          	lbu	a0,35(sp)
80001bc8:	000900e7          	jalr	s2
80001bcc:	08054063          	bltz	a0,80001c4c <z_cbvprintf_impl+0x7c8>
80001bd0:	00140413          	addi	s0,s0,1
			}

			pad_len = conv->pad0_value;
80001bd4:	02412783          	lw	a5,36(sp)
			while (pad_len-- > 0) {
80001bd8:	fff78b93          	addi	s7,a5,-1
80001bdc:	02f05063          	blez	a5,80001bfc <z_cbvprintf_impl+0x778>
				OUTC('0');
80001be0:	00048593          	mv	a1,s1
80001be4:	03000513          	li	a0,48
80001be8:	000900e7          	jalr	s2
80001bec:	06054063          	bltz	a0,80001c4c <z_cbvprintf_impl+0x7c8>
80001bf0:	00140413          	addi	s0,s0,1
			while (pad_len-- > 0) {
80001bf4:	000b8793          	mv	a5,s7
80001bf8:	fe1ff06f          	j	80001bd8 <z_cbvprintf_impl+0x754>
			}

			OUTS(bps, bpe);
80001bfc:	000b0693          	mv	a3,s6
80001c00:	000a8613          	mv	a2,s5
80001c04:	00048593          	mv	a1,s1
80001c08:	00090513          	mv	a0,s2
80001c0c:	ff8ff0ef          	jal	ra,80001404 <outs>
80001c10:	02054e63          	bltz	a0,80001c4c <z_cbvprintf_impl+0x7c8>
80001c14:	00a40433          	add	s0,s0,a0
		}

		/* Finish left justification */
		while (width > 0) {
80001c18:	03405063          	blez	s4,80001c38 <z_cbvprintf_impl+0x7b4>
			OUTC(' ');
80001c1c:	00048593          	mv	a1,s1
80001c20:	02000513          	li	a0,32
80001c24:	000900e7          	jalr	s2
80001c28:	02054263          	bltz	a0,80001c4c <z_cbvprintf_impl+0x7c8>
80001c2c:	00140413          	addi	s0,s0,1
			--width;
80001c30:	fffa0a13          	addi	s4,s4,-1
80001c34:	fe5ff06f          	j	80001c18 <z_cbvprintf_impl+0x794>
		fp = extract_conversion(conv, sp);
80001c38:	00098a93          	mv	s5,s3
80001c3c:	889ff06f          	j	800014c4 <z_cbvprintf_impl+0x40>
80001c40:	00098a93          	mv	s5,s3
80001c44:	881ff06f          	j	800014c4 <z_cbvprintf_impl+0x40>
		}
	}

	return count;
80001c48:	00040513          	mv	a0,s0
#undef OUTS
#undef OUTC
}
80001c4c:	07c12083          	lw	ra,124(sp)
80001c50:	07812403          	lw	s0,120(sp)
80001c54:	07412483          	lw	s1,116(sp)
80001c58:	07012903          	lw	s2,112(sp)
80001c5c:	06c12983          	lw	s3,108(sp)
80001c60:	06812a03          	lw	s4,104(sp)
80001c64:	06412a83          	lw	s5,100(sp)
80001c68:	06012b03          	lw	s6,96(sp)
80001c6c:	05c12b83          	lw	s7,92(sp)
80001c70:	05812c03          	lw	s8,88(sp)
80001c74:	08010113          	addi	sp,sp,128
80001c78:	00008067          	ret

80001c7c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
80001c7c:	00008067          	ret

80001c80 <arch_cpu_idle>:
 * This function will be called by the kernel idle loop or possibly within
 * an implementation of _pm_save_idle in the kernel when the
 * '_pm_save_flag' variable is non-zero.
 */
void arch_cpu_idle(void)
{
80001c80:	ff010113          	addi	sp,sp,-16
80001c84:	00112623          	sw	ra,12(sp)
	sys_trace_idle();
80001c88:	090000ef          	jal	ra,80001d18 <sys_trace_idle>
 * use atomic instruction csrs to unlock global irq
 * csrs: atomic set bits in CSR register
 */
static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	__asm__ volatile ("csrs mstatus, %0"
80001c8c:	00800793          	li	a5,8
80001c90:	3007a073          	csrs	mstatus,a5
	__asm__ volatile("wfi");
80001c94:	10500073          	wfi
	riscv_idle(MSTATUS_IEN);
}
80001c98:	00c12083          	lw	ra,12(sp)
80001c9c:	01010113          	addi	sp,sp,16
80001ca0:	00008067          	ret

80001ca4 <arch_irq_enable>:
{
#if defined(CONFIG_3RD_LEVEL_INTERRUPTS)
	return ((irq >> 16) & 0xFF) != 0 ? 3 :
		(((irq >> 8) & 0xFF) == 0 ? 1 : 2);
#elif defined(CONFIG_2ND_LEVEL_INTERRUPTS)
	return ((irq >> 8) & 0xFF) == 0 ? 1 : 2;
80001ca4:	00855793          	srli	a5,a0,0x8
80001ca8:	0ff7f713          	zext.b	a4,a5
80001cac:	00071a63          	bnez	a4,80001cc0 <arch_irq_enable+0x1c>
	 * CSR mie register is updated using atomic instruction csrrs
	 * (atomic read and set bits in CSR register)
	 */
	__asm__ volatile ("csrrs %0, mie, %1\n"
			  : "=r" (mie)
			  : "r" (1 << irq));
80001cb0:	00100793          	li	a5,1
80001cb4:	00a797b3          	sll	a5,a5,a0
	__asm__ volatile ("csrrs %0, mie, %1\n"
80001cb8:	3047a7f3          	csrrs	a5,mie,a5
80001cbc:	00008067          	ret
{
80001cc0:	ff010113          	addi	sp,sp,-16
80001cc4:	00112623          	sw	ra,12(sp)
		riscv_plic_irq_enable(irq);
80001cc8:	fff78513          	addi	a0,a5,-1
80001ccc:	530000ef          	jal	ra,800021fc <riscv_plic_irq_enable>
}
80001cd0:	00c12083          	lw	ra,12(sp)
80001cd4:	01010113          	addi	sp,sp,16
80001cd8:	00008067          	ret

80001cdc <z_riscv_irq_priority_set>:
80001cdc:	00855513          	srli	a0,a0,0x8
80001ce0:	0ff57793          	zext.b	a5,a0
80001ce4:	00079463          	bnez	a5,80001cec <z_riscv_irq_priority_set+0x10>
80001ce8:	00008067          	ret
	return !!(mie & (1 << irq));
}

#if defined(CONFIG_RISCV_HAS_PLIC)
void z_riscv_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
80001cec:	ff010113          	addi	sp,sp,-16
80001cf0:	00112623          	sw	ra,12(sp)
	unsigned int level = irq_get_level(irq);

	if (level == 2) {
		irq = irq_from_level_2(irq);
		riscv_plic_set_priority(irq, prio);
80001cf4:	fff50513          	addi	a0,a0,-1
80001cf8:	538000ef          	jal	ra,80002230 <riscv_plic_set_priority>
	}
}
80001cfc:	00c12083          	lw	ra,12(sp)
80001d00:	01010113          	addi	sp,sp,16
80001d04:	00008067          	ret

80001d08 <soc_interrupt_init>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
80001d08:	300477f3          	csrrci	a5,mstatus,8
__weak void soc_interrupt_init(void)
{
	/* ensure that all interrupts are disabled */
	(void)arch_irq_lock();

	__asm__ volatile ("csrwi mie, 0\n"
80001d0c:	30405073          	csrwi	mie,0
80001d10:	34405073          	csrwi	mip,0
			  "csrwi mip, 0\n");
}
80001d14:	00008067          	ret

80001d18 <sys_trace_idle>:

void sys_trace_isr_exit(void) {}

void sys_trace_isr_exit_to_scheduler(void) {}

void sys_trace_idle(void) {}
80001d18:	00008067          	ret

80001d1c <bad_stack_pointer>:
		return true;
	}
#endif

	return false;
}
80001d1c:	00000513          	li	a0,0
80001d20:	00008067          	ret

80001d24 <z_riscv_fatal_error>:
{
80001d24:	ff010113          	addi	sp,sp,-16
80001d28:	00112623          	sw	ra,12(sp)
	z_fatal_error(reason, esf);
80001d2c:	51d000ef          	jal	ra,80002a48 <z_fatal_error>

80001d30 <_Fault>:

void _Fault(z_arch_esf_t *esf)
{
80001d30:	ff010113          	addi	sp,sp,-16
80001d34:	00112623          	sw	ra,12(sp)
80001d38:	00812423          	sw	s0,8(sp)
80001d3c:	00050413          	mv	s0,a0
	}
#endif /* CONFIG_USERSPACE */

	unsigned long mcause;

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
80001d40:	342027f3          	csrr	a5,mcause

#ifndef CONFIG_SOC_OPENISA_RV32M1_RISCV32
	unsigned long mtval;
	__asm__ volatile("csrr %0, mtval" : "=r" (mtval));
80001d44:	343027f3          	csrr	a5,mtval
	LOG_ERR("  mtval: %lx", mtval);
#endif

	unsigned int reason = K_ERR_CPU_EXCEPTION;

	if (bad_stack_pointer(esf)) {
80001d48:	fd5ff0ef          	jal	ra,80001d1c <bad_stack_pointer>
80001d4c:	00050463          	beqz	a0,80001d54 <_Fault+0x24>
		reason = K_ERR_STACK_CHK_FAIL;
80001d50:	00200513          	li	a0,2
	}

	z_riscv_fatal_error(reason, esf);
80001d54:	00040593          	mv	a1,s0
80001d58:	fcdff0ef          	jal	ra,80001d24 <z_riscv_fatal_error>

80001d5c <z_irq_spurious>:
#include <kernel_internal.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_irq_spurious(const void *unused)
{
80001d5c:	ff010113          	addi	sp,sp,-16
80001d60:	00112623          	sw	ra,12(sp)
	unsigned long mcause;

	ARG_UNUSED(unused);

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
80001d64:	342027f3          	csrr	a5,mcause
	if (mcause == RISCV_MACHINE_EXT_IRQ) {
		LOG_ERR("PLIC interrupt line causing the IRQ: %d",
			riscv_plic_get_irq());
	}
#endif
	z_riscv_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
80001d68:	00000593          	li	a1,0
80001d6c:	00100513          	li	a0,1
80001d70:	fb5ff0ef          	jal	ra,80001d24 <z_riscv_fatal_error>

80001d74 <_PrepC>:
 *
 * This routine prepares for the execution of and runs C code.
 */

void _PrepC(void)
{
80001d74:	ff010113          	addi	sp,sp,-16
80001d78:	00112623          	sw	ra,12(sp)
	z_bss_zero();
80001d7c:	6cd000ef          	jal	ra,80002c48 <z_bss_zero>
	z_data_copy();
#if defined(CONFIG_RISCV_SOC_INTERRUPT_INIT)
	soc_interrupt_init();
80001d80:	f89ff0ef          	jal	ra,80001d08 <soc_interrupt_init>
#endif
	z_cstart();
80001d84:	024010ef          	jal	ra,80002da8 <z_cstart>

80001d88 <__initialize>:
/*
 * Remainder of asm-land initialization code before we can jump into
 * the C domain
 */
SECTION_FUNC(TEXT, __initialize)
	csrr a0, mhartid
80001d88:	f1402573          	csrr	a0,mhartid
	beqz a0, boot_first_core
80001d8c:	00050a63          	beqz	a0,80001da0 <boot_first_core>

	li t0, CONFIG_MP_NUM_CPUS
80001d90:	00100293          	li	t0,1
	blt a0, t0, boot_secondary_core
80001d94:	04554263          	blt	a0,t0,80001dd8 <boot_secondary_core>

80001d98 <loop_unconfigured_cores>:

loop_unconfigured_cores:
	wfi
80001d98:	10500073          	wfi
	j loop_unconfigured_cores
80001d9c:	ffdff06f          	j	80001d98 <loop_unconfigured_cores>

80001da0 <boot_first_core>:
	fscsr zero
#endif

#ifdef CONFIG_INIT_STACKS
	/* Pre-populate all bytes in z_interrupt_stacks with 0xAA */
	la t0, z_interrupt_stacks
80001da0:	00005297          	auipc	t0,0x5
80001da4:	fd028293          	addi	t0,t0,-48 # 80006d70 <z_interrupt_stacks>
	li t1, __z_interrupt_stack_SIZEOF
80001da8:	00001337          	lui	t1,0x1
	add t1, t1, t0
80001dac:	00530333          	add	t1,t1,t0

	/* Populate z_interrupt_stacks with 0xaaaaaaaa */
	li t2, 0xaaaaaaaa
80001db0:	aaaab3b7          	lui	t2,0xaaaab
80001db4:	aaa38393          	addi	t2,t2,-1366 # aaaaaaaa <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xaaaaaaab>

80001db8 <aa_loop>:
aa_loop:
	sw t2, 0x00(t0)
80001db8:	0072a023          	sw	t2,0(t0)
	addi t0, t0, 4
80001dbc:	00428293          	addi	t0,t0,4
	blt t0, t1, aa_loop
80001dc0:	fe62cce3          	blt	t0,t1,80001db8 <aa_loop>

	/*
	 * Initially, setup stack pointer to
	 * z_interrupt_stacks + __z_interrupt_stack_SIZEOF
	 */
	la sp, z_interrupt_stacks
80001dc4:	00005117          	auipc	sp,0x5
80001dc8:	fac10113          	addi	sp,sp,-84 # 80006d70 <z_interrupt_stacks>
	li t0, __z_interrupt_stack_SIZEOF
80001dcc:	000012b7          	lui	t0,0x1
	add sp, sp, t0
80001dd0:	00510133          	add	sp,sp,t0

	/*
	 * Jump into C domain. _PrepC zeroes BSS, copies rw data into RAM,
	 * and then enters kernel z_cstart
	 */
	call _PrepC
80001dd4:	fa1ff0ef          	jal	ra,80001d74 <_PrepC>

80001dd8 <boot_secondary_core>:

boot_secondary_core:
	la t0, riscv_cpu_wake_flag
80001dd8:	00005297          	auipc	t0,0x5
80001ddc:	e2c28293          	addi	t0,t0,-468 # 80006c04 <riscv_cpu_wake_flag>
	lr t0, 0(t0)
80001de0:	0002a283          	lw	t0,0(t0)
	bne a0, t0, boot_secondary_core
80001de4:	fe551ae3          	bne	a0,t0,80001dd8 <boot_secondary_core>

	/* Set up stack */
	la t0, riscv_cpu_sp
80001de8:	00005297          	auipc	t0,0x5
80001dec:	e1828293          	addi	t0,t0,-488 # 80006c00 <riscv_cpu_sp>
	lr sp, 0(t0)
80001df0:	0002a103          	lw	sp,0(t0)

	la t0, riscv_cpu_wake_flag
80001df4:	00005297          	auipc	t0,0x5
80001df8:	e1028293          	addi	t0,t0,-496 # 80006c04 <riscv_cpu_wake_flag>
	sr zero, 0(t0)
80001dfc:	0002a023          	sw	zero,0(t0)
	j z_riscv_secondary_cpu_init
80001e00:	07c0006f          	j	80001e7c <z_riscv_secondary_cpu_init>

80001e04 <z_riscv_switch>:

/* void z_riscv_switch(k_thread_t *switch_to, k_thread_t *switch_from) */
SECTION_FUNC(TEXT, z_riscv_switch)

	/* Save the old thread's callee-saved registers */
	DO_CALLEE_SAVED(sr, a1)
80001e04:	0215aa23          	sw	ra,52(a1)
80001e08:	0285ac23          	sw	s0,56(a1)
80001e0c:	0295ae23          	sw	s1,60(a1)
80001e10:	0525a023          	sw	s2,64(a1)
80001e14:	0535a223          	sw	s3,68(a1)
80001e18:	0545a423          	sw	s4,72(a1)
80001e1c:	0555a623          	sw	s5,76(a1)
80001e20:	0565a823          	sw	s6,80(a1)
80001e24:	0575aa23          	sw	s7,84(a1)
80001e28:	0585ac23          	sw	s8,88(a1)
80001e2c:	0595ae23          	sw	s9,92(a1)
80001e30:	07a5a023          	sw	s10,96(a1)
80001e34:	07b5a223          	sw	s11,100(a1)
	DO_FP_CALLEE_SAVED(fsr, a1)
skip_store_fp_callee_saved:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Save the old thread's stack pointer */
	sr sp, _thread_offset_to_sp(a1)
80001e38:	0225a823          	sw	sp,48(a1)

	/* Set thread->switch_handle = thread to mark completion */
	sr a1, ___thread_t_switch_handle_OFFSET(a1)
80001e3c:	06b5ae23          	sw	a1,124(a1)

	/* Get the new thread's stack pointer */
	lr sp, _thread_offset_to_sp(a0)
80001e40:	03052103          	lw	sp,48(a0)
	call z_thread_mark_switched_in
	mv a0, s0
#endif

	/* Restore the new thread's callee-saved registers */
	DO_CALLEE_SAVED(lr, a0)
80001e44:	03452083          	lw	ra,52(a0)
80001e48:	03852403          	lw	s0,56(a0)
80001e4c:	03c52483          	lw	s1,60(a0)
80001e50:	04052903          	lw	s2,64(a0)
80001e54:	04452983          	lw	s3,68(a0)
80001e58:	04852a03          	lw	s4,72(a0)
80001e5c:	04c52a83          	lw	s5,76(a0)
80001e60:	05052b03          	lw	s6,80(a0)
80001e64:	05452b83          	lw	s7,84(a0)
80001e68:	05852c03          	lw	s8,88(a0)
80001e6c:	05c52c83          	lw	s9,92(a0)
80001e70:	06052d03          	lw	s10,96(a0)
80001e74:	06452d83          	lw	s11,100(a0)
	csrc mstatus, t1
1:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Return to arch_switch() or _irq_wrapper() */
	ret
80001e78:	00008067          	ret

80001e7c <z_riscv_secondary_cpu_init>:
		;
	}
}

void z_riscv_secondary_cpu_init(int cpu_num)
{
80001e7c:	ff010113          	addi	sp,sp,-16
80001e80:	00112623          	sw	ra,12(sp)
80001e84:	00812423          	sw	s0,8(sp)
80001e88:	00050413          	mv	s0,a0
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	__asm__("mv tp, %0" : : "r" (z_idle_threads[cpu_num].tls));
#endif
#if defined(CONFIG_RISCV_SOC_INTERRUPT_INIT)
	soc_interrupt_init();
80001e8c:	e7dff0ef          	jal	ra,80001d08 <soc_interrupt_init>
	z_riscv_pmp_init();
#endif
#ifdef CONFIG_SMP
	irq_enable(RISCV_MACHINE_SOFT_IRQ);
#endif
	riscv_cpu_init[cpu_num].fn(riscv_cpu_init[cpu_num].arg);
80001e90:	800077b7          	lui	a5,0x80007
80001e94:	00341413          	slli	s0,s0,0x3
80001e98:	c0878793          	addi	a5,a5,-1016 # 80006c08 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c09>
80001e9c:	008787b3          	add	a5,a5,s0
80001ea0:	0007a703          	lw	a4,0(a5)
80001ea4:	0047a503          	lw	a0,4(a5)
80001ea8:	000700e7          	jalr	a4

80001eac <arch_new_thread>:
#ifdef CONFIG_RISCV_SOC_CONTEXT_SAVE
	const struct soc_esf soc_esf_init = {SOC_ESF_INIT};
#endif

	/* Initial stack frame for thread */
	stack_init = (struct __esf *)Z_STACK_PTR_ALIGN(
80001eac:	fb060613          	addi	a2,a2,-80
 * @param ptr Proposed stack pointer address
 * @return Properly aligned stack pointer address
 */
static inline char *z_stack_ptr_align(char *ptr)
{
	return (char *)ROUND_DOWN(ptr, ARCH_STACK_PTR_ALIGN);
80001eb0:	ff067613          	andi	a2,a2,-16
				Z_STACK_PTR_TO_FRAME(struct __esf, stack_ptr)
				);

	/* Setup the initial stack frame */
	stack_init->a0 = (unsigned long)entry;
80001eb4:	02d62023          	sw	a3,32(a2)
	stack_init->a1 = (unsigned long)p1;
80001eb8:	02e62223          	sw	a4,36(a2)
	stack_init->a2 = (unsigned long)p2;
80001ebc:	02f62423          	sw	a5,40(a2)
	stack_init->a3 = (unsigned long)p3;
80001ec0:	03062623          	sw	a6,44(a2)
	 *    restored following the MSTATUS value set within the thread stack;
	 * 2) the core will jump to z_thread_entry, as the program
	 *    counter will be restored following the MEPC value set within the
	 *    thread stack.
	 */
	stack_init->mstatus = MSTATUS_DEF_RESTORE;
80001ec4:	000027b7          	lui	a5,0x2
80001ec8:	88078793          	addi	a5,a5,-1920 # 1880 <CONFIG_ISR_STACK_SIZE+0x880>
80001ecc:	04f62223          	sw	a5,68(a2)
		/* User thread */
		stack_init->mepc = (unsigned long)k_thread_user_mode_enter;

	} else {
		/* Supervisor thread */
		stack_init->mepc = (unsigned long)z_thread_entry;
80001ed0:	800017b7          	lui	a5,0x80001
80001ed4:	b3078793          	addi	a5,a5,-1232 # 80000b30 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b31>
80001ed8:	04f62023          	sw	a5,64(a2)

#ifdef CONFIG_RISCV_SOC_CONTEXT_SAVE
	stack_init->soc_context = soc_esf_init;
#endif

	thread->callee_saved.sp = (unsigned long)stack_init;
80001edc:	02c52823          	sw	a2,48(a0)

	/* where to go when returning from z_riscv_switch() */
	thread->callee_saved.ra = (unsigned long)z_riscv_thread_start;
80001ee0:	800007b7          	lui	a5,0x80000
80001ee4:	15c78793          	addi	a5,a5,348 # 8000015c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000015d>
80001ee8:	02f52a23          	sw	a5,52(a0)

	/* our switch handle is the thread pointer itself */
	thread->switch_handle = thread;
80001eec:	06a52e23          	sw	a0,124(a0)
}
80001ef0:	00008067          	ret

80001ef4 <malloc_prepare>:
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
80001ef4:	00000513          	li	a0,0
80001ef8:	00008067          	ret

80001efc <_stdout_hook_default>:
static int _stdout_hook_default(int c)
{
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
80001efc:	fff00513          	li	a0,-1
80001f00:	00008067          	ret

80001f04 <_stdin_hook_default>:
}

static unsigned char _stdin_hook_default(void)
{
	return 0;
}
80001f04:	00000513          	li	a0,0
80001f08:	00008067          	ret

80001f0c <__stdout_hook_install>:
	_stdout_hook = hook;
80001f0c:	80a1a423          	sw	a0,-2040(gp) # 800091e8 <_stdout_hook>
}
80001f10:	00008067          	ret

80001f14 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
80001f14:	fe010113          	addi	sp,sp,-32
80001f18:	00112e23          	sw	ra,28(sp)
80001f1c:	00812c23          	sw	s0,24(sp)
80001f20:	00912a23          	sw	s1,20(sp)
80001f24:	01212823          	sw	s2,16(sp)
80001f28:	01312623          	sw	s3,12(sp)
80001f2c:	00050993          	mv	s3,a0
80001f30:	00058913          	mv	s2,a1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
80001f34:	00000413          	li	s0,0
80001f38:	0080006f          	j	80001f40 <z_impl_zephyr_read_stdin+0x2c>
80001f3c:	00140413          	addi	s0,s0,1
80001f40:	03245663          	bge	s0,s2,80001f6c <z_impl_zephyr_read_stdin+0x58>
		*(buf + i) = _stdin_hook();
80001f44:	008984b3          	add	s1,s3,s0
80001f48:	800097b7          	lui	a5,0x80009
80001f4c:	1e47a783          	lw	a5,484(a5) # 800091e4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800091e5>
80001f50:	000780e7          	jalr	a5
80001f54:	00a48023          	sb	a0,0(s1)
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
80001f58:	00a00793          	li	a5,10
80001f5c:	00f50663          	beq	a0,a5,80001f68 <z_impl_zephyr_read_stdin+0x54>
80001f60:	00d00793          	li	a5,13
80001f64:	fcf51ce3          	bne	a0,a5,80001f3c <z_impl_zephyr_read_stdin+0x28>
			i++;
80001f68:	00140413          	addi	s0,s0,1
			break;
		}
	}
	return i;
}
80001f6c:	00040513          	mv	a0,s0
80001f70:	01c12083          	lw	ra,28(sp)
80001f74:	01812403          	lw	s0,24(sp)
80001f78:	01412483          	lw	s1,20(sp)
80001f7c:	01012903          	lw	s2,16(sp)
80001f80:	00c12983          	lw	s3,12(sp)
80001f84:	02010113          	addi	sp,sp,32
80001f88:	00008067          	ret

80001f8c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
80001f8c:	fe010113          	addi	sp,sp,-32
80001f90:	00112e23          	sw	ra,28(sp)
80001f94:	00812c23          	sw	s0,24(sp)
80001f98:	00912a23          	sw	s1,20(sp)
80001f9c:	01212823          	sw	s2,16(sp)
80001fa0:	01312623          	sw	s3,12(sp)
80001fa4:	00050993          	mv	s3,a0
80001fa8:	00058913          	mv	s2,a1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
80001fac:	00000413          	li	s0,0
80001fb0:	0140006f          	j	80001fc4 <z_impl_zephyr_write_stdout+0x38>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
80001fb4:	8081a783          	lw	a5,-2040(gp) # 800091e8 <_stdout_hook>
80001fb8:	0004c503          	lbu	a0,0(s1)
80001fbc:	000780e7          	jalr	a5
	for (i = 0; i < nbytes; i++) {
80001fc0:	00140413          	addi	s0,s0,1
80001fc4:	03245263          	bge	s0,s2,80001fe8 <z_impl_zephyr_write_stdout+0x5c>
		if (*(buf + i) == '\n') {
80001fc8:	008984b3          	add	s1,s3,s0
80001fcc:	0004c703          	lbu	a4,0(s1)
80001fd0:	00a00793          	li	a5,10
80001fd4:	fef710e3          	bne	a4,a5,80001fb4 <z_impl_zephyr_write_stdout+0x28>
			_stdout_hook('\r');
80001fd8:	8081a783          	lw	a5,-2040(gp) # 800091e8 <_stdout_hook>
80001fdc:	00d00513          	li	a0,13
80001fe0:	000780e7          	jalr	a5
80001fe4:	fd1ff06f          	j	80001fb4 <z_impl_zephyr_write_stdout+0x28>
	}
	return nbytes;
}
80001fe8:	00090513          	mv	a0,s2
80001fec:	01c12083          	lw	ra,28(sp)
80001ff0:	01812403          	lw	s0,24(sp)
80001ff4:	01412483          	lw	s1,20(sp)
80001ff8:	01012903          	lw	s2,16(sp)
80001ffc:	00c12983          	lw	s3,12(sp)
80002000:	02010113          	addi	sp,sp,32
80002004:	00008067          	ret

80002008 <_read>:
#include <syscalls/zephyr_write_stdout_mrsh.c>
#endif

#ifndef CONFIG_POSIX_API
int _read(int fd, char *buf, int nbytes)
{
80002008:	ff010113          	addi	sp,sp,-16
8000200c:	00112623          	sw	ra,12(sp)
80002010:	00058513          	mv	a0,a1
80002014:	00060593          	mv	a1,a2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
80002018:	efdff0ef          	jal	ra,80001f14 <z_impl_zephyr_read_stdin>
	ARG_UNUSED(fd);

	return zephyr_read_stdin(buf, nbytes);
}
8000201c:	00c12083          	lw	ra,12(sp)
80002020:	01010113          	addi	sp,sp,16
80002024:	00008067          	ret

80002028 <_write>:
__weak FUNC_ALIAS(_read, read, int);

int _write(int fd, const void *buf, int nbytes)
{
80002028:	ff010113          	addi	sp,sp,-16
8000202c:	00112623          	sw	ra,12(sp)
80002030:	00058513          	mv	a0,a1
80002034:	00060593          	mv	a1,a2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
80002038:	f55ff0ef          	jal	ra,80001f8c <z_impl_zephyr_write_stdout>
	ARG_UNUSED(fd);

	return zephyr_write_stdout(buf, nbytes);
}
8000203c:	00c12083          	lw	ra,12(sp)
80002040:	01010113          	addi	sp,sp,16
80002044:	00008067          	ret

80002048 <_close>:
__weak FUNC_ALIAS(_open, open, int);

int _close(int file)
{
	return -1;
}
80002048:	fff00513          	li	a0,-1
8000204c:	00008067          	ret

80002050 <_lseek>:
__weak FUNC_ALIAS(_close, close, int);

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
80002050:	00000513          	li	a0,0
80002054:	00008067          	ret

80002058 <_isatty>:
#endif

int _isatty(int file)
{
	return file <= 2;
}
80002058:	00352513          	slti	a0,a0,3
8000205c:	00008067          	ret

80002060 <_fstat>:
}
__weak FUNC_ALIAS(_getpid, getpid, int);

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
80002060:	000027b7          	lui	a5,0x2
80002064:	00f5a223          	sw	a5,4(a1)
	return 0;
}
80002068:	00000513          	li	a0,0
8000206c:	00008067          	ret

80002070 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
80002070:	00050713          	mv	a4,a0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
80002074:	800077b7          	lui	a5,0x80007
80002078:	c107a683          	lw	a3,-1008(a5) # 80006c10 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c11>
8000207c:	85818793          	addi	a5,gp,-1960 # 80009238 <__data_region_end>
80002080:	00f68533          	add	a0,a3,a5

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
80002084:	00d70733          	add	a4,a4,a3
80002088:	c00006b7          	lui	a3,0xc0000
8000208c:	40f687b3          	sub	a5,a3,a5
80002090:	00f77863          	bgeu	a4,a5,800020a0 <_sbrk+0x30>
		heap_sz += count;
80002094:	800077b7          	lui	a5,0x80007
80002098:	c0e7a823          	sw	a4,-1008(a5) # 80006c10 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c11>
		ret = ptr;
8000209c:	00008067          	ret

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
800020a0:	fff00513          	li	a0,-1
	}

	return ret;
}
800020a4:	00008067          	ret

800020a8 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
800020a8:	ff010113          	addi	sp,sp,-16
800020ac:	00112623          	sw	ra,12(sp)
800020b0:	00812423          	sw	s0,8(sp)
800020b4:	00050413          	mv	s0,a0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
800020b8:	01400513          	li	a0,20
800020bc:	720020ef          	jal	ra,800047dc <malloc>
800020c0:	00a42023          	sw	a0,0(s0)
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_init(mutex);
800020c4:	000010ef          	jal	ra,800030c4 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
800020c8:	00c12083          	lw	ra,12(sp)
800020cc:	00812403          	lw	s0,8(sp)
800020d0:	01010113          	addi	sp,sp,16
800020d4:	00008067          	ret

800020d8 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
800020d8:	ff010113          	addi	sp,sp,-16
800020dc:	00112623          	sw	ra,12(sp)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
800020e0:	fff00593          	li	a1,-1
800020e4:	fff00613          	li	a2,-1
800020e8:	7f5000ef          	jal	ra,800030dc <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
800020ec:	00c12083          	lw	ra,12(sp)
800020f0:	01010113          	addi	sp,sp,16
800020f4:	00008067          	ret

800020f8 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
800020f8:	ff010113          	addi	sp,sp,-16
800020fc:	00112623          	sw	ra,12(sp)
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
80002100:	158010ef          	jal	ra,80003258 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
80002104:	00c12083          	lw	ra,12(sp)
80002108:	01010113          	addi	sp,sp,16
8000210c:	00008067          	ret

80002110 <plic_init>:
 * @brief Initialize the Platform Level Interrupt Controller
 *
 * @retval 0 on success.
 */
static int plic_init(const struct device *dev)
{
80002110:	ff010113          	addi	sp,sp,-16
80002114:	00112623          	sw	ra,12(sp)
	volatile struct plic_regs_t *regs =
	    (volatile struct plic_regs_t *)PLIC_REG;
	int i;

	/* Ensure that all interrupts are disabled initially */
	for (i = 0; i < PLIC_EN_SIZE; i++) {
80002118:	00000793          	li	a5,0
	volatile uint32_t *en = (volatile uint32_t *)PLIC_IRQ_EN;
8000211c:	0c002737          	lui	a4,0xc002
	for (i = 0; i < PLIC_EN_SIZE; i++) {
80002120:	0100006f          	j	80002130 <plic_init+0x20>
		*en = 0U;
80002124:	00072023          	sw	zero,0(a4) # c002000 <CONFIG_SRAM_SIZE+0xbf02000>
		en++;
80002128:	00470713          	addi	a4,a4,4
	for (i = 0; i < PLIC_EN_SIZE; i++) {
8000212c:	00178793          	addi	a5,a5,1
80002130:	00100693          	li	a3,1
80002134:	fef6d8e3          	bge	a3,a5,80002124 <plic_init+0x14>
	}

	/* Set priority of each interrupt line to 0 initially */
	for (i = 0; i < PLIC_IRQS; i++) {
80002138:	00000793          	li	a5,0
	volatile uint32_t *prio = (volatile uint32_t *)PLIC_PRIO;
8000213c:	0c000737          	lui	a4,0xc000
80002140:	0100006f          	j	80002150 <plic_init+0x40>
		*prio = 0U;
80002144:	00072023          	sw	zero,0(a4) # c000000 <CONFIG_SRAM_SIZE+0xbf00000>
		prio++;
80002148:	00470713          	addi	a4,a4,4
	for (i = 0; i < PLIC_IRQS; i++) {
8000214c:	00178793          	addi	a5,a5,1
80002150:	03300693          	li	a3,51
80002154:	fef6d8e3          	bge	a3,a5,80002144 <plic_init+0x34>
	}

	/* Set threshold priority to 0 */
	regs->threshold_prio = 0U;
80002158:	0c2007b7          	lui	a5,0xc200
8000215c:	0007a023          	sw	zero,0(a5) # c200000 <CONFIG_SRAM_SIZE+0xc100000>

	/* Setup IRQ handler for PLIC driver */
	IRQ_CONNECT(RISCV_MACHINE_EXT_IRQ,
80002160:	00000613          	li	a2,0
80002164:	00000593          	li	a1,0
80002168:	00b00513          	li	a0,11
8000216c:	b71ff0ef          	jal	ra,80001cdc <z_riscv_irq_priority_set>
		    plic_irq_handler,
		    NULL,
		    0);

	/* Enable IRQ for PLIC driver */
	irq_enable(RISCV_MACHINE_EXT_IRQ);
80002170:	00b00513          	li	a0,11
80002174:	b31ff0ef          	jal	ra,80001ca4 <arch_irq_enable>

	return 0;
}
80002178:	00000513          	li	a0,0
8000217c:	00c12083          	lw	ra,12(sp)
80002180:	01010113          	addi	sp,sp,16
80002184:	00008067          	ret

80002188 <plic_irq_handler>:
{
80002188:	ff010113          	addi	sp,sp,-16
8000218c:	00112623          	sw	ra,12(sp)
80002190:	00812423          	sw	s0,8(sp)
	irq = regs->claim_complete;
80002194:	0c2007b7          	lui	a5,0xc200
80002198:	0047a403          	lw	s0,4(a5) # c200004 <CONFIG_SRAM_SIZE+0xc100004>
	save_irq = irq;
8000219c:	800077b7          	lui	a5,0x80007
800021a0:	c087aa23          	sw	s0,-1004(a5) # 80006c14 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c15>
	if (irq == 0U || irq >= PLIC_IRQS)
800021a4:	fff40713          	addi	a4,s0,-1
800021a8:	03200793          	li	a5,50
800021ac:	04e7e263          	bltu	a5,a4,800021f0 <plic_irq_handler+0x68>
	irq += CONFIG_2ND_LVL_ISR_TBL_OFFSET;
800021b0:	00c40413          	addi	s0,s0,12
	ite->isr(ite->arg);
800021b4:	800067b7          	lui	a5,0x80006
800021b8:	00341413          	slli	s0,s0,0x3
800021bc:	38078793          	addi	a5,a5,896 # 80006380 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006381>
800021c0:	008787b3          	add	a5,a5,s0
800021c4:	0047a703          	lw	a4,4(a5)
800021c8:	0007a503          	lw	a0,0(a5)
800021cc:	000700e7          	jalr	a4
	regs->claim_complete = save_irq;
800021d0:	800077b7          	lui	a5,0x80007
800021d4:	c147a703          	lw	a4,-1004(a5) # 80006c14 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c15>
800021d8:	0c2007b7          	lui	a5,0xc200
800021dc:	00e7a223          	sw	a4,4(a5) # c200004 <CONFIG_SRAM_SIZE+0xc100004>
}
800021e0:	00c12083          	lw	ra,12(sp)
800021e4:	00812403          	lw	s0,8(sp)
800021e8:	01010113          	addi	sp,sp,16
800021ec:	00008067          	ret
		z_irq_spurious(NULL);
800021f0:	00000513          	li	a0,0
800021f4:	b69ff0ef          	jal	ra,80001d5c <z_irq_spurious>
800021f8:	fb9ff06f          	j	800021b0 <plic_irq_handler+0x28>

800021fc <riscv_plic_irq_enable>:
800021fc:	30047773          	csrrci	a4,mstatus,8
	en += (irq >> 5);
80002200:	00555693          	srli	a3,a0,0x5
80002204:	00269693          	slli	a3,a3,0x2
80002208:	0c0027b7          	lui	a5,0xc002
8000220c:	00d787b3          	add	a5,a5,a3
	*en |= (1 << (irq & 31));
80002210:	0007a683          	lw	a3,0(a5) # c002000 <CONFIG_SRAM_SIZE+0xbf02000>
80002214:	00100613          	li	a2,1
80002218:	00a61633          	sll	a2,a2,a0
8000221c:	00c6e6b3          	or	a3,a3,a2
80002220:	00d7a023          	sw	a3,0(a5)
			  :
			  : "r" (key & MSTATUS_IEN)
80002224:	00877793          	andi	a5,a4,8
	__asm__ volatile ("csrs mstatus, %0"
80002228:	3007a073          	csrs	mstatus,a5
}
8000222c:	00008067          	ret

80002230 <riscv_plic_set_priority>:
	if (priority > PLIC_MAX_PRIO)
80002230:	00700793          	li	a5,7
80002234:	00b7f463          	bgeu	a5,a1,8000223c <riscv_plic_set_priority+0xc>
		priority = PLIC_MAX_PRIO;
80002238:	00700593          	li	a1,7
	prio += irq;
8000223c:	00251513          	slli	a0,a0,0x2
80002240:	0c0007b7          	lui	a5,0xc000
80002244:	00a787b3          	add	a5,a5,a0
	*prio = priority;
80002248:	00b7a023          	sw	a1,0(a5) # c000000 <CONFIG_SRAM_SIZE+0xbf00000>
}
8000224c:	00008067          	ret

80002250 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
80002250:	ff010113          	addi	sp,sp,-16
80002254:	00112623          	sw	ra,12(sp)
80002258:	00812423          	sw	s0,8(sp)
8000225c:	00050413          	mv	s0,a0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
80002260:	00a00793          	li	a5,10
80002264:	02f50a63          	beq	a0,a5,80002298 <console_out+0x48>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
80002268:	0ff47593          	zext.b	a1,s0
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
8000226c:	80006537          	lui	a0,0x80006
80002270:	36850793          	addi	a5,a0,872 # 80006368 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006369>
80002274:	0087a783          	lw	a5,8(a5)
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
80002278:	0047a783          	lw	a5,4(a5)
8000227c:	36850513          	addi	a0,a0,872
80002280:	000780e7          	jalr	a5

	return c;
}
80002284:	00040513          	mv	a0,s0
80002288:	00c12083          	lw	ra,12(sp)
8000228c:	00812403          	lw	s0,8(sp)
80002290:	01010113          	addi	sp,sp,16
80002294:	00008067          	ret
	const struct uart_driver_api *api =
80002298:	80006537          	lui	a0,0x80006
8000229c:	36850793          	addi	a5,a0,872 # 80006368 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006369>
800022a0:	0087a783          	lw	a5,8(a5)
	api->poll_out(dev, out_char);
800022a4:	0047a783          	lw	a5,4(a5)
800022a8:	00d00593          	li	a1,13
800022ac:	36850513          	addi	a0,a0,872
800022b0:	000780e7          	jalr	a5
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
800022b4:	fb5ff06f          	j	80002268 <console_out+0x18>

800022b8 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
800022b8:	ff010113          	addi	sp,sp,-16
800022bc:	00112623          	sw	ra,12(sp)
800022c0:	00812423          	sw	s0,8(sp)
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
800022c4:	80002437          	lui	s0,0x80002
800022c8:	25040513          	addi	a0,s0,592 # 80002250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80002251>
800022cc:	c41ff0ef          	jal	ra,80001f0c <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
800022d0:	25040513          	addi	a0,s0,592
800022d4:	fe4fe0ef          	jal	ra,80000ab8 <__printk_hook_install>
#endif
}
800022d8:	00c12083          	lw	ra,12(sp)
800022dc:	00812403          	lw	s0,8(sp)
800022e0:	01010113          	addi	sp,sp,16
800022e4:	00008067          	ret

800022e8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
800022e8:	ff010113          	addi	sp,sp,-16
800022ec:	00112623          	sw	ra,12(sp)
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
800022f0:	80006537          	lui	a0,0x80006
800022f4:	36850513          	addi	a0,a0,872 # 80006368 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006369>
800022f8:	718000ef          	jal	ra,80002a10 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
800022fc:	00050c63          	beqz	a0,80002314 <uart_console_init+0x2c>
		return -ENODEV;
	}

	uart_console_hook_install();
80002300:	fb9ff0ef          	jal	ra,800022b8 <uart_console_hook_install>

	return 0;
80002304:	00000513          	li	a0,0
}
80002308:	00c12083          	lw	ra,12(sp)
8000230c:	01010113          	addi	sp,sp,16
80002310:	00008067          	ret
		return -ENODEV;
80002314:	fed00513          	li	a0,-19
80002318:	ff1ff06f          	j	80002308 <uart_console_init+0x20>

8000231c <clock_control_get_rate>:
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
8000231c:	00852783          	lw	a5,8(a0)
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
80002320:	00c7a783          	lw	a5,12(a5)
80002324:	00078e63          	beqz	a5,80002340 <clock_control_get_rate+0x24>
{
80002328:	ff010113          	addi	sp,sp,-16
8000232c:	00112623          	sw	ra,12(sp)
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
80002330:	000780e7          	jalr	a5
}
80002334:	00c12083          	lw	ra,12(sp)
80002338:	01010113          	addi	sp,sp,16
8000233c:	00008067          	ret
		return -ENOSYS;
80002340:	fa800513          	li	a0,-88
}
80002344:	00008067          	ret

80002348 <set_baud_rate>:
#endif
}

static void set_baud_rate(const struct device *dev, uint32_t baud_rate, uint32_t pclk)
{
	struct uart_ns16550_dev_data * const dev_data = dev->data;
80002348:	01052703          	lw	a4,16(a0)
	uint32_t divisor; /* baud rate divisor */
	uint8_t lcr_cache;

	if ((baud_rate != 0U) && (pclk != 0U)) {
8000234c:	08058263          	beqz	a1,800023d0 <set_baud_rate+0x88>
80002350:	08060063          	beqz	a2,800023d0 <set_baud_rate+0x88>
		/*
		 * calculate baud rate divisor. a variant of
		 * (uint32_t)(pclk / (16.0 * baud_rate) + 0.5)
		 */
		divisor = (pclk / (baud_rate << 4));
80002354:	00459793          	slli	a5,a1,0x4
80002358:	02f65633          	divu	a2,a2,a5
	return DEVICE_MMIO_GET(dev);
8000235c:	00452783          	lw	a5,4(a0)
80002360:	0007a803          	lw	a6,0(a5)
	return config->reg_interval;
80002364:	0107c683          	lbu	a3,16(a5)

		/* set the DLAB to access the baud rate divisor registers */
		lcr_cache = INBYTE(LCR(dev));
80002368:	00169793          	slli	a5,a3,0x1
8000236c:	00d787b3          	add	a5,a5,a3
80002370:	010787b3          	add	a5,a5,a6
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
80002374:	0007c683          	lbu	a3,0(a5)
80002378:	0ff6f813          	zext.b	a6,a3
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
8000237c:	0806e693          	ori	a3,a3,128
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
80002380:	00d78023          	sb	a3,0(a5)
		OUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));
80002384:	0ff67693          	zext.b	a3,a2
	const struct uart_ns16550_device_config *config = dev->config;
80002388:	00452783          	lw	a5,4(a0)
	return DEVICE_MMIO_GET(dev);
8000238c:	0007a783          	lw	a5,0(a5)
80002390:	00d78023          	sb	a3,0(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
80002394:	00865613          	srli	a2,a2,0x8
80002398:	0ff67613          	zext.b	a2,a2
	return DEVICE_MMIO_GET(dev);
8000239c:	00452783          	lw	a5,4(a0)
800023a0:	0007a683          	lw	a3,0(a5)
	return config->reg_interval;
800023a4:	0107c783          	lbu	a5,16(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
800023a8:	00d787b3          	add	a5,a5,a3
800023ac:	00c78023          	sb	a2,0(a5)
	return DEVICE_MMIO_GET(dev);
800023b0:	00452783          	lw	a5,4(a0)
800023b4:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
800023b8:	0107c683          	lbu	a3,16(a5)

		/* restore the DLAB to access the baud rate divisor registers */
		OUTBYTE(LCR(dev), lcr_cache);
800023bc:	00169793          	slli	a5,a3,0x1
800023c0:	00d787b3          	add	a5,a5,a3
800023c4:	00c787b3          	add	a5,a5,a2
800023c8:	01078023          	sb	a6,0(a5)

		dev_data->uart_config.baudrate = baud_rate;
800023cc:	00b72023          	sw	a1,0(a4)
	}
}
800023d0:	00008067          	ret

800023d4 <uart_ns16550_config_get>:

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_ns16550_config_get(const struct device *dev,
				   struct uart_config *cfg)
{
	struct uart_ns16550_dev_data *data = dev->data;
800023d4:	01052783          	lw	a5,16(a0)

	cfg->baudrate = data->uart_config.baudrate;
800023d8:	0007a703          	lw	a4,0(a5)
800023dc:	00e5a023          	sw	a4,0(a1)
	cfg->parity = data->uart_config.parity;
800023e0:	0047c703          	lbu	a4,4(a5)
800023e4:	00e58223          	sb	a4,4(a1)
	cfg->stop_bits = data->uart_config.stop_bits;
800023e8:	0057c703          	lbu	a4,5(a5)
800023ec:	00e582a3          	sb	a4,5(a1)
	cfg->data_bits = data->uart_config.data_bits;
800023f0:	0067c703          	lbu	a4,6(a5)
800023f4:	00e58323          	sb	a4,6(a1)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
800023f8:	0077c783          	lbu	a5,7(a5)
800023fc:	00f583a3          	sb	a5,7(a1)

	return 0;
}
80002400:	00000513          	li	a0,0
80002404:	00008067          	ret

80002408 <uart_ns16550_poll_in>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
80002408:	30047773          	csrrci	a4,mstatus,8
	return DEVICE_MMIO_GET(dev);
8000240c:	00452783          	lw	a5,4(a0)
80002410:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
80002414:	0107c683          	lbu	a3,16(a5)
{
	struct uart_ns16550_dev_data *data = dev->data;
	int ret = -1;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
80002418:	00269793          	slli	a5,a3,0x2
8000241c:	00d787b3          	add	a5,a5,a3
80002420:	00c787b3          	add	a5,a5,a2
	return *(volatile uint8_t *)addr;
80002424:	0007c783          	lbu	a5,0(a5)
80002428:	0017f793          	andi	a5,a5,1
8000242c:	00078e63          	beqz	a5,80002448 <uart_ns16550_poll_in+0x40>
80002430:	00064783          	lbu	a5,0(a2)
		/* got a character */
		*c = INBYTE(RDR(dev));
80002434:	00f58023          	sb	a5,0(a1)
		ret = 0;
80002438:	00000513          	li	a0,0
	__asm__ volatile ("csrs mstatus, %0"
8000243c:	00877793          	andi	a5,a4,8
80002440:	3007a073          	csrs	mstatus,a5
	}

	k_spin_unlock(&data->lock, key);

	return ret;
}
80002444:	00008067          	ret
	int ret = -1;
80002448:	fff00513          	li	a0,-1
8000244c:	ff1ff06f          	j	8000243c <uart_ns16550_poll_in+0x34>

80002450 <uart_ns16550_poll_out>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
80002450:	30047673          	csrrci	a2,mstatus,8
	return DEVICE_MMIO_GET(dev);
80002454:	00452783          	lw	a5,4(a0)
80002458:	0007a683          	lw	a3,0(a5)
	return config->reg_interval;
8000245c:	0107c703          	lbu	a4,16(a5)
					   unsigned char c)
{
	struct uart_ns16550_dev_data *data = dev->data;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0) {
80002460:	00271793          	slli	a5,a4,0x2
80002464:	00e787b3          	add	a5,a5,a4
80002468:	00d787b3          	add	a5,a5,a3
8000246c:	0007c783          	lbu	a5,0(a5)
80002470:	0207f793          	andi	a5,a5,32
80002474:	fe0780e3          	beqz	a5,80002454 <uart_ns16550_poll_out+0x4>
	*(volatile uint8_t *)addr = data;
80002478:	00b68023          	sb	a1,0(a3) # c0000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xc0000001>
	__asm__ volatile ("csrs mstatus, %0"
8000247c:	00867793          	andi	a5,a2,8
80002480:	3007a073          	csrs	mstatus,a5
	}

	OUTBYTE(THR(dev), c);

	k_spin_unlock(&data->lock, key);
}
80002484:	00008067          	ret

80002488 <uart_ns16550_err_check>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
80002488:	30047773          	csrrci	a4,mstatus,8
	return DEVICE_MMIO_GET(dev);
8000248c:	00452783          	lw	a5,4(a0)
80002490:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
80002494:	0107c683          	lbu	a3,16(a5)
 */
static int uart_ns16550_err_check(const struct device *dev)
{
	struct uart_ns16550_dev_data *data = dev->data;
	k_spinlock_key_t key = k_spin_lock(&data->lock);
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
80002498:	00269793          	slli	a5,a3,0x2
8000249c:	00d787b3          	add	a5,a5,a3
800024a0:	00c787b3          	add	a5,a5,a2
	return *(volatile uint8_t *)addr;
800024a4:	0007c503          	lbu	a0,0(a5)
800024a8:	01e57513          	andi	a0,a0,30
	__asm__ volatile ("csrs mstatus, %0"
800024ac:	00877793          	andi	a5,a4,8
800024b0:	3007a073          	csrs	mstatus,a5

	k_spin_unlock(&data->lock, key);

	return check >> 1;
}
800024b4:	40155513          	srai	a0,a0,0x1
800024b8:	00008067          	ret

800024bc <uart_ns16550_configure>:
{
800024bc:	fd010113          	addi	sp,sp,-48
800024c0:	02112623          	sw	ra,44(sp)
800024c4:	02812423          	sw	s0,40(sp)
800024c8:	02912223          	sw	s1,36(sp)
800024cc:	03212023          	sw	s2,32(sp)
800024d0:	01312e23          	sw	s3,28(sp)
800024d4:	01412c23          	sw	s4,24(sp)
800024d8:	00050413          	mv	s0,a0
800024dc:	00058493          	mv	s1,a1
	struct uart_ns16550_dev_data * const dev_data = dev->data;
800024e0:	01052a03          	lw	s4,16(a0)
	const struct uart_ns16550_device_config * const dev_cfg = dev->config;
800024e4:	00452983          	lw	s3,4(a0)
	uint32_t pclk = 0U;
800024e8:	00012623          	sw	zero,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
800024ec:	30047973          	csrrci	s2,mstatus,8
	if (dev_cfg->sys_clk_freq != 0U) {
800024f0:	0049a783          	lw	a5,4(s3)
800024f4:	04078063          	beqz	a5,80002534 <uart_ns16550_configure+0x78>
		pclk = dev_cfg->sys_clk_freq;
800024f8:	00f12623          	sw	a5,12(sp)
	set_baud_rate(dev, cfg->baudrate, pclk);
800024fc:	00c12603          	lw	a2,12(sp)
80002500:	0004a583          	lw	a1,0(s1)
80002504:	00040513          	mv	a0,s0
80002508:	e41ff0ef          	jal	ra,80002348 <set_baud_rate>
	switch (cfg->data_bits) {
8000250c:	0064c783          	lbu	a5,6(s1)
80002510:	00200713          	li	a4,2
80002514:	0ae78463          	beq	a5,a4,800025bc <uart_ns16550_configure+0x100>
80002518:	04f76263          	bltu	a4,a5,8000255c <uart_ns16550_configure+0xa0>
8000251c:	04078e63          	beqz	a5,80002578 <uart_ns16550_configure+0xbc>
80002520:	00100713          	li	a4,1
80002524:	02e79863          	bne	a5,a4,80002554 <uart_ns16550_configure+0x98>
		uart_cfg.data_bits = LCR_CS6;
80002528:	00100793          	li	a5,1
8000252c:	00f10523          	sb	a5,10(sp)
		break;
80002530:	04c0006f          	j	8000257c <uart_ns16550_configure+0xc0>
		if (!device_is_ready(dev_cfg->clock_dev)) {
80002534:	0089a503          	lw	a0,8(s3)
80002538:	4d8000ef          	jal	ra,80002a10 <z_device_is_ready>
8000253c:	18050a63          	beqz	a0,800026d0 <uart_ns16550_configure+0x214>
		clock_control_get_rate(dev_cfg->clock_dev, dev_cfg->clock_subsys,
80002540:	00c10613          	addi	a2,sp,12
80002544:	00c9a583          	lw	a1,12(s3)
80002548:	0089a503          	lw	a0,8(s3)
8000254c:	dd1ff0ef          	jal	ra,8000231c <clock_control_get_rate>
80002550:	fadff06f          	j	800024fc <uart_ns16550_configure+0x40>
	switch (cfg->data_bits) {
80002554:	f7a00513          	li	a0,-134
80002558:	03c0006f          	j	80002594 <uart_ns16550_configure+0xd8>
8000255c:	00300713          	li	a4,3
80002560:	00e79863          	bne	a5,a4,80002570 <uart_ns16550_configure+0xb4>
		uart_cfg.data_bits = LCR_CS8;
80002564:	00300793          	li	a5,3
80002568:	00f10523          	sb	a5,10(sp)
		break;
8000256c:	0100006f          	j	8000257c <uart_ns16550_configure+0xc0>
	switch (cfg->data_bits) {
80002570:	f7a00513          	li	a0,-134
80002574:	0200006f          	j	80002594 <uart_ns16550_configure+0xd8>
		uart_cfg.data_bits = LCR_CS5;
80002578:	00010523          	sb	zero,10(sp)
	switch (cfg->stop_bits) {
8000257c:	0054c783          	lbu	a5,5(s1)
80002580:	00100713          	li	a4,1
80002584:	04e78263          	beq	a5,a4,800025c8 <uart_ns16550_configure+0x10c>
80002588:	00300713          	li	a4,3
8000258c:	04e78c63          	beq	a5,a4,800025e4 <uart_ns16550_configure+0x128>
80002590:	f7a00513          	li	a0,-134
			  : "r" (key & MSTATUS_IEN)
80002594:	00897913          	andi	s2,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80002598:	30092073          	csrs	mstatus,s2
};
8000259c:	02c12083          	lw	ra,44(sp)
800025a0:	02812403          	lw	s0,40(sp)
800025a4:	02412483          	lw	s1,36(sp)
800025a8:	02012903          	lw	s2,32(sp)
800025ac:	01c12983          	lw	s3,28(sp)
800025b0:	01812a03          	lw	s4,24(sp)
800025b4:	03010113          	addi	sp,sp,48
800025b8:	00008067          	ret
		uart_cfg.data_bits = LCR_CS7;
800025bc:	00200793          	li	a5,2
800025c0:	00f10523          	sb	a5,10(sp)
		break;
800025c4:	fb9ff06f          	j	8000257c <uart_ns16550_configure+0xc0>
		uart_cfg.stop_bits = LCR_1_STB;
800025c8:	000104a3          	sb	zero,9(sp)
	switch (cfg->parity) {
800025cc:	0044c783          	lbu	a5,4(s1)
800025d0:	02078063          	beqz	a5,800025f0 <uart_ns16550_configure+0x134>
800025d4:	00200713          	li	a4,2
800025d8:	0ee78063          	beq	a5,a4,800026b8 <uart_ns16550_configure+0x1fc>
800025dc:	f7a00513          	li	a0,-134
800025e0:	fb5ff06f          	j	80002594 <uart_ns16550_configure+0xd8>
		uart_cfg.stop_bits = LCR_2_STB;
800025e4:	00400793          	li	a5,4
800025e8:	00f104a3          	sb	a5,9(sp)
		break;
800025ec:	fe1ff06f          	j	800025cc <uart_ns16550_configure+0x110>
		uart_cfg.parity = LCR_PDIS;
800025f0:	00010423          	sb	zero,8(sp)
	dev_data->uart_config = *cfg;
800025f4:	0004a783          	lw	a5,0(s1)
800025f8:	00fa2023          	sw	a5,0(s4)
800025fc:	0044a783          	lw	a5,4(s1)
80002600:	00fa2223          	sw	a5,4(s4)
	OUTBYTE(LCR(dev),
80002604:	00a14783          	lbu	a5,10(sp)
80002608:	00914683          	lbu	a3,9(sp)
8000260c:	00814703          	lbu	a4,8(sp)
80002610:	00d7e7b3          	or	a5,a5,a3
80002614:	00f76733          	or	a4,a4,a5
	return DEVICE_MMIO_GET(dev);
80002618:	00442783          	lw	a5,4(s0)
8000261c:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
80002620:	0107c683          	lbu	a3,16(a5)
	OUTBYTE(LCR(dev),
80002624:	00169793          	slli	a5,a3,0x1
80002628:	00d787b3          	add	a5,a5,a3
8000262c:	00c787b3          	add	a5,a5,a2
	*(volatile uint8_t *)addr = data;
80002630:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
80002634:	00442783          	lw	a5,4(s0)
80002638:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
8000263c:	0107c783          	lbu	a5,16(a5)
	OUTBYTE(MDC(dev), mdc);
80002640:	00279793          	slli	a5,a5,0x2
80002644:	00e787b3          	add	a5,a5,a4
80002648:	00b00713          	li	a4,11
8000264c:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
80002650:	00442783          	lw	a5,4(s0)
80002654:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
80002658:	0107c783          	lbu	a5,16(a5)
	OUTBYTE(FCR(dev),
8000265c:	00179793          	slli	a5,a5,0x1
80002660:	00e787b3          	add	a5,a5,a4
80002664:	f8700713          	li	a4,-121
80002668:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
8000266c:	00442783          	lw	a5,4(s0)
80002670:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
80002674:	0107c783          	lbu	a5,16(a5)
	if ((INBYTE(IIR(dev)) & IIR_FE) == IIR_FE) {
80002678:	00179793          	slli	a5,a5,0x1
8000267c:	00e787b3          	add	a5,a5,a4
	return *(volatile uint8_t *)addr;
80002680:	0007c783          	lbu	a5,0(a5)
80002684:	0c07f793          	andi	a5,a5,192
80002688:	0c000713          	li	a4,192
8000268c:	02e78c63          	beq	a5,a4,800026c4 <uart_ns16550_configure+0x208>
		dev_data->fifo_size = 1;
80002690:	00100793          	li	a5,1
80002694:	00fa0423          	sb	a5,8(s4)
	const struct uart_ns16550_device_config *config = dev->config;
80002698:	00442703          	lw	a4,4(s0)
	return config->reg_interval;
8000269c:	01074783          	lbu	a5,16(a4)
	return DEVICE_MMIO_GET(dev);
800026a0:	00072703          	lw	a4,0(a4)
800026a4:	00074683          	lbu	a3,0(a4)
	OUTBYTE(IER(dev), 0x00);
800026a8:	00e787b3          	add	a5,a5,a4
	*(volatile uint8_t *)addr = data;
800026ac:	00078023          	sb	zero,0(a5)
	int ret = 0;
800026b0:	00000513          	li	a0,0
}
800026b4:	ee1ff06f          	j	80002594 <uart_ns16550_configure+0xd8>
		uart_cfg.parity = LCR_EPS;
800026b8:	01000793          	li	a5,16
800026bc:	00f10423          	sb	a5,8(sp)
		break;
800026c0:	f35ff06f          	j	800025f4 <uart_ns16550_configure+0x138>
		dev_data->fifo_size = 16;
800026c4:	01000793          	li	a5,16
800026c8:	00fa0423          	sb	a5,8(s4)
800026cc:	fcdff06f          	j	80002698 <uart_ns16550_configure+0x1dc>
			ret = -EINVAL;
800026d0:	fea00513          	li	a0,-22
800026d4:	ec1ff06f          	j	80002594 <uart_ns16550_configure+0xd8>

800026d8 <uart_ns16550_init>:
{
800026d8:	ff010113          	addi	sp,sp,-16
800026dc:	00112623          	sw	ra,12(sp)
	ret = uart_ns16550_configure(dev, &data->uart_config);
800026e0:	01052583          	lw	a1,16(a0)
800026e4:	dd9ff0ef          	jal	ra,800024bc <uart_ns16550_configure>
}
800026e8:	00c12083          	lw	ra,12(sp)
800026ec:	01010113          	addi	sp,sp,16
800026f0:	00008067          	ret

800026f4 <get_hart_mtimecmp>:
const int32_t z_sys_timer_irq_for_test = TIMER_IRQN;
#endif

static uint64_t get_hart_mtimecmp(void)
{
	return MTIMECMP_REG + (_current_cpu->id * 8);
800026f4:	800077b7          	lui	a5,0x80007
800026f8:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800026fc:	0147c783          	lbu	a5,20(a5)
80002700:	00379793          	slli	a5,a5,0x3
}
80002704:	02004537          	lui	a0,0x2004
80002708:	00a78533          	add	a0,a5,a0
8000270c:	00000593          	li	a1,0
80002710:	00008067          	ret

80002714 <set_mtimecmp>:

static void set_mtimecmp(uint64_t time)
{
80002714:	ff010113          	addi	sp,sp,-16
80002718:	00112623          	sw	ra,12(sp)
8000271c:	00812423          	sw	s0,8(sp)
80002720:	00912223          	sw	s1,4(sp)
80002724:	00050493          	mv	s1,a0
80002728:	00058413          	mv	s0,a1
#ifdef CONFIG_64BIT
	*(volatile uint64_t *)get_hart_mtimecmp() = time;
#else
	volatile uint32_t *r = (uint32_t *)(uint32_t)get_hart_mtimecmp();
8000272c:	fc9ff0ef          	jal	ra,800026f4 <get_hart_mtimecmp>
	 * but are NOT internally latched for multiword transfers.  So
	 * we have to be careful about sequencing to avoid triggering
	 * spurious interrupts: always set the high word to a max
	 * value first.
	 */
	r[1] = 0xffffffff;
80002730:	fff00793          	li	a5,-1
80002734:	00f52223          	sw	a5,4(a0) # 2004004 <CONFIG_SRAM_SIZE+0x1f04004>
	r[0] = (uint32_t)time;
80002738:	00952023          	sw	s1,0(a0)
	r[1] = (uint32_t)(time >> 32);
8000273c:	00852223          	sw	s0,4(a0)
#endif
}
80002740:	00c12083          	lw	ra,12(sp)
80002744:	00812403          	lw	s0,8(sp)
80002748:	00412483          	lw	s1,4(sp)
8000274c:	01010113          	addi	sp,sp,16
80002750:	00008067          	ret

80002754 <mtime>:
	volatile uint32_t *r = (uint32_t *)MTIME_REG;
	uint32_t lo, hi;

	/* Likewise, must guard against rollover when reading */
	do {
		hi = r[1];
80002754:	0200c7b7          	lui	a5,0x200c
80002758:	ffc7a583          	lw	a1,-4(a5) # 200bffc <CONFIG_SRAM_SIZE+0x1f0bffc>
		lo = r[0];
8000275c:	ff87a503          	lw	a0,-8(a5)
	} while (r[1] != hi);
80002760:	ffc7a783          	lw	a5,-4(a5)
80002764:	feb798e3          	bne	a5,a1,80002754 <mtime>

	return (((uint64_t)hi) << 32) | lo;
#endif
}
80002768:	00008067          	ret

8000276c <sys_clock_driver_init>:
{
	return (mtime() << CONFIG_RISCV_MACHINE_TIMER_SYSTEM_CLOCK_DIVIDER);
}

static int sys_clock_driver_init(const struct device *dev)
{
8000276c:	ff010113          	addi	sp,sp,-16
80002770:	00112623          	sw	ra,12(sp)
	ARG_UNUSED(dev);

	IRQ_CONNECT(TIMER_IRQN, 0, timer_isr, NULL, 0);
80002774:	00000613          	li	a2,0
80002778:	00000593          	li	a1,0
8000277c:	00700513          	li	a0,7
80002780:	d5cff0ef          	jal	ra,80001cdc <z_riscv_irq_priority_set>
	last_count = mtime();
80002784:	fd1ff0ef          	jal	ra,80002754 <mtime>
80002788:	00050793          	mv	a5,a0
8000278c:	80007737          	lui	a4,0x80007
80002790:	bea72823          	sw	a0,-1040(a4) # 80006bf0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006bf1>
80002794:	beb72a23          	sw	a1,-1036(a4)
	set_mtimecmp(last_count + CYC_PER_TICK);
80002798:	10050513          	addi	a0,a0,256
8000279c:	00f537b3          	sltu	a5,a0,a5
800027a0:	00b785b3          	add	a1,a5,a1
800027a4:	f71ff0ef          	jal	ra,80002714 <set_mtimecmp>
	irq_enable(TIMER_IRQN);
800027a8:	00700513          	li	a0,7
800027ac:	cf8ff0ef          	jal	ra,80001ca4 <arch_irq_enable>
	return 0;
}
800027b0:	00000513          	li	a0,0
800027b4:	00c12083          	lw	ra,12(sp)
800027b8:	01010113          	addi	sp,sp,16
800027bc:	00008067          	ret

800027c0 <timer_isr>:
{
800027c0:	ff010113          	addi	sp,sp,-16
800027c4:	00112623          	sw	ra,12(sp)
800027c8:	00812423          	sw	s0,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
800027cc:	30047473          	csrrci	s0,mstatus,8
	uint64_t now = mtime();
800027d0:	f85ff0ef          	jal	ra,80002754 <mtime>
800027d4:	00050693          	mv	a3,a0
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
800027d8:	80007637          	lui	a2,0x80007
800027dc:	bf062783          	lw	a5,-1040(a2) # 80006bf0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006bf1>
800027e0:	bf462703          	lw	a4,-1036(a2)
800027e4:	40f507b3          	sub	a5,a0,a5
800027e8:	00f53533          	sltu	a0,a0,a5
800027ec:	40e58733          	sub	a4,a1,a4
800027f0:	40a70733          	sub	a4,a4,a0
800027f4:	01871713          	slli	a4,a4,0x18
800027f8:	0087d513          	srli	a0,a5,0x8
800027fc:	00a76533          	or	a0,a4,a0
	last_count = now;
80002800:	bed62823          	sw	a3,-1040(a2)
80002804:	beb62a23          	sw	a1,-1036(a2)
	__asm__ volatile ("csrs mstatus, %0"
80002808:	00847413          	andi	s0,s0,8
8000280c:	30042073          	csrs	mstatus,s0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
80002810:	649010ef          	jal	ra,80004658 <sys_clock_announce>
}
80002814:	00c12083          	lw	ra,12(sp)
80002818:	00812403          	lw	s0,8(sp)
8000281c:	01010113          	addi	sp,sp,16
80002820:	00008067          	ret

80002824 <sys_clock_set_timeout>:
	if (idle) {
80002824:	0c059c63          	bnez	a1,800028fc <sys_clock_set_timeout+0xd8>
{
80002828:	ff010113          	addi	sp,sp,-16
8000282c:	00112623          	sw	ra,12(sp)
80002830:	00812423          	sw	s0,8(sp)
80002834:	00912223          	sw	s1,4(sp)
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
80002838:	fff00793          	li	a5,-1
8000283c:	04f50a63          	beq	a0,a5,80002890 <sys_clock_set_timeout+0x6c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
80002840:	00100793          	li	a5,1
80002844:	04a7dc63          	bge	a5,a0,8000289c <sys_clock_set_timeout+0x78>
80002848:	008007b7          	lui	a5,0x800
8000284c:	ffe78793          	addi	a5,a5,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
80002850:	04a7ca63          	blt	a5,a0,800028a4 <sys_clock_set_timeout+0x80>
80002854:	fff50413          	addi	s0,a0,-1
	__asm__ volatile ("csrrc %0, mstatus, %1"
80002858:	300474f3          	csrrci	s1,mstatus,8
	uint64_t now = mtime();
8000285c:	ef9ff0ef          	jal	ra,80002754 <mtime>
	uint32_t adj, cyc = ticks * CYC_PER_TICK;
80002860:	00841793          	slli	a5,s0,0x8
	adj = (uint32_t)(now - last_count) + (CYC_PER_TICK - 1);
80002864:	800076b7          	lui	a3,0x80007
80002868:	bf06a703          	lw	a4,-1040(a3) # 80006bf0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006bf1>
8000286c:	bf46a583          	lw	a1,-1036(a3)
80002870:	40e50633          	sub	a2,a0,a4
80002874:	0ff60613          	addi	a2,a2,255
	if (cyc <= MAX_CYC - adj) {
80002878:	800006b7          	lui	a3,0x80000
8000287c:	fff6c693          	not	a3,a3
80002880:	40c686b3          	sub	a3,a3,a2
80002884:	02f6e663          	bltu	a3,a5,800028b0 <sys_clock_set_timeout+0x8c>
		cyc += adj;
80002888:	00c787b3          	add	a5,a5,a2
8000288c:	02c0006f          	j	800028b8 <sys_clock_set_timeout+0x94>
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
80002890:	00800537          	lui	a0,0x800
80002894:	ffe50513          	addi	a0,a0,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
80002898:	fb1ff06f          	j	80002848 <sys_clock_set_timeout+0x24>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
8000289c:	00000413          	li	s0,0
800028a0:	fb9ff06f          	j	80002858 <sys_clock_set_timeout+0x34>
800028a4:	00800537          	lui	a0,0x800
800028a8:	ffe50413          	addi	s0,a0,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
800028ac:	fadff06f          	j	80002858 <sys_clock_set_timeout+0x34>
		cyc = MAX_CYC;
800028b0:	800007b7          	lui	a5,0x80000
800028b4:	fff7c793          	not	a5,a5
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
800028b8:	f007f793          	andi	a5,a5,-256
	if ((int32_t)(cyc + last_count - now) < MIN_DELAY) {
800028bc:	00f706b3          	add	a3,a4,a5
800028c0:	40a686b3          	sub	a3,a3,a0
800028c4:	06300613          	li	a2,99
800028c8:	00d64463          	blt	a2,a3,800028d0 <sys_clock_set_timeout+0xac>
		cyc += CYC_PER_TICK;
800028cc:	10078793          	addi	a5,a5,256 # 80000100 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000101>
	set_mtimecmp(cyc + last_count);
800028d0:	00e78533          	add	a0,a5,a4
800028d4:	00f537b3          	sltu	a5,a0,a5
800028d8:	00b785b3          	add	a1,a5,a1
800028dc:	e39ff0ef          	jal	ra,80002714 <set_mtimecmp>
	__asm__ volatile ("csrs mstatus, %0"
800028e0:	0084f493          	andi	s1,s1,8
800028e4:	3004a073          	csrs	mstatus,s1
}
800028e8:	00c12083          	lw	ra,12(sp)
800028ec:	00812403          	lw	s0,8(sp)
800028f0:	00412483          	lw	s1,4(sp)
800028f4:	01010113          	addi	sp,sp,16
800028f8:	00008067          	ret
800028fc:	00008067          	ret

80002900 <sys_clock_elapsed>:
{
80002900:	ff010113          	addi	sp,sp,-16
80002904:	00112623          	sw	ra,12(sp)
80002908:	00812423          	sw	s0,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000290c:	30047473          	csrrci	s0,mstatus,8
	uint32_t ret = ((uint32_t)mtime() - (uint32_t)last_count) / CYC_PER_TICK;
80002910:	e45ff0ef          	jal	ra,80002754 <mtime>
80002914:	800077b7          	lui	a5,0x80007
80002918:	bf07a783          	lw	a5,-1040(a5) # 80006bf0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006bf1>
8000291c:	40f50533          	sub	a0,a0,a5
80002920:	00855513          	srli	a0,a0,0x8
	__asm__ volatile ("csrs mstatus, %0"
80002924:	00847413          	andi	s0,s0,8
80002928:	30042073          	csrs	mstatus,s0
}
8000292c:	00c12083          	lw	ra,12(sp)
80002930:	00812403          	lw	s0,8(sp)
80002934:	01010113          	addi	sp,sp,16
80002938:	00008067          	ret

8000293c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
8000293c:	80006737          	lui	a4,0x80006
80002940:	36870713          	addi	a4,a4,872 # 80006368 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006369>

	while (dev < __device_end) {
80002944:	0080006f          	j	8000294c <z_device_state_init+0x10>
		z_object_init(dev);
		++dev;
80002948:	01870713          	addi	a4,a4,24
	while (dev < __device_end) {
8000294c:	800067b7          	lui	a5,0x80006
80002950:	38078793          	addi	a5,a5,896 # 80006380 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006381>
80002954:	fef76ae3          	bltu	a4,a5,80002948 <z_device_state_init+0xc>
	}
}
80002958:	00008067          	ret

8000295c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
8000295c:	ff010113          	addi	sp,sp,-16
80002960:	00112623          	sw	ra,12(sp)
80002964:	00812423          	sw	s0,8(sp)
80002968:	00912223          	sw	s1,4(sp)
8000296c:	01212023          	sw	s2,0(sp)
80002970:	00050913          	mv	s2,a0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
80002974:	800077b7          	lui	a5,0x80007
80002978:	00251713          	slli	a4,a0,0x2
8000297c:	99478793          	addi	a5,a5,-1644 # 80006994 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006995>
80002980:	00e787b3          	add	a5,a5,a4
80002984:	0007a403          	lw	s0,0(a5)
80002988:	0280006f          	j	800029b0 <z_sys_init_run_level+0x54>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
8000298c:	40a00533          	neg	a0,a0
80002990:	0580006f          	j	800029e8 <z_sys_init_run_level+0x8c>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
80002994:	00c4a783          	lw	a5,12(s1)
80002998:	00a78023          	sb	a0,0(a5)
			}
			dev->state->initialized = true;
8000299c:	00c4a703          	lw	a4,12(s1)
800029a0:	00075783          	lhu	a5,0(a4)
800029a4:	1007e793          	ori	a5,a5,256
800029a8:	00f71023          	sh	a5,0(a4)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
800029ac:	00840413          	addi	s0,s0,8
800029b0:	00190713          	addi	a4,s2,1
800029b4:	800077b7          	lui	a5,0x80007
800029b8:	00271713          	slli	a4,a4,0x2
800029bc:	99478793          	addi	a5,a5,-1644 # 80006994 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006995>
800029c0:	00e787b3          	add	a5,a5,a4
800029c4:	0007a783          	lw	a5,0(a5)
800029c8:	02f47863          	bgeu	s0,a5,800029f8 <z_sys_init_run_level+0x9c>
		const struct device *dev = entry->dev;
800029cc:	00442483          	lw	s1,4(s0)
		int rc = entry->init(dev);
800029d0:	00042783          	lw	a5,0(s0)
800029d4:	00048513          	mv	a0,s1
800029d8:	000780e7          	jalr	a5
		if (dev != NULL) {
800029dc:	fc0488e3          	beqz	s1,800029ac <z_sys_init_run_level+0x50>
			if (rc != 0) {
800029e0:	fa050ee3          	beqz	a0,8000299c <z_sys_init_run_level+0x40>
				if (rc < 0) {
800029e4:	fa0544e3          	bltz	a0,8000298c <z_sys_init_run_level+0x30>
				if (rc > UINT8_MAX) {
800029e8:	0ff00793          	li	a5,255
800029ec:	faa7d4e3          	bge	a5,a0,80002994 <z_sys_init_run_level+0x38>
					rc = UINT8_MAX;
800029f0:	0ff00513          	li	a0,255
800029f4:	fa1ff06f          	j	80002994 <z_sys_init_run_level+0x38>
		}
	}
}
800029f8:	00c12083          	lw	ra,12(sp)
800029fc:	00812403          	lw	s0,8(sp)
80002a00:	00412483          	lw	s1,4(sp)
80002a04:	00012903          	lw	s2,0(sp)
80002a08:	01010113          	addi	sp,sp,16
80002a0c:	00008067          	ret

80002a10 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
80002a10:	00050e63          	beqz	a0,80002a2c <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
80002a14:	00c52783          	lw	a5,12(a0)
80002a18:	0007a503          	lw	a0,0(a5)
80002a1c:	1ff57513          	andi	a0,a0,511
80002a20:	f0050513          	addi	a0,a0,-256
80002a24:	00153513          	seqz	a0,a0
80002a28:	00008067          	ret
		return false;
80002a2c:	00000513          	li	a0,0
}
80002a30:	00008067          	ret

80002a34 <arch_system_halt>:
	__asm__ volatile ("csrrc %0, mstatus, %1"
80002a34:	300477f3          	csrrci	a5,mstatus,8
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
80002a38:	0000006f          	j	80002a38 <arch_system_halt+0x4>

80002a3c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
80002a3c:	ff010113          	addi	sp,sp,-16
80002a40:	00112623          	sw	ra,12(sp)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
80002a44:	ff1ff0ef          	jal	ra,80002a34 <arch_system_halt>

80002a48 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
80002a48:	fe010113          	addi	sp,sp,-32
80002a4c:	00112e23          	sw	ra,28(sp)
80002a50:	00812c23          	sw	s0,24(sp)
80002a54:	00912a23          	sw	s1,20(sp)
80002a58:	01212823          	sw	s2,16(sp)
80002a5c:	01312623          	sw	s3,12(sp)
80002a60:	00050913          	mv	s2,a0
80002a64:	00058993          	mv	s3,a1
80002a68:	300474f3          	csrrci	s1,mstatus,8
	return z_impl_z_current_get();
80002a6c:	6fc010ef          	jal	ra,80004168 <z_impl_z_current_get>
80002a70:	00050413          	mv	s0,a0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
80002a74:	00098593          	mv	a1,s3
80002a78:	00090513          	mv	a0,s2
80002a7c:	fc1ff0ef          	jal	ra,80002a3c <k_sys_fatal_error_handler>
			  : "r" (key & MSTATUS_IEN)
80002a80:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80002a84:	3004a073          	csrs	mstatus,s1
	z_impl_k_thread_abort(thread);
80002a88:	00040513          	mv	a0,s0
80002a8c:	790010ef          	jal	ra,8000421c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
80002a90:	01c12083          	lw	ra,28(sp)
80002a94:	01812403          	lw	s0,24(sp)
80002a98:	01412483          	lw	s1,20(sp)
80002a9c:	01012903          	lw	s2,16(sp)
80002aa0:	00c12983          	lw	s3,12(sp)
80002aa4:	02010113          	addi	sp,sp,32
80002aa8:	00008067          	ret

80002aac <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
80002aac:	fd010113          	addi	sp,sp,-48
80002ab0:	02112623          	sw	ra,44(sp)
80002ab4:	02812423          	sw	s0,40(sp)
80002ab8:	02912223          	sw	s1,36(sp)
80002abc:	03212023          	sw	s2,32(sp)
80002ac0:	01312e23          	sw	s3,28(sp)
80002ac4:	00050413          	mv	s0,a0
	struct k_thread *thread = &z_idle_threads[i];
80002ac8:	00451913          	slli	s2,a0,0x4
80002acc:	00a909b3          	add	s3,s2,a0
80002ad0:	00399993          	slli	s3,s3,0x3
80002ad4:	800074b7          	lui	s1,0x80007
80002ad8:	c3848493          	addi	s1,s1,-968 # 80006c38 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c39>
80002adc:	009989b3          	add	s3,s3,s1
	k_thread_stack_t *stack = z_idle_stacks[i];
80002ae0:	00a51513          	slli	a0,a0,0xa
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
80002ae4:	00141693          	slli	a3,s0,0x1
80002ae8:	008686b3          	add	a3,a3,s0
80002aec:	00369693          	slli	a3,a3,0x3
	z_setup_new_thread(thread, stack,
80002af0:	00012223          	sw	zero,4(sp)
80002af4:	00100793          	li	a5,1
80002af8:	00f12023          	sw	a5,0(sp)
80002afc:	00f00893          	li	a7,15
80002b00:	00000813          	li	a6,0
80002b04:	00000793          	li	a5,0
80002b08:	80007737          	lui	a4,0x80007
80002b0c:	d4870713          	addi	a4,a4,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80002b10:	00d70733          	add	a4,a4,a3
80002b14:	800036b7          	lui	a3,0x80003
80002b18:	06468693          	addi	a3,a3,100 # 80003064 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003065>
80002b1c:	40000613          	li	a2,1024
80002b20:	800085b7          	lui	a1,0x80008
80002b24:	d7058593          	addi	a1,a1,-656 # 80007d70 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d71>
80002b28:	00a585b3          	add	a1,a1,a0
80002b2c:	00098513          	mv	a0,s3
80002b30:	368000ef          	jal	ra,80002e98 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
80002b34:	00d9c783          	lbu	a5,13(s3)
80002b38:	ffb7f793          	andi	a5,a5,-5
80002b3c:	00f986a3          	sb	a5,13(s3)
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
80002b40:	02c12083          	lw	ra,44(sp)
80002b44:	02812403          	lw	s0,40(sp)
80002b48:	02412483          	lw	s1,36(sp)
80002b4c:	02012903          	lw	s2,32(sp)
80002b50:	01c12983          	lw	s3,28(sp)
80002b54:	03010113          	addi	sp,sp,48
80002b58:	00008067          	ret

80002b5c <bg_thread_main>:
{
80002b5c:	ff010113          	addi	sp,sp,-16
80002b60:	00112623          	sw	ra,12(sp)
	z_sys_post_kernel = true;
80002b64:	800077b7          	lui	a5,0x80007
80002b68:	00100713          	li	a4,1
80002b6c:	c2e78823          	sb	a4,-976(a5) # 80006c30 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c31>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
80002b70:	00200513          	li	a0,2
80002b74:	de9ff0ef          	jal	ra,8000295c <z_sys_init_run_level>
	boot_banner();
80002b78:	431010ef          	jal	ra,800047a8 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
80002b7c:	00300513          	li	a0,3
80002b80:	dddff0ef          	jal	ra,8000295c <z_sys_init_run_level>
	z_init_static_threads();
80002b84:	3e8000ef          	jal	ra,80002f6c <z_init_static_threads>
	main();
80002b88:	ed1fd0ef          	jal	ra,80000a58 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
80002b8c:	800077b7          	lui	a5,0x80007
80002b90:	cc078793          	addi	a5,a5,-832 # 80006cc0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006cc1>
80002b94:	00c7c703          	lbu	a4,12(a5)
80002b98:	ffe77713          	andi	a4,a4,-2
80002b9c:	00e78623          	sb	a4,12(a5)
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
80002ba0:	00c12083          	lw	ra,12(sp)
80002ba4:	01010113          	addi	sp,sp,16
80002ba8:	00008067          	ret

80002bac <z_swap_unlocked>:
{
	return do_swap(key.key, lock, true);
}

static inline void z_swap_unlocked(void)
{
80002bac:	ff010113          	addi	sp,sp,-16
80002bb0:	00112623          	sw	ra,12(sp)
80002bb4:	00812423          	sw	s0,8(sp)
80002bb8:	00912223          	sw	s1,4(sp)
80002bbc:	01212023          	sw	s2,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80002bc0:	300474f3          	csrrci	s1,mstatus,8
	old_thread = _current;
80002bc4:	800077b7          	lui	a5,0x80007
80002bc8:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80002bcc:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
80002bd0:	ff500793          	li	a5,-11
80002bd4:	06f92c23          	sw	a5,120(s2)
80002bd8:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80002bdc:	141000ef          	jal	ra,8000351c <z_swap_next_thread>
	if (new_thread != old_thread) {
80002be0:	02a90263          	beq	s2,a0,80002c04 <z_swap_unlocked+0x58>
80002be4:	00050413          	mv	s0,a0
		_current_cpu->current = new_thread;
80002be8:	800077b7          	lui	a5,0x80007
80002bec:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80002bf0:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
80002bf4:	7e8000ef          	jal	ra,800033dc <z_reset_time_slice>
	struct k_thread *old = CONTAINER_OF(switched_from, struct k_thread,
					    switch_handle);
#ifdef CONFIG_RISCV_ALWAYS_SWITCH_THROUGH_ECALL
	arch_syscall_invoke2((uintptr_t)new, (uintptr_t)old, RV_ECALL_SCHEDULE);
#else
	z_riscv_switch(new, old);
80002bf8:	00090593          	mv	a1,s2
80002bfc:	07c42503          	lw	a0,124(s0)
80002c00:	a04ff0ef          	jal	ra,80001e04 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
80002c04:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80002c08:	3004a073          	csrs	mstatus,s1
	(void) do_swap(arch_irq_lock(), NULL, true);
}
80002c0c:	00c12083          	lw	ra,12(sp)
80002c10:	00812403          	lw	s0,8(sp)
80002c14:	00412483          	lw	s1,4(sp)
80002c18:	00012903          	lw	s2,0(sp)
80002c1c:	01010113          	addi	sp,sp,16
80002c20:	00008067          	ret

80002c24 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
80002c24:	ff010113          	addi	sp,sp,-16
80002c28:	00112623          	sw	ra,12(sp)
	/*
	 * Context switch to main task (entry function is _main()): the
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
80002c2c:	f81ff0ef          	jal	ra,80002bac <z_swap_unlocked>

80002c30 <z_early_memset>:
{
80002c30:	ff010113          	addi	sp,sp,-16
80002c34:	00112623          	sw	ra,12(sp)

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
80002c38:	dc1fd0ef          	jal	ra,800009f8 <memset>
}
80002c3c:	00c12083          	lw	ra,12(sp)
80002c40:	01010113          	addi	sp,sp,16
80002c44:	00008067          	ret

80002c48 <z_bss_zero>:
{
80002c48:	ff010113          	addi	sp,sp,-16
80002c4c:	00112623          	sw	ra,12(sp)
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
80002c50:	80007537          	lui	a0,0x80007
80002c54:	bf050613          	addi	a2,a0,-1040 # 80006bf0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006bf1>
80002c58:	800077b7          	lui	a5,0x80007
80002c5c:	d6c78793          	addi	a5,a5,-660 # 80006d6c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d6d>
80002c60:	40c78633          	sub	a2,a5,a2
80002c64:	00000593          	li	a1,0
80002c68:	bf050513          	addi	a0,a0,-1040
80002c6c:	fc5ff0ef          	jal	ra,80002c30 <z_early_memset>
}
80002c70:	00c12083          	lw	ra,12(sp)
80002c74:	01010113          	addi	sp,sp,16
80002c78:	00008067          	ret

80002c7c <z_init_cpu>:
{
80002c7c:	ff010113          	addi	sp,sp,-16
80002c80:	00112623          	sw	ra,12(sp)
80002c84:	00812423          	sw	s0,8(sp)
80002c88:	00050413          	mv	s0,a0
	init_idle_thread(id);
80002c8c:	e21ff0ef          	jal	ra,80002aac <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
80002c90:	00441793          	slli	a5,s0,0x4
80002c94:	008787b3          	add	a5,a5,s0
80002c98:	00379793          	slli	a5,a5,0x3
80002c9c:	80007737          	lui	a4,0x80007
80002ca0:	c3870713          	addi	a4,a4,-968 # 80006c38 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c39>
80002ca4:	00e787b3          	add	a5,a5,a4
80002ca8:	80007737          	lui	a4,0x80007
80002cac:	d4870713          	addi	a4,a4,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80002cb0:	00141693          	slli	a3,s0,0x1
80002cb4:	00868633          	add	a2,a3,s0
80002cb8:	00361613          	slli	a2,a2,0x3
80002cbc:	00c70633          	add	a2,a4,a2
80002cc0:	00f62623          	sw	a5,12(a2)
	_kernel.cpus[id].id = id;
80002cc4:	00860a23          	sb	s0,20(a2)
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
80002cc8:	00c41793          	slli	a5,s0,0xc
80002ccc:	80007637          	lui	a2,0x80007
80002cd0:	d7060613          	addi	a2,a2,-656 # 80006d70 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d71>
80002cd4:	00c787b3          	add	a5,a5,a2
80002cd8:	00001637          	lui	a2,0x1
80002cdc:	00c787b3          	add	a5,a5,a2
	_kernel.cpus[id].irq_stack =
80002ce0:	008686b3          	add	a3,a3,s0
80002ce4:	00369693          	slli	a3,a3,0x3
80002ce8:	00d70733          	add	a4,a4,a3
80002cec:	00f72223          	sw	a5,4(a4)
}
80002cf0:	00c12083          	lw	ra,12(sp)
80002cf4:	00812403          	lw	s0,8(sp)
80002cf8:	01010113          	addi	sp,sp,16
80002cfc:	00008067          	ret

80002d00 <prepare_multithreading>:
{
80002d00:	fe010113          	addi	sp,sp,-32
80002d04:	00112e23          	sw	ra,28(sp)
80002d08:	00812c23          	sw	s0,24(sp)
80002d0c:	00912a23          	sw	s1,20(sp)
80002d10:	01212823          	sw	s2,16(sp)
	z_sched_init();
80002d14:	428010ef          	jal	ra,8000413c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
80002d18:	800077b7          	lui	a5,0x80007
80002d1c:	800074b7          	lui	s1,0x80007
80002d20:	cc048913          	addi	s2,s1,-832 # 80006cc0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006cc1>
80002d24:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80002d28:	0127ac23          	sw	s2,24(a5)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
80002d2c:	800077b7          	lui	a5,0x80007
80002d30:	9a878793          	addi	a5,a5,-1624 # 800069a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800069a9>
80002d34:	00f12223          	sw	a5,4(sp)
80002d38:	00100793          	li	a5,1
80002d3c:	00f12023          	sw	a5,0(sp)
80002d40:	00000893          	li	a7,0
80002d44:	00000813          	li	a6,0
80002d48:	00000793          	li	a5,0
80002d4c:	00000713          	li	a4,0
80002d50:	800036b7          	lui	a3,0x80003
80002d54:	b5c68693          	addi	a3,a3,-1188 # 80002b5c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80002b5d>
80002d58:	00001637          	lui	a2,0x1
80002d5c:	800085b7          	lui	a1,0x80008
80002d60:	17058593          	addi	a1,a1,368 # 80008170 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008171>
80002d64:	cc048513          	addi	a0,s1,-832
80002d68:	130000ef          	jal	ra,80002e98 <z_setup_new_thread>
80002d6c:	00050413          	mv	s0,a0
80002d70:	00d94783          	lbu	a5,13(s2)
80002d74:	ffb7f793          	andi	a5,a5,-5
80002d78:	00f906a3          	sb	a5,13(s2)
	z_ready_thread(&z_main_thread);
80002d7c:	cc048513          	addi	a0,s1,-832
80002d80:	575000ef          	jal	ra,80003af4 <z_ready_thread>
	z_init_cpu(0);
80002d84:	00000513          	li	a0,0
80002d88:	ef5ff0ef          	jal	ra,80002c7c <z_init_cpu>
}
80002d8c:	00040513          	mv	a0,s0
80002d90:	01c12083          	lw	ra,28(sp)
80002d94:	01812403          	lw	s0,24(sp)
80002d98:	01412483          	lw	s1,20(sp)
80002d9c:	01012903          	lw	s2,16(sp)
80002da0:	02010113          	addi	sp,sp,32
80002da4:	00008067          	ret

80002da8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
80002da8:	f6010113          	addi	sp,sp,-160
80002dac:	08112e23          	sw	ra,156(sp)
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
80002db0:	00100793          	li	a5,1
80002db4:	00f10aa3          	sb	a5,21(sp)
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
80002db8:	00f10a23          	sb	a5,20(sp)
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
80002dbc:	08012423          	sw	zero,136(sp)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
80002dc0:	800077b7          	lui	a5,0x80007
80002dc4:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80002dc8:	00810713          	addi	a4,sp,8
80002dcc:	00e7a423          	sw	a4,8(a5)
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
80002dd0:	b6dff0ef          	jal	ra,8000293c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
80002dd4:	00000513          	li	a0,0
80002dd8:	b85ff0ef          	jal	ra,8000295c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
80002ddc:	00100513          	li	a0,1
80002de0:	b7dff0ef          	jal	ra,8000295c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
80002de4:	f1dff0ef          	jal	ra,80002d00 <prepare_multithreading>
80002de8:	e3dff0ef          	jal	ra,80002c24 <switch_to_main_thread>

80002dec <setup_thread_stack>:
#endif /* CONFIG_STACK_GROWS_UP */
#endif /* CONFIG_STACK_POINTER_RANDOM */

static char *setup_thread_stack(struct k_thread *new_thread,
				k_thread_stack_t *stack, size_t stack_size)
{
80002dec:	ff010113          	addi	sp,sp,-16
80002df0:	00112623          	sw	ra,12(sp)
80002df4:	00812423          	sw	s0,8(sp)
80002df8:	00058513          	mv	a0,a1
		stack_buf_size = stack_obj_size - K_THREAD_STACK_RESERVED;
	} else
#endif
	{
		/* Object cannot host a user mode thread */
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
80002dfc:	00f60613          	addi	a2,a2,15 # 100f <CONFIG_ISR_STACK_SIZE+0xf>
80002e00:	ff067613          	andi	a2,a2,-16
	}

	/* Initial stack pointer at the high end of the stack object, may
	 * be reduced later in this function by TLS or random offset
	 */
	stack_ptr = (char *)stack + stack_obj_size;
80002e04:	00c58433          	add	s0,a1,a2
80002e08:	0aa00593          	li	a1,170
80002e0c:	bedfd0ef          	jal	ra,800009f8 <memset>
	new_thread->stack_info.delta = delta;
#endif
	stack_ptr -= delta;

	return stack_ptr;
}
80002e10:	00040513          	mv	a0,s0
80002e14:	00c12083          	lw	ra,12(sp)
80002e18:	00812403          	lw	s0,8(sp)
80002e1c:	01010113          	addi	sp,sp,16
80002e20:	00008067          	ret

80002e24 <z_impl_k_thread_start>:
{
80002e24:	ff010113          	addi	sp,sp,-16
80002e28:	00112623          	sw	ra,12(sp)
	z_sched_start(thread);
80002e2c:	525000ef          	jal	ra,80003b50 <z_sched_start>
}
80002e30:	00c12083          	lw	ra,12(sp)
80002e34:	01010113          	addi	sp,sp,16
80002e38:	00008067          	ret

80002e3c <schedule_new_thread>:
{
80002e3c:	ff010113          	addi	sp,sp,-16
80002e40:	00112623          	sw	ra,12(sp)
80002e44:	00060693          	mv	a3,a2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
80002e48:	00b667b3          	or	a5,a2,a1
80002e4c:	00079a63          	bnez	a5,80002e60 <schedule_new_thread+0x24>
	z_impl_k_thread_start(thread);
80002e50:	fd5ff0ef          	jal	ra,80002e24 <z_impl_k_thread_start>
}
80002e54:	00c12083          	lw	ra,12(sp)
80002e58:	01010113          	addi	sp,sp,16
80002e5c:	00008067          	ret
80002e60:	00058613          	mv	a2,a1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
80002e64:	800045b7          	lui	a1,0x80004
80002e68:	ba458593          	addi	a1,a1,-1116 # 80003ba4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003ba5>
80002e6c:	01850513          	addi	a0,a0,24
80002e70:	51c010ef          	jal	ra,8000438c <z_add_timeout>
80002e74:	fe1ff06f          	j	80002e54 <schedule_new_thread+0x18>

80002e78 <z_init_thread_base>:

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
80002e78:	00052423          	sw	zero,8(a0)
	thread_base->user_options = (uint8_t)options;
80002e7c:	00d50623          	sb	a3,12(a0)
	thread_base->thread_state = (uint8_t)initial_state;
80002e80:	00c506a3          	sb	a2,13(a0)

	thread_base->prio = priority;
80002e84:	00b50723          	sb	a1,14(a0)

	thread_base->sched_locked = 0U;
80002e88:	000507a3          	sb	zero,15(a0)
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
80002e8c:	00052c23          	sw	zero,24(a0)
	node->prev = NULL;
80002e90:	00052e23          	sw	zero,28(a0)
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
80002e94:	00008067          	ret

80002e98 <z_setup_new_thread>:
{
80002e98:	fe010113          	addi	sp,sp,-32
80002e9c:	00112e23          	sw	ra,28(sp)
80002ea0:	00812c23          	sw	s0,24(sp)
80002ea4:	00912a23          	sw	s1,20(sp)
80002ea8:	01212823          	sw	s2,16(sp)
80002eac:	01312623          	sw	s3,12(sp)
80002eb0:	01412423          	sw	s4,8(sp)
80002eb4:	01512223          	sw	s5,4(sp)
80002eb8:	01612023          	sw	s6,0(sp)
80002ebc:	00050413          	mv	s0,a0
80002ec0:	00058913          	mv	s2,a1
80002ec4:	00060493          	mv	s1,a2
80002ec8:	00068993          	mv	s3,a3
80002ecc:	00070a13          	mv	s4,a4
80002ed0:	00078a93          	mv	s5,a5
80002ed4:	00080b13          	mv	s6,a6
80002ed8:	00088593          	mv	a1,a7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
80002edc:	06c50793          	addi	a5,a0,108
	list->head = (sys_dnode_t *)list;
80002ee0:	06f52623          	sw	a5,108(a0)
	list->tail = (sys_dnode_t *)list;
80002ee4:	06f52823          	sw	a5,112(a0)
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
80002ee8:	02012683          	lw	a3,32(sp)
80002eec:	00400613          	li	a2,4
80002ef0:	f89ff0ef          	jal	ra,80002e78 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
80002ef4:	00048613          	mv	a2,s1
80002ef8:	00090593          	mv	a1,s2
80002efc:	00040513          	mv	a0,s0
80002f00:	eedff0ef          	jal	ra,80002dec <setup_thread_stack>
80002f04:	00050493          	mv	s1,a0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
80002f08:	000b0813          	mv	a6,s6
80002f0c:	000a8793          	mv	a5,s5
80002f10:	000a0713          	mv	a4,s4
80002f14:	00098693          	mv	a3,s3
80002f18:	00050613          	mv	a2,a0
80002f1c:	00090593          	mv	a1,s2
80002f20:	00040513          	mv	a0,s0
80002f24:	f89fe0ef          	jal	ra,80001eac <arch_new_thread>
	new_thread->init_data = NULL;
80002f28:	06042423          	sw	zero,104(s0)
	new_thread->resource_pool = _current->resource_pool;
80002f2c:	800077b7          	lui	a5,0x80007
80002f30:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80002f34:	0087a783          	lw	a5,8(a5)
80002f38:	0807a783          	lw	a5,128(a5)
80002f3c:	08f42023          	sw	a5,128(s0)
}
80002f40:	00048513          	mv	a0,s1
80002f44:	01c12083          	lw	ra,28(sp)
80002f48:	01812403          	lw	s0,24(sp)
80002f4c:	01412483          	lw	s1,20(sp)
80002f50:	01012903          	lw	s2,16(sp)
80002f54:	00c12983          	lw	s3,12(sp)
80002f58:	00812a03          	lw	s4,8(sp)
80002f5c:	00412a83          	lw	s5,4(sp)
80002f60:	00012b03          	lw	s6,0(sp)
80002f64:	02010113          	addi	sp,sp,32
80002f68:	00008067          	ret

80002f6c <z_init_static_threads>:
{
80002f6c:	fe010113          	addi	sp,sp,-32
80002f70:	00112e23          	sw	ra,28(sp)
80002f74:	00812c23          	sw	s0,24(sp)
80002f78:	00912a23          	sw	s1,20(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
80002f7c:	80006437          	lui	s0,0x80006
80002f80:	58040413          	addi	s0,s0,1408 # 80006580 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006581>
80002f84:	0440006f          	j	80002fc8 <z_init_static_threads+0x5c>
		z_setup_new_thread(
80002f88:	02c42783          	lw	a5,44(s0)
80002f8c:	00f12223          	sw	a5,4(sp)
80002f90:	02042783          	lw	a5,32(s0)
80002f94:	00f12023          	sw	a5,0(sp)
80002f98:	01c42883          	lw	a7,28(s0)
80002f9c:	01842803          	lw	a6,24(s0)
80002fa0:	01442783          	lw	a5,20(s0)
80002fa4:	01042703          	lw	a4,16(s0)
80002fa8:	00c42683          	lw	a3,12(s0)
80002fac:	00842603          	lw	a2,8(s0)
80002fb0:	00442583          	lw	a1,4(s0)
80002fb4:	00042503          	lw	a0,0(s0)
80002fb8:	ee1ff0ef          	jal	ra,80002e98 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
80002fbc:	00042783          	lw	a5,0(s0)
80002fc0:	0687a423          	sw	s0,104(a5)
	_FOREACH_STATIC_THREAD(thread_data) {
80002fc4:	03040413          	addi	s0,s0,48
80002fc8:	800067b7          	lui	a5,0x80006
80002fcc:	58078793          	addi	a5,a5,1408 # 80006580 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006581>
80002fd0:	faf46ce3          	bltu	s0,a5,80002f88 <z_init_static_threads+0x1c>
	k_sched_lock();
80002fd4:	510000ef          	jal	ra,800034e4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
80002fd8:	80006437          	lui	s0,0x80006
80002fdc:	58040413          	addi	s0,s0,1408 # 80006580 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006581>
80002fe0:	0440006f          	j	80003024 <z_init_static_threads+0xb8>
					    K_MSEC(thread_data->init_delay));
80002fe4:	41f7d593          	srai	a1,a5,0x1f
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
80002fe8:	0197d713          	srli	a4,a5,0x19
80002fec:	00759593          	slli	a1,a1,0x7
80002ff0:	00b765b3          	or	a1,a4,a1
80002ff4:	00779793          	slli	a5,a5,0x7
80002ff8:	3e778513          	addi	a0,a5,999
80002ffc:	00f537b3          	sltu	a5,a0,a5
80003000:	3e800613          	li	a2,1000
80003004:	00000693          	li	a3,0
80003008:	00b785b3          	add	a1,a5,a1
8000300c:	9d8fd0ef          	jal	ra,800001e4 <__udivdi3>
			schedule_new_thread(thread_data->init_thread,
80003010:	00058613          	mv	a2,a1
80003014:	00050593          	mv	a1,a0
80003018:	00048513          	mv	a0,s1
8000301c:	e21ff0ef          	jal	ra,80002e3c <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
80003020:	03040413          	addi	s0,s0,48
80003024:	800067b7          	lui	a5,0x80006
80003028:	58078793          	addi	a5,a5,1408 # 80006580 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006581>
8000302c:	02f47063          	bgeu	s0,a5,8000304c <z_init_static_threads+0xe0>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
80003030:	02442783          	lw	a5,36(s0)
80003034:	fff00713          	li	a4,-1
80003038:	fee784e3          	beq	a5,a4,80003020 <z_init_static_threads+0xb4>
			schedule_new_thread(thread_data->init_thread,
8000303c:	00042483          	lw	s1,0(s0)
					    K_MSEC(thread_data->init_delay));
80003040:	fa07d2e3          	bgez	a5,80002fe4 <z_init_static_threads+0x78>
80003044:	00000793          	li	a5,0
80003048:	f9dff06f          	j	80002fe4 <z_init_static_threads+0x78>
	k_sched_unlock();
8000304c:	775000ef          	jal	ra,80003fc0 <k_sched_unlock>
}
80003050:	01c12083          	lw	ra,28(sp)
80003054:	01812403          	lw	s0,24(sp)
80003058:	01412483          	lw	s1,20(sp)
8000305c:	02010113          	addi	sp,sp,32
80003060:	00008067          	ret

80003064 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
80003064:	ff010113          	addi	sp,sp,-16
80003068:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000306c:	300477f3          	csrrci	a5,mstatus,8
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
80003070:	c11fe0ef          	jal	ra,80001c80 <arch_cpu_idle>
80003074:	ff9ff06f          	j	8000306c <idle+0x8>

80003078 <new_prio_for_inheritance>:
#include <syscalls/k_mutex_init_mrsh.c>
#endif

static int32_t new_prio_for_inheritance(int32_t target, int32_t limit)
{
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
80003078:	00b55463          	bge	a0,a1,80003080 <new_prio_for_inheritance+0x8>
8000307c:	00050593          	mv	a1,a0
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
80003080:	f8100793          	li	a5,-127
80003084:	00f5c663          	blt	a1,a5,80003090 <new_prio_for_inheritance+0x18>
80003088:	00058513          	mv	a0,a1
8000308c:	00008067          	ret
80003090:	f8100513          	li	a0,-127

	new_prio = z_get_new_prio_with_ceiling(new_prio);

	return new_prio;
}
80003094:	00008067          	ret

80003098 <adjust_owner_prio>:

static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
{
	if (mutex->owner->base.prio != new_prio) {
80003098:	00852503          	lw	a0,8(a0)
8000309c:	00e50783          	lb	a5,14(a0)
800030a0:	00b79663          	bne	a5,a1,800030ac <adjust_owner_prio+0x14>
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		return z_set_prio(mutex->owner, new_prio);
	}
	return false;
800030a4:	00000513          	li	a0,0
}
800030a8:	00008067          	ret
{
800030ac:	ff010113          	addi	sp,sp,-16
800030b0:	00112623          	sw	ra,12(sp)
		return z_set_prio(mutex->owner, new_prio);
800030b4:	5c1000ef          	jal	ra,80003e74 <z_set_prio>
}
800030b8:	00c12083          	lw	ra,12(sp)
800030bc:	01010113          	addi	sp,sp,16
800030c0:	00008067          	ret

800030c4 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
800030c4:	00052423          	sw	zero,8(a0)
	mutex->lock_count = 0U;
800030c8:	00052623          	sw	zero,12(a0)
	list->head = (sys_dnode_t *)list;
800030cc:	00a52023          	sw	a0,0(a0)
	list->tail = (sys_dnode_t *)list;
800030d0:	00a52223          	sw	a0,4(a0)
}
800030d4:	00000513          	li	a0,0
800030d8:	00008067          	ret

800030dc <z_impl_k_mutex_lock>:

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
800030dc:	fe010113          	addi	sp,sp,-32
800030e0:	00112e23          	sw	ra,28(sp)
800030e4:	00812c23          	sw	s0,24(sp)
800030e8:	00912a23          	sw	s1,20(sp)
800030ec:	01212823          	sw	s2,16(sp)
800030f0:	01312623          	sw	s3,12(sp)
800030f4:	01412423          	sw	s4,8(sp)
800030f8:	00050413          	mv	s0,a0
800030fc:	300474f3          	csrrci	s1,mstatus,8

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
80003100:	00c52783          	lw	a5,12(a0)
80003104:	06079063          	bnez	a5,80003164 <z_impl_k_mutex_lock+0x88>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
80003108:	10079063          	bnez	a5,80003208 <z_impl_k_mutex_lock+0x12c>
8000310c:	80007737          	lui	a4,0x80007
80003110:	d4870713          	addi	a4,a4,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003114:	00872703          	lw	a4,8(a4)
80003118:	00e70703          	lb	a4,14(a4)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
8000311c:	00e42823          	sw	a4,16(s0)
					mutex->owner_orig_prio;

		mutex->lock_count++;
80003120:	00178793          	addi	a5,a5,1
80003124:	00f42623          	sw	a5,12(s0)
		mutex->owner = _current;
80003128:	800077b7          	lui	a5,0x80007
8000312c:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003130:	0087a783          	lw	a5,8(a5)
80003134:	00f42423          	sw	a5,8(s0)
	__asm__ volatile ("csrs mstatus, %0"
80003138:	0084f493          	andi	s1,s1,8
8000313c:	3004a073          	csrs	mstatus,s1

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
80003140:	00000513          	li	a0,0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
80003144:	01c12083          	lw	ra,28(sp)
80003148:	01812403          	lw	s0,24(sp)
8000314c:	01412483          	lw	s1,20(sp)
80003150:	01012903          	lw	s2,16(sp)
80003154:	00c12983          	lw	s3,12(sp)
80003158:	00812a03          	lw	s4,8(sp)
8000315c:	02010113          	addi	sp,sp,32
80003160:	00008067          	ret
80003164:	00058993          	mv	s3,a1
80003168:	00060913          	mv	s2,a2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
8000316c:	00852683          	lw	a3,8(a0)
80003170:	80007737          	lui	a4,0x80007
80003174:	d4870713          	addi	a4,a4,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003178:	00872703          	lw	a4,8(a4)
8000317c:	f8e686e3          	beq	a3,a4,80003108 <z_impl_k_mutex_lock+0x2c>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
80003180:	00b667b3          	or	a5,a2,a1
80003184:	08078663          	beqz	a5,80003210 <z_impl_k_mutex_lock+0x134>
					    mutex->owner->base.prio);
80003188:	00e68a03          	lb	s4,14(a3)
	new_prio = new_prio_for_inheritance(_current->base.prio,
8000318c:	000a0593          	mv	a1,s4
80003190:	00e70503          	lb	a0,14(a4)
80003194:	ee5ff0ef          	jal	ra,80003078 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
80003198:	09454463          	blt	a0,s4,80003220 <z_impl_k_mutex_lock+0x144>
	bool resched = false;
8000319c:	00000a13          	li	s4,0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
800031a0:	00098693          	mv	a3,s3
800031a4:	00090713          	mv	a4,s2
800031a8:	00040613          	mv	a2,s0
800031ac:	00048593          	mv	a1,s1
800031b0:	80007537          	lui	a0,0x80007
800031b4:	d6c50513          	addi	a0,a0,-660 # 80006d6c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d6d>
800031b8:	469000ef          	jal	ra,80003e20 <z_pend_curr>
	if (got_mutex == 0) {
800031bc:	f80504e3          	beqz	a0,80003144 <z_impl_k_mutex_lock+0x68>
	__asm__ volatile ("csrrc %0, mstatus, %1"
800031c0:	300474f3          	csrrci	s1,mstatus,8
	if (likely(mutex->owner != NULL)) {
800031c4:	00842783          	lw	a5,8(s0)
800031c8:	06078a63          	beqz	a5,8000323c <z_impl_k_mutex_lock+0x160>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
800031cc:	00042783          	lw	a5,0(s0)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
800031d0:	06878263          	beq	a5,s0,80003234 <z_impl_k_mutex_lock+0x158>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
800031d4:	06078063          	beqz	a5,80003234 <z_impl_k_mutex_lock+0x158>
800031d8:	01042583          	lw	a1,16(s0)
800031dc:	00e78503          	lb	a0,14(a5)
800031e0:	e99ff0ef          	jal	ra,80003078 <new_prio_for_inheritance>
800031e4:	00050593          	mv	a1,a0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
800031e8:	00040513          	mv	a0,s0
800031ec:	eadff0ef          	jal	ra,80003098 <adjust_owner_prio>
800031f0:	04051863          	bnez	a0,80003240 <z_impl_k_mutex_lock+0x164>
800031f4:	040a1663          	bnez	s4,80003240 <z_impl_k_mutex_lock+0x164>
	__asm__ volatile ("csrs mstatus, %0"
800031f8:	0084f493          	andi	s1,s1,8
800031fc:	3004a073          	csrs	mstatus,s1
	return -EAGAIN;
80003200:	ff500513          	li	a0,-11
80003204:	f41ff06f          	j	80003144 <z_impl_k_mutex_lock+0x68>
					_current->base.prio :
80003208:	01042703          	lw	a4,16(s0)
8000320c:	f11ff06f          	j	8000311c <z_impl_k_mutex_lock+0x40>
80003210:	0084f493          	andi	s1,s1,8
80003214:	3004a073          	csrs	mstatus,s1
		return -EBUSY;
80003218:	ff000513          	li	a0,-16
8000321c:	f29ff06f          	j	80003144 <z_impl_k_mutex_lock+0x68>
		resched = adjust_owner_prio(mutex, new_prio);
80003220:	00050593          	mv	a1,a0
80003224:	00040513          	mv	a0,s0
80003228:	e71ff0ef          	jal	ra,80003098 <adjust_owner_prio>
8000322c:	00050a13          	mv	s4,a0
80003230:	f71ff06f          	j	800031a0 <z_impl_k_mutex_lock+0xc4>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
80003234:	01042583          	lw	a1,16(s0)
80003238:	fb1ff06f          	j	800031e8 <z_impl_k_mutex_lock+0x10c>
	if (resched) {
8000323c:	fa0a0ee3          	beqz	s4,800031f8 <z_impl_k_mutex_lock+0x11c>
		z_reschedule(&lock, key);
80003240:	00048593          	mv	a1,s1
80003244:	80007537          	lui	a0,0x80007
80003248:	d6c50513          	addi	a0,a0,-660 # 80006d6c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d6d>
8000324c:	430000ef          	jal	ra,8000367c <z_reschedule>
	return -EAGAIN;
80003250:	ff500513          	li	a0,-11
80003254:	ef1ff06f          	j	80003144 <z_impl_k_mutex_lock+0x68>

80003258 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
80003258:	00852703          	lw	a4,8(a0)
8000325c:	0a070663          	beqz	a4,80003308 <z_impl_k_mutex_unlock+0xb0>
{
80003260:	ff010113          	addi	sp,sp,-16
80003264:	00112623          	sw	ra,12(sp)
80003268:	00812423          	sw	s0,8(sp)
8000326c:	00912223          	sw	s1,4(sp)
80003270:	00050413          	mv	s0,a0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
80003274:	800077b7          	lui	a5,0x80007
80003278:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
8000327c:	0087a783          	lw	a5,8(a5)
80003280:	08f71863          	bne	a4,a5,80003310 <z_impl_k_mutex_unlock+0xb8>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
80003284:	00c52783          	lw	a5,12(a0)
80003288:	00100713          	li	a4,1
8000328c:	02f77263          	bgeu	a4,a5,800032b0 <z_impl_k_mutex_unlock+0x58>
		mutex->lock_count--;
80003290:	fff78793          	addi	a5,a5,-1
80003294:	00f52623          	sw	a5,12(a0)


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
80003298:	00000513          	li	a0,0
}
8000329c:	00c12083          	lw	ra,12(sp)
800032a0:	00812403          	lw	s0,8(sp)
800032a4:	00412483          	lw	s1,4(sp)
800032a8:	01010113          	addi	sp,sp,16
800032ac:	00008067          	ret
	__asm__ volatile ("csrrc %0, mstatus, %1"
800032b0:	300474f3          	csrrci	s1,mstatus,8
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
800032b4:	01052583          	lw	a1,16(a0)
800032b8:	de1ff0ef          	jal	ra,80003098 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
800032bc:	00040513          	mv	a0,s0
800032c0:	5f9000ef          	jal	ra,800040b8 <z_unpend_first_thread>
	mutex->owner = new_owner;
800032c4:	00a42423          	sw	a0,8(s0)
	if (new_owner != NULL) {
800032c8:	02050663          	beqz	a0,800032f4 <z_impl_k_mutex_unlock+0x9c>
		mutex->owner_orig_prio = new_owner->base.prio;
800032cc:	00e50783          	lb	a5,14(a0)
800032d0:	00f42823          	sw	a5,16(s0)
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
800032d4:	06052c23          	sw	zero,120(a0)
		z_ready_thread(new_owner);
800032d8:	01d000ef          	jal	ra,80003af4 <z_ready_thread>
		z_reschedule(&lock, key);
800032dc:	00048593          	mv	a1,s1
800032e0:	80007537          	lui	a0,0x80007
800032e4:	d6c50513          	addi	a0,a0,-660 # 80006d6c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d6d>
800032e8:	394000ef          	jal	ra,8000367c <z_reschedule>
	return 0;
800032ec:	00000513          	li	a0,0
800032f0:	fadff06f          	j	8000329c <z_impl_k_mutex_unlock+0x44>
		mutex->lock_count = 0U;
800032f4:	00042623          	sw	zero,12(s0)
	__asm__ volatile ("csrs mstatus, %0"
800032f8:	0084f493          	andi	s1,s1,8
800032fc:	3004a073          	csrs	mstatus,s1
	return 0;
80003300:	00000513          	li	a0,0
80003304:	f99ff06f          	j	8000329c <z_impl_k_mutex_unlock+0x44>
		return -EINVAL;
80003308:	fea00513          	li	a0,-22
}
8000330c:	00008067          	ret
		return -EPERM;
80003310:	fff00513          	li	a0,-1
80003314:	f89ff06f          	j	8000329c <z_impl_k_mutex_unlock+0x44>

80003318 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
80003318:	00e55703          	lhu	a4,14(a0)
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
8000331c:	07f00793          	li	a5,127
80003320:	02e7ea63          	bltu	a5,a4,80003354 <sliceable+0x3c>
	uint8_t state = thread->base.thread_state;
80003324:	00d54783          	lbu	a5,13(a0)
		&& !z_is_thread_prevented_from_running(thread)
80003328:	01f7f793          	andi	a5,a5,31
8000332c:	02079863          	bnez	a5,8000335c <sliceable+0x44>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
80003330:	00e50703          	lb	a4,14(a0)
80003334:	800077b7          	lui	a5,0x80007
80003338:	c187a783          	lw	a5,-1000(a5) # 80006c18 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c19>
8000333c:	02f74463          	blt	a4,a5,80003364 <sliceable+0x4c>
		&& !z_is_idle_thread_object(thread);
80003340:	800077b7          	lui	a5,0x80007
80003344:	c3878793          	addi	a5,a5,-968 # 80006c38 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c39>
80003348:	02f50263          	beq	a0,a5,8000336c <sliceable+0x54>
8000334c:	00100513          	li	a0,1
80003350:	00008067          	ret
80003354:	00000513          	li	a0,0
80003358:	00008067          	ret
8000335c:	00000513          	li	a0,0
80003360:	00008067          	ret
80003364:	00000513          	li	a0,0
80003368:	00008067          	ret
8000336c:	00000513          	li	a0,0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
80003370:	00008067          	ret

80003374 <thread_active_elsewhere>:
			return true;
		}
	}
#endif
	return false;
}
80003374:	00000513          	li	a0,0
80003378:	00008067          	ret

8000337c <pended_on_thread>:
static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);

	return thread->base.pended_on;
}
8000337c:	00852503          	lw	a0,8(a0)
80003380:	00008067          	ret

80003384 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
80003384:	00060693          	mv	a3,a2
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
80003388:	fff00793          	li	a5,-1
8000338c:	00b79663          	bne	a5,a1,80003398 <add_thread_timeout+0x14>
80003390:	00f61463          	bne	a2,a5,80003398 <add_thread_timeout+0x14>
80003394:	00008067          	ret
{
80003398:	ff010113          	addi	sp,sp,-16
8000339c:	00112623          	sw	ra,12(sp)
800033a0:	00058613          	mv	a2,a1
800033a4:	800045b7          	lui	a1,0x80004
800033a8:	ba458593          	addi	a1,a1,-1116 # 80003ba4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003ba5>
800033ac:	01850513          	addi	a0,a0,24
800033b0:	7dd000ef          	jal	ra,8000438c <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
800033b4:	00c12083          	lw	ra,12(sp)
800033b8:	01010113          	addi	sp,sp,16
800033bc:	00008067          	ret

800033c0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
800033c0:	00e50783          	lb	a5,14(a0)
	int32_t b2 = thread_2->base.prio;
800033c4:	00e58503          	lb	a0,14(a1)
	if (b1 != b2) {
800033c8:	00a78663          	beq	a5,a0,800033d4 <z_sched_prio_cmp+0x14>
		return b2 - b1;
800033cc:	40f50533          	sub	a0,a0,a5
800033d0:	00008067          	ret
	return 0;
800033d4:	00000513          	li	a0,0
}
800033d8:	00008067          	ret

800033dc <z_reset_time_slice>:
{
800033dc:	ff010113          	addi	sp,sp,-16
800033e0:	00112623          	sw	ra,12(sp)
800033e4:	00812423          	sw	s0,8(sp)
	int ret = slice_ticks;
800033e8:	800077b7          	lui	a5,0x80007
800033ec:	c1c7a403          	lw	s0,-996(a5) # 80006c1c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c1d>
	if (slice_time(curr) != 0) {
800033f0:	00041a63          	bnez	s0,80003404 <z_reset_time_slice+0x28>
}
800033f4:	00c12083          	lw	ra,12(sp)
800033f8:	00812403          	lw	s0,8(sp)
800033fc:	01010113          	addi	sp,sp,16
80003400:	00008067          	ret
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
80003404:	cfcff0ef          	jal	ra,80002900 <sys_clock_elapsed>
80003408:	00a40433          	add	s0,s0,a0
8000340c:	800077b7          	lui	a5,0x80007
80003410:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003414:	0087a823          	sw	s0,16(a5)
		z_set_timeout_expiry(slice_time(curr), false);
80003418:	00000593          	li	a1,0
8000341c:	800077b7          	lui	a5,0x80007
80003420:	c1c7a503          	lw	a0,-996(a5) # 80006c1c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c1d>
80003424:	19c010ef          	jal	ra,800045c0 <z_set_timeout_expiry>
}
80003428:	fcdff06f          	j	800033f4 <z_reset_time_slice+0x18>

8000342c <k_sched_time_slice_set>:
{
8000342c:	ff010113          	addi	sp,sp,-16
80003430:	00112623          	sw	ra,12(sp)
80003434:	00812423          	sw	s0,8(sp)
80003438:	00912223          	sw	s1,4(sp)
8000343c:	01212023          	sw	s2,0(sp)
80003440:	00050413          	mv	s0,a0
80003444:	00058493          	mv	s1,a1
	LOCKED(&sched_spinlock) {
80003448:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000344c:	30047973          	csrrci	s2,mstatus,8
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
80003450:	0300006f          	j	80003480 <k_sched_time_slice_set+0x54>
			slice_ticks = MAX(2, slice_ticks);
80003454:	800077b7          	lui	a5,0x80007
80003458:	c0a7ae23          	sw	a0,-996(a5) # 80006c1c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c1d>
		slice_max_prio = prio;
8000345c:	800077b7          	lui	a5,0x80007
80003460:	c097ac23          	sw	s1,-1000(a5) # 80006c18 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c19>
		z_reset_time_slice(_current);
80003464:	800077b7          	lui	a5,0x80007
80003468:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
8000346c:	0087a503          	lw	a0,8(a5)
80003470:	f6dff0ef          	jal	ra,800033dc <z_reset_time_slice>
			  : "r" (key & MSTATUS_IEN)
80003474:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80003478:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
8000347c:	00100793          	li	a5,1
80003480:	04079663          	bnez	a5,800034cc <k_sched_time_slice_set+0xa0>
		_current_cpu->slice_ticks = 0;
80003484:	800077b7          	lui	a5,0x80007
80003488:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
8000348c:	0007a823          	sw	zero,16(a5)
			return (uint32_t)((t * to_hz + off) / from_hz);
80003490:	01945593          	srli	a1,s0,0x19
80003494:	00741793          	slli	a5,s0,0x7
80003498:	3e778513          	addi	a0,a5,999
8000349c:	00f537b3          	sltu	a5,a0,a5
800034a0:	3e800613          	li	a2,1000
800034a4:	00000693          	li	a3,0
800034a8:	00b785b3          	add	a1,a5,a1
800034ac:	d39fc0ef          	jal	ra,800001e4 <__udivdi3>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
800034b0:	800077b7          	lui	a5,0x80007
800034b4:	c0a7ae23          	sw	a0,-996(a5) # 80006c1c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c1d>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
800034b8:	fa8052e3          	blez	s0,8000345c <k_sched_time_slice_set+0x30>
			slice_ticks = MAX(2, slice_ticks);
800034bc:	00200793          	li	a5,2
800034c0:	f8f55ae3          	bge	a0,a5,80003454 <k_sched_time_slice_set+0x28>
800034c4:	00200513          	li	a0,2
800034c8:	f8dff06f          	j	80003454 <k_sched_time_slice_set+0x28>
}
800034cc:	00c12083          	lw	ra,12(sp)
800034d0:	00812403          	lw	s0,8(sp)
800034d4:	00412483          	lw	s1,4(sp)
800034d8:	00012903          	lw	s2,0(sp)
800034dc:	01010113          	addi	sp,sp,16
800034e0:	00008067          	ret

800034e4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
800034e4:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800034e8:	300476f3          	csrrci	a3,mstatus,8
800034ec:	0280006f          	j	80003514 <k_sched_lock+0x30>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
800034f0:	800077b7          	lui	a5,0x80007
800034f4:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800034f8:	0087a703          	lw	a4,8(a5)
800034fc:	00f74783          	lbu	a5,15(a4)
80003500:	fff78793          	addi	a5,a5,-1
80003504:	00f707a3          	sb	a5,15(a4)
			  : "r" (key & MSTATUS_IEN)
80003508:	0086f793          	andi	a5,a3,8
	__asm__ volatile ("csrs mstatus, %0"
8000350c:	3007a073          	csrs	mstatus,a5
80003510:	00100793          	li	a5,1
80003514:	fc078ee3          	beqz	a5,800034f0 <k_sched_lock+0xc>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
80003518:	00008067          	ret

8000351c <z_swap_next_thread>:
		 */
		signal_pending_ipi();
	}
	return ret;
#else
	return _kernel.ready_q.cache;
8000351c:	800077b7          	lui	a5,0x80007
#endif
}
80003520:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003524:	0187a503          	lw	a0,24(a5)
80003528:	00008067          	ret

8000352c <z_swap_irqlock>:
{
8000352c:	ff010113          	addi	sp,sp,-16
80003530:	00112623          	sw	ra,12(sp)
80003534:	00812423          	sw	s0,8(sp)
80003538:	00912223          	sw	s1,4(sp)
8000353c:	01212023          	sw	s2,0(sp)
80003540:	00050413          	mv	s0,a0
	old_thread = _current;
80003544:	800077b7          	lui	a5,0x80007
80003548:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
8000354c:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
80003550:	ff500793          	li	a5,-11
80003554:	06f92c23          	sw	a5,120(s2)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003558:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
8000355c:	fc1ff0ef          	jal	ra,8000351c <z_swap_next_thread>
	if (new_thread != old_thread) {
80003560:	02a90263          	beq	s2,a0,80003584 <z_swap_irqlock+0x58>
80003564:	00050493          	mv	s1,a0
		_current_cpu->current = new_thread;
80003568:	800077b7          	lui	a5,0x80007
8000356c:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003570:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
80003574:	e69ff0ef          	jal	ra,800033dc <z_reset_time_slice>
80003578:	00090593          	mv	a1,s2
8000357c:	07c4a503          	lw	a0,124(s1)
80003580:	885fe0ef          	jal	ra,80001e04 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
80003584:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80003588:	30042073          	csrs	mstatus,s0
	return _current->swap_retval;
8000358c:	800077b7          	lui	a5,0x80007
80003590:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003594:	0087a783          	lw	a5,8(a5)
}
80003598:	0787a503          	lw	a0,120(a5)
8000359c:	00c12083          	lw	ra,12(sp)
800035a0:	00812403          	lw	s0,8(sp)
800035a4:	00412483          	lw	s1,4(sp)
800035a8:	00012903          	lw	s2,0(sp)
800035ac:	01010113          	addi	sp,sp,16
800035b0:	00008067          	ret

800035b4 <z_reschedule_irqlock>:
			  : "memory");
}

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	return (key & MSTATUS_IEN) != 0;
800035b4:	00857793          	andi	a5,a0,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
800035b8:	02078463          	beqz	a5,800035e0 <z_reschedule_irqlock+0x2c>
	bool ret = arch_curr_cpu()->nested != 0U;

	arch_irq_unlock(key);
	return ret;
#else
	return _kernel.cpus[0].nested != 0U;
800035bc:	80007737          	lui	a4,0x80007
800035c0:	d4872703          	lw	a4,-696(a4) # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800035c4:	00071e63          	bnez	a4,800035e0 <z_reschedule_irqlock+0x2c>
{
800035c8:	ff010113          	addi	sp,sp,-16
800035cc:	00112623          	sw	ra,12(sp)
		z_swap_irqlock(key);
800035d0:	f5dff0ef          	jal	ra,8000352c <z_swap_irqlock>
}
800035d4:	00c12083          	lw	ra,12(sp)
800035d8:	01010113          	addi	sp,sp,16
800035dc:	00008067          	ret
	__asm__ volatile ("csrs mstatus, %0"
800035e0:	3007a073          	csrs	mstatus,a5
		signal_pending_ipi();
800035e4:	00008067          	ret

800035e8 <z_swap>:
{
800035e8:	ff010113          	addi	sp,sp,-16
800035ec:	00112623          	sw	ra,12(sp)
800035f0:	00812423          	sw	s0,8(sp)
800035f4:	00912223          	sw	s1,4(sp)
800035f8:	01212023          	sw	s2,0(sp)
800035fc:	00058413          	mv	s0,a1
	old_thread = _current;
80003600:	800077b7          	lui	a5,0x80007
80003604:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003608:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
8000360c:	ff500793          	li	a5,-11
80003610:	06f92c23          	sw	a5,120(s2)
	if (!is_spinlock || lock != &sched_spinlock) {
80003614:	800077b7          	lui	a5,0x80007
80003618:	d6c78793          	addi	a5,a5,-660 # 80006d6c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d6d>
8000361c:	00a78463          	beq	a5,a0,80003624 <z_swap+0x3c>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003620:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80003624:	ef9ff0ef          	jal	ra,8000351c <z_swap_next_thread>
80003628:	00050493          	mv	s1,a0
	if (new_thread != old_thread) {
8000362c:	02a90063          	beq	s2,a0,8000364c <z_swap+0x64>
		_current_cpu->current = new_thread;
80003630:	800077b7          	lui	a5,0x80007
80003634:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003638:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
8000363c:	da1ff0ef          	jal	ra,800033dc <z_reset_time_slice>
	z_riscv_switch(new, old);
80003640:	00090593          	mv	a1,s2
80003644:	07c4a503          	lw	a0,124(s1)
80003648:	fbcfe0ef          	jal	ra,80001e04 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
8000364c:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80003650:	30042073          	csrs	mstatus,s0
	return _current->swap_retval;
80003654:	800077b7          	lui	a5,0x80007
80003658:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
8000365c:	0087a783          	lw	a5,8(a5)
}
80003660:	0787a503          	lw	a0,120(a5)
80003664:	00c12083          	lw	ra,12(sp)
80003668:	00812403          	lw	s0,8(sp)
8000366c:	00412483          	lw	s1,4(sp)
80003670:	00012903          	lw	s2,0(sp)
80003674:	01010113          	addi	sp,sp,16
80003678:	00008067          	ret

8000367c <z_reschedule>:
	return (key & MSTATUS_IEN) != 0;
8000367c:	0085f793          	andi	a5,a1,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
80003680:	02078e63          	beqz	a5,800036bc <z_reschedule+0x40>
	return _kernel.cpus[0].nested != 0U;
80003684:	80007737          	lui	a4,0x80007
80003688:	d4872703          	lw	a4,-696(a4) # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
8000368c:	02071863          	bnez	a4,800036bc <z_reschedule+0x40>
	new_thread = _kernel.ready_q.cache;
80003690:	80007737          	lui	a4,0x80007
80003694:	d4870713          	addi	a4,a4,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003698:	01872683          	lw	a3,24(a4)
	return new_thread != _current;
8000369c:	00872703          	lw	a4,8(a4)
	if (resched(key.key) && need_swap()) {
800036a0:	00e68e63          	beq	a3,a4,800036bc <z_reschedule+0x40>
{
800036a4:	ff010113          	addi	sp,sp,-16
800036a8:	00112623          	sw	ra,12(sp)
		z_swap(lock, key);
800036ac:	f3dff0ef          	jal	ra,800035e8 <z_swap>
}
800036b0:	00c12083          	lw	ra,12(sp)
800036b4:	01010113          	addi	sp,sp,16
800036b8:	00008067          	ret
	__asm__ volatile ("csrs mstatus, %0"
800036bc:	3007a073          	csrs	mstatus,a5
		signal_pending_ipi();
800036c0:	00008067          	ret

800036c4 <z_get_next_switch_handle>:
		}
	}
	signal_pending_ipi();
	return ret;
#else
	z_sched_usage_switch(_kernel.ready_q.cache);
800036c4:	800077b7          	lui	a5,0x80007
800036c8:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800036cc:	0187a703          	lw	a4,24(a5)
	_current->switch_handle = interrupted;
800036d0:	0087a683          	lw	a3,8(a5)
800036d4:	06a6ae23          	sw	a0,124(a3)
	_current_cpu->current = new_thread;
800036d8:	00e7a423          	sw	a4,8(a5)
	set_current(_kernel.ready_q.cache);
	return _current->switch_handle;
#endif
}
800036dc:	07c72503          	lw	a0,124(a4)
800036e0:	00008067          	ret

800036e4 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
800036e4:	0045a703          	lw	a4,4(a1)
	sys_dnode_t *const next = node->next;
800036e8:	0005a783          	lw	a5,0(a1)

	prev->next = next;
800036ec:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
800036f0:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
800036f4:	0005a023          	sw	zero,0(a1)
	node->prev = NULL;
800036f8:	0005a223          	sw	zero,4(a1)
void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
800036fc:	00008067          	ret

80003700 <unpend_thread_no_timeout>:
{
80003700:	ff010113          	addi	sp,sp,-16
80003704:	00112623          	sw	ra,12(sp)
80003708:	00812423          	sw	s0,8(sp)
8000370c:	00050413          	mv	s0,a0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
80003710:	c6dff0ef          	jal	ra,8000337c <pended_on_thread>
80003714:	00040593          	mv	a1,s0
80003718:	fcdff0ef          	jal	ra,800036e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
8000371c:	00d44783          	lbu	a5,13(s0)
80003720:	ffd7f793          	andi	a5,a5,-3
80003724:	00f406a3          	sb	a5,13(s0)
	thread->base.pended_on = NULL;
80003728:	00042423          	sw	zero,8(s0)
}
8000372c:	00c12083          	lw	ra,12(sp)
80003730:	00812403          	lw	s0,8(sp)
80003734:	01010113          	addi	sp,sp,16
80003738:	00008067          	ret

8000373c <z_priq_dumb_best>:

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
8000373c:	00050793          	mv	a5,a0
	return list->head == list;
80003740:	00052503          	lw	a0,0(a0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80003744:	00a78463          	beq	a5,a0,8000374c <z_priq_dumb_best+0x10>

	if (n != NULL) {
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return thread;
}
80003748:	00008067          	ret
	struct k_thread *thread = NULL;
8000374c:	00000513          	li	a0,0
	return thread;
80003750:	ff9ff06f          	j	80003748 <z_priq_dumb_best+0xc>

80003754 <update_cache>:
{
80003754:	ff010113          	addi	sp,sp,-16
80003758:	00112623          	sw	ra,12(sp)
8000375c:	00812423          	sw	s0,8(sp)
80003760:	00912223          	sw	s1,4(sp)
80003764:	00050493          	mv	s1,a0
	return _priq_run_best(curr_cpu_runq());
80003768:	80007537          	lui	a0,0x80007
8000376c:	d6450513          	addi	a0,a0,-668 # 80006d64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d65>
80003770:	fcdff0ef          	jal	ra,8000373c <z_priq_dumb_best>
80003774:	00050413          	mv	s0,a0
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
80003778:	02050e63          	beqz	a0,800037b4 <update_cache+0x60>
	if (preempt_ok != 0) {
8000377c:	04049463          	bnez	s1,800037c4 <update_cache+0x70>
	if (z_is_thread_prevented_from_running(_current)) {
80003780:	800077b7          	lui	a5,0x80007
80003784:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003788:	0087a703          	lw	a4,8(a5)
	uint8_t state = thread->base.thread_state;
8000378c:	00d74783          	lbu	a5,13(a4)
80003790:	01f7f793          	andi	a5,a5,31
80003794:	02079863          	bnez	a5,800037c4 <update_cache+0x70>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
80003798:	00e75683          	lhu	a3,14(a4)
	if (is_preempt(_current) || is_metairq(thread)) {
8000379c:	07f00793          	li	a5,127
800037a0:	02d7f263          	bgeu	a5,a3,800037c4 <update_cache+0x70>
		_kernel.ready_q.cache = _current;
800037a4:	800077b7          	lui	a5,0x80007
800037a8:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800037ac:	00e7ac23          	sw	a4,24(a5)
800037b0:	0380006f          	j	800037e8 <update_cache+0x94>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
800037b4:	800077b7          	lui	a5,0x80007
800037b8:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800037bc:	00c7a403          	lw	s0,12(a5)
800037c0:	fbdff06f          	j	8000377c <update_cache+0x28>
		if (thread != _current) {
800037c4:	800077b7          	lui	a5,0x80007
800037c8:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800037cc:	0087a783          	lw	a5,8(a5)
800037d0:	00878663          	beq	a5,s0,800037dc <update_cache+0x88>
			z_reset_time_slice(thread);
800037d4:	00040513          	mv	a0,s0
800037d8:	c05ff0ef          	jal	ra,800033dc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
800037dc:	800077b7          	lui	a5,0x80007
800037e0:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800037e4:	0087ac23          	sw	s0,24(a5)
}
800037e8:	00c12083          	lw	ra,12(sp)
800037ec:	00812403          	lw	s0,8(sp)
800037f0:	00412483          	lw	s1,4(sp)
800037f4:	01010113          	addi	sp,sp,16
800037f8:	00008067          	ret

800037fc <move_thread_to_end_of_prio_q>:
{
800037fc:	ff010113          	addi	sp,sp,-16
80003800:	00112623          	sw	ra,12(sp)
80003804:	00812423          	sw	s0,8(sp)
80003808:	00912223          	sw	s1,4(sp)
8000380c:	00050493          	mv	s1,a0
	return (thread->base.thread_state & state) != 0U;
80003810:	00d54783          	lbu	a5,13(a0)
	if (z_is_thread_queued(thread)) {
80003814:	01879713          	slli	a4,a5,0x18
80003818:	41875713          	srai	a4,a4,0x18
8000381c:	02074863          	bltz	a4,8000384c <move_thread_to_end_of_prio_q+0x50>
	thread->base.thread_state |= _THREAD_QUEUED;
80003820:	00d4c783          	lbu	a5,13(s1)
80003824:	f807e793          	ori	a5,a5,-128
80003828:	00f486a3          	sb	a5,13(s1)
	return list->head == list;
8000382c:	800077b7          	lui	a5,0x80007
80003830:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003834:	01c7a403          	lw	s0,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80003838:	800077b7          	lui	a5,0x80007
8000383c:	d6478793          	addi	a5,a5,-668 # 80006d64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d65>
80003840:	04f41263          	bne	s0,a5,80003884 <move_thread_to_end_of_prio_q+0x88>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80003844:	00000413          	li	s0,0
80003848:	03c0006f          	j	80003884 <move_thread_to_end_of_prio_q+0x88>
	thread->base.thread_state &= ~_THREAD_QUEUED;
8000384c:	07f7f793          	andi	a5,a5,127
80003850:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
80003854:	00050593          	mv	a1,a0
80003858:	80007537          	lui	a0,0x80007
8000385c:	d6450513          	addi	a0,a0,-668 # 80006d64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d65>
80003860:	e85ff0ef          	jal	ra,800036e4 <z_priq_dumb_remove>
}
80003864:	fbdff06f          	j	80003820 <move_thread_to_end_of_prio_q+0x24>
	sys_dnode_t *const prev = successor->prev;
80003868:	00442783          	lw	a5,4(s0)
	node->prev = prev;
8000386c:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
80003870:	0084a023          	sw	s0,0(s1)
	prev->next = node;
80003874:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
80003878:	00942223          	sw	s1,4(s0)
}
8000387c:	05c0006f          	j	800038d8 <move_thread_to_end_of_prio_q+0xdc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80003880:	00000413          	li	s0,0
80003884:	02040863          	beqz	s0,800038b4 <move_thread_to_end_of_prio_q+0xb8>
		if (z_sched_prio_cmp(thread, t) > 0) {
80003888:	00040593          	mv	a1,s0
8000388c:	00048513          	mv	a0,s1
80003890:	b31ff0ef          	jal	ra,800033c0 <z_sched_prio_cmp>
80003894:	fca04ae3          	bgtz	a0,80003868 <move_thread_to_end_of_prio_q+0x6c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80003898:	fe0406e3          	beqz	s0,80003884 <move_thread_to_end_of_prio_q+0x88>
	return (node == list->tail) ? NULL : node->next;
8000389c:	800077b7          	lui	a5,0x80007
800038a0:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800038a4:	0207a783          	lw	a5,32(a5)
800038a8:	fcf40ce3          	beq	s0,a5,80003880 <move_thread_to_end_of_prio_q+0x84>
800038ac:	00042403          	lw	s0,0(s0)
800038b0:	fd5ff06f          	j	80003884 <move_thread_to_end_of_prio_q+0x88>
	sys_dnode_t *const tail = list->tail;
800038b4:	800077b7          	lui	a5,0x80007
800038b8:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800038bc:	0207a683          	lw	a3,32(a5)
	node->next = list;
800038c0:	80007737          	lui	a4,0x80007
800038c4:	d6470713          	addi	a4,a4,-668 # 80006d64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d65>
800038c8:	00e4a023          	sw	a4,0(s1)
	node->prev = tail;
800038cc:	00d4a223          	sw	a3,4(s1)
	tail->next = node;
800038d0:	0096a023          	sw	s1,0(a3)
	list->tail = node;
800038d4:	0297a023          	sw	s1,32(a5)
	update_cache(thread == _current);
800038d8:	800077b7          	lui	a5,0x80007
800038dc:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800038e0:	0087a503          	lw	a0,8(a5)
800038e4:	40950533          	sub	a0,a0,s1
800038e8:	00153513          	seqz	a0,a0
800038ec:	e69ff0ef          	jal	ra,80003754 <update_cache>
}
800038f0:	00c12083          	lw	ra,12(sp)
800038f4:	00812403          	lw	s0,8(sp)
800038f8:	00412483          	lw	s1,4(sp)
800038fc:	01010113          	addi	sp,sp,16
80003900:	00008067          	ret

80003904 <slice_expired_locked>:
{
80003904:	ff010113          	addi	sp,sp,-16
80003908:	00112623          	sw	ra,12(sp)
8000390c:	00812423          	sw	s0,8(sp)
80003910:	00912223          	sw	s1,4(sp)
80003914:	00050413          	mv	s0,a0
	struct k_thread *curr = _current;
80003918:	800077b7          	lui	a5,0x80007
8000391c:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003920:	0087a483          	lw	s1,8(a5)
	uint8_t state = thread->base.thread_state;
80003924:	00d4c783          	lbu	a5,13(s1)
	if (!z_is_thread_prevented_from_running(curr)) {
80003928:	01f7f793          	andi	a5,a5,31
8000392c:	02078263          	beqz	a5,80003950 <slice_expired_locked+0x4c>
	z_reset_time_slice(curr);
80003930:	00048513          	mv	a0,s1
80003934:	aa9ff0ef          	jal	ra,800033dc <z_reset_time_slice>
}
80003938:	00040513          	mv	a0,s0
8000393c:	00c12083          	lw	ra,12(sp)
80003940:	00812403          	lw	s0,8(sp)
80003944:	00412483          	lw	s1,4(sp)
80003948:	01010113          	addi	sp,sp,16
8000394c:	00008067          	ret
		move_thread_to_end_of_prio_q(curr);
80003950:	00048513          	mv	a0,s1
80003954:	ea9ff0ef          	jal	ra,800037fc <move_thread_to_end_of_prio_q>
80003958:	fd9ff06f          	j	80003930 <slice_expired_locked+0x2c>

8000395c <z_time_slice>:
{
8000395c:	ff010113          	addi	sp,sp,-16
80003960:	00112623          	sw	ra,12(sp)
80003964:	00812423          	sw	s0,8(sp)
80003968:	00912223          	sw	s1,4(sp)
8000396c:	01212023          	sw	s2,0(sp)
80003970:	00050913          	mv	s2,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003974:	300474f3          	csrrci	s1,mstatus,8
80003978:	00048413          	mv	s0,s1
	if (slice_time(_current) && sliceable(_current)) {
8000397c:	800077b7          	lui	a5,0x80007
80003980:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003984:	0087a503          	lw	a0,8(a5)
	int ret = slice_ticks;
80003988:	800077b7          	lui	a5,0x80007
8000398c:	c1c7a783          	lw	a5,-996(a5) # 80006c1c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c1d>
	if (slice_time(_current) && sliceable(_current)) {
80003990:	04078063          	beqz	a5,800039d0 <z_time_slice+0x74>
80003994:	985ff0ef          	jal	ra,80003318 <sliceable>
80003998:	02050c63          	beqz	a0,800039d0 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
8000399c:	800077b7          	lui	a5,0x80007
800039a0:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800039a4:	0107a783          	lw	a5,16(a5)
800039a8:	00f95c63          	bge	s2,a5,800039c0 <z_time_slice+0x64>
			_current_cpu->slice_ticks -= ticks;
800039ac:	80007737          	lui	a4,0x80007
800039b0:	412787b3          	sub	a5,a5,s2
800039b4:	d4870713          	addi	a4,a4,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800039b8:	00f72823          	sw	a5,16(a4)
800039bc:	0200006f          	j	800039dc <z_time_slice+0x80>
			key = slice_expired_locked(key);
800039c0:	00048513          	mv	a0,s1
800039c4:	f41ff0ef          	jal	ra,80003904 <slice_expired_locked>
800039c8:	00050413          	mv	s0,a0
800039cc:	0100006f          	j	800039dc <z_time_slice+0x80>
		_current_cpu->slice_ticks = 0;
800039d0:	800077b7          	lui	a5,0x80007
800039d4:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800039d8:	0007a823          	sw	zero,16(a5)
			  : "r" (key & MSTATUS_IEN)
800039dc:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
800039e0:	30042073          	csrs	mstatus,s0
}
800039e4:	00c12083          	lw	ra,12(sp)
800039e8:	00812403          	lw	s0,8(sp)
800039ec:	00412483          	lw	s1,4(sp)
800039f0:	00012903          	lw	s2,0(sp)
800039f4:	01010113          	addi	sp,sp,16
800039f8:	00008067          	ret

800039fc <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
800039fc:	00d54783          	lbu	a5,13(a0)
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
80003a00:	01879713          	slli	a4,a5,0x18
80003a04:	41875713          	srai	a4,a4,0x18
80003a08:	0e074463          	bltz	a4,80003af0 <ready_thread+0xf4>
{
80003a0c:	ff010113          	addi	sp,sp,-16
80003a10:	00112623          	sw	ra,12(sp)
80003a14:	00812423          	sw	s0,8(sp)
80003a18:	00912223          	sw	s1,4(sp)
80003a1c:	01212023          	sw	s2,0(sp)
80003a20:	00050413          	mv	s0,a0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
80003a24:	01f7f713          	andi	a4,a5,31
80003a28:	00071663          	bnez	a4,80003a34 <ready_thread+0x38>
	return node->next != NULL;
80003a2c:	01852903          	lw	s2,24(a0)
80003a30:	00090e63          	beqz	s2,80003a4c <ready_thread+0x50>
}
80003a34:	00c12083          	lw	ra,12(sp)
80003a38:	00812403          	lw	s0,8(sp)
80003a3c:	00412483          	lw	s1,4(sp)
80003a40:	00012903          	lw	s2,0(sp)
80003a44:	01010113          	addi	sp,sp,16
80003a48:	00008067          	ret
	thread->base.thread_state |= _THREAD_QUEUED;
80003a4c:	f807e793          	ori	a5,a5,-128
80003a50:	00f506a3          	sb	a5,13(a0)
	return list->head == list;
80003a54:	800077b7          	lui	a5,0x80007
80003a58:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003a5c:	01c7a483          	lw	s1,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80003a60:	800077b7          	lui	a5,0x80007
80003a64:	d6478793          	addi	a5,a5,-668 # 80006d64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d65>
80003a68:	02f49463          	bne	s1,a5,80003a90 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80003a6c:	00090493          	mv	s1,s2
80003a70:	0200006f          	j	80003a90 <ready_thread+0x94>
	sys_dnode_t *const prev = successor->prev;
80003a74:	0044a783          	lw	a5,4(s1)
	node->prev = prev;
80003a78:	00f42223          	sw	a5,4(s0)
	node->next = successor;
80003a7c:	00942023          	sw	s1,0(s0)
	prev->next = node;
80003a80:	0087a023          	sw	s0,0(a5)
	successor->prev = node;
80003a84:	0084a223          	sw	s0,4(s1)
}
80003a88:	05c0006f          	j	80003ae4 <ready_thread+0xe8>
80003a8c:	00090493          	mv	s1,s2
80003a90:	02048863          	beqz	s1,80003ac0 <ready_thread+0xc4>
		if (z_sched_prio_cmp(thread, t) > 0) {
80003a94:	00048593          	mv	a1,s1
80003a98:	00040513          	mv	a0,s0
80003a9c:	925ff0ef          	jal	ra,800033c0 <z_sched_prio_cmp>
80003aa0:	fca04ae3          	bgtz	a0,80003a74 <ready_thread+0x78>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80003aa4:	fe0486e3          	beqz	s1,80003a90 <ready_thread+0x94>
	return (node == list->tail) ? NULL : node->next;
80003aa8:	800077b7          	lui	a5,0x80007
80003aac:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003ab0:	0207a783          	lw	a5,32(a5)
80003ab4:	fcf48ce3          	beq	s1,a5,80003a8c <ready_thread+0x90>
80003ab8:	0004a483          	lw	s1,0(s1)
80003abc:	fd5ff06f          	j	80003a90 <ready_thread+0x94>
	sys_dnode_t *const tail = list->tail;
80003ac0:	800077b7          	lui	a5,0x80007
80003ac4:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003ac8:	0207a683          	lw	a3,32(a5)
	node->next = list;
80003acc:	80007737          	lui	a4,0x80007
80003ad0:	d6470713          	addi	a4,a4,-668 # 80006d64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d65>
80003ad4:	00e42023          	sw	a4,0(s0)
	node->prev = tail;
80003ad8:	00d42223          	sw	a3,4(s0)
	tail->next = node;
80003adc:	0086a023          	sw	s0,0(a3)
	list->tail = node;
80003ae0:	0287a023          	sw	s0,32(a5)
		update_cache(0);
80003ae4:	00000513          	li	a0,0
80003ae8:	c6dff0ef          	jal	ra,80003754 <update_cache>
}
80003aec:	f49ff06f          	j	80003a34 <ready_thread+0x38>
80003af0:	00008067          	ret

80003af4 <z_ready_thread>:
{
80003af4:	ff010113          	addi	sp,sp,-16
80003af8:	00112623          	sw	ra,12(sp)
80003afc:	00812423          	sw	s0,8(sp)
80003b00:	00912223          	sw	s1,4(sp)
80003b04:	00050413          	mv	s0,a0
	LOCKED(&sched_spinlock) {
80003b08:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003b0c:	300474f3          	csrrci	s1,mstatus,8
80003b10:	0100006f          	j	80003b20 <z_ready_thread+0x2c>
			  : "r" (key & MSTATUS_IEN)
80003b14:	0084f793          	andi	a5,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80003b18:	3007a073          	csrs	mstatus,a5
80003b1c:	00100793          	li	a5,1
80003b20:	00079e63          	bnez	a5,80003b3c <z_ready_thread+0x48>
		if (!thread_active_elsewhere(thread)) {
80003b24:	00040513          	mv	a0,s0
80003b28:	84dff0ef          	jal	ra,80003374 <thread_active_elsewhere>
80003b2c:	fe0514e3          	bnez	a0,80003b14 <z_ready_thread+0x20>
			ready_thread(thread);
80003b30:	00040513          	mv	a0,s0
80003b34:	ec9ff0ef          	jal	ra,800039fc <ready_thread>
80003b38:	fddff06f          	j	80003b14 <z_ready_thread+0x20>
}
80003b3c:	00c12083          	lw	ra,12(sp)
80003b40:	00812403          	lw	s0,8(sp)
80003b44:	00412483          	lw	s1,4(sp)
80003b48:	01010113          	addi	sp,sp,16
80003b4c:	00008067          	ret

80003b50 <z_sched_start>:
{
80003b50:	ff010113          	addi	sp,sp,-16
80003b54:	00112623          	sw	ra,12(sp)
80003b58:	00812423          	sw	s0,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003b5c:	30047473          	csrrci	s0,mstatus,8
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
80003b60:	00d54783          	lbu	a5,13(a0)
	if (z_has_thread_started(thread)) {
80003b64:	0047f713          	andi	a4,a5,4
80003b68:	00071e63          	bnez	a4,80003b84 <z_sched_start+0x34>
	__asm__ volatile ("csrs mstatus, %0"
80003b6c:	00847413          	andi	s0,s0,8
80003b70:	30042073          	csrs	mstatus,s0
}
80003b74:	00c12083          	lw	ra,12(sp)
80003b78:	00812403          	lw	s0,8(sp)
80003b7c:	01010113          	addi	sp,sp,16
80003b80:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_PRESTART;
80003b84:	ffb7f793          	andi	a5,a5,-5
80003b88:	00f506a3          	sb	a5,13(a0)
	ready_thread(thread);
80003b8c:	e71ff0ef          	jal	ra,800039fc <ready_thread>
	z_reschedule(&sched_spinlock, key);
80003b90:	00040593          	mv	a1,s0
80003b94:	80007537          	lui	a0,0x80007
80003b98:	d6c50513          	addi	a0,a0,-660 # 80006d6c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d6d>
80003b9c:	ae1ff0ef          	jal	ra,8000367c <z_reschedule>
80003ba0:	fd5ff06f          	j	80003b74 <z_sched_start+0x24>

80003ba4 <z_thread_timeout>:
{
80003ba4:	ff010113          	addi	sp,sp,-16
80003ba8:	00112623          	sw	ra,12(sp)
80003bac:	00812423          	sw	s0,8(sp)
80003bb0:	00912223          	sw	s1,4(sp)
80003bb4:	01212023          	sw	s2,0(sp)
80003bb8:	00050413          	mv	s0,a0
	struct k_thread *thread = CONTAINER_OF(timeout,
80003bbc:	fe850913          	addi	s2,a0,-24
	LOCKED(&sched_spinlock) {
80003bc0:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003bc4:	300474f3          	csrrci	s1,mstatus,8
80003bc8:	02c0006f          	j	80003bf4 <z_thread_timeout+0x50>
80003bcc:	ff544783          	lbu	a5,-11(s0)
80003bd0:	ffb7f713          	andi	a4,a5,-5
80003bd4:	fee40aa3          	sb	a4,-11(s0)
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
80003bd8:	feb7f793          	andi	a5,a5,-21
80003bdc:	fef40aa3          	sb	a5,-11(s0)
			ready_thread(thread);
80003be0:	00090513          	mv	a0,s2
80003be4:	e19ff0ef          	jal	ra,800039fc <ready_thread>
			  : "r" (key & MSTATUS_IEN)
80003be8:	0084f793          	andi	a5,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80003bec:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80003bf0:	00100793          	li	a5,1
80003bf4:	02079263          	bnez	a5,80003c18 <z_thread_timeout+0x74>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
80003bf8:	ff544783          	lbu	a5,-11(s0)
		if (!killed) {
80003bfc:	0287f793          	andi	a5,a5,40
80003c00:	fe0794e3          	bnez	a5,80003be8 <z_thread_timeout+0x44>
			if (thread->base.pended_on != NULL) {
80003c04:	ff042783          	lw	a5,-16(s0)
80003c08:	fc0782e3          	beqz	a5,80003bcc <z_thread_timeout+0x28>
				unpend_thread_no_timeout(thread);
80003c0c:	00090513          	mv	a0,s2
80003c10:	af1ff0ef          	jal	ra,80003700 <unpend_thread_no_timeout>
80003c14:	fb9ff06f          	j	80003bcc <z_thread_timeout+0x28>
}
80003c18:	00c12083          	lw	ra,12(sp)
80003c1c:	00812403          	lw	s0,8(sp)
80003c20:	00412483          	lw	s1,4(sp)
80003c24:	00012903          	lw	s2,0(sp)
80003c28:	01010113          	addi	sp,sp,16
80003c2c:	00008067          	ret

80003c30 <unpend_all>:
}

#endif /* CONFIG_SCHED_CPU_MASK */

static inline void unpend_all(_wait_q_t *wait_q)
{
80003c30:	ff010113          	addi	sp,sp,-16
80003c34:	00112623          	sw	ra,12(sp)
80003c38:	00812423          	sw	s0,8(sp)
80003c3c:	00912223          	sw	s1,4(sp)
80003c40:	00050493          	mv	s1,a0
	return list->head == list;
80003c44:	0004a403          	lw	s0,0(s1)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80003c48:	02848463          	beq	s1,s0,80003c70 <unpend_all+0x40>
	struct k_thread *thread;

	while ((thread = z_waitq_head(wait_q)) != NULL) {
80003c4c:	02040263          	beqz	s0,80003c70 <unpend_all+0x40>
		unpend_thread_no_timeout(thread);
80003c50:	00040513          	mv	a0,s0
80003c54:	aadff0ef          	jal	ra,80003700 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
80003c58:	01840513          	addi	a0,s0,24
80003c5c:	0fd000ef          	jal	ra,80004558 <z_abort_timeout>
80003c60:	06042c23          	sw	zero,120(s0)
		(void)z_abort_thread_timeout(thread);
		arch_thread_return_value_set(thread, 0);
		ready_thread(thread);
80003c64:	00040513          	mv	a0,s0
80003c68:	d95ff0ef          	jal	ra,800039fc <ready_thread>
80003c6c:	fd9ff06f          	j	80003c44 <unpend_all+0x14>
	}
}
80003c70:	00c12083          	lw	ra,12(sp)
80003c74:	00812403          	lw	s0,8(sp)
80003c78:	00412483          	lw	s1,4(sp)
80003c7c:	01010113          	addi	sp,sp,16
80003c80:	00008067          	ret

80003c84 <unready_thread>:
{
80003c84:	ff010113          	addi	sp,sp,-16
80003c88:	00112623          	sw	ra,12(sp)
80003c8c:	00812423          	sw	s0,8(sp)
80003c90:	00050413          	mv	s0,a0
	return (thread->base.thread_state & state) != 0U;
80003c94:	00d54783          	lbu	a5,13(a0)
	if (z_is_thread_queued(thread)) {
80003c98:	01879713          	slli	a4,a5,0x18
80003c9c:	41875713          	srai	a4,a4,0x18
80003ca0:	02074663          	bltz	a4,80003ccc <unready_thread+0x48>
	update_cache(thread == _current);
80003ca4:	800077b7          	lui	a5,0x80007
80003ca8:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003cac:	0087a503          	lw	a0,8(a5)
80003cb0:	40850533          	sub	a0,a0,s0
80003cb4:	00153513          	seqz	a0,a0
80003cb8:	a9dff0ef          	jal	ra,80003754 <update_cache>
}
80003cbc:	00c12083          	lw	ra,12(sp)
80003cc0:	00812403          	lw	s0,8(sp)
80003cc4:	01010113          	addi	sp,sp,16
80003cc8:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_QUEUED;
80003ccc:	07f7f793          	andi	a5,a5,127
80003cd0:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
80003cd4:	00050593          	mv	a1,a0
80003cd8:	80007537          	lui	a0,0x80007
80003cdc:	d6450513          	addi	a0,a0,-668 # 80006d64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d65>
80003ce0:	a05ff0ef          	jal	ra,800036e4 <z_priq_dumb_remove>
}
80003ce4:	fc1ff06f          	j	80003ca4 <unready_thread+0x20>

80003ce8 <add_to_waitq_locked>:
{
80003ce8:	ff010113          	addi	sp,sp,-16
80003cec:	00112623          	sw	ra,12(sp)
80003cf0:	00812423          	sw	s0,8(sp)
80003cf4:	00912223          	sw	s1,4(sp)
80003cf8:	01212023          	sw	s2,0(sp)
80003cfc:	00050493          	mv	s1,a0
80003d00:	00058913          	mv	s2,a1
	unready_thread(thread);
80003d04:	f81ff0ef          	jal	ra,80003c84 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
80003d08:	00d4c783          	lbu	a5,13(s1)
80003d0c:	0027e793          	ori	a5,a5,2
80003d10:	00f486a3          	sb	a5,13(s1)
	if (wait_q != NULL) {
80003d14:	06090863          	beqz	s2,80003d84 <add_to_waitq_locked+0x9c>
		thread->base.pended_on = wait_q;
80003d18:	0124a423          	sw	s2,8(s1)
	return list->head == list;
80003d1c:	00092403          	lw	s0,0(s2)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80003d20:	02891463          	bne	s2,s0,80003d48 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80003d24:	00000413          	li	s0,0
80003d28:	0200006f          	j	80003d48 <add_to_waitq_locked+0x60>
	sys_dnode_t *const prev = successor->prev;
80003d2c:	00442783          	lw	a5,4(s0)
	node->prev = prev;
80003d30:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
80003d34:	0084a023          	sw	s0,0(s1)
	prev->next = node;
80003d38:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
80003d3c:	00942223          	sw	s1,4(s0)
}
80003d40:	0440006f          	j	80003d84 <add_to_waitq_locked+0x9c>
80003d44:	00000413          	li	s0,0
80003d48:	02040463          	beqz	s0,80003d70 <add_to_waitq_locked+0x88>
		if (z_sched_prio_cmp(thread, t) > 0) {
80003d4c:	00040593          	mv	a1,s0
80003d50:	00048513          	mv	a0,s1
80003d54:	e6cff0ef          	jal	ra,800033c0 <z_sched_prio_cmp>
80003d58:	fca04ae3          	bgtz	a0,80003d2c <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80003d5c:	fe0406e3          	beqz	s0,80003d48 <add_to_waitq_locked+0x60>
	return (node == list->tail) ? NULL : node->next;
80003d60:	00492703          	lw	a4,4(s2)
80003d64:	fee400e3          	beq	s0,a4,80003d44 <add_to_waitq_locked+0x5c>
80003d68:	00042403          	lw	s0,0(s0)
80003d6c:	fddff06f          	j	80003d48 <add_to_waitq_locked+0x60>
	sys_dnode_t *const tail = list->tail;
80003d70:	00492783          	lw	a5,4(s2)
	node->next = list;
80003d74:	0124a023          	sw	s2,0(s1)
	node->prev = tail;
80003d78:	00f4a223          	sw	a5,4(s1)
	tail->next = node;
80003d7c:	0097a023          	sw	s1,0(a5)
	list->tail = node;
80003d80:	00992223          	sw	s1,4(s2)
}
80003d84:	00c12083          	lw	ra,12(sp)
80003d88:	00812403          	lw	s0,8(sp)
80003d8c:	00412483          	lw	s1,4(sp)
80003d90:	00012903          	lw	s2,0(sp)
80003d94:	01010113          	addi	sp,sp,16
80003d98:	00008067          	ret

80003d9c <pend>:
{
80003d9c:	fe010113          	addi	sp,sp,-32
80003da0:	00112e23          	sw	ra,28(sp)
80003da4:	00812c23          	sw	s0,24(sp)
80003da8:	00912a23          	sw	s1,20(sp)
80003dac:	01212823          	sw	s2,16(sp)
80003db0:	01312623          	sw	s3,12(sp)
80003db4:	01412423          	sw	s4,8(sp)
80003db8:	00050413          	mv	s0,a0
80003dbc:	00058493          	mv	s1,a1
80003dc0:	00060a13          	mv	s4,a2
80003dc4:	00068993          	mv	s3,a3
	LOCKED(&sched_spinlock) {
80003dc8:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003dcc:	30047973          	csrrci	s2,mstatus,8
80003dd0:	01c0006f          	j	80003dec <pend+0x50>
		add_to_waitq_locked(thread, wait_q);
80003dd4:	00048593          	mv	a1,s1
80003dd8:	00040513          	mv	a0,s0
80003ddc:	f0dff0ef          	jal	ra,80003ce8 <add_to_waitq_locked>
			  : "r" (key & MSTATUS_IEN)
80003de0:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80003de4:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80003de8:	00100793          	li	a5,1
80003dec:	fe0784e3          	beqz	a5,80003dd4 <pend+0x38>
	add_thread_timeout(thread, timeout);
80003df0:	000a0593          	mv	a1,s4
80003df4:	00098613          	mv	a2,s3
80003df8:	00040513          	mv	a0,s0
80003dfc:	d88ff0ef          	jal	ra,80003384 <add_thread_timeout>
}
80003e00:	01c12083          	lw	ra,28(sp)
80003e04:	01812403          	lw	s0,24(sp)
80003e08:	01412483          	lw	s1,20(sp)
80003e0c:	01012903          	lw	s2,16(sp)
80003e10:	00c12983          	lw	s3,12(sp)
80003e14:	00812a03          	lw	s4,8(sp)
80003e18:	02010113          	addi	sp,sp,32
80003e1c:	00008067          	ret

80003e20 <z_pend_curr>:
{
80003e20:	ff010113          	addi	sp,sp,-16
80003e24:	00112623          	sw	ra,12(sp)
80003e28:	00812423          	sw	s0,8(sp)
80003e2c:	00912223          	sw	s1,4(sp)
80003e30:	00050413          	mv	s0,a0
80003e34:	00058493          	mv	s1,a1
80003e38:	00060593          	mv	a1,a2
80003e3c:	00068613          	mv	a2,a3
80003e40:	00070693          	mv	a3,a4
	pend(_current, wait_q, timeout);
80003e44:	800077b7          	lui	a5,0x80007
80003e48:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003e4c:	0087a503          	lw	a0,8(a5)
80003e50:	f4dff0ef          	jal	ra,80003d9c <pend>
	return z_swap(lock, key);
80003e54:	00048593          	mv	a1,s1
80003e58:	00040513          	mv	a0,s0
80003e5c:	f8cff0ef          	jal	ra,800035e8 <z_swap>
}
80003e60:	00c12083          	lw	ra,12(sp)
80003e64:	00812403          	lw	s0,8(sp)
80003e68:	00412483          	lw	s1,4(sp)
80003e6c:	01010113          	addi	sp,sp,16
80003e70:	00008067          	ret

80003e74 <z_set_prio>:
{
80003e74:	fe010113          	addi	sp,sp,-32
80003e78:	00112e23          	sw	ra,28(sp)
80003e7c:	00812c23          	sw	s0,24(sp)
80003e80:	00912a23          	sw	s1,20(sp)
80003e84:	01212823          	sw	s2,16(sp)
80003e88:	01312623          	sw	s3,12(sp)
80003e8c:	01412423          	sw	s4,8(sp)
80003e90:	01512223          	sw	s5,4(sp)
80003e94:	00050493          	mv	s1,a0
80003e98:	00058913          	mv	s2,a1
	LOCKED(&sched_spinlock) {
80003e9c:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003ea0:	300479f3          	csrrci	s3,mstatus,8
	bool need_sched = 0;
80003ea4:	00000513          	li	a0,0
80003ea8:	0980006f          	j	80003f40 <z_set_prio+0xcc>
	sys_dnode_t *const prev = successor->prev;
80003eac:	00442783          	lw	a5,4(s0)
	node->prev = prev;
80003eb0:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
80003eb4:	0084a023          	sw	s0,0(s1)
	prev->next = node;
80003eb8:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
80003ebc:	00942223          	sw	s1,4(s0)
}
80003ec0:	05c0006f          	j	80003f1c <z_set_prio+0xa8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80003ec4:	000a0413          	mv	s0,s4
80003ec8:	02040863          	beqz	s0,80003ef8 <z_set_prio+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
80003ecc:	00040593          	mv	a1,s0
80003ed0:	00048513          	mv	a0,s1
80003ed4:	cecff0ef          	jal	ra,800033c0 <z_sched_prio_cmp>
80003ed8:	fca04ae3          	bgtz	a0,80003eac <z_set_prio+0x38>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80003edc:	fe0406e3          	beqz	s0,80003ec8 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
80003ee0:	800077b7          	lui	a5,0x80007
80003ee4:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003ee8:	0207a783          	lw	a5,32(a5)
80003eec:	fcf40ce3          	beq	s0,a5,80003ec4 <z_set_prio+0x50>
80003ef0:	00042403          	lw	s0,0(s0)
80003ef4:	fd5ff06f          	j	80003ec8 <z_set_prio+0x54>
	sys_dnode_t *const tail = list->tail;
80003ef8:	800077b7          	lui	a5,0x80007
80003efc:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003f00:	0207a683          	lw	a3,32(a5)
	node->next = list;
80003f04:	80007737          	lui	a4,0x80007
80003f08:	d6470713          	addi	a4,a4,-668 # 80006d64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d65>
80003f0c:	00e4a023          	sw	a4,0(s1)
	node->prev = tail;
80003f10:	00d4a223          	sw	a3,4(s1)
	tail->next = node;
80003f14:	0096a023          	sw	s1,0(a3)
	list->tail = node;
80003f18:	0297a023          	sw	s1,32(a5)
			update_cache(1);
80003f1c:	00100513          	li	a0,1
80003f20:	835ff0ef          	jal	ra,80003754 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
80003f24:	00100513          	li	a0,1
80003f28:	00c0006f          	j	80003f34 <z_set_prio+0xc0>
			thread->base.prio = prio;
80003f2c:	01248723          	sb	s2,14(s1)
80003f30:	00000513          	li	a0,0
			  : "r" (key & MSTATUS_IEN)
80003f34:	0089f793          	andi	a5,s3,8
	__asm__ volatile ("csrs mstatus, %0"
80003f38:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80003f3c:	00100793          	li	a5,1
80003f40:	04079e63          	bnez	a5,80003f9c <z_set_prio+0x128>
	uint8_t state = thread->base.thread_state;
80003f44:	00d4c783          	lbu	a5,13(s1)
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
80003f48:	01f7f713          	andi	a4,a5,31
80003f4c:	fe0710e3          	bnez	a4,80003f2c <z_set_prio+0xb8>
	return node->next != NULL;
80003f50:	0184aa03          	lw	s4,24(s1)
80003f54:	fc0a1ce3          	bnez	s4,80003f2c <z_set_prio+0xb8>
	thread->base.thread_state &= ~_THREAD_QUEUED;
80003f58:	07f7f793          	andi	a5,a5,127
80003f5c:	00f486a3          	sb	a5,13(s1)
	_priq_run_remove(thread_runq(thread), thread);
80003f60:	00048593          	mv	a1,s1
80003f64:	80007ab7          	lui	s5,0x80007
80003f68:	d64a8513          	addi	a0,s5,-668 # 80006d64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d65>
80003f6c:	f78ff0ef          	jal	ra,800036e4 <z_priq_dumb_remove>
				thread->base.prio = prio;
80003f70:	01248723          	sb	s2,14(s1)
	thread->base.thread_state |= _THREAD_QUEUED;
80003f74:	00d4c783          	lbu	a5,13(s1)
80003f78:	f807e793          	ori	a5,a5,-128
80003f7c:	00f486a3          	sb	a5,13(s1)
	return list->head == list;
80003f80:	800077b7          	lui	a5,0x80007
80003f84:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003f88:	01c7a403          	lw	s0,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80003f8c:	d64a8a93          	addi	s5,s5,-668
80003f90:	f3541ce3          	bne	s0,s5,80003ec8 <z_set_prio+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80003f94:	000a0413          	mv	s0,s4
80003f98:	f31ff06f          	j	80003ec8 <z_set_prio+0x54>
}
80003f9c:	01c12083          	lw	ra,28(sp)
80003fa0:	01812403          	lw	s0,24(sp)
80003fa4:	01412483          	lw	s1,20(sp)
80003fa8:	01012903          	lw	s2,16(sp)
80003fac:	00c12983          	lw	s3,12(sp)
80003fb0:	00812a03          	lw	s4,8(sp)
80003fb4:	00412a83          	lw	s5,4(sp)
80003fb8:	02010113          	addi	sp,sp,32
80003fbc:	00008067          	ret

80003fc0 <k_sched_unlock>:
{
80003fc0:	ff010113          	addi	sp,sp,-16
80003fc4:	00112623          	sw	ra,12(sp)
80003fc8:	00812423          	sw	s0,8(sp)
	LOCKED(&sched_spinlock) {
80003fcc:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003fd0:	30047473          	csrrci	s0,mstatus,8
80003fd4:	0300006f          	j	80004004 <k_sched_unlock+0x44>
		++_current->base.sched_locked;
80003fd8:	800077b7          	lui	a5,0x80007
80003fdc:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80003fe0:	0087a703          	lw	a4,8(a5)
80003fe4:	00f74783          	lbu	a5,15(a4)
80003fe8:	00178793          	addi	a5,a5,1
80003fec:	00f707a3          	sb	a5,15(a4)
		update_cache(0);
80003ff0:	00000513          	li	a0,0
80003ff4:	f60ff0ef          	jal	ra,80003754 <update_cache>
			  : "r" (key & MSTATUS_IEN)
80003ff8:	00847793          	andi	a5,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80003ffc:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80004000:	00100793          	li	a5,1
80004004:	fc078ae3          	beqz	a5,80003fd8 <k_sched_unlock+0x18>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004008:	30047573          	csrrci	a0,mstatus,8
	(void) z_reschedule_irqlock(arch_irq_lock());
8000400c:	da8ff0ef          	jal	ra,800035b4 <z_reschedule_irqlock>
}
80004010:	00c12083          	lw	ra,12(sp)
80004014:	00812403          	lw	s0,8(sp)
80004018:	01010113          	addi	sp,sp,16
8000401c:	00008067          	ret

80004020 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
80004020:	00d54783          	lbu	a5,13(a0)
80004024:	0087f713          	andi	a4,a5,8
80004028:	08071663          	bnez	a4,800040b4 <end_thread+0x94>
{
8000402c:	ff010113          	addi	sp,sp,-16
80004030:	00112623          	sw	ra,12(sp)
80004034:	00812423          	sw	s0,8(sp)
80004038:	00050413          	mv	s0,a0
		thread->base.thread_state |= _THREAD_DEAD;
8000403c:	0087e713          	ori	a4,a5,8
80004040:	00e506a3          	sb	a4,13(a0)
		thread->base.thread_state &= ~_THREAD_ABORTING;
80004044:	fdf7f713          	andi	a4,a5,-33
80004048:	00876713          	ori	a4,a4,8
8000404c:	00e506a3          	sb	a4,13(a0)
		if (z_is_thread_queued(thread)) {
80004050:	01871713          	slli	a4,a4,0x18
80004054:	41875713          	srai	a4,a4,0x18
80004058:	02074e63          	bltz	a4,80004094 <end_thread+0x74>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
8000405c:	00842783          	lw	a5,8(s0)
80004060:	00078663          	beqz	a5,8000406c <end_thread+0x4c>
			unpend_thread_no_timeout(thread);
80004064:	00040513          	mv	a0,s0
80004068:	e98ff0ef          	jal	ra,80003700 <unpend_thread_no_timeout>
8000406c:	01840513          	addi	a0,s0,24
80004070:	4e8000ef          	jal	ra,80004558 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
80004074:	06c40513          	addi	a0,s0,108
80004078:	bb9ff0ef          	jal	ra,80003c30 <unpend_all>
		update_cache(1);
8000407c:	00100513          	li	a0,1
80004080:	ed4ff0ef          	jal	ra,80003754 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
80004084:	00c12083          	lw	ra,12(sp)
80004088:	00812403          	lw	s0,8(sp)
8000408c:	01010113          	addi	sp,sp,16
80004090:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_QUEUED;
80004094:	05f7f793          	andi	a5,a5,95
80004098:	0087e793          	ori	a5,a5,8
8000409c:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
800040a0:	00050593          	mv	a1,a0
800040a4:	80007537          	lui	a0,0x80007
800040a8:	d6450513          	addi	a0,a0,-668 # 80006d64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d65>
800040ac:	e38ff0ef          	jal	ra,800036e4 <z_priq_dumb_remove>
}
800040b0:	fadff06f          	j	8000405c <end_thread+0x3c>
800040b4:	00008067          	ret

800040b8 <z_unpend_first_thread>:
{
800040b8:	ff010113          	addi	sp,sp,-16
800040bc:	00112623          	sw	ra,12(sp)
800040c0:	00812423          	sw	s0,8(sp)
800040c4:	00912223          	sw	s1,4(sp)
800040c8:	01212023          	sw	s2,0(sp)
800040cc:	00050493          	mv	s1,a0
	LOCKED(&sched_spinlock) {
800040d0:	00000793          	li	a5,0
800040d4:	30047973          	csrrci	s2,mstatus,8
	struct k_thread *thread = NULL;
800040d8:	00000413          	li	s0,0
800040dc:	0100006f          	j	800040ec <z_unpend_first_thread+0x34>
			  : "r" (key & MSTATUS_IEN)
800040e0:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
800040e4:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
800040e8:	00100793          	li	a5,1
800040ec:	02079263          	bnez	a5,80004110 <z_unpend_first_thread+0x58>
		thread = _priq_wait_best(&wait_q->waitq);
800040f0:	00048513          	mv	a0,s1
800040f4:	e48ff0ef          	jal	ra,8000373c <z_priq_dumb_best>
800040f8:	00050413          	mv	s0,a0
		if (thread != NULL) {
800040fc:	fe0502e3          	beqz	a0,800040e0 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
80004100:	e00ff0ef          	jal	ra,80003700 <unpend_thread_no_timeout>
80004104:	01840513          	addi	a0,s0,24
80004108:	450000ef          	jal	ra,80004558 <z_abort_timeout>
8000410c:	fd5ff06f          	j	800040e0 <z_unpend_first_thread+0x28>
}
80004110:	00040513          	mv	a0,s0
80004114:	00c12083          	lw	ra,12(sp)
80004118:	00812403          	lw	s0,8(sp)
8000411c:	00412483          	lw	s1,4(sp)
80004120:	00012903          	lw	s2,0(sp)
80004124:	01010113          	addi	sp,sp,16
80004128:	00008067          	ret

8000412c <init_ready_q>:
	sys_dlist_init(&rq->runq);
8000412c:	00450793          	addi	a5,a0,4
	list->head = (sys_dnode_t *)list;
80004130:	00f52223          	sw	a5,4(a0)
	list->tail = (sys_dnode_t *)list;
80004134:	00f52423          	sw	a5,8(a0)
}
80004138:	00008067          	ret

8000413c <z_sched_init>:
{
8000413c:	ff010113          	addi	sp,sp,-16
80004140:	00112623          	sw	ra,12(sp)
	init_ready_q(&_kernel.ready_q);
80004144:	80007537          	lui	a0,0x80007
80004148:	d6050513          	addi	a0,a0,-672 # 80006d60 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d61>
8000414c:	fe1ff0ef          	jal	ra,8000412c <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
80004150:	00000593          	li	a1,0
80004154:	00000513          	li	a0,0
80004158:	ad4ff0ef          	jal	ra,8000342c <k_sched_time_slice_set>
}
8000415c:	00c12083          	lw	ra,12(sp)
80004160:	01010113          	addi	sp,sp,16
80004164:	00008067          	ret

80004168 <z_impl_z_current_get>:
	k_tid_t ret = _current_cpu->current;
80004168:	800077b7          	lui	a5,0x80007
}
8000416c:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80004170:	0087a503          	lw	a0,8(a5)
80004174:	00008067          	ret

80004178 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
80004178:	ff010113          	addi	sp,sp,-16
8000417c:	00112623          	sw	ra,12(sp)
80004180:	00812423          	sw	s0,8(sp)
80004184:	00912223          	sw	s1,4(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004188:	300474f3          	csrrci	s1,mstatus,8
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
8000418c:	00c54783          	lbu	a5,12(a0)
80004190:	0017f793          	andi	a5,a5,1
80004194:	02079063          	bnez	a5,800041b4 <z_thread_abort+0x3c>
80004198:	00050413          	mv	s0,a0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
8000419c:	00d54783          	lbu	a5,13(a0)
800041a0:	0087f793          	andi	a5,a5,8
800041a4:	02078c63          	beqz	a5,800041dc <z_thread_abort+0x64>
	__asm__ volatile ("csrs mstatus, %0"
800041a8:	0084f493          	andi	s1,s1,8
800041ac:	3004a073          	csrs	mstatus,s1
		k_spin_unlock(&sched_spinlock, key);
		return;
800041b0:	0180006f          	j	800041c8 <z_thread_abort+0x50>
800041b4:	0084f493          	andi	s1,s1,8
800041b8:	3004a073          	csrs	mstatus,s1
	return a0;
}

static inline uintptr_t arch_syscall_invoke1(uintptr_t arg1, uintptr_t call_id)
{
	register unsigned long a0 __asm__ ("a0") = arg1;
800041bc:	00400513          	li	a0,4
	register unsigned long t0 __asm__ ("t0") = call_id;
800041c0:	00000293          	li	t0,0

	__asm__ volatile ("ecall"
800041c4:	00000073          	ecall
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
800041c8:	00c12083          	lw	ra,12(sp)
800041cc:	00812403          	lw	s0,8(sp)
800041d0:	00412483          	lw	s1,4(sp)
800041d4:	01010113          	addi	sp,sp,16
800041d8:	00008067          	ret
	end_thread(thread);
800041dc:	e45ff0ef          	jal	ra,80004020 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
800041e0:	800077b7          	lui	a5,0x80007
800041e4:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
800041e8:	0087a783          	lw	a5,8(a5)
800041ec:	00878863          	beq	a5,s0,800041fc <z_thread_abort+0x84>
800041f0:	0084f493          	andi	s1,s1,8
800041f4:	3004a073          	csrs	mstatus,s1
800041f8:	fd1ff06f          	j	800041c8 <z_thread_abort+0x50>
800041fc:	800077b7          	lui	a5,0x80007
80004200:	d487a783          	lw	a5,-696(a5) # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80004204:	fe0796e3          	bnez	a5,800041f0 <z_thread_abort+0x78>
		z_swap(&sched_spinlock, key);
80004208:	00048593          	mv	a1,s1
8000420c:	80007537          	lui	a0,0x80007
80004210:	d6c50513          	addi	a0,a0,-660 # 80006d6c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d6d>
80004214:	bd4ff0ef          	jal	ra,800035e8 <z_swap>
80004218:	fd9ff06f          	j	800041f0 <z_thread_abort+0x78>

8000421c <z_impl_k_thread_abort>:

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(struct k_thread *thread)
{
8000421c:	ff010113          	addi	sp,sp,-16
80004220:	00112623          	sw	ra,12(sp)
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, abort, thread);

	z_thread_abort(thread);
80004224:	f55ff0ef          	jal	ra,80004178 <z_thread_abort>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_thread, abort, thread);
}
80004228:	00c12083          	lw	ra,12(sp)
8000422c:	01010113          	addi	sp,sp,16
80004230:	00008067          	ret

80004234 <first>:
	return list->head == list;
80004234:	80c18793          	addi	a5,gp,-2036 # 800091ec <timeout_list>
80004238:	0007a503          	lw	a0,0(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
8000423c:	00f50463          	beq	a0,a5,80004244 <first+0x10>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
80004240:	00008067          	ret
80004244:	00000513          	li	a0,0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
80004248:	ff9ff06f          	j	80004240 <first+0xc>

8000424c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
8000424c:	00050e63          	beqz	a0,80004268 <next+0x1c>
	return (node == list->tail) ? NULL : node->next;
80004250:	80c18713          	addi	a4,gp,-2036 # 800091ec <timeout_list>
80004254:	00472703          	lw	a4,4(a4)
80004258:	00e50663          	beq	a0,a4,80004264 <next+0x18>
8000425c:	00052503          	lw	a0,0(a0)
80004260:	00008067          	ret
80004264:	00000513          	li	a0,0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
80004268:	00008067          	ret

8000426c <remove_timeout>:

static void remove_timeout(struct _timeout *t)
{
8000426c:	ff010113          	addi	sp,sp,-16
80004270:	00112623          	sw	ra,12(sp)
80004274:	00812423          	sw	s0,8(sp)
80004278:	00050413          	mv	s0,a0
	if (next(t) != NULL) {
8000427c:	fd1ff0ef          	jal	ra,8000424c <next>
80004280:	02050663          	beqz	a0,800042ac <remove_timeout+0x40>
		next(t)->dticks += t->dticks;
80004284:	01052783          	lw	a5,16(a0)
80004288:	01452683          	lw	a3,20(a0)
8000428c:	01042703          	lw	a4,16(s0)
80004290:	01442603          	lw	a2,20(s0)
80004294:	00e78733          	add	a4,a5,a4
80004298:	00f737b3          	sltu	a5,a4,a5
8000429c:	00c686b3          	add	a3,a3,a2
800042a0:	00d787b3          	add	a5,a5,a3
800042a4:	00e52823          	sw	a4,16(a0)
800042a8:	00f52a23          	sw	a5,20(a0)
	sys_dnode_t *const prev = node->prev;
800042ac:	00442703          	lw	a4,4(s0)
	sys_dnode_t *const next = node->next;
800042b0:	00042783          	lw	a5,0(s0)
	prev->next = next;
800042b4:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
800042b8:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
800042bc:	00042023          	sw	zero,0(s0)
	node->prev = NULL;
800042c0:	00042223          	sw	zero,4(s0)
	}

	sys_dlist_remove(&t->node);
}
800042c4:	00c12083          	lw	ra,12(sp)
800042c8:	00812403          	lw	s0,8(sp)
800042cc:	01010113          	addi	sp,sp,16
800042d0:	00008067          	ret

800042d4 <elapsed>:

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
800042d4:	800077b7          	lui	a5,0x80007
800042d8:	c207a783          	lw	a5,-992(a5) # 80006c20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c21>
800042dc:	00078663          	beqz	a5,800042e8 <elapsed+0x14>
800042e0:	00000513          	li	a0,0
}
800042e4:	00008067          	ret
{
800042e8:	ff010113          	addi	sp,sp,-16
800042ec:	00112623          	sw	ra,12(sp)
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
800042f0:	e10fe0ef          	jal	ra,80002900 <sys_clock_elapsed>
}
800042f4:	00c12083          	lw	ra,12(sp)
800042f8:	01010113          	addi	sp,sp,16
800042fc:	00008067          	ret

80004300 <next_timeout>:

static int32_t next_timeout(void)
{
80004300:	ff010113          	addi	sp,sp,-16
80004304:	00112623          	sw	ra,12(sp)
80004308:	00812423          	sw	s0,8(sp)
	struct _timeout *to = first();
8000430c:	f29ff0ef          	jal	ra,80004234 <first>
80004310:	00050413          	mv	s0,a0
	int32_t ticks_elapsed = elapsed();
80004314:	fc1ff0ef          	jal	ra,800042d4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
80004318:	02040c63          	beqz	s0,80004350 <next_timeout+0x50>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
8000431c:	01042703          	lw	a4,16(s0)
80004320:	01442783          	lw	a5,20(s0)
80004324:	41f55693          	srai	a3,a0,0x1f
80004328:	40a70533          	sub	a0,a4,a0
8000432c:	00a73733          	sltu	a4,a4,a0
80004330:	40d787b3          	sub	a5,a5,a3
80004334:	40e787b3          	sub	a5,a5,a4
	if ((to == NULL) ||
80004338:	02f04263          	bgtz	a5,8000435c <next_timeout+0x5c>
8000433c:	00079463          	bnez	a5,80004344 <next_timeout+0x44>
80004340:	00054e63          	bltz	a0,8000435c <next_timeout+0x5c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
80004344:	0207d063          	bgez	a5,80004364 <next_timeout+0x64>
80004348:	00000513          	li	a0,0
8000434c:	0180006f          	j	80004364 <next_timeout+0x64>
		ret = MAX_WAIT;
80004350:	80000537          	lui	a0,0x80000
80004354:	fff54513          	not	a0,a0
80004358:	00c0006f          	j	80004364 <next_timeout+0x64>
8000435c:	80000537          	lui	a0,0x80000
80004360:	fff54513          	not	a0,a0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
80004364:	800077b7          	lui	a5,0x80007
80004368:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
8000436c:	0107a783          	lw	a5,16(a5)
80004370:	00078663          	beqz	a5,8000437c <next_timeout+0x7c>
80004374:	00a7d463          	bge	a5,a0,8000437c <next_timeout+0x7c>
		ret = _current_cpu->slice_ticks;
80004378:	00078513          	mv	a0,a5
	}
#endif
	return ret;
}
8000437c:	00c12083          	lw	ra,12(sp)
80004380:	00812403          	lw	s0,8(sp)
80004384:	01010113          	addi	sp,sp,16
80004388:	00008067          	ret

8000438c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
8000438c:	fe010113          	addi	sp,sp,-32
80004390:	00112e23          	sw	ra,28(sp)
80004394:	00812c23          	sw	s0,24(sp)
80004398:	00912a23          	sw	s1,20(sp)
8000439c:	01212823          	sw	s2,16(sp)
800043a0:	01312623          	sw	s3,12(sp)
800043a4:	01412423          	sw	s4,8(sp)
800043a8:	01512223          	sw	s5,4(sp)
800043ac:	00050413          	mv	s0,a0
800043b0:	00060493          	mv	s1,a2
800043b4:	00068913          	mv	s2,a3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
800043b8:	fff00793          	li	a5,-1
800043bc:	00c78a63          	beq	a5,a2,800043d0 <z_add_timeout+0x44>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
800043c0:	00b42423          	sw	a1,8(s0)

	LOCKED(&timeout_lock) {
800043c4:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800043c8:	300479f3          	csrrci	s3,mstatus,8
800043cc:	1080006f          	j	800044d4 <z_add_timeout+0x148>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
800043d0:	fef698e3          	bne	a3,a5,800043c0 <z_add_timeout+0x34>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
800043d4:	01c12083          	lw	ra,28(sp)
800043d8:	01812403          	lw	s0,24(sp)
800043dc:	01412483          	lw	s1,20(sp)
800043e0:	01012903          	lw	s2,16(sp)
800043e4:	00c12983          	lw	s3,12(sp)
800043e8:	00812a03          	lw	s4,8(sp)
800043ec:	00412a83          	lw	s5,4(sp)
800043f0:	02010113          	addi	sp,sp,32
800043f4:	00008067          	ret
			to->dticks = MAX(1, ticks);
800043f8:	00071463          	bnez	a4,80004400 <z_add_timeout+0x74>
800043fc:	12079463          	bnez	a5,80004524 <z_add_timeout+0x198>
80004400:	00100793          	li	a5,1
80004404:	00000713          	li	a4,0
80004408:	11c0006f          	j	80004524 <z_add_timeout+0x198>
			to->dticks = timeout.ticks + 1 + elapsed();
8000440c:	00148a13          	addi	s4,s1,1
80004410:	009a3ab3          	sltu	s5,s4,s1
80004414:	012a8ab3          	add	s5,s5,s2
80004418:	ebdff0ef          	jal	ra,800042d4 <elapsed>
8000441c:	41f55713          	srai	a4,a0,0x1f
80004420:	00aa07b3          	add	a5,s4,a0
80004424:	0147ba33          	sltu	s4,a5,s4
80004428:	00ea8ab3          	add	s5,s5,a4
8000442c:	015a0a33          	add	s4,s4,s5
80004430:	00f42823          	sw	a5,16(s0)
80004434:	01442a23          	sw	s4,20(s0)
80004438:	0f40006f          	j	8000452c <z_add_timeout+0x1a0>
			to->dticks -= t->dticks;
8000443c:	40d706b3          	sub	a3,a4,a3
80004440:	00d73733          	sltu	a4,a4,a3
80004444:	40c787b3          	sub	a5,a5,a2
80004448:	40e787b3          	sub	a5,a5,a4
8000444c:	00d42823          	sw	a3,16(s0)
80004450:	00f42a23          	sw	a5,20(s0)
		for (t = first(); t != NULL; t = next(t)) {
80004454:	df9ff0ef          	jal	ra,8000424c <next>
80004458:	04050863          	beqz	a0,800044a8 <z_add_timeout+0x11c>
			if (t->dticks > to->dticks) {
8000445c:	01052683          	lw	a3,16(a0) # 80000010 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000011>
80004460:	01452603          	lw	a2,20(a0)
80004464:	01042703          	lw	a4,16(s0)
80004468:	01442783          	lw	a5,20(s0)
8000446c:	00c7c663          	blt	a5,a2,80004478 <z_add_timeout+0xec>
80004470:	fcf616e3          	bne	a2,a5,8000443c <z_add_timeout+0xb0>
80004474:	fcd774e3          	bgeu	a4,a3,8000443c <z_add_timeout+0xb0>
				t->dticks -= to->dticks;
80004478:	40e68733          	sub	a4,a3,a4
8000447c:	00e6b6b3          	sltu	a3,a3,a4
80004480:	40f60633          	sub	a2,a2,a5
80004484:	40d60633          	sub	a2,a2,a3
80004488:	00e52823          	sw	a4,16(a0)
8000448c:	00c52a23          	sw	a2,20(a0)
	sys_dnode_t *const prev = successor->prev;
80004490:	00452783          	lw	a5,4(a0)
	node->prev = prev;
80004494:	00f42223          	sw	a5,4(s0)
	node->next = successor;
80004498:	00a42023          	sw	a0,0(s0)
	prev->next = node;
8000449c:	0087a023          	sw	s0,0(a5)
	successor->prev = node;
800044a0:	00852223          	sw	s0,4(a0)
		if (t == NULL) {
800044a4:	01c0006f          	j	800044c0 <z_add_timeout+0x134>
	sys_dnode_t *const tail = list->tail;
800044a8:	80c18793          	addi	a5,gp,-2036 # 800091ec <timeout_list>
800044ac:	0047a703          	lw	a4,4(a5)
	node->next = list;
800044b0:	00f42023          	sw	a5,0(s0)
	node->prev = tail;
800044b4:	00e42223          	sw	a4,4(s0)
	tail->next = node;
800044b8:	00872023          	sw	s0,0(a4)
	list->tail = node;
800044bc:	0087a223          	sw	s0,4(a5)
		if (to == first()) {
800044c0:	d75ff0ef          	jal	ra,80004234 <first>
800044c4:	06a40863          	beq	s0,a0,80004534 <z_add_timeout+0x1a8>
			  : "r" (key & MSTATUS_IEN)
800044c8:	0089f793          	andi	a5,s3,8
	__asm__ volatile ("csrs mstatus, %0"
800044cc:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
800044d0:	00100793          	li	a5,1
800044d4:	f00790e3          	bnez	a5,800043d4 <z_add_timeout+0x48>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
800044d8:	ffe00793          	li	a5,-2
800044dc:	40978733          	sub	a4,a5,s1
800044e0:	00e7b733          	sltu	a4,a5,a4
800044e4:	fff94793          	not	a5,s2
800044e8:	40e787b3          	sub	a5,a5,a4
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
800044ec:	f207c0e3          	bltz	a5,8000440c <z_add_timeout+0x80>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
800044f0:	80007737          	lui	a4,0x80007
800044f4:	bf872783          	lw	a5,-1032(a4) # 80006bf8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006bf9>
800044f8:	bfc72683          	lw	a3,-1028(a4)
800044fc:	009787b3          	add	a5,a5,s1
80004500:	0097b733          	sltu	a4,a5,s1
80004504:	012686b3          	add	a3,a3,s2
80004508:	00d70733          	add	a4,a4,a3
8000450c:	ffe00693          	li	a3,-2
80004510:	40f687b3          	sub	a5,a3,a5
80004514:	00f6b6b3          	sltu	a3,a3,a5
80004518:	fff74713          	not	a4,a4
			to->dticks = MAX(1, ticks);
8000451c:	40d70733          	sub	a4,a4,a3
80004520:	ece05ce3          	blez	a4,800043f8 <z_add_timeout+0x6c>
80004524:	00f42823          	sw	a5,16(s0)
80004528:	00e42a23          	sw	a4,20(s0)
		for (t = first(); t != NULL; t = next(t)) {
8000452c:	d09ff0ef          	jal	ra,80004234 <first>
80004530:	f29ff06f          	j	80004458 <z_add_timeout+0xcc>
			int32_t next_time = next_timeout();
80004534:	dcdff0ef          	jal	ra,80004300 <next_timeout>
			if (next_time == 0 ||
80004538:	00050a63          	beqz	a0,8000454c <z_add_timeout+0x1c0>
			    _current_cpu->slice_ticks != next_time) {
8000453c:	800077b7          	lui	a5,0x80007
80004540:	d4878793          	addi	a5,a5,-696 # 80006d48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006d49>
80004544:	0107a783          	lw	a5,16(a5)
			if (next_time == 0 ||
80004548:	f8a780e3          	beq	a5,a0,800044c8 <z_add_timeout+0x13c>
				sys_clock_set_timeout(next_time, false);
8000454c:	00000593          	li	a1,0
80004550:	ad4fe0ef          	jal	ra,80002824 <sys_clock_set_timeout>
80004554:	f75ff06f          	j	800044c8 <z_add_timeout+0x13c>

80004558 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
80004558:	ff010113          	addi	sp,sp,-16
8000455c:	00112623          	sw	ra,12(sp)
80004560:	00812423          	sw	s0,8(sp)
80004564:	00912223          	sw	s1,4(sp)
80004568:	01212023          	sw	s2,0(sp)
8000456c:	00050493          	mv	s1,a0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
80004570:	00000413          	li	s0,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004574:	30047973          	csrrci	s2,mstatus,8
	int ret = -EINVAL;
80004578:	fea00513          	li	a0,-22
8000457c:	0100006f          	j	8000458c <z_abort_timeout+0x34>
			  : "r" (key & MSTATUS_IEN)
80004580:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80004584:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
80004588:	00100413          	li	s0,1
8000458c:	00041e63          	bnez	s0,800045a8 <z_abort_timeout+0x50>
	return node->next != NULL;
80004590:	0004a783          	lw	a5,0(s1)
		if (sys_dnode_is_linked(&to->node)) {
80004594:	fe0786e3          	beqz	a5,80004580 <z_abort_timeout+0x28>
			remove_timeout(to);
80004598:	00048513          	mv	a0,s1
8000459c:	cd1ff0ef          	jal	ra,8000426c <remove_timeout>
			ret = 0;
800045a0:	00040513          	mv	a0,s0
800045a4:	fddff06f          	j	80004580 <z_abort_timeout+0x28>
		}
	}

	return ret;
}
800045a8:	00c12083          	lw	ra,12(sp)
800045ac:	00812403          	lw	s0,8(sp)
800045b0:	00412483          	lw	s1,4(sp)
800045b4:	00012903          	lw	s2,0(sp)
800045b8:	01010113          	addi	sp,sp,16
800045bc:	00008067          	ret

800045c0 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
800045c0:	fe010113          	addi	sp,sp,-32
800045c4:	00112e23          	sw	ra,28(sp)
800045c8:	00812c23          	sw	s0,24(sp)
800045cc:	00912a23          	sw	s1,20(sp)
800045d0:	01212823          	sw	s2,16(sp)
800045d4:	01312623          	sw	s3,12(sp)
800045d8:	00050493          	mv	s1,a0
800045dc:	00058993          	mv	s3,a1
	LOCKED(&timeout_lock) {
800045e0:	00000413          	li	s0,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800045e4:	30047973          	csrrci	s2,mstatus,8
800045e8:	0240006f          	j	8000460c <z_set_timeout_expiry+0x4c>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
800045ec:	00100413          	li	s0,1
		bool sooner = (next_to == K_TICKS_FOREVER)
800045f0:	00147413          	andi	s0,s0,1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
800045f4:	00100793          	li	a5,1
800045f8:	00a7d463          	bge	a5,a0,80004600 <z_set_timeout_expiry+0x40>
800045fc:	02041663          	bnez	s0,80004628 <z_set_timeout_expiry+0x68>
			  : "r" (key & MSTATUS_IEN)
80004600:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80004604:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
80004608:	00100413          	li	s0,1
8000460c:	02041863          	bnez	s0,8000463c <z_set_timeout_expiry+0x7c>
		int next_to = next_timeout();
80004610:	cf1ff0ef          	jal	ra,80004300 <next_timeout>
			      || (ticks <= next_to);
80004614:	fff00793          	li	a5,-1
80004618:	fcf50ae3          	beq	a0,a5,800045ec <z_set_timeout_expiry+0x2c>
8000461c:	fc954ae3          	blt	a0,s1,800045f0 <z_set_timeout_expiry+0x30>
80004620:	00100413          	li	s0,1
80004624:	fcdff06f          	j	800045f0 <z_set_timeout_expiry+0x30>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
80004628:	00a4d463          	bge	s1,a0,80004630 <z_set_timeout_expiry+0x70>
8000462c:	00048513          	mv	a0,s1
80004630:	00098593          	mv	a1,s3
80004634:	9f0fe0ef          	jal	ra,80002824 <sys_clock_set_timeout>
80004638:	fc9ff06f          	j	80004600 <z_set_timeout_expiry+0x40>
		}
	}
}
8000463c:	01c12083          	lw	ra,28(sp)
80004640:	01812403          	lw	s0,24(sp)
80004644:	01412483          	lw	s1,20(sp)
80004648:	01012903          	lw	s2,16(sp)
8000464c:	00c12983          	lw	s3,12(sp)
80004650:	02010113          	addi	sp,sp,32
80004654:	00008067          	ret

80004658 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
80004658:	ff010113          	addi	sp,sp,-16
8000465c:	00112623          	sw	ra,12(sp)
80004660:	00812423          	sw	s0,8(sp)
80004664:	00912223          	sw	s1,4(sp)
80004668:	01212023          	sw	s2,0(sp)
8000466c:	00050413          	mv	s0,a0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
80004670:	aecff0ef          	jal	ra,8000395c <z_time_slice>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004674:	300474f3          	csrrci	s1,mstatus,8
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
80004678:	800077b7          	lui	a5,0x80007
8000467c:	c287a023          	sw	s0,-992(a5) # 80006c20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c21>

	while (first() != NULL && first()->dticks <= announce_remaining) {
80004680:	06c0006f          	j	800046ec <sys_clock_announce+0x94>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
80004684:	80007737          	lui	a4,0x80007
80004688:	41f95593          	srai	a1,s2,0x1f
8000468c:	bf872783          	lw	a5,-1032(a4) # 80006bf8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006bf9>
80004690:	bfc72683          	lw	a3,-1028(a4)
80004694:	01278633          	add	a2,a5,s2
80004698:	00f637b3          	sltu	a5,a2,a5
8000469c:	00b686b3          	add	a3,a3,a1
800046a0:	00d787b3          	add	a5,a5,a3
800046a4:	bec72c23          	sw	a2,-1032(a4)
800046a8:	bef72e23          	sw	a5,-1028(a4)
		t->dticks = 0;
800046ac:	00000793          	li	a5,0
800046b0:	00000813          	li	a6,0
800046b4:	00f42823          	sw	a5,16(s0)
800046b8:	01042a23          	sw	a6,20(s0)
		remove_timeout(t);
800046bc:	00040513          	mv	a0,s0
800046c0:	badff0ef          	jal	ra,8000426c <remove_timeout>
			  : "r" (key & MSTATUS_IEN)
800046c4:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
800046c8:	3004a073          	csrs	mstatus,s1

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
800046cc:	00842783          	lw	a5,8(s0)
800046d0:	00040513          	mv	a0,s0
800046d4:	000780e7          	jalr	a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
800046d8:	300474f3          	csrrci	s1,mstatus,8
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
800046dc:	80007737          	lui	a4,0x80007
800046e0:	c2072783          	lw	a5,-992(a4) # 80006c20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c21>
800046e4:	412787b3          	sub	a5,a5,s2
800046e8:	c2f72023          	sw	a5,-992(a4)
	while (first() != NULL && first()->dticks <= announce_remaining) {
800046ec:	b49ff0ef          	jal	ra,80004234 <first>
800046f0:	00050413          	mv	s0,a0
800046f4:	02050263          	beqz	a0,80004718 <sys_clock_announce+0xc0>
800046f8:	01052903          	lw	s2,16(a0)
800046fc:	01452703          	lw	a4,20(a0)
80004700:	800077b7          	lui	a5,0x80007
80004704:	c207a683          	lw	a3,-992(a5) # 80006c20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c21>
80004708:	41f6d793          	srai	a5,a3,0x1f
8000470c:	00e7c663          	blt	a5,a4,80004718 <sys_clock_announce+0xc0>
80004710:	f6f71ae3          	bne	a4,a5,80004684 <sys_clock_announce+0x2c>
80004714:	f726f8e3          	bgeu	a3,s2,80004684 <sys_clock_announce+0x2c>
	}

	if (first() != NULL) {
80004718:	02040863          	beqz	s0,80004748 <sys_clock_announce+0xf0>
		first()->dticks -= announce_remaining;
8000471c:	01042683          	lw	a3,16(s0)
80004720:	01442783          	lw	a5,20(s0)
80004724:	80007737          	lui	a4,0x80007
80004728:	c2072703          	lw	a4,-992(a4) # 80006c20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c21>
8000472c:	41f75613          	srai	a2,a4,0x1f
80004730:	40e68733          	sub	a4,a3,a4
80004734:	00e6b6b3          	sltu	a3,a3,a4
80004738:	40c787b3          	sub	a5,a5,a2
8000473c:	40d787b3          	sub	a5,a5,a3
80004740:	00e42823          	sw	a4,16(s0)
80004744:	00f42a23          	sw	a5,20(s0)
	}

	curr_tick += announce_remaining;
80004748:	800076b7          	lui	a3,0x80007
8000474c:	800075b7          	lui	a1,0x80007
80004750:	c205a703          	lw	a4,-992(a1) # 80006c20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c21>
80004754:	41f75513          	srai	a0,a4,0x1f
80004758:	bf86a783          	lw	a5,-1032(a3) # 80006bf8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006bf9>
8000475c:	bfc6a603          	lw	a2,-1028(a3)
80004760:	00e78733          	add	a4,a5,a4
80004764:	00f737b3          	sltu	a5,a4,a5
80004768:	00a60633          	add	a2,a2,a0
8000476c:	00c787b3          	add	a5,a5,a2
80004770:	bee6ac23          	sw	a4,-1032(a3)
80004774:	bef6ae23          	sw	a5,-1028(a3)
	announce_remaining = 0;
80004778:	c205a023          	sw	zero,-992(a1)

	sys_clock_set_timeout(next_timeout(), false);
8000477c:	b85ff0ef          	jal	ra,80004300 <next_timeout>
80004780:	00000593          	li	a1,0
80004784:	8a0fe0ef          	jal	ra,80002824 <sys_clock_set_timeout>
			  : "r" (key & MSTATUS_IEN)
80004788:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
8000478c:	3004a073          	csrs	mstatus,s1

	k_spin_unlock(&timeout_lock, key);
}
80004790:	00c12083          	lw	ra,12(sp)
80004794:	00812403          	lw	s0,8(sp)
80004798:	00412483          	lw	s1,4(sp)
8000479c:	00012903          	lw	s2,0(sp)
800047a0:	01010113          	addi	sp,sp,16
800047a4:	00008067          	ret

800047a8 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
800047a8:	ff010113          	addi	sp,sp,-16
800047ac:	00112623          	sw	ra,12(sp)
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
800047b0:	80006637          	lui	a2,0x80006
800047b4:	6a060613          	addi	a2,a2,1696 # 800066a0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800066a1>
800047b8:	800075b7          	lui	a1,0x80007
800047bc:	9b058593          	addi	a1,a1,-1616 # 800069b0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800069b1>
800047c0:	80007537          	lui	a0,0x80007
800047c4:	9d050513          	addi	a0,a0,-1584 # 800069d0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800069d1>
800047c8:	b2cfc0ef          	jal	ra,80000af4 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
800047cc:	00c12083          	lw	ra,12(sp)
800047d0:	01010113          	addi	sp,sp,16
800047d4:	00008067          	ret

800047d8 <_OffsetAbsSyms>:
GEN_SOC_OFFSET_SYMS();
#endif

GEN_ABSOLUTE_SYM(__z_arch_esf_t_SIZEOF, sizeof(z_arch_esf_t));

GEN_ABS_SYM_END
800047d8:	00008067          	ret

800047dc <malloc>:
800047dc:	00050593          	mv	a1,a0
800047e0:	8141a503          	lw	a0,-2028(gp) # 800091f4 <_impure_ptr>
800047e4:	1000006f          	j	800048e4 <_malloc_r>

800047e8 <_free_r>:
800047e8:	0e058c63          	beqz	a1,800048e0 <_free_r+0xf8>
800047ec:	ffc5a783          	lw	a5,-4(a1)
800047f0:	fe010113          	addi	sp,sp,-32
800047f4:	00812c23          	sw	s0,24(sp)
800047f8:	00112e23          	sw	ra,28(sp)
800047fc:	ffc58413          	addi	s0,a1,-4
80004800:	0007d463          	bgez	a5,80004808 <_free_r+0x20>
80004804:	00f40433          	add	s0,s0,a5
80004808:	00a12623          	sw	a0,12(sp)
8000480c:	6a8000ef          	jal	ra,80004eb4 <__malloc_lock>
80004810:	80007737          	lui	a4,0x80007
80004814:	c2872783          	lw	a5,-984(a4) # 80006c28 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c29>
80004818:	00c12503          	lw	a0,12(sp)
8000481c:	00079e63          	bnez	a5,80004838 <_free_r+0x50>
80004820:	00042223          	sw	zero,4(s0)
80004824:	c2872423          	sw	s0,-984(a4)
80004828:	01812403          	lw	s0,24(sp)
8000482c:	01c12083          	lw	ra,28(sp)
80004830:	02010113          	addi	sp,sp,32
80004834:	68c0006f          	j	80004ec0 <__malloc_unlock>
80004838:	02f47463          	bgeu	s0,a5,80004860 <_free_r+0x78>
8000483c:	00042603          	lw	a2,0(s0)
80004840:	00c406b3          	add	a3,s0,a2
80004844:	00d79a63          	bne	a5,a3,80004858 <_free_r+0x70>
80004848:	0007a683          	lw	a3,0(a5)
8000484c:	0047a783          	lw	a5,4(a5)
80004850:	00c686b3          	add	a3,a3,a2
80004854:	00d42023          	sw	a3,0(s0)
80004858:	00f42223          	sw	a5,4(s0)
8000485c:	fc9ff06f          	j	80004824 <_free_r+0x3c>
80004860:	00078713          	mv	a4,a5
80004864:	0047a783          	lw	a5,4(a5)
80004868:	00078463          	beqz	a5,80004870 <_free_r+0x88>
8000486c:	fef47ae3          	bgeu	s0,a5,80004860 <_free_r+0x78>
80004870:	00072683          	lw	a3,0(a4)
80004874:	00d70633          	add	a2,a4,a3
80004878:	02861863          	bne	a2,s0,800048a8 <_free_r+0xc0>
8000487c:	00042603          	lw	a2,0(s0)
80004880:	00c686b3          	add	a3,a3,a2
80004884:	00d72023          	sw	a3,0(a4)
80004888:	00d70633          	add	a2,a4,a3
8000488c:	f8c79ee3          	bne	a5,a2,80004828 <_free_r+0x40>
80004890:	0007a603          	lw	a2,0(a5)
80004894:	0047a783          	lw	a5,4(a5)
80004898:	00d606b3          	add	a3,a2,a3
8000489c:	00d72023          	sw	a3,0(a4)
800048a0:	00f72223          	sw	a5,4(a4)
800048a4:	f85ff06f          	j	80004828 <_free_r+0x40>
800048a8:	00c47863          	bgeu	s0,a2,800048b8 <_free_r+0xd0>
800048ac:	00c00793          	li	a5,12
800048b0:	00f52023          	sw	a5,0(a0)
800048b4:	f75ff06f          	j	80004828 <_free_r+0x40>
800048b8:	00042603          	lw	a2,0(s0)
800048bc:	00c406b3          	add	a3,s0,a2
800048c0:	00d79a63          	bne	a5,a3,800048d4 <_free_r+0xec>
800048c4:	0007a683          	lw	a3,0(a5)
800048c8:	0047a783          	lw	a5,4(a5)
800048cc:	00c686b3          	add	a3,a3,a2
800048d0:	00d42023          	sw	a3,0(s0)
800048d4:	00f42223          	sw	a5,4(s0)
800048d8:	00872223          	sw	s0,4(a4)
800048dc:	f4dff06f          	j	80004828 <_free_r+0x40>
800048e0:	00008067          	ret

800048e4 <_malloc_r>:
800048e4:	fe010113          	addi	sp,sp,-32
800048e8:	00912a23          	sw	s1,20(sp)
800048ec:	00358493          	addi	s1,a1,3
800048f0:	ffc4f493          	andi	s1,s1,-4
800048f4:	01212823          	sw	s2,16(sp)
800048f8:	00112e23          	sw	ra,28(sp)
800048fc:	00812c23          	sw	s0,24(sp)
80004900:	01312623          	sw	s3,12(sp)
80004904:	00848493          	addi	s1,s1,8
80004908:	00c00793          	li	a5,12
8000490c:	00050913          	mv	s2,a0
80004910:	06f4f463          	bgeu	s1,a5,80004978 <_malloc_r+0x94>
80004914:	00c00493          	li	s1,12
80004918:	06b4e263          	bltu	s1,a1,8000497c <_malloc_r+0x98>
8000491c:	00090513          	mv	a0,s2
80004920:	594000ef          	jal	ra,80004eb4 <__malloc_lock>
80004924:	800076b7          	lui	a3,0x80007
80004928:	c286a703          	lw	a4,-984(a3) # 80006c28 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c29>
8000492c:	00070413          	mv	s0,a4
80004930:	06041a63          	bnez	s0,800049a4 <_malloc_r+0xc0>
80004934:	80007437          	lui	s0,0x80007
80004938:	c2442783          	lw	a5,-988(s0) # 80006c24 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c25>
8000493c:	00079a63          	bnez	a5,80004950 <_malloc_r+0x6c>
80004940:	00000593          	li	a1,0
80004944:	00090513          	mv	a0,s2
80004948:	158000ef          	jal	ra,80004aa0 <_sbrk_r>
8000494c:	c2a42223          	sw	a0,-988(s0)
80004950:	00048593          	mv	a1,s1
80004954:	00090513          	mv	a0,s2
80004958:	148000ef          	jal	ra,80004aa0 <_sbrk_r>
8000495c:	fff00993          	li	s3,-1
80004960:	0b351a63          	bne	a0,s3,80004a14 <_malloc_r+0x130>
80004964:	00c00793          	li	a5,12
80004968:	00f92023          	sw	a5,0(s2)
8000496c:	00090513          	mv	a0,s2
80004970:	550000ef          	jal	ra,80004ec0 <__malloc_unlock>
80004974:	0100006f          	j	80004984 <_malloc_r+0xa0>
80004978:	fa04d0e3          	bgez	s1,80004918 <_malloc_r+0x34>
8000497c:	00c00793          	li	a5,12
80004980:	00f92023          	sw	a5,0(s2)
80004984:	00000513          	li	a0,0
80004988:	01c12083          	lw	ra,28(sp)
8000498c:	01812403          	lw	s0,24(sp)
80004990:	01412483          	lw	s1,20(sp)
80004994:	01012903          	lw	s2,16(sp)
80004998:	00c12983          	lw	s3,12(sp)
8000499c:	02010113          	addi	sp,sp,32
800049a0:	00008067          	ret
800049a4:	00042783          	lw	a5,0(s0)
800049a8:	409787b3          	sub	a5,a5,s1
800049ac:	0407ce63          	bltz	a5,80004a08 <_malloc_r+0x124>
800049b0:	00b00613          	li	a2,11
800049b4:	00f67a63          	bgeu	a2,a5,800049c8 <_malloc_r+0xe4>
800049b8:	00f42023          	sw	a5,0(s0)
800049bc:	00f40433          	add	s0,s0,a5
800049c0:	00942023          	sw	s1,0(s0)
800049c4:	0100006f          	j	800049d4 <_malloc_r+0xf0>
800049c8:	00442783          	lw	a5,4(s0)
800049cc:	02871a63          	bne	a4,s0,80004a00 <_malloc_r+0x11c>
800049d0:	c2f6a423          	sw	a5,-984(a3)
800049d4:	00090513          	mv	a0,s2
800049d8:	4e8000ef          	jal	ra,80004ec0 <__malloc_unlock>
800049dc:	00b40513          	addi	a0,s0,11
800049e0:	00440793          	addi	a5,s0,4
800049e4:	ff857513          	andi	a0,a0,-8
800049e8:	40f50733          	sub	a4,a0,a5
800049ec:	f8f50ee3          	beq	a0,a5,80004988 <_malloc_r+0xa4>
800049f0:	00e40433          	add	s0,s0,a4
800049f4:	40a787b3          	sub	a5,a5,a0
800049f8:	00f42023          	sw	a5,0(s0)
800049fc:	f8dff06f          	j	80004988 <_malloc_r+0xa4>
80004a00:	00f72223          	sw	a5,4(a4)
80004a04:	fd1ff06f          	j	800049d4 <_malloc_r+0xf0>
80004a08:	00040713          	mv	a4,s0
80004a0c:	00442403          	lw	s0,4(s0)
80004a10:	f21ff06f          	j	80004930 <_malloc_r+0x4c>
80004a14:	00350413          	addi	s0,a0,3
80004a18:	ffc47413          	andi	s0,s0,-4
80004a1c:	fa8502e3          	beq	a0,s0,800049c0 <_malloc_r+0xdc>
80004a20:	40a405b3          	sub	a1,s0,a0
80004a24:	00090513          	mv	a0,s2
80004a28:	078000ef          	jal	ra,80004aa0 <_sbrk_r>
80004a2c:	f9351ae3          	bne	a0,s3,800049c0 <_malloc_r+0xdc>
80004a30:	f35ff06f          	j	80004964 <_malloc_r+0x80>

80004a34 <iprintf>:
80004a34:	fb010113          	addi	sp,sp,-80
80004a38:	04f12223          	sw	a5,68(sp)
80004a3c:	02812423          	sw	s0,40(sp)
80004a40:	00050413          	mv	s0,a0
80004a44:	8141a503          	lw	a0,-2028(gp) # 800091f4 <_impure_ptr>
80004a48:	02112623          	sw	ra,44(sp)
80004a4c:	02b12a23          	sw	a1,52(sp)
80004a50:	02c12c23          	sw	a2,56(sp)
80004a54:	02d12e23          	sw	a3,60(sp)
80004a58:	04e12023          	sw	a4,64(sp)
80004a5c:	05012423          	sw	a6,72(sp)
80004a60:	05112623          	sw	a7,76(sp)
80004a64:	00050c63          	beqz	a0,80004a7c <iprintf+0x48>
80004a68:	01852783          	lw	a5,24(a0)
80004a6c:	00079863          	bnez	a5,80004a7c <iprintf+0x48>
80004a70:	00a12623          	sw	a0,12(sp)
80004a74:	1d8000ef          	jal	ra,80004c4c <__sinit>
80004a78:	00c12503          	lw	a0,12(sp)
80004a7c:	00852583          	lw	a1,8(a0)
80004a80:	03410693          	addi	a3,sp,52
80004a84:	00040613          	mv	a2,s0
80004a88:	00d12e23          	sw	a3,28(sp)
80004a8c:	4f0000ef          	jal	ra,80004f7c <_vfiprintf_r>
80004a90:	02c12083          	lw	ra,44(sp)
80004a94:	02812403          	lw	s0,40(sp)
80004a98:	05010113          	addi	sp,sp,80
80004a9c:	00008067          	ret

80004aa0 <_sbrk_r>:
80004aa0:	ff010113          	addi	sp,sp,-16
80004aa4:	00812423          	sw	s0,8(sp)
80004aa8:	00912223          	sw	s1,4(sp)
80004aac:	00050413          	mv	s0,a0
80004ab0:	800074b7          	lui	s1,0x80007
80004ab4:	00058513          	mv	a0,a1
80004ab8:	00112623          	sw	ra,12(sp)
80004abc:	c204a623          	sw	zero,-980(s1) # 80006c2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c2d>
80004ac0:	db0fd0ef          	jal	ra,80002070 <_sbrk>
80004ac4:	fff00793          	li	a5,-1
80004ac8:	00f51863          	bne	a0,a5,80004ad8 <_sbrk_r+0x38>
80004acc:	c2c4a783          	lw	a5,-980(s1)
80004ad0:	00078463          	beqz	a5,80004ad8 <_sbrk_r+0x38>
80004ad4:	00f42023          	sw	a5,0(s0)
80004ad8:	00c12083          	lw	ra,12(sp)
80004adc:	00812403          	lw	s0,8(sp)
80004ae0:	00412483          	lw	s1,4(sp)
80004ae4:	01010113          	addi	sp,sp,16
80004ae8:	00008067          	ret

80004aec <strlen>:
80004aec:	00050793          	mv	a5,a0
80004af0:	0007c703          	lbu	a4,0(a5)
80004af4:	00178793          	addi	a5,a5,1
80004af8:	fe071ce3          	bnez	a4,80004af0 <strlen+0x4>
80004afc:	40a78533          	sub	a0,a5,a0
80004b00:	fff50513          	addi	a0,a0,-1
80004b04:	00008067          	ret

80004b08 <strnlen>:
80004b08:	00b505b3          	add	a1,a0,a1
80004b0c:	00050793          	mv	a5,a0
80004b10:	00b78663          	beq	a5,a1,80004b1c <strnlen+0x14>
80004b14:	0007c703          	lbu	a4,0(a5)
80004b18:	00071663          	bnez	a4,80004b24 <strnlen+0x1c>
80004b1c:	40a78533          	sub	a0,a5,a0
80004b20:	00008067          	ret
80004b24:	00178793          	addi	a5,a5,1
80004b28:	fe9ff06f          	j	80004b10 <strnlen+0x8>

80004b2c <std>:
80004b2c:	ff010113          	addi	sp,sp,-16
80004b30:	00812423          	sw	s0,8(sp)
80004b34:	00112623          	sw	ra,12(sp)
80004b38:	00050413          	mv	s0,a0
80004b3c:	00b51623          	sh	a1,12(a0)
80004b40:	00c51723          	sh	a2,14(a0)
80004b44:	00052023          	sw	zero,0(a0)
80004b48:	00052223          	sw	zero,4(a0)
80004b4c:	00052423          	sw	zero,8(a0)
80004b50:	06052223          	sw	zero,100(a0)
80004b54:	00052823          	sw	zero,16(a0)
80004b58:	00052a23          	sw	zero,20(a0)
80004b5c:	00052c23          	sw	zero,24(a0)
80004b60:	00800613          	li	a2,8
80004b64:	00000593          	li	a1,0
80004b68:	05c50513          	addi	a0,a0,92
80004b6c:	e8dfb0ef          	jal	ra,800009f8 <memset>
80004b70:	800067b7          	lui	a5,0x80006
80004b74:	91c78793          	addi	a5,a5,-1764 # 8000591c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000591d>
80004b78:	02f42223          	sw	a5,36(s0)
80004b7c:	800067b7          	lui	a5,0x80006
80004b80:	96c78793          	addi	a5,a5,-1684 # 8000596c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000596d>
80004b84:	02f42423          	sw	a5,40(s0)
80004b88:	800067b7          	lui	a5,0x80006
80004b8c:	9f078793          	addi	a5,a5,-1552 # 800059f0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800059f1>
80004b90:	02f42623          	sw	a5,44(s0)
80004b94:	800067b7          	lui	a5,0x80006
80004b98:	a4878793          	addi	a5,a5,-1464 # 80005a48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80005a49>
80004b9c:	00c12083          	lw	ra,12(sp)
80004ba0:	02842023          	sw	s0,32(s0)
80004ba4:	02f42823          	sw	a5,48(s0)
80004ba8:	00812403          	lw	s0,8(sp)
80004bac:	01010113          	addi	sp,sp,16
80004bb0:	00008067          	ret

80004bb4 <_cleanup_r>:
80004bb4:	800065b7          	lui	a1,0x80006
80004bb8:	f7458593          	addi	a1,a1,-140 # 80005f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80005f75>
80004bbc:	2480006f          	j	80004e04 <_fwalk_reent>

80004bc0 <__sfmoreglue>:
80004bc0:	ff010113          	addi	sp,sp,-16
80004bc4:	00912223          	sw	s1,4(sp)
80004bc8:	06800793          	li	a5,104
80004bcc:	fff58493          	addi	s1,a1,-1
80004bd0:	02f484b3          	mul	s1,s1,a5
80004bd4:	01212023          	sw	s2,0(sp)
80004bd8:	00058913          	mv	s2,a1
80004bdc:	00812423          	sw	s0,8(sp)
80004be0:	00112623          	sw	ra,12(sp)
80004be4:	07448593          	addi	a1,s1,116
80004be8:	cfdff0ef          	jal	ra,800048e4 <_malloc_r>
80004bec:	00050413          	mv	s0,a0
80004bf0:	02050063          	beqz	a0,80004c10 <__sfmoreglue+0x50>
80004bf4:	00052023          	sw	zero,0(a0)
80004bf8:	01252223          	sw	s2,4(a0)
80004bfc:	00c50513          	addi	a0,a0,12
80004c00:	00a42423          	sw	a0,8(s0)
80004c04:	06848613          	addi	a2,s1,104
80004c08:	00000593          	li	a1,0
80004c0c:	dedfb0ef          	jal	ra,800009f8 <memset>
80004c10:	00c12083          	lw	ra,12(sp)
80004c14:	00040513          	mv	a0,s0
80004c18:	00812403          	lw	s0,8(sp)
80004c1c:	00412483          	lw	s1,4(sp)
80004c20:	00012903          	lw	s2,0(sp)
80004c24:	01010113          	addi	sp,sp,16
80004c28:	00008067          	ret

80004c2c <__sfp_lock_acquire>:
80004c2c:	83018513          	addi	a0,gp,-2000 # 80009210 <__lock___sfp_recursive_mutex>
80004c30:	ca8fd06f          	j	800020d8 <__retarget_lock_acquire_recursive>

80004c34 <__sfp_lock_release>:
80004c34:	83018513          	addi	a0,gp,-2000 # 80009210 <__lock___sfp_recursive_mutex>
80004c38:	cc0fd06f          	j	800020f8 <__retarget_lock_release_recursive>

80004c3c <__sinit_lock_acquire>:
80004c3c:	84418513          	addi	a0,gp,-1980 # 80009224 <__lock___sinit_recursive_mutex>
80004c40:	c98fd06f          	j	800020d8 <__retarget_lock_acquire_recursive>

80004c44 <__sinit_lock_release>:
80004c44:	84418513          	addi	a0,gp,-1980 # 80009224 <__lock___sinit_recursive_mutex>
80004c48:	cb0fd06f          	j	800020f8 <__retarget_lock_release_recursive>

80004c4c <__sinit>:
80004c4c:	ff010113          	addi	sp,sp,-16
80004c50:	00812423          	sw	s0,8(sp)
80004c54:	00112623          	sw	ra,12(sp)
80004c58:	00050413          	mv	s0,a0
80004c5c:	fe1ff0ef          	jal	ra,80004c3c <__sinit_lock_acquire>
80004c60:	01842783          	lw	a5,24(s0)
80004c64:	00078a63          	beqz	a5,80004c78 <__sinit+0x2c>
80004c68:	00812403          	lw	s0,8(sp)
80004c6c:	00c12083          	lw	ra,12(sp)
80004c70:	01010113          	addi	sp,sp,16
80004c74:	fd1ff06f          	j	80004c44 <__sinit_lock_release>
80004c78:	800057b7          	lui	a5,0x80005
80004c7c:	bb478793          	addi	a5,a5,-1100 # 80004bb4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80004bb5>
80004c80:	02f42423          	sw	a5,40(s0)
80004c84:	800067b7          	lui	a5,0x80006
80004c88:	5887a783          	lw	a5,1416(a5) # 80006588 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006589>
80004c8c:	04042423          	sw	zero,72(s0)
80004c90:	04042623          	sw	zero,76(s0)
80004c94:	04042823          	sw	zero,80(s0)
80004c98:	00879663          	bne	a5,s0,80004ca4 <__sinit+0x58>
80004c9c:	00100793          	li	a5,1
80004ca0:	00f42c23          	sw	a5,24(s0)
80004ca4:	00040513          	mv	a0,s0
80004ca8:	05c000ef          	jal	ra,80004d04 <__sfp>
80004cac:	00a42223          	sw	a0,4(s0)
80004cb0:	00040513          	mv	a0,s0
80004cb4:	050000ef          	jal	ra,80004d04 <__sfp>
80004cb8:	00a42423          	sw	a0,8(s0)
80004cbc:	00040513          	mv	a0,s0
80004cc0:	044000ef          	jal	ra,80004d04 <__sfp>
80004cc4:	00a42623          	sw	a0,12(s0)
80004cc8:	00442503          	lw	a0,4(s0)
80004ccc:	00000613          	li	a2,0
80004cd0:	00400593          	li	a1,4
80004cd4:	e59ff0ef          	jal	ra,80004b2c <std>
80004cd8:	00842503          	lw	a0,8(s0)
80004cdc:	00100613          	li	a2,1
80004ce0:	00900593          	li	a1,9
80004ce4:	e49ff0ef          	jal	ra,80004b2c <std>
80004ce8:	00c42503          	lw	a0,12(s0)
80004cec:	00200613          	li	a2,2
80004cf0:	01200593          	li	a1,18
80004cf4:	e39ff0ef          	jal	ra,80004b2c <std>
80004cf8:	00100793          	li	a5,1
80004cfc:	00f42c23          	sw	a5,24(s0)
80004d00:	f69ff06f          	j	80004c68 <__sinit+0x1c>

80004d04 <__sfp>:
80004d04:	ff010113          	addi	sp,sp,-16
80004d08:	00912223          	sw	s1,4(sp)
80004d0c:	01212023          	sw	s2,0(sp)
80004d10:	00112623          	sw	ra,12(sp)
80004d14:	00812423          	sw	s0,8(sp)
80004d18:	00050913          	mv	s2,a0
80004d1c:	f11ff0ef          	jal	ra,80004c2c <__sfp_lock_acquire>
80004d20:	800067b7          	lui	a5,0x80006
80004d24:	5887a483          	lw	s1,1416(a5) # 80006588 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006589>
80004d28:	0184a783          	lw	a5,24(s1)
80004d2c:	00079663          	bnez	a5,80004d38 <__sfp+0x34>
80004d30:	00048513          	mv	a0,s1
80004d34:	f19ff0ef          	jal	ra,80004c4c <__sinit>
80004d38:	04848493          	addi	s1,s1,72
80004d3c:	0084a403          	lw	s0,8(s1)
80004d40:	0044a783          	lw	a5,4(s1)
80004d44:	fff78793          	addi	a5,a5,-1
80004d48:	0007da63          	bgez	a5,80004d5c <__sfp+0x58>
80004d4c:	0004a783          	lw	a5,0(s1)
80004d50:	08078663          	beqz	a5,80004ddc <__sfp+0xd8>
80004d54:	0004a483          	lw	s1,0(s1)
80004d58:	fe5ff06f          	j	80004d3c <__sfp+0x38>
80004d5c:	00c41703          	lh	a4,12(s0)
80004d60:	06071a63          	bnez	a4,80004dd4 <__sfp+0xd0>
80004d64:	ffff07b7          	lui	a5,0xffff0
80004d68:	00178793          	addi	a5,a5,1 # ffff0001 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff0002>
80004d6c:	00f42623          	sw	a5,12(s0)
80004d70:	05840513          	addi	a0,s0,88
80004d74:	06042223          	sw	zero,100(s0)
80004d78:	b30fd0ef          	jal	ra,800020a8 <__retarget_lock_init_recursive>
80004d7c:	eb9ff0ef          	jal	ra,80004c34 <__sfp_lock_release>
80004d80:	00800613          	li	a2,8
80004d84:	00042023          	sw	zero,0(s0)
80004d88:	00042423          	sw	zero,8(s0)
80004d8c:	00042223          	sw	zero,4(s0)
80004d90:	00042823          	sw	zero,16(s0)
80004d94:	00042a23          	sw	zero,20(s0)
80004d98:	00042c23          	sw	zero,24(s0)
80004d9c:	00000593          	li	a1,0
80004da0:	05c40513          	addi	a0,s0,92
80004da4:	c55fb0ef          	jal	ra,800009f8 <memset>
80004da8:	02042a23          	sw	zero,52(s0)
80004dac:	02042c23          	sw	zero,56(s0)
80004db0:	04042423          	sw	zero,72(s0)
80004db4:	04042623          	sw	zero,76(s0)
80004db8:	00c12083          	lw	ra,12(sp)
80004dbc:	00040513          	mv	a0,s0
80004dc0:	00812403          	lw	s0,8(sp)
80004dc4:	00412483          	lw	s1,4(sp)
80004dc8:	00012903          	lw	s2,0(sp)
80004dcc:	01010113          	addi	sp,sp,16
80004dd0:	00008067          	ret
80004dd4:	06840413          	addi	s0,s0,104
80004dd8:	f6dff06f          	j	80004d44 <__sfp+0x40>
80004ddc:	00400593          	li	a1,4
80004de0:	00090513          	mv	a0,s2
80004de4:	dddff0ef          	jal	ra,80004bc0 <__sfmoreglue>
80004de8:	00a4a023          	sw	a0,0(s1)
80004dec:	00050413          	mv	s0,a0
80004df0:	f60512e3          	bnez	a0,80004d54 <__sfp+0x50>
80004df4:	e41ff0ef          	jal	ra,80004c34 <__sfp_lock_release>
80004df8:	00c00793          	li	a5,12
80004dfc:	00f92023          	sw	a5,0(s2)
80004e00:	fb9ff06f          	j	80004db8 <__sfp+0xb4>

80004e04 <_fwalk_reent>:
80004e04:	fd010113          	addi	sp,sp,-48
80004e08:	02812423          	sw	s0,40(sp)
80004e0c:	03212023          	sw	s2,32(sp)
80004e10:	01312e23          	sw	s3,28(sp)
80004e14:	01412c23          	sw	s4,24(sp)
80004e18:	01612823          	sw	s6,16(sp)
80004e1c:	01712623          	sw	s7,12(sp)
80004e20:	02112623          	sw	ra,44(sp)
80004e24:	02912223          	sw	s1,36(sp)
80004e28:	01512a23          	sw	s5,20(sp)
80004e2c:	00050913          	mv	s2,a0
80004e30:	00058a13          	mv	s4,a1
80004e34:	04850413          	addi	s0,a0,72
80004e38:	00000993          	li	s3,0
80004e3c:	00100b13          	li	s6,1
80004e40:	fff00b93          	li	s7,-1
80004e44:	00842483          	lw	s1,8(s0)
80004e48:	00442a83          	lw	s5,4(s0)
80004e4c:	fffa8a93          	addi	s5,s5,-1
80004e50:	020ade63          	bgez	s5,80004e8c <_fwalk_reent+0x88>
80004e54:	00042403          	lw	s0,0(s0)
80004e58:	fe0416e3          	bnez	s0,80004e44 <_fwalk_reent+0x40>
80004e5c:	02c12083          	lw	ra,44(sp)
80004e60:	02812403          	lw	s0,40(sp)
80004e64:	02412483          	lw	s1,36(sp)
80004e68:	02012903          	lw	s2,32(sp)
80004e6c:	01812a03          	lw	s4,24(sp)
80004e70:	01412a83          	lw	s5,20(sp)
80004e74:	01012b03          	lw	s6,16(sp)
80004e78:	00c12b83          	lw	s7,12(sp)
80004e7c:	00098513          	mv	a0,s3
80004e80:	01c12983          	lw	s3,28(sp)
80004e84:	03010113          	addi	sp,sp,48
80004e88:	00008067          	ret
80004e8c:	00c4d783          	lhu	a5,12(s1)
80004e90:	00fb7e63          	bgeu	s6,a5,80004eac <_fwalk_reent+0xa8>
80004e94:	00e49783          	lh	a5,14(s1)
80004e98:	01778a63          	beq	a5,s7,80004eac <_fwalk_reent+0xa8>
80004e9c:	00048593          	mv	a1,s1
80004ea0:	00090513          	mv	a0,s2
80004ea4:	000a00e7          	jalr	s4
80004ea8:	00a9e9b3          	or	s3,s3,a0
80004eac:	06848493          	addi	s1,s1,104
80004eb0:	f9dff06f          	j	80004e4c <_fwalk_reent+0x48>

80004eb4 <__malloc_lock>:
80004eb4:	80009537          	lui	a0,0x80009
80004eb8:	1fc50513          	addi	a0,a0,508 # 800091fc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800091fd>
80004ebc:	a1cfd06f          	j	800020d8 <__retarget_lock_acquire_recursive>

80004ec0 <__malloc_unlock>:
80004ec0:	80009537          	lui	a0,0x80009
80004ec4:	1fc50513          	addi	a0,a0,508 # 800091fc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800091fd>
80004ec8:	a30fd06f          	j	800020f8 <__retarget_lock_release_recursive>

80004ecc <__sfputc_r>:
80004ecc:	00862783          	lw	a5,8(a2)
80004ed0:	fff78793          	addi	a5,a5,-1
80004ed4:	00f62423          	sw	a5,8(a2)
80004ed8:	0007dc63          	bgez	a5,80004ef0 <__sfputc_r+0x24>
80004edc:	01862703          	lw	a4,24(a2)
80004ee0:	00e7c663          	blt	a5,a4,80004eec <__sfputc_r+0x20>
80004ee4:	00a00793          	li	a5,10
80004ee8:	00f59463          	bne	a1,a5,80004ef0 <__sfputc_r+0x24>
80004eec:	3650006f          	j	80005a50 <__swbuf_r>
80004ef0:	00062783          	lw	a5,0(a2)
80004ef4:	00058513          	mv	a0,a1
80004ef8:	00178713          	addi	a4,a5,1
80004efc:	00e62023          	sw	a4,0(a2)
80004f00:	00b78023          	sb	a1,0(a5)
80004f04:	00008067          	ret

80004f08 <__sfputs_r>:
80004f08:	fe010113          	addi	sp,sp,-32
80004f0c:	00812c23          	sw	s0,24(sp)
80004f10:	00912a23          	sw	s1,20(sp)
80004f14:	01212823          	sw	s2,16(sp)
80004f18:	01312623          	sw	s3,12(sp)
80004f1c:	01412423          	sw	s4,8(sp)
80004f20:	00112e23          	sw	ra,28(sp)
80004f24:	00050913          	mv	s2,a0
80004f28:	00058993          	mv	s3,a1
80004f2c:	00060413          	mv	s0,a2
80004f30:	00d604b3          	add	s1,a2,a3
80004f34:	fff00a13          	li	s4,-1
80004f38:	00941663          	bne	s0,s1,80004f44 <__sfputs_r+0x3c>
80004f3c:	00000513          	li	a0,0
80004f40:	01c0006f          	j	80004f5c <__sfputs_r+0x54>
80004f44:	00044583          	lbu	a1,0(s0)
80004f48:	00098613          	mv	a2,s3
80004f4c:	00090513          	mv	a0,s2
80004f50:	f7dff0ef          	jal	ra,80004ecc <__sfputc_r>
80004f54:	00140413          	addi	s0,s0,1
80004f58:	ff4510e3          	bne	a0,s4,80004f38 <__sfputs_r+0x30>
80004f5c:	01c12083          	lw	ra,28(sp)
80004f60:	01812403          	lw	s0,24(sp)
80004f64:	01412483          	lw	s1,20(sp)
80004f68:	01012903          	lw	s2,16(sp)
80004f6c:	00c12983          	lw	s3,12(sp)
80004f70:	00812a03          	lw	s4,8(sp)
80004f74:	02010113          	addi	sp,sp,32
80004f78:	00008067          	ret

80004f7c <_vfiprintf_r>:
80004f7c:	f5010113          	addi	sp,sp,-176
80004f80:	0a812423          	sw	s0,168(sp)
80004f84:	0a912223          	sw	s1,164(sp)
80004f88:	0b212023          	sw	s2,160(sp)
80004f8c:	09312e23          	sw	s3,156(sp)
80004f90:	0a112623          	sw	ra,172(sp)
80004f94:	09412c23          	sw	s4,152(sp)
80004f98:	09512a23          	sw	s5,148(sp)
80004f9c:	09612823          	sw	s6,144(sp)
80004fa0:	09712623          	sw	s7,140(sp)
80004fa4:	09812423          	sw	s8,136(sp)
80004fa8:	09912223          	sw	s9,132(sp)
80004fac:	09a12023          	sw	s10,128(sp)
80004fb0:	07b12e23          	sw	s11,124(sp)
80004fb4:	00050993          	mv	s3,a0
80004fb8:	00058413          	mv	s0,a1
80004fbc:	00060913          	mv	s2,a2
80004fc0:	00068493          	mv	s1,a3
80004fc4:	00050863          	beqz	a0,80004fd4 <_vfiprintf_r+0x58>
80004fc8:	01852783          	lw	a5,24(a0)
80004fcc:	00079463          	bnez	a5,80004fd4 <_vfiprintf_r+0x58>
80004fd0:	c7dff0ef          	jal	ra,80004c4c <__sinit>
80004fd4:	800077b7          	lui	a5,0x80007
80004fd8:	b3c78793          	addi	a5,a5,-1220 # 80006b3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b3d>
80004fdc:	08f41c63          	bne	s0,a5,80005074 <_vfiprintf_r+0xf8>
80004fe0:	0049a403          	lw	s0,4(s3)
80004fe4:	06442783          	lw	a5,100(s0)
80004fe8:	0017f793          	andi	a5,a5,1
80004fec:	00079c63          	bnez	a5,80005004 <_vfiprintf_r+0x88>
80004ff0:	00c45783          	lhu	a5,12(s0)
80004ff4:	2007f793          	andi	a5,a5,512
80004ff8:	00079663          	bnez	a5,80005004 <_vfiprintf_r+0x88>
80004ffc:	05842503          	lw	a0,88(s0)
80005000:	8d8fd0ef          	jal	ra,800020d8 <__retarget_lock_acquire_recursive>
80005004:	00c45783          	lhu	a5,12(s0)
80005008:	0087f793          	andi	a5,a5,8
8000500c:	00078663          	beqz	a5,80005018 <_vfiprintf_r+0x9c>
80005010:	01042783          	lw	a5,16(s0)
80005014:	0a079063          	bnez	a5,800050b4 <_vfiprintf_r+0x138>
80005018:	00040593          	mv	a1,s0
8000501c:	00098513          	mv	a0,s3
80005020:	3bd000ef          	jal	ra,80005bdc <__swsetup_r>
80005024:	08050863          	beqz	a0,800050b4 <_vfiprintf_r+0x138>
80005028:	06442783          	lw	a5,100(s0)
8000502c:	0017f793          	andi	a5,a5,1
80005030:	06078663          	beqz	a5,8000509c <_vfiprintf_r+0x120>
80005034:	fff00513          	li	a0,-1
80005038:	0ac12083          	lw	ra,172(sp)
8000503c:	0a812403          	lw	s0,168(sp)
80005040:	0a412483          	lw	s1,164(sp)
80005044:	0a012903          	lw	s2,160(sp)
80005048:	09c12983          	lw	s3,156(sp)
8000504c:	09812a03          	lw	s4,152(sp)
80005050:	09412a83          	lw	s5,148(sp)
80005054:	09012b03          	lw	s6,144(sp)
80005058:	08c12b83          	lw	s7,140(sp)
8000505c:	08812c03          	lw	s8,136(sp)
80005060:	08412c83          	lw	s9,132(sp)
80005064:	08012d03          	lw	s10,128(sp)
80005068:	07c12d83          	lw	s11,124(sp)
8000506c:	0b010113          	addi	sp,sp,176
80005070:	00008067          	ret
80005074:	800077b7          	lui	a5,0x80007
80005078:	b1c78793          	addi	a5,a5,-1252 # 80006b1c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b1d>
8000507c:	00f41663          	bne	s0,a5,80005088 <_vfiprintf_r+0x10c>
80005080:	0089a403          	lw	s0,8(s3)
80005084:	f61ff06f          	j	80004fe4 <_vfiprintf_r+0x68>
80005088:	800077b7          	lui	a5,0x80007
8000508c:	afc78793          	addi	a5,a5,-1284 # 80006afc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006afd>
80005090:	f4f41ae3          	bne	s0,a5,80004fe4 <_vfiprintf_r+0x68>
80005094:	00c9a403          	lw	s0,12(s3)
80005098:	f4dff06f          	j	80004fe4 <_vfiprintf_r+0x68>
8000509c:	00c45783          	lhu	a5,12(s0)
800050a0:	2007f793          	andi	a5,a5,512
800050a4:	f80798e3          	bnez	a5,80005034 <_vfiprintf_r+0xb8>
800050a8:	05842503          	lw	a0,88(s0)
800050ac:	84cfd0ef          	jal	ra,800020f8 <__retarget_lock_release_recursive>
800050b0:	f85ff06f          	j	80005034 <_vfiprintf_r+0xb8>
800050b4:	02000793          	li	a5,32
800050b8:	02f104a3          	sb	a5,41(sp)
800050bc:	03000793          	li	a5,48
800050c0:	02012223          	sw	zero,36(sp)
800050c4:	02f10523          	sb	a5,42(sp)
800050c8:	00912623          	sw	s1,12(sp)
800050cc:	02500c93          	li	s9,37
800050d0:	80007b37          	lui	s6,0x80007
800050d4:	80007bb7          	lui	s7,0x80007
800050d8:	80007d37          	lui	s10,0x80007
800050dc:	80005c37          	lui	s8,0x80005
800050e0:	00000a93          	li	s5,0
800050e4:	00090493          	mv	s1,s2
800050e8:	0004c783          	lbu	a5,0(s1)
800050ec:	00078463          	beqz	a5,800050f4 <_vfiprintf_r+0x178>
800050f0:	0d979c63          	bne	a5,s9,800051c8 <_vfiprintf_r+0x24c>
800050f4:	41248db3          	sub	s11,s1,s2
800050f8:	03248663          	beq	s1,s2,80005124 <_vfiprintf_r+0x1a8>
800050fc:	000d8693          	mv	a3,s11
80005100:	00090613          	mv	a2,s2
80005104:	00040593          	mv	a1,s0
80005108:	00098513          	mv	a0,s3
8000510c:	dfdff0ef          	jal	ra,80004f08 <__sfputs_r>
80005110:	fff00793          	li	a5,-1
80005114:	24f50463          	beq	a0,a5,8000535c <_vfiprintf_r+0x3e0>
80005118:	02412783          	lw	a5,36(sp)
8000511c:	01b787b3          	add	a5,a5,s11
80005120:	02f12223          	sw	a5,36(sp)
80005124:	0004c783          	lbu	a5,0(s1)
80005128:	22078a63          	beqz	a5,8000535c <_vfiprintf_r+0x3e0>
8000512c:	fff00793          	li	a5,-1
80005130:	00148913          	addi	s2,s1,1
80005134:	00012823          	sw	zero,16(sp)
80005138:	00012e23          	sw	zero,28(sp)
8000513c:	00f12a23          	sw	a5,20(sp)
80005140:	00012c23          	sw	zero,24(sp)
80005144:	040109a3          	sb	zero,83(sp)
80005148:	06012423          	sw	zero,104(sp)
8000514c:	00100d93          	li	s11,1
80005150:	00094583          	lbu	a1,0(s2)
80005154:	00500613          	li	a2,5
80005158:	b5cb0513          	addi	a0,s6,-1188 # 80006b5c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b5d>
8000515c:	0d0010ef          	jal	ra,8000622c <memchr>
80005160:	01012783          	lw	a5,16(sp)
80005164:	00190493          	addi	s1,s2,1
80005168:	06051463          	bnez	a0,800051d0 <_vfiprintf_r+0x254>
8000516c:	0107f713          	andi	a4,a5,16
80005170:	00070663          	beqz	a4,8000517c <_vfiprintf_r+0x200>
80005174:	02000713          	li	a4,32
80005178:	04e109a3          	sb	a4,83(sp)
8000517c:	0087f713          	andi	a4,a5,8
80005180:	00070663          	beqz	a4,8000518c <_vfiprintf_r+0x210>
80005184:	02b00713          	li	a4,43
80005188:	04e109a3          	sb	a4,83(sp)
8000518c:	00094683          	lbu	a3,0(s2)
80005190:	02a00713          	li	a4,42
80005194:	04e68c63          	beq	a3,a4,800051ec <_vfiprintf_r+0x270>
80005198:	01c12783          	lw	a5,28(sp)
8000519c:	00090493          	mv	s1,s2
800051a0:	00000693          	li	a3,0
800051a4:	00900613          	li	a2,9
800051a8:	00a00513          	li	a0,10
800051ac:	0004c703          	lbu	a4,0(s1)
800051b0:	00148593          	addi	a1,s1,1
800051b4:	fd070713          	addi	a4,a4,-48
800051b8:	08e67e63          	bgeu	a2,a4,80005254 <_vfiprintf_r+0x2d8>
800051bc:	04068463          	beqz	a3,80005204 <_vfiprintf_r+0x288>
800051c0:	00f12e23          	sw	a5,28(sp)
800051c4:	0400006f          	j	80005204 <_vfiprintf_r+0x288>
800051c8:	00148493          	addi	s1,s1,1
800051cc:	f1dff06f          	j	800050e8 <_vfiprintf_r+0x16c>
800051d0:	b5cb0713          	addi	a4,s6,-1188
800051d4:	40e50533          	sub	a0,a0,a4
800051d8:	00ad9533          	sll	a0,s11,a0
800051dc:	00a7e7b3          	or	a5,a5,a0
800051e0:	00f12823          	sw	a5,16(sp)
800051e4:	00048913          	mv	s2,s1
800051e8:	f69ff06f          	j	80005150 <_vfiprintf_r+0x1d4>
800051ec:	00c12703          	lw	a4,12(sp)
800051f0:	00470693          	addi	a3,a4,4
800051f4:	00072703          	lw	a4,0(a4)
800051f8:	00d12623          	sw	a3,12(sp)
800051fc:	04074263          	bltz	a4,80005240 <_vfiprintf_r+0x2c4>
80005200:	00e12e23          	sw	a4,28(sp)
80005204:	0004c703          	lbu	a4,0(s1)
80005208:	02e00793          	li	a5,46
8000520c:	08f71463          	bne	a4,a5,80005294 <_vfiprintf_r+0x318>
80005210:	0014c703          	lbu	a4,1(s1)
80005214:	02a00793          	li	a5,42
80005218:	04f71863          	bne	a4,a5,80005268 <_vfiprintf_r+0x2ec>
8000521c:	00c12783          	lw	a5,12(sp)
80005220:	00248493          	addi	s1,s1,2
80005224:	00478713          	addi	a4,a5,4
80005228:	0007a783          	lw	a5,0(a5)
8000522c:	00e12623          	sw	a4,12(sp)
80005230:	0007d463          	bgez	a5,80005238 <_vfiprintf_r+0x2bc>
80005234:	fff00793          	li	a5,-1
80005238:	00f12a23          	sw	a5,20(sp)
8000523c:	0580006f          	j	80005294 <_vfiprintf_r+0x318>
80005240:	40e00733          	neg	a4,a4
80005244:	0027e793          	ori	a5,a5,2
80005248:	00e12e23          	sw	a4,28(sp)
8000524c:	00f12823          	sw	a5,16(sp)
80005250:	fb5ff06f          	j	80005204 <_vfiprintf_r+0x288>
80005254:	02a787b3          	mul	a5,a5,a0
80005258:	00058493          	mv	s1,a1
8000525c:	00100693          	li	a3,1
80005260:	00e787b3          	add	a5,a5,a4
80005264:	f49ff06f          	j	800051ac <_vfiprintf_r+0x230>
80005268:	00148493          	addi	s1,s1,1
8000526c:	00012a23          	sw	zero,20(sp)
80005270:	00000693          	li	a3,0
80005274:	00000793          	li	a5,0
80005278:	00900613          	li	a2,9
8000527c:	00a00513          	li	a0,10
80005280:	0004c703          	lbu	a4,0(s1)
80005284:	00148593          	addi	a1,s1,1
80005288:	fd070713          	addi	a4,a4,-48
8000528c:	08e67263          	bgeu	a2,a4,80005310 <_vfiprintf_r+0x394>
80005290:	fa0694e3          	bnez	a3,80005238 <_vfiprintf_r+0x2bc>
80005294:	0004c583          	lbu	a1,0(s1)
80005298:	00300613          	li	a2,3
8000529c:	b64b8513          	addi	a0,s7,-1180 # 80006b64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b65>
800052a0:	78d000ef          	jal	ra,8000622c <memchr>
800052a4:	02050263          	beqz	a0,800052c8 <_vfiprintf_r+0x34c>
800052a8:	b64b8793          	addi	a5,s7,-1180
800052ac:	40f50533          	sub	a0,a0,a5
800052b0:	01012783          	lw	a5,16(sp)
800052b4:	04000713          	li	a4,64
800052b8:	00a71733          	sll	a4,a4,a0
800052bc:	00e7e7b3          	or	a5,a5,a4
800052c0:	00148493          	addi	s1,s1,1
800052c4:	00f12823          	sw	a5,16(sp)
800052c8:	0004c583          	lbu	a1,0(s1)
800052cc:	00600613          	li	a2,6
800052d0:	b68d0513          	addi	a0,s10,-1176 # 80006b68 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b69>
800052d4:	00148913          	addi	s2,s1,1
800052d8:	02b10423          	sb	a1,40(sp)
800052dc:	751000ef          	jal	ra,8000622c <memchr>
800052e0:	0a050863          	beqz	a0,80005390 <_vfiprintf_r+0x414>
800052e4:	040a9863          	bnez	s5,80005334 <_vfiprintf_r+0x3b8>
800052e8:	01012703          	lw	a4,16(sp)
800052ec:	00c12783          	lw	a5,12(sp)
800052f0:	10077713          	andi	a4,a4,256
800052f4:	02070863          	beqz	a4,80005324 <_vfiprintf_r+0x3a8>
800052f8:	00478793          	addi	a5,a5,4
800052fc:	00f12623          	sw	a5,12(sp)
80005300:	02412783          	lw	a5,36(sp)
80005304:	014787b3          	add	a5,a5,s4
80005308:	02f12223          	sw	a5,36(sp)
8000530c:	dd9ff06f          	j	800050e4 <_vfiprintf_r+0x168>
80005310:	02a787b3          	mul	a5,a5,a0
80005314:	00058493          	mv	s1,a1
80005318:	00100693          	li	a3,1
8000531c:	00e787b3          	add	a5,a5,a4
80005320:	f61ff06f          	j	80005280 <_vfiprintf_r+0x304>
80005324:	00778793          	addi	a5,a5,7
80005328:	ff87f793          	andi	a5,a5,-8
8000532c:	00878793          	addi	a5,a5,8
80005330:	fcdff06f          	j	800052fc <_vfiprintf_r+0x380>
80005334:	00c10713          	addi	a4,sp,12
80005338:	f08c0693          	addi	a3,s8,-248 # 80004f08 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80004f09>
8000533c:	00040613          	mv	a2,s0
80005340:	01010593          	addi	a1,sp,16
80005344:	00098513          	mv	a0,s3
80005348:	00000097          	auipc	ra,0x0
8000534c:	000000e7          	jalr	zero # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
80005350:	fff00793          	li	a5,-1
80005354:	00050a13          	mv	s4,a0
80005358:	faf514e3          	bne	a0,a5,80005300 <_vfiprintf_r+0x384>
8000535c:	06442783          	lw	a5,100(s0)
80005360:	0017f793          	andi	a5,a5,1
80005364:	00079c63          	bnez	a5,8000537c <_vfiprintf_r+0x400>
80005368:	00c45783          	lhu	a5,12(s0)
8000536c:	2007f793          	andi	a5,a5,512
80005370:	00079663          	bnez	a5,8000537c <_vfiprintf_r+0x400>
80005374:	05842503          	lw	a0,88(s0)
80005378:	d81fc0ef          	jal	ra,800020f8 <__retarget_lock_release_recursive>
8000537c:	00c45783          	lhu	a5,12(s0)
80005380:	0407f793          	andi	a5,a5,64
80005384:	ca0798e3          	bnez	a5,80005034 <_vfiprintf_r+0xb8>
80005388:	02412503          	lw	a0,36(sp)
8000538c:	cadff06f          	j	80005038 <_vfiprintf_r+0xbc>
80005390:	00c10713          	addi	a4,sp,12
80005394:	f08c0693          	addi	a3,s8,-248
80005398:	00040613          	mv	a2,s0
8000539c:	01010593          	addi	a1,sp,16
800053a0:	00098513          	mv	a0,s3
800053a4:	1b8000ef          	jal	ra,8000555c <_printf_i>
800053a8:	fa9ff06f          	j	80005350 <_vfiprintf_r+0x3d4>

800053ac <_printf_common>:
800053ac:	fd010113          	addi	sp,sp,-48
800053b0:	01512a23          	sw	s5,20(sp)
800053b4:	0105a783          	lw	a5,16(a1)
800053b8:	00070a93          	mv	s5,a4
800053bc:	0085a703          	lw	a4,8(a1)
800053c0:	02812423          	sw	s0,40(sp)
800053c4:	03212023          	sw	s2,32(sp)
800053c8:	01312e23          	sw	s3,28(sp)
800053cc:	01412c23          	sw	s4,24(sp)
800053d0:	02112623          	sw	ra,44(sp)
800053d4:	02912223          	sw	s1,36(sp)
800053d8:	01612823          	sw	s6,16(sp)
800053dc:	01712623          	sw	s7,12(sp)
800053e0:	00050993          	mv	s3,a0
800053e4:	00058413          	mv	s0,a1
800053e8:	00060913          	mv	s2,a2
800053ec:	00068a13          	mv	s4,a3
800053f0:	00e7d463          	bge	a5,a4,800053f8 <_printf_common+0x4c>
800053f4:	00070793          	mv	a5,a4
800053f8:	00f92023          	sw	a5,0(s2)
800053fc:	04344703          	lbu	a4,67(s0)
80005400:	00070663          	beqz	a4,8000540c <_printf_common+0x60>
80005404:	00178793          	addi	a5,a5,1
80005408:	00f92023          	sw	a5,0(s2)
8000540c:	00042783          	lw	a5,0(s0)
80005410:	0207f793          	andi	a5,a5,32
80005414:	00078863          	beqz	a5,80005424 <_printf_common+0x78>
80005418:	00092783          	lw	a5,0(s2)
8000541c:	00278793          	addi	a5,a5,2
80005420:	00f92023          	sw	a5,0(s2)
80005424:	00042483          	lw	s1,0(s0)
80005428:	0064f493          	andi	s1,s1,6
8000542c:	00049e63          	bnez	s1,80005448 <_printf_common+0x9c>
80005430:	01940b13          	addi	s6,s0,25
80005434:	fff00b93          	li	s7,-1
80005438:	00c42783          	lw	a5,12(s0)
8000543c:	00092703          	lw	a4,0(s2)
80005440:	40e787b3          	sub	a5,a5,a4
80005444:	08f4c263          	blt	s1,a5,800054c8 <_printf_common+0x11c>
80005448:	04344783          	lbu	a5,67(s0)
8000544c:	00f036b3          	snez	a3,a5
80005450:	00042783          	lw	a5,0(s0)
80005454:	0207f793          	andi	a5,a5,32
80005458:	0c079063          	bnez	a5,80005518 <_printf_common+0x16c>
8000545c:	04340613          	addi	a2,s0,67
80005460:	000a0593          	mv	a1,s4
80005464:	00098513          	mv	a0,s3
80005468:	000a80e7          	jalr	s5
8000546c:	fff00793          	li	a5,-1
80005470:	06f50863          	beq	a0,a5,800054e0 <_printf_common+0x134>
80005474:	00042783          	lw	a5,0(s0)
80005478:	00400713          	li	a4,4
8000547c:	00000493          	li	s1,0
80005480:	0067f793          	andi	a5,a5,6
80005484:	00e79c63          	bne	a5,a4,8000549c <_printf_common+0xf0>
80005488:	00c42483          	lw	s1,12(s0)
8000548c:	00092783          	lw	a5,0(s2)
80005490:	40f484b3          	sub	s1,s1,a5
80005494:	0004d463          	bgez	s1,8000549c <_printf_common+0xf0>
80005498:	00000493          	li	s1,0
8000549c:	00842783          	lw	a5,8(s0)
800054a0:	01042703          	lw	a4,16(s0)
800054a4:	00f75663          	bge	a4,a5,800054b0 <_printf_common+0x104>
800054a8:	40e787b3          	sub	a5,a5,a4
800054ac:	00f484b3          	add	s1,s1,a5
800054b0:	00000913          	li	s2,0
800054b4:	01a40413          	addi	s0,s0,26
800054b8:	fff00b13          	li	s6,-1
800054bc:	09249063          	bne	s1,s2,8000553c <_printf_common+0x190>
800054c0:	00000513          	li	a0,0
800054c4:	0200006f          	j	800054e4 <_printf_common+0x138>
800054c8:	00100693          	li	a3,1
800054cc:	000b0613          	mv	a2,s6
800054d0:	000a0593          	mv	a1,s4
800054d4:	00098513          	mv	a0,s3
800054d8:	000a80e7          	jalr	s5
800054dc:	03751a63          	bne	a0,s7,80005510 <_printf_common+0x164>
800054e0:	fff00513          	li	a0,-1
800054e4:	02c12083          	lw	ra,44(sp)
800054e8:	02812403          	lw	s0,40(sp)
800054ec:	02412483          	lw	s1,36(sp)
800054f0:	02012903          	lw	s2,32(sp)
800054f4:	01c12983          	lw	s3,28(sp)
800054f8:	01812a03          	lw	s4,24(sp)
800054fc:	01412a83          	lw	s5,20(sp)
80005500:	01012b03          	lw	s6,16(sp)
80005504:	00c12b83          	lw	s7,12(sp)
80005508:	03010113          	addi	sp,sp,48
8000550c:	00008067          	ret
80005510:	00148493          	addi	s1,s1,1
80005514:	f25ff06f          	j	80005438 <_printf_common+0x8c>
80005518:	00d40733          	add	a4,s0,a3
8000551c:	03000613          	li	a2,48
80005520:	04c701a3          	sb	a2,67(a4)
80005524:	04544703          	lbu	a4,69(s0)
80005528:	00168793          	addi	a5,a3,1
8000552c:	00f407b3          	add	a5,s0,a5
80005530:	00268693          	addi	a3,a3,2
80005534:	04e781a3          	sb	a4,67(a5)
80005538:	f25ff06f          	j	8000545c <_printf_common+0xb0>
8000553c:	00100693          	li	a3,1
80005540:	00040613          	mv	a2,s0
80005544:	000a0593          	mv	a1,s4
80005548:	00098513          	mv	a0,s3
8000554c:	000a80e7          	jalr	s5
80005550:	f96508e3          	beq	a0,s6,800054e0 <_printf_common+0x134>
80005554:	00190913          	addi	s2,s2,1
80005558:	f65ff06f          	j	800054bc <_printf_common+0x110>

8000555c <_printf_i>:
8000555c:	fd010113          	addi	sp,sp,-48
80005560:	02812423          	sw	s0,40(sp)
80005564:	02912223          	sw	s1,36(sp)
80005568:	03212023          	sw	s2,32(sp)
8000556c:	01312e23          	sw	s3,28(sp)
80005570:	02112623          	sw	ra,44(sp)
80005574:	01412c23          	sw	s4,24(sp)
80005578:	01512a23          	sw	s5,20(sp)
8000557c:	01612823          	sw	s6,16(sp)
80005580:	0185c883          	lbu	a7,24(a1)
80005584:	07800793          	li	a5,120
80005588:	00050493          	mv	s1,a0
8000558c:	00058413          	mv	s0,a1
80005590:	00060913          	mv	s2,a2
80005594:	00068993          	mv	s3,a3
80005598:	0117ee63          	bltu	a5,a7,800055b4 <_printf_i+0x58>
8000559c:	06200793          	li	a5,98
800055a0:	04358693          	addi	a3,a1,67
800055a4:	0117ee63          	bltu	a5,a7,800055c0 <_printf_i+0x64>
800055a8:	2a088a63          	beqz	a7,8000585c <_printf_i+0x300>
800055ac:	05800793          	li	a5,88
800055b0:	20f88a63          	beq	a7,a5,800057c4 <_printf_i+0x268>
800055b4:	04240a93          	addi	s5,s0,66
800055b8:	05140123          	sb	a7,66(s0)
800055bc:	0440006f          	j	80005600 <_printf_i+0xa4>
800055c0:	f9d88793          	addi	a5,a7,-99 # ffff9d <CONFIG_SRAM_SIZE+0xefff9d>
800055c4:	0ff7f793          	zext.b	a5,a5
800055c8:	01500613          	li	a2,21
800055cc:	fef664e3          	bltu	a2,a5,800055b4 <_printf_i+0x58>
800055d0:	80007637          	lui	a2,0x80007
800055d4:	00279793          	slli	a5,a5,0x2
800055d8:	b9860613          	addi	a2,a2,-1128 # 80006b98 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b99>
800055dc:	00c787b3          	add	a5,a5,a2
800055e0:	0007a783          	lw	a5,0(a5)
800055e4:	00078067          	jr	a5
800055e8:	00072783          	lw	a5,0(a4)
800055ec:	04258a93          	addi	s5,a1,66
800055f0:	00478693          	addi	a3,a5,4
800055f4:	0007a783          	lw	a5,0(a5)
800055f8:	00d72023          	sw	a3,0(a4)
800055fc:	04f58123          	sb	a5,66(a1)
80005600:	00100793          	li	a5,1
80005604:	2940006f          	j	80005898 <_printf_i+0x33c>
80005608:	0005a603          	lw	a2,0(a1)
8000560c:	00072783          	lw	a5,0(a4)
80005610:	08067513          	andi	a0,a2,128
80005614:	00478593          	addi	a1,a5,4
80005618:	04050e63          	beqz	a0,80005674 <_printf_i+0x118>
8000561c:	0007a783          	lw	a5,0(a5)
80005620:	00b72023          	sw	a1,0(a4)
80005624:	80007737          	lui	a4,0x80007
80005628:	00442583          	lw	a1,4(s0)
8000562c:	b7070813          	addi	a6,a4,-1168 # 80006b70 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b71>
80005630:	1e07d263          	bgez	a5,80005814 <_printf_i+0x2b8>
80005634:	02d00713          	li	a4,45
80005638:	04e401a3          	sb	a4,67(s0)
8000563c:	00b42423          	sw	a1,8(s0)
80005640:	0405d863          	bgez	a1,80005690 <_printf_i+0x134>
80005644:	40f007b3          	neg	a5,a5
80005648:	00a00713          	li	a4,10
8000564c:	00068a93          	mv	s5,a3
80005650:	02e7f633          	remu	a2,a5,a4
80005654:	fffa8a93          	addi	s5,s5,-1
80005658:	00c80633          	add	a2,a6,a2
8000565c:	00064603          	lbu	a2,0(a2)
80005660:	00ca8023          	sb	a2,0(s5)
80005664:	00078613          	mv	a2,a5
80005668:	02e7d7b3          	divu	a5,a5,a4
8000566c:	fee672e3          	bgeu	a2,a4,80005650 <_printf_i+0xf4>
80005670:	0980006f          	j	80005708 <_printf_i+0x1ac>
80005674:	0007a783          	lw	a5,0(a5)
80005678:	04067513          	andi	a0,a2,64
8000567c:	00b72023          	sw	a1,0(a4)
80005680:	fa0502e3          	beqz	a0,80005624 <_printf_i+0xc8>
80005684:	01079793          	slli	a5,a5,0x10
80005688:	4107d793          	srai	a5,a5,0x10
8000568c:	f99ff06f          	j	80005624 <_printf_i+0xc8>
80005690:	ffb67613          	andi	a2,a2,-5
80005694:	00c42023          	sw	a2,0(s0)
80005698:	fadff06f          	j	80005644 <_printf_i+0xe8>
8000569c:	0005a603          	lw	a2,0(a1)
800056a0:	00072783          	lw	a5,0(a4)
800056a4:	08067513          	andi	a0,a2,128
800056a8:	00478593          	addi	a1,a5,4
800056ac:	00050863          	beqz	a0,800056bc <_printf_i+0x160>
800056b0:	00b72023          	sw	a1,0(a4)
800056b4:	0007a783          	lw	a5,0(a5)
800056b8:	0140006f          	j	800056cc <_printf_i+0x170>
800056bc:	04067613          	andi	a2,a2,64
800056c0:	00b72023          	sw	a1,0(a4)
800056c4:	fe0608e3          	beqz	a2,800056b4 <_printf_i+0x158>
800056c8:	0007d783          	lhu	a5,0(a5)
800056cc:	80007837          	lui	a6,0x80007
800056d0:	06f00713          	li	a4,111
800056d4:	b7080813          	addi	a6,a6,-1168 # 80006b70 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b71>
800056d8:	12e89a63          	bne	a7,a4,8000580c <_printf_i+0x2b0>
800056dc:	00800713          	li	a4,8
800056e0:	040401a3          	sb	zero,67(s0)
800056e4:	00442603          	lw	a2,4(s0)
800056e8:	00c42423          	sw	a2,8(s0)
800056ec:	f60640e3          	bltz	a2,8000564c <_printf_i+0xf0>
800056f0:	00042583          	lw	a1,0(s0)
800056f4:	ffb5f593          	andi	a1,a1,-5
800056f8:	00b42023          	sw	a1,0(s0)
800056fc:	f40798e3          	bnez	a5,8000564c <_printf_i+0xf0>
80005700:	00068a93          	mv	s5,a3
80005704:	f40614e3          	bnez	a2,8000564c <_printf_i+0xf0>
80005708:	00800793          	li	a5,8
8000570c:	02f71463          	bne	a4,a5,80005734 <_printf_i+0x1d8>
80005710:	00042783          	lw	a5,0(s0)
80005714:	0017f793          	andi	a5,a5,1
80005718:	00078e63          	beqz	a5,80005734 <_printf_i+0x1d8>
8000571c:	00442703          	lw	a4,4(s0)
80005720:	01042783          	lw	a5,16(s0)
80005724:	00e7c863          	blt	a5,a4,80005734 <_printf_i+0x1d8>
80005728:	03000793          	li	a5,48
8000572c:	fefa8fa3          	sb	a5,-1(s5)
80005730:	fffa8a93          	addi	s5,s5,-1
80005734:	415686b3          	sub	a3,a3,s5
80005738:	00d42823          	sw	a3,16(s0)
8000573c:	00098713          	mv	a4,s3
80005740:	00090693          	mv	a3,s2
80005744:	00c10613          	addi	a2,sp,12
80005748:	00040593          	mv	a1,s0
8000574c:	00048513          	mv	a0,s1
80005750:	c5dff0ef          	jal	ra,800053ac <_printf_common>
80005754:	fff00a13          	li	s4,-1
80005758:	15451663          	bne	a0,s4,800058a4 <_printf_i+0x348>
8000575c:	fff00513          	li	a0,-1
80005760:	02c12083          	lw	ra,44(sp)
80005764:	02812403          	lw	s0,40(sp)
80005768:	02412483          	lw	s1,36(sp)
8000576c:	02012903          	lw	s2,32(sp)
80005770:	01c12983          	lw	s3,28(sp)
80005774:	01812a03          	lw	s4,24(sp)
80005778:	01412a83          	lw	s5,20(sp)
8000577c:	01012b03          	lw	s6,16(sp)
80005780:	03010113          	addi	sp,sp,48
80005784:	00008067          	ret
80005788:	0005a783          	lw	a5,0(a1)
8000578c:	0207e793          	ori	a5,a5,32
80005790:	00f5a023          	sw	a5,0(a1)
80005794:	80007837          	lui	a6,0x80007
80005798:	07800893          	li	a7,120
8000579c:	b8480813          	addi	a6,a6,-1148 # 80006b84 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b85>
800057a0:	00042603          	lw	a2,0(s0)
800057a4:	051402a3          	sb	a7,69(s0)
800057a8:	00072783          	lw	a5,0(a4)
800057ac:	08067513          	andi	a0,a2,128
800057b0:	00478593          	addi	a1,a5,4
800057b4:	00050e63          	beqz	a0,800057d0 <_printf_i+0x274>
800057b8:	00b72023          	sw	a1,0(a4)
800057bc:	0007a783          	lw	a5,0(a5)
800057c0:	0200006f          	j	800057e0 <_printf_i+0x284>
800057c4:	80007837          	lui	a6,0x80007
800057c8:	b7080813          	addi	a6,a6,-1168 # 80006b70 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b71>
800057cc:	fd5ff06f          	j	800057a0 <_printf_i+0x244>
800057d0:	04067513          	andi	a0,a2,64
800057d4:	00b72023          	sw	a1,0(a4)
800057d8:	fe0502e3          	beqz	a0,800057bc <_printf_i+0x260>
800057dc:	0007d783          	lhu	a5,0(a5)
800057e0:	00167713          	andi	a4,a2,1
800057e4:	00070663          	beqz	a4,800057f0 <_printf_i+0x294>
800057e8:	02066613          	ori	a2,a2,32
800057ec:	00c42023          	sw	a2,0(s0)
800057f0:	00078663          	beqz	a5,800057fc <_printf_i+0x2a0>
800057f4:	01000713          	li	a4,16
800057f8:	ee9ff06f          	j	800056e0 <_printf_i+0x184>
800057fc:	00042703          	lw	a4,0(s0)
80005800:	fdf77713          	andi	a4,a4,-33
80005804:	00e42023          	sw	a4,0(s0)
80005808:	fedff06f          	j	800057f4 <_printf_i+0x298>
8000580c:	00a00713          	li	a4,10
80005810:	ed1ff06f          	j	800056e0 <_printf_i+0x184>
80005814:	b7070813          	addi	a6,a4,-1168
80005818:	00a00713          	li	a4,10
8000581c:	ec9ff06f          	j	800056e4 <_printf_i+0x188>
80005820:	0005a603          	lw	a2,0(a1)
80005824:	00072783          	lw	a5,0(a4)
80005828:	0145a583          	lw	a1,20(a1)
8000582c:	08067813          	andi	a6,a2,128
80005830:	00478513          	addi	a0,a5,4
80005834:	00080a63          	beqz	a6,80005848 <_printf_i+0x2ec>
80005838:	00a72023          	sw	a0,0(a4)
8000583c:	0007a783          	lw	a5,0(a5)
80005840:	00b7a023          	sw	a1,0(a5)
80005844:	0180006f          	j	8000585c <_printf_i+0x300>
80005848:	00a72023          	sw	a0,0(a4)
8000584c:	04067613          	andi	a2,a2,64
80005850:	0007a783          	lw	a5,0(a5)
80005854:	fe0606e3          	beqz	a2,80005840 <_printf_i+0x2e4>
80005858:	00b79023          	sh	a1,0(a5)
8000585c:	00042823          	sw	zero,16(s0)
80005860:	00068a93          	mv	s5,a3
80005864:	ed9ff06f          	j	8000573c <_printf_i+0x1e0>
80005868:	00072783          	lw	a5,0(a4)
8000586c:	0045a603          	lw	a2,4(a1)
80005870:	00000593          	li	a1,0
80005874:	00478693          	addi	a3,a5,4
80005878:	00d72023          	sw	a3,0(a4)
8000587c:	0007aa83          	lw	s5,0(a5)
80005880:	000a8513          	mv	a0,s5
80005884:	1a9000ef          	jal	ra,8000622c <memchr>
80005888:	00050663          	beqz	a0,80005894 <_printf_i+0x338>
8000588c:	41550533          	sub	a0,a0,s5
80005890:	00a42223          	sw	a0,4(s0)
80005894:	00442783          	lw	a5,4(s0)
80005898:	00f42823          	sw	a5,16(s0)
8000589c:	040401a3          	sb	zero,67(s0)
800058a0:	e9dff06f          	j	8000573c <_printf_i+0x1e0>
800058a4:	01042683          	lw	a3,16(s0)
800058a8:	000a8613          	mv	a2,s5
800058ac:	00090593          	mv	a1,s2
800058b0:	00048513          	mv	a0,s1
800058b4:	000980e7          	jalr	s3
800058b8:	eb4502e3          	beq	a0,s4,8000575c <_printf_i+0x200>
800058bc:	00042783          	lw	a5,0(s0)
800058c0:	0027f793          	andi	a5,a5,2
800058c4:	04079463          	bnez	a5,8000590c <_printf_i+0x3b0>
800058c8:	00c12783          	lw	a5,12(sp)
800058cc:	00c42503          	lw	a0,12(s0)
800058d0:	e8f558e3          	bge	a0,a5,80005760 <_printf_i+0x204>
800058d4:	00078513          	mv	a0,a5
800058d8:	e89ff06f          	j	80005760 <_printf_i+0x204>
800058dc:	00100693          	li	a3,1
800058e0:	000a8613          	mv	a2,s5
800058e4:	00090593          	mv	a1,s2
800058e8:	00048513          	mv	a0,s1
800058ec:	000980e7          	jalr	s3
800058f0:	e76506e3          	beq	a0,s6,8000575c <_printf_i+0x200>
800058f4:	001a0a13          	addi	s4,s4,1
800058f8:	00c42783          	lw	a5,12(s0)
800058fc:	00c12703          	lw	a4,12(sp)
80005900:	40e787b3          	sub	a5,a5,a4
80005904:	fcfa4ce3          	blt	s4,a5,800058dc <_printf_i+0x380>
80005908:	fc1ff06f          	j	800058c8 <_printf_i+0x36c>
8000590c:	00000a13          	li	s4,0
80005910:	01940a93          	addi	s5,s0,25
80005914:	fff00b13          	li	s6,-1
80005918:	fe1ff06f          	j	800058f8 <_printf_i+0x39c>

8000591c <__sread>:
8000591c:	ff010113          	addi	sp,sp,-16
80005920:	00812423          	sw	s0,8(sp)
80005924:	00058413          	mv	s0,a1
80005928:	00e59583          	lh	a1,14(a1)
8000592c:	00112623          	sw	ra,12(sp)
80005930:	121000ef          	jal	ra,80006250 <_read_r>
80005934:	02054063          	bltz	a0,80005954 <__sread+0x38>
80005938:	05442783          	lw	a5,84(s0)
8000593c:	00a787b3          	add	a5,a5,a0
80005940:	04f42a23          	sw	a5,84(s0)
80005944:	00c12083          	lw	ra,12(sp)
80005948:	00812403          	lw	s0,8(sp)
8000594c:	01010113          	addi	sp,sp,16
80005950:	00008067          	ret
80005954:	00c45783          	lhu	a5,12(s0)
80005958:	fffff737          	lui	a4,0xfffff
8000595c:	fff70713          	addi	a4,a4,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
80005960:	00e7f7b3          	and	a5,a5,a4
80005964:	00f41623          	sh	a5,12(s0)
80005968:	fddff06f          	j	80005944 <__sread+0x28>

8000596c <__swrite>:
8000596c:	00c5d783          	lhu	a5,12(a1)
80005970:	fe010113          	addi	sp,sp,-32
80005974:	00812c23          	sw	s0,24(sp)
80005978:	00912a23          	sw	s1,20(sp)
8000597c:	01212823          	sw	s2,16(sp)
80005980:	01312623          	sw	s3,12(sp)
80005984:	00112e23          	sw	ra,28(sp)
80005988:	1007f793          	andi	a5,a5,256
8000598c:	00050493          	mv	s1,a0
80005990:	00058413          	mv	s0,a1
80005994:	00060913          	mv	s2,a2
80005998:	00068993          	mv	s3,a3
8000599c:	00078a63          	beqz	a5,800059b0 <__swrite+0x44>
800059a0:	00e59583          	lh	a1,14(a1)
800059a4:	00200693          	li	a3,2
800059a8:	00000613          	li	a2,0
800059ac:	6a4000ef          	jal	ra,80006050 <_lseek_r>
800059b0:	00c45783          	lhu	a5,12(s0)
800059b4:	fffff737          	lui	a4,0xfffff
800059b8:	fff70713          	addi	a4,a4,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
800059bc:	00e7f7b3          	and	a5,a5,a4
800059c0:	00e41583          	lh	a1,14(s0)
800059c4:	00f41623          	sh	a5,12(s0)
800059c8:	01812403          	lw	s0,24(sp)
800059cc:	01c12083          	lw	ra,28(sp)
800059d0:	00098693          	mv	a3,s3
800059d4:	00090613          	mv	a2,s2
800059d8:	00c12983          	lw	s3,12(sp)
800059dc:	01012903          	lw	s2,16(sp)
800059e0:	00048513          	mv	a0,s1
800059e4:	01412483          	lw	s1,20(sp)
800059e8:	02010113          	addi	sp,sp,32
800059ec:	19c0006f          	j	80005b88 <_write_r>

800059f0 <__sseek>:
800059f0:	ff010113          	addi	sp,sp,-16
800059f4:	00812423          	sw	s0,8(sp)
800059f8:	00058413          	mv	s0,a1
800059fc:	00e59583          	lh	a1,14(a1)
80005a00:	00112623          	sw	ra,12(sp)
80005a04:	64c000ef          	jal	ra,80006050 <_lseek_r>
80005a08:	fff00713          	li	a4,-1
80005a0c:	00c45783          	lhu	a5,12(s0)
80005a10:	02e51263          	bne	a0,a4,80005a34 <__sseek+0x44>
80005a14:	fffff737          	lui	a4,0xfffff
80005a18:	fff70713          	addi	a4,a4,-1 # ffffefff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfffff000>
80005a1c:	00e7f7b3          	and	a5,a5,a4
80005a20:	00f41623          	sh	a5,12(s0)
80005a24:	00c12083          	lw	ra,12(sp)
80005a28:	00812403          	lw	s0,8(sp)
80005a2c:	01010113          	addi	sp,sp,16
80005a30:	00008067          	ret
80005a34:	00001737          	lui	a4,0x1
80005a38:	00e7e7b3          	or	a5,a5,a4
80005a3c:	00f41623          	sh	a5,12(s0)
80005a40:	04a42a23          	sw	a0,84(s0)
80005a44:	fe1ff06f          	j	80005a24 <__sseek+0x34>

80005a48 <__sclose>:
80005a48:	00e59583          	lh	a1,14(a1)
80005a4c:	2f40006f          	j	80005d40 <_close_r>

80005a50 <__swbuf_r>:
80005a50:	fe010113          	addi	sp,sp,-32
80005a54:	00812c23          	sw	s0,24(sp)
80005a58:	00912a23          	sw	s1,20(sp)
80005a5c:	01212823          	sw	s2,16(sp)
80005a60:	00112e23          	sw	ra,28(sp)
80005a64:	01312623          	sw	s3,12(sp)
80005a68:	00050493          	mv	s1,a0
80005a6c:	00058913          	mv	s2,a1
80005a70:	00060413          	mv	s0,a2
80005a74:	00050863          	beqz	a0,80005a84 <__swbuf_r+0x34>
80005a78:	01852783          	lw	a5,24(a0)
80005a7c:	00079463          	bnez	a5,80005a84 <__swbuf_r+0x34>
80005a80:	9ccff0ef          	jal	ra,80004c4c <__sinit>
80005a84:	800077b7          	lui	a5,0x80007
80005a88:	b3c78793          	addi	a5,a5,-1220 # 80006b3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b3d>
80005a8c:	04f41c63          	bne	s0,a5,80005ae4 <__swbuf_r+0x94>
80005a90:	0044a403          	lw	s0,4(s1)
80005a94:	01842783          	lw	a5,24(s0)
80005a98:	00f42423          	sw	a5,8(s0)
80005a9c:	00c45783          	lhu	a5,12(s0)
80005aa0:	0087f793          	andi	a5,a5,8
80005aa4:	00078663          	beqz	a5,80005ab0 <__swbuf_r+0x60>
80005aa8:	01042783          	lw	a5,16(s0)
80005aac:	06079063          	bnez	a5,80005b0c <__swbuf_r+0xbc>
80005ab0:	00040593          	mv	a1,s0
80005ab4:	00048513          	mv	a0,s1
80005ab8:	124000ef          	jal	ra,80005bdc <__swsetup_r>
80005abc:	04050863          	beqz	a0,80005b0c <__swbuf_r+0xbc>
80005ac0:	fff00913          	li	s2,-1
80005ac4:	01c12083          	lw	ra,28(sp)
80005ac8:	01812403          	lw	s0,24(sp)
80005acc:	01412483          	lw	s1,20(sp)
80005ad0:	00c12983          	lw	s3,12(sp)
80005ad4:	00090513          	mv	a0,s2
80005ad8:	01012903          	lw	s2,16(sp)
80005adc:	02010113          	addi	sp,sp,32
80005ae0:	00008067          	ret
80005ae4:	800077b7          	lui	a5,0x80007
80005ae8:	b1c78793          	addi	a5,a5,-1252 # 80006b1c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b1d>
80005aec:	00f41663          	bne	s0,a5,80005af8 <__swbuf_r+0xa8>
80005af0:	0084a403          	lw	s0,8(s1)
80005af4:	fa1ff06f          	j	80005a94 <__swbuf_r+0x44>
80005af8:	800077b7          	lui	a5,0x80007
80005afc:	afc78793          	addi	a5,a5,-1284 # 80006afc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006afd>
80005b00:	f8f41ae3          	bne	s0,a5,80005a94 <__swbuf_r+0x44>
80005b04:	00c4a403          	lw	s0,12(s1)
80005b08:	f8dff06f          	j	80005a94 <__swbuf_r+0x44>
80005b0c:	01042783          	lw	a5,16(s0)
80005b10:	00042503          	lw	a0,0(s0)
80005b14:	0ff97993          	zext.b	s3,s2
80005b18:	0ff97913          	zext.b	s2,s2
80005b1c:	40f50533          	sub	a0,a0,a5
80005b20:	01442783          	lw	a5,20(s0)
80005b24:	00f54a63          	blt	a0,a5,80005b38 <__swbuf_r+0xe8>
80005b28:	00040593          	mv	a1,s0
80005b2c:	00048513          	mv	a0,s1
80005b30:	444000ef          	jal	ra,80005f74 <_fflush_r>
80005b34:	f80516e3          	bnez	a0,80005ac0 <__swbuf_r+0x70>
80005b38:	00842783          	lw	a5,8(s0)
80005b3c:	00150513          	addi	a0,a0,1
80005b40:	fff78793          	addi	a5,a5,-1
80005b44:	00f42423          	sw	a5,8(s0)
80005b48:	00042783          	lw	a5,0(s0)
80005b4c:	00178713          	addi	a4,a5,1
80005b50:	00e42023          	sw	a4,0(s0)
80005b54:	01378023          	sb	s3,0(a5)
80005b58:	01442783          	lw	a5,20(s0)
80005b5c:	00a78c63          	beq	a5,a0,80005b74 <__swbuf_r+0x124>
80005b60:	00c45783          	lhu	a5,12(s0)
80005b64:	0017f793          	andi	a5,a5,1
80005b68:	f4078ee3          	beqz	a5,80005ac4 <__swbuf_r+0x74>
80005b6c:	00a00793          	li	a5,10
80005b70:	f4f91ae3          	bne	s2,a5,80005ac4 <__swbuf_r+0x74>
80005b74:	00040593          	mv	a1,s0
80005b78:	00048513          	mv	a0,s1
80005b7c:	3f8000ef          	jal	ra,80005f74 <_fflush_r>
80005b80:	f40502e3          	beqz	a0,80005ac4 <__swbuf_r+0x74>
80005b84:	f3dff06f          	j	80005ac0 <__swbuf_r+0x70>

80005b88 <_write_r>:
80005b88:	ff010113          	addi	sp,sp,-16
80005b8c:	00812423          	sw	s0,8(sp)
80005b90:	00912223          	sw	s1,4(sp)
80005b94:	00050413          	mv	s0,a0
80005b98:	800074b7          	lui	s1,0x80007
80005b9c:	00058513          	mv	a0,a1
80005ba0:	00060593          	mv	a1,a2
80005ba4:	00068613          	mv	a2,a3
80005ba8:	00112623          	sw	ra,12(sp)
80005bac:	c204a623          	sw	zero,-980(s1) # 80006c2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c2d>
80005bb0:	c78fc0ef          	jal	ra,80002028 <_write>
80005bb4:	fff00793          	li	a5,-1
80005bb8:	00f51863          	bne	a0,a5,80005bc8 <_write_r+0x40>
80005bbc:	c2c4a783          	lw	a5,-980(s1)
80005bc0:	00078463          	beqz	a5,80005bc8 <_write_r+0x40>
80005bc4:	00f42023          	sw	a5,0(s0)
80005bc8:	00c12083          	lw	ra,12(sp)
80005bcc:	00812403          	lw	s0,8(sp)
80005bd0:	00412483          	lw	s1,4(sp)
80005bd4:	01010113          	addi	sp,sp,16
80005bd8:	00008067          	ret

80005bdc <__swsetup_r>:
80005bdc:	ff010113          	addi	sp,sp,-16
80005be0:	00912223          	sw	s1,4(sp)
80005be4:	8141a483          	lw	s1,-2028(gp) # 800091f4 <_impure_ptr>
80005be8:	00812423          	sw	s0,8(sp)
80005bec:	01212023          	sw	s2,0(sp)
80005bf0:	00112623          	sw	ra,12(sp)
80005bf4:	00050913          	mv	s2,a0
80005bf8:	00058413          	mv	s0,a1
80005bfc:	00048a63          	beqz	s1,80005c10 <__swsetup_r+0x34>
80005c00:	0184a783          	lw	a5,24(s1)
80005c04:	00079663          	bnez	a5,80005c10 <__swsetup_r+0x34>
80005c08:	00048513          	mv	a0,s1
80005c0c:	840ff0ef          	jal	ra,80004c4c <__sinit>
80005c10:	800077b7          	lui	a5,0x80007
80005c14:	b3c78793          	addi	a5,a5,-1220 # 80006b3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b3d>
80005c18:	02f41a63          	bne	s0,a5,80005c4c <__swsetup_r+0x70>
80005c1c:	0044a403          	lw	s0,4(s1)
80005c20:	00c41783          	lh	a5,12(s0)
80005c24:	0087f713          	andi	a4,a5,8
80005c28:	08071a63          	bnez	a4,80005cbc <__swsetup_r+0xe0>
80005c2c:	0107f713          	andi	a4,a5,16
80005c30:	04071263          	bnez	a4,80005c74 <__swsetup_r+0x98>
80005c34:	00900713          	li	a4,9
80005c38:	00e92023          	sw	a4,0(s2)
80005c3c:	0407e793          	ori	a5,a5,64
80005c40:	00f41623          	sh	a5,12(s0)
80005c44:	fff00513          	li	a0,-1
80005c48:	0c80006f          	j	80005d10 <__swsetup_r+0x134>
80005c4c:	800077b7          	lui	a5,0x80007
80005c50:	b1c78793          	addi	a5,a5,-1252 # 80006b1c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b1d>
80005c54:	00f41663          	bne	s0,a5,80005c60 <__swsetup_r+0x84>
80005c58:	0084a403          	lw	s0,8(s1)
80005c5c:	fc5ff06f          	j	80005c20 <__swsetup_r+0x44>
80005c60:	800077b7          	lui	a5,0x80007
80005c64:	afc78793          	addi	a5,a5,-1284 # 80006afc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006afd>
80005c68:	faf41ce3          	bne	s0,a5,80005c20 <__swsetup_r+0x44>
80005c6c:	00c4a403          	lw	s0,12(s1)
80005c70:	fb1ff06f          	j	80005c20 <__swsetup_r+0x44>
80005c74:	0047f793          	andi	a5,a5,4
80005c78:	02078c63          	beqz	a5,80005cb0 <__swsetup_r+0xd4>
80005c7c:	03442583          	lw	a1,52(s0)
80005c80:	00058c63          	beqz	a1,80005c98 <__swsetup_r+0xbc>
80005c84:	04440793          	addi	a5,s0,68
80005c88:	00f58663          	beq	a1,a5,80005c94 <__swsetup_r+0xb8>
80005c8c:	00090513          	mv	a0,s2
80005c90:	b59fe0ef          	jal	ra,800047e8 <_free_r>
80005c94:	02042a23          	sw	zero,52(s0)
80005c98:	00c45783          	lhu	a5,12(s0)
80005c9c:	00042223          	sw	zero,4(s0)
80005ca0:	fdb7f793          	andi	a5,a5,-37
80005ca4:	00f41623          	sh	a5,12(s0)
80005ca8:	01042783          	lw	a5,16(s0)
80005cac:	00f42023          	sw	a5,0(s0)
80005cb0:	00c45783          	lhu	a5,12(s0)
80005cb4:	0087e793          	ori	a5,a5,8
80005cb8:	00f41623          	sh	a5,12(s0)
80005cbc:	01042783          	lw	a5,16(s0)
80005cc0:	02079063          	bnez	a5,80005ce0 <__swsetup_r+0x104>
80005cc4:	00c45783          	lhu	a5,12(s0)
80005cc8:	20000713          	li	a4,512
80005ccc:	2807f793          	andi	a5,a5,640
80005cd0:	00e78863          	beq	a5,a4,80005ce0 <__swsetup_r+0x104>
80005cd4:	00040593          	mv	a1,s0
80005cd8:	00090513          	mv	a0,s2
80005cdc:	458000ef          	jal	ra,80006134 <__smakebuf_r>
80005ce0:	00c41783          	lh	a5,12(s0)
80005ce4:	0017f713          	andi	a4,a5,1
80005ce8:	04070063          	beqz	a4,80005d28 <__swsetup_r+0x14c>
80005cec:	01442703          	lw	a4,20(s0)
80005cf0:	00042423          	sw	zero,8(s0)
80005cf4:	40e00733          	neg	a4,a4
80005cf8:	00e42c23          	sw	a4,24(s0)
80005cfc:	01042703          	lw	a4,16(s0)
80005d00:	00000513          	li	a0,0
80005d04:	00071663          	bnez	a4,80005d10 <__swsetup_r+0x134>
80005d08:	0807f713          	andi	a4,a5,128
80005d0c:	f20718e3          	bnez	a4,80005c3c <__swsetup_r+0x60>
80005d10:	00c12083          	lw	ra,12(sp)
80005d14:	00812403          	lw	s0,8(sp)
80005d18:	00412483          	lw	s1,4(sp)
80005d1c:	00012903          	lw	s2,0(sp)
80005d20:	01010113          	addi	sp,sp,16
80005d24:	00008067          	ret
80005d28:	0027f713          	andi	a4,a5,2
80005d2c:	00000693          	li	a3,0
80005d30:	00071463          	bnez	a4,80005d38 <__swsetup_r+0x15c>
80005d34:	01442683          	lw	a3,20(s0)
80005d38:	00d42423          	sw	a3,8(s0)
80005d3c:	fc1ff06f          	j	80005cfc <__swsetup_r+0x120>

80005d40 <_close_r>:
80005d40:	ff010113          	addi	sp,sp,-16
80005d44:	00812423          	sw	s0,8(sp)
80005d48:	00912223          	sw	s1,4(sp)
80005d4c:	00050413          	mv	s0,a0
80005d50:	800074b7          	lui	s1,0x80007
80005d54:	00058513          	mv	a0,a1
80005d58:	00112623          	sw	ra,12(sp)
80005d5c:	c204a623          	sw	zero,-980(s1) # 80006c2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c2d>
80005d60:	ae8fc0ef          	jal	ra,80002048 <_close>
80005d64:	fff00793          	li	a5,-1
80005d68:	00f51863          	bne	a0,a5,80005d78 <_close_r+0x38>
80005d6c:	c2c4a783          	lw	a5,-980(s1)
80005d70:	00078463          	beqz	a5,80005d78 <_close_r+0x38>
80005d74:	00f42023          	sw	a5,0(s0)
80005d78:	00c12083          	lw	ra,12(sp)
80005d7c:	00812403          	lw	s0,8(sp)
80005d80:	00412483          	lw	s1,4(sp)
80005d84:	01010113          	addi	sp,sp,16
80005d88:	00008067          	ret

80005d8c <__sflush_r>:
80005d8c:	00c59783          	lh	a5,12(a1)
80005d90:	fe010113          	addi	sp,sp,-32
80005d94:	00812c23          	sw	s0,24(sp)
80005d98:	00912a23          	sw	s1,20(sp)
80005d9c:	00112e23          	sw	ra,28(sp)
80005da0:	01212823          	sw	s2,16(sp)
80005da4:	01312623          	sw	s3,12(sp)
80005da8:	0087f713          	andi	a4,a5,8
80005dac:	00050493          	mv	s1,a0
80005db0:	00058413          	mv	s0,a1
80005db4:	14071063          	bnez	a4,80005ef4 <__sflush_r+0x168>
80005db8:	0045a703          	lw	a4,4(a1)
80005dbc:	00e04663          	bgtz	a4,80005dc8 <__sflush_r+0x3c>
80005dc0:	0405a703          	lw	a4,64(a1)
80005dc4:	0ee05263          	blez	a4,80005ea8 <__sflush_r+0x11c>
80005dc8:	02c42703          	lw	a4,44(s0)
80005dcc:	0c070e63          	beqz	a4,80005ea8 <__sflush_r+0x11c>
80005dd0:	00c7d793          	srli	a5,a5,0xc
80005dd4:	0004a903          	lw	s2,0(s1)
80005dd8:	0017f793          	andi	a5,a5,1
80005ddc:	0004a023          	sw	zero,0(s1)
80005de0:	02042583          	lw	a1,32(s0)
80005de4:	08078663          	beqz	a5,80005e70 <__sflush_r+0xe4>
80005de8:	05442603          	lw	a2,84(s0)
80005dec:	00c45783          	lhu	a5,12(s0)
80005df0:	0047f793          	andi	a5,a5,4
80005df4:	00078e63          	beqz	a5,80005e10 <__sflush_r+0x84>
80005df8:	00442783          	lw	a5,4(s0)
80005dfc:	40f60633          	sub	a2,a2,a5
80005e00:	03442783          	lw	a5,52(s0)
80005e04:	00078663          	beqz	a5,80005e10 <__sflush_r+0x84>
80005e08:	04042783          	lw	a5,64(s0)
80005e0c:	40f60633          	sub	a2,a2,a5
80005e10:	02c42783          	lw	a5,44(s0)
80005e14:	02042583          	lw	a1,32(s0)
80005e18:	00000693          	li	a3,0
80005e1c:	00048513          	mv	a0,s1
80005e20:	000780e7          	jalr	a5
80005e24:	fff00793          	li	a5,-1
80005e28:	08f50463          	beq	a0,a5,80005eb0 <__sflush_r+0x124>
80005e2c:	01042783          	lw	a5,16(s0)
80005e30:	00001737          	lui	a4,0x1
80005e34:	00042223          	sw	zero,4(s0)
80005e38:	00f42023          	sw	a5,0(s0)
80005e3c:	00c45783          	lhu	a5,12(s0)
80005e40:	00e7f7b3          	and	a5,a5,a4
80005e44:	00078463          	beqz	a5,80005e4c <__sflush_r+0xc0>
80005e48:	04a42a23          	sw	a0,84(s0)
80005e4c:	03442583          	lw	a1,52(s0)
80005e50:	0124a023          	sw	s2,0(s1)
80005e54:	04058a63          	beqz	a1,80005ea8 <__sflush_r+0x11c>
80005e58:	04440793          	addi	a5,s0,68
80005e5c:	00f58663          	beq	a1,a5,80005e68 <__sflush_r+0xdc>
80005e60:	00048513          	mv	a0,s1
80005e64:	985fe0ef          	jal	ra,800047e8 <_free_r>
80005e68:	02042a23          	sw	zero,52(s0)
80005e6c:	03c0006f          	j	80005ea8 <__sflush_r+0x11c>
80005e70:	00000613          	li	a2,0
80005e74:	00100693          	li	a3,1
80005e78:	00048513          	mv	a0,s1
80005e7c:	000700e7          	jalr	a4 # 1000 <CONFIG_ISR_STACK_SIZE>
80005e80:	fff00793          	li	a5,-1
80005e84:	00050613          	mv	a2,a0
80005e88:	f6f512e3          	bne	a0,a5,80005dec <__sflush_r+0x60>
80005e8c:	0004a783          	lw	a5,0(s1)
80005e90:	f4078ee3          	beqz	a5,80005dec <__sflush_r+0x60>
80005e94:	01d00713          	li	a4,29
80005e98:	00e78663          	beq	a5,a4,80005ea4 <__sflush_r+0x118>
80005e9c:	01600713          	li	a4,22
80005ea0:	08e79e63          	bne	a5,a4,80005f3c <__sflush_r+0x1b0>
80005ea4:	0124a023          	sw	s2,0(s1)
80005ea8:	00000513          	li	a0,0
80005eac:	0a00006f          	j	80005f4c <__sflush_r+0x1c0>
80005eb0:	0004a703          	lw	a4,0(s1)
80005eb4:	00c41783          	lh	a5,12(s0)
80005eb8:	02070263          	beqz	a4,80005edc <__sflush_r+0x150>
80005ebc:	01d00693          	li	a3,29
80005ec0:	00d70663          	beq	a4,a3,80005ecc <__sflush_r+0x140>
80005ec4:	01600693          	li	a3,22
80005ec8:	06d71c63          	bne	a4,a3,80005f40 <__sflush_r+0x1b4>
80005ecc:	01042783          	lw	a5,16(s0)
80005ed0:	00042223          	sw	zero,4(s0)
80005ed4:	00f42023          	sw	a5,0(s0)
80005ed8:	f75ff06f          	j	80005e4c <__sflush_r+0xc0>
80005edc:	01042703          	lw	a4,16(s0)
80005ee0:	00c7d793          	srli	a5,a5,0xc
80005ee4:	00042223          	sw	zero,4(s0)
80005ee8:	00e42023          	sw	a4,0(s0)
80005eec:	0017f793          	andi	a5,a5,1
80005ef0:	f55ff06f          	j	80005e44 <__sflush_r+0xb8>
80005ef4:	0105a983          	lw	s3,16(a1)
80005ef8:	fa0988e3          	beqz	s3,80005ea8 <__sflush_r+0x11c>
80005efc:	0005a903          	lw	s2,0(a1)
80005f00:	0037f793          	andi	a5,a5,3
80005f04:	0135a023          	sw	s3,0(a1)
80005f08:	41390933          	sub	s2,s2,s3
80005f0c:	00000713          	li	a4,0
80005f10:	00079463          	bnez	a5,80005f18 <__sflush_r+0x18c>
80005f14:	0145a703          	lw	a4,20(a1)
80005f18:	00e42423          	sw	a4,8(s0)
80005f1c:	f92056e3          	blez	s2,80005ea8 <__sflush_r+0x11c>
80005f20:	02842783          	lw	a5,40(s0)
80005f24:	02042583          	lw	a1,32(s0)
80005f28:	00090693          	mv	a3,s2
80005f2c:	00098613          	mv	a2,s3
80005f30:	00048513          	mv	a0,s1
80005f34:	000780e7          	jalr	a5
80005f38:	02a04863          	bgtz	a0,80005f68 <__sflush_r+0x1dc>
80005f3c:	00c41783          	lh	a5,12(s0)
80005f40:	0407e793          	ori	a5,a5,64
80005f44:	00f41623          	sh	a5,12(s0)
80005f48:	fff00513          	li	a0,-1
80005f4c:	01c12083          	lw	ra,28(sp)
80005f50:	01812403          	lw	s0,24(sp)
80005f54:	01412483          	lw	s1,20(sp)
80005f58:	01012903          	lw	s2,16(sp)
80005f5c:	00c12983          	lw	s3,12(sp)
80005f60:	02010113          	addi	sp,sp,32
80005f64:	00008067          	ret
80005f68:	00a989b3          	add	s3,s3,a0
80005f6c:	40a90933          	sub	s2,s2,a0
80005f70:	fadff06f          	j	80005f1c <__sflush_r+0x190>

80005f74 <_fflush_r>:
80005f74:	0105a783          	lw	a5,16(a1)
80005f78:	ff010113          	addi	sp,sp,-16
80005f7c:	00112623          	sw	ra,12(sp)
80005f80:	00812423          	sw	s0,8(sp)
80005f84:	00912223          	sw	s1,4(sp)
80005f88:	02079063          	bnez	a5,80005fa8 <_fflush_r+0x34>
80005f8c:	00000493          	li	s1,0
80005f90:	00c12083          	lw	ra,12(sp)
80005f94:	00812403          	lw	s0,8(sp)
80005f98:	00048513          	mv	a0,s1
80005f9c:	00412483          	lw	s1,4(sp)
80005fa0:	01010113          	addi	sp,sp,16
80005fa4:	00008067          	ret
80005fa8:	00050493          	mv	s1,a0
80005fac:	00058413          	mv	s0,a1
80005fb0:	00050863          	beqz	a0,80005fc0 <_fflush_r+0x4c>
80005fb4:	01852783          	lw	a5,24(a0)
80005fb8:	00079463          	bnez	a5,80005fc0 <_fflush_r+0x4c>
80005fbc:	c91fe0ef          	jal	ra,80004c4c <__sinit>
80005fc0:	800077b7          	lui	a5,0x80007
80005fc4:	b3c78793          	addi	a5,a5,-1220 # 80006b3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b3d>
80005fc8:	06f41063          	bne	s0,a5,80006028 <_fflush_r+0xb4>
80005fcc:	0044a403          	lw	s0,4(s1)
80005fd0:	00c41783          	lh	a5,12(s0)
80005fd4:	fa078ce3          	beqz	a5,80005f8c <_fflush_r+0x18>
80005fd8:	06442703          	lw	a4,100(s0)
80005fdc:	00177713          	andi	a4,a4,1
80005fe0:	00071a63          	bnez	a4,80005ff4 <_fflush_r+0x80>
80005fe4:	2007f793          	andi	a5,a5,512
80005fe8:	00079663          	bnez	a5,80005ff4 <_fflush_r+0x80>
80005fec:	05842503          	lw	a0,88(s0)
80005ff0:	8e8fc0ef          	jal	ra,800020d8 <__retarget_lock_acquire_recursive>
80005ff4:	00048513          	mv	a0,s1
80005ff8:	00040593          	mv	a1,s0
80005ffc:	d91ff0ef          	jal	ra,80005d8c <__sflush_r>
80006000:	06442783          	lw	a5,100(s0)
80006004:	00050493          	mv	s1,a0
80006008:	0017f793          	andi	a5,a5,1
8000600c:	f80792e3          	bnez	a5,80005f90 <_fflush_r+0x1c>
80006010:	00c45783          	lhu	a5,12(s0)
80006014:	2007f793          	andi	a5,a5,512
80006018:	f6079ce3          	bnez	a5,80005f90 <_fflush_r+0x1c>
8000601c:	05842503          	lw	a0,88(s0)
80006020:	8d8fc0ef          	jal	ra,800020f8 <__retarget_lock_release_recursive>
80006024:	f6dff06f          	j	80005f90 <_fflush_r+0x1c>
80006028:	800077b7          	lui	a5,0x80007
8000602c:	b1c78793          	addi	a5,a5,-1252 # 80006b1c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006b1d>
80006030:	00f41663          	bne	s0,a5,8000603c <_fflush_r+0xc8>
80006034:	0084a403          	lw	s0,8(s1)
80006038:	f99ff06f          	j	80005fd0 <_fflush_r+0x5c>
8000603c:	800077b7          	lui	a5,0x80007
80006040:	afc78793          	addi	a5,a5,-1284 # 80006afc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006afd>
80006044:	f8f416e3          	bne	s0,a5,80005fd0 <_fflush_r+0x5c>
80006048:	00c4a403          	lw	s0,12(s1)
8000604c:	f85ff06f          	j	80005fd0 <_fflush_r+0x5c>

80006050 <_lseek_r>:
80006050:	ff010113          	addi	sp,sp,-16
80006054:	00812423          	sw	s0,8(sp)
80006058:	00912223          	sw	s1,4(sp)
8000605c:	00050413          	mv	s0,a0
80006060:	800074b7          	lui	s1,0x80007
80006064:	00058513          	mv	a0,a1
80006068:	00060593          	mv	a1,a2
8000606c:	00068613          	mv	a2,a3
80006070:	00112623          	sw	ra,12(sp)
80006074:	c204a623          	sw	zero,-980(s1) # 80006c2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c2d>
80006078:	fd9fb0ef          	jal	ra,80002050 <_lseek>
8000607c:	fff00793          	li	a5,-1
80006080:	00f51863          	bne	a0,a5,80006090 <_lseek_r+0x40>
80006084:	c2c4a783          	lw	a5,-980(s1)
80006088:	00078463          	beqz	a5,80006090 <_lseek_r+0x40>
8000608c:	00f42023          	sw	a5,0(s0)
80006090:	00c12083          	lw	ra,12(sp)
80006094:	00812403          	lw	s0,8(sp)
80006098:	00412483          	lw	s1,4(sp)
8000609c:	01010113          	addi	sp,sp,16
800060a0:	00008067          	ret

800060a4 <__swhatbuf_r>:
800060a4:	f9010113          	addi	sp,sp,-112
800060a8:	06812423          	sw	s0,104(sp)
800060ac:	00058413          	mv	s0,a1
800060b0:	00e59583          	lh	a1,14(a1)
800060b4:	06912223          	sw	s1,100(sp)
800060b8:	07212023          	sw	s2,96(sp)
800060bc:	06112623          	sw	ra,108(sp)
800060c0:	00060493          	mv	s1,a2
800060c4:	00068913          	mv	s2,a3
800060c8:	0205dc63          	bgez	a1,80006100 <__swhatbuf_r+0x5c>
800060cc:	00c45783          	lhu	a5,12(s0)
800060d0:	0807f793          	andi	a5,a5,128
800060d4:	04079a63          	bnez	a5,80006128 <__swhatbuf_r+0x84>
800060d8:	40000713          	li	a4,1024
800060dc:	06c12083          	lw	ra,108(sp)
800060e0:	06812403          	lw	s0,104(sp)
800060e4:	00f92023          	sw	a5,0(s2)
800060e8:	00e4a023          	sw	a4,0(s1)
800060ec:	06012903          	lw	s2,96(sp)
800060f0:	06412483          	lw	s1,100(sp)
800060f4:	00000513          	li	a0,0
800060f8:	07010113          	addi	sp,sp,112
800060fc:	00008067          	ret
80006100:	00810613          	addi	a2,sp,8
80006104:	1a0000ef          	jal	ra,800062a4 <_fstat_r>
80006108:	fc0542e3          	bltz	a0,800060cc <__swhatbuf_r+0x28>
8000610c:	00c12703          	lw	a4,12(sp)
80006110:	0000f7b7          	lui	a5,0xf
80006114:	00e7f7b3          	and	a5,a5,a4
80006118:	ffffe737          	lui	a4,0xffffe
8000611c:	00e787b3          	add	a5,a5,a4
80006120:	0017b793          	seqz	a5,a5
80006124:	fb5ff06f          	j	800060d8 <__swhatbuf_r+0x34>
80006128:	00000793          	li	a5,0
8000612c:	04000713          	li	a4,64
80006130:	fadff06f          	j	800060dc <__swhatbuf_r+0x38>

80006134 <__smakebuf_r>:
80006134:	00c5d783          	lhu	a5,12(a1)
80006138:	fd010113          	addi	sp,sp,-48
8000613c:	02812423          	sw	s0,40(sp)
80006140:	02112623          	sw	ra,44(sp)
80006144:	02912223          	sw	s1,36(sp)
80006148:	03212023          	sw	s2,32(sp)
8000614c:	01312e23          	sw	s3,28(sp)
80006150:	0027f793          	andi	a5,a5,2
80006154:	00058413          	mv	s0,a1
80006158:	02078a63          	beqz	a5,8000618c <__smakebuf_r+0x58>
8000615c:	04740793          	addi	a5,s0,71
80006160:	00f42023          	sw	a5,0(s0)
80006164:	00f42823          	sw	a5,16(s0)
80006168:	00100793          	li	a5,1
8000616c:	00f42a23          	sw	a5,20(s0)
80006170:	02c12083          	lw	ra,44(sp)
80006174:	02812403          	lw	s0,40(sp)
80006178:	02412483          	lw	s1,36(sp)
8000617c:	02012903          	lw	s2,32(sp)
80006180:	01c12983          	lw	s3,28(sp)
80006184:	03010113          	addi	sp,sp,48
80006188:	00008067          	ret
8000618c:	00c10693          	addi	a3,sp,12
80006190:	00810613          	addi	a2,sp,8
80006194:	00050493          	mv	s1,a0
80006198:	f0dff0ef          	jal	ra,800060a4 <__swhatbuf_r>
8000619c:	00812983          	lw	s3,8(sp)
800061a0:	00050913          	mv	s2,a0
800061a4:	00048513          	mv	a0,s1
800061a8:	00098593          	mv	a1,s3
800061ac:	f38fe0ef          	jal	ra,800048e4 <_malloc_r>
800061b0:	02051063          	bnez	a0,800061d0 <__smakebuf_r+0x9c>
800061b4:	00c41783          	lh	a5,12(s0)
800061b8:	2007f713          	andi	a4,a5,512
800061bc:	fa071ae3          	bnez	a4,80006170 <__smakebuf_r+0x3c>
800061c0:	ffc7f793          	andi	a5,a5,-4
800061c4:	0027e793          	ori	a5,a5,2
800061c8:	00f41623          	sh	a5,12(s0)
800061cc:	f91ff06f          	j	8000615c <__smakebuf_r+0x28>
800061d0:	800057b7          	lui	a5,0x80005
800061d4:	bb478793          	addi	a5,a5,-1100 # 80004bb4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80004bb5>
800061d8:	02f4a423          	sw	a5,40(s1)
800061dc:	00c45783          	lhu	a5,12(s0)
800061e0:	00a42023          	sw	a0,0(s0)
800061e4:	00a42823          	sw	a0,16(s0)
800061e8:	0807e793          	ori	a5,a5,128
800061ec:	00f41623          	sh	a5,12(s0)
800061f0:	00c12783          	lw	a5,12(sp)
800061f4:	01342a23          	sw	s3,20(s0)
800061f8:	02078263          	beqz	a5,8000621c <__smakebuf_r+0xe8>
800061fc:	00e41583          	lh	a1,14(s0)
80006200:	00048513          	mv	a0,s1
80006204:	0f0000ef          	jal	ra,800062f4 <_isatty_r>
80006208:	00050a63          	beqz	a0,8000621c <__smakebuf_r+0xe8>
8000620c:	00c45783          	lhu	a5,12(s0)
80006210:	ffc7f793          	andi	a5,a5,-4
80006214:	0017e793          	ori	a5,a5,1
80006218:	00f41623          	sh	a5,12(s0)
8000621c:	00c45783          	lhu	a5,12(s0)
80006220:	0127e533          	or	a0,a5,s2
80006224:	00a41623          	sh	a0,12(s0)
80006228:	f49ff06f          	j	80006170 <__smakebuf_r+0x3c>

8000622c <memchr>:
8000622c:	0ff5f593          	zext.b	a1,a1
80006230:	00c50633          	add	a2,a0,a2
80006234:	00c51663          	bne	a0,a2,80006240 <memchr+0x14>
80006238:	00000513          	li	a0,0
8000623c:	00008067          	ret
80006240:	00054783          	lbu	a5,0(a0)
80006244:	feb78ce3          	beq	a5,a1,8000623c <memchr+0x10>
80006248:	00150513          	addi	a0,a0,1
8000624c:	fe9ff06f          	j	80006234 <memchr+0x8>

80006250 <_read_r>:
80006250:	ff010113          	addi	sp,sp,-16
80006254:	00812423          	sw	s0,8(sp)
80006258:	00912223          	sw	s1,4(sp)
8000625c:	00050413          	mv	s0,a0
80006260:	800074b7          	lui	s1,0x80007
80006264:	00058513          	mv	a0,a1
80006268:	00060593          	mv	a1,a2
8000626c:	00068613          	mv	a2,a3
80006270:	00112623          	sw	ra,12(sp)
80006274:	c204a623          	sw	zero,-980(s1) # 80006c2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c2d>
80006278:	d91fb0ef          	jal	ra,80002008 <_read>
8000627c:	fff00793          	li	a5,-1
80006280:	00f51863          	bne	a0,a5,80006290 <_read_r+0x40>
80006284:	c2c4a783          	lw	a5,-980(s1)
80006288:	00078463          	beqz	a5,80006290 <_read_r+0x40>
8000628c:	00f42023          	sw	a5,0(s0)
80006290:	00c12083          	lw	ra,12(sp)
80006294:	00812403          	lw	s0,8(sp)
80006298:	00412483          	lw	s1,4(sp)
8000629c:	01010113          	addi	sp,sp,16
800062a0:	00008067          	ret

800062a4 <_fstat_r>:
800062a4:	ff010113          	addi	sp,sp,-16
800062a8:	00812423          	sw	s0,8(sp)
800062ac:	00912223          	sw	s1,4(sp)
800062b0:	00050413          	mv	s0,a0
800062b4:	800074b7          	lui	s1,0x80007
800062b8:	00058513          	mv	a0,a1
800062bc:	00060593          	mv	a1,a2
800062c0:	00112623          	sw	ra,12(sp)
800062c4:	c204a623          	sw	zero,-980(s1) # 80006c2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c2d>
800062c8:	d99fb0ef          	jal	ra,80002060 <_fstat>
800062cc:	fff00793          	li	a5,-1
800062d0:	00f51863          	bne	a0,a5,800062e0 <_fstat_r+0x3c>
800062d4:	c2c4a783          	lw	a5,-980(s1)
800062d8:	00078463          	beqz	a5,800062e0 <_fstat_r+0x3c>
800062dc:	00f42023          	sw	a5,0(s0)
800062e0:	00c12083          	lw	ra,12(sp)
800062e4:	00812403          	lw	s0,8(sp)
800062e8:	00412483          	lw	s1,4(sp)
800062ec:	01010113          	addi	sp,sp,16
800062f0:	00008067          	ret

800062f4 <_isatty_r>:
800062f4:	ff010113          	addi	sp,sp,-16
800062f8:	00812423          	sw	s0,8(sp)
800062fc:	00912223          	sw	s1,4(sp)
80006300:	00050413          	mv	s0,a0
80006304:	800074b7          	lui	s1,0x80007
80006308:	00058513          	mv	a0,a1
8000630c:	00112623          	sw	ra,12(sp)
80006310:	c204a623          	sw	zero,-980(s1) # 80006c2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c2d>
80006314:	d45fb0ef          	jal	ra,80002058 <_isatty>
80006318:	fff00793          	li	a5,-1
8000631c:	00f51863          	bne	a0,a5,8000632c <_isatty_r+0x38>
80006320:	c2c4a783          	lw	a5,-980(s1)
80006324:	00078463          	beqz	a5,8000632c <_isatty_r+0x38>
80006328:	00f42023          	sw	a5,0(s0)
8000632c:	00c12083          	lw	ra,12(sp)
80006330:	00812403          	lw	s0,8(sp)
80006334:	00412483          	lw	s1,4(sp)
80006338:	01010113          	addi	sp,sp,16
8000633c:	00008067          	ret
