
zephyr.elf:     file format elf32-littleriscv


Disassembly of section rom_start:

80000000 <__start>:
SECTION_FUNC(vectors, __start)
#if defined(CONFIG_RISCV_GP)
	/* Initialize global pointer */
	.option push
	.option norelax
	la gp, __global_pointer$
80000000:	0000e197          	auipc	gp,0xe
80000004:	0e818193          	addi	gp,gp,232 # 8000e0e8 <__global_pointer$>
#else
	/*
	 * Set mtvec (Machine Trap-Vector Base-Address Register)
	 * to _isr_wrapper.
	 */
	la t0, _isr_wrapper
80000008:	00000297          	auipc	t0,0x0
8000000c:	01428293          	addi	t0,t0,20 # 8000001c <_isr_wrapper>
#endif

	csrw mtvec, t0
80000010:	30529073          	csrw	mtvec,t0

	/* Jump to __reset */
	tail __reset
80000014:	0040006f          	j	80000018 <__reset>

Disassembly of section reset:

80000018 <__reset>:
	/*
	 * jump to __initialize
	 * use call opcode in case __initialize is far away.
	 * This will be dependent on linker.ld configuration.
	 */
	call __initialize
80000018:	1c0040ef          	jal	ra,800041d8 <__initialize>

Disassembly of section exceptions:

8000001c <_isr_wrapper>:
	csrrw sp, mscratch, sp
1:
#endif

	/* Save caller-saved registers on current thread stack. */
	addi sp, sp, -__z_arch_esf_t_SIZEOF
8000001c:	fb010113          	addi	sp,sp,-80
	DO_CALLER_SAVED(sr)		;
80000020:	00512223          	sw	t0,4(sp)
80000024:	00612423          	sw	t1,8(sp)
80000028:	00712623          	sw	t2,12(sp)
8000002c:	01c12823          	sw	t3,16(sp)
80000030:	01d12a23          	sw	t4,20(sp)
80000034:	01e12c23          	sw	t5,24(sp)
80000038:	01f12e23          	sw	t6,28(sp)
8000003c:	02a12023          	sw	a0,32(sp)
80000040:	02b12223          	sw	a1,36(sp)
80000044:	02c12423          	sw	a2,40(sp)
80000048:	02d12623          	sw	a3,44(sp)
8000004c:	02e12823          	sw	a4,48(sp)
80000050:	02f12a23          	sw	a5,52(sp)
80000054:	03012c23          	sw	a6,56(sp)
80000058:	03112e23          	sw	a7,60(sp)
8000005c:	00112023          	sw	ra,0(sp)

	/* Save s0 in the esf and load it with &_current_cpu. */
	sr s0, __z_arch_esf_t_s0_OFFSET(sp)
80000060:	04812423          	sw	s0,72(sp)
	GET_CURRENT_CPU(s0, t0)
80000064:	0000b417          	auipc	s0,0xb
80000068:	dbc40413          	addi	s0,s0,-580 # 8000ae20 <_kernel>
	add t0, t0, tp, %tprel_add(is_user_mode)
	sb zero, %tprel_lo(is_user_mode)(t0)
#endif

	/* Save MEPC register */
	csrr t0, mepc
8000006c:	341022f3          	csrr	t0,mepc
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
80000070:	04512023          	sw	t0,64(sp)

	/* Save MSTATUS register */
	csrr t2, mstatus
80000074:	300023f3          	csrr	t2,mstatus
	sr t2, __z_arch_esf_t_mstatus_OFFSET(sp)
80000078:	04712223          	sw	t2,68(sp)
	 * SOCs (like pulpino or riscv-qemu), the MSB is never set to indicate
	 * interrupt. Hence, check for interrupt/exception via the __soc_is_irq
	 * function (that needs to be implemented by each SOC). The result is
	 * returned via register a0 (1: interrupt, 0 exception)
	 */
	jal ra, __soc_is_irq
8000007c:	14c000ef          	jal	ra,800001c8 <__soc_is_irq>

	/* If a0 != 0, jump to is_interrupt */
	bnez a0, is_interrupt
80000080:	04051a63          	bnez	a0,800000d4 <is_interrupt>
	/*
	 * If the exception is the result of an ECALL, check whether to
	 * perform a context-switch or an IRQ offload. Otherwise call _Fault
	 * to report the exception.
	 */
	csrr t0, mcause
80000084:	342022f3          	csrr	t0,mcause
	li t2, SOC_MCAUSE_EXP_MASK
80000088:	800003b7          	lui	t2,0x80000
8000008c:	fff38393          	addi	t2,t2,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and t0, t0, t2
80000090:	0072f2b3          	and	t0,t0,t2

	/*
	 * If mcause == SOC_MCAUSE_ECALL_EXP, handle system call from
	 * kernel thread.
	 */
	li t1, SOC_MCAUSE_ECALL_EXP
80000094:	00b00313          	li	t1,11
	beq t0, t1, is_kernel_syscall
80000098:	00628a63          	beq	t0,t1,800000ac <is_kernel_syscall>
	 * Stack pointer is pointing to a z_arch_esf_t structure, pass it
	 * to _Fault (via register a0).
	 * If _Fault shall return, set return address to
	 * no_reschedule to restore stack.
	 */
	mv a0, sp
8000009c:	00010513          	mv	a0,sp
	la ra, no_reschedule
800000a0:	00000097          	auipc	ra,0x0
800000a4:	0bc08093          	addi	ra,ra,188 # 8000015c <z_riscv_thread_start>
	tail _Fault
800000a8:	09c0406f          	j	80004144 <_Fault>

800000ac <is_kernel_syscall>:
	 * again upon exiting the ISR.
	 *
	 * It's safe to always increment by 4, even with compressed
	 * instructions, because the ecall instruction is always 4 bytes.
	 */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
800000ac:	04012283          	lw	t0,64(sp)
	addi t0, t0, 4
800000b0:	00428293          	addi	t0,t0,4
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
800000b4:	04512023          	sw	t0,64(sp)
	li t1, MSTATUS_MPRV
	csrs mstatus, t1
#endif

	/* Determine what to do. Operation code is in t0. */
	lr t0, __z_arch_esf_t_t0_OFFSET(sp)
800000b8:	00412283          	lw	t0,4(sp)

	.if RV_ECALL_RUNTIME_EXCEPT != 0; .err; .endif
	beqz t0, do_fault
800000bc:	00028663          	beqz	t0,800000c8 <do_fault>
	j reschedule
skip_schedule:
#endif

	/* default fault code is K_ERR_KERNEL_OOPS */
	li a0, 3
800000c0:	00300513          	li	a0,3
	j 1f
800000c4:	0080006f          	j	800000cc <do_fault+0x4>

800000c8 <do_fault>:

do_fault:
	/* Handle RV_ECALL_RUNTIME_EXCEPT. Retrieve reason in a0, esf in A1. */
	lr a0, __z_arch_esf_t_a0_OFFSET(sp)
800000c8:	02012503          	lw	a0,32(sp)
1:	mv a1, sp
800000cc:	00010593          	mv	a1,sp
	tail z_riscv_fatal_error
800000d0:	0540406f          	j	80004124 <z_riscv_fatal_error>

800000d4 <is_interrupt>:
	csrs mstatus, t1
2:
#endif

	/* Increment _current_cpu->nested */
	lw t1, ___cpu_t_nested_OFFSET(s0)
800000d4:	00042303          	lw	t1,0(s0)
	addi t2, t1, 1
800000d8:	00130393          	addi	t2,t1,1
	sw t2, ___cpu_t_nested_OFFSET(s0)
800000dc:	00742023          	sw	t2,0(s0)
	bnez t1, on_irq_stack
800000e0:	00031a63          	bnez	t1,800000f4 <on_irq_stack>

	/* Switch to interrupt stack */
	mv t0, sp
800000e4:	00010293          	mv	t0,sp
	lr sp, ___cpu_t_irq_stack_OFFSET(s0)
800000e8:	00442103          	lw	sp,4(s0)

	/*
	 * Save thread stack pointer on interrupt stack
	 * In RISC-V, stack pointer needs to be 16-byte aligned
	 */
	addi sp, sp, -16
800000ec:	ff010113          	addi	sp,sp,-16
	sr t0, 0(sp)
800000f0:	00512023          	sw	t0,0(sp)

800000f4 <on_irq_stack>:
#ifdef CONFIG_TRACING_ISR
	call sys_trace_isr_enter
#endif

	/* Get IRQ causing interrupt */
	csrr a0, mcause
800000f4:	34202573          	csrr	a0,mcause
	li t0, SOC_MCAUSE_EXP_MASK
800000f8:	800002b7          	lui	t0,0x80000
800000fc:	fff28293          	addi	t0,t0,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and a0, a0, t0
80000100:	00557533          	and	a0,a0,t0

	/*
	 * Clear pending IRQ generating the interrupt at SOC level
	 * Pass IRQ number to __soc_handle_irq via register a0
	 */
	jal ra, __soc_handle_irq
80000104:	0b4000ef          	jal	ra,800001b8 <__soc_handle_irq>

	/*
	 * Call corresponding registered function in _sw_isr_table.
	 * (table is 2-word wide, we should shift index accordingly)
	 */
	la t0, _sw_isr_table
80000108:	00009297          	auipc	t0,0x9
8000010c:	4ec28293          	addi	t0,t0,1260 # 800095f4 <_sw_isr_table>
	slli a0, a0, (RV_REGSHIFT + 1)
80000110:	00351513          	slli	a0,a0,0x3
	add t0, t0, a0
80000114:	00a282b3          	add	t0,t0,a0

	/* Load argument in a0 register */
	lr a0, 0(t0)
80000118:	0002a503          	lw	a0,0(t0)

	/* Load ISR function address in register t1 */
	lr t1, RV_REGSIZE(t0)
8000011c:	0042a303          	lw	t1,4(t0)

	/* Call ISR function */
	jalr ra, t1, 0
80000120:	000300e7          	jalr	t1

80000124 <irq_done>:
    call sys_trace_isr_exit
#endif

irq_done:
	/* Decrement _current_cpu->nested */
	lw t2, ___cpu_t_nested_OFFSET(s0)
80000124:	00042383          	lw	t2,0(s0)
	addi t2, t2, -1
80000128:	fff38393          	addi	t2,t2,-1
	sw t2, ___cpu_t_nested_OFFSET(s0)
8000012c:	00742023          	sw	t2,0(s0)
	bnez t2, no_reschedule
80000130:	02039663          	bnez	t2,8000015c <z_riscv_thread_start>

	/* nested count is back to 0: Return to thread stack */
	lr sp, 0(sp)
80000134:	00012103          	lw	sp,0(sp)

80000138 <check_reschedule>:
#endif

check_reschedule:

	/* Get pointer to current thread on this CPU */
	lr a1, ___cpu_t_current_OFFSET(s0)
80000138:	00842583          	lw	a1,8(s0)
	/*
	 * Get next thread to schedule with z_get_next_switch_handle().
	 * We pass it a NULL as we didn't save the whole thread context yet.
	 * If no scheduling is necessary then NULL will be returned.
	 */
	addi sp, sp, -16
8000013c:	ff010113          	addi	sp,sp,-16
	sr a1, 0(sp)
80000140:	00b12023          	sw	a1,0(sp)
	mv a0, zero
80000144:	00000513          	li	a0,0
	call z_get_next_switch_handle
80000148:	131060ef          	jal	ra,80006a78 <z_get_next_switch_handle>
	lr a1, 0(sp)
8000014c:	00012583          	lw	a1,0(sp)
	addi sp, sp, 16
80000150:	01010113          	addi	sp,sp,16
	beqz a0, no_reschedule
80000154:	00050463          	beqz	a0,8000015c <z_riscv_thread_start>

80000158 <reschedule>:
	/*
	 * Perform context switch:
	 * a0 = new thread
	 * a1 = old thread
	 */
	call z_riscv_switch
80000158:	0fc040ef          	jal	ra,80004254 <z_riscv_switch>

8000015c <z_riscv_thread_start>:
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
8000015c:	04012283          	lw	t0,64(sp)
	csrw mepc, t0
80000160:	34129073          	csrw	mepc,t0

	/* Restore MSTATUS register */
	lr t2, __z_arch_esf_t_mstatus_OFFSET(sp)
80000164:	04412383          	lw	t2,68(sp)
	csrrw t0, mstatus, t2
80000168:	300392f3          	csrrw	t0,mstatus,t2
	csrw mscratch, t0
1:
#endif

	/* Restore s0 (it is no longer ours) */
	lr s0, __z_arch_esf_t_s0_OFFSET(sp)
8000016c:	04812403          	lw	s0,72(sp)

	/* Restore caller-saved registers from thread stack */
	DO_CALLER_SAVED(lr)
80000170:	00412283          	lw	t0,4(sp)
80000174:	00812303          	lw	t1,8(sp)
80000178:	00c12383          	lw	t2,12(sp)
8000017c:	01012e03          	lw	t3,16(sp)
80000180:	01412e83          	lw	t4,20(sp)
80000184:	01812f03          	lw	t5,24(sp)
80000188:	01c12f83          	lw	t6,28(sp)
8000018c:	02012503          	lw	a0,32(sp)
80000190:	02412583          	lw	a1,36(sp)
80000194:	02812603          	lw	a2,40(sp)
80000198:	02c12683          	lw	a3,44(sp)
8000019c:	03012703          	lw	a4,48(sp)
800001a0:	03412783          	lw	a5,52(sp)
800001a4:	03812803          	lw	a6,56(sp)
800001a8:	03c12883          	lw	a7,60(sp)
800001ac:	00012083          	lw	ra,0(sp)
#ifdef CONFIG_USERSPACE
	/* retrieve saved stack pointer */
	lr sp, __z_arch_esf_t_sp_OFFSET(sp)
#else
	/* remove esf from the stack */
	addi sp, sp, __z_arch_esf_t_SIZEOF
800001b0:	05010113          	addi	sp,sp,80
#endif

	mret
800001b4:	30200073          	mret

800001b8 <__soc_handle_irq>:
 * SOC-specific function to handle pending IRQ number generating the interrupt.
 * Exception number is given as parameter via register a0.
 */
SECTION_FUNC(exception.other, __soc_handle_irq)
	/* Clear exception number from CSR mip register */
	li t1, 1
800001b8:	00100313          	li	t1,1
	sll t0, t1, a0
800001bc:	00a312b3          	sll	t0,t1,a0
	csrrc t1, mip, t0
800001c0:	3442b373          	csrrc	t1,mip,t0

	/* Return */
	ret
800001c4:	00008067          	ret

800001c8 <__soc_is_irq>:
 * return 1 (interrupt) or 0 (exception)
 *
 */
SECTION_FUNC(exception.other, __soc_is_irq)
	/* Read mcause and check if interrupt bit is set */
	csrr t0, mcause
800001c8:	342022f3          	csrr	t0,mcause
	li t1, SOC_MCAUSE_IRQ_MASK
800001cc:	80000337          	lui	t1,0x80000
	and t0, t0, t1
800001d0:	0062f2b3          	and	t0,t0,t1

	/* If interrupt bit is not set, return with 0 */
	addi a0, x0, 0
800001d4:	00000513          	li	a0,0
	beqz t0, not_interrupt
800001d8:	00028463          	beqz	t0,800001e0 <not_interrupt>
	addi a0, a0, 1
800001dc:	00150513          	addi	a0,a0,1

800001e0 <not_interrupt>:

not_interrupt:
	/* return */
	ret
800001e0:	00008067          	ret

Disassembly of section text:

800001e4 <__udivdi3>:
800001e4:	00050893          	mv	a7,a0
800001e8:	00058313          	mv	t1,a1
800001ec:	00060713          	mv	a4,a2
800001f0:	00050813          	mv	a6,a0
800001f4:	00058793          	mv	a5,a1
800001f8:	28069263          	bnez	a3,8000047c <__udivdi3+0x298>
800001fc:	8000a5b7          	lui	a1,0x8000a
80000200:	80058593          	addi	a1,a1,-2048 # 80009800 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009801>
80000204:	0ec37663          	bgeu	t1,a2,800002f0 <__udivdi3+0x10c>
80000208:	000106b7          	lui	a3,0x10
8000020c:	0cd67863          	bgeu	a2,a3,800002dc <__udivdi3+0xf8>
80000210:	10063693          	sltiu	a3,a2,256
80000214:	0016c693          	xori	a3,a3,1
80000218:	00369693          	slli	a3,a3,0x3
8000021c:	00d65533          	srl	a0,a2,a3
80000220:	00a585b3          	add	a1,a1,a0
80000224:	0005c583          	lbu	a1,0(a1)
80000228:	02000513          	li	a0,32
8000022c:	00d586b3          	add	a3,a1,a3
80000230:	40d505b3          	sub	a1,a0,a3
80000234:	00d50c63          	beq	a0,a3,8000024c <__udivdi3+0x68>
80000238:	00b317b3          	sll	a5,t1,a1
8000023c:	00d8d6b3          	srl	a3,a7,a3
80000240:	00b61733          	sll	a4,a2,a1
80000244:	00f6e7b3          	or	a5,a3,a5
80000248:	00b89833          	sll	a6,a7,a1
8000024c:	01075593          	srli	a1,a4,0x10
80000250:	02b7d333          	divu	t1,a5,a1
80000254:	01071613          	slli	a2,a4,0x10
80000258:	01065613          	srli	a2,a2,0x10
8000025c:	02b7f7b3          	remu	a5,a5,a1
80000260:	00030513          	mv	a0,t1
80000264:	026608b3          	mul	a7,a2,t1
80000268:	01079693          	slli	a3,a5,0x10
8000026c:	01085793          	srli	a5,a6,0x10
80000270:	00d7e7b3          	or	a5,a5,a3
80000274:	0117fe63          	bgeu	a5,a7,80000290 <__udivdi3+0xac>
80000278:	00f707b3          	add	a5,a4,a5
8000027c:	fff30513          	addi	a0,t1,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
80000280:	00e7e863          	bltu	a5,a4,80000290 <__udivdi3+0xac>
80000284:	0117f663          	bgeu	a5,a7,80000290 <__udivdi3+0xac>
80000288:	ffe30513          	addi	a0,t1,-2
8000028c:	00e787b3          	add	a5,a5,a4
80000290:	411787b3          	sub	a5,a5,a7
80000294:	02b7d8b3          	divu	a7,a5,a1
80000298:	01081813          	slli	a6,a6,0x10
8000029c:	01085813          	srli	a6,a6,0x10
800002a0:	02b7f7b3          	remu	a5,a5,a1
800002a4:	031606b3          	mul	a3,a2,a7
800002a8:	01079793          	slli	a5,a5,0x10
800002ac:	00f86833          	or	a6,a6,a5
800002b0:	00088793          	mv	a5,a7
800002b4:	00d87c63          	bgeu	a6,a3,800002cc <__udivdi3+0xe8>
800002b8:	01070833          	add	a6,a4,a6
800002bc:	fff88793          	addi	a5,a7,-1
800002c0:	00e86663          	bltu	a6,a4,800002cc <__udivdi3+0xe8>
800002c4:	00d87463          	bgeu	a6,a3,800002cc <__udivdi3+0xe8>
800002c8:	ffe88793          	addi	a5,a7,-2
800002cc:	01051513          	slli	a0,a0,0x10
800002d0:	00f56533          	or	a0,a0,a5
800002d4:	00000593          	li	a1,0
800002d8:	00008067          	ret
800002dc:	01000537          	lui	a0,0x1000
800002e0:	01000693          	li	a3,16
800002e4:	f2a66ce3          	bltu	a2,a0,8000021c <__udivdi3+0x38>
800002e8:	01800693          	li	a3,24
800002ec:	f31ff06f          	j	8000021c <__udivdi3+0x38>
800002f0:	00000693          	li	a3,0
800002f4:	00060c63          	beqz	a2,8000030c <__udivdi3+0x128>
800002f8:	000107b7          	lui	a5,0x10
800002fc:	0cf67063          	bgeu	a2,a5,800003bc <__udivdi3+0x1d8>
80000300:	10063693          	sltiu	a3,a2,256
80000304:	0016c693          	xori	a3,a3,1
80000308:	00369693          	slli	a3,a3,0x3
8000030c:	00d657b3          	srl	a5,a2,a3
80000310:	00f585b3          	add	a1,a1,a5
80000314:	0005c783          	lbu	a5,0(a1)
80000318:	00d787b3          	add	a5,a5,a3
8000031c:	02000693          	li	a3,32
80000320:	40f685b3          	sub	a1,a3,a5
80000324:	0af69663          	bne	a3,a5,800003d0 <__udivdi3+0x1ec>
80000328:	40c307b3          	sub	a5,t1,a2
8000032c:	00100593          	li	a1,1
80000330:	01075893          	srli	a7,a4,0x10
80000334:	0317de33          	divu	t3,a5,a7
80000338:	01071613          	slli	a2,a4,0x10
8000033c:	01065613          	srli	a2,a2,0x10
80000340:	01085693          	srli	a3,a6,0x10
80000344:	0317f7b3          	remu	a5,a5,a7
80000348:	000e0513          	mv	a0,t3
8000034c:	03c60333          	mul	t1,a2,t3
80000350:	01079793          	slli	a5,a5,0x10
80000354:	00f6e7b3          	or	a5,a3,a5
80000358:	0067fe63          	bgeu	a5,t1,80000374 <__udivdi3+0x190>
8000035c:	00f707b3          	add	a5,a4,a5
80000360:	fffe0513          	addi	a0,t3,-1
80000364:	00e7e863          	bltu	a5,a4,80000374 <__udivdi3+0x190>
80000368:	0067f663          	bgeu	a5,t1,80000374 <__udivdi3+0x190>
8000036c:	ffee0513          	addi	a0,t3,-2
80000370:	00e787b3          	add	a5,a5,a4
80000374:	406787b3          	sub	a5,a5,t1
80000378:	0317d333          	divu	t1,a5,a7
8000037c:	01081813          	slli	a6,a6,0x10
80000380:	01085813          	srli	a6,a6,0x10
80000384:	0317f7b3          	remu	a5,a5,a7
80000388:	026606b3          	mul	a3,a2,t1
8000038c:	01079793          	slli	a5,a5,0x10
80000390:	00f86833          	or	a6,a6,a5
80000394:	00030793          	mv	a5,t1
80000398:	00d87c63          	bgeu	a6,a3,800003b0 <__udivdi3+0x1cc>
8000039c:	01070833          	add	a6,a4,a6
800003a0:	fff30793          	addi	a5,t1,-1
800003a4:	00e86663          	bltu	a6,a4,800003b0 <__udivdi3+0x1cc>
800003a8:	00d87463          	bgeu	a6,a3,800003b0 <__udivdi3+0x1cc>
800003ac:	ffe30793          	addi	a5,t1,-2
800003b0:	01051513          	slli	a0,a0,0x10
800003b4:	00f56533          	or	a0,a0,a5
800003b8:	00008067          	ret
800003bc:	010007b7          	lui	a5,0x1000
800003c0:	01000693          	li	a3,16
800003c4:	f4f664e3          	bltu	a2,a5,8000030c <__udivdi3+0x128>
800003c8:	01800693          	li	a3,24
800003cc:	f41ff06f          	j	8000030c <__udivdi3+0x128>
800003d0:	00b61733          	sll	a4,a2,a1
800003d4:	00f356b3          	srl	a3,t1,a5
800003d8:	01075513          	srli	a0,a4,0x10
800003dc:	00b31333          	sll	t1,t1,a1
800003e0:	00f8d7b3          	srl	a5,a7,a5
800003e4:	0067e7b3          	or	a5,a5,t1
800003e8:	02a6d333          	divu	t1,a3,a0
800003ec:	01071613          	slli	a2,a4,0x10
800003f0:	01065613          	srli	a2,a2,0x10
800003f4:	00b89833          	sll	a6,a7,a1
800003f8:	02a6f6b3          	remu	a3,a3,a0
800003fc:	026608b3          	mul	a7,a2,t1
80000400:	01069593          	slli	a1,a3,0x10
80000404:	0107d693          	srli	a3,a5,0x10
80000408:	00b6e6b3          	or	a3,a3,a1
8000040c:	00030593          	mv	a1,t1
80000410:	0116fe63          	bgeu	a3,a7,8000042c <__udivdi3+0x248>
80000414:	00d706b3          	add	a3,a4,a3
80000418:	fff30593          	addi	a1,t1,-1
8000041c:	00e6e863          	bltu	a3,a4,8000042c <__udivdi3+0x248>
80000420:	0116f663          	bgeu	a3,a7,8000042c <__udivdi3+0x248>
80000424:	ffe30593          	addi	a1,t1,-2
80000428:	00e686b3          	add	a3,a3,a4
8000042c:	411686b3          	sub	a3,a3,a7
80000430:	02a6d8b3          	divu	a7,a3,a0
80000434:	01079793          	slli	a5,a5,0x10
80000438:	0107d793          	srli	a5,a5,0x10
8000043c:	02a6f6b3          	remu	a3,a3,a0
80000440:	03160633          	mul	a2,a2,a7
80000444:	01069693          	slli	a3,a3,0x10
80000448:	00d7e7b3          	or	a5,a5,a3
8000044c:	00088693          	mv	a3,a7
80000450:	00c7fe63          	bgeu	a5,a2,8000046c <__udivdi3+0x288>
80000454:	00f707b3          	add	a5,a4,a5
80000458:	fff88693          	addi	a3,a7,-1
8000045c:	00e7e863          	bltu	a5,a4,8000046c <__udivdi3+0x288>
80000460:	00c7f663          	bgeu	a5,a2,8000046c <__udivdi3+0x288>
80000464:	ffe88693          	addi	a3,a7,-2
80000468:	00e787b3          	add	a5,a5,a4
8000046c:	01059593          	slli	a1,a1,0x10
80000470:	40c787b3          	sub	a5,a5,a2
80000474:	00d5e5b3          	or	a1,a1,a3
80000478:	eb9ff06f          	j	80000330 <__udivdi3+0x14c>
8000047c:	18d5e663          	bltu	a1,a3,80000608 <__udivdi3+0x424>
80000480:	000107b7          	lui	a5,0x10
80000484:	04f6f463          	bgeu	a3,a5,800004cc <__udivdi3+0x2e8>
80000488:	1006b713          	sltiu	a4,a3,256
8000048c:	00174713          	xori	a4,a4,1
80000490:	00371713          	slli	a4,a4,0x3
80000494:	8000a7b7          	lui	a5,0x8000a
80000498:	00e6d5b3          	srl	a1,a3,a4
8000049c:	80078793          	addi	a5,a5,-2048 # 80009800 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009801>
800004a0:	00b787b3          	add	a5,a5,a1
800004a4:	0007c783          	lbu	a5,0(a5)
800004a8:	00e787b3          	add	a5,a5,a4
800004ac:	02000713          	li	a4,32
800004b0:	40f705b3          	sub	a1,a4,a5
800004b4:	02f71663          	bne	a4,a5,800004e0 <__udivdi3+0x2fc>
800004b8:	00100513          	li	a0,1
800004bc:	e066eee3          	bltu	a3,t1,800002d8 <__udivdi3+0xf4>
800004c0:	00c8b533          	sltu	a0,a7,a2
800004c4:	00154513          	xori	a0,a0,1
800004c8:	00008067          	ret
800004cc:	010007b7          	lui	a5,0x1000
800004d0:	01000713          	li	a4,16
800004d4:	fcf6e0e3          	bltu	a3,a5,80000494 <__udivdi3+0x2b0>
800004d8:	01800713          	li	a4,24
800004dc:	fb9ff06f          	j	80000494 <__udivdi3+0x2b0>
800004e0:	00f65733          	srl	a4,a2,a5
800004e4:	00b696b3          	sll	a3,a3,a1
800004e8:	00d766b3          	or	a3,a4,a3
800004ec:	00f35733          	srl	a4,t1,a5
800004f0:	00b31333          	sll	t1,t1,a1
800004f4:	00f8d7b3          	srl	a5,a7,a5
800004f8:	0067e7b3          	or	a5,a5,t1
800004fc:	0106d313          	srli	t1,a3,0x10
80000500:	02675eb3          	divu	t4,a4,t1
80000504:	01069813          	slli	a6,a3,0x10
80000508:	01085813          	srli	a6,a6,0x10
8000050c:	00b61633          	sll	a2,a2,a1
80000510:	02677733          	remu	a4,a4,t1
80000514:	03d80e33          	mul	t3,a6,t4
80000518:	01071513          	slli	a0,a4,0x10
8000051c:	0107d713          	srli	a4,a5,0x10
80000520:	00a76733          	or	a4,a4,a0
80000524:	000e8513          	mv	a0,t4
80000528:	01c77e63          	bgeu	a4,t3,80000544 <__udivdi3+0x360>
8000052c:	00e68733          	add	a4,a3,a4
80000530:	fffe8513          	addi	a0,t4,-1
80000534:	00d76863          	bltu	a4,a3,80000544 <__udivdi3+0x360>
80000538:	01c77663          	bgeu	a4,t3,80000544 <__udivdi3+0x360>
8000053c:	ffee8513          	addi	a0,t4,-2
80000540:	00d70733          	add	a4,a4,a3
80000544:	41c70733          	sub	a4,a4,t3
80000548:	02675e33          	divu	t3,a4,t1
8000054c:	01079793          	slli	a5,a5,0x10
80000550:	0107d793          	srli	a5,a5,0x10
80000554:	02677733          	remu	a4,a4,t1
80000558:	03c80833          	mul	a6,a6,t3
8000055c:	01071713          	slli	a4,a4,0x10
80000560:	00e7e7b3          	or	a5,a5,a4
80000564:	000e0713          	mv	a4,t3
80000568:	0107fe63          	bgeu	a5,a6,80000584 <__udivdi3+0x3a0>
8000056c:	00f687b3          	add	a5,a3,a5
80000570:	fffe0713          	addi	a4,t3,-1
80000574:	00d7e863          	bltu	a5,a3,80000584 <__udivdi3+0x3a0>
80000578:	0107f663          	bgeu	a5,a6,80000584 <__udivdi3+0x3a0>
8000057c:	ffee0713          	addi	a4,t3,-2
80000580:	00d787b3          	add	a5,a5,a3
80000584:	01051513          	slli	a0,a0,0x10
80000588:	00010e37          	lui	t3,0x10
8000058c:	00e56533          	or	a0,a0,a4
80000590:	fffe0693          	addi	a3,t3,-1 # ffff <__rom_region_size+0x56e3>
80000594:	00d57733          	and	a4,a0,a3
80000598:	410787b3          	sub	a5,a5,a6
8000059c:	00d676b3          	and	a3,a2,a3
800005a0:	01055813          	srli	a6,a0,0x10
800005a4:	01065613          	srli	a2,a2,0x10
800005a8:	02d70333          	mul	t1,a4,a3
800005ac:	02d806b3          	mul	a3,a6,a3
800005b0:	02c70733          	mul	a4,a4,a2
800005b4:	02c80833          	mul	a6,a6,a2
800005b8:	00d70633          	add	a2,a4,a3
800005bc:	01035713          	srli	a4,t1,0x10
800005c0:	00c70733          	add	a4,a4,a2
800005c4:	00d77463          	bgeu	a4,a3,800005cc <__udivdi3+0x3e8>
800005c8:	01c80833          	add	a6,a6,t3
800005cc:	01075693          	srli	a3,a4,0x10
800005d0:	010686b3          	add	a3,a3,a6
800005d4:	02d7e663          	bltu	a5,a3,80000600 <__udivdi3+0x41c>
800005d8:	ced79ee3          	bne	a5,a3,800002d4 <__udivdi3+0xf0>
800005dc:	000107b7          	lui	a5,0x10
800005e0:	fff78793          	addi	a5,a5,-1 # ffff <__rom_region_size+0x56e3>
800005e4:	00f77733          	and	a4,a4,a5
800005e8:	01071713          	slli	a4,a4,0x10
800005ec:	00f37333          	and	t1,t1,a5
800005f0:	00b898b3          	sll	a7,a7,a1
800005f4:	00670733          	add	a4,a4,t1
800005f8:	00000593          	li	a1,0
800005fc:	cce8fee3          	bgeu	a7,a4,800002d8 <__udivdi3+0xf4>
80000600:	fff50513          	addi	a0,a0,-1 # ffffff <CONFIG_SRAM_SIZE+0xefffff>
80000604:	cd1ff06f          	j	800002d4 <__udivdi3+0xf0>
80000608:	00000593          	li	a1,0
8000060c:	00000513          	li	a0,0
80000610:	00008067          	ret

80000614 <__umoddi3>:
80000614:	00060813          	mv	a6,a2
80000618:	00050793          	mv	a5,a0
8000061c:	00058713          	mv	a4,a1
80000620:	20069663          	bnez	a3,8000082c <__umoddi3+0x218>
80000624:	8000a8b7          	lui	a7,0x8000a
80000628:	80088893          	addi	a7,a7,-2048 # 80009800 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009801>
8000062c:	0cc5fc63          	bgeu	a1,a2,80000704 <__umoddi3+0xf0>
80000630:	000106b7          	lui	a3,0x10
80000634:	0ad67e63          	bgeu	a2,a3,800006f0 <__umoddi3+0xdc>
80000638:	10063693          	sltiu	a3,a2,256
8000063c:	0016c693          	xori	a3,a3,1
80000640:	00369693          	slli	a3,a3,0x3
80000644:	00d65333          	srl	t1,a2,a3
80000648:	006888b3          	add	a7,a7,t1
8000064c:	0008c883          	lbu	a7,0(a7)
80000650:	02000313          	li	t1,32
80000654:	00d886b3          	add	a3,a7,a3
80000658:	40d308b3          	sub	a7,t1,a3
8000065c:	00d30c63          	beq	t1,a3,80000674 <__umoddi3+0x60>
80000660:	01159733          	sll	a4,a1,a7
80000664:	00d556b3          	srl	a3,a0,a3
80000668:	01161833          	sll	a6,a2,a7
8000066c:	00e6e733          	or	a4,a3,a4
80000670:	011517b3          	sll	a5,a0,a7
80000674:	01085613          	srli	a2,a6,0x10
80000678:	02c756b3          	divu	a3,a4,a2
8000067c:	01081513          	slli	a0,a6,0x10
80000680:	01055513          	srli	a0,a0,0x10
80000684:	02c77733          	remu	a4,a4,a2
80000688:	02a686b3          	mul	a3,a3,a0
8000068c:	01071593          	slli	a1,a4,0x10
80000690:	0107d713          	srli	a4,a5,0x10
80000694:	00b76733          	or	a4,a4,a1
80000698:	00d77a63          	bgeu	a4,a3,800006ac <__umoddi3+0x98>
8000069c:	00e80733          	add	a4,a6,a4
800006a0:	01076663          	bltu	a4,a6,800006ac <__umoddi3+0x98>
800006a4:	00d77463          	bgeu	a4,a3,800006ac <__umoddi3+0x98>
800006a8:	01070733          	add	a4,a4,a6
800006ac:	40d70733          	sub	a4,a4,a3
800006b0:	02c756b3          	divu	a3,a4,a2
800006b4:	02c77733          	remu	a4,a4,a2
800006b8:	02a686b3          	mul	a3,a3,a0
800006bc:	01079793          	slli	a5,a5,0x10
800006c0:	01071713          	slli	a4,a4,0x10
800006c4:	0107d793          	srli	a5,a5,0x10
800006c8:	00e7e7b3          	or	a5,a5,a4
800006cc:	00d7fa63          	bgeu	a5,a3,800006e0 <__umoddi3+0xcc>
800006d0:	00f807b3          	add	a5,a6,a5
800006d4:	0107e663          	bltu	a5,a6,800006e0 <__umoddi3+0xcc>
800006d8:	00d7f463          	bgeu	a5,a3,800006e0 <__umoddi3+0xcc>
800006dc:	010787b3          	add	a5,a5,a6
800006e0:	40d787b3          	sub	a5,a5,a3
800006e4:	0117d533          	srl	a0,a5,a7
800006e8:	00000593          	li	a1,0
800006ec:	00008067          	ret
800006f0:	01000337          	lui	t1,0x1000
800006f4:	01000693          	li	a3,16
800006f8:	f46666e3          	bltu	a2,t1,80000644 <__umoddi3+0x30>
800006fc:	01800693          	li	a3,24
80000700:	f45ff06f          	j	80000644 <__umoddi3+0x30>
80000704:	00000693          	li	a3,0
80000708:	00060c63          	beqz	a2,80000720 <__umoddi3+0x10c>
8000070c:	00010737          	lui	a4,0x10
80000710:	06e67e63          	bgeu	a2,a4,8000078c <__umoddi3+0x178>
80000714:	10063693          	sltiu	a3,a2,256
80000718:	0016c693          	xori	a3,a3,1
8000071c:	00369693          	slli	a3,a3,0x3
80000720:	00d65733          	srl	a4,a2,a3
80000724:	00e888b3          	add	a7,a7,a4
80000728:	0008c703          	lbu	a4,0(a7)
8000072c:	00d70733          	add	a4,a4,a3
80000730:	02000693          	li	a3,32
80000734:	40e688b3          	sub	a7,a3,a4
80000738:	06e69463          	bne	a3,a4,800007a0 <__umoddi3+0x18c>
8000073c:	40c58733          	sub	a4,a1,a2
80000740:	01085593          	srli	a1,a6,0x10
80000744:	02b75633          	divu	a2,a4,a1
80000748:	01081513          	slli	a0,a6,0x10
8000074c:	01055513          	srli	a0,a0,0x10
80000750:	0107d693          	srli	a3,a5,0x10
80000754:	02b77733          	remu	a4,a4,a1
80000758:	02a60633          	mul	a2,a2,a0
8000075c:	01071713          	slli	a4,a4,0x10
80000760:	00e6e733          	or	a4,a3,a4
80000764:	00c77a63          	bgeu	a4,a2,80000778 <__umoddi3+0x164>
80000768:	00e80733          	add	a4,a6,a4
8000076c:	01076663          	bltu	a4,a6,80000778 <__umoddi3+0x164>
80000770:	00c77463          	bgeu	a4,a2,80000778 <__umoddi3+0x164>
80000774:	01070733          	add	a4,a4,a6
80000778:	40c70733          	sub	a4,a4,a2
8000077c:	02b756b3          	divu	a3,a4,a1
80000780:	02b77733          	remu	a4,a4,a1
80000784:	02a686b3          	mul	a3,a3,a0
80000788:	f35ff06f          	j	800006bc <__umoddi3+0xa8>
8000078c:	01000737          	lui	a4,0x1000
80000790:	01000693          	li	a3,16
80000794:	f8e666e3          	bltu	a2,a4,80000720 <__umoddi3+0x10c>
80000798:	01800693          	li	a3,24
8000079c:	f85ff06f          	j	80000720 <__umoddi3+0x10c>
800007a0:	01161833          	sll	a6,a2,a7
800007a4:	00e5d6b3          	srl	a3,a1,a4
800007a8:	011517b3          	sll	a5,a0,a7
800007ac:	011595b3          	sll	a1,a1,a7
800007b0:	00e55733          	srl	a4,a0,a4
800007b4:	01085513          	srli	a0,a6,0x10
800007b8:	00b76733          	or	a4,a4,a1
800007bc:	02a6d5b3          	divu	a1,a3,a0
800007c0:	01081313          	slli	t1,a6,0x10
800007c4:	01035313          	srli	t1,t1,0x10
800007c8:	02a6f6b3          	remu	a3,a3,a0
800007cc:	026585b3          	mul	a1,a1,t1
800007d0:	01069613          	slli	a2,a3,0x10
800007d4:	01075693          	srli	a3,a4,0x10
800007d8:	00c6e6b3          	or	a3,a3,a2
800007dc:	00b6fa63          	bgeu	a3,a1,800007f0 <__umoddi3+0x1dc>
800007e0:	00d806b3          	add	a3,a6,a3
800007e4:	0106e663          	bltu	a3,a6,800007f0 <__umoddi3+0x1dc>
800007e8:	00b6f463          	bgeu	a3,a1,800007f0 <__umoddi3+0x1dc>
800007ec:	010686b3          	add	a3,a3,a6
800007f0:	40b686b3          	sub	a3,a3,a1
800007f4:	02a6d633          	divu	a2,a3,a0
800007f8:	01071713          	slli	a4,a4,0x10
800007fc:	01075713          	srli	a4,a4,0x10
80000800:	02a6f6b3          	remu	a3,a3,a0
80000804:	02660633          	mul	a2,a2,t1
80000808:	01069693          	slli	a3,a3,0x10
8000080c:	00d76733          	or	a4,a4,a3
80000810:	00c77a63          	bgeu	a4,a2,80000824 <__umoddi3+0x210>
80000814:	00e80733          	add	a4,a6,a4
80000818:	01076663          	bltu	a4,a6,80000824 <__umoddi3+0x210>
8000081c:	00c77463          	bgeu	a4,a2,80000824 <__umoddi3+0x210>
80000820:	01070733          	add	a4,a4,a6
80000824:	40c70733          	sub	a4,a4,a2
80000828:	f19ff06f          	j	80000740 <__umoddi3+0x12c>
8000082c:	1cd5e463          	bltu	a1,a3,800009f4 <__umoddi3+0x3e0>
80000830:	00010837          	lui	a6,0x10
80000834:	0506fe63          	bgeu	a3,a6,80000890 <__umoddi3+0x27c>
80000838:	1006b813          	sltiu	a6,a3,256
8000083c:	00184813          	xori	a6,a6,1
80000840:	00381813          	slli	a6,a6,0x3
80000844:	8000a8b7          	lui	a7,0x8000a
80000848:	0106d333          	srl	t1,a3,a6
8000084c:	80088893          	addi	a7,a7,-2048 # 80009800 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009801>
80000850:	006888b3          	add	a7,a7,t1
80000854:	0008c883          	lbu	a7,0(a7)
80000858:	02000313          	li	t1,32
8000085c:	010888b3          	add	a7,a7,a6
80000860:	41130833          	sub	a6,t1,a7
80000864:	05131063          	bne	t1,a7,800008a4 <__umoddi3+0x290>
80000868:	00b6e463          	bltu	a3,a1,80000870 <__umoddi3+0x25c>
8000086c:	00c56c63          	bltu	a0,a2,80000884 <__umoddi3+0x270>
80000870:	40c50633          	sub	a2,a0,a2
80000874:	40d586b3          	sub	a3,a1,a3
80000878:	00c53733          	sltu	a4,a0,a2
8000087c:	00060793          	mv	a5,a2
80000880:	40e68733          	sub	a4,a3,a4
80000884:	00078513          	mv	a0,a5
80000888:	00070593          	mv	a1,a4
8000088c:	00008067          	ret
80000890:	010008b7          	lui	a7,0x1000
80000894:	01000813          	li	a6,16
80000898:	fb16e6e3          	bltu	a3,a7,80000844 <__umoddi3+0x230>
8000089c:	01800813          	li	a6,24
800008a0:	fa5ff06f          	j	80000844 <__umoddi3+0x230>
800008a4:	011657b3          	srl	a5,a2,a7
800008a8:	010696b3          	sll	a3,a3,a6
800008ac:	00d7e6b3          	or	a3,a5,a3
800008b0:	0115d733          	srl	a4,a1,a7
800008b4:	0106de13          	srli	t3,a3,0x10
800008b8:	03c75f33          	divu	t5,a4,t3
800008bc:	01069313          	slli	t1,a3,0x10
800008c0:	01035313          	srli	t1,t1,0x10
800008c4:	010597b3          	sll	a5,a1,a6
800008c8:	011555b3          	srl	a1,a0,a7
800008cc:	00f5e5b3          	or	a1,a1,a5
800008d0:	0105d793          	srli	a5,a1,0x10
800008d4:	01061633          	sll	a2,a2,a6
800008d8:	01051533          	sll	a0,a0,a6
800008dc:	03c77733          	remu	a4,a4,t3
800008e0:	03e30eb3          	mul	t4,t1,t5
800008e4:	01071713          	slli	a4,a4,0x10
800008e8:	00e7e7b3          	or	a5,a5,a4
800008ec:	000f0713          	mv	a4,t5
800008f0:	01d7fe63          	bgeu	a5,t4,8000090c <__umoddi3+0x2f8>
800008f4:	00f687b3          	add	a5,a3,a5
800008f8:	ffff0713          	addi	a4,t5,-1
800008fc:	00d7e863          	bltu	a5,a3,8000090c <__umoddi3+0x2f8>
80000900:	01d7f663          	bgeu	a5,t4,8000090c <__umoddi3+0x2f8>
80000904:	ffef0713          	addi	a4,t5,-2
80000908:	00d787b3          	add	a5,a5,a3
8000090c:	41d787b3          	sub	a5,a5,t4
80000910:	03c7deb3          	divu	t4,a5,t3
80000914:	01059593          	slli	a1,a1,0x10
80000918:	0105d593          	srli	a1,a1,0x10
8000091c:	03c7f7b3          	remu	a5,a5,t3
80000920:	000e8e13          	mv	t3,t4
80000924:	03d30333          	mul	t1,t1,t4
80000928:	01079793          	slli	a5,a5,0x10
8000092c:	00f5e5b3          	or	a1,a1,a5
80000930:	0065fe63          	bgeu	a1,t1,8000094c <__umoddi3+0x338>
80000934:	00b685b3          	add	a1,a3,a1
80000938:	fffe8e13          	addi	t3,t4,-1
8000093c:	00d5e863          	bltu	a1,a3,8000094c <__umoddi3+0x338>
80000940:	0065f663          	bgeu	a1,t1,8000094c <__umoddi3+0x338>
80000944:	ffee8e13          	addi	t3,t4,-2
80000948:	00d585b3          	add	a1,a1,a3
8000094c:	01071793          	slli	a5,a4,0x10
80000950:	00010f37          	lui	t5,0x10
80000954:	01c7e7b3          	or	a5,a5,t3
80000958:	406585b3          	sub	a1,a1,t1
8000095c:	ffff0313          	addi	t1,t5,-1 # ffff <__rom_region_size+0x56e3>
80000960:	0067f733          	and	a4,a5,t1
80000964:	01065e13          	srli	t3,a2,0x10
80000968:	0107d793          	srli	a5,a5,0x10
8000096c:	00667333          	and	t1,a2,t1
80000970:	02670eb3          	mul	t4,a4,t1
80000974:	02678333          	mul	t1,a5,t1
80000978:	03c70733          	mul	a4,a4,t3
8000097c:	03c787b3          	mul	a5,a5,t3
80000980:	00670e33          	add	t3,a4,t1
80000984:	010ed713          	srli	a4,t4,0x10
80000988:	01c70733          	add	a4,a4,t3
8000098c:	00677463          	bgeu	a4,t1,80000994 <__umoddi3+0x380>
80000990:	01e787b3          	add	a5,a5,t5
80000994:	01075313          	srli	t1,a4,0x10
80000998:	00f307b3          	add	a5,t1,a5
8000099c:	00010337          	lui	t1,0x10
800009a0:	fff30313          	addi	t1,t1,-1 # ffff <__rom_region_size+0x56e3>
800009a4:	00677733          	and	a4,a4,t1
800009a8:	01071713          	slli	a4,a4,0x10
800009ac:	006efeb3          	and	t4,t4,t1
800009b0:	01d70733          	add	a4,a4,t4
800009b4:	00f5e663          	bltu	a1,a5,800009c0 <__umoddi3+0x3ac>
800009b8:	00f59e63          	bne	a1,a5,800009d4 <__umoddi3+0x3c0>
800009bc:	00e57c63          	bgeu	a0,a4,800009d4 <__umoddi3+0x3c0>
800009c0:	40c70633          	sub	a2,a4,a2
800009c4:	00c73333          	sltu	t1,a4,a2
800009c8:	00d306b3          	add	a3,t1,a3
800009cc:	00060713          	mv	a4,a2
800009d0:	40d787b3          	sub	a5,a5,a3
800009d4:	40e50733          	sub	a4,a0,a4
800009d8:	00e53533          	sltu	a0,a0,a4
800009dc:	40f585b3          	sub	a1,a1,a5
800009e0:	40a585b3          	sub	a1,a1,a0
800009e4:	011598b3          	sll	a7,a1,a7
800009e8:	01075733          	srl	a4,a4,a6
800009ec:	00e8e533          	or	a0,a7,a4
800009f0:	0105d5b3          	srl	a1,a1,a6
800009f4:	00008067          	ret

800009f8 <memcpy>:
800009f8:	00050313          	mv	t1,a0
800009fc:	00060e63          	beqz	a2,80000a18 <memcpy+0x20>
80000a00:	00058383          	lb	t2,0(a1)
80000a04:	00730023          	sb	t2,0(t1)
80000a08:	fff60613          	addi	a2,a2,-1
80000a0c:	00130313          	addi	t1,t1,1
80000a10:	00158593          	addi	a1,a1,1
80000a14:	fe0616e3          	bnez	a2,80000a00 <memcpy+0x8>
80000a18:	00008067          	ret

80000a1c <memset>:
80000a1c:	00050313          	mv	t1,a0
80000a20:	00060a63          	beqz	a2,80000a34 <memset+0x18>
80000a24:	00b30023          	sb	a1,0(t1)
80000a28:	fff60613          	addi	a2,a2,-1
80000a2c:	00130313          	addi	t1,t1,1
80000a30:	fe061ae3          	bnez	a2,80000a24 <memset+0x8>
80000a34:	00008067          	ret

80000a38 <setjmp>:
80000a38:	00152023          	sw	ra,0(a0)
80000a3c:	00852223          	sw	s0,4(a0)
80000a40:	00952423          	sw	s1,8(a0)
80000a44:	01252623          	sw	s2,12(a0)
80000a48:	01352823          	sw	s3,16(a0)
80000a4c:	01452a23          	sw	s4,20(a0)
80000a50:	01552c23          	sw	s5,24(a0)
80000a54:	01652e23          	sw	s6,28(a0)
80000a58:	03752023          	sw	s7,32(a0)
80000a5c:	03852223          	sw	s8,36(a0)
80000a60:	03952423          	sw	s9,40(a0)
80000a64:	03a52623          	sw	s10,44(a0)
80000a68:	03b52823          	sw	s11,48(a0)
80000a6c:	02252a23          	sw	sp,52(a0)
80000a70:	00000513          	li	a0,0
80000a74:	00008067          	ret

80000a78 <longjmp>:
80000a78:	00052083          	lw	ra,0(a0)
80000a7c:	00452403          	lw	s0,4(a0)
80000a80:	00852483          	lw	s1,8(a0)
80000a84:	00c52903          	lw	s2,12(a0)
80000a88:	01052983          	lw	s3,16(a0)
80000a8c:	01452a03          	lw	s4,20(a0)
80000a90:	01852a83          	lw	s5,24(a0)
80000a94:	01c52b03          	lw	s6,28(a0)
80000a98:	02052b83          	lw	s7,32(a0)
80000a9c:	02452c03          	lw	s8,36(a0)
80000aa0:	02852c83          	lw	s9,40(a0)
80000aa4:	02c52d03          	lw	s10,44(a0)
80000aa8:	03052d83          	lw	s11,48(a0)
80000aac:	03452103          	lw	sp,52(a0)
80000ab0:	0015b513          	seqz	a0,a1
80000ab4:	00b50533          	add	a0,a0,a1
80000ab8:	00008067          	ret

80000abc <memmove>:
80000abc:	02060c63          	beqz	a2,80000af4 <memmove+0x38>
80000ac0:	00050313          	mv	t1,a0
80000ac4:	00100693          	li	a3,1
80000ac8:	00b56a63          	bltu	a0,a1,80000adc <memmove+0x20>
80000acc:	fff00693          	li	a3,-1
80000ad0:	fff60713          	addi	a4,a2,-1
80000ad4:	00e30333          	add	t1,t1,a4
80000ad8:	00e585b3          	add	a1,a1,a4
80000adc:	00058383          	lb	t2,0(a1)
80000ae0:	00730023          	sb	t2,0(t1)
80000ae4:	fff60613          	addi	a2,a2,-1
80000ae8:	00d30333          	add	t1,t1,a3
80000aec:	00d585b3          	add	a1,a1,a3
80000af0:	fe0616e3          	bnez	a2,80000adc <memmove+0x20>
80000af4:	00008067          	ret

80000af8 <dummy_function>:
80000af8:	00308013          	addi	zero,ra,3
void set_inject_param(char *choice);
void set_code_ptr(char *choice);
void set_location(char *choice);
void set_function(char *choice);

int dummy_function(const char *str) {
80000afc:	fe010113          	addi	sp,sp,-32
80000b00:	00112e23          	sw	ra,28(sp)
80000b04:	00812c23          	sw	s0,24(sp)
80000b08:	8000d437          	lui	s0,0x8000d
80000b0c:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80000b10:	00f12623          	sw	a5,12(sp)
80000b14:	00000793          	li	a5,0
        printf("Dummy function\n");
80000b18:	8000a537          	lui	a0,0x8000a
80000b1c:	90050513          	addi	a0,a0,-1792 # 80009900 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009901>
80000b20:	769010ef          	jal	ra,80002a88 <printk>
        return 0;
}
80000b24:	00c12703          	lw	a4,12(sp)
80000b28:	25042783          	lw	a5,592(s0)
80000b2c:	00f747b3          	xor	a5,a4,a5
80000b30:	00000713          	li	a4,0
80000b34:	00079c63          	bnez	a5,80000b4c <dummy_function+0x54>
80000b38:	00000513          	li	a0,0
80000b3c:	01c12083          	lw	ra,28(sp)
80000b40:	01812403          	lw	s0,24(sp)
80000b44:	02010113          	addi	sp,sp,32
80000b48:	00008067          	ret
80000b4c:	7c5060ef          	jal	ra,80007b10 <_StackCheckHandler>

80000b50 <shellcode_target>:
80000b50:	00308013          	addi	zero,ra,3
{
80000b54:	fe010113          	addi	sp,sp,-32
80000b58:	00112e23          	sw	ra,28(sp)
80000b5c:	8000d7b7          	lui	a5,0x8000d
80000b60:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80000b64:	00e12623          	sw	a4,12(sp)
80000b68:	00000713          	li	a4,0
    printf("success.\nCode injection function reached.\n");
80000b6c:	8000a537          	lui	a0,0x8000a
80000b70:	91050513          	addi	a0,a0,-1776 # 80009910 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009911>
80000b74:	715010ef          	jal	ra,80002a88 <printk>
    exit(0);
80000b78:	00000513          	li	a0,0
80000b7c:	7a0070ef          	jal	ra,8000831c <exit>

80000b80 <ret2libc_target>:
80000b80:	00308013          	addi	zero,ra,3
{
80000b84:	fe010113          	addi	sp,sp,-32
80000b88:	00112e23          	sw	ra,28(sp)
80000b8c:	8000d7b7          	lui	a5,0x8000d
80000b90:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80000b94:	00e12623          	sw	a4,12(sp)
80000b98:	00000713          	li	a4,0
    printf("success.\nRet2Libc function reached.\n");
80000b9c:	8000a537          	lui	a0,0x8000a
80000ba0:	93c50513          	addi	a0,a0,-1732 # 8000993c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000993d>
80000ba4:	6e5010ef          	jal	ra,80002a88 <printk>
    exit(0);
80000ba8:	00000513          	li	a0,0
80000bac:	770070ef          	jal	ra,8000831c <exit>

80000bb0 <rop_target>:
80000bb0:	00308013          	addi	zero,ra,3
{
80000bb4:	fe010113          	addi	sp,sp,-32
80000bb8:	00112e23          	sw	ra,28(sp)
80000bbc:	8000d7b7          	lui	a5,0x8000d
80000bc0:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80000bc4:	00e12623          	sw	a4,12(sp)
80000bc8:	00000713          	li	a4,0
    printf("success.\nROP function reached.\n");
80000bcc:	8000a537          	lui	a0,0x8000a
80000bd0:	96450513          	addi	a0,a0,-1692 # 80009964 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009965>
80000bd4:	6b5010ef          	jal	ra,80002a88 <printk>
    exit(0);
80000bd8:	00000513          	li	a0,0
80000bdc:	740070ef          	jal	ra,8000831c <exit>

80000be0 <hex_to_bin>:
80000be0:	00308013          	addi	zero,ra,3
*/
void build_shellcode(char *shellcode);
void hex_to_string(char *str, size_t val);
void format_instruction(char *dest, size_t insn);

const char *hex_to_bin(char c) {
80000be4:	fe010113          	addi	sp,sp,-32
80000be8:	00112e23          	sw	ra,28(sp)
80000bec:	8000d7b7          	lui	a5,0x8000d
80000bf0:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80000bf4:	00e12623          	sw	a4,12(sp)
80000bf8:	00000713          	li	a4,0
	if (c >= '0' && c <= '9') return bin4b[c - '0'];
80000bfc:	fd050793          	addi	a5,a0,-48
80000c00:	0ff7f793          	zext.b	a5,a5
80000c04:	00900713          	li	a4,9
80000c08:	04f77863          	bgeu	a4,a5,80000c58 <hex_to_bin+0x78>
	if (c >= 'a' && c <= 'f') return bin4b[10 + c - 'a'];
80000c0c:	f9f50793          	addi	a5,a0,-97
80000c10:	0ff7f793          	zext.b	a5,a5
80000c14:	00500713          	li	a4,5
80000c18:	04f76e63          	bltu	a4,a5,80000c74 <hex_to_bin+0x94>
80000c1c:	fa950513          	addi	a0,a0,-87
80000c20:	8000d7b7          	lui	a5,0x8000d
80000c24:	00251513          	slli	a0,a0,0x2
80000c28:	7ac78793          	addi	a5,a5,1964 # 8000d7ac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d7ad>
80000c2c:	00a787b3          	add	a5,a5,a0
80000c30:	0007a503          	lw	a0,0(a5)
	return NULL;
}
80000c34:	8000d7b7          	lui	a5,0x8000d
80000c38:	00c12703          	lw	a4,12(sp)
80000c3c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80000c40:	00f747b3          	xor	a5,a4,a5
80000c44:	00000713          	li	a4,0
80000c48:	02079a63          	bnez	a5,80000c7c <hex_to_bin+0x9c>
80000c4c:	01c12083          	lw	ra,28(sp)
80000c50:	02010113          	addi	sp,sp,32
80000c54:	00008067          	ret
	if (c >= '0' && c <= '9') return bin4b[c - '0'];
80000c58:	fd050513          	addi	a0,a0,-48
80000c5c:	8000d7b7          	lui	a5,0x8000d
80000c60:	00251513          	slli	a0,a0,0x2
80000c64:	7ac78793          	addi	a5,a5,1964 # 8000d7ac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d7ad>
80000c68:	00a787b3          	add	a5,a5,a0
80000c6c:	0007a503          	lw	a0,0(a5)
80000c70:	fc5ff06f          	j	80000c34 <hex_to_bin+0x54>
	return NULL;
80000c74:	00000513          	li	a0,0
80000c78:	fbdff06f          	j	80000c34 <hex_to_bin+0x54>
}
80000c7c:	695060ef          	jal	ra,80007b10 <_StackCheckHandler>

80000c80 <print_current_test_parameters>:
80000c80:	00308013          	addi	zero,ra,3
print_current_test_parameters(void) {
80000c84:	fe010113          	addi	sp,sp,-32
80000c88:	00112e23          	sw	ra,28(sp)
80000c8c:	00812c23          	sw	s0,24(sp)
80000c90:	8000d437          	lui	s0,0x8000d
80000c94:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80000c98:	00f12623          	sw	a5,12(sp)
80000c9c:	00000793          	li	a5,0
    printk("RIPE parameters:\n");
80000ca0:	8000a537          	lui	a0,0x8000a
80000ca4:	98450513          	addi	a0,a0,-1660 # 80009984 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009985>
80000ca8:	5e1010ef          	jal	ra,80002a88 <printk>
        opt_techniques[attack.technique-100],
80000cac:	8000b7b7          	lui	a5,0x8000b
80000cb0:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80000cb4:	0007a503          	lw	a0,0(a5)
80000cb8:	f9c50513          	addi	a0,a0,-100
        opt_inject_params[attack.inject_param-200],
80000cbc:	0047a583          	lw	a1,4(a5)
80000cc0:	f3858593          	addi	a1,a1,-200
        opt_code_ptrs[attack.code_ptr-300],
80000cc4:	0087a603          	lw	a2,8(a5)
80000cc8:	ed460613          	addi	a2,a2,-300
        opt_locations[attack.location-400],
80000ccc:	00c7a683          	lw	a3,12(a5)
80000cd0:	e7068693          	addi	a3,a3,-400 # fe70 <__rom_region_size+0x5554>
        opt_funcs[attack.function-500]);
80000cd4:	0107a703          	lw	a4,16(a5)
80000cd8:	e0c70713          	addi	a4,a4,-500 # fffe0c <CONFIG_SRAM_SIZE+0xeffe0c>
	printk("technique\t%s\n"
80000cdc:	8000d7b7          	lui	a5,0x8000d
80000ce0:	00271713          	slli	a4,a4,0x2
80000ce4:	7ec78793          	addi	a5,a5,2028 # 8000d7ec <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d7ed>
80000ce8:	00e787b3          	add	a5,a5,a4
80000cec:	8000e737          	lui	a4,0x8000e
80000cf0:	00269693          	slli	a3,a3,0x2
80000cf4:	81070713          	addi	a4,a4,-2032 # 8000d810 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d811>
80000cf8:	00d70733          	add	a4,a4,a3
80000cfc:	8000e6b7          	lui	a3,0x8000e
80000d00:	00261613          	slli	a2,a2,0x2
80000d04:	82068693          	addi	a3,a3,-2016 # 8000d820 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d821>
80000d08:	00c686b3          	add	a3,a3,a2
80000d0c:	8000e637          	lui	a2,0x8000e
80000d10:	00259593          	slli	a1,a1,0x2
80000d14:	86860613          	addi	a2,a2,-1944 # 8000d868 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d869>
80000d18:	00b60633          	add	a2,a2,a1
80000d1c:	00251513          	slli	a0,a0,0x2
80000d20:	81418593          	addi	a1,gp,-2028 # 8000d8fc <opt_techniques>
80000d24:	00a585b3          	add	a1,a1,a0
80000d28:	0007a783          	lw	a5,0(a5)
80000d2c:	00072703          	lw	a4,0(a4)
80000d30:	0006a683          	lw	a3,0(a3)
80000d34:	00062603          	lw	a2,0(a2)
80000d38:	0005a583          	lw	a1,0(a1)
80000d3c:	8000a537          	lui	a0,0x8000a
80000d40:	99850513          	addi	a0,a0,-1640 # 80009998 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009999>
80000d44:	545010ef          	jal	ra,80002a88 <printk>
}
80000d48:	00c12703          	lw	a4,12(sp)
80000d4c:	25042783          	lw	a5,592(s0)
80000d50:	00f747b3          	xor	a5,a4,a5
80000d54:	00000713          	li	a4,0
80000d58:	00079a63          	bnez	a5,80000d6c <print_current_test_parameters+0xec>
80000d5c:	01c12083          	lw	ra,28(sp)
80000d60:	01812403          	lw	s0,24(sp)
80000d64:	02010113          	addi	sp,sp,32
80000d68:	00008067          	ret
80000d6c:	5a5060ef          	jal	ra,80007b10 <_StackCheckHandler>

80000d70 <build_payload>:
80000d70:	00308013          	addi	zero,ra,3
{
80000d74:	fe010113          	addi	sp,sp,-32
80000d78:	00112e23          	sw	ra,28(sp)
80000d7c:	00812c23          	sw	s0,24(sp)
80000d80:	00912a23          	sw	s1,20(sp)
80000d84:	01212823          	sw	s2,16(sp)
80000d88:	00050413          	mv	s0,a0
80000d8c:	8000d7b7          	lui	a5,0x8000d
80000d90:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80000d94:	00e12623          	sw	a4,12(sp)
80000d98:	00000713          	li	a4,0
	switch (attack.inject_param) {
80000d9c:	8000b7b7          	lui	a5,0x8000b
80000da0:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80000da4:	0047a783          	lw	a5,4(a5)
80000da8:	0ca00713          	li	a4,202
80000dac:	02f76863          	bltu	a4,a5,80000ddc <build_payload+0x6c>
80000db0:	0c900713          	li	a4,201
80000db4:	04e7f663          	bgeu	a5,a4,80000e00 <build_payload+0x90>
80000db8:	0c800713          	li	a4,200
80000dbc:	04e79e63          	bne	a5,a4,80000e18 <build_payload+0xa8>
            if (payload->size < (size_shellcode_nonop + sizeof(long))) {
80000dc0:	00452703          	lw	a4,4(a0)
80000dc4:	00f00793          	li	a5,15
80000dc8:	1ae7f663          	bgeu	a5,a4,80000f74 <build_payload+0x204>
            shellcode      = shellcode_nonop;
80000dcc:	8000b4b7          	lui	s1,0x8000b
80000dd0:	df048493          	addi	s1,s1,-528 # 8000adf0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000adf1>
            size_shellcode = size_shellcode_nonop;
80000dd4:	00c00913          	li	s2,12
80000dd8:	0400006f          	j	80000e18 <build_payload+0xa8>
	switch (attack.inject_param) {
80000ddc:	0cb00713          	li	a4,203
80000de0:	02e79c63          	bne	a5,a4,80000e18 <build_payload+0xa8>
            if (attack.code_ptr == VAR_IOF)
80000de4:	8000b7b7          	lui	a5,0x8000b
80000de8:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80000dec:	0087a783          	lw	a5,8(a5)
80000df0:	13c00713          	li	a4,316
80000df4:	10e78c63          	beq	a5,a4,80000f0c <build_payload+0x19c>
			if (attack.code_ptr == VAR_LEAK) {
80000df8:	13d00713          	li	a4,317
80000dfc:	10e78e63          	beq	a5,a4,80000f18 <build_payload+0x1a8>
            if (payload->size < sizeof(long))
80000e00:	00442703          	lw	a4,4(s0)
80000e04:	00300793          	li	a5,3
80000e08:	16e7fa63          	bgeu	a5,a4,80000f7c <build_payload+0x20c>
            shellcode      = "dummy";
80000e0c:	8000a4b7          	lui	s1,0x8000a
80000e10:	9e048493          	addi	s1,s1,-1568 # 800099e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800099e1>
            size_shellcode = 0;
80000e14:	00000913          	li	s2,0
    payload->buffer = (char *) malloc(payload->size);
80000e18:	00442503          	lw	a0,4(s0)
80000e1c:	540070ef          	jal	ra,8000835c <malloc>
80000e20:	00a42623          	sw	a0,12(s0)
    if (payload->buffer == NULL) {
80000e24:	12050e63          	beqz	a0,80000f60 <build_payload+0x1f0>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
80000e28:	00090613          	mv	a2,s2
80000e2c:	00048593          	mv	a1,s1
80000e30:	bc9ff0ef          	jal	ra,800009f8 <memcpy>
      (payload->size - size_shellcode - sizeof(long) - sizeof(char));
80000e34:	00442483          	lw	s1,4(s0)
80000e38:	412484b3          	sub	s1,s1,s2
    bytes_to_pad =
80000e3c:	ffb48493          	addi	s1,s1,-5
    memset((payload->buffer + size_shellcode), 'A', bytes_to_pad);
80000e40:	00c42503          	lw	a0,12(s0)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
80000e44:	00048613          	mv	a2,s1
80000e48:	04100593          	li	a1,65
80000e4c:	01250533          	add	a0,a0,s2
80000e50:	bcdff0ef          	jal	ra,80000a1c <memset>
        fprintf(stderr, "bytes to pad: %d\n", bytes_to_pad);
80000e54:	00048593          	mv	a1,s1
80000e58:	8000a537          	lui	a0,0x8000a
80000e5c:	a0c50513          	addi	a0,a0,-1524 # 80009a0c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009a0d>
80000e60:	429010ef          	jal	ra,80002a88 <printk>
        fprintf(stderr, "\noverflow_ptr: %p\n", payload->overflow_ptr);
80000e64:	00842583          	lw	a1,8(s0)
80000e68:	8000a537          	lui	a0,0x8000a
80000e6c:	a2050513          	addi	a0,a0,-1504 # 80009a20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009a21>
80000e70:	419010ef          	jal	ra,80002a88 <printk>
    if (attack.code_ptr != VAR_IOF) {
80000e74:	8000b7b7          	lui	a5,0x8000b
80000e78:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80000e7c:	0087a703          	lw	a4,8(a5)
80000e80:	13c00793          	li	a5,316
80000e84:	02f70863          	beq	a4,a5,80000eb4 <build_payload+0x144>
        memcpy(&(payload->buffer[size_shellcode + bytes_to_pad]),
80000e88:	00c42783          	lw	a5,12(s0)
80000e8c:	00990933          	add	s2,s2,s1
80000e90:	012787b3          	add	a5,a5,s2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
80000e94:	00844583          	lbu	a1,8(s0)
80000e98:	00944603          	lbu	a2,9(s0)
80000e9c:	00a44683          	lbu	a3,10(s0)
80000ea0:	00b44703          	lbu	a4,11(s0)
80000ea4:	00b78023          	sb	a1,0(a5)
80000ea8:	00c780a3          	sb	a2,1(a5)
80000eac:	00d78123          	sb	a3,2(a5)
80000eb0:	00e781a3          	sb	a4,3(a5)
    memset((payload->buffer + payload->size - 1), '\0', 1);
80000eb4:	00c42783          	lw	a5,12(s0)
80000eb8:	00442703          	lw	a4,4(s0)
80000ebc:	fff70713          	addi	a4,a4,-1
80000ec0:	00e787b3          	add	a5,a5,a4
__ssp_bos_icheck3(memset, void *, int)
80000ec4:	00078023          	sb	zero,0(a5)
        fprintf(stderr, "payload: %s\n", payload->buffer);
80000ec8:	00c42583          	lw	a1,12(s0)
80000ecc:	8000a537          	lui	a0,0x8000a
80000ed0:	a3450513          	addi	a0,a0,-1484 # 80009a34 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009a35>
80000ed4:	3b5010ef          	jal	ra,80002a88 <printk>
    return TRUE;
80000ed8:	00100513          	li	a0,1
} /* build_payload */
80000edc:	8000d7b7          	lui	a5,0x8000d
80000ee0:	00c12703          	lw	a4,12(sp)
80000ee4:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80000ee8:	00f747b3          	xor	a5,a4,a5
80000eec:	00000713          	li	a4,0
80000ef0:	08079a63          	bnez	a5,80000f84 <build_payload+0x214>
80000ef4:	01c12083          	lw	ra,28(sp)
80000ef8:	01812403          	lw	s0,24(sp)
80000efc:	01412483          	lw	s1,20(sp)
80000f00:	01012903          	lw	s2,16(sp)
80000f04:	02010113          	addi	sp,sp,32
80000f08:	00008067          	ret
                payload->size = 256 + sizeof(long) + sizeof(char);
80000f0c:	10500713          	li	a4,261
80000f10:	00e52223          	sw	a4,4(a0)
80000f14:	ee5ff06f          	j	80000df8 <build_payload+0x88>
				payload->size += 32 - sizeof(long);
80000f18:	00442783          	lw	a5,4(s0)
80000f1c:	01c78793          	addi	a5,a5,28
80000f20:	00f42223          	sw	a5,4(s0)
				payload->buffer[0] = payload->size & 0xFF;
80000f24:	00c42703          	lw	a4,12(s0)
80000f28:	00f70023          	sb	a5,0(a4)
				payload->buffer[1] = payload->size / 0x100;
80000f2c:	00442783          	lw	a5,4(s0)
80000f30:	0087d793          	srli	a5,a5,0x8
80000f34:	00c42703          	lw	a4,12(s0)
80000f38:	00f700a3          	sb	a5,1(a4)
				payload->buffer[2] = 'A';
80000f3c:	00c42783          	lw	a5,12(s0)
80000f40:	04100713          	li	a4,65
80000f44:	00e78123          	sb	a4,2(a5)
				payload->buffer[3] = '\0';
80000f48:	00c42783          	lw	a5,12(s0)
80000f4c:	000781a3          	sb	zero,3(a5)
				payload->size = 4;
80000f50:	00400793          	li	a5,4
80000f54:	00f42223          	sw	a5,4(s0)
				return TRUE;
80000f58:	00100513          	li	a0,1
80000f5c:	f81ff06f          	j	80000edc <build_payload+0x16c>
            printk("Unable to allocate payload buffer.");
80000f60:	8000a537          	lui	a0,0x8000a
80000f64:	9e850513          	addi	a0,a0,-1560 # 800099e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800099e9>
80000f68:	321010ef          	jal	ra,80002a88 <printk>
        return FALSE;
80000f6c:	00000513          	li	a0,0
80000f70:	f6dff06f          	j	80000edc <build_payload+0x16c>
                return FALSE;
80000f74:	00000513          	li	a0,0
80000f78:	f65ff06f          	j	80000edc <build_payload+0x16c>
                return FALSE;
80000f7c:	00000513          	li	a0,0
80000f80:	f5dff06f          	j	80000edc <build_payload+0x16c>
} /* build_payload */
80000f84:	38d060ef          	jal	ra,80007b10 <_StackCheckHandler>

80000f88 <lj_func>:
80000f88:	00308013          	addi	zero,ra,3
{
80000f8c:	fe010113          	addi	sp,sp,-32
80000f90:	00112e23          	sw	ra,28(sp)
80000f94:	8000d7b7          	lui	a5,0x8000d
80000f98:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80000f9c:	00e12623          	sw	a4,12(sp)
80000fa0:	00000713          	li	a4,0
    longjmp(lj_buf, 1111);
80000fa4:	45700593          	li	a1,1111
80000fa8:	ad1ff0ef          	jal	ra,80000a78 <longjmp>

80000fac <homebrew_memcpy>:
80000fac:	00308013          	addi	zero,ra,3
{
80000fb0:	fe010113          	addi	sp,sp,-32
80000fb4:	00112e23          	sw	ra,28(sp)
80000fb8:	8000d7b7          	lui	a5,0x8000d
80000fbc:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80000fc0:	00e12623          	sw	a4,12(sp)
80000fc4:	00000713          	li	a4,0
    while (length--) {
80000fc8:	0180006f          	j	80000fe0 <homebrew_memcpy+0x34>
        *d++ = *s++;
80000fcc:	0005c703          	lbu	a4,0(a1)
80000fd0:	00e50023          	sb	a4,0(a0)
80000fd4:	00158593          	addi	a1,a1,1
80000fd8:	00150513          	addi	a0,a0,1
    while (length--) {
80000fdc:	00078613          	mv	a2,a5
80000fe0:	fff60793          	addi	a5,a2,-1
80000fe4:	fe0614e3          	bnez	a2,80000fcc <homebrew_memcpy+0x20>
}
80000fe8:	8000d7b7          	lui	a5,0x8000d
80000fec:	00c12703          	lw	a4,12(sp)
80000ff0:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80000ff4:	00f747b3          	xor	a5,a4,a5
80000ff8:	00000713          	li	a4,0
80000ffc:	00079863          	bnez	a5,8000100c <homebrew_memcpy+0x60>
80001000:	01c12083          	lw	ra,28(sp)
80001004:	02010113          	addi	sp,sp,32
80001008:	00008067          	ret
8000100c:	305060ef          	jal	ra,80007b10 <_StackCheckHandler>

80001010 <set_low_buf>:
80001010:	00308013          	addi	zero,ra,3
{
80001014:	be010113          	addi	sp,sp,-1056
80001018:	40112e23          	sw	ra,1052(sp)
8000101c:	40812c23          	sw	s0,1048(sp)
80001020:	40912a23          	sw	s1,1044(sp)
80001024:	00050413          	mv	s0,a0
80001028:	8000d4b7          	lui	s1,0x8000d
8000102c:	2504a783          	lw	a5,592(s1) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80001030:	40f12623          	sw	a5,1036(sp)
80001034:	00000793          	li	a5,0
        fprintf(stderr, "Inside set_low_buf()\n");
80001038:	8000a537          	lui	a0,0x8000a
8000103c:	a4450513          	addi	a0,a0,-1468 # 80009a44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009a45>
80001040:	249010ef          	jal	ra,80002a88 <printk>
    *buf = &low_buf;
80001044:	00c10793          	addi	a5,sp,12
80001048:	00f42023          	sw	a5,0(s0)
}
8000104c:	40c12703          	lw	a4,1036(sp)
80001050:	2504a783          	lw	a5,592(s1)
80001054:	00f747b3          	xor	a5,a4,a5
80001058:	00000713          	li	a4,0
8000105c:	00079c63          	bnez	a5,80001074 <set_low_buf+0x64>
80001060:	41c12083          	lw	ra,1052(sp)
80001064:	41812403          	lw	s0,1048(sp)
80001068:	41412483          	lw	s1,1044(sp)
8000106c:	42010113          	addi	sp,sp,1056
80001070:	00008067          	ret
80001074:	29d060ef          	jal	ra,80007b10 <_StackCheckHandler>

80001078 <iof>:
80001078:	00308013          	addi	zero,ra,3
{
8000107c:	fe010113          	addi	sp,sp,-32
80001080:	00112e23          	sw	ra,28(sp)
80001084:	00812c23          	sw	s0,24(sp)
80001088:	00912a23          	sw	s1,20(sp)
8000108c:	01212823          	sw	s2,16(sp)
80001090:	00058493          	mv	s1,a1
80001094:	8000d937          	lui	s2,0x8000d
80001098:	25092783          	lw	a5,592(s2) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000109c:	00f12623          	sw	a5,12(sp)
800010a0:	00000793          	li	a5,0
    uint8_t len  = strlen(buf);
800010a4:	710070ef          	jal	ra,800087b4 <strlen>
    map      = (char *) malloc(len * sizeof(char));
800010a8:	0ff57413          	zext.b	s0,a0
800010ac:	00040513          	mv	a0,s0
800010b0:	2ac070ef          	jal	ra,8000835c <malloc>
    key     -= (uint32_t) map;
800010b4:	40a484b3          	sub	s1,s1,a0
    key     &= (uint16_t) len - 1;
800010b8:	fff40413          	addi	s0,s0,-1
800010bc:	00947433          	and	s0,s0,s1
    map[key] = 0xa1;
800010c0:	00850533          	add	a0,a0,s0
800010c4:	fa100793          	li	a5,-95
800010c8:	00f50023          	sb	a5,0(a0)
}
800010cc:	00c12703          	lw	a4,12(sp)
800010d0:	25092783          	lw	a5,592(s2)
800010d4:	00f747b3          	xor	a5,a4,a5
800010d8:	00000713          	li	a4,0
800010dc:	00079e63          	bnez	a5,800010f8 <iof+0x80>
800010e0:	01c12083          	lw	ra,28(sp)
800010e4:	01812403          	lw	s0,24(sp)
800010e8:	01412483          	lw	s1,20(sp)
800010ec:	01012903          	lw	s2,16(sp)
800010f0:	02010113          	addi	sp,sp,32
800010f4:	00008067          	ret
800010f8:	219060ef          	jal	ra,80007b10 <_StackCheckHandler>

800010fc <dop_target>:
800010fc:	00308013          	addi	zero,ra,3
{
80001100:	fe010113          	addi	sp,sp,-32
80001104:	00112e23          	sw	ra,28(sp)
80001108:	8000d7b7          	lui	a5,0x8000d
8000110c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80001110:	00e12623          	sw	a4,12(sp)
80001114:	00000713          	li	a4,0
    size_t auth_loc = auth;
80001118:	00b12423          	sw	a1,8(sp)
    if (attack.code_ptr == VAR_IOF) {
8000111c:	8000b7b7          	lui	a5,0x8000b
80001120:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001124:	0087a703          	lw	a4,8(a5)
80001128:	13c00793          	li	a5,316
8000112c:	02f70e63          	beq	a4,a5,80001168 <dop_target+0x6c>
    if (!auth_loc) {
80001130:	00812783          	lw	a5,8(sp)
80001134:	04079063          	bnez	a5,80001174 <dop_target+0x78>
        printf("DOP attack failed\n");
80001138:	8000a537          	lui	a0,0x8000a
8000113c:	a5c50513          	addi	a0,a0,-1444 # 80009a5c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009a5d>
80001140:	149010ef          	jal	ra,80002a88 <printk>
}
80001144:	8000d7b7          	lui	a5,0x8000d
80001148:	00c12703          	lw	a4,12(sp)
8000114c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80001150:	00f747b3          	xor	a5,a4,a5
80001154:	00000713          	li	a4,0
80001158:	02079863          	bnez	a5,80001188 <dop_target+0x8c>
8000115c:	01c12083          	lw	ra,28(sp)
80001160:	02010113          	addi	sp,sp,32
80001164:	00008067          	ret
        iof(buf, &auth_loc);
80001168:	00810593          	addi	a1,sp,8
8000116c:	f0dff0ef          	jal	ra,80001078 <iof>
80001170:	fc1ff06f          	j	80001130 <dop_target+0x34>
        printf("success.\nDOP memory corruption reached.\n");
80001174:	8000a537          	lui	a0,0x8000a
80001178:	a7050513          	addi	a0,a0,-1424 # 80009a70 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009a71>
8000117c:	10d010ef          	jal	ra,80002a88 <printk>
        exit(0);
80001180:	00000513          	li	a0,0
80001184:	198070ef          	jal	ra,8000831c <exit>
}
80001188:	189060ef          	jal	ra,80007b10 <_StackCheckHandler>

8000118c <data_leak>:
8000118c:	00308013          	addi	zero,ra,3
data_leak(char *buf) {
80001190:	fe010113          	addi	sp,sp,-32
80001194:	00112e23          	sw	ra,28(sp)
80001198:	00812c23          	sw	s0,24(sp)
8000119c:	00912a23          	sw	s1,20(sp)
800011a0:	01212823          	sw	s2,16(sp)
800011a4:	00050413          	mv	s0,a0
800011a8:	8000d7b7          	lui	a5,0x8000d
800011ac:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800011b0:	00e12623          	sw	a4,12(sp)
800011b4:	00000713          	li	a4,0
	uint16_t size = buf[0] + (buf[1] * 0x100), i;
800011b8:	00054483          	lbu	s1,0(a0)
800011bc:	00154783          	lbu	a5,1(a0)
800011c0:	00879793          	slli	a5,a5,0x8
800011c4:	00f484b3          	add	s1,s1,a5
800011c8:	01049493          	slli	s1,s1,0x10
800011cc:	0104d493          	srli	s1,s1,0x10
	char *msg = (char *)malloc(size);
800011d0:	00048513          	mv	a0,s1
800011d4:	188070ef          	jal	ra,8000835c <malloc>
800011d8:	00050913          	mv	s2,a0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
800011dc:	00048613          	mv	a2,s1
800011e0:	00240593          	addi	a1,s0,2
800011e4:	815ff0ef          	jal	ra,800009f8 <memcpy>
800011e8:	00000413          	li	s0,0
800011ec:	0100006f          	j	800011fc <data_leak+0x70>
	for (i = 0; i < size; i++) {
800011f0:	00140413          	addi	s0,s0,1
800011f4:	01041413          	slli	s0,s0,0x10
800011f8:	01045413          	srli	s0,s0,0x10
800011fc:	02947263          	bgeu	s0,s1,80001220 <data_leak+0x94>
		if (msg[i] >= 0x20) printf("%c",msg[i]);
80001200:	008907b3          	add	a5,s2,s0
80001204:	0007c583          	lbu	a1,0(a5)
80001208:	01f00793          	li	a5,31
8000120c:	feb7f2e3          	bgeu	a5,a1,800011f0 <data_leak+0x64>
80001210:	8000a537          	lui	a0,0x8000a
80001214:	a9c50513          	addi	a0,a0,-1380 # 80009a9c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009a9d>
80001218:	071010ef          	jal	ra,80002a88 <printk>
8000121c:	fd5ff06f          	j	800011f0 <data_leak+0x64>
	printf("\n");
80001220:	8000a537          	lui	a0,0x8000a
80001224:	a5850513          	addi	a0,a0,-1448 # 80009a58 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009a59>
80001228:	061010ef          	jal	ra,80002a88 <printk>
}			
8000122c:	8000d7b7          	lui	a5,0x8000d
80001230:	00c12703          	lw	a4,12(sp)
80001234:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80001238:	00f747b3          	xor	a5,a4,a5
8000123c:	00000713          	li	a4,0
80001240:	00079e63          	bnez	a5,8000125c <data_leak+0xd0>
80001244:	01c12083          	lw	ra,28(sp)
80001248:	01812403          	lw	s0,24(sp)
8000124c:	01412483          	lw	s1,20(sp)
80001250:	01012903          	lw	s2,16(sp)
80001254:	02010113          	addi	sp,sp,32
80001258:	00008067          	ret
8000125c:	0b5060ef          	jal	ra,80007b10 <_StackCheckHandler>

80001260 <hex_to_string>:
80001260:	00308013          	addi	zero,ra,3
{
80001264:	fe010113          	addi	sp,sp,-32
80001268:	00112e23          	sw	ra,28(sp)
8000126c:	00812c23          	sw	s0,24(sp)
80001270:	00050413          	mv	s0,a0
80001274:	00058693          	mv	a3,a1
80001278:	8000d7b7          	lui	a5,0x8000d
8000127c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80001280:	00e12623          	sw	a4,12(sp)
80001284:	00000713          	li	a4,0
    snprintf(str, 9, "%8x", val);
80001288:	8000a637          	lui	a2,0x8000a
8000128c:	aa060613          	addi	a2,a2,-1376 # 80009aa0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009aa1>
80001290:	00900593          	li	a1,9
80001294:	36c070ef          	jal	ra,80008600 <sniprintf>
    for (int i = 0; i < 9; i++) {
80001298:	00000793          	li	a5,0
8000129c:	0080006f          	j	800012a4 <hex_to_string+0x44>
800012a0:	00178793          	addi	a5,a5,1
800012a4:	00800713          	li	a4,8
800012a8:	02f74063          	blt	a4,a5,800012c8 <hex_to_string+0x68>
        if (str[i] == ' ') str[i] = '0';
800012ac:	00f40733          	add	a4,s0,a5
800012b0:	00074603          	lbu	a2,0(a4)
800012b4:	02000693          	li	a3,32
800012b8:	fed614e3          	bne	a2,a3,800012a0 <hex_to_string+0x40>
800012bc:	03000693          	li	a3,48
800012c0:	00d70023          	sb	a3,0(a4)
800012c4:	fddff06f          	j	800012a0 <hex_to_string+0x40>
}
800012c8:	8000d7b7          	lui	a5,0x8000d
800012cc:	00c12703          	lw	a4,12(sp)
800012d0:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800012d4:	00f747b3          	xor	a5,a4,a5
800012d8:	00000713          	li	a4,0
800012dc:	00079a63          	bnez	a5,800012f0 <hex_to_string+0x90>
800012e0:	01c12083          	lw	ra,28(sp)
800012e4:	01812403          	lw	s0,24(sp)
800012e8:	02010113          	addi	sp,sp,32
800012ec:	00008067          	ret
800012f0:	021060ef          	jal	ra,80007b10 <_StackCheckHandler>

800012f4 <format_instruction>:
800012f4:	00308013          	addi	zero,ra,3
{
800012f8:	fe010113          	addi	sp,sp,-32
800012fc:	00112e23          	sw	ra,28(sp)
80001300:	8000d7b7          	lui	a5,0x8000d
80001304:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80001308:	00e12623          	sw	a4,12(sp)
8000130c:	00000713          	li	a4,0
    insn_bytes[0] = (insn >> 24) & 0xff;
80001310:	0185d793          	srli	a5,a1,0x18
80001314:	00f10423          	sb	a5,8(sp)
    insn_bytes[1] = (insn >> 16) & 0xff;
80001318:	0105d793          	srli	a5,a1,0x10
8000131c:	00f104a3          	sb	a5,9(sp)
    insn_bytes[2] = (insn >> 8) & 0xff;
80001320:	0085d793          	srli	a5,a1,0x8
80001324:	00f10523          	sb	a5,10(sp)
    insn_bytes[3] = insn & 0xff;
80001328:	00b105a3          	sb	a1,11(sp)
    for (int i = 3; i >= 0; i--) {
8000132c:	00300713          	li	a4,3
80001330:	0240006f          	j	80001354 <format_instruction+0x60>
        dest[3 - i] = insn_bytes[i];
80001334:	00300793          	li	a5,3
80001338:	40e787b3          	sub	a5,a5,a4
8000133c:	00f507b3          	add	a5,a0,a5
80001340:	01070693          	addi	a3,a4,16
80001344:	002686b3          	add	a3,a3,sp
80001348:	ff86c683          	lbu	a3,-8(a3)
8000134c:	00d78023          	sb	a3,0(a5)
    for (int i = 3; i >= 0; i--) {
80001350:	fff70713          	addi	a4,a4,-1
80001354:	fe0750e3          	bgez	a4,80001334 <format_instruction+0x40>
}
80001358:	8000d7b7          	lui	a5,0x8000d
8000135c:	00c12703          	lw	a4,12(sp)
80001360:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80001364:	00f747b3          	xor	a5,a4,a5
80001368:	00000713          	li	a4,0
8000136c:	00079863          	bnez	a5,8000137c <format_instruction+0x88>
80001370:	01c12083          	lw	ra,28(sp)
80001374:	02010113          	addi	sp,sp,32
80001378:	00008067          	ret
8000137c:	794060ef          	jal	ra,80007b10 <_StackCheckHandler>

80001380 <build_shellcode>:
80001380:	00308013          	addi	zero,ra,3
{
80001384:	f6010113          	addi	sp,sp,-160
80001388:	08112e23          	sw	ra,156(sp)
8000138c:	08812c23          	sw	s0,152(sp)
80001390:	08912a23          	sw	s1,148(sp)
80001394:	09212823          	sw	s2,144(sp)
80001398:	09312623          	sw	s3,140(sp)
8000139c:	00050493          	mv	s1,a0
800013a0:	8000d7b7          	lui	a5,0x8000d
800013a4:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800013a8:	06e12e23          	sw	a4,124(sp)
800013ac:	00000713          	li	a4,0
    memset(attack_addr, 0, sizeof(attack_addr) );
800013b0:	00012823          	sw	zero,16(sp)
800013b4:	00012a23          	sw	zero,20(sp)
800013b8:	00010c23          	sb	zero,24(sp)
    memset(low_bits,    0, sizeof(low_bits) );
800013bc:	00012223          	sw	zero,4(sp)
    memset(high_bits,   0, sizeof(high_bits) );
800013c0:	00012423          	sw	zero,8(sp)
800013c4:	00011623          	sh	zero,12(sp)
    memset(lui_bin,     0, sizeof(lui_bin) );
800013c8:	02012a23          	sw	zero,52(sp)
800013cc:	02012c23          	sw	zero,56(sp)
800013d0:	02012e23          	sw	zero,60(sp)
800013d4:	04012023          	sw	zero,64(sp)
800013d8:	04012223          	sw	zero,68(sp)
800013dc:	04012423          	sw	zero,72(sp)
800013e0:	04012623          	sw	zero,76(sp)
800013e4:	04012823          	sw	zero,80(sp)
800013e8:	04010a23          	sb	zero,84(sp)
    memset(addi_bin,    0, sizeof(addi_bin) );
800013ec:	04012c23          	sw	zero,88(sp)
800013f0:	04012e23          	sw	zero,92(sp)
800013f4:	06012023          	sw	zero,96(sp)
800013f8:	06012223          	sw	zero,100(sp)
800013fc:	06012423          	sw	zero,104(sp)
80001400:	06012623          	sw	zero,108(sp)
80001404:	06012823          	sw	zero,112(sp)
80001408:	06012a23          	sw	zero,116(sp)
8000140c:	06010c23          	sb	zero,120(sp)
    memset(lui_s,       0, sizeof(lui_s) );
80001410:	00012e23          	sw	zero,28(sp)
80001414:	02012023          	sw	zero,32(sp)
80001418:	02010223          	sb	zero,36(sp)
    memset(addi_s,      0, sizeof(addi_s) );
8000141c:	02012423          	sw	zero,40(sp)
80001420:	02012623          	sw	zero,44(sp)
80001424:	02010823          	sb	zero,48(sp)
	if (((unsigned long)&shellcode_target & 0x00000fff) >= 0x800)
80001428:	800015b7          	lui	a1,0x80001
8000142c:	b5058593          	addi	a1,a1,-1200 # 80000b50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b51>
80001430:	000017b7          	lui	a5,0x1
80001434:	80078793          	addi	a5,a5,-2048 # 800 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE>
80001438:	00f5f7b3          	and	a5,a1,a5
8000143c:	04078a63          	beqz	a5,80001490 <build_shellcode+0x110>
		hex_to_string(attack_addr, &shellcode_target + 0x1000);
80001440:	800025b7          	lui	a1,0x80002
80001444:	b5058593          	addi	a1,a1,-1200 # 80001b50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80001b51>
80001448:	01010513          	addi	a0,sp,16
8000144c:	e15ff0ef          	jal	ra,80001260 <hex_to_string>
    strncpy(low_bits, &attack_addr[5], 3);
80001450:	00300613          	li	a2,3
80001454:	01510593          	addi	a1,sp,21
80001458:	00410513          	addi	a0,sp,4
8000145c:	41c070ef          	jal	ra,80008878 <strncpy>
    strncpy(high_bits, attack_addr, 5);
80001460:	00500613          	li	a2,5
80001464:	01010593          	addi	a1,sp,16
80001468:	00810513          	addi	a0,sp,8
8000146c:	40c070ef          	jal	ra,80008878 <strncpy>
    jalr_val = strtoul(jalr_s, 0, 16);
80001470:	01000613          	li	a2,16
80001474:	00000593          	li	a1,0
80001478:	8000a537          	lui	a0,0x8000a
8000147c:	aa450513          	addi	a0,a0,-1372 # 80009aa4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009aa5>
80001480:	5b4070ef          	jal	ra,80008a34 <strtoul>
80001484:	00050913          	mv	s2,a0
    for (int i = 0; i < 5; i++) {
80001488:	00000413          	li	s0,0
8000148c:	0380006f          	j	800014c4 <build_shellcode+0x144>
		hex_to_string(attack_addr, &shellcode_target);
80001490:	01010513          	addi	a0,sp,16
80001494:	dcdff0ef          	jal	ra,80001260 <hex_to_string>
80001498:	fb9ff06f          	j	80001450 <build_shellcode+0xd0>
        strncat(lui_bin, hex_to_bin(high_bits[i]), 4);
8000149c:	08040793          	addi	a5,s0,128
800014a0:	002787b3          	add	a5,a5,sp
800014a4:	f887c503          	lbu	a0,-120(a5)
800014a8:	f38ff0ef          	jal	ra,80000be0 <hex_to_bin>
800014ac:	00050593          	mv	a1,a0
800014b0:	02100693          	li	a3,33
800014b4:	00400613          	li	a2,4
800014b8:	03410513          	addi	a0,sp,52
800014bc:	35c070ef          	jal	ra,80008818 <__strncat_chk>
    for (int i = 0; i < 5; i++) {
800014c0:	00140413          	addi	s0,s0,1
800014c4:	00400793          	li	a5,4
800014c8:	fc87dae3          	bge	a5,s0,8000149c <build_shellcode+0x11c>
    strncat(lui_bin, "001100110111", 12);
800014cc:	02100613          	li	a2,33
800014d0:	8000a5b7          	lui	a1,0x8000a
800014d4:	ab058593          	addi	a1,a1,-1360 # 80009ab0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009ab1>
800014d8:	03410513          	addi	a0,sp,52
800014dc:	204070ef          	jal	ra,800086e0 <__strcat_chk>
    lui_val = strtoul(lui_bin, 0, 2);
800014e0:	00200613          	li	a2,2
800014e4:	00000593          	li	a1,0
800014e8:	03410513          	addi	a0,sp,52
800014ec:	548070ef          	jal	ra,80008a34 <strtoul>
800014f0:	00050993          	mv	s3,a0
    hex_to_string(lui_s, lui_val);
800014f4:	00050593          	mv	a1,a0
800014f8:	01c10513          	addi	a0,sp,28
800014fc:	d65ff0ef          	jal	ra,80001260 <hex_to_string>
    for (int i = 0; i < 3; i++) {
80001500:	00000413          	li	s0,0
80001504:	02c0006f          	j	80001530 <build_shellcode+0x1b0>
        strncat(addi_bin, hex_to_bin(low_bits[i]), 4);
80001508:	08040793          	addi	a5,s0,128
8000150c:	002787b3          	add	a5,a5,sp
80001510:	f847c503          	lbu	a0,-124(a5)
80001514:	eccff0ef          	jal	ra,80000be0 <hex_to_bin>
80001518:	00050593          	mv	a1,a0
8000151c:	02100693          	li	a3,33
80001520:	00400613          	li	a2,4
80001524:	05810513          	addi	a0,sp,88
80001528:	2f0070ef          	jal	ra,80008818 <__strncat_chk>
    for (int i = 0; i < 3; i++) {
8000152c:	00140413          	addi	s0,s0,1
80001530:	00200793          	li	a5,2
80001534:	fc87dae3          	bge	a5,s0,80001508 <build_shellcode+0x188>
    strncat(addi_bin, "00110000001100010011", 20);
80001538:	02100613          	li	a2,33
8000153c:	8000a5b7          	lui	a1,0x8000a
80001540:	ac058593          	addi	a1,a1,-1344 # 80009ac0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009ac1>
80001544:	05810513          	addi	a0,sp,88
80001548:	198070ef          	jal	ra,800086e0 <__strcat_chk>
    addi_val = strtoul(addi_bin, 0, 2);
8000154c:	00200613          	li	a2,2
80001550:	00000593          	li	a1,0
80001554:	05810513          	addi	a0,sp,88
80001558:	4dc070ef          	jal	ra,80008a34 <strtoul>
8000155c:	00050413          	mv	s0,a0
    hex_to_string(addi_s, addi_val);
80001560:	00050593          	mv	a1,a0
80001564:	02810513          	addi	a0,sp,40
80001568:	cf9ff0ef          	jal	ra,80001260 <hex_to_string>
    format_instruction(shellcode, lui_val);
8000156c:	00098593          	mv	a1,s3
80001570:	00048513          	mv	a0,s1
80001574:	d81ff0ef          	jal	ra,800012f4 <format_instruction>
    format_instruction(shellcode + 4, addi_val);
80001578:	00040593          	mv	a1,s0
8000157c:	00448513          	addi	a0,s1,4
80001580:	d75ff0ef          	jal	ra,800012f4 <format_instruction>
    format_instruction(shellcode + 8, jalr_val);
80001584:	00090593          	mv	a1,s2
80001588:	00848513          	addi	a0,s1,8
8000158c:	d69ff0ef          	jal	ra,800012f4 <format_instruction>
    hex_to_string(lui_s, lui_val);
80001590:	00098593          	mv	a1,s3
80001594:	01c10513          	addi	a0,sp,28
80001598:	cc9ff0ef          	jal	ra,80001260 <hex_to_string>
    hex_to_string(addi_s, addi_val);
8000159c:	00040593          	mv	a1,s0
800015a0:	02810513          	addi	a0,sp,40
800015a4:	cbdff0ef          	jal	ra,80001260 <hex_to_string>
        printf("----------------\nShellcode instructions:\n");
800015a8:	8000a537          	lui	a0,0x8000a
800015ac:	ad850513          	addi	a0,a0,-1320 # 80009ad8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009ad9>
800015b0:	4d8010ef          	jal	ra,80002a88 <printk>
        printf("%s0x%-20s%14s\n", "lui t1,  ", high_bits, lui_s);
800015b4:	01c10693          	addi	a3,sp,28
800015b8:	00810613          	addi	a2,sp,8
800015bc:	8000a5b7          	lui	a1,0x8000a
800015c0:	b0458593          	addi	a1,a1,-1276 # 80009b04 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009b05>
800015c4:	8000a537          	lui	a0,0x8000a
800015c8:	b1050513          	addi	a0,a0,-1264 # 80009b10 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009b11>
800015cc:	4bc010ef          	jal	ra,80002a88 <printk>
        printf("%s0x%-20s%10s\n", "addi t1, t1, ", low_bits, addi_s);
800015d0:	02810693          	addi	a3,sp,40
800015d4:	00410613          	addi	a2,sp,4
800015d8:	8000a5b7          	lui	a1,0x8000a
800015dc:	b2058593          	addi	a1,a1,-1248 # 80009b20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009b21>
800015e0:	8000a537          	lui	a0,0x8000a
800015e4:	b3050513          	addi	a0,a0,-1232 # 80009b30 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009b31>
800015e8:	4a0010ef          	jal	ra,80002a88 <printk>
        printf("%s%38s\n----------------\n", "jalr t1", jalr_s);
800015ec:	8000a637          	lui	a2,0x8000a
800015f0:	aa460613          	addi	a2,a2,-1372 # 80009aa4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009aa5>
800015f4:	8000a5b7          	lui	a1,0x8000a
800015f8:	b4058593          	addi	a1,a1,-1216 # 80009b40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009b41>
800015fc:	8000a537          	lui	a0,0x8000a
80001600:	b4850513          	addi	a0,a0,-1208 # 80009b48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009b49>
80001604:	484010ef          	jal	ra,80002a88 <printk>
} /* build_shellcode */
80001608:	8000d7b7          	lui	a5,0x8000d
8000160c:	07c12703          	lw	a4,124(sp)
80001610:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80001614:	00f747b3          	xor	a5,a4,a5
80001618:	00000713          	li	a4,0
8000161c:	02079063          	bnez	a5,8000163c <build_shellcode+0x2bc>
80001620:	09c12083          	lw	ra,156(sp)
80001624:	09812403          	lw	s0,152(sp)
80001628:	09412483          	lw	s1,148(sp)
8000162c:	09012903          	lw	s2,144(sp)
80001630:	08c12983          	lw	s3,140(sp)
80001634:	0a010113          	addi	sp,sp,160
80001638:	00008067          	ret
8000163c:	4d4060ef          	jal	ra,80007b10 <_StackCheckHandler>

80001640 <perform_attack>:
80001640:	00308013          	addi	zero,ra,3
{
80001644:	90010113          	addi	sp,sp,-1792
80001648:	6e112e23          	sw	ra,1788(sp)
8000164c:	6e812c23          	sw	s0,1784(sp)
80001650:	6e912a23          	sw	s1,1780(sp)
80001654:	6f212823          	sw	s2,1776(sp)
80001658:	6f312623          	sw	s3,1772(sp)
8000165c:	6f412423          	sw	s4,1768(sp)
80001660:	70010413          	addi	s0,sp,1792
80001664:	92a42623          	sw	a0,-1748(s0)
80001668:	92b42423          	sw	a1,-1752(s0)
8000166c:	8000d7b7          	lui	a5,0x8000d
80001670:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80001674:	fce42e23          	sw	a4,-36(s0)
80001678:	00000713          	li	a4,0
	strcpy(stack_secret, data_secret);
8000167c:	02000613          	li	a2,32
80001680:	8000d5b7          	lui	a1,0x8000d
80001684:	58858593          	addi	a1,a1,1416 # 8000d588 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d589>
80001688:	bbc40513          	addi	a0,s0,-1092
8000168c:	0c4070ef          	jal	ra,80008750 <__strcpy_chk>
    stack_struct.func_ptr = &dummy_function;
80001690:	800014b7          	lui	s1,0x80001
80001694:	af848493          	addi	s1,s1,-1288 # 80000af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000af9>
80001698:	a6942a23          	sw	s1,-1420(s0)
      (struct attackme *) malloc(sizeof(struct attackme));
8000169c:	10400513          	li	a0,260
800016a0:	4bd060ef          	jal	ra,8000835c <malloc>
800016a4:	90a42e23          	sw	a0,-1764(s0)
    heap_struct->func_ptr = dummy_function;
800016a8:	10952023          	sw	s1,256(a0)
    char * heap_buffer1 = (char *) malloc(256 + sizeof(long));
800016ac:	10400513          	li	a0,260
800016b0:	4ad060ef          	jal	ra,8000835c <malloc>
800016b4:	00050493          	mv	s1,a0
    char * heap_buffer2 = (char *) malloc(256 + sizeof(long));
800016b8:	10400513          	li	a0,260
800016bc:	4a1060ef          	jal	ra,8000835c <malloc>
800016c0:	00050913          	mv	s2,a0
    char * heap_buffer3 = (char *) malloc(256 + sizeof(long));
800016c4:	10400513          	li	a0,260
800016c8:	495060ef          	jal	ra,8000835c <malloc>
800016cc:	00050a13          	mv	s4,a0
    int * heap_flag = (int *) malloc(sizeof(int *));
800016d0:	00400513          	li	a0,4
800016d4:	489060ef          	jal	ra,8000835c <malloc>
    int(**heap_func_ptr)(const char *) = 0;
800016d8:	92042223          	sw	zero,-1756(s0)
    if (heap_buffer1 == NULL || heap_buffer2 == NULL) {
800016dc:	08048863          	beqz	s1,8000176c <perform_attack+0x12c>
800016e0:	00050993          	mv	s3,a0
800016e4:	08090463          	beqz	s2,8000176c <perform_attack+0x12c>
    bss_buffer[0]  = 'a';
800016e8:	8000b7b7          	lui	a5,0x8000b
800016ec:	06100713          	li	a4,97
800016f0:	cce78e23          	sb	a4,-804(a5) # 8000acdc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000acdd>
  	strcpy(bss_secret, data_secret);
800016f4:	02000613          	li	a2,32
800016f8:	8000d5b7          	lui	a1,0x8000d
800016fc:	58858593          	addi	a1,a1,1416 # 8000d588 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d589>
80001700:	8000b537          	lui	a0,0x8000b
80001704:	cbc50513          	addi	a0,a0,-836 # 8000acbc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000acbd>
80001708:	048070ef          	jal	ra,80008750 <__strcpy_chk>
    build_shellcode(shellcode_nonop);
8000170c:	8000b537          	lui	a0,0x8000b
80001710:	df050513          	addi	a0,a0,-528 # 8000adf0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000adf1>
80001714:	c6dff0ef          	jal	ra,80001380 <build_shellcode>
    switch (attack.location) {
80001718:	8000b7b7          	lui	a5,0x8000b
8000171c:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001720:	00c7a783          	lw	a5,12(a5)
80001724:	19200713          	li	a4,402
80001728:	26e78663          	beq	a5,a4,80001994 <perform_attack+0x354>
8000172c:	04f76a63          	bltu	a4,a5,80001780 <perform_attack+0x140>
80001730:	19000713          	li	a4,400
80001734:	0ae78263          	beq	a5,a4,800017d8 <perform_attack+0x198>
80001738:	19100713          	li	a4,401
8000173c:	0ce79e63          	bne	a5,a4,80001818 <perform_attack+0x1d8>
            if (attack.code_ptr == STRUCT_FUNC_PTR_HEAP &&
80001740:	8000b7b7          	lui	a5,0x8000b
80001744:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001748:	0087a783          	lw	a5,8(a5)
8000174c:	13800713          	li	a4,312
80001750:	16e78863          	beq	a5,a4,800018c0 <perform_attack+0x280>
            if (((unsigned long) heap_buffer1 < (unsigned long) heap_buffer2) &&
80001754:	1924e463          	bltu	s1,s2,800018dc <perform_attack+0x29c>
                    fprintf(stderr,
80001758:	8000a537          	lui	a0,0x8000a
8000175c:	b8450513          	addi	a0,a0,-1148 # 80009b84 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009b85>
80001760:	328010ef          	jal	ra,80002a88 <printk>
                exit(1);
80001764:	00100513          	li	a0,1
80001768:	3b5060ef          	jal	ra,8000831c <exit>
        printk("Unable to allocate heap memory.");
8000176c:	8000a537          	lui	a0,0x8000a
80001770:	b6450513          	addi	a0,a0,-1180 # 80009b64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009b65>
80001774:	314010ef          	jal	ra,80002a88 <printk>
        exit(1);
80001778:	00100513          	li	a0,1
8000177c:	3a1060ef          	jal	ra,8000831c <exit>
    switch (attack.location) {
80001780:	19300713          	li	a4,403
80001784:	08e79a63          	bne	a5,a4,80001818 <perform_attack+0x1d8>
            if (attack.code_ptr == STRUCT_FUNC_PTR_DATA) {
80001788:	8000b7b7          	lui	a5,0x8000b
8000178c:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001790:	0087a783          	lw	a5,8(a5)
80001794:	13900713          	li	a4,313
80001798:	1ae78663          	beq	a5,a4,80001944 <perform_attack+0x304>
            if ((attack.code_ptr == FUNC_PTR_DATA ||
8000179c:	13100713          	li	a4,305
800017a0:	1ae78a63          	beq	a5,a4,80001954 <perform_attack+0x314>
800017a4:	13b00713          	li	a4,315
800017a8:	1ae78663          	beq	a5,a4,80001954 <perform_attack+0x314>
                buffer = data_buffer1;
800017ac:	8000d7b7          	lui	a5,0x8000d
800017b0:	5a878793          	addi	a5,a5,1448 # 8000d5a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d5a9>
800017b4:	94f42423          	sw	a5,-1720(s0)
            if (attack.inject_param == DATA_ONLY) {
800017b8:	8000b7b7          	lui	a5,0x8000b
800017bc:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
800017c0:	0047a703          	lw	a4,4(a5)
800017c4:	0cb00793          	li	a5,203
800017c8:	1af70663          	beq	a4,a5,80001974 <perform_attack+0x334>
            heap_jmp_buffer = heap_buffer1;
800017cc:	90942c23          	sw	s1,-1768(s0)
            heap_func_ptr   = (void *) heap_buffer1;
800017d0:	92942223          	sw	s1,-1756(s0)
800017d4:	0440006f          	j	80001818 <perform_attack+0x1d8>
            if (attack.code_ptr == STRUCT_FUNC_PTR_STACK &&
800017d8:	8000b7b7          	lui	a5,0x8000b
800017dc:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
800017e0:	0087a783          	lw	a5,8(a5)
800017e4:	13700713          	li	a4,311
800017e8:	08e78663          	beq	a5,a4,80001874 <perform_attack+0x234>
            } else if (attack.code_ptr == FUNC_PTR_STACK_PARAM &&
800017ec:	12e00713          	li	a4,302
800017f0:	0ae78063          	beq	a5,a4,80001890 <perform_attack+0x250>
                buffer = stack_buffer;
800017f4:	bdc40793          	addi	a5,s0,-1060
800017f8:	94f42423          	sw	a5,-1720(s0)
            if (attack.inject_param == DATA_ONLY) {
800017fc:	8000b7b7          	lui	a5,0x8000b
80001800:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001804:	0047a703          	lw	a4,4(a5)
80001808:	0cb00793          	li	a5,203
8000180c:	0af70063          	beq	a4,a5,800018ac <perform_attack+0x26c>
            heap_jmp_buffer = (void *) heap_buffer1;
80001810:	90942c23          	sw	s1,-1768(s0)
            heap_func_ptr   = (void *) heap_buffer1;
80001814:	92942223          	sw	s1,-1756(s0)
    if (heap_func_ptr)
80001818:	92442703          	lw	a4,-1756(s0)
8000181c:	00070863          	beqz	a4,8000182c <perform_attack+0x1ec>
        *heap_func_ptr = dummy_function;
80001820:	800017b7          	lui	a5,0x80001
80001824:	af878793          	addi	a5,a5,-1288 # 80000af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000af9>
80001828:	00f72023          	sw	a5,0(a4)
    switch (attack.technique) {
8000182c:	8000b7b7          	lui	a5,0x8000b
80001830:	ddc7a783          	lw	a5,-548(a5) # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001834:	06400713          	li	a4,100
80001838:	1ee78863          	beq	a5,a4,80001a28 <perform_attack+0x3e8>
8000183c:	06500713          	li	a4,101
80001840:	36e78463          	beq	a5,a4,80001ba8 <perform_attack+0x568>
    switch (attack.code_ptr) {
80001844:	8000b7b7          	lui	a5,0x8000b
80001848:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
8000184c:	0087a783          	lw	a5,8(a5)
80001850:	ece78793          	addi	a5,a5,-306
80001854:	00400713          	li	a4,4
80001858:	44f76a63          	bltu	a4,a5,80001cac <perform_attack+0x66c>
8000185c:	00279793          	slli	a5,a5,0x2
80001860:	8000a737          	lui	a4,0x8000a
80001864:	d3870713          	addi	a4,a4,-712 # 80009d38 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d39>
80001868:	00e787b3          	add	a5,a5,a4
8000186c:	0007a783          	lw	a5,0(a5)
80001870:	00078067          	jr	a5
              attack.technique == DIRECT)
80001874:	8000b737          	lui	a4,0x8000b
80001878:	ddc72683          	lw	a3,-548(a4) # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
            if (attack.code_ptr == STRUCT_FUNC_PTR_STACK &&
8000187c:	06400713          	li	a4,100
80001880:	f6e696e3          	bne	a3,a4,800017ec <perform_attack+0x1ac>
                buffer = stack_struct.buffer;
80001884:	97440793          	addi	a5,s0,-1676
80001888:	94f42423          	sw	a5,-1720(s0)
8000188c:	f71ff06f          	j	800017fc <perform_attack+0x1bc>
              attack.technique == DIRECT)
80001890:	8000b7b7          	lui	a5,0x8000b
80001894:	ddc7a703          	lw	a4,-548(a5) # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
            } else if (attack.code_ptr == FUNC_PTR_STACK_PARAM &&
80001898:	06400793          	li	a5,100
8000189c:	f4f71ce3          	bne	a4,a5,800017f4 <perform_attack+0x1b4>
                set_low_buf(&buffer);
800018a0:	94840513          	addi	a0,s0,-1720
800018a4:	f6cff0ef          	jal	ra,80001010 <set_low_buf>
800018a8:	f55ff06f          	j	800017fc <perform_attack+0x1bc>
                stack_mem_ptr = &stack_flag;
800018ac:	94440793          	addi	a5,s0,-1724
800018b0:	92f42e23          	sw	a5,-1732(s0)
            heap_jmp_buffer = (void *) heap_buffer1;
800018b4:	90942c23          	sw	s1,-1768(s0)
            heap_func_ptr   = (void *) heap_buffer1;
800018b8:	92942223          	sw	s1,-1756(s0)
800018bc:	f5dff06f          	j	80001818 <perform_attack+0x1d8>
              attack.technique == DIRECT)
800018c0:	8000b737          	lui	a4,0x8000b
800018c4:	ddc72683          	lw	a3,-548(a4) # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
            if (attack.code_ptr == STRUCT_FUNC_PTR_HEAP &&
800018c8:	06400713          	li	a4,100
800018cc:	e8e694e3          	bne	a3,a4,80001754 <perform_attack+0x114>
                buffer = heap_struct->buffer;
800018d0:	91c42783          	lw	a5,-1764(s0)
800018d4:	94f42423          	sw	a5,-1720(s0)
                break;
800018d8:	f41ff06f          	j	80001818 <perform_attack+0x1d8>
            if (((unsigned long) heap_buffer1 < (unsigned long) heap_buffer2) &&
800018dc:	e7497ee3          	bgeu	s2,s4,80001758 <perform_attack+0x118>
                buffer = heap_buffer1;
800018e0:	94942423          	sw	s1,-1720(s0)
                heap_mem_ptr_aux = (long *) heap_buffer2;
800018e4:	91242823          	sw	s2,-1776(s0)
                heap_mem_ptr     = (long *) heap_buffer3;
800018e8:	91442623          	sw	s4,-1780(s0)
				if (attack.code_ptr == VAR_LEAK) {
800018ec:	13d00713          	li	a4,317
800018f0:	02e78e63          	beq	a5,a4,8000192c <perform_attack+0x2ec>
800018f4:	00000913          	li	s2,0
                heap_func_ptr = malloc(sizeof(void *));
800018f8:	00400513          	li	a0,4
800018fc:	261060ef          	jal	ra,8000835c <malloc>
80001900:	92a42223          	sw	a0,-1756(s0)
                heap_jmp_buffer = (int *) malloc(sizeof(jmp_buf));
80001904:	13000513          	li	a0,304
80001908:	255060ef          	jal	ra,8000835c <malloc>
            if (attack.inject_param == DATA_ONLY) {
8000190c:	8000b737          	lui	a4,0x8000b
80001910:	ddc70713          	addi	a4,a4,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001914:	00472683          	lw	a3,4(a4)
80001918:	0cb00713          	li	a4,203
8000191c:	0ee68e63          	beq	a3,a4,80001a18 <perform_attack+0x3d8>
                heap_jmp_buffer = (int *) malloc(sizeof(jmp_buf));
80001920:	90a42c23          	sw	a0,-1768(s0)
            if (attack.inject_param == DATA_ONLY) {
80001924:	93242023          	sw	s2,-1760(s0)
80001928:	ef1ff06f          	j	80001818 <perform_attack+0x1d8>
					strcpy(heap_secret, data_secret);
8000192c:	10400613          	li	a2,260
80001930:	8000d5b7          	lui	a1,0x8000d
80001934:	58858593          	addi	a1,a1,1416 # 8000d588 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d589>
80001938:	00090513          	mv	a0,s2
8000193c:	615060ef          	jal	ra,80008750 <__strcpy_chk>
80001940:	fb9ff06f          	j	800018f8 <perform_attack+0x2b8>
                buffer = data_struct.buffer;
80001944:	8000d7b7          	lui	a5,0x8000d
80001948:	6a878793          	addi	a5,a5,1704 # 8000d6a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d6a9>
8000194c:	94f42423          	sw	a5,-1720(s0)
                break;
80001950:	ec9ff06f          	j	80001818 <perform_attack+0x1d8>
              attack.technique == DIRECT)
80001954:	8000b7b7          	lui	a5,0x8000b
80001958:	ddc7a703          	lw	a4,-548(a5) # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
              attack.code_ptr == VAR_BOF) &&
8000195c:	06400793          	li	a5,100
80001960:	e4f716e3          	bne	a4,a5,800017ac <perform_attack+0x16c>
                buffer = data_buffer2;
80001964:	8000e7b7          	lui	a5,0x8000e
80001968:	8f078793          	addi	a5,a5,-1808 # 8000d8f0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d8f1>
8000196c:	94f42423          	sw	a5,-1720(s0)
80001970:	e49ff06f          	j	800017b8 <perform_attack+0x178>
                data_flag     = 0;
80001974:	8000e7b7          	lui	a5,0x8000e
80001978:	8e07a623          	sw	zero,-1812(a5) # 8000d8ec <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d8ed>
                *data_mem_ptr = &data_flag;
8000197c:	8ec78793          	addi	a5,a5,-1812
80001980:	8000d737          	lui	a4,0x8000d
80001984:	38f72423          	sw	a5,904(a4) # 8000d388 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d389>
            heap_jmp_buffer = heap_buffer1;
80001988:	90942c23          	sw	s1,-1768(s0)
            heap_func_ptr   = (void *) heap_buffer1;
8000198c:	92942223          	sw	s1,-1756(s0)
80001990:	e89ff06f          	j	80001818 <perform_attack+0x1d8>
            if (attack.code_ptr == STRUCT_FUNC_PTR_BSS) {
80001994:	8000b7b7          	lui	a5,0x8000b
80001998:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
8000199c:	0087a703          	lw	a4,8(a5)
800019a0:	13a00793          	li	a5,314
800019a4:	04f70663          	beq	a4,a5,800019f0 <perform_attack+0x3b0>
            buffer = bss_buffer;
800019a8:	8000b7b7          	lui	a5,0x8000b
800019ac:	cdc78793          	addi	a5,a5,-804 # 8000acdc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000acdd>
800019b0:	94f42423          	sw	a5,-1720(s0)
            bss_flag = 0;
800019b4:	8000b7b7          	lui	a5,0x8000b
800019b8:	9207ae23          	sw	zero,-1732(a5) # 8000a93c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a93d>
            bss_mem_ptr_aux = &dummy_function;
800019bc:	800017b7          	lui	a5,0x80001
800019c0:	af878793          	addi	a5,a5,-1288 # 80000af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000af9>
800019c4:	8000b737          	lui	a4,0x8000b
800019c8:	92f72c23          	sw	a5,-1736(a4) # 8000a938 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a939>
            bss_mem_ptr     = &dummy_function;
800019cc:	8000b737          	lui	a4,0x8000b
800019d0:	92f72a23          	sw	a5,-1740(a4) # 8000a934 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a935>
            if (attack.inject_param == DATA_ONLY) {
800019d4:	8000b7b7          	lui	a5,0x8000b
800019d8:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
800019dc:	0047a703          	lw	a4,4(a5)
800019e0:	0cb00793          	li	a5,203
800019e4:	00f70e63          	beq	a4,a5,80001a00 <perform_attack+0x3c0>
            heap_func_ptr = (void *) heap_buffer1;
800019e8:	92942223          	sw	s1,-1756(s0)
800019ec:	e2dff06f          	j	80001818 <perform_attack+0x1d8>
                buffer = bss_struct.buffer;
800019f0:	8000b7b7          	lui	a5,0x8000b
800019f4:	bb878793          	addi	a5,a5,-1096 # 8000abb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000abb9>
800019f8:	94f42423          	sw	a5,-1720(s0)
                break;
800019fc:	e1dff06f          	j	80001818 <perform_attack+0x1d8>
                bss_mem_ptr = &bss_flag;
80001a00:	8000b737          	lui	a4,0x8000b
80001a04:	8000b7b7          	lui	a5,0x8000b
80001a08:	93c78793          	addi	a5,a5,-1732 # 8000a93c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a93d>
80001a0c:	92f72a23          	sw	a5,-1740(a4) # 8000a934 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a935>
            heap_func_ptr = (void *) heap_buffer1;
80001a10:	92942223          	sw	s1,-1756(s0)
80001a14:	e05ff06f          	j	80001818 <perform_attack+0x1d8>
                heap_jmp_buffer = (int *) malloc(sizeof(jmp_buf));
80001a18:	90a42c23          	sw	a0,-1768(s0)
80001a1c:	93242023          	sw	s2,-1760(s0)
                heap_mem_ptr = heap_flag;
80001a20:	91342623          	sw	s3,-1780(s0)
80001a24:	df5ff06f          	j	80001818 <perform_attack+0x1d8>
            switch (attack.code_ptr) {
80001a28:	8000b7b7          	lui	a5,0x8000b
80001a2c:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001a30:	0087a783          	lw	a5,8(a5)
80001a34:	ed478793          	addi	a5,a5,-300
80001a38:	01100713          	li	a4,17
80001a3c:	e0f764e3          	bltu	a4,a5,80001844 <perform_attack+0x204>
80001a40:	00279793          	slli	a5,a5,0x2
80001a44:	8000a737          	lui	a4,0x8000a
80001a48:	d4c70713          	addi	a4,a4,-692 # 80009d4c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d4d>
80001a4c:	00e787b3          	add	a5,a5,a4
80001a50:	0007a783          	lw	a5,0(a5)
80001a54:	00078067          	jr	a5
                    target_addr = RET_ADDR_PTR;
80001a58:	ffc40793          	addi	a5,s0,-4
80001a5c:	92f42023          	sw	a5,-1760(s0)
                    break;
80001a60:	de5ff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = &stack_func_ptr_param;
80001a64:	92c40793          	addi	a5,s0,-1748
80001a68:	92f42023          	sw	a5,-1760(s0)
                    break;
80001a6c:	dd9ff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = heap_func_ptr;
80001a70:	92442783          	lw	a5,-1756(s0)
80001a74:	92f42023          	sw	a5,-1760(s0)
                    break;
80001a78:	dcdff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = &bss_func_ptr;
80001a7c:	8000b7b7          	lui	a5,0x8000b
80001a80:	93078793          	addi	a5,a5,-1744 # 8000a930 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a931>
80001a84:	92f42023          	sw	a5,-1760(s0)
                    break;
80001a88:	dbdff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = &data_func_ptr;
80001a8c:	8000e7b7          	lui	a5,0x8000e
80001a90:	8e878793          	addi	a5,a5,-1816 # 8000d8e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d8e9>
80001a94:	92f42023          	sw	a5,-1760(s0)
                    break;
80001a98:	dadff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = stack_jmp_buffer;
80001a9c:	a7840793          	addi	a5,s0,-1416
80001aa0:	92f42023          	sw	a5,-1760(s0)
                    break;
80001aa4:	da1ff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = stack_jmp_buffer_param;
80001aa8:	92842783          	lw	a5,-1752(s0)
80001aac:	92f42023          	sw	a5,-1760(s0)
                    break;
80001ab0:	d95ff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = (void *) heap_jmp_buffer;
80001ab4:	91842783          	lw	a5,-1768(s0)
80001ab8:	92f42023          	sw	a5,-1760(s0)
                    break;
80001abc:	d89ff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = data_jmp_buffer;
80001ac0:	8000d7b7          	lui	a5,0x8000d
80001ac4:	25878793          	addi	a5,a5,600 # 8000d258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d259>
80001ac8:	92f42023          	sw	a5,-1760(s0)
                    break;
80001acc:	d79ff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = bss_jmp_buffer;
80001ad0:	8000b7b7          	lui	a5,0x8000b
80001ad4:	97878793          	addi	a5,a5,-1672 # 8000a978 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a979>
80001ad8:	92f42023          	sw	a5,-1760(s0)
                    break;
80001adc:	d69ff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = &stack_struct.func_ptr;
80001ae0:	a7440793          	addi	a5,s0,-1420
80001ae4:	92f42023          	sw	a5,-1760(s0)
                    break;
80001ae8:	d5dff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = (void *) heap_struct + 256;
80001aec:	91c42783          	lw	a5,-1764(s0)
80001af0:	10078793          	addi	a5,a5,256
80001af4:	92f42023          	sw	a5,-1760(s0)
                    break;
80001af8:	d4dff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = &data_struct.func_ptr;
80001afc:	8000d7b7          	lui	a5,0x8000d
80001b00:	7a878793          	addi	a5,a5,1960 # 8000d7a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d7a9>
80001b04:	92f42023          	sw	a5,-1760(s0)
                    break;
80001b08:	d3dff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = &bss_struct.func_ptr;
80001b0c:	8000b7b7          	lui	a5,0x8000b
80001b10:	cb878793          	addi	a5,a5,-840 # 8000acb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000acb9>
80001b14:	92f42023          	sw	a5,-1760(s0)
                    break;
80001b18:	d2dff06f          	j	80001844 <perform_attack+0x204>
                    switch (attack.location) {
80001b1c:	8000b7b7          	lui	a5,0x8000b
80001b20:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001b24:	00c7a783          	lw	a5,12(a5)
80001b28:	19200713          	li	a4,402
80001b2c:	0ee78463          	beq	a5,a4,80001c14 <perform_attack+0x5d4>
80001b30:	00f76e63          	bltu	a4,a5,80001b4c <perform_attack+0x50c>
80001b34:	19000713          	li	a4,400
80001b38:	0ee78663          	beq	a5,a4,80001c24 <perform_attack+0x5e4>
80001b3c:	19100713          	li	a4,401
80001b40:	d0e792e3          	bne	a5,a4,80001844 <perform_attack+0x204>
                            target_addr = heap_flag;
80001b44:	93342023          	sw	s3,-1760(s0)
80001b48:	cfdff06f          	j	80001844 <perform_attack+0x204>
80001b4c:	19300713          	li	a4,403
80001b50:	cee79ae3          	bne	a5,a4,80001844 <perform_attack+0x204>
                            target_addr = &data_flag;
80001b54:	8000e7b7          	lui	a5,0x8000e
80001b58:	8ec78793          	addi	a5,a5,-1812 # 8000d8ec <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d8ed>
80001b5c:	92f42023          	sw	a5,-1760(s0)
80001b60:	ce5ff06f          	j	80001844 <perform_attack+0x204>
                    switch (attack.location) {
80001b64:	8000b7b7          	lui	a5,0x8000b
80001b68:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001b6c:	00c7a783          	lw	a5,12(a5)
80001b70:	19200713          	li	a4,402
80001b74:	0ae78e63          	beq	a5,a4,80001c30 <perform_attack+0x5f0>
80001b78:	00f76c63          	bltu	a4,a5,80001b90 <perform_attack+0x550>
80001b7c:	19000713          	li	a4,400
80001b80:	cce792e3          	bne	a5,a4,80001844 <perform_attack+0x204>
                            target_addr = &stack_secret;
80001b84:	bbc40793          	addi	a5,s0,-1092
80001b88:	92f42023          	sw	a5,-1760(s0)
80001b8c:	cb9ff06f          	j	80001844 <perform_attack+0x204>
80001b90:	19300713          	li	a4,403
80001b94:	cae798e3          	bne	a5,a4,80001844 <perform_attack+0x204>
                            target_addr = &data_secret;
80001b98:	8000d7b7          	lui	a5,0x8000d
80001b9c:	58878793          	addi	a5,a5,1416 # 8000d588 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d589>
80001ba0:	92f42023          	sw	a5,-1760(s0)
80001ba4:	ca1ff06f          	j	80001844 <perform_attack+0x204>
            switch (attack.location) {
80001ba8:	8000b7b7          	lui	a5,0x8000b
80001bac:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001bb0:	00c7a783          	lw	a5,12(a5)
80001bb4:	19200713          	li	a4,402
80001bb8:	08e78463          	beq	a5,a4,80001c40 <perform_attack+0x600>
80001bbc:	02f76463          	bltu	a4,a5,80001be4 <perform_attack+0x5a4>
80001bc0:	19000713          	li	a4,400
80001bc4:	08e78c63          	beq	a5,a4,80001c5c <perform_attack+0x61c>
80001bc8:	19100713          	li	a4,401
80001bcc:	c6e79ce3          	bne	a5,a4,80001844 <perform_attack+0x204>
                    target_addr_aux = heap_mem_ptr_aux;
80001bd0:	91042783          	lw	a5,-1776(s0)
80001bd4:	90f42a23          	sw	a5,-1772(s0)
                    target_addr     = heap_mem_ptr;
80001bd8:	90c42783          	lw	a5,-1780(s0)
80001bdc:	92f42023          	sw	a5,-1760(s0)
                    break;
80001be0:	c65ff06f          	j	80001844 <perform_attack+0x204>
80001be4:	19300713          	li	a4,403
80001be8:	c4e79ee3          	bne	a5,a4,80001844 <perform_attack+0x204>
                    target_addr_aux = &data_mem_ptr_aux;
80001bec:	8000d7b7          	lui	a5,0x8000d
80001bf0:	48878793          	addi	a5,a5,1160 # 8000d488 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d489>
80001bf4:	90f42a23          	sw	a5,-1772(s0)
                    target_addr     = &data_mem_ptr;
80001bf8:	8000d7b7          	lui	a5,0x8000d
80001bfc:	38878793          	addi	a5,a5,904 # 8000d388 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d389>
80001c00:	92f42023          	sw	a5,-1760(s0)
80001c04:	c41ff06f          	j	80001844 <perform_attack+0x204>
                    target_addr = &stack_func_ptr;
80001c08:	93840793          	addi	a5,s0,-1736
80001c0c:	92f42023          	sw	a5,-1760(s0)
80001c10:	c35ff06f          	j	80001844 <perform_attack+0x204>
                            target_addr = &bss_flag;
80001c14:	8000b7b7          	lui	a5,0x8000b
80001c18:	93c78793          	addi	a5,a5,-1732 # 8000a93c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a93d>
80001c1c:	92f42023          	sw	a5,-1760(s0)
80001c20:	c25ff06f          	j	80001844 <perform_attack+0x204>
                            target_addr = &stack_flag;
80001c24:	94440793          	addi	a5,s0,-1724
80001c28:	92f42023          	sw	a5,-1760(s0)
80001c2c:	c19ff06f          	j	80001844 <perform_attack+0x204>
                            target_addr = &bss_secret;
80001c30:	8000b7b7          	lui	a5,0x8000b
80001c34:	cbc78793          	addi	a5,a5,-836 # 8000acbc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000acbd>
80001c38:	92f42023          	sw	a5,-1760(s0)
80001c3c:	c09ff06f          	j	80001844 <perform_attack+0x204>
                    target_addr_aux = &bss_mem_ptr_aux;
80001c40:	8000b7b7          	lui	a5,0x8000b
80001c44:	93878793          	addi	a5,a5,-1736 # 8000a938 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a939>
80001c48:	90f42a23          	sw	a5,-1772(s0)
                    target_addr     = &bss_mem_ptr;
80001c4c:	8000b7b7          	lui	a5,0x8000b
80001c50:	93478793          	addi	a5,a5,-1740 # 8000a934 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a935>
80001c54:	92f42023          	sw	a5,-1760(s0)
80001c58:	bedff06f          	j	80001844 <perform_attack+0x204>
                    target_addr_aux = &stack_mem_ptr_aux;
80001c5c:	94040793          	addi	a5,s0,-1728
80001c60:	90f42a23          	sw	a5,-1772(s0)
                    target_addr     = &stack_mem_ptr;
80001c64:	93c40793          	addi	a5,s0,-1732
80001c68:	92f42023          	sw	a5,-1760(s0)
80001c6c:	bd9ff06f          	j	80001844 <perform_attack+0x204>
            if (setjmp(stack_jmp_buffer) != 0) {
80001c70:	a7840513          	addi	a0,s0,-1416
80001c74:	dc5fe0ef          	jal	ra,80000a38 <setjmp>
80001c78:	00051863          	bnez	a0,80001c88 <perform_attack+0x648>
            payload.jmp_buffer = &stack_jmp_buffer;
80001c7c:	a7840793          	addi	a5,s0,-1416
80001c80:	94f42e23          	sw	a5,-1700(s0)
            break;
80001c84:	0280006f          	j	80001cac <perform_attack+0x66c>
                printf("Longjmp attack failed. Returning normally...\n");
80001c88:	8000a537          	lui	a0,0x8000a
80001c8c:	bb850513          	addi	a0,a0,-1096 # 80009bb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009bb9>
80001c90:	5f9000ef          	jal	ra,80002a88 <printk>
80001c94:	5bc0006f          	j	80002250 <perform_attack+0xc10>
            if (setjmp(stack_jmp_buffer_param) != 0) {
80001c98:	92842503          	lw	a0,-1752(s0)
80001c9c:	d9dfe0ef          	jal	ra,80000a38 <setjmp>
80001ca0:	0c051063          	bnez	a0,80001d60 <perform_attack+0x720>
            payload.jmp_buffer = &stack_jmp_buffer_param;
80001ca4:	92840793          	addi	a5,s0,-1752
80001ca8:	94f42e23          	sw	a5,-1700(s0)
    payload.ptr_to_correct_return_addr = RET_ADDR_PTR;
80001cac:	ffc40793          	addi	a5,s0,-4
80001cb0:	96f42823          	sw	a5,-1680(s0)
    payload.inject_param = attack.inject_param;
80001cb4:	8000b7b7          	lui	a5,0x8000b
80001cb8:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001cbc:	0047a703          	lw	a4,4(a5)
80001cc0:	94e42623          	sw	a4,-1716(s0)
    switch (attack.technique) {
80001cc4:	0007a783          	lw	a5,0(a5)
80001cc8:	06400693          	li	a3,100
80001ccc:	12d78c63          	beq	a5,a3,80001e04 <perform_attack+0x7c4>
80001cd0:	06500713          	li	a4,101
80001cd4:	1ae78263          	beq	a5,a4,80001e78 <perform_attack+0x838>
        fprintf(stderr, "target_addr == %p\n", target_addr);
80001cd8:	92042483          	lw	s1,-1760(s0)
80001cdc:	00048593          	mv	a1,s1
80001ce0:	8000a537          	lui	a0,0x8000a
80001ce4:	c3050513          	addi	a0,a0,-976 # 80009c30 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009c31>
80001ce8:	5a1000ef          	jal	ra,80002a88 <printk>
        fprintf(stderr, "buffer == %p\n", buffer);
80001cec:	94842583          	lw	a1,-1720(s0)
80001cf0:	8000a537          	lui	a0,0x8000a
80001cf4:	c4450513          	addi	a0,a0,-956 # 80009c44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009c45>
80001cf8:	591000ef          	jal	ra,80002a88 <printk>
    if ((unsigned long) target_addr > (unsigned long) buffer) {
80001cfc:	94842583          	lw	a1,-1720(s0)
80001d00:	2895fc63          	bgeu	a1,s1,80001f98 <perform_attack+0x958>
          - (unsigned long) buffer
80001d04:	40b485b3          	sub	a1,s1,a1
          + 1); /* For null termination so that buffer can be     */
80001d08:	00558593          	addi	a1,a1,5
        payload.size =
80001d0c:	94b42823          	sw	a1,-1712(s0)
            fprintf(stderr, "payload size == %d\n", payload.size);
80001d10:	8000a537          	lui	a0,0x8000a
80001d14:	c5450513          	addi	a0,a0,-940 # 80009c54 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009c55>
80001d18:	571000ef          	jal	ra,80002a88 <printk>
    buffer[0] = '\0';
80001d1c:	94842783          	lw	a5,-1720(s0)
80001d20:	00078023          	sb	zero,0(a5)
    if (!build_payload(&payload)) {
80001d24:	94c40513          	addi	a0,s0,-1716
80001d28:	848ff0ef          	jal	ra,80000d70 <build_payload>
80001d2c:	28050063          	beqz	a0,80001fac <perform_attack+0x96c>
    switch (attack.function) {
80001d30:	8000b7b7          	lui	a5,0x8000b
80001d34:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001d38:	0107a783          	lw	a5,16(a5)
80001d3c:	e0c78793          	addi	a5,a5,-500
80001d40:	00800713          	li	a4,8
80001d44:	3cf76463          	bltu	a4,a5,8000210c <perform_attack+0xacc>
80001d48:	00279793          	slli	a5,a5,0x2
80001d4c:	8000a737          	lui	a4,0x8000a
80001d50:	d9470713          	addi	a4,a4,-620 # 80009d94 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d95>
80001d54:	00e787b3          	add	a5,a5,a4
80001d58:	0007a783          	lw	a5,0(a5)
80001d5c:	00078067          	jr	a5
                printf("Longjmp attack failed. Returning normally...\n");
80001d60:	8000a537          	lui	a0,0x8000a
80001d64:	bb850513          	addi	a0,a0,-1096 # 80009bb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009bb9>
80001d68:	521000ef          	jal	ra,80002a88 <printk>
80001d6c:	f39ff06f          	j	80001ca4 <perform_attack+0x664>
            if (setjmp(*heap_jmp_buffer) != 0) {
80001d70:	91842503          	lw	a0,-1768(s0)
80001d74:	cc5fe0ef          	jal	ra,80000a38 <setjmp>
80001d78:	00051a63          	bnez	a0,80001d8c <perform_attack+0x74c>
            payload.jmp_buffer = (void *) heap_jmp_buffer;
80001d7c:	91842783          	lw	a5,-1768(s0)
80001d80:	94f42e23          	sw	a5,-1700(s0)
            payload.stack_jmp_buffer_param = NULL;
80001d84:	96042023          	sw	zero,-1696(s0)
            break;
80001d88:	f25ff06f          	j	80001cac <perform_attack+0x66c>
                printf("Longjmp attack failed. Returning normally...\n");
80001d8c:	8000a537          	lui	a0,0x8000a
80001d90:	bb850513          	addi	a0,a0,-1096 # 80009bb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009bb9>
80001d94:	4f5000ef          	jal	ra,80002a88 <printk>
80001d98:	4b80006f          	j	80002250 <perform_attack+0xc10>
            if (setjmp(data_jmp_buffer) != 0) {
80001d9c:	8000d537          	lui	a0,0x8000d
80001da0:	25850513          	addi	a0,a0,600 # 8000d258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d259>
80001da4:	c95fe0ef          	jal	ra,80000a38 <setjmp>
80001da8:	00051c63          	bnez	a0,80001dc0 <perform_attack+0x780>
            payload.jmp_buffer = (void *) data_jmp_buffer;
80001dac:	8000d7b7          	lui	a5,0x8000d
80001db0:	25878793          	addi	a5,a5,600 # 8000d258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d259>
80001db4:	94f42e23          	sw	a5,-1700(s0)
            payload.stack_jmp_buffer_param = NULL;
80001db8:	96042023          	sw	zero,-1696(s0)
            break;
80001dbc:	ef1ff06f          	j	80001cac <perform_attack+0x66c>
                printf("Longjmp attack failed. Returning normally...\n");
80001dc0:	8000a537          	lui	a0,0x8000a
80001dc4:	bb850513          	addi	a0,a0,-1096 # 80009bb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009bb9>
80001dc8:	4c1000ef          	jal	ra,80002a88 <printk>
80001dcc:	4840006f          	j	80002250 <perform_attack+0xc10>
            if (setjmp(bss_jmp_buffer) != 0) {
80001dd0:	8000b537          	lui	a0,0x8000b
80001dd4:	97850513          	addi	a0,a0,-1672 # 8000a978 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a979>
80001dd8:	c61fe0ef          	jal	ra,80000a38 <setjmp>
80001ddc:	00051c63          	bnez	a0,80001df4 <perform_attack+0x7b4>
            payload.jmp_buffer = (void *) bss_jmp_buffer;
80001de0:	8000b7b7          	lui	a5,0x8000b
80001de4:	97878793          	addi	a5,a5,-1672 # 8000a978 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a979>
80001de8:	94f42e23          	sw	a5,-1700(s0)
            payload.stack_jmp_buffer_param = NULL;
80001dec:	96042023          	sw	zero,-1696(s0)
            break;
80001df0:	ebdff06f          	j	80001cac <perform_attack+0x66c>
                printf("Longjmp attack failed. Returning normally...\n");
80001df4:	8000a537          	lui	a0,0x8000a
80001df8:	bb850513          	addi	a0,a0,-1096 # 80009bb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009bb9>
80001dfc:	48d000ef          	jal	ra,80002a88 <printk>
80001e00:	4500006f          	j	80002250 <perform_attack+0xc10>
            switch (attack.inject_param) {
80001e04:	0ca00793          	li	a5,202
80001e08:	04f70063          	beq	a4,a5,80001e48 <perform_attack+0x808>
80001e0c:	02e7e263          	bltu	a5,a4,80001e30 <perform_attack+0x7f0>
80001e10:	0c800793          	li	a5,200
80001e14:	04f70263          	beq	a4,a5,80001e58 <perform_attack+0x818>
80001e18:	0c900793          	li	a5,201
80001e1c:	04f71463          	bne	a4,a5,80001e64 <perform_attack+0x824>
                    payload.overflow_ptr = &ret2libc_target;
80001e20:	800017b7          	lui	a5,0x80001
80001e24:	b8078793          	addi	a5,a5,-1152 # 80000b80 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b81>
80001e28:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001e2c:	eadff06f          	j	80001cd8 <perform_attack+0x698>
80001e30:	0cb00793          	li	a5,203
80001e34:	02f71863          	bne	a4,a5,80001e64 <perform_attack+0x824>
                    payload.overflow_ptr = 0xdeadbeef;
80001e38:	deadc7b7          	lui	a5,0xdeadc
80001e3c:	eef78793          	addi	a5,a5,-273 # deadbeef <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xdeadbef0>
80001e40:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001e44:	e95ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = (uintptr_t) &rop_target;
80001e48:	800017b7          	lui	a5,0x80001
80001e4c:	bb078793          	addi	a5,a5,-1104 # 80000bb0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000bb1>
80001e50:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001e54:	e85ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = buffer;
80001e58:	94842783          	lw	a5,-1720(s0)
80001e5c:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001e60:	e79ff06f          	j	80001cd8 <perform_attack+0x698>
                        fprintf(stderr, "Unknown choice of attack code");
80001e64:	8000a537          	lui	a0,0x8000a
80001e68:	be850513          	addi	a0,a0,-1048 # 80009be8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009be9>
80001e6c:	41d000ef          	jal	ra,80002a88 <printk>
                        exit(1);
80001e70:	00100513          	li	a0,1
80001e74:	4a8060ef          	jal	ra,8000831c <exit>
            switch (attack.code_ptr) {
80001e78:	8000b7b7          	lui	a5,0x8000b
80001e7c:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001e80:	0087a783          	lw	a5,8(a5)
80001e84:	ed478793          	addi	a5,a5,-300
80001e88:	01100713          	li	a4,17
80001e8c:	0ef76c63          	bltu	a4,a5,80001f84 <perform_attack+0x944>
80001e90:	00279793          	slli	a5,a5,0x2
80001e94:	8000a737          	lui	a4,0x8000a
80001e98:	db870713          	addi	a4,a4,-584 # 80009db8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009db9>
80001e9c:	00e787b3          	add	a5,a5,a4
80001ea0:	0007a783          	lw	a5,0(a5)
80001ea4:	00078067          	jr	a5
                    payload.overflow_ptr = RET_ADDR_PTR;
80001ea8:	ffc40793          	addi	a5,s0,-4
80001eac:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001eb0:	e29ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = &stack_func_ptr;
80001eb4:	93840793          	addi	a5,s0,-1736
80001eb8:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001ebc:	e1dff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = &stack_func_ptr_param;
80001ec0:	92c40793          	addi	a5,s0,-1748
80001ec4:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001ec8:	e11ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = heap_func_ptr;
80001ecc:	92442783          	lw	a5,-1756(s0)
80001ed0:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001ed4:	e05ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = &bss_func_ptr;
80001ed8:	8000b7b7          	lui	a5,0x8000b
80001edc:	93078793          	addi	a5,a5,-1744 # 8000a930 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a931>
80001ee0:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001ee4:	df5ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = &data_func_ptr;
80001ee8:	8000e7b7          	lui	a5,0x8000e
80001eec:	8e878793          	addi	a5,a5,-1816 # 8000d8e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d8e9>
80001ef0:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001ef4:	de5ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = &stack_struct.func_ptr;
80001ef8:	a7440793          	addi	a5,s0,-1420
80001efc:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001f00:	dd9ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = (void *) heap_struct + 256;
80001f04:	91c42783          	lw	a5,-1764(s0)
80001f08:	10078793          	addi	a5,a5,256
80001f0c:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001f10:	dc9ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = &data_struct.func_ptr;
80001f14:	8000d7b7          	lui	a5,0x8000d
80001f18:	7a878793          	addi	a5,a5,1960 # 8000d7a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d7a9>
80001f1c:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001f20:	db9ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = &bss_struct.func_ptr;
80001f24:	8000b7b7          	lui	a5,0x8000b
80001f28:	cb878793          	addi	a5,a5,-840 # 8000acb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000acb9>
80001f2c:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001f30:	da9ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = stack_jmp_buffer;
80001f34:	a7840793          	addi	a5,s0,-1416
80001f38:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001f3c:	d9dff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = stack_jmp_buffer_param;
80001f40:	92842783          	lw	a5,-1752(s0)
80001f44:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001f48:	d91ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = *heap_jmp_buffer;
80001f4c:	91842783          	lw	a5,-1768(s0)
80001f50:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001f54:	d85ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = data_jmp_buffer;
80001f58:	8000d7b7          	lui	a5,0x8000d
80001f5c:	25878793          	addi	a5,a5,600 # 8000d258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d259>
80001f60:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001f64:	d75ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = bss_jmp_buffer;
80001f68:	8000b7b7          	lui	a5,0x8000b
80001f6c:	97878793          	addi	a5,a5,-1672 # 8000a978 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a979>
80001f70:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001f74:	d65ff06f          	j	80001cd8 <perform_attack+0x698>
                    payload.overflow_ptr = &dop_dest;
80001f78:	81018793          	addi	a5,gp,-2032 # 8000d8f8 <dop_dest>
80001f7c:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001f80:	d59ff06f          	j	80001cd8 <perform_attack+0x698>
                        fprintf(stderr,
80001f84:	8000a537          	lui	a0,0x8000a
80001f88:	c0850513          	addi	a0,a0,-1016 # 80009c08 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009c09>
80001f8c:	2fd000ef          	jal	ra,80002a88 <printk>
                    exit(1);
80001f90:	00100513          	li	a0,1
80001f94:	388060ef          	jal	ra,8000831c <exit>
            fprintf(stderr, "Error calculating size of payload\n");
80001f98:	8000a537          	lui	a0,0x8000a
80001f9c:	c6850513          	addi	a0,a0,-920 # 80009c68 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009c69>
80001fa0:	2e9000ef          	jal	ra,80002a88 <printk>
        exit(1);
80001fa4:	00100513          	li	a0,1
80001fa8:	374060ef          	jal	ra,8000831c <exit>
            fprintf(stderr, "Error: Could not build payload\n");
80001fac:	8000a537          	lui	a0,0x8000a
80001fb0:	c8c50513          	addi	a0,a0,-884 # 80009c8c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009c8d>
80001fb4:	2d5000ef          	jal	ra,80002a88 <printk>
        exit(1);
80001fb8:	00100513          	li	a0,1
80001fbc:	360060ef          	jal	ra,8000831c <exit>
80001fc0:	95042603          	lw	a2,-1712(s0)
80001fc4:	fff60613          	addi	a2,a2,-1
80001fc8:	95842583          	lw	a1,-1704(s0)
80001fcc:	94842503          	lw	a0,-1720(s0)
80001fd0:	a29fe0ef          	jal	ra,800009f8 <memcpy>
    switch (attack.technique) {
80001fd4:	8000b7b7          	lui	a5,0x8000b
80001fd8:	ddc7a783          	lw	a5,-548(a5) # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001fdc:	06400713          	li	a4,100
80001fe0:	02e78e63          	beq	a5,a4,8000201c <perform_attack+0x9dc>
80001fe4:	06500713          	li	a4,101
80001fe8:	24e79463          	bne	a5,a4,80002230 <perform_attack+0xbf0>
            if (attack.function == SSCANF) {
80001fec:	8000b7b7          	lui	a5,0x8000b
80001ff0:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80001ff4:	0107a703          	lw	a4,16(a5)
80001ff8:	1fb00793          	li	a5,507
80001ffc:	12f70263          	beq	a4,a5,80002120 <perform_attack+0xae0>
            if (attack.inject_param == RETURN_INTO_LIBC) {
80002000:	8000b7b7          	lui	a5,0x8000b
80002004:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002008:	0047a783          	lw	a5,4(a5)
8000200c:	0c900713          	li	a4,201
80002010:	12e78a63          	beq	a5,a4,80002144 <perform_attack+0xb04>
            } else if (attack.inject_param == INJECTED_CODE_NO_NOP) {
80002014:	0c800713          	li	a4,200
80002018:	20e78263          	beq	a5,a4,8000221c <perform_attack+0xbdc>
    printf("");
8000201c:	8000a537          	lui	a0,0x8000a
80002020:	b6050513          	addi	a0,a0,-1184 # 80009b60 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009b61>
80002024:	265000ef          	jal	ra,80002a88 <printk>
    printf("\nExecuting attack... ");
80002028:	8000a537          	lui	a0,0x8000a
8000202c:	d2050513          	addi	a0,a0,-736 # 80009d20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d21>
80002030:	259000ef          	jal	ra,80002a88 <printk>
    switch (attack.code_ptr) {
80002034:	8000b7b7          	lui	a5,0x8000b
80002038:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
8000203c:	0087a783          	lw	a5,8(a5)
80002040:	ed378793          	addi	a5,a5,-301
80002044:	01000713          	li	a4,16
80002048:	20f76463          	bltu	a4,a5,80002250 <perform_attack+0xc10>
8000204c:	00279793          	slli	a5,a5,0x2
80002050:	8000a737          	lui	a4,0x8000a
80002054:	e0070713          	addi	a4,a4,-512 # 80009e00 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009e01>
80002058:	00e787b3          	add	a5,a5,a4
8000205c:	0007a783          	lw	a5,0(a5)
80002060:	00078067          	jr	a5
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
80002064:	95842583          	lw	a1,-1704(s0)
80002068:	94842503          	lw	a0,-1720(s0)
8000206c:	6c8060ef          	jal	ra,80008734 <strcpy>
80002070:	f65ff06f          	j	80001fd4 <perform_attack+0x994>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
80002074:	95042603          	lw	a2,-1712(s0)
80002078:	95842583          	lw	a1,-1704(s0)
8000207c:	94842503          	lw	a0,-1720(s0)
80002080:	7f8060ef          	jal	ra,80008878 <strncpy>
80002084:	f51ff06f          	j	80001fd4 <perform_attack+0x994>
            sprintf(buffer, "%s", payload.buffer);
80002088:	95842583          	lw	a1,-1704(s0)
8000208c:	94842503          	lw	a0,-1720(s0)
80002090:	6a4060ef          	jal	ra,80008734 <strcpy>
80002094:	f41ff06f          	j	80001fd4 <perform_attack+0x994>
            snprintf(buffer, payload.size, "%s", payload.buffer);
80002098:	95842683          	lw	a3,-1704(s0)
8000209c:	8000a637          	lui	a2,0x8000a
800020a0:	cac60613          	addi	a2,a2,-852 # 80009cac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009cad>
800020a4:	95042583          	lw	a1,-1712(s0)
800020a8:	94842503          	lw	a0,-1720(s0)
800020ac:	554060ef          	jal	ra,80008600 <sniprintf>
800020b0:	f25ff06f          	j	80001fd4 <perform_attack+0x994>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
800020b4:	95842583          	lw	a1,-1704(s0)
800020b8:	94842503          	lw	a0,-1720(s0)
800020bc:	5f8060ef          	jal	ra,800086b4 <strcat>
800020c0:	f15ff06f          	j	80001fd4 <perform_attack+0x994>
__ssp_bos_icheck3_restrict(strncat, char *, const char *)
800020c4:	95042603          	lw	a2,-1712(s0)
800020c8:	95842583          	lw	a1,-1704(s0)
800020cc:	94842503          	lw	a0,-1720(s0)
800020d0:	700060ef          	jal	ra,800087d0 <strncat>
800020d4:	f01ff06f          	j	80001fd4 <perform_attack+0x994>
            snprintf(format_string_buf, 15, "%%%ic", payload.size);
800020d8:	95042683          	lw	a3,-1712(s0)
800020dc:	8000a637          	lui	a2,0x8000a
800020e0:	cb060613          	addi	a2,a2,-848 # 80009cb0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009cb1>
800020e4:	00f00593          	li	a1,15
800020e8:	bac40513          	addi	a0,s0,-1108
800020ec:	514060ef          	jal	ra,80008600 <sniprintf>
800020f0:	ee5ff06f          	j	80001fd4 <perform_attack+0x994>
            homebrew_memcpy(buffer, payload.buffer, payload.size - 1);
800020f4:	95042603          	lw	a2,-1712(s0)
800020f8:	fff60613          	addi	a2,a2,-1
800020fc:	95842583          	lw	a1,-1704(s0)
80002100:	94842503          	lw	a0,-1720(s0)
80002104:	ea9fe0ef          	jal	ra,80000fac <homebrew_memcpy>
80002108:	ecdff06f          	j	80001fd4 <perform_attack+0x994>
                fprintf(stderr, "Error: Unknown choice of function\n");
8000210c:	8000a537          	lui	a0,0x8000a
80002110:	cb850513          	addi	a0,a0,-840 # 80009cb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009cb9>
80002114:	175000ef          	jal	ra,80002a88 <printk>
            exit(1);
80002118:	00100513          	li	a0,1
8000211c:	200060ef          	jal	ra,8000831c <exit>
                *(uint32_t *) target_addr <<= 8;
80002120:	92042683          	lw	a3,-1760(s0)
80002124:	0006a783          	lw	a5,0(a3)
80002128:	00879713          	slli	a4,a5,0x8
8000212c:	00e6a023          	sw	a4,0(a3)
                *(uint32_t *) target_addr >>= 8;
80002130:	01000737          	lui	a4,0x1000
80002134:	fff70713          	addi	a4,a4,-1 # ffffff <CONFIG_SRAM_SIZE+0xefffff>
80002138:	00e7f7b3          	and	a5,a5,a4
8000213c:	00f6a023          	sw	a5,0(a3)
80002140:	ec1ff06f          	j	80002000 <perform_attack+0x9c0>
                payload.overflow_ptr = &ret2libc_target;
80002144:	800017b7          	lui	a5,0x80001
80002148:	b8078793          	addi	a5,a5,-1152 # 80000b80 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b81>
8000214c:	94f42a23          	sw	a5,-1708(s0)
                  - (uintptr_t) buffer + sizeof(long) + 1;
80002150:	94842783          	lw	a5,-1720(s0)
80002154:	91442483          	lw	s1,-1772(s0)
80002158:	40f487b3          	sub	a5,s1,a5
8000215c:	00578793          	addi	a5,a5,5
                payload.size         = (uintptr_t) target_addr_aux
80002160:	94f42823          	sw	a5,-1712(s0)
                build_payload(&payload);
80002164:	94c40513          	addi	a0,s0,-1716
80002168:	c09fe0ef          	jal	ra,80000d70 <build_payload>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
8000216c:	95042603          	lw	a2,-1712(s0)
80002170:	fff60613          	addi	a2,a2,-1
80002174:	95842583          	lw	a1,-1704(s0)
80002178:	94842503          	lw	a0,-1720(s0)
8000217c:	87dfe0ef          	jal	ra,800009f8 <memcpy>
                printf("target_addr_aux: %p\n", target_addr_aux);
80002180:	00048593          	mv	a1,s1
80002184:	8000a537          	lui	a0,0x8000a
80002188:	cdc50513          	addi	a0,a0,-804 # 80009cdc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009cdd>
8000218c:	0fd000ef          	jal	ra,80002a88 <printk>
                switch (attack.location) {
80002190:	8000b7b7          	lui	a5,0x8000b
80002194:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002198:	00c7a783          	lw	a5,12(a5)
8000219c:	19200713          	li	a4,402
800021a0:	06e78263          	beq	a5,a4,80002204 <perform_attack+0xbc4>
800021a4:	02f76663          	bltu	a4,a5,800021d0 <perform_attack+0xb90>
800021a8:	19000713          	li	a4,400
800021ac:	04e78263          	beq	a5,a4,800021f0 <perform_attack+0xbb0>
800021b0:	19100713          	li	a4,401
800021b4:	e6e794e3          	bne	a5,a4,8000201c <perform_attack+0x9dc>
                          (uintptr_t) *heap_mem_ptr_aux;
800021b8:	91042783          	lw	a5,-1776(s0)
800021bc:	0007a703          	lw	a4,0(a5)
                        *(uint32_t *) (*(uint32_t *) target_addr) =
800021c0:	92042783          	lw	a5,-1760(s0)
800021c4:	0007a783          	lw	a5,0(a5)
800021c8:	00e7a023          	sw	a4,0(a5)
                        break;
800021cc:	e51ff06f          	j	8000201c <perform_attack+0x9dc>
800021d0:	19300713          	li	a4,403
800021d4:	e4e794e3          	bne	a5,a4,8000201c <perform_attack+0x9dc>
                          (uintptr_t) *data_mem_ptr_aux;
800021d8:	8000d7b7          	lui	a5,0x8000d
800021dc:	4887a703          	lw	a4,1160(a5) # 8000d488 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d489>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
800021e0:	92042783          	lw	a5,-1760(s0)
800021e4:	0007a783          	lw	a5,0(a5)
800021e8:	00e7a023          	sw	a4,0(a5)
                        break;
800021ec:	e31ff06f          	j	8000201c <perform_attack+0x9dc>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
800021f0:	92042783          	lw	a5,-1760(s0)
800021f4:	0007a783          	lw	a5,0(a5)
                          (uintptr_t) stack_mem_ptr_aux;
800021f8:	94042703          	lw	a4,-1728(s0)
                        *(uint32_t *) (*(uint32_t *) target_addr) =
800021fc:	00e7a023          	sw	a4,0(a5)
                        break;
80002200:	e1dff06f          	j	8000201c <perform_attack+0x9dc>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80002204:	92042783          	lw	a5,-1760(s0)
80002208:	0007a783          	lw	a5,0(a5)
                          (uintptr_t) bss_mem_ptr_aux;
8000220c:	8000b737          	lui	a4,0x8000b
80002210:	93872703          	lw	a4,-1736(a4) # 8000a938 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a939>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80002214:	00e7a023          	sw	a4,0(a5)
                        break;
80002218:	e05ff06f          	j	8000201c <perform_attack+0x9dc>
                *(uintptr_t *) (*(uintptr_t *) target_addr) =
8000221c:	92042783          	lw	a5,-1760(s0)
80002220:	0007a783          	lw	a5,0(a5)
                  (uintptr_t) buffer;
80002224:	94842703          	lw	a4,-1720(s0)
                *(uintptr_t *) (*(uintptr_t *) target_addr) =
80002228:	00e7a023          	sw	a4,0(a5)
8000222c:	df1ff06f          	j	8000201c <perform_attack+0x9dc>
                fprintf(stderr, "Error: Unknown choice of attack parameterB\n");
80002230:	8000a537          	lui	a0,0x8000a
80002234:	cf450513          	addi	a0,a0,-780 # 80009cf4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009cf5>
80002238:	051000ef          	jal	ra,80002a88 <printk>
            exit(1);
8000223c:	00100513          	li	a0,1
80002240:	0dc060ef          	jal	ra,8000831c <exit>
            stack_func_ptr(NULL);
80002244:	00000513          	li	a0,0
80002248:	93842783          	lw	a5,-1736(s0)
8000224c:	000780e7          	jalr	a5
} /* perform_attack */
80002250:	8000d7b7          	lui	a5,0x8000d
80002254:	fdc42703          	lw	a4,-36(s0)
80002258:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000225c:	00f747b3          	xor	a5,a4,a5
80002260:	00000713          	li	a4,0
80002264:	1a079463          	bnez	a5,8000240c <perform_attack+0xdcc>
80002268:	6fc12083          	lw	ra,1788(sp)
8000226c:	6f812403          	lw	s0,1784(sp)
80002270:	6f412483          	lw	s1,1780(sp)
80002274:	6f012903          	lw	s2,1776(sp)
80002278:	6ec12983          	lw	s3,1772(sp)
8000227c:	6e812a03          	lw	s4,1768(sp)
80002280:	70010113          	addi	sp,sp,1792
80002284:	00008067          	ret
            ((int (*)(char *, int))(*stack_func_ptr_param))(NULL, 0);
80002288:	00000593          	li	a1,0
8000228c:	00000513          	li	a0,0
80002290:	92c42783          	lw	a5,-1748(s0)
80002294:	000780e7          	jalr	a5
80002298:	fb9ff06f          	j	80002250 <perform_attack+0xc10>
            ((int (*)(char *, int)) * heap_func_ptr)(NULL, 0);
8000229c:	92442783          	lw	a5,-1756(s0)
800022a0:	0007a783          	lw	a5,0(a5)
800022a4:	00000593          	li	a1,0
800022a8:	00000513          	li	a0,0
800022ac:	000780e7          	jalr	a5
800022b0:	fa1ff06f          	j	80002250 <perform_attack+0xc10>
            ((int (*)(char *, int))(*bss_func_ptr))(NULL, 0);
800022b4:	8000b7b7          	lui	a5,0x8000b
800022b8:	9307a783          	lw	a5,-1744(a5) # 8000a930 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a931>
800022bc:	00000593          	li	a1,0
800022c0:	00000513          	li	a0,0
800022c4:	000780e7          	jalr	a5
800022c8:	f89ff06f          	j	80002250 <perform_attack+0xc10>
            ((int (*)(char *, int))(*data_func_ptr))(NULL, 0);
800022cc:	8000e7b7          	lui	a5,0x8000e
800022d0:	8e87a783          	lw	a5,-1816(a5) # 8000d8e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d8e9>
800022d4:	00000593          	li	a1,0
800022d8:	00000513          	li	a0,0
800022dc:	000780e7          	jalr	a5
800022e0:	f71ff06f          	j	80002250 <perform_attack+0xc10>
            lj_func(stack_jmp_buffer);
800022e4:	a7840513          	addi	a0,s0,-1416
800022e8:	ca1fe0ef          	jal	ra,80000f88 <lj_func>
            lj_func(stack_jmp_buffer_param);
800022ec:	92842503          	lw	a0,-1752(s0)
800022f0:	c99fe0ef          	jal	ra,80000f88 <lj_func>
            lj_func(*heap_jmp_buffer);
800022f4:	91842503          	lw	a0,-1768(s0)
800022f8:	c91fe0ef          	jal	ra,80000f88 <lj_func>
            lj_func(data_jmp_buffer);
800022fc:	8000d537          	lui	a0,0x8000d
80002300:	25850513          	addi	a0,a0,600 # 8000d258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d259>
80002304:	c85fe0ef          	jal	ra,80000f88 <lj_func>
            lj_func(bss_jmp_buffer);
80002308:	8000b537          	lui	a0,0x8000b
8000230c:	97850513          	addi	a0,a0,-1672 # 8000a978 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a979>
80002310:	c79fe0ef          	jal	ra,80000f88 <lj_func>
            ((int (*)(char *, int)) * (stack_struct.func_ptr))(NULL, 0);
80002314:	00000593          	li	a1,0
80002318:	00000513          	li	a0,0
8000231c:	a7442783          	lw	a5,-1420(s0)
80002320:	000780e7          	jalr	a5
80002324:	f2dff06f          	j	80002250 <perform_attack+0xc10>
            (*heap_struct->func_ptr)(NULL, 0);
80002328:	91c42783          	lw	a5,-1764(s0)
8000232c:	1007a783          	lw	a5,256(a5)
80002330:	00000593          	li	a1,0
80002334:	00000513          	li	a0,0
80002338:	000780e7          	jalr	a5
8000233c:	f15ff06f          	j	80002250 <perform_attack+0xc10>
            (*data_struct.func_ptr)(NULL, 0);
80002340:	8000d7b7          	lui	a5,0x8000d
80002344:	6a878793          	addi	a5,a5,1704 # 8000d6a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d6a9>
80002348:	1007a783          	lw	a5,256(a5)
8000234c:	00000593          	li	a1,0
80002350:	00000513          	li	a0,0
80002354:	000780e7          	jalr	a5
80002358:	ef9ff06f          	j	80002250 <perform_attack+0xc10>
            (*bss_struct.func_ptr)(NULL, 0);
8000235c:	8000b7b7          	lui	a5,0x8000b
80002360:	bb878793          	addi	a5,a5,-1096 # 8000abb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000abb9>
80002364:	1007a783          	lw	a5,256(a5)
80002368:	00000593          	li	a1,0
8000236c:	00000513          	li	a0,0
80002370:	000780e7          	jalr	a5
80002374:	eddff06f          	j	80002250 <perform_attack+0xc10>
            switch (attack.location) {
80002378:	8000b7b7          	lui	a5,0x8000b
8000237c:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002380:	00c7a783          	lw	a5,12(a5)
80002384:	19200713          	li	a4,402
80002388:	06e78063          	beq	a5,a4,800023e8 <perform_attack+0xda8>
8000238c:	02f76463          	bltu	a4,a5,800023b4 <perform_attack+0xd74>
80002390:	19000713          	li	a4,400
80002394:	04e78063          	beq	a5,a4,800023d4 <perform_attack+0xd94>
80002398:	19100713          	li	a4,401
8000239c:	eae79ae3          	bne	a5,a4,80002250 <perform_attack+0xc10>
                    dop_target(buffer, *heap_mem_ptr);
800023a0:	90c42783          	lw	a5,-1780(s0)
800023a4:	0007a583          	lw	a1,0(a5)
800023a8:	94842503          	lw	a0,-1720(s0)
800023ac:	d51fe0ef          	jal	ra,800010fc <dop_target>
800023b0:	ea1ff06f          	j	80002250 <perform_attack+0xc10>
800023b4:	19300713          	li	a4,403
800023b8:	e8e79ce3          	bne	a5,a4,80002250 <perform_attack+0xc10>
                    dop_target(buffer, **data_mem_ptr);
800023bc:	8000d7b7          	lui	a5,0x8000d
800023c0:	3887a783          	lw	a5,904(a5) # 8000d388 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d389>
800023c4:	0007a583          	lw	a1,0(a5)
800023c8:	94842503          	lw	a0,-1720(s0)
800023cc:	d31fe0ef          	jal	ra,800010fc <dop_target>
800023d0:	e81ff06f          	j	80002250 <perform_attack+0xc10>
                    dop_target(buffer, *stack_mem_ptr);
800023d4:	93c42783          	lw	a5,-1732(s0)
800023d8:	0007a583          	lw	a1,0(a5)
800023dc:	94842503          	lw	a0,-1720(s0)
800023e0:	d1dfe0ef          	jal	ra,800010fc <dop_target>
800023e4:	e6dff06f          	j	80002250 <perform_attack+0xc10>
                    dop_target(buffer, *bss_mem_ptr);
800023e8:	8000b7b7          	lui	a5,0x8000b
800023ec:	9347a783          	lw	a5,-1740(a5) # 8000a934 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a935>
800023f0:	0007a583          	lw	a1,0(a5)
800023f4:	94842503          	lw	a0,-1720(s0)
800023f8:	d05fe0ef          	jal	ra,800010fc <dop_target>
800023fc:	e55ff06f          	j	80002250 <perform_attack+0xc10>
			data_leak(buffer);
80002400:	94842503          	lw	a0,-1720(s0)
80002404:	d89fe0ef          	jal	ra,8000118c <data_leak>
80002408:	e49ff06f          	j	80002250 <perform_attack+0xc10>
} /* perform_attack */
8000240c:	704050ef          	jal	ra,80007b10 <_StackCheckHandler>

80002410 <is_attack_possible>:
80002410:	00308013          	addi	zero,ra,3
{
80002414:	fe010113          	addi	sp,sp,-32
80002418:	00112e23          	sw	ra,28(sp)
8000241c:	8000d7b7          	lui	a5,0x8000d
80002420:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002424:	00e12623          	sw	a4,12(sp)
80002428:	00000713          	li	a4,0
    if ((attack.inject_param == INJECTED_CODE_NO_NOP) &&
8000242c:	8000b7b7          	lui	a5,0x8000b
80002430:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002434:	0047a783          	lw	a5,4(a5)
80002438:	0c800713          	li	a4,200
8000243c:	06e78663          	beq	a5,a4,800024a8 <is_attack_possible+0x98>
    if (attack.inject_param == RETURN_ORIENTED_PROGRAMMING &&
80002440:	0ca00713          	li	a4,202
80002444:	08e78a63          	beq	a5,a4,800024d8 <is_attack_possible+0xc8>
    if (attack.inject_param == DATA_ONLY) {
80002448:	0cb00713          	li	a4,203
8000244c:	0ae78863          	beq	a5,a4,800024fc <is_attack_possible+0xec>
    } else if (attack.code_ptr == VAR_BOF ||
80002450:	8000b7b7          	lui	a5,0x8000b
80002454:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002458:	0087a783          	lw	a5,8(a5)
			   attack.code_ptr == VAR_IOF ||
8000245c:	ec578793          	addi	a5,a5,-315
    } else if (attack.code_ptr == VAR_BOF ||
80002460:	00200713          	li	a4,2
80002464:	12f77663          	bgeu	a4,a5,80002590 <is_attack_possible+0x180>
    switch (attack.location) {
80002468:	8000b7b7          	lui	a5,0x8000b
8000246c:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002470:	00c7a783          	lw	a5,12(a5)
80002474:	19200713          	li	a4,402
80002478:	2ce78c63          	beq	a5,a4,80002750 <is_attack_possible+0x340>
8000247c:	12f76863          	bltu	a4,a5,800025ac <is_attack_possible+0x19c>
80002480:	19000713          	li	a4,400
80002484:	16e78863          	beq	a5,a4,800025f4 <is_attack_possible+0x1e4>
80002488:	19100713          	li	a4,401
8000248c:	10e79c63          	bne	a5,a4,800025a4 <is_attack_possible+0x194>
            if ((attack.technique == DIRECT) &&
80002490:	8000b7b7          	lui	a5,0x8000b
80002494:	ddc7a703          	lw	a4,-548(a5) # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002498:	06400793          	li	a5,100
8000249c:	22f70063          	beq	a4,a5,800026bc <is_attack_possible+0x2ac>
    return TRUE;
800024a0:	00100513          	li	a0,1
800024a4:	12c0006f          	j	800025d0 <is_attack_possible+0x1c0>
      (!(attack.function == MEMCPY) && !(attack.function == HOMEBREW)))
800024a8:	8000b737          	lui	a4,0x8000b
800024ac:	ddc70713          	addi	a4,a4,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
800024b0:	01072703          	lw	a4,16(a4)
    if ((attack.inject_param == INJECTED_CODE_NO_NOP) &&
800024b4:	1f400693          	li	a3,500
800024b8:	f8d704e3          	beq	a4,a3,80002440 <is_attack_possible+0x30>
      (!(attack.function == MEMCPY) && !(attack.function == HOMEBREW)))
800024bc:	1fc00693          	li	a3,508
800024c0:	f8d700e3          	beq	a4,a3,80002440 <is_attack_possible+0x30>
        fprintf(stderr,
800024c4:	8000a537          	lui	a0,0x8000a
800024c8:	e4450513          	addi	a0,a0,-444 # 80009e44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009e45>
800024cc:	5bc000ef          	jal	ra,80002a88 <printk>
        return FALSE;
800024d0:	00000513          	li	a0,0
800024d4:	0fc0006f          	j	800025d0 <is_attack_possible+0x1c0>
      attack.technique != DIRECT)
800024d8:	8000b737          	lui	a4,0x8000b
800024dc:	ddc72683          	lw	a3,-548(a4) # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
    if (attack.inject_param == RETURN_ORIENTED_PROGRAMMING &&
800024e0:	06400713          	li	a4,100
800024e4:	f6e682e3          	beq	a3,a4,80002448 <is_attack_possible+0x38>
        fprintf(stderr,
800024e8:	8000a537          	lui	a0,0x8000a
800024ec:	e8c50513          	addi	a0,a0,-372 # 80009e8c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009e8d>
800024f0:	598000ef          	jal	ra,80002a88 <printk>
        return FALSE;
800024f4:	00000513          	li	a0,0
800024f8:	0d80006f          	j	800025d0 <is_attack_possible+0x1c0>
        if (attack.code_ptr != VAR_BOF &&
800024fc:	8000b7b7          	lui	a5,0x8000b
80002500:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002504:	0087a783          	lw	a5,8(a5)
          	attack.code_ptr != VAR_IOF &&
80002508:	ec578693          	addi	a3,a5,-315
        if (attack.code_ptr != VAR_BOF &&
8000250c:	00200713          	li	a4,2
80002510:	04d76463          	bltu	a4,a3,80002558 <is_attack_possible+0x148>
        if ((attack.code_ptr == VAR_LEAK || attack.code_ptr == VAR_IOF) && attack.technique == INDIRECT) {
80002514:	ec478793          	addi	a5,a5,-316
80002518:	00100713          	li	a4,1
8000251c:	04f77863          	bgeu	a4,a5,8000256c <is_attack_possible+0x15c>
        if (attack.location == HEAP && attack.technique == INDIRECT) {
80002520:	8000b7b7          	lui	a5,0x8000b
80002524:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002528:	00c7a703          	lw	a4,12(a5)
8000252c:	19100793          	li	a5,401
80002530:	f2f71ce3          	bne	a4,a5,80002468 <is_attack_possible+0x58>
80002534:	8000b7b7          	lui	a5,0x8000b
80002538:	ddc7a703          	lw	a4,-548(a5) # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
8000253c:	06500793          	li	a5,101
80002540:	f2f714e3          	bne	a4,a5,80002468 <is_attack_possible+0x58>
            fprintf(stderr,
80002544:	8000a537          	lui	a0,0x8000a
80002548:	f3c50513          	addi	a0,a0,-196 # 80009f3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009f3d>
8000254c:	53c000ef          	jal	ra,80002a88 <printk>
        	return FALSE;
80002550:	00000513          	li	a0,0
80002554:	07c0006f          	j	800025d0 <is_attack_possible+0x1c0>
            fprintf(stderr, "Error: Misused DOP code pointer parameters.\n");
80002558:	8000a537          	lui	a0,0x8000a
8000255c:	ed050513          	addi	a0,a0,-304 # 80009ed0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009ed1>
80002560:	528000ef          	jal	ra,80002a88 <printk>
			return FALSE;
80002564:	00000513          	li	a0,0
80002568:	0680006f          	j	800025d0 <is_attack_possible+0x1c0>
        if ((attack.code_ptr == VAR_LEAK || attack.code_ptr == VAR_IOF) && attack.technique == INDIRECT) {
8000256c:	8000b7b7          	lui	a5,0x8000b
80002570:	ddc7a703          	lw	a4,-548(a5) # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002574:	06500793          	li	a5,101
80002578:	faf714e3          	bne	a4,a5,80002520 <is_attack_possible+0x110>
            fprintf(stderr,
8000257c:	8000a537          	lui	a0,0x8000a
80002580:	f0050513          	addi	a0,a0,-256 # 80009f00 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009f01>
80002584:	504000ef          	jal	ra,80002a88 <printk>
			return FALSE;
80002588:	00000513          	li	a0,0
8000258c:	0440006f          	j	800025d0 <is_attack_possible+0x1c0>
        fprintf(stderr,
80002590:	8000a537          	lui	a0,0x8000a
80002594:	f7450513          	addi	a0,a0,-140 # 80009f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009f75>
80002598:	4f0000ef          	jal	ra,80002a88 <printk>
    	return FALSE;
8000259c:	00000513          	li	a0,0
800025a0:	0300006f          	j	800025d0 <is_attack_possible+0x1c0>
    switch (attack.location) {
800025a4:	00100513          	li	a0,1
800025a8:	0280006f          	j	800025d0 <is_attack_possible+0x1c0>
800025ac:	19300713          	li	a4,403
800025b0:	00e79e63          	bne	a5,a4,800025cc <is_attack_possible+0x1bc>
            if ((attack.technique == DIRECT) &&
800025b4:	8000b7b7          	lui	a5,0x8000b
800025b8:	ddc7a703          	lw	a4,-548(a5) # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
800025bc:	06400793          	li	a5,100
800025c0:	14f70263          	beq	a4,a5,80002704 <is_attack_possible+0x2f4>
    return TRUE;
800025c4:	00100513          	li	a0,1
800025c8:	0080006f          	j	800025d0 <is_attack_possible+0x1c0>
    switch (attack.location) {
800025cc:	00100513          	li	a0,1
} /* is_attack_possible */
800025d0:	8000d7b7          	lui	a5,0x8000d
800025d4:	00c12703          	lw	a4,12(sp)
800025d8:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800025dc:	00f747b3          	xor	a5,a4,a5
800025e0:	00000713          	li	a4,0
800025e4:	26079063          	bnez	a5,80002844 <is_attack_possible+0x434>
800025e8:	01c12083          	lw	ra,28(sp)
800025ec:	02010113          	addi	sp,sp,32
800025f0:	00008067          	ret
            if ((attack.technique == DIRECT)) {
800025f4:	8000b7b7          	lui	a5,0x8000b
800025f8:	ddc7a703          	lw	a4,-548(a5) # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
800025fc:	06400793          	li	a5,100
80002600:	00f70663          	beq	a4,a5,8000260c <is_attack_possible+0x1fc>
    return TRUE;
80002604:	00100513          	li	a0,1
80002608:	fc9ff06f          	j	800025d0 <is_attack_possible+0x1c0>
                if ((attack.code_ptr == FUNC_PTR_HEAP) ||
8000260c:	8000b7b7          	lui	a5,0x8000b
80002610:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002614:	0087a783          	lw	a5,8(a5)
                  (attack.code_ptr == FUNC_PTR_BSS) ||
80002618:	ed178693          	addi	a3,a5,-303
                if ((attack.code_ptr == FUNC_PTR_HEAP) ||
8000261c:	00200713          	li	a4,2
80002620:	04d77263          	bgeu	a4,a3,80002664 <is_attack_possible+0x254>
                  (attack.code_ptr == FUNC_PTR_DATA) ||
80002624:	13400713          	li	a4,308
80002628:	02e78e63          	beq	a5,a4,80002664 <is_attack_possible+0x254>
                  (attack.code_ptr == LONGJMP_BUF_HEAP) ||
8000262c:	13600713          	li	a4,310
80002630:	02e78a63          	beq	a5,a4,80002664 <is_attack_possible+0x254>
                  (attack.code_ptr == LONGJMP_BUF_DATA) ||
80002634:	13500713          	li	a4,309
80002638:	02e78663          	beq	a5,a4,80002664 <is_attack_possible+0x254>
                  (attack.code_ptr == LONGJMP_BUF_BSS) ||
8000263c:	13800713          	li	a4,312
80002640:	02e78263          	beq	a5,a4,80002664 <is_attack_possible+0x254>
                  (attack.code_ptr == STRUCT_FUNC_PTR_HEAP) ||
80002644:	13900713          	li	a4,313
80002648:	00e78e63          	beq	a5,a4,80002664 <is_attack_possible+0x254>
                  (attack.code_ptr == STRUCT_FUNC_PTR_DATA) ||
8000264c:	13a00713          	li	a4,314
80002650:	00e78a63          	beq	a5,a4,80002664 <is_attack_possible+0x254>
                } else if ((attack.code_ptr == FUNC_PTR_STACK_PARAM) &&
80002654:	12e00713          	li	a4,302
80002658:	02e78063          	beq	a5,a4,80002678 <is_attack_possible+0x268>
    return TRUE;
8000265c:	00100513          	li	a0,1
80002660:	f71ff06f          	j	800025d0 <is_attack_possible+0x1c0>
                    fprintf(stderr,
80002664:	8000a537          	lui	a0,0x8000a
80002668:	fb850513          	addi	a0,a0,-72 # 80009fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009fb9>
8000266c:	41c000ef          	jal	ra,80002a88 <printk>
                    return FALSE;
80002670:	00000513          	li	a0,0
80002674:	f5dff06f          	j	800025d0 <is_attack_possible+0x1c0>
                  ((attack.function == STRCAT) ||
80002678:	8000b7b7          	lui	a5,0x8000b
8000267c:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002680:	0107a783          	lw	a5,16(a5)
80002684:	e0878693          	addi	a3,a5,-504
                } else if ((attack.code_ptr == FUNC_PTR_STACK_PARAM) &&
80002688:	00100713          	li	a4,1
8000268c:	00d77e63          	bgeu	a4,a3,800026a8 <is_attack_possible+0x298>
                  (attack.function == SNPRINTF) ||
80002690:	1fb00713          	li	a4,507
80002694:	00e78a63          	beq	a5,a4,800026a8 <is_attack_possible+0x298>
                  (attack.function == SSCANF) ||
80002698:	1fc00713          	li	a4,508
8000269c:	00e78663          	beq	a5,a4,800026a8 <is_attack_possible+0x298>
    return TRUE;
800026a0:	00100513          	li	a0,1
800026a4:	f2dff06f          	j	800025d0 <is_attack_possible+0x1c0>
                    fprintf(stderr,
800026a8:	8000a537          	lui	a0,0x8000a
800026ac:	01050513          	addi	a0,a0,16 # 8000a010 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a011>
800026b0:	3d8000ef          	jal	ra,80002a88 <printk>
                    return FALSE;
800026b4:	00000513          	li	a0,0
800026b8:	f19ff06f          	j	800025d0 <is_attack_possible+0x1c0>
              ((attack.code_ptr == RET_ADDR) ||
800026bc:	8000b7b7          	lui	a5,0x8000b
800026c0:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
800026c4:	0087a783          	lw	a5,8(a5)
              (attack.code_ptr == FUNC_PTR_STACK_VAR) ||
800026c8:	ed478693          	addi	a3,a5,-300
            if ((attack.technique == DIRECT) &&
800026cc:	00200713          	li	a4,2
800026d0:	02d77063          	bgeu	a4,a3,800026f0 <is_attack_possible+0x2e0>
800026d4:	ed078793          	addi	a5,a5,-304
800026d8:	00a00713          	li	a4,10
800026dc:	12f76c63          	bltu	a4,a5,80002814 <is_attack_possible+0x404>
800026e0:	6ef00713          	li	a4,1775
800026e4:	00f757b3          	srl	a5,a4,a5
800026e8:	0017f793          	andi	a5,a5,1
800026ec:	12078863          	beqz	a5,8000281c <is_attack_possible+0x40c>
                fprintf(stderr,
800026f0:	8000a537          	lui	a0,0x8000a
800026f4:	09c50513          	addi	a0,a0,156 # 8000a09c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a09d>
800026f8:	390000ef          	jal	ra,80002a88 <printk>
                return FALSE;
800026fc:	00000513          	li	a0,0
80002700:	ed1ff06f          	j	800025d0 <is_attack_possible+0x1c0>
              ((attack.code_ptr == RET_ADDR) ||
80002704:	8000b7b7          	lui	a5,0x8000b
80002708:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
8000270c:	0087a783          	lw	a5,8(a5)
              (attack.code_ptr == FUNC_PTR_STACK_VAR) ||
80002710:	ed478693          	addi	a3,a5,-300
            if ((attack.technique == DIRECT) &&
80002714:	00200713          	li	a4,2
80002718:	02d77263          	bgeu	a4,a3,8000273c <is_attack_possible+0x32c>
8000271c:	ed178713          	addi	a4,a5,-303
80002720:	00b00793          	li	a5,11
80002724:	10e7e063          	bltu	a5,a4,80002824 <is_attack_possible+0x414>
80002728:	000017b7          	lui	a5,0x1
8000272c:	b7b78793          	addi	a5,a5,-1157 # b7b <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x37b>
80002730:	00e7d7b3          	srl	a5,a5,a4
80002734:	0017f793          	andi	a5,a5,1
80002738:	0e078a63          	beqz	a5,8000282c <is_attack_possible+0x41c>
                fprintf(stderr,
8000273c:	8000a537          	lui	a0,0x8000a
80002740:	0f450513          	addi	a0,a0,244 # 8000a0f4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a0f5>
80002744:	344000ef          	jal	ra,80002a88 <printk>
                return FALSE;
80002748:	00000513          	li	a0,0
8000274c:	e85ff06f          	j	800025d0 <is_attack_possible+0x1c0>
            if ((attack.technique == DIRECT) &&
80002750:	8000b7b7          	lui	a5,0x8000b
80002754:	ddc7a783          	lw	a5,-548(a5) # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002758:	06400713          	li	a4,100
8000275c:	00e78a63          	beq	a5,a4,80002770 <is_attack_possible+0x360>
            } else if ((attack.technique == INDIRECT) &&
80002760:	06500713          	li	a4,101
80002764:	04e78a63          	beq	a5,a4,800027b8 <is_attack_possible+0x3a8>
    return TRUE;
80002768:	00100513          	li	a0,1
8000276c:	e65ff06f          	j	800025d0 <is_attack_possible+0x1c0>
              ((attack.code_ptr == RET_ADDR) ||
80002770:	8000b737          	lui	a4,0x8000b
80002774:	ddc70713          	addi	a4,a4,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
80002778:	00872703          	lw	a4,8(a4)
              (attack.code_ptr == FUNC_PTR_STACK_VAR) ||
8000277c:	ed470613          	addi	a2,a4,-300
            if ((attack.technique == DIRECT) &&
80002780:	00200693          	li	a3,2
80002784:	02c6f063          	bgeu	a3,a2,800027a4 <is_attack_possible+0x394>
80002788:	ed170713          	addi	a4,a4,-303
8000278c:	00a00693          	li	a3,10
80002790:	fce6e8e3          	bltu	a3,a4,80002760 <is_attack_possible+0x350>
80002794:	7bd00693          	li	a3,1981
80002798:	00e6d733          	srl	a4,a3,a4
8000279c:	00177713          	andi	a4,a4,1
800027a0:	fc0700e3          	beqz	a4,80002760 <is_attack_possible+0x350>
                fprintf(stderr,
800027a4:	8000a537          	lui	a0,0x8000a
800027a8:	15450513          	addi	a0,a0,340 # 8000a154 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a155>
800027ac:	2dc000ef          	jal	ra,80002a88 <printk>
                return FALSE;
800027b0:	00000513          	li	a0,0
800027b4:	e1dff06f          	j	800025d0 <is_attack_possible+0x1c0>
              (attack.code_ptr == LONGJMP_BUF_HEAP) &&
800027b8:	8000b7b7          	lui	a5,0x8000b
800027bc:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
800027c0:	0087a703          	lw	a4,8(a5)
            } else if ((attack.technique == INDIRECT) &&
800027c4:	13400793          	li	a5,308
800027c8:	00f70663          	beq	a4,a5,800027d4 <is_attack_possible+0x3c4>
    return TRUE;
800027cc:	00100513          	li	a0,1
800027d0:	e01ff06f          	j	800025d0 <is_attack_possible+0x1c0>
              (!(attack.function == MEMCPY) &&
800027d4:	8000b7b7          	lui	a5,0x8000b
800027d8:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
800027dc:	0107a783          	lw	a5,16(a5)
              (attack.code_ptr == LONGJMP_BUF_HEAP) &&
800027e0:	1f400713          	li	a4,500
800027e4:	04e78863          	beq	a5,a4,80002834 <is_attack_possible+0x424>
              (!(attack.function == MEMCPY) &&
800027e8:	1f600713          	li	a4,502
800027ec:	04e78863          	beq	a5,a4,8000283c <is_attack_possible+0x42c>
              !(attack.function == STRNCPY) &&
800027f0:	1fc00713          	li	a4,508
800027f4:	00e79663          	bne	a5,a4,80002800 <is_attack_possible+0x3f0>
    return TRUE;
800027f8:	00100513          	li	a0,1
800027fc:	dd5ff06f          	j	800025d0 <is_attack_possible+0x1c0>
                fprintf(stderr,
80002800:	8000a537          	lui	a0,0x8000a
80002804:	1ac50513          	addi	a0,a0,428 # 8000a1ac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a1ad>
80002808:	280000ef          	jal	ra,80002a88 <printk>
                return FALSE;
8000280c:	00000513          	li	a0,0
80002810:	dc1ff06f          	j	800025d0 <is_attack_possible+0x1c0>
            if ((attack.technique == DIRECT) &&
80002814:	00100513          	li	a0,1
80002818:	db9ff06f          	j	800025d0 <is_attack_possible+0x1c0>
8000281c:	00100513          	li	a0,1
80002820:	db1ff06f          	j	800025d0 <is_attack_possible+0x1c0>
            if ((attack.technique == DIRECT) &&
80002824:	00100513          	li	a0,1
80002828:	da9ff06f          	j	800025d0 <is_attack_possible+0x1c0>
8000282c:	00100513          	li	a0,1
80002830:	da1ff06f          	j	800025d0 <is_attack_possible+0x1c0>
    return TRUE;
80002834:	00100513          	li	a0,1
80002838:	d99ff06f          	j	800025d0 <is_attack_possible+0x1c0>
8000283c:	00100513          	li	a0,1
80002840:	d91ff06f          	j	800025d0 <is_attack_possible+0x1c0>
} /* is_attack_possible */
80002844:	2cc050ef          	jal	ra,80007b10 <_StackCheckHandler>

80002848 <try_attack>:
80002848:	00308013          	addi	zero,ra,3
{
8000284c:	eb010113          	addi	sp,sp,-336
80002850:	14112623          	sw	ra,332(sp)
80002854:	8000d7b7          	lui	a5,0x8000d
80002858:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000285c:	12e12e23          	sw	a4,316(sp)
80002860:	00000713          	li	a4,0
    if (is_attack_possible()) {
80002864:	badff0ef          	jal	ra,80002410 <is_attack_possible>
80002868:	02050c63          	beqz	a0,800028a0 <try_attack+0x58>
        perform_attack(&dummy_function, stack_jmp_buffer_param);
8000286c:	00810593          	addi	a1,sp,8
80002870:	80001537          	lui	a0,0x80001
80002874:	af850513          	addi	a0,a0,-1288 # 80000af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000af9>
80002878:	dc9fe0ef          	jal	ra,80001640 <perform_attack>
}
8000287c:	8000d7b7          	lui	a5,0x8000d
80002880:	13c12703          	lw	a4,316(sp)
80002884:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002888:	00f747b3          	xor	a5,a4,a5
8000288c:	00000713          	li	a4,0
80002890:	00079c63          	bnez	a5,800028a8 <try_attack+0x60>
80002894:	14c12083          	lw	ra,332(sp)
80002898:	15010113          	addi	sp,sp,336
8000289c:	00008067          	ret
        exit(ATTACK_IMPOSSIBLE);
800028a0:	c7c00513          	li	a0,-900
800028a4:	279050ef          	jal	ra,8000831c <exit>
}
800028a8:	268050ef          	jal	ra,80007b10 <_StackCheckHandler>

800028ac <main>:
800028ac:	00308013          	addi	zero,ra,3
{
800028b0:	fe010113          	addi	sp,sp,-32
800028b4:	00112e23          	sw	ra,28(sp)
800028b8:	00812c23          	sw	s0,24(sp)
800028bc:	8000d437          	lui	s0,0x8000d
800028c0:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800028c4:	00f12623          	sw	a5,12(sp)
800028c8:	00000793          	li	a5,0
    attack.technique = DIRECT;
800028cc:	8000b7b7          	lui	a5,0x8000b
800028d0:	ddc78793          	addi	a5,a5,-548 # 8000addc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000addd>
800028d4:	06400713          	li	a4,100
800028d8:	00e7a023          	sw	a4,0(a5)
    attack.inject_param = RETURN_ORIENTED_PROGRAMMING;
800028dc:	0ca00713          	li	a4,202
800028e0:	00e7a223          	sw	a4,4(a5)
    attack.code_ptr= STRUCT_FUNC_PTR_HEAP;
800028e4:	13800713          	li	a4,312
800028e8:	00e7a423          	sw	a4,8(a5)
    attack.location = HEAP;
800028ec:	19100713          	li	a4,401
800028f0:	00e7a623          	sw	a4,12(a5)
    attack.function = SPRINTF;
800028f4:	1f700713          	li	a4,503
800028f8:	00e7a823          	sw	a4,16(a5)
    printk("RIPE is alive! %s\n", CONFIG_BOARD);
800028fc:	8000a5b7          	lui	a1,0x8000a
80002900:	1fc58593          	addi	a1,a1,508 # 8000a1fc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a1fd>
80002904:	8000a537          	lui	a0,0x8000a
80002908:	20850513          	addi	a0,a0,520 # 8000a208 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a209>
8000290c:	17c000ef          	jal	ra,80002a88 <printk>
    print_current_test_parameters();
80002910:	b70fe0ef          	jal	ra,80000c80 <print_current_test_parameters>
    try_attack();
80002914:	f35ff0ef          	jal	ra,80002848 <try_attack>
    printf("Unexpected back in main\n");
80002918:	8000a537          	lui	a0,0x8000a
8000291c:	21c50513          	addi	a0,a0,540 # 8000a21c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a21d>
80002920:	168000ef          	jal	ra,80002a88 <printk>
}
80002924:	00c12703          	lw	a4,12(sp)
80002928:	25042783          	lw	a5,592(s0)
8000292c:	00f747b3          	xor	a5,a4,a5
80002930:	00000713          	li	a4,0
80002934:	00079a63          	bnez	a5,80002948 <main+0x9c>
80002938:	01c12083          	lw	ra,28(sp)
8000293c:	01812403          	lw	s0,24(sp)
80002940:	02010113          	addi	sp,sp,32
80002944:	00008067          	ret
80002948:	1c8050ef          	jal	ra,80007b10 <_StackCheckHandler>

8000294c <arch_printk_char_out>:
8000294c:	00308013          	addi	zero,ra,3
{
80002950:	fe010113          	addi	sp,sp,-32
80002954:	00112e23          	sw	ra,28(sp)
80002958:	8000d7b7          	lui	a5,0x8000d
8000295c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002960:	00e12623          	sw	a4,12(sp)
80002964:	00000713          	li	a4,0
}
80002968:	00c12703          	lw	a4,12(sp)
8000296c:	2507a783          	lw	a5,592(a5)
80002970:	00f747b3          	xor	a5,a4,a5
80002974:	00000713          	li	a4,0
80002978:	00079a63          	bnez	a5,8000298c <arch_printk_char_out+0x40>
8000297c:	00000513          	li	a0,0
80002980:	01c12083          	lw	ra,28(sp)
80002984:	02010113          	addi	sp,sp,32
80002988:	00008067          	ret
8000298c:	184050ef          	jal	ra,80007b10 <_StackCheckHandler>

80002990 <char_out>:
80002990:	00308013          	addi	zero,ra,3
{
80002994:	fe010113          	addi	sp,sp,-32
80002998:	00112e23          	sw	ra,28(sp)
8000299c:	00812c23          	sw	s0,24(sp)
800029a0:	8000d437          	lui	s0,0x8000d
800029a4:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800029a8:	00f12623          	sw	a5,12(sp)
800029ac:	00000793          	li	a5,0
	return _char_out(c);
800029b0:	81c1a783          	lw	a5,-2020(gp) # 8000d904 <_char_out>
800029b4:	000780e7          	jalr	a5
}
800029b8:	00c12703          	lw	a4,12(sp)
800029bc:	25042783          	lw	a5,592(s0)
800029c0:	00f747b3          	xor	a5,a4,a5
800029c4:	00000713          	li	a4,0
800029c8:	00079a63          	bnez	a5,800029dc <char_out+0x4c>
800029cc:	01c12083          	lw	ra,28(sp)
800029d0:	01812403          	lw	s0,24(sp)
800029d4:	02010113          	addi	sp,sp,32
800029d8:	00008067          	ret
800029dc:	134050ef          	jal	ra,80007b10 <_StackCheckHandler>

800029e0 <__printk_hook_install>:
800029e0:	00308013          	addi	zero,ra,3
{
800029e4:	fe010113          	addi	sp,sp,-32
800029e8:	00112e23          	sw	ra,28(sp)
800029ec:	8000d7b7          	lui	a5,0x8000d
800029f0:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800029f4:	00e12623          	sw	a4,12(sp)
800029f8:	00000713          	li	a4,0
	_char_out = fn;
800029fc:	80a1ae23          	sw	a0,-2020(gp) # 8000d904 <_char_out>
}
80002a00:	00c12703          	lw	a4,12(sp)
80002a04:	2507a783          	lw	a5,592(a5)
80002a08:	00f747b3          	xor	a5,a4,a5
80002a0c:	00000713          	li	a4,0
80002a10:	00079863          	bnez	a5,80002a20 <__printk_hook_install+0x40>
80002a14:	01c12083          	lw	ra,28(sp)
80002a18:	02010113          	addi	sp,sp,32
80002a1c:	00008067          	ret
80002a20:	0f0050ef          	jal	ra,80007b10 <_StackCheckHandler>

80002a24 <vprintk>:
80002a24:	00308013          	addi	zero,ra,3
{
80002a28:	fe010113          	addi	sp,sp,-32
80002a2c:	00112e23          	sw	ra,28(sp)
80002a30:	00812c23          	sw	s0,24(sp)
80002a34:	00050613          	mv	a2,a0
80002a38:	00058693          	mv	a3,a1
80002a3c:	8000d437          	lui	s0,0x8000d
80002a40:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002a44:	00f12623          	sw	a5,12(sp)
80002a48:	00000793          	li	a5,0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
80002a4c:	00000713          	li	a4,0
80002a50:	00000593          	li	a1,0
80002a54:	80003537          	lui	a0,0x80003
80002a58:	99050513          	addi	a0,a0,-1648 # 80002990 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80002991>
80002a5c:	475000ef          	jal	ra,800036d0 <z_cbvprintf_impl>
}
80002a60:	00c12703          	lw	a4,12(sp)
80002a64:	25042783          	lw	a5,592(s0)
80002a68:	00f747b3          	xor	a5,a4,a5
80002a6c:	00000713          	li	a4,0
80002a70:	00079a63          	bnez	a5,80002a84 <vprintk+0x60>
80002a74:	01c12083          	lw	ra,28(sp)
80002a78:	01812403          	lw	s0,24(sp)
80002a7c:	02010113          	addi	sp,sp,32
80002a80:	00008067          	ret
80002a84:	08c050ef          	jal	ra,80007b10 <_StackCheckHandler>

80002a88 <printk>:
80002a88:	00308013          	addi	zero,ra,3
{
80002a8c:	fc010113          	addi	sp,sp,-64
80002a90:	00112e23          	sw	ra,28(sp)
80002a94:	00812c23          	sw	s0,24(sp)
80002a98:	02b12223          	sw	a1,36(sp)
80002a9c:	02c12423          	sw	a2,40(sp)
80002aa0:	02d12623          	sw	a3,44(sp)
80002aa4:	02e12823          	sw	a4,48(sp)
80002aa8:	02f12a23          	sw	a5,52(sp)
80002aac:	03012c23          	sw	a6,56(sp)
80002ab0:	03112e23          	sw	a7,60(sp)
80002ab4:	8000d437          	lui	s0,0x8000d
80002ab8:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002abc:	00f12623          	sw	a5,12(sp)
80002ac0:	00000793          	li	a5,0
	va_start(ap, fmt);
80002ac4:	02410593          	addi	a1,sp,36
80002ac8:	00b12423          	sw	a1,8(sp)
	vprintk(fmt, ap);
80002acc:	f59ff0ef          	jal	ra,80002a24 <vprintk>
}
80002ad0:	00c12703          	lw	a4,12(sp)
80002ad4:	25042783          	lw	a5,592(s0)
80002ad8:	00f747b3          	xor	a5,a4,a5
80002adc:	00000713          	li	a4,0
80002ae0:	00079a63          	bnez	a5,80002af4 <printk+0x6c>
80002ae4:	01c12083          	lw	ra,28(sp)
80002ae8:	01812403          	lw	s0,24(sp)
80002aec:	04010113          	addi	sp,sp,64
80002af0:	00008067          	ret
80002af4:	01c050ef          	jal	ra,80007b10 <_StackCheckHandler>

80002af8 <z_thread_entry>:
80002af8:	00308013          	addi	zero,ra,3
{
80002afc:	fe010113          	addi	sp,sp,-32
80002b00:	00112e23          	sw	ra,28(sp)
80002b04:	00050793          	mv	a5,a0
80002b08:	00058513          	mv	a0,a1
80002b0c:	00060593          	mv	a1,a2
80002b10:	8000d737          	lui	a4,0x8000d
80002b14:	25072603          	lw	a2,592(a4) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002b18:	00c12623          	sw	a2,12(sp)
80002b1c:	00000613          	li	a2,0
	entry(p1, p2, p3);
80002b20:	00068613          	mv	a2,a3
80002b24:	000780e7          	jalr	a5
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
80002b28:	67d040ef          	jal	ra,800079a4 <z_impl_z_current_get>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
80002b2c:	799040ef          	jal	ra,80007ac4 <z_impl_k_thread_abort>

80002b30 <extract_decimal>:
80002b30:	00308013          	addi	zero,ra,3
{
80002b34:	fe010113          	addi	sp,sp,-32
80002b38:	00112e23          	sw	ra,28(sp)
80002b3c:	00050613          	mv	a2,a0
80002b40:	8000d7b7          	lui	a5,0x8000d
80002b44:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002b48:	00e12623          	sw	a4,12(sp)
80002b4c:	00000713          	li	a4,0
	const char *sp = *str;
80002b50:	00052703          	lw	a4,0(a0)
	size_t val = 0;
80002b54:	00000513          	li	a0,0
	while (isdigit((int)(unsigned char)*sp)) {
80002b58:	01c0006f          	j	80002b74 <extract_decimal+0x44>
		val = 10U * val + *sp++ - '0';
80002b5c:	00251793          	slli	a5,a0,0x2
80002b60:	00a787b3          	add	a5,a5,a0
80002b64:	00179793          	slli	a5,a5,0x1
80002b68:	00170713          	addi	a4,a4,1
80002b6c:	00d787b3          	add	a5,a5,a3
80002b70:	fd078513          	addi	a0,a5,-48
	while (isdigit((int)(unsigned char)*sp)) {
80002b74:	00074683          	lbu	a3,0(a4)
80002b78:	8000a7b7          	lui	a5,0x8000a
80002b7c:	78578793          	addi	a5,a5,1925 # 8000a785 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a786>
80002b80:	00f687b3          	add	a5,a3,a5
80002b84:	0007c783          	lbu	a5,0(a5)
80002b88:	0047f793          	andi	a5,a5,4
80002b8c:	fc0798e3          	bnez	a5,80002b5c <extract_decimal+0x2c>
	*str = sp;
80002b90:	00e62023          	sw	a4,0(a2)
}
80002b94:	8000d7b7          	lui	a5,0x8000d
80002b98:	00c12703          	lw	a4,12(sp)
80002b9c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002ba0:	00f747b3          	xor	a5,a4,a5
80002ba4:	00000713          	li	a4,0
80002ba8:	00079863          	bnez	a5,80002bb8 <extract_decimal+0x88>
80002bac:	01c12083          	lw	ra,28(sp)
80002bb0:	02010113          	addi	sp,sp,32
80002bb4:	00008067          	ret
80002bb8:	759040ef          	jal	ra,80007b10 <_StackCheckHandler>

80002bbc <extract_flags>:
80002bbc:	00308013          	addi	zero,ra,3
{
80002bc0:	fe010113          	addi	sp,sp,-32
80002bc4:	00112e23          	sw	ra,28(sp)
80002bc8:	00050613          	mv	a2,a0
80002bcc:	00058513          	mv	a0,a1
80002bd0:	8000d7b7          	lui	a5,0x8000d
80002bd4:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002bd8:	00e12623          	sw	a4,12(sp)
80002bdc:	00000713          	li	a4,0
	bool loop = true;
80002be0:	00100693          	li	a3,1
80002be4:	0640006f          	j	80002c48 <extract_flags+0x8c>
			conv->flag_dash = true;
80002be8:	00065783          	lhu	a5,0(a2)
80002bec:	0047e793          	ori	a5,a5,4
80002bf0:	00f61023          	sh	a5,0(a2)
		if (loop) {
80002bf4:	04068863          	beqz	a3,80002c44 <extract_flags+0x88>
			++sp;
80002bf8:	00150513          	addi	a0,a0,1
80002bfc:	0480006f          	j	80002c44 <extract_flags+0x88>
			conv->flag_plus = true;
80002c00:	00065783          	lhu	a5,0(a2)
80002c04:	0087e793          	ori	a5,a5,8
80002c08:	00f61023          	sh	a5,0(a2)
			break;
80002c0c:	fe9ff06f          	j	80002bf4 <extract_flags+0x38>
			conv->flag_space = true;
80002c10:	00065783          	lhu	a5,0(a2)
80002c14:	0107e793          	ori	a5,a5,16
80002c18:	00f61023          	sh	a5,0(a2)
			break;
80002c1c:	fd9ff06f          	j	80002bf4 <extract_flags+0x38>
			conv->flag_hash = true;
80002c20:	00065783          	lhu	a5,0(a2)
80002c24:	0207e793          	ori	a5,a5,32
80002c28:	00f61023          	sh	a5,0(a2)
			break;
80002c2c:	fc9ff06f          	j	80002bf4 <extract_flags+0x38>
			conv->flag_zero = true;
80002c30:	00065783          	lhu	a5,0(a2)
80002c34:	0407e793          	ori	a5,a5,64
80002c38:	00f61023          	sh	a5,0(a2)
			break;
80002c3c:	fb9ff06f          	j	80002bf4 <extract_flags+0x38>
		switch (*sp) {
80002c40:	00000693          	li	a3,0
	} while (loop);
80002c44:	02068863          	beqz	a3,80002c74 <extract_flags+0xb8>
		switch (*sp) {
80002c48:	00054783          	lbu	a5,0(a0)
80002c4c:	fe078793          	addi	a5,a5,-32
80002c50:	0ff7f593          	zext.b	a1,a5
80002c54:	01000713          	li	a4,16
80002c58:	feb764e3          	bltu	a4,a1,80002c40 <extract_flags+0x84>
80002c5c:	00259793          	slli	a5,a1,0x2
80002c60:	8000a737          	lui	a4,0x8000a
80002c64:	44870713          	addi	a4,a4,1096 # 8000a448 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a449>
80002c68:	00e787b3          	add	a5,a5,a4
80002c6c:	0007a783          	lw	a5,0(a5)
80002c70:	00078067          	jr	a5
	if (conv->flag_zero && conv->flag_dash) {
80002c74:	00062783          	lw	a5,0(a2)
80002c78:	0447f793          	andi	a5,a5,68
80002c7c:	04400713          	li	a4,68
80002c80:	02e78463          	beq	a5,a4,80002ca8 <extract_flags+0xec>
}
80002c84:	8000d7b7          	lui	a5,0x8000d
80002c88:	00c12703          	lw	a4,12(sp)
80002c8c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002c90:	00f747b3          	xor	a5,a4,a5
80002c94:	00000713          	li	a4,0
80002c98:	02079063          	bnez	a5,80002cb8 <extract_flags+0xfc>
80002c9c:	01c12083          	lw	ra,28(sp)
80002ca0:	02010113          	addi	sp,sp,32
80002ca4:	00008067          	ret
		conv->flag_zero = false;
80002ca8:	00065783          	lhu	a5,0(a2)
80002cac:	fbf7f793          	andi	a5,a5,-65
80002cb0:	00f61023          	sh	a5,0(a2)
80002cb4:	fd1ff06f          	j	80002c84 <extract_flags+0xc8>
}
80002cb8:	659040ef          	jal	ra,80007b10 <_StackCheckHandler>

80002cbc <extract_width>:
80002cbc:	00308013          	addi	zero,ra,3
{
80002cc0:	fd010113          	addi	sp,sp,-48
80002cc4:	02112623          	sw	ra,44(sp)
80002cc8:	02812423          	sw	s0,40(sp)
80002ccc:	02912223          	sw	s1,36(sp)
80002cd0:	00050413          	mv	s0,a0
80002cd4:	00b12623          	sw	a1,12(sp)
80002cd8:	8000d7b7          	lui	a5,0x8000d
80002cdc:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002ce0:	00e12e23          	sw	a4,28(sp)
80002ce4:	00000713          	li	a4,0
	conv->width_present = true;
80002ce8:	00055783          	lhu	a5,0(a0)
80002cec:	0807e793          	ori	a5,a5,128
80002cf0:	00f51023          	sh	a5,0(a0)
	if (*sp == '*') {
80002cf4:	00058493          	mv	s1,a1
80002cf8:	0005c703          	lbu	a4,0(a1)
80002cfc:	02a00793          	li	a5,42
80002d00:	08f70063          	beq	a4,a5,80002d80 <extract_width+0xc4>
	size_t width = extract_decimal(&sp);
80002d04:	00c10513          	addi	a0,sp,12
80002d08:	e29ff0ef          	jal	ra,80002b30 <extract_decimal>
	if (sp != wp) {
80002d0c:	00c12783          	lw	a5,12(sp)
80002d10:	04f48063          	beq	s1,a5,80002d50 <extract_width+0x94>
		conv->width_present = true;
80002d14:	00045783          	lhu	a5,0(s0)
80002d18:	0807e793          	ori	a5,a5,128
80002d1c:	00f41023          	sh	a5,0(s0)
		conv->width_value = width;
80002d20:	00a42223          	sw	a0,4(s0)
		conv->unsupported |= ((conv->width_value < 0)
80002d24:	00042783          	lw	a5,0(s0)
80002d28:	0017d793          	srli	a5,a5,0x1
80002d2c:	0017f793          	andi	a5,a5,1
				      || (width != (size_t)conv->width_value));
80002d30:	06054463          	bltz	a0,80002d98 <extract_width+0xdc>
80002d34:	00000713          	li	a4,0
		conv->unsupported |= ((conv->width_value < 0)
80002d38:	00e7e7b3          	or	a5,a5,a4
80002d3c:	00179793          	slli	a5,a5,0x1
80002d40:	00045703          	lhu	a4,0(s0)
80002d44:	ffd77713          	andi	a4,a4,-3
80002d48:	00f767b3          	or	a5,a4,a5
80002d4c:	00f41023          	sh	a5,0(s0)
	return sp;
80002d50:	00c12503          	lw	a0,12(sp)
}
80002d54:	8000d7b7          	lui	a5,0x8000d
80002d58:	01c12703          	lw	a4,28(sp)
80002d5c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002d60:	00f747b3          	xor	a5,a4,a5
80002d64:	00000713          	li	a4,0
80002d68:	02079c63          	bnez	a5,80002da0 <extract_width+0xe4>
80002d6c:	02c12083          	lw	ra,44(sp)
80002d70:	02812403          	lw	s0,40(sp)
80002d74:	02412483          	lw	s1,36(sp)
80002d78:	03010113          	addi	sp,sp,48
80002d7c:	00008067          	ret
		conv->width_star = true;
80002d80:	00055783          	lhu	a5,0(a0)
80002d84:	1007e793          	ori	a5,a5,256
80002d88:	00f51023          	sh	a5,0(a0)
		return ++sp;
80002d8c:	00158513          	addi	a0,a1,1
80002d90:	00a12623          	sw	a0,12(sp)
80002d94:	fc1ff06f          	j	80002d54 <extract_width+0x98>
				      || (width != (size_t)conv->width_value));
80002d98:	00100713          	li	a4,1
80002d9c:	f9dff06f          	j	80002d38 <extract_width+0x7c>
}
80002da0:	571040ef          	jal	ra,80007b10 <_StackCheckHandler>

80002da4 <extract_prec>:
80002da4:	00308013          	addi	zero,ra,3
{
80002da8:	fd010113          	addi	sp,sp,-48
80002dac:	02112623          	sw	ra,44(sp)
80002db0:	02812423          	sw	s0,40(sp)
80002db4:	00b12623          	sw	a1,12(sp)
80002db8:	8000d7b7          	lui	a5,0x8000d
80002dbc:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002dc0:	00e12e23          	sw	a4,28(sp)
80002dc4:	00000713          	li	a4,0
	conv->prec_present = (*sp == '.');
80002dc8:	0005c703          	lbu	a4,0(a1)
80002dcc:	fd270713          	addi	a4,a4,-46
80002dd0:	00173693          	seqz	a3,a4
80002dd4:	00969693          	slli	a3,a3,0x9
80002dd8:	00055783          	lhu	a5,0(a0)
80002ddc:	dff7f793          	andi	a5,a5,-513
80002de0:	00d7e7b3          	or	a5,a5,a3
80002de4:	00f51023          	sh	a5,0(a0)
	if (!conv->prec_present) {
80002de8:	08071263          	bnez	a4,80002e6c <extract_prec+0xc8>
80002dec:	00050413          	mv	s0,a0
	++sp;
80002df0:	00c12783          	lw	a5,12(sp)
80002df4:	00178713          	addi	a4,a5,1
80002df8:	00e12623          	sw	a4,12(sp)
	if (*sp == '*') {
80002dfc:	0017c703          	lbu	a4,1(a5)
80002e00:	02a00793          	li	a5,42
80002e04:	06f70863          	beq	a4,a5,80002e74 <extract_prec+0xd0>
	size_t prec = extract_decimal(&sp);
80002e08:	00c10513          	addi	a0,sp,12
80002e0c:	d25ff0ef          	jal	ra,80002b30 <extract_decimal>
	conv->prec_value = prec;
80002e10:	00a42423          	sw	a0,8(s0)
	conv->unsupported |= ((conv->prec_value < 0)
80002e14:	00042783          	lw	a5,0(s0)
80002e18:	0017d793          	srli	a5,a5,0x1
80002e1c:	0017f793          	andi	a5,a5,1
			      || (prec != (size_t)conv->prec_value));
80002e20:	06054863          	bltz	a0,80002e90 <extract_prec+0xec>
80002e24:	00000713          	li	a4,0
	conv->unsupported |= ((conv->prec_value < 0)
80002e28:	00e7e7b3          	or	a5,a5,a4
80002e2c:	00179793          	slli	a5,a5,0x1
80002e30:	00045703          	lhu	a4,0(s0)
80002e34:	ffd77713          	andi	a4,a4,-3
80002e38:	00f767b3          	or	a5,a4,a5
80002e3c:	00f41023          	sh	a5,0(s0)
	return sp;
80002e40:	00c12503          	lw	a0,12(sp)
}
80002e44:	8000d7b7          	lui	a5,0x8000d
80002e48:	01c12703          	lw	a4,28(sp)
80002e4c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002e50:	00f747b3          	xor	a5,a4,a5
80002e54:	00000713          	li	a4,0
80002e58:	04079063          	bnez	a5,80002e98 <extract_prec+0xf4>
80002e5c:	02c12083          	lw	ra,44(sp)
80002e60:	02812403          	lw	s0,40(sp)
80002e64:	03010113          	addi	sp,sp,48
80002e68:	00008067          	ret
		return sp;
80002e6c:	00058513          	mv	a0,a1
80002e70:	fd5ff06f          	j	80002e44 <extract_prec+0xa0>
		conv->prec_star = true;
80002e74:	00055783          	lhu	a5,0(a0)
80002e78:	4007e793          	ori	a5,a5,1024
80002e7c:	00f51023          	sh	a5,0(a0)
		return ++sp;
80002e80:	00c12503          	lw	a0,12(sp)
80002e84:	00150513          	addi	a0,a0,1
80002e88:	00a12623          	sw	a0,12(sp)
80002e8c:	fb9ff06f          	j	80002e44 <extract_prec+0xa0>
			      || (prec != (size_t)conv->prec_value));
80002e90:	00100713          	li	a4,1
80002e94:	f95ff06f          	j	80002e28 <extract_prec+0x84>
}
80002e98:	479040ef          	jal	ra,80007b10 <_StackCheckHandler>

80002e9c <extract_length>:
80002e9c:	00308013          	addi	zero,ra,3
{
80002ea0:	fe010113          	addi	sp,sp,-32
80002ea4:	00112e23          	sw	ra,28(sp)
80002ea8:	00050613          	mv	a2,a0
80002eac:	8000d7b7          	lui	a5,0x8000d
80002eb0:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002eb4:	00e12623          	sw	a4,12(sp)
80002eb8:	00000713          	li	a4,0
	switch (*sp) {
80002ebc:	0005c783          	lbu	a5,0(a1)
80002ec0:	fb478793          	addi	a5,a5,-76
80002ec4:	0ff7f693          	zext.b	a3,a5
80002ec8:	02e00713          	li	a4,46
80002ecc:	18d76a63          	bltu	a4,a3,80003060 <extract_length+0x1c4>
80002ed0:	00269793          	slli	a5,a3,0x2
80002ed4:	8000a737          	lui	a4,0x8000a
80002ed8:	48c70713          	addi	a4,a4,1164 # 8000a48c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a48d>
80002edc:	00e787b3          	add	a5,a5,a4
80002ee0:	0007a783          	lw	a5,0(a5)
80002ee4:	00078067          	jr	a5
		if (*++sp == 'h') {
80002ee8:	00158513          	addi	a0,a1,1
80002eec:	0015c703          	lbu	a4,1(a1)
80002ef0:	06800793          	li	a5,104
80002ef4:	02f70263          	beq	a4,a5,80002f18 <extract_length+0x7c>
			conv->length_mod = LENGTH_H;
80002ef8:	00065783          	lhu	a5,0(a2)
80002efc:	ffff8737          	lui	a4,0xffff8
80002f00:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002f04:	00e7f7b3          	and	a5,a5,a4
80002f08:	00001737          	lui	a4,0x1
80002f0c:	00e7e7b3          	or	a5,a5,a4
80002f10:	00f61023          	sh	a5,0(a2)
80002f14:	0a80006f          	j	80002fbc <extract_length+0x120>
			conv->length_mod = LENGTH_HH;
80002f18:	00065783          	lhu	a5,0(a2)
80002f1c:	ffff8737          	lui	a4,0xffff8
80002f20:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002f24:	00e7f7b3          	and	a5,a5,a4
80002f28:	00001737          	lui	a4,0x1
80002f2c:	80070713          	addi	a4,a4,-2048 # 800 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE>
80002f30:	00e7e7b3          	or	a5,a5,a4
80002f34:	00f61023          	sh	a5,0(a2)
			++sp;
80002f38:	00258513          	addi	a0,a1,2
80002f3c:	0800006f          	j	80002fbc <extract_length+0x120>
		if (*++sp == 'l') {
80002f40:	00158513          	addi	a0,a1,1
80002f44:	0015c703          	lbu	a4,1(a1)
80002f48:	06c00793          	li	a5,108
80002f4c:	02f70463          	beq	a4,a5,80002f74 <extract_length+0xd8>
			conv->length_mod = LENGTH_L;
80002f50:	00065783          	lhu	a5,0(a2)
80002f54:	ffff8737          	lui	a4,0xffff8
80002f58:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002f5c:	00e7f7b3          	and	a5,a5,a4
80002f60:	00002737          	lui	a4,0x2
80002f64:	80070713          	addi	a4,a4,-2048 # 1800 <CONFIG_ISR_STACK_SIZE+0x800>
80002f68:	00e7e7b3          	or	a5,a5,a4
80002f6c:	00f61023          	sh	a5,0(a2)
80002f70:	04c0006f          	j	80002fbc <extract_length+0x120>
			conv->length_mod = LENGTH_LL;
80002f74:	00065783          	lhu	a5,0(a2)
80002f78:	ffff8737          	lui	a4,0xffff8
80002f7c:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002f80:	00e7f7b3          	and	a5,a5,a4
80002f84:	00002737          	lui	a4,0x2
80002f88:	00e7e7b3          	or	a5,a5,a4
80002f8c:	00f61023          	sh	a5,0(a2)
			++sp;
80002f90:	00258513          	addi	a0,a1,2
80002f94:	0280006f          	j	80002fbc <extract_length+0x120>
		conv->length_mod = LENGTH_J;
80002f98:	00055783          	lhu	a5,0(a0)
80002f9c:	ffff8737          	lui	a4,0xffff8
80002fa0:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002fa4:	00e7f7b3          	and	a5,a5,a4
80002fa8:	00003737          	lui	a4,0x3
80002fac:	80070713          	addi	a4,a4,-2048 # 2800 <CONFIG_ISR_STACK_SIZE+0x1800>
80002fb0:	00e7e7b3          	or	a5,a5,a4
80002fb4:	00f51023          	sh	a5,0(a0)
		++sp;
80002fb8:	00158513          	addi	a0,a1,1
}
80002fbc:	8000d7b7          	lui	a5,0x8000d
80002fc0:	00c12703          	lw	a4,12(sp)
80002fc4:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80002fc8:	00f747b3          	xor	a5,a4,a5
80002fcc:	00000713          	li	a4,0
80002fd0:	0a079663          	bnez	a5,8000307c <extract_length+0x1e0>
80002fd4:	01c12083          	lw	ra,28(sp)
80002fd8:	02010113          	addi	sp,sp,32
80002fdc:	00008067          	ret
		conv->length_mod = LENGTH_Z;
80002fe0:	00055783          	lhu	a5,0(a0)
80002fe4:	ffff8737          	lui	a4,0xffff8
80002fe8:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002fec:	00e7f7b3          	and	a5,a5,a4
80002ff0:	00003737          	lui	a4,0x3
80002ff4:	00e7e7b3          	or	a5,a5,a4
80002ff8:	00f51023          	sh	a5,0(a0)
		++sp;
80002ffc:	00158513          	addi	a0,a1,1
		break;
80003000:	fbdff06f          	j	80002fbc <extract_length+0x120>
		conv->length_mod = LENGTH_T;
80003004:	00055783          	lhu	a5,0(a0)
80003008:	ffff8737          	lui	a4,0xffff8
8000300c:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80003010:	00e7f7b3          	and	a5,a5,a4
80003014:	00004737          	lui	a4,0x4
80003018:	80070713          	addi	a4,a4,-2048 # 3800 <__kernel_ram_size+0x7f0>
8000301c:	00e7e7b3          	or	a5,a5,a4
80003020:	00f51023          	sh	a5,0(a0)
		++sp;
80003024:	00158513          	addi	a0,a1,1
		break;
80003028:	f95ff06f          	j	80002fbc <extract_length+0x120>
		conv->length_mod = LENGTH_UPPER_L;
8000302c:	00055783          	lhu	a5,0(a0)
80003030:	ffff8737          	lui	a4,0xffff8
80003034:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80003038:	00e7f7b3          	and	a5,a5,a4
8000303c:	00004737          	lui	a4,0x4
80003040:	00e7e7b3          	or	a5,a5,a4
80003044:	00f51023          	sh	a5,0(a0)
		++sp;
80003048:	00158513          	addi	a0,a1,1
		conv->unsupported = true;
8000304c:	01079793          	slli	a5,a5,0x10
80003050:	0107d793          	srli	a5,a5,0x10
80003054:	0027e793          	ori	a5,a5,2
80003058:	00f61023          	sh	a5,0(a2)
		break;
8000305c:	f61ff06f          	j	80002fbc <extract_length+0x120>
		conv->length_mod = LENGTH_NONE;
80003060:	00065783          	lhu	a5,0(a2)
80003064:	ffff8737          	lui	a4,0xffff8
80003068:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
8000306c:	00e7f7b3          	and	a5,a5,a4
80003070:	00f61023          	sh	a5,0(a2)
		break;
80003074:	00058513          	mv	a0,a1
	return sp;
80003078:	f45ff06f          	j	80002fbc <extract_length+0x120>
}
8000307c:	295040ef          	jal	ra,80007b10 <_StackCheckHandler>

80003080 <extract_specifier>:
80003080:	00308013          	addi	zero,ra,3
{
80003084:	fe010113          	addi	sp,sp,-32
80003088:	00112e23          	sw	ra,28(sp)
8000308c:	00050713          	mv	a4,a0
80003090:	8000d7b7          	lui	a5,0x8000d
80003094:	2507a683          	lw	a3,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003098:	00d12623          	sw	a3,12(sp)
8000309c:	00000693          	li	a3,0
	conv->specifier = *sp++;
800030a0:	00158513          	addi	a0,a1,1
800030a4:	0005c783          	lbu	a5,0(a1)
800030a8:	00f701a3          	sb	a5,3(a4)
	switch (conv->specifier) {
800030ac:	07800693          	li	a3,120
800030b0:	04f6ea63          	bltu	a3,a5,80003104 <extract_specifier+0x84>
800030b4:	06e00693          	li	a3,110
800030b8:	08d7fa63          	bgeu	a5,a3,8000314c <extract_specifier+0xcc>
800030bc:	06900693          	li	a3,105
800030c0:	04f6e263          	bltu	a3,a5,80003104 <extract_specifier+0x84>
800030c4:	05800693          	li	a3,88
800030c8:	04d7e863          	bltu	a5,a3,80003118 <extract_specifier+0x98>
800030cc:	fa878613          	addi	a2,a5,-88
800030d0:	00100693          	li	a3,1
800030d4:	00c696b3          	sll	a3,a3,a2
800030d8:	0000e637          	lui	a2,0xe
800030dc:	20060613          	addi	a2,a2,512 # e200 <__rom_region_size+0x38e4>
800030e0:	00c6f633          	and	a2,a3,a2
800030e4:	04061863          	bnez	a2,80003134 <extract_specifier+0xb4>
800030e8:	00001637          	lui	a2,0x1
800030ec:	80160613          	addi	a2,a2,-2047 # 801 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1>
800030f0:	00c6f633          	and	a2,a3,a2
800030f4:	12061863          	bnez	a2,80003224 <extract_specifier+0x1a4>
800030f8:	00021637          	lui	a2,0x21
800030fc:	00c6f6b3          	and	a3,a3,a2
80003100:	0a069463          	bnez	a3,800031a8 <extract_specifier+0x128>
		conv->invalid = true;
80003104:	00075783          	lhu	a5,0(a4)
80003108:	0017e793          	ori	a5,a5,1
8000310c:	00f71023          	sh	a5,0(a4)
	bool unsupported = false;
80003110:	00000793          	li	a5,0
		break;
80003114:	0c80006f          	j	800031dc <extract_specifier+0x15c>
	switch (conv->specifier) {
80003118:	04100693          	li	a3,65
8000311c:	00d78c63          	beq	a5,a3,80003134 <extract_specifier+0xb4>
80003120:	fed7e2e3          	bltu	a5,a3,80003104 <extract_specifier+0x84>
80003124:	fbb78793          	addi	a5,a5,-69
80003128:	0ff7f793          	zext.b	a5,a5
8000312c:	00200693          	li	a3,2
80003130:	fcf6eae3          	bltu	a3,a5,80003104 <extract_specifier+0x84>
		conv->specifier_cat = SPECIFIER_FP;
80003134:	00274783          	lbu	a5,2(a4)
80003138:	ff87f793          	andi	a5,a5,-8
8000313c:	0047e793          	ori	a5,a5,4
80003140:	00f70123          	sb	a5,2(a4)
			unsupported = true;
80003144:	00100793          	li	a5,1
			break;
80003148:	0940006f          	j	800031dc <extract_specifier+0x15c>
	switch (conv->specifier) {
8000314c:	f9278613          	addi	a2,a5,-110
80003150:	00100693          	li	a3,1
80003154:	00c696b3          	sll	a3,a3,a2
80003158:	4826f613          	andi	a2,a3,1154
8000315c:	00c035b3          	snez	a1,a2
80003160:	0c061263          	bnez	a2,80003224 <extract_specifier+0x1a4>
80003164:	0246f613          	andi	a2,a3,36
80003168:	00c037b3          	snez	a5,a2
8000316c:	0e061a63          	bnez	a2,80003260 <extract_specifier+0x1e0>
80003170:	0016f693          	andi	a3,a3,1
80003174:	f80688e3          	beqz	a3,80003104 <extract_specifier+0x84>
		conv->specifier_cat = SPECIFIER_PTR;
80003178:	00274603          	lbu	a2,2(a4)
8000317c:	ff867613          	andi	a2,a2,-8
80003180:	00366613          	ori	a2,a2,3
80003184:	00c70123          	sb	a2,2(a4)
		if (conv->length_mod == LENGTH_UPPER_L) {
80003188:	00075603          	lhu	a2,0(a4)
8000318c:	000085b7          	lui	a1,0x8
80003190:	80058593          	addi	a1,a1,-2048 # 7800 <__kernel_ram_size+0x47f0>
80003194:	00b67633          	and	a2,a2,a1
80003198:	000045b7          	lui	a1,0x4
8000319c:	04b61063          	bne	a2,a1,800031dc <extract_specifier+0x15c>
			unsupported = true;
800031a0:	00068793          	mv	a5,a3
800031a4:	0380006f          	j	800031dc <extract_specifier+0x15c>
		conv->specifier_cat = SPECIFIER_SINT;
800031a8:	00274683          	lbu	a3,2(a4)
800031ac:	ff86f693          	andi	a3,a3,-8
800031b0:	0016e693          	ori	a3,a3,1
800031b4:	00d70123          	sb	a3,2(a4)
		if (conv->length_mod == LENGTH_UPPER_L) {
800031b8:	00075683          	lhu	a3,0(a4)
800031bc:	00008637          	lui	a2,0x8
800031c0:	80060613          	addi	a2,a2,-2048 # 7800 <__kernel_ram_size+0x47f0>
800031c4:	00c6f6b3          	and	a3,a3,a2
800031c8:	00004637          	lui	a2,0x4
800031cc:	06c68663          	beq	a3,a2,80003238 <extract_specifier+0x1b8>
		if (conv->specifier == 'c') {
800031d0:	06300693          	li	a3,99
800031d4:	06d78a63          	beq	a5,a3,80003248 <extract_specifier+0x1c8>
	bool unsupported = false;
800031d8:	00000793          	li	a5,0
	conv->unsupported |= unsupported;
800031dc:	00072683          	lw	a3,0(a4)
800031e0:	0016d693          	srli	a3,a3,0x1
800031e4:	0016f693          	andi	a3,a3,1
800031e8:	00d7e7b3          	or	a5,a5,a3
800031ec:	00179793          	slli	a5,a5,0x1
800031f0:	00075683          	lhu	a3,0(a4)
800031f4:	ffd6f693          	andi	a3,a3,-3
800031f8:	00f6e7b3          	or	a5,a3,a5
800031fc:	00f71023          	sh	a5,0(a4)
}
80003200:	8000d7b7          	lui	a5,0x8000d
80003204:	00c12703          	lw	a4,12(sp)
80003208:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000320c:	00f747b3          	xor	a5,a4,a5
80003210:	00000713          	li	a4,0
80003214:	06079c63          	bnez	a5,8000328c <extract_specifier+0x20c>
80003218:	01c12083          	lw	ra,28(sp)
8000321c:	02010113          	addi	sp,sp,32
80003220:	00008067          	ret
		conv->specifier_cat = SPECIFIER_UINT;
80003224:	00274683          	lbu	a3,2(a4)
80003228:	ff86f693          	andi	a3,a3,-8
8000322c:	0026e693          	ori	a3,a3,2
80003230:	00d70123          	sb	a3,2(a4)
80003234:	f85ff06f          	j	800031b8 <extract_specifier+0x138>
			conv->invalid = true;
80003238:	00075683          	lhu	a3,0(a4)
8000323c:	0016e693          	ori	a3,a3,1
80003240:	00d71023          	sh	a3,0(a4)
80003244:	f8dff06f          	j	800031d0 <extract_specifier+0x150>
			unsupported = (conv->length_mod != LENGTH_NONE);
80003248:	00075783          	lhu	a5,0(a4)
8000324c:	000086b7          	lui	a3,0x8
80003250:	80068693          	addi	a3,a3,-2048 # 7800 <__kernel_ram_size+0x47f0>
80003254:	00d7f7b3          	and	a5,a5,a3
80003258:	00f037b3          	snez	a5,a5
8000325c:	f81ff06f          	j	800031dc <extract_specifier+0x15c>
		conv->specifier_cat = SPECIFIER_PTR;
80003260:	00274683          	lbu	a3,2(a4)
80003264:	ff86f693          	andi	a3,a3,-8
80003268:	0036e693          	ori	a3,a3,3
8000326c:	00d70123          	sb	a3,2(a4)
		if (conv->length_mod != LENGTH_NONE) {
80003270:	00075683          	lhu	a3,0(a4)
80003274:	00008637          	lui	a2,0x8
80003278:	80060613          	addi	a2,a2,-2048 # 7800 <__kernel_ram_size+0x47f0>
8000327c:	00c6f6b3          	and	a3,a3,a2
80003280:	f4069ee3          	bnez	a3,800031dc <extract_specifier+0x15c>
	bool unsupported = false;
80003284:	00058793          	mv	a5,a1
80003288:	f55ff06f          	j	800031dc <extract_specifier+0x15c>
}
8000328c:	085040ef          	jal	ra,80007b10 <_StackCheckHandler>

80003290 <extract_conversion>:
80003290:	00308013          	addi	zero,ra,3
{
80003294:	fe010113          	addi	sp,sp,-32
80003298:	00112e23          	sw	ra,28(sp)
8000329c:	00812c23          	sw	s0,24(sp)
800032a0:	00050413          	mv	s0,a0
800032a4:	8000d7b7          	lui	a5,0x8000d
800032a8:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800032ac:	00e12623          	sw	a4,12(sp)
800032b0:	00000713          	li	a4,0
	*conv = (struct conversion) {
800032b4:	00052023          	sw	zero,0(a0)
800032b8:	00052223          	sw	zero,4(a0)
800032bc:	00052423          	sw	zero,8(a0)
	if (*sp == '%') {
800032c0:	0015c783          	lbu	a5,1(a1) # 4001 <__kernel_ram_size+0xff1>
800032c4:	02500713          	li	a4,37
800032c8:	06e78463          	beq	a5,a4,80003330 <extract_conversion+0xa0>
800032cc:	00158593          	addi	a1,a1,1
	sp = extract_flags(conv, sp);
800032d0:	00040513          	mv	a0,s0
800032d4:	8e9ff0ef          	jal	ra,80002bbc <extract_flags>
800032d8:	00050593          	mv	a1,a0
	sp = extract_width(conv, sp);
800032dc:	00040513          	mv	a0,s0
800032e0:	9ddff0ef          	jal	ra,80002cbc <extract_width>
800032e4:	00050593          	mv	a1,a0
	sp = extract_prec(conv, sp);
800032e8:	00040513          	mv	a0,s0
800032ec:	ab9ff0ef          	jal	ra,80002da4 <extract_prec>
800032f0:	00050593          	mv	a1,a0
	sp = extract_length(conv, sp);
800032f4:	00040513          	mv	a0,s0
800032f8:	ba5ff0ef          	jal	ra,80002e9c <extract_length>
800032fc:	00050593          	mv	a1,a0
	sp = extract_specifier(conv, sp);
80003300:	00040513          	mv	a0,s0
80003304:	d7dff0ef          	jal	ra,80003080 <extract_specifier>
}
80003308:	8000d7b7          	lui	a5,0x8000d
8000330c:	00c12703          	lw	a4,12(sp)
80003310:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003314:	00f747b3          	xor	a5,a4,a5
80003318:	00000713          	li	a4,0
8000331c:	02079063          	bnez	a5,8000333c <extract_conversion+0xac>
80003320:	01c12083          	lw	ra,28(sp)
80003324:	01812403          	lw	s0,24(sp)
80003328:	02010113          	addi	sp,sp,32
8000332c:	00008067          	ret
		conv->specifier = *sp++;
80003330:	00258513          	addi	a0,a1,2
80003334:	00f401a3          	sb	a5,3(s0)
		return sp;
80003338:	fd1ff06f          	j	80003308 <extract_conversion+0x78>
}
8000333c:	7d4040ef          	jal	ra,80007b10 <_StackCheckHandler>

80003340 <conversion_radix>:
80003340:	00308013          	addi	zero,ra,3
{
80003344:	fe010113          	addi	sp,sp,-32
80003348:	00112e23          	sw	ra,28(sp)
8000334c:	8000d7b7          	lui	a5,0x8000d
80003350:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003354:	00e12623          	sw	a4,12(sp)
80003358:	00000713          	li	a4,0
	switch (specifier) {
8000335c:	06f00793          	li	a5,111
80003360:	04f50c63          	beq	a0,a5,800033b8 <conversion_radix+0x78>
80003364:	02a7fe63          	bgeu	a5,a0,800033a0 <conversion_radix+0x60>
80003368:	07000793          	li	a5,112
8000336c:	04f50a63          	beq	a0,a5,800033c0 <conversion_radix+0x80>
80003370:	07800793          	li	a5,120
80003374:	04f51a63          	bne	a0,a5,800033c8 <conversion_radix+0x88>
		return 16;
80003378:	01000513          	li	a0,16
}
8000337c:	8000d7b7          	lui	a5,0x8000d
80003380:	00c12703          	lw	a4,12(sp)
80003384:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003388:	00f747b3          	xor	a5,a4,a5
8000338c:	00000713          	li	a4,0
80003390:	04079063          	bnez	a5,800033d0 <conversion_radix+0x90>
80003394:	01c12083          	lw	ra,28(sp)
80003398:	02010113          	addi	sp,sp,32
8000339c:	00008067          	ret
	switch (specifier) {
800033a0:	05800793          	li	a5,88
800033a4:	00f50663          	beq	a0,a5,800033b0 <conversion_radix+0x70>
800033a8:	00a00513          	li	a0,10
800033ac:	fd1ff06f          	j	8000337c <conversion_radix+0x3c>
		return 16;
800033b0:	01000513          	li	a0,16
800033b4:	fc9ff06f          	j	8000337c <conversion_radix+0x3c>
		return 8;
800033b8:	00800513          	li	a0,8
800033bc:	fc1ff06f          	j	8000337c <conversion_radix+0x3c>
		return 16;
800033c0:	01000513          	li	a0,16
800033c4:	fb9ff06f          	j	8000337c <conversion_radix+0x3c>
	switch (specifier) {
800033c8:	00a00513          	li	a0,10
800033cc:	fb1ff06f          	j	8000337c <conversion_radix+0x3c>
}
800033d0:	740040ef          	jal	ra,80007b10 <_StackCheckHandler>

800033d4 <encode_uint>:
800033d4:	00308013          	addi	zero,ra,3
{
800033d8:	fc010113          	addi	sp,sp,-64
800033dc:	02112e23          	sw	ra,60(sp)
800033e0:	02812c23          	sw	s0,56(sp)
800033e4:	02912a23          	sw	s1,52(sp)
800033e8:	03212823          	sw	s2,48(sp)
800033ec:	03312623          	sw	s3,44(sp)
800033f0:	03412423          	sw	s4,40(sp)
800033f4:	03512223          	sw	s5,36(sp)
800033f8:	03612023          	sw	s6,32(sp)
800033fc:	01712e23          	sw	s7,28(sp)
80003400:	01812c23          	sw	s8,24(sp)
80003404:	00050993          	mv	s3,a0
80003408:	00058413          	mv	s0,a1
8000340c:	00060c13          	mv	s8,a2
80003410:	00068a93          	mv	s5,a3
80003414:	00070493          	mv	s1,a4
80003418:	8000d7b7          	lui	a5,0x8000d
8000341c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003420:	00e12623          	sw	a4,12(sp)
80003424:	00000713          	li	a4,0
	bool upcase = isupper((int)conv->specifier);
80003428:	00364503          	lbu	a0,3(a2)
8000342c:	8000a7b7          	lui	a5,0x8000a
80003430:	78578793          	addi	a5,a5,1925 # 8000a785 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a786>
80003434:	00f507b3          	add	a5,a0,a5
80003438:	0007cb83          	lbu	s7,0(a5)
8000343c:	003bfb93          	andi	s7,s7,3
	const unsigned int radix = conversion_radix(conv->specifier);
80003440:	f01ff0ef          	jal	ra,80003340 <conversion_radix>
80003444:	00050913          	mv	s2,a0
	char *bp = bps + (bpe - bps);
80003448:	0480006f          	j	80003490 <encode_uint+0xbc>
		*--bp = (lsv <= 9) ? ('0' + lsv)
8000344c:	00100793          	li	a5,1
80003450:	06fb8a63          	beq	s7,a5,800034c4 <encode_uint+0xf0>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
80003454:	0ff57793          	zext.b	a5,a0
		*--bp = (lsv <= 9) ? ('0' + lsv)
80003458:	05778793          	addi	a5,a5,87
8000345c:	0ff7f793          	zext.b	a5,a5
80003460:	fff48493          	addi	s1,s1,-1
80003464:	00f48023          	sb	a5,0(s1)
		value /= radix;
80003468:	00090613          	mv	a2,s2
8000346c:	00000693          	li	a3,0
80003470:	00098513          	mv	a0,s3
80003474:	00040593          	mv	a1,s0
80003478:	d6dfc0ef          	jal	ra,800001e4 <__udivdi3>
	} while ((value != 0) && (bps < bp));
8000347c:	05446e63          	bltu	s0,s4,800034d8 <encode_uint+0x104>
80003480:	048a0a63          	beq	s4,s0,800034d4 <encode_uint+0x100>
80003484:	049afa63          	bgeu	s5,s1,800034d8 <encode_uint+0x104>
		value /= radix;
80003488:	00050993          	mv	s3,a0
8000348c:	00058413          	mv	s0,a1
		unsigned int lsv = (unsigned int)(value % radix);
80003490:	00090b13          	mv	s6,s2
80003494:	00000a13          	li	s4,0
80003498:	00090613          	mv	a2,s2
8000349c:	00000693          	li	a3,0
800034a0:	00098513          	mv	a0,s3
800034a4:	00040593          	mv	a1,s0
800034a8:	96cfd0ef          	jal	ra,80000614 <__umoddi3>
		*--bp = (lsv <= 9) ? ('0' + lsv)
800034ac:	00900793          	li	a5,9
800034b0:	f8a7eee3          	bltu	a5,a0,8000344c <encode_uint+0x78>
800034b4:	0ff57793          	zext.b	a5,a0
800034b8:	03078793          	addi	a5,a5,48
800034bc:	0ff7f793          	zext.b	a5,a5
800034c0:	fa1ff06f          	j	80003460 <encode_uint+0x8c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
800034c4:	0ff57793          	zext.b	a5,a0
		*--bp = (lsv <= 9) ? ('0' + lsv)
800034c8:	03778793          	addi	a5,a5,55
800034cc:	0ff7f793          	zext.b	a5,a5
800034d0:	f91ff06f          	j	80003460 <encode_uint+0x8c>
	} while ((value != 0) && (bps < bp));
800034d4:	fb69f8e3          	bgeu	s3,s6,80003484 <encode_uint+0xb0>
	if (conv->flag_hash) {
800034d8:	000c5783          	lhu	a5,0(s8)
800034dc:	0207f793          	andi	a5,a5,32
800034e0:	00078a63          	beqz	a5,800034f4 <encode_uint+0x120>
		if (radix == 8) {
800034e4:	00800793          	li	a5,8
800034e8:	04f90c63          	beq	s2,a5,80003540 <encode_uint+0x16c>
		} else if (radix == 16) {
800034ec:	01000793          	li	a5,16
800034f0:	06f90063          	beq	s2,a5,80003550 <encode_uint+0x17c>
}
800034f4:	8000d7b7          	lui	a5,0x8000d
800034f8:	00c12703          	lw	a4,12(sp)
800034fc:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003500:	00f747b3          	xor	a5,a4,a5
80003504:	00000713          	li	a4,0
80003508:	04079c63          	bnez	a5,80003560 <encode_uint+0x18c>
8000350c:	00048513          	mv	a0,s1
80003510:	03c12083          	lw	ra,60(sp)
80003514:	03812403          	lw	s0,56(sp)
80003518:	03412483          	lw	s1,52(sp)
8000351c:	03012903          	lw	s2,48(sp)
80003520:	02c12983          	lw	s3,44(sp)
80003524:	02812a03          	lw	s4,40(sp)
80003528:	02412a83          	lw	s5,36(sp)
8000352c:	02012b03          	lw	s6,32(sp)
80003530:	01c12b83          	lw	s7,28(sp)
80003534:	01812c03          	lw	s8,24(sp)
80003538:	04010113          	addi	sp,sp,64
8000353c:	00008067          	ret
			conv->altform_0 = true;
80003540:	002c4783          	lbu	a5,2(s8)
80003544:	0087e793          	ori	a5,a5,8
80003548:	00fc0123          	sb	a5,2(s8)
8000354c:	fa9ff06f          	j	800034f4 <encode_uint+0x120>
			conv->altform_0c = true;
80003550:	002c4783          	lbu	a5,2(s8)
80003554:	0107e793          	ori	a5,a5,16
80003558:	00fc0123          	sb	a5,2(s8)
8000355c:	f99ff06f          	j	800034f4 <encode_uint+0x120>
}
80003560:	5b0040ef          	jal	ra,80007b10 <_StackCheckHandler>

80003564 <store_count>:
80003564:	00308013          	addi	zero,ra,3
{
80003568:	fe010113          	addi	sp,sp,-32
8000356c:	00112e23          	sw	ra,28(sp)
80003570:	8000d7b7          	lui	a5,0x8000d
80003574:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003578:	00e12623          	sw	a4,12(sp)
8000357c:	00000713          	li	a4,0
	switch ((enum length_mod_enum)conv->length_mod) {
80003580:	00052783          	lw	a5,0(a0)
80003584:	00b7d793          	srli	a5,a5,0xb
80003588:	00f7f793          	andi	a5,a5,15
8000358c:	00700713          	li	a4,7
80003590:	02f76063          	bltu	a4,a5,800035b0 <store_count+0x4c>
80003594:	00279793          	slli	a5,a5,0x2
80003598:	8000a737          	lui	a4,0x8000a
8000359c:	54870713          	addi	a4,a4,1352 # 8000a548 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a549>
800035a0:	00e787b3          	add	a5,a5,a4
800035a4:	0007a783          	lw	a5,0(a5)
800035a8:	00078067          	jr	a5
		*(int *)dp = count;
800035ac:	00c5a023          	sw	a2,0(a1)
}
800035b0:	8000d7b7          	lui	a5,0x8000d
800035b4:	00c12703          	lw	a4,12(sp)
800035b8:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800035bc:	00f747b3          	xor	a5,a4,a5
800035c0:	00000713          	li	a4,0
800035c4:	04079c63          	bnez	a5,8000361c <store_count+0xb8>
800035c8:	01c12083          	lw	ra,28(sp)
800035cc:	02010113          	addi	sp,sp,32
800035d0:	00008067          	ret
		*(signed char *)dp = (signed char)count;
800035d4:	00c58023          	sb	a2,0(a1)
		break;
800035d8:	fd9ff06f          	j	800035b0 <store_count+0x4c>
		*(short *)dp = (short)count;
800035dc:	00c59023          	sh	a2,0(a1)
		break;
800035e0:	fd1ff06f          	j	800035b0 <store_count+0x4c>
		*(long *)dp = (long)count;
800035e4:	00c5a023          	sw	a2,0(a1)
		break;
800035e8:	fc9ff06f          	j	800035b0 <store_count+0x4c>
		*(long long *)dp = (long long)count;
800035ec:	41f65793          	srai	a5,a2,0x1f
800035f0:	00c5a023          	sw	a2,0(a1)
800035f4:	00f5a223          	sw	a5,4(a1)
		break;
800035f8:	fb9ff06f          	j	800035b0 <store_count+0x4c>
		*(intmax_t *)dp = (intmax_t)count;
800035fc:	41f65793          	srai	a5,a2,0x1f
80003600:	00c5a023          	sw	a2,0(a1)
80003604:	00f5a223          	sw	a5,4(a1)
		break;
80003608:	fa9ff06f          	j	800035b0 <store_count+0x4c>
		*(size_t *)dp = (size_t)count;
8000360c:	00c5a023          	sw	a2,0(a1)
		break;
80003610:	fa1ff06f          	j	800035b0 <store_count+0x4c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
80003614:	00c5a023          	sw	a2,0(a1)
}
80003618:	f99ff06f          	j	800035b0 <store_count+0x4c>
8000361c:	4f4040ef          	jal	ra,80007b10 <_StackCheckHandler>

80003620 <outs>:
80003620:	00308013          	addi	zero,ra,3
{
80003624:	fd010113          	addi	sp,sp,-48
80003628:	02112623          	sw	ra,44(sp)
8000362c:	02812423          	sw	s0,40(sp)
80003630:	02912223          	sw	s1,36(sp)
80003634:	03212023          	sw	s2,32(sp)
80003638:	01312e23          	sw	s3,28(sp)
8000363c:	01412c23          	sw	s4,24(sp)
80003640:	00050a13          	mv	s4,a0
80003644:	00058993          	mv	s3,a1
80003648:	00068913          	mv	s2,a3
8000364c:	8000d7b7          	lui	a5,0x8000d
80003650:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003654:	00e12623          	sw	a4,12(sp)
80003658:	00000713          	li	a4,0
	size_t count = 0;
8000365c:	00000413          	li	s0,0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
80003660:	0200006f          	j	80003680 <outs+0x60>
		int rc = out((int)*sp++, ctx);
80003664:	00160493          	addi	s1,a2,1
80003668:	00098593          	mv	a1,s3
8000366c:	00064503          	lbu	a0,0(a2)
80003670:	000a00e7          	jalr	s4
		if (rc < 0) {
80003674:	02054063          	bltz	a0,80003694 <outs+0x74>
		++count;
80003678:	00140413          	addi	s0,s0,1
		int rc = out((int)*sp++, ctx);
8000367c:	00048613          	mv	a2,s1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
80003680:	ff2662e3          	bltu	a2,s2,80003664 <outs+0x44>
80003684:	00091663          	bnez	s2,80003690 <outs+0x70>
80003688:	00064783          	lbu	a5,0(a2)
8000368c:	fc079ce3          	bnez	a5,80003664 <outs+0x44>
	return (int)count;
80003690:	00040513          	mv	a0,s0
}
80003694:	8000d7b7          	lui	a5,0x8000d
80003698:	00c12703          	lw	a4,12(sp)
8000369c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800036a0:	00f747b3          	xor	a5,a4,a5
800036a4:	00000713          	li	a4,0
800036a8:	02079263          	bnez	a5,800036cc <outs+0xac>
800036ac:	02c12083          	lw	ra,44(sp)
800036b0:	02812403          	lw	s0,40(sp)
800036b4:	02412483          	lw	s1,36(sp)
800036b8:	02012903          	lw	s2,32(sp)
800036bc:	01c12983          	lw	s3,28(sp)
800036c0:	01812a03          	lw	s4,24(sp)
800036c4:	03010113          	addi	sp,sp,48
800036c8:	00008067          	ret
800036cc:	444040ef          	jal	ra,80007b10 <_StackCheckHandler>

800036d0 <z_cbvprintf_impl>:
800036d0:	00308013          	addi	zero,ra,3
{
800036d4:	f8010113          	addi	sp,sp,-128
800036d8:	06112e23          	sw	ra,124(sp)
800036dc:	06812c23          	sw	s0,120(sp)
800036e0:	06912a23          	sw	s1,116(sp)
800036e4:	07212823          	sw	s2,112(sp)
800036e8:	07312623          	sw	s3,108(sp)
800036ec:	07412423          	sw	s4,104(sp)
800036f0:	07512223          	sw	s5,100(sp)
800036f4:	07612023          	sw	s6,96(sp)
800036f8:	05712e23          	sw	s7,92(sp)
800036fc:	05812c23          	sw	s8,88(sp)
80003700:	00050913          	mv	s2,a0
80003704:	00058493          	mv	s1,a1
80003708:	00060a93          	mv	s5,a2
8000370c:	00d12623          	sw	a3,12(sp)
80003710:	8000d7b7          	lui	a5,0x8000d
80003714:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003718:	04e12623          	sw	a4,76(sp)
8000371c:	00000713          	li	a4,0
	size_t count = 0;
80003720:	00000413          	li	s0,0
	while (*fp != 0) {
80003724:	000ac503          	lbu	a0,0(s5)
80003728:	78050063          	beqz	a0,80003ea8 <z_cbvprintf_impl+0x7d8>
		if (*fp != '%') {
8000372c:	02500793          	li	a5,37
80003730:	00f50e63          	beq	a0,a5,8000374c <z_cbvprintf_impl+0x7c>
			OUTC(*fp++);
80003734:	001a8a93          	addi	s5,s5,1
80003738:	00048593          	mv	a1,s1
8000373c:	000900e7          	jalr	s2
80003740:	76054663          	bltz	a0,80003eac <z_cbvprintf_impl+0x7dc>
80003744:	00140413          	addi	s0,s0,1
			continue;
80003748:	fddff06f          	j	80003724 <z_cbvprintf_impl+0x54>
		} state = {
8000374c:	00012823          	sw	zero,16(sp)
80003750:	00012a23          	sw	zero,20(sp)
80003754:	00012c23          	sw	zero,24(sp)
80003758:	00012e23          	sw	zero,28(sp)
8000375c:	02012023          	sw	zero,32(sp)
80003760:	02012223          	sw	zero,36(sp)
80003764:	02012423          	sw	zero,40(sp)
80003768:	02012623          	sw	zero,44(sp)
		fp = extract_conversion(conv, sp);
8000376c:	000a8593          	mv	a1,s5
80003770:	02010513          	addi	a0,sp,32
80003774:	b1dff0ef          	jal	ra,80003290 <extract_conversion>
80003778:	00050993          	mv	s3,a0
		if (conv->width_star) {
8000377c:	02015783          	lhu	a5,32(sp)
80003780:	1007f713          	andi	a4,a5,256
80003784:	0c070263          	beqz	a4,80003848 <z_cbvprintf_impl+0x178>
			width = va_arg(ap, int);
80003788:	00c12783          	lw	a5,12(sp)
8000378c:	00478713          	addi	a4,a5,4
80003790:	00e12623          	sw	a4,12(sp)
80003794:	0007aa03          	lw	s4,0(a5)
			if (width < 0) {
80003798:	080a4e63          	bltz	s4,80003834 <z_cbvprintf_impl+0x164>
		if (conv->prec_star) {
8000379c:	02015783          	lhu	a5,32(sp)
800037a0:	4007f713          	andi	a4,a5,1024
800037a4:	0c070863          	beqz	a4,80003874 <z_cbvprintf_impl+0x1a4>
			int arg = va_arg(ap, int);
800037a8:	00c12783          	lw	a5,12(sp)
800037ac:	00478713          	addi	a4,a5,4
800037b0:	00e12623          	sw	a4,12(sp)
800037b4:	0007ab03          	lw	s6,0(a5)
			if (arg < 0) {
800037b8:	0a0b4463          	bltz	s6,80003860 <z_cbvprintf_impl+0x190>
		conv->pad0_value = 0;
800037bc:	02012223          	sw	zero,36(sp)
		conv->pad0_pre_exp = 0;
800037c0:	02012423          	sw	zero,40(sp)
			= (enum specifier_cat_enum)conv->specifier_cat;
800037c4:	02012783          	lw	a5,32(sp)
800037c8:	0107d713          	srli	a4,a5,0x10
800037cc:	00777713          	andi	a4,a4,7
			= (enum length_mod_enum)conv->length_mod;
800037d0:	00b7d793          	srli	a5,a5,0xb
800037d4:	00f7f793          	andi	a5,a5,15
		enum length_mod_enum length_mod
800037d8:	00078693          	mv	a3,a5
		if (specifier_cat == SPECIFIER_SINT) {
800037dc:	00100613          	li	a2,1
800037e0:	0ac70663          	beq	a4,a2,8000388c <z_cbvprintf_impl+0x1bc>
		} else if (specifier_cat == SPECIFIER_UINT) {
800037e4:	00200613          	li	a2,2
800037e8:	1ec70063          	beq	a4,a2,800039c8 <z_cbvprintf_impl+0x2f8>
		} else if (specifier_cat == SPECIFIER_FP) {
800037ec:	00400793          	li	a5,4
800037f0:	2cf70a63          	beq	a4,a5,80003ac4 <z_cbvprintf_impl+0x3f4>
		} else if (specifier_cat == SPECIFIER_PTR) {
800037f4:	00300793          	li	a5,3
800037f8:	32f70863          	beq	a4,a5,80003b28 <z_cbvprintf_impl+0x458>
		if (conv->invalid || conv->unsupported) {
800037fc:	02012783          	lw	a5,32(sp)
80003800:	0037f793          	andi	a5,a5,3
80003804:	32079e63          	bnez	a5,80003b40 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
80003808:	02314783          	lbu	a5,35(sp)
8000380c:	fdb78793          	addi	a5,a5,-37
80003810:	0ff7f693          	zext.b	a3,a5
80003814:	05300713          	li	a4,83
80003818:	4cd76a63          	bltu	a4,a3,80003cec <z_cbvprintf_impl+0x61c>
8000381c:	00269793          	slli	a5,a3,0x2
80003820:	8000a737          	lui	a4,0x8000a
80003824:	57070713          	addi	a4,a4,1392 # 8000a570 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a571>
80003828:	00e787b3          	add	a5,a5,a4
8000382c:	0007a783          	lw	a5,0(a5)
80003830:	00078067          	jr	a5
				conv->flag_dash = true;
80003834:	02015783          	lhu	a5,32(sp)
80003838:	0047e793          	ori	a5,a5,4
8000383c:	02f11023          	sh	a5,32(sp)
				width = -width;
80003840:	41400a33          	neg	s4,s4
80003844:	f59ff06f          	j	8000379c <z_cbvprintf_impl+0xcc>
		} else if (conv->width_present) {
80003848:	0807f793          	andi	a5,a5,128
8000384c:	00078663          	beqz	a5,80003858 <z_cbvprintf_impl+0x188>
			width = conv->width_value;
80003850:	02412a03          	lw	s4,36(sp)
80003854:	f49ff06f          	j	8000379c <z_cbvprintf_impl+0xcc>
		int width = -1;
80003858:	fff00a13          	li	s4,-1
8000385c:	f41ff06f          	j	8000379c <z_cbvprintf_impl+0xcc>
				conv->prec_present = false;
80003860:	02015783          	lhu	a5,32(sp)
80003864:	dff7f793          	andi	a5,a5,-513
80003868:	02f11023          	sh	a5,32(sp)
		int precision = -1;
8000386c:	fff00b13          	li	s6,-1
80003870:	f4dff06f          	j	800037bc <z_cbvprintf_impl+0xec>
		} else if (conv->prec_present) {
80003874:	2007f793          	andi	a5,a5,512
80003878:	00078663          	beqz	a5,80003884 <z_cbvprintf_impl+0x1b4>
			precision = conv->prec_value;
8000387c:	02812b03          	lw	s6,40(sp)
80003880:	f3dff06f          	j	800037bc <z_cbvprintf_impl+0xec>
		int precision = -1;
80003884:	fff00b13          	li	s6,-1
80003888:	f35ff06f          	j	800037bc <z_cbvprintf_impl+0xec>
			switch (length_mod) {
8000388c:	00500713          	li	a4,5
80003890:	0ee78e63          	beq	a5,a4,8000398c <z_cbvprintf_impl+0x2bc>
80003894:	02f76e63          	bltu	a4,a5,800038d0 <z_cbvprintf_impl+0x200>
80003898:	00300713          	li	a4,3
8000389c:	0ae78263          	beq	a5,a4,80003940 <z_cbvprintf_impl+0x270>
800038a0:	00400713          	li	a4,4
800038a4:	04e79e63          	bne	a5,a4,80003900 <z_cbvprintf_impl+0x230>
					(sint_value_type)va_arg(ap, long long);
800038a8:	00c12783          	lw	a5,12(sp)
800038ac:	00778793          	addi	a5,a5,7
800038b0:	ff87f793          	andi	a5,a5,-8
800038b4:	00878713          	addi	a4,a5,8
800038b8:	00e12623          	sw	a4,12(sp)
800038bc:	0007a703          	lw	a4,0(a5)
800038c0:	0047a783          	lw	a5,4(a5)
				value->sint =
800038c4:	00e12823          	sw	a4,16(sp)
800038c8:	00f12a23          	sw	a5,20(sp)
				break;
800038cc:	0500006f          	j	8000391c <z_cbvprintf_impl+0x24c>
			switch (length_mod) {
800038d0:	00a78793          	addi	a5,a5,10
800038d4:	00f7f793          	andi	a5,a5,15
800038d8:	00100713          	li	a4,1
800038dc:	02f76263          	bltu	a4,a5,80003900 <z_cbvprintf_impl+0x230>
					(sint_value_type)va_arg(ap, ptrdiff_t);
800038e0:	00c12783          	lw	a5,12(sp)
800038e4:	00478713          	addi	a4,a5,4
800038e8:	00e12623          	sw	a4,12(sp)
800038ec:	0007a783          	lw	a5,0(a5)
800038f0:	41f7d713          	srai	a4,a5,0x1f
				value->sint =
800038f4:	00f12823          	sw	a5,16(sp)
800038f8:	00e12a23          	sw	a4,20(sp)
				break;
800038fc:	0200006f          	j	8000391c <z_cbvprintf_impl+0x24c>
				value->sint = va_arg(ap, int);
80003900:	00c12783          	lw	a5,12(sp)
80003904:	00478713          	addi	a4,a5,4
80003908:	00e12623          	sw	a4,12(sp)
8000390c:	0007a783          	lw	a5,0(a5)
80003910:	41f7d713          	srai	a4,a5,0x1f
80003914:	00f12823          	sw	a5,16(sp)
80003918:	00e12a23          	sw	a4,20(sp)
			if (length_mod == LENGTH_HH) {
8000391c:	00100793          	li	a5,1
80003920:	08f68a63          	beq	a3,a5,800039b4 <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
80003924:	00200793          	li	a5,2
80003928:	ecf69ae3          	bne	a3,a5,800037fc <z_cbvprintf_impl+0x12c>
				value->sint = (short)value->sint;
8000392c:	01011783          	lh	a5,16(sp)
80003930:	41f7d713          	srai	a4,a5,0x1f
80003934:	00f12823          	sw	a5,16(sp)
80003938:	00e12a23          	sw	a4,20(sp)
8000393c:	ec1ff06f          	j	800037fc <z_cbvprintf_impl+0x12c>
				    && (conv->specifier == 'c')) {
80003940:	02314703          	lbu	a4,35(sp)
				if (WCHAR_IS_SIGNED
80003944:	06300793          	li	a5,99
80003948:	02f70263          	beq	a4,a5,8000396c <z_cbvprintf_impl+0x29c>
					value->sint = va_arg(ap, long);
8000394c:	00c12783          	lw	a5,12(sp)
80003950:	00478713          	addi	a4,a5,4
80003954:	00e12623          	sw	a4,12(sp)
80003958:	0007a783          	lw	a5,0(a5)
8000395c:	41f7d713          	srai	a4,a5,0x1f
80003960:	00f12823          	sw	a5,16(sp)
80003964:	00e12a23          	sw	a4,20(sp)
80003968:	fb5ff06f          	j	8000391c <z_cbvprintf_impl+0x24c>
					value->sint = (wchar_t)va_arg(ap,
8000396c:	00c12783          	lw	a5,12(sp)
80003970:	00478713          	addi	a4,a5,4
80003974:	00e12623          	sw	a4,12(sp)
80003978:	0007a783          	lw	a5,0(a5)
8000397c:	41f7d713          	srai	a4,a5,0x1f
80003980:	00f12823          	sw	a5,16(sp)
80003984:	00e12a23          	sw	a4,20(sp)
80003988:	f95ff06f          	j	8000391c <z_cbvprintf_impl+0x24c>
					(sint_value_type)va_arg(ap, intmax_t);
8000398c:	00c12783          	lw	a5,12(sp)
80003990:	00778793          	addi	a5,a5,7
80003994:	ff87f793          	andi	a5,a5,-8
80003998:	00878713          	addi	a4,a5,8
8000399c:	00e12623          	sw	a4,12(sp)
800039a0:	0007a703          	lw	a4,0(a5)
800039a4:	0047a783          	lw	a5,4(a5)
				value->sint =
800039a8:	00e12823          	sw	a4,16(sp)
800039ac:	00f12a23          	sw	a5,20(sp)
				break;
800039b0:	f6dff06f          	j	8000391c <z_cbvprintf_impl+0x24c>
				value->sint = (signed char)value->sint;
800039b4:	01010783          	lb	a5,16(sp)
800039b8:	41f7d713          	srai	a4,a5,0x1f
800039bc:	00f12823          	sw	a5,16(sp)
800039c0:	00e12a23          	sw	a4,20(sp)
800039c4:	e39ff06f          	j	800037fc <z_cbvprintf_impl+0x12c>
			switch (length_mod) {
800039c8:	00500713          	li	a4,5
800039cc:	0ce78063          	beq	a5,a4,80003a8c <z_cbvprintf_impl+0x3bc>
800039d0:	02f76e63          	bltu	a4,a5,80003a0c <z_cbvprintf_impl+0x33c>
800039d4:	00300713          	li	a4,3
800039d8:	08e78c63          	beq	a5,a4,80003a70 <z_cbvprintf_impl+0x3a0>
800039dc:	00400713          	li	a4,4
800039e0:	04e79c63          	bne	a5,a4,80003a38 <z_cbvprintf_impl+0x368>
					(uint_value_type)va_arg(ap,
800039e4:	00c12783          	lw	a5,12(sp)
800039e8:	00778793          	addi	a5,a5,7
800039ec:	ff87f793          	andi	a5,a5,-8
800039f0:	00878713          	addi	a4,a5,8
800039f4:	00e12623          	sw	a4,12(sp)
800039f8:	0007a703          	lw	a4,0(a5)
800039fc:	0047a783          	lw	a5,4(a5)
				value->uint =
80003a00:	00e12823          	sw	a4,16(sp)
80003a04:	00f12a23          	sw	a5,20(sp)
				break;
80003a08:	0480006f          	j	80003a50 <z_cbvprintf_impl+0x380>
			switch (length_mod) {
80003a0c:	00a78793          	addi	a5,a5,10
80003a10:	00f7f793          	andi	a5,a5,15
80003a14:	00100713          	li	a4,1
80003a18:	02f76063          	bltu	a4,a5,80003a38 <z_cbvprintf_impl+0x368>
					(uint_value_type)va_arg(ap, size_t);
80003a1c:	00c12783          	lw	a5,12(sp)
80003a20:	00478713          	addi	a4,a5,4
80003a24:	00e12623          	sw	a4,12(sp)
80003a28:	0007a783          	lw	a5,0(a5)
				value->uint =
80003a2c:	00f12823          	sw	a5,16(sp)
80003a30:	00012a23          	sw	zero,20(sp)
				break;
80003a34:	01c0006f          	j	80003a50 <z_cbvprintf_impl+0x380>
				value->uint = va_arg(ap, unsigned int);
80003a38:	00c12783          	lw	a5,12(sp)
80003a3c:	00478713          	addi	a4,a5,4
80003a40:	00e12623          	sw	a4,12(sp)
80003a44:	0007a783          	lw	a5,0(a5)
80003a48:	00f12823          	sw	a5,16(sp)
80003a4c:	00012a23          	sw	zero,20(sp)
			if (length_mod == LENGTH_HH) {
80003a50:	00100793          	li	a5,1
80003a54:	06f68063          	beq	a3,a5,80003ab4 <z_cbvprintf_impl+0x3e4>
			} else if (length_mod == LENGTH_H) {
80003a58:	00200793          	li	a5,2
80003a5c:	daf690e3          	bne	a3,a5,800037fc <z_cbvprintf_impl+0x12c>
				value->uint = (unsigned short)value->uint;
80003a60:	01015783          	lhu	a5,16(sp)
80003a64:	00f12823          	sw	a5,16(sp)
80003a68:	00012a23          	sw	zero,20(sp)
80003a6c:	d91ff06f          	j	800037fc <z_cbvprintf_impl+0x12c>
					value->uint = va_arg(ap, unsigned long);
80003a70:	00c12783          	lw	a5,12(sp)
80003a74:	00478713          	addi	a4,a5,4
80003a78:	00e12623          	sw	a4,12(sp)
80003a7c:	0007a783          	lw	a5,0(a5)
80003a80:	00f12823          	sw	a5,16(sp)
80003a84:	00012a23          	sw	zero,20(sp)
				break;
80003a88:	fc9ff06f          	j	80003a50 <z_cbvprintf_impl+0x380>
					(uint_value_type)va_arg(ap,
80003a8c:	00c12783          	lw	a5,12(sp)
80003a90:	00778793          	addi	a5,a5,7
80003a94:	ff87f793          	andi	a5,a5,-8
80003a98:	00878713          	addi	a4,a5,8
80003a9c:	00e12623          	sw	a4,12(sp)
80003aa0:	0007a703          	lw	a4,0(a5)
80003aa4:	0047a783          	lw	a5,4(a5)
				value->uint =
80003aa8:	00e12823          	sw	a4,16(sp)
80003aac:	00f12a23          	sw	a5,20(sp)
				break;
80003ab0:	fa1ff06f          	j	80003a50 <z_cbvprintf_impl+0x380>
				value->uint = (unsigned char)value->uint;
80003ab4:	01014783          	lbu	a5,16(sp)
80003ab8:	00f12823          	sw	a5,16(sp)
80003abc:	00012a23          	sw	zero,20(sp)
80003ac0:	d3dff06f          	j	800037fc <z_cbvprintf_impl+0x12c>
			if (length_mod == LENGTH_UPPER_L) {
80003ac4:	00800793          	li	a5,8
80003ac8:	02f68663          	beq	a3,a5,80003af4 <z_cbvprintf_impl+0x424>
				value->dbl = va_arg(ap, double);
80003acc:	00c12783          	lw	a5,12(sp)
80003ad0:	00778793          	addi	a5,a5,7
80003ad4:	ff87f793          	andi	a5,a5,-8
80003ad8:	00878713          	addi	a4,a5,8
80003adc:	00e12623          	sw	a4,12(sp)
80003ae0:	0007a703          	lw	a4,0(a5)
80003ae4:	0047a783          	lw	a5,4(a5)
80003ae8:	00e12823          	sw	a4,16(sp)
80003aec:	00f12a23          	sw	a5,20(sp)
80003af0:	d0dff06f          	j	800037fc <z_cbvprintf_impl+0x12c>
				value->ldbl = va_arg(ap, long double);
80003af4:	00c12783          	lw	a5,12(sp)
80003af8:	00478713          	addi	a4,a5,4
80003afc:	00e12623          	sw	a4,12(sp)
80003b00:	0007a783          	lw	a5,0(a5)
80003b04:	0007a603          	lw	a2,0(a5)
80003b08:	0047a683          	lw	a3,4(a5)
80003b0c:	0087a703          	lw	a4,8(a5)
80003b10:	00c7a783          	lw	a5,12(a5)
80003b14:	00c12823          	sw	a2,16(sp)
80003b18:	00d12a23          	sw	a3,20(sp)
80003b1c:	00e12c23          	sw	a4,24(sp)
80003b20:	00f12e23          	sw	a5,28(sp)
80003b24:	cd9ff06f          	j	800037fc <z_cbvprintf_impl+0x12c>
			value->ptr = va_arg(ap, void *);
80003b28:	00c12783          	lw	a5,12(sp)
80003b2c:	00478713          	addi	a4,a5,4
80003b30:	00e12623          	sw	a4,12(sp)
80003b34:	0007a783          	lw	a5,0(a5)
80003b38:	00f12823          	sw	a5,16(sp)
80003b3c:	cc1ff06f          	j	800037fc <z_cbvprintf_impl+0x12c>
			OUTS(sp, fp);
80003b40:	00098693          	mv	a3,s3
80003b44:	000a8613          	mv	a2,s5
80003b48:	00048593          	mv	a1,s1
80003b4c:	00090513          	mv	a0,s2
80003b50:	ad1ff0ef          	jal	ra,80003620 <outs>
80003b54:	34054c63          	bltz	a0,80003eac <z_cbvprintf_impl+0x7dc>
80003b58:	00a40433          	add	s0,s0,a0
		fp = extract_conversion(conv, sp);
80003b5c:	00098a93          	mv	s5,s3
			continue;
80003b60:	bc5ff06f          	j	80003724 <z_cbvprintf_impl+0x54>
			OUTC('%');
80003b64:	00048593          	mv	a1,s1
80003b68:	02500513          	li	a0,37
80003b6c:	000900e7          	jalr	s2
80003b70:	32054e63          	bltz	a0,80003eac <z_cbvprintf_impl+0x7dc>
80003b74:	00140413          	addi	s0,s0,1
		char sign = 0;
80003b78:	00000b93          	li	s7,0
		const char *bpe = buf + sizeof(buf);
80003b7c:	04a10b13          	addi	s6,sp,74
		const char *bps = NULL;
80003b80:	00000a93          	li	s5,0
			break;
80003b84:	1740006f          	j	80003cf8 <z_cbvprintf_impl+0x628>
			bps = (const char *)value->ptr;
80003b88:	01012a83          	lw	s5,16(sp)
			if (precision >= 0) {
80003b8c:	000b4e63          	bltz	s6,80003ba8 <z_cbvprintf_impl+0x4d8>
				len = strnlen(bps, precision);
80003b90:	000b0593          	mv	a1,s6
80003b94:	000a8513          	mv	a0,s5
80003b98:	519040ef          	jal	ra,800088b0 <strnlen>
			bpe = bps + len;
80003b9c:	00aa8b33          	add	s6,s5,a0
		char sign = 0;
80003ba0:	00000b93          	li	s7,0
			break;
80003ba4:	1540006f          	j	80003cf8 <z_cbvprintf_impl+0x628>
				len = strlen(bps);
80003ba8:	000a8513          	mv	a0,s5
80003bac:	409040ef          	jal	ra,800087b4 <strlen>
80003bb0:	fedff06f          	j	80003b9c <z_cbvprintf_impl+0x4cc>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
80003bb4:	01012783          	lw	a5,16(sp)
80003bb8:	02f10a23          	sb	a5,52(sp)
		char sign = 0;
80003bbc:	00000b93          	li	s7,0
			bpe = buf + 1;
80003bc0:	03510b13          	addi	s6,sp,53
			bps = buf;
80003bc4:	03410a93          	addi	s5,sp,52
			break;
80003bc8:	1300006f          	j	80003cf8 <z_cbvprintf_impl+0x628>
			if (conv->flag_plus) {
80003bcc:	02015783          	lhu	a5,32(sp)
80003bd0:	0087f713          	andi	a4,a5,8
80003bd4:	00071a63          	bnez	a4,80003be8 <z_cbvprintf_impl+0x518>
			} else if (conv->flag_space) {
80003bd8:	0107f793          	andi	a5,a5,16
80003bdc:	02079463          	bnez	a5,80003c04 <z_cbvprintf_impl+0x534>
		char sign = 0;
80003be0:	00000b93          	li	s7,0
80003be4:	0080006f          	j	80003bec <z_cbvprintf_impl+0x51c>
				sign = '+';
80003be8:	02b00b93          	li	s7,43
			sint = value->sint;
80003bec:	01012703          	lw	a4,16(sp)
80003bf0:	01412783          	lw	a5,20(sp)
			if (sint < 0) {
80003bf4:	0007cc63          	bltz	a5,80003c0c <z_cbvprintf_impl+0x53c>
				value->uint = (uint_value_type)sint;
80003bf8:	00e12823          	sw	a4,16(sp)
80003bfc:	00f12a23          	sw	a5,20(sp)
80003c00:	0300006f          	j	80003c30 <z_cbvprintf_impl+0x560>
				sign = ' ';
80003c04:	02000b93          	li	s7,32
80003c08:	fe5ff06f          	j	80003bec <z_cbvprintf_impl+0x51c>
				value->uint = (uint_value_type)-sint;
80003c0c:	40e006b3          	neg	a3,a4
80003c10:	00e03733          	snez	a4,a4
80003c14:	40f007b3          	neg	a5,a5
80003c18:	40e787b3          	sub	a5,a5,a4
80003c1c:	00d12823          	sw	a3,16(sp)
80003c20:	00f12a23          	sw	a5,20(sp)
				sign = '-';
80003c24:	02d00b93          	li	s7,45
80003c28:	0080006f          	j	80003c30 <z_cbvprintf_impl+0x560>
		switch (conv->specifier) {
80003c2c:	00000b93          	li	s7,0
			bps = encode_uint(value->uint, conv, buf, bpe);
80003c30:	04a10713          	addi	a4,sp,74
80003c34:	03410693          	addi	a3,sp,52
80003c38:	02010613          	addi	a2,sp,32
80003c3c:	01012503          	lw	a0,16(sp)
80003c40:	01412583          	lw	a1,20(sp)
80003c44:	f90ff0ef          	jal	ra,800033d4 <encode_uint>
80003c48:	00050a93          	mv	s5,a0
			if (precision >= 0) {
80003c4c:	120b4663          	bltz	s6,80003d78 <z_cbvprintf_impl+0x6a8>
				size_t len = bpe - bps;
80003c50:	04a10793          	addi	a5,sp,74
80003c54:	415787b3          	sub	a5,a5,s5
				conv->flag_zero = false;
80003c58:	02015703          	lhu	a4,32(sp)
80003c5c:	fbf77713          	andi	a4,a4,-65
80003c60:	02e11023          	sh	a4,32(sp)
				if (len < (size_t)precision) {
80003c64:	1167fe63          	bgeu	a5,s6,80003d80 <z_cbvprintf_impl+0x6b0>
					conv->pad0_value = precision - (int)len;
80003c68:	40fb07b3          	sub	a5,s6,a5
80003c6c:	02f12223          	sw	a5,36(sp)
		const char *bpe = buf + sizeof(buf);
80003c70:	04a10b13          	addi	s6,sp,74
80003c74:	0840006f          	j	80003cf8 <z_cbvprintf_impl+0x628>
			if (value->ptr != NULL) {
80003c78:	01012503          	lw	a0,16(sp)
80003c7c:	00051e63          	bnez	a0,80003c98 <z_cbvprintf_impl+0x5c8>
		char sign = 0;
80003c80:	00000b93          	li	s7,0
			bpe = bps + 5;
80003c84:	8000ab37          	lui	s6,0x8000a
80003c88:	56db0b13          	addi	s6,s6,1389 # 8000a56d <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a56e>
			bps = "(nil)";
80003c8c:	8000aab7          	lui	s5,0x8000a
80003c90:	568a8a93          	addi	s5,s5,1384 # 8000a568 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a569>
80003c94:	0640006f          	j	80003cf8 <z_cbvprintf_impl+0x628>
				bps = encode_uint((uintptr_t)value->ptr, conv,
80003c98:	04a10713          	addi	a4,sp,74
80003c9c:	03410693          	addi	a3,sp,52
80003ca0:	02010613          	addi	a2,sp,32
80003ca4:	00000593          	li	a1,0
80003ca8:	f2cff0ef          	jal	ra,800033d4 <encode_uint>
80003cac:	00050a93          	mv	s5,a0
				conv->altform_0c = true;
80003cb0:	02214783          	lbu	a5,34(sp)
80003cb4:	0107e793          	ori	a5,a5,16
80003cb8:	02f10123          	sb	a5,34(sp)
				conv->specifier = 'x';
80003cbc:	07800793          	li	a5,120
80003cc0:	02f101a3          	sb	a5,35(sp)
		char sign = 0;
80003cc4:	00000b93          	li	s7,0
				goto prec_int_pad0;
80003cc8:	f85ff06f          	j	80003c4c <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
80003ccc:	00040613          	mv	a2,s0
80003cd0:	01012583          	lw	a1,16(sp)
80003cd4:	02010513          	addi	a0,sp,32
80003cd8:	88dff0ef          	jal	ra,80003564 <store_count>
		char sign = 0;
80003cdc:	00000b93          	li	s7,0
		const char *bpe = buf + sizeof(buf);
80003ce0:	04a10b13          	addi	s6,sp,74
		const char *bps = NULL;
80003ce4:	00000a93          	li	s5,0
			break;
80003ce8:	0100006f          	j	80003cf8 <z_cbvprintf_impl+0x628>
		switch (conv->specifier) {
80003cec:	00000b93          	li	s7,0
80003cf0:	04a10b13          	addi	s6,sp,74
80003cf4:	00000a93          	li	s5,0
		if (bps == NULL) {
80003cf8:	1a0a8463          	beqz	s5,80003ea0 <z_cbvprintf_impl+0x7d0>
		size_t nj_len = (bpe - bps);
80003cfc:	415b06b3          	sub	a3,s6,s5
		if (sign != 0) {
80003d00:	000b8463          	beqz	s7,80003d08 <z_cbvprintf_impl+0x638>
			nj_len += 1U;
80003d04:	00168693          	addi	a3,a3,1
		if (conv->altform_0c) {
80003d08:	02214783          	lbu	a5,34(sp)
80003d0c:	0107f713          	andi	a4,a5,16
80003d10:	06070c63          	beqz	a4,80003d88 <z_cbvprintf_impl+0x6b8>
			nj_len += 2U;
80003d14:	00268693          	addi	a3,a3,2
		nj_len += conv->pad0_value;
80003d18:	02412703          	lw	a4,36(sp)
80003d1c:	00d70733          	add	a4,a4,a3
		if (conv->pad_fp) {
80003d20:	0407f793          	andi	a5,a5,64
80003d24:	00078663          	beqz	a5,80003d30 <z_cbvprintf_impl+0x660>
			nj_len += conv->pad0_pre_exp;
80003d28:	02812783          	lw	a5,40(sp)
80003d2c:	00f70733          	add	a4,a4,a5
		if (width > 0) {
80003d30:	09405e63          	blez	s4,80003dcc <z_cbvprintf_impl+0x6fc>
			width -= (int)nj_len;
80003d34:	40ea0a33          	sub	s4,s4,a4
			if (!conv->flag_dash) {
80003d38:	02012783          	lw	a5,32(sp)
80003d3c:	0027d793          	srli	a5,a5,0x2
80003d40:	0017f793          	andi	a5,a5,1
80003d44:	08079463          	bnez	a5,80003dcc <z_cbvprintf_impl+0x6fc>
				if (conv->flag_zero) {
80003d48:	02015783          	lhu	a5,32(sp)
80003d4c:	0407f793          	andi	a5,a5,64
80003d50:	04078463          	beqz	a5,80003d98 <z_cbvprintf_impl+0x6c8>
					if (sign != 0) {
80003d54:	040b8663          	beqz	s7,80003da0 <z_cbvprintf_impl+0x6d0>
						OUTC(sign);
80003d58:	00048593          	mv	a1,s1
80003d5c:	000b8513          	mv	a0,s7
80003d60:	000900e7          	jalr	s2
80003d64:	14054463          	bltz	a0,80003eac <z_cbvprintf_impl+0x7dc>
80003d68:	00140413          	addi	s0,s0,1
					pad = '0';
80003d6c:	03000c13          	li	s8,48
						sign = 0;
80003d70:	00000b93          	li	s7,0
80003d74:	0300006f          	j	80003da4 <z_cbvprintf_impl+0x6d4>
		const char *bpe = buf + sizeof(buf);
80003d78:	04a10b13          	addi	s6,sp,74
80003d7c:	f7dff06f          	j	80003cf8 <z_cbvprintf_impl+0x628>
80003d80:	04a10b13          	addi	s6,sp,74
80003d84:	f75ff06f          	j	80003cf8 <z_cbvprintf_impl+0x628>
		} else if (conv->altform_0) {
80003d88:	0087f713          	andi	a4,a5,8
80003d8c:	f80706e3          	beqz	a4,80003d18 <z_cbvprintf_impl+0x648>
			nj_len += 1U;
80003d90:	00168693          	addi	a3,a3,1
80003d94:	f85ff06f          	j	80003d18 <z_cbvprintf_impl+0x648>
				char pad = ' ';
80003d98:	02000c13          	li	s8,32
80003d9c:	0080006f          	j	80003da4 <z_cbvprintf_impl+0x6d4>
					pad = '0';
80003da0:	03000c13          	li	s8,48
80003da4:	000a0793          	mv	a5,s4
				while (width-- > 0) {
80003da8:	fff78a13          	addi	s4,a5,-1
80003dac:	02f05063          	blez	a5,80003dcc <z_cbvprintf_impl+0x6fc>
					OUTC(pad);
80003db0:	00048593          	mv	a1,s1
80003db4:	000c0513          	mv	a0,s8
80003db8:	000900e7          	jalr	s2
80003dbc:	0e054863          	bltz	a0,80003eac <z_cbvprintf_impl+0x7dc>
80003dc0:	00140413          	addi	s0,s0,1
				while (width-- > 0) {
80003dc4:	000a0793          	mv	a5,s4
80003dc8:	fe1ff06f          	j	80003da8 <z_cbvprintf_impl+0x6d8>
		if (sign != 0) {
80003dcc:	000b8c63          	beqz	s7,80003de4 <z_cbvprintf_impl+0x714>
			OUTC(sign);
80003dd0:	00048593          	mv	a1,s1
80003dd4:	000b8513          	mv	a0,s7
80003dd8:	000900e7          	jalr	s2
80003ddc:	0c054863          	bltz	a0,80003eac <z_cbvprintf_impl+0x7dc>
80003de0:	00140413          	addi	s0,s0,1
			if (conv->altform_0c | conv->altform_0) {
80003de4:	02012783          	lw	a5,32(sp)
80003de8:	0147d713          	srli	a4,a5,0x14
80003dec:	00177713          	andi	a4,a4,1
80003df0:	0137d793          	srli	a5,a5,0x13
80003df4:	0017f793          	andi	a5,a5,1
80003df8:	00f767b3          	or	a5,a4,a5
80003dfc:	00078c63          	beqz	a5,80003e14 <z_cbvprintf_impl+0x744>
				OUTC('0');
80003e00:	00048593          	mv	a1,s1
80003e04:	03000513          	li	a0,48
80003e08:	000900e7          	jalr	s2
80003e0c:	0a054063          	bltz	a0,80003eac <z_cbvprintf_impl+0x7dc>
80003e10:	00140413          	addi	s0,s0,1
			if (conv->altform_0c) {
80003e14:	02214783          	lbu	a5,34(sp)
80003e18:	0107f793          	andi	a5,a5,16
80003e1c:	00078c63          	beqz	a5,80003e34 <z_cbvprintf_impl+0x764>
				OUTC(conv->specifier);
80003e20:	00048593          	mv	a1,s1
80003e24:	02314503          	lbu	a0,35(sp)
80003e28:	000900e7          	jalr	s2
80003e2c:	08054063          	bltz	a0,80003eac <z_cbvprintf_impl+0x7dc>
80003e30:	00140413          	addi	s0,s0,1
			pad_len = conv->pad0_value;
80003e34:	02412783          	lw	a5,36(sp)
			while (pad_len-- > 0) {
80003e38:	fff78b93          	addi	s7,a5,-1
80003e3c:	02f05063          	blez	a5,80003e5c <z_cbvprintf_impl+0x78c>
				OUTC('0');
80003e40:	00048593          	mv	a1,s1
80003e44:	03000513          	li	a0,48
80003e48:	000900e7          	jalr	s2
80003e4c:	06054063          	bltz	a0,80003eac <z_cbvprintf_impl+0x7dc>
80003e50:	00140413          	addi	s0,s0,1
			while (pad_len-- > 0) {
80003e54:	000b8793          	mv	a5,s7
80003e58:	fe1ff06f          	j	80003e38 <z_cbvprintf_impl+0x768>
			OUTS(bps, bpe);
80003e5c:	000b0693          	mv	a3,s6
80003e60:	000a8613          	mv	a2,s5
80003e64:	00048593          	mv	a1,s1
80003e68:	00090513          	mv	a0,s2
80003e6c:	fb4ff0ef          	jal	ra,80003620 <outs>
80003e70:	02054e63          	bltz	a0,80003eac <z_cbvprintf_impl+0x7dc>
80003e74:	00a40433          	add	s0,s0,a0
		while (width > 0) {
80003e78:	03405063          	blez	s4,80003e98 <z_cbvprintf_impl+0x7c8>
			OUTC(' ');
80003e7c:	00048593          	mv	a1,s1
80003e80:	02000513          	li	a0,32
80003e84:	000900e7          	jalr	s2
80003e88:	02054263          	bltz	a0,80003eac <z_cbvprintf_impl+0x7dc>
80003e8c:	00140413          	addi	s0,s0,1
			--width;
80003e90:	fffa0a13          	addi	s4,s4,-1
80003e94:	fe5ff06f          	j	80003e78 <z_cbvprintf_impl+0x7a8>
		fp = extract_conversion(conv, sp);
80003e98:	00098a93          	mv	s5,s3
80003e9c:	889ff06f          	j	80003724 <z_cbvprintf_impl+0x54>
80003ea0:	00098a93          	mv	s5,s3
80003ea4:	881ff06f          	j	80003724 <z_cbvprintf_impl+0x54>
	return count;
80003ea8:	00040513          	mv	a0,s0
}
80003eac:	8000d7b7          	lui	a5,0x8000d
80003eb0:	04c12703          	lw	a4,76(sp)
80003eb4:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003eb8:	00f747b3          	xor	a5,a4,a5
80003ebc:	00000713          	li	a4,0
80003ec0:	02079a63          	bnez	a5,80003ef4 <z_cbvprintf_impl+0x824>
80003ec4:	07c12083          	lw	ra,124(sp)
80003ec8:	07812403          	lw	s0,120(sp)
80003ecc:	07412483          	lw	s1,116(sp)
80003ed0:	07012903          	lw	s2,112(sp)
80003ed4:	06c12983          	lw	s3,108(sp)
80003ed8:	06812a03          	lw	s4,104(sp)
80003edc:	06412a83          	lw	s5,100(sp)
80003ee0:	06012b03          	lw	s6,96(sp)
80003ee4:	05c12b83          	lw	s7,92(sp)
80003ee8:	05812c03          	lw	s8,88(sp)
80003eec:	08010113          	addi	sp,sp,128
80003ef0:	00008067          	ret
80003ef4:	41d030ef          	jal	ra,80007b10 <_StackCheckHandler>

80003ef8 <_ConfigAbsSyms>:
80003ef8:	00308013          	addi	zero,ra,3
GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
80003efc:	fe010113          	addi	sp,sp,-32
80003f00:	00112e23          	sw	ra,28(sp)
80003f04:	8000d7b7          	lui	a5,0x8000d
80003f08:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003f0c:	00e12623          	sw	a4,12(sp)
80003f10:	00000713          	li	a4,0
GEN_ABS_SYM_END
80003f14:	00c12703          	lw	a4,12(sp)
80003f18:	2507a783          	lw	a5,592(a5)
80003f1c:	00f747b3          	xor	a5,a4,a5
80003f20:	00000713          	li	a4,0
80003f24:	00079863          	bnez	a5,80003f34 <_ConfigAbsSyms+0x3c>
80003f28:	01c12083          	lw	ra,28(sp)
80003f2c:	02010113          	addi	sp,sp,32
80003f30:	00008067          	ret
80003f34:	3dd030ef          	jal	ra,80007b10 <_StackCheckHandler>

80003f38 <arch_cpu_idle>:
80003f38:	00308013          	addi	zero,ra,3
{
80003f3c:	fe010113          	addi	sp,sp,-32
80003f40:	00112e23          	sw	ra,28(sp)
80003f44:	00812c23          	sw	s0,24(sp)
80003f48:	8000d437          	lui	s0,0x8000d
80003f4c:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003f50:	00f12623          	sw	a5,12(sp)
80003f54:	00000793          	li	a5,0
	sys_trace_idle();
80003f58:	148000ef          	jal	ra,800040a0 <sys_trace_idle>
 * use atomic instruction csrs to unlock global irq
 * csrs: atomic set bits in CSR register
 */
static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	__asm__ volatile ("csrs mstatus, %0"
80003f5c:	00800793          	li	a5,8
80003f60:	3007a073          	csrs	mstatus,a5
	__asm__ volatile("wfi");
80003f64:	10500073          	wfi
}
80003f68:	00c12703          	lw	a4,12(sp)
80003f6c:	25042783          	lw	a5,592(s0)
80003f70:	00f747b3          	xor	a5,a4,a5
80003f74:	00000713          	li	a4,0
80003f78:	00079a63          	bnez	a5,80003f8c <arch_cpu_idle+0x54>
80003f7c:	01c12083          	lw	ra,28(sp)
80003f80:	01812403          	lw	s0,24(sp)
80003f84:	02010113          	addi	sp,sp,32
80003f88:	00008067          	ret
80003f8c:	385030ef          	jal	ra,80007b10 <_StackCheckHandler>

80003f90 <arch_irq_enable>:
80003f90:	00308013          	addi	zero,ra,3
{
80003f94:	fe010113          	addi	sp,sp,-32
80003f98:	00112e23          	sw	ra,28(sp)
80003f9c:	8000d7b7          	lui	a5,0x8000d
80003fa0:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003fa4:	00e12623          	sw	a4,12(sp)
80003fa8:	00000713          	li	a4,0
{
#if defined(CONFIG_3RD_LEVEL_INTERRUPTS)
	return ((irq >> 16) & 0xFF) != 0 ? 3 :
		(((irq >> 8) & 0xFF) == 0 ? 1 : 2);
#elif defined(CONFIG_2ND_LEVEL_INTERRUPTS)
	return ((irq >> 8) & 0xFF) == 0 ? 1 : 2;
80003fac:	00855793          	srli	a5,a0,0x8
80003fb0:	0ff7f713          	zext.b	a4,a5
80003fb4:	02071a63          	bnez	a4,80003fe8 <arch_irq_enable+0x58>
			  : "r" (1 << irq));
80003fb8:	00100793          	li	a5,1
80003fbc:	00a797b3          	sll	a5,a5,a0
	__asm__ volatile ("csrrs %0, mie, %1\n"
80003fc0:	3047a7f3          	csrrs	a5,mie,a5
}
80003fc4:	8000d7b7          	lui	a5,0x8000d
80003fc8:	00c12703          	lw	a4,12(sp)
80003fcc:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80003fd0:	00f747b3          	xor	a5,a4,a5
80003fd4:	00000713          	li	a4,0
80003fd8:	00079e63          	bnez	a5,80003ff4 <arch_irq_enable+0x64>
80003fdc:	01c12083          	lw	ra,28(sp)
80003fe0:	02010113          	addi	sp,sp,32
80003fe4:	00008067          	ret
		riscv_plic_irq_enable(irq);
80003fe8:	fff78513          	addi	a0,a5,-1
80003fec:	151000ef          	jal	ra,8000493c <riscv_plic_irq_enable>
		return;
80003ff0:	fd5ff06f          	j	80003fc4 <arch_irq_enable+0x34>
}
80003ff4:	31d030ef          	jal	ra,80007b10 <_StackCheckHandler>

80003ff8 <z_riscv_irq_priority_set>:
80003ff8:	00308013          	addi	zero,ra,3
{
80003ffc:	fe010113          	addi	sp,sp,-32
80004000:	00112e23          	sw	ra,28(sp)
80004004:	8000d7b7          	lui	a5,0x8000d
80004008:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000400c:	00e12623          	sw	a4,12(sp)
80004010:	00000713          	li	a4,0
80004014:	00855513          	srli	a0,a0,0x8
80004018:	0ff57793          	zext.b	a5,a0
8000401c:	02079463          	bnez	a5,80004044 <z_riscv_irq_priority_set+0x4c>
}
80004020:	8000d7b7          	lui	a5,0x8000d
80004024:	00c12703          	lw	a4,12(sp)
80004028:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000402c:	00f747b3          	xor	a5,a4,a5
80004030:	00000713          	li	a4,0
80004034:	00079e63          	bnez	a5,80004050 <z_riscv_irq_priority_set+0x58>
80004038:	01c12083          	lw	ra,28(sp)
8000403c:	02010113          	addi	sp,sp,32
80004040:	00008067          	ret
		riscv_plic_set_priority(irq, prio);
80004044:	fff50513          	addi	a0,a0,-1
80004048:	165000ef          	jal	ra,800049ac <riscv_plic_set_priority>
}
8000404c:	fd5ff06f          	j	80004020 <z_riscv_irq_priority_set+0x28>
80004050:	2c1030ef          	jal	ra,80007b10 <_StackCheckHandler>

80004054 <soc_interrupt_init>:
80004054:	00308013          	addi	zero,ra,3
{
80004058:	fe010113          	addi	sp,sp,-32
8000405c:	00112e23          	sw	ra,28(sp)
80004060:	8000d7b7          	lui	a5,0x8000d
80004064:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004068:	00e12623          	sw	a4,12(sp)
8000406c:	00000713          	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004070:	30047773          	csrrci	a4,mstatus,8
	__asm__ volatile ("csrwi mie, 0\n"
80004074:	30405073          	csrwi	mie,0
80004078:	34405073          	csrwi	mip,0
}
8000407c:	00c12703          	lw	a4,12(sp)
80004080:	2507a783          	lw	a5,592(a5)
80004084:	00f747b3          	xor	a5,a4,a5
80004088:	00000713          	li	a4,0
8000408c:	00079863          	bnez	a5,8000409c <soc_interrupt_init+0x48>
80004090:	01c12083          	lw	ra,28(sp)
80004094:	02010113          	addi	sp,sp,32
80004098:	00008067          	ret
8000409c:	275030ef          	jal	ra,80007b10 <_StackCheckHandler>

800040a0 <sys_trace_idle>:
800040a0:	00308013          	addi	zero,ra,3
void sys_trace_idle(void) {}
800040a4:	fe010113          	addi	sp,sp,-32
800040a8:	00112e23          	sw	ra,28(sp)
800040ac:	8000d7b7          	lui	a5,0x8000d
800040b0:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800040b4:	00e12623          	sw	a4,12(sp)
800040b8:	00000713          	li	a4,0
800040bc:	00c12703          	lw	a4,12(sp)
800040c0:	2507a783          	lw	a5,592(a5)
800040c4:	00f747b3          	xor	a5,a4,a5
800040c8:	00000713          	li	a4,0
800040cc:	00079863          	bnez	a5,800040dc <sys_trace_idle+0x3c>
800040d0:	01c12083          	lw	ra,28(sp)
800040d4:	02010113          	addi	sp,sp,32
800040d8:	00008067          	ret
800040dc:	235030ef          	jal	ra,80007b10 <_StackCheckHandler>

800040e0 <bad_stack_pointer>:
800040e0:	00308013          	addi	zero,ra,3
{
800040e4:	fe010113          	addi	sp,sp,-32
800040e8:	00112e23          	sw	ra,28(sp)
800040ec:	8000d7b7          	lui	a5,0x8000d
800040f0:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800040f4:	00e12623          	sw	a4,12(sp)
800040f8:	00000713          	li	a4,0
}
800040fc:	00c12703          	lw	a4,12(sp)
80004100:	2507a783          	lw	a5,592(a5)
80004104:	00f747b3          	xor	a5,a4,a5
80004108:	00000713          	li	a4,0
8000410c:	00079a63          	bnez	a5,80004120 <bad_stack_pointer+0x40>
80004110:	00000513          	li	a0,0
80004114:	01c12083          	lw	ra,28(sp)
80004118:	02010113          	addi	sp,sp,32
8000411c:	00008067          	ret
80004120:	1f1030ef          	jal	ra,80007b10 <_StackCheckHandler>

80004124 <z_riscv_fatal_error>:
80004124:	00308013          	addi	zero,ra,3
{
80004128:	fe010113          	addi	sp,sp,-32
8000412c:	00112e23          	sw	ra,28(sp)
80004130:	8000d7b7          	lui	a5,0x8000d
80004134:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004138:	00e12623          	sw	a4,12(sp)
8000413c:	00000713          	li	a4,0
	z_fatal_error(reason, esf);
80004140:	5c4010ef          	jal	ra,80005704 <z_fatal_error>

80004144 <_Fault>:
80004144:	00308013          	addi	zero,ra,3
{
80004148:	fe010113          	addi	sp,sp,-32
8000414c:	00112e23          	sw	ra,28(sp)
80004150:	00812c23          	sw	s0,24(sp)
80004154:	00050413          	mv	s0,a0
80004158:	8000d7b7          	lui	a5,0x8000d
8000415c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004160:	00e12623          	sw	a4,12(sp)
80004164:	00000713          	li	a4,0
	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
80004168:	342027f3          	csrr	a5,mcause
	__asm__ volatile("csrr %0, mtval" : "=r" (mtval));
8000416c:	343027f3          	csrr	a5,mtval
	if (bad_stack_pointer(esf)) {
80004170:	f71ff0ef          	jal	ra,800040e0 <bad_stack_pointer>
80004174:	00050463          	beqz	a0,8000417c <_Fault+0x38>
		reason = K_ERR_STACK_CHK_FAIL;
80004178:	00200513          	li	a0,2
	z_riscv_fatal_error(reason, esf);
8000417c:	00040593          	mv	a1,s0
80004180:	fa5ff0ef          	jal	ra,80004124 <z_riscv_fatal_error>

80004184 <z_irq_spurious>:
80004184:	00308013          	addi	zero,ra,3
{
80004188:	fe010113          	addi	sp,sp,-32
8000418c:	00112e23          	sw	ra,28(sp)
80004190:	8000d7b7          	lui	a5,0x8000d
80004194:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004198:	00e12623          	sw	a4,12(sp)
8000419c:	00000713          	li	a4,0
	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
800041a0:	342027f3          	csrr	a5,mcause
	z_riscv_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
800041a4:	00000593          	li	a1,0
800041a8:	00100513          	li	a0,1
800041ac:	f79ff0ef          	jal	ra,80004124 <z_riscv_fatal_error>

800041b0 <_PrepC>:
800041b0:	00308013          	addi	zero,ra,3
{
800041b4:	fe010113          	addi	sp,sp,-32
800041b8:	00112e23          	sw	ra,28(sp)
800041bc:	8000d7b7          	lui	a5,0x8000d
800041c0:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800041c4:	00e12623          	sw	a4,12(sp)
800041c8:	00000713          	li	a4,0
	z_bss_zero();
800041cc:	04d010ef          	jal	ra,80005a18 <z_bss_zero>
	soc_interrupt_init();
800041d0:	e85ff0ef          	jal	ra,80004054 <soc_interrupt_init>
	z_cstart();
800041d4:	28d010ef          	jal	ra,80005c60 <z_cstart>

800041d8 <__initialize>:
/*
 * Remainder of asm-land initialization code before we can jump into
 * the C domain
 */
SECTION_FUNC(TEXT, __initialize)
	csrr a0, mhartid
800041d8:	f1402573          	csrr	a0,mhartid
	beqz a0, boot_first_core
800041dc:	00050a63          	beqz	a0,800041f0 <boot_first_core>

	li t0, CONFIG_MP_NUM_CPUS
800041e0:	00100293          	li	t0,1
	blt a0, t0, boot_secondary_core
800041e4:	04554263          	blt	a0,t0,80004228 <boot_secondary_core>

800041e8 <loop_unconfigured_cores>:

loop_unconfigured_cores:
	wfi
800041e8:	10500073          	wfi
	j loop_unconfigured_cores
800041ec:	ffdff06f          	j	800041e8 <loop_unconfigured_cores>

800041f0 <boot_first_core>:
	fscsr zero
#endif

#ifdef CONFIG_INIT_STACKS
	/* Pre-populate all bytes in z_interrupt_stacks with 0xAA */
	la t0, z_interrupt_stacks
800041f0:	00007297          	auipc	t0,0x7
800041f4:	c6028293          	addi	t0,t0,-928 # 8000ae50 <z_interrupt_stacks>
	li t1, __z_interrupt_stack_SIZEOF
800041f8:	00001337          	lui	t1,0x1
	add t1, t1, t0
800041fc:	00530333          	add	t1,t1,t0

	/* Populate z_interrupt_stacks with 0xaaaaaaaa */
	li t2, 0xaaaaaaaa
80004200:	aaaab3b7          	lui	t2,0xaaaab
80004204:	aaa38393          	addi	t2,t2,-1366 # aaaaaaaa <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xaaaaaaab>

80004208 <aa_loop>:
aa_loop:
	sw t2, 0x00(t0)
80004208:	0072a023          	sw	t2,0(t0)
	addi t0, t0, 4
8000420c:	00428293          	addi	t0,t0,4
	blt t0, t1, aa_loop
80004210:	fe62cce3          	blt	t0,t1,80004208 <aa_loop>

	/*
	 * Initially, setup stack pointer to
	 * z_interrupt_stacks + __z_interrupt_stack_SIZEOF
	 */
	la sp, z_interrupt_stacks
80004214:	00007117          	auipc	sp,0x7
80004218:	c3c10113          	addi	sp,sp,-964 # 8000ae50 <z_interrupt_stacks>
	li t0, __z_interrupt_stack_SIZEOF
8000421c:	000012b7          	lui	t0,0x1
	add sp, sp, t0
80004220:	00510133          	add	sp,sp,t0

	/*
	 * Jump into C domain. _PrepC zeroes BSS, copies rw data into RAM,
	 * and then enters kernel z_cstart
	 */
	call _PrepC
80004224:	f8dff0ef          	jal	ra,800041b0 <_PrepC>

80004228 <boot_secondary_core>:

boot_secondary_core:
	la t0, riscv_cpu_wake_flag
80004228:	00006297          	auipc	t0,0x6
8000422c:	71c28293          	addi	t0,t0,1820 # 8000a944 <riscv_cpu_wake_flag>
	lr t0, 0(t0)
80004230:	0002a283          	lw	t0,0(t0)
	bne a0, t0, boot_secondary_core
80004234:	fe551ae3          	bne	a0,t0,80004228 <boot_secondary_core>

	/* Set up stack */
	la t0, riscv_cpu_sp
80004238:	00006297          	auipc	t0,0x6
8000423c:	70828293          	addi	t0,t0,1800 # 8000a940 <riscv_cpu_sp>
	lr sp, 0(t0)
80004240:	0002a103          	lw	sp,0(t0)

	la t0, riscv_cpu_wake_flag
80004244:	00006297          	auipc	t0,0x6
80004248:	70028293          	addi	t0,t0,1792 # 8000a944 <riscv_cpu_wake_flag>
	sr zero, 0(t0)
8000424c:	0002a023          	sw	zero,0(t0)
	j z_riscv_secondary_cpu_init
80004250:	07c0006f          	j	800042cc <z_riscv_secondary_cpu_init>

80004254 <z_riscv_switch>:

/* void z_riscv_switch(k_thread_t *switch_to, k_thread_t *switch_from) */
SECTION_FUNC(TEXT, z_riscv_switch)

	/* Save the old thread's callee-saved registers */
	DO_CALLEE_SAVED(sr, a1)
80004254:	0215aa23          	sw	ra,52(a1)
80004258:	0285ac23          	sw	s0,56(a1)
8000425c:	0295ae23          	sw	s1,60(a1)
80004260:	0525a023          	sw	s2,64(a1)
80004264:	0535a223          	sw	s3,68(a1)
80004268:	0545a423          	sw	s4,72(a1)
8000426c:	0555a623          	sw	s5,76(a1)
80004270:	0565a823          	sw	s6,80(a1)
80004274:	0575aa23          	sw	s7,84(a1)
80004278:	0585ac23          	sw	s8,88(a1)
8000427c:	0595ae23          	sw	s9,92(a1)
80004280:	07a5a023          	sw	s10,96(a1)
80004284:	07b5a223          	sw	s11,100(a1)
	DO_FP_CALLEE_SAVED(fsr, a1)
skip_store_fp_callee_saved:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Save the old thread's stack pointer */
	sr sp, _thread_offset_to_sp(a1)
80004288:	0225a823          	sw	sp,48(a1)

	/* Set thread->switch_handle = thread to mark completion */
	sr a1, ___thread_t_switch_handle_OFFSET(a1)
8000428c:	06b5ae23          	sw	a1,124(a1)

	/* Get the new thread's stack pointer */
	lr sp, _thread_offset_to_sp(a0)
80004290:	03052103          	lw	sp,48(a0)
	call z_thread_mark_switched_in
	mv a0, s0
#endif

	/* Restore the new thread's callee-saved registers */
	DO_CALLEE_SAVED(lr, a0)
80004294:	03452083          	lw	ra,52(a0)
80004298:	03852403          	lw	s0,56(a0)
8000429c:	03c52483          	lw	s1,60(a0)
800042a0:	04052903          	lw	s2,64(a0)
800042a4:	04452983          	lw	s3,68(a0)
800042a8:	04852a03          	lw	s4,72(a0)
800042ac:	04c52a83          	lw	s5,76(a0)
800042b0:	05052b03          	lw	s6,80(a0)
800042b4:	05452b83          	lw	s7,84(a0)
800042b8:	05852c03          	lw	s8,88(a0)
800042bc:	05c52c83          	lw	s9,92(a0)
800042c0:	06052d03          	lw	s10,96(a0)
800042c4:	06452d83          	lw	s11,100(a0)
	csrc mstatus, t1
1:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Return to arch_switch() or _irq_wrapper() */
	ret
800042c8:	00008067          	ret

800042cc <z_riscv_secondary_cpu_init>:
800042cc:	00308013          	addi	zero,ra,3
{
800042d0:	fe010113          	addi	sp,sp,-32
800042d4:	00112e23          	sw	ra,28(sp)
800042d8:	00812c23          	sw	s0,24(sp)
800042dc:	00050413          	mv	s0,a0
800042e0:	8000d7b7          	lui	a5,0x8000d
800042e4:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800042e8:	00e12623          	sw	a4,12(sp)
800042ec:	00000713          	li	a4,0
	soc_interrupt_init();
800042f0:	d65ff0ef          	jal	ra,80004054 <soc_interrupt_init>
	riscv_cpu_init[cpu_num].fn(riscv_cpu_init[cpu_num].arg);
800042f4:	8000b7b7          	lui	a5,0x8000b
800042f8:	00341413          	slli	s0,s0,0x3
800042fc:	94878793          	addi	a5,a5,-1720 # 8000a948 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a949>
80004300:	008787b3          	add	a5,a5,s0
80004304:	0007a703          	lw	a4,0(a5)
80004308:	0047a503          	lw	a0,4(a5)
8000430c:	000700e7          	jalr	a4

80004310 <arch_new_thread>:
80004310:	00308013          	addi	zero,ra,3
{
80004314:	fe010113          	addi	sp,sp,-32
80004318:	00112e23          	sw	ra,28(sp)
8000431c:	8000d5b7          	lui	a1,0x8000d
80004320:	2505a883          	lw	a7,592(a1) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004324:	01112623          	sw	a7,12(sp)
80004328:	00000893          	li	a7,0
	stack_init = (struct __esf *)Z_STACK_PTR_ALIGN(
8000432c:	fb060613          	addi	a2,a2,-80
 * @param ptr Proposed stack pointer address
 * @return Properly aligned stack pointer address
 */
static inline char *z_stack_ptr_align(char *ptr)
{
	return (char *)ROUND_DOWN(ptr, ARCH_STACK_PTR_ALIGN);
80004330:	ff067613          	andi	a2,a2,-16
	stack_init->a0 = (unsigned long)entry;
80004334:	02d62023          	sw	a3,32(a2)
	stack_init->a1 = (unsigned long)p1;
80004338:	02e62223          	sw	a4,36(a2)
	stack_init->a2 = (unsigned long)p2;
8000433c:	02f62423          	sw	a5,40(a2)
	stack_init->a3 = (unsigned long)p3;
80004340:	03062623          	sw	a6,44(a2)
	stack_init->mstatus = MSTATUS_DEF_RESTORE;
80004344:	000027b7          	lui	a5,0x2
80004348:	88078793          	addi	a5,a5,-1920 # 1880 <CONFIG_ISR_STACK_SIZE+0x880>
8000434c:	04f62223          	sw	a5,68(a2)
		stack_init->mepc = (unsigned long)z_thread_entry;
80004350:	800037b7          	lui	a5,0x80003
80004354:	af878793          	addi	a5,a5,-1288 # 80002af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80002af9>
80004358:	04f62023          	sw	a5,64(a2)
	thread->callee_saved.sp = (unsigned long)stack_init;
8000435c:	02c52823          	sw	a2,48(a0)
	thread->callee_saved.ra = (unsigned long)z_riscv_thread_start;
80004360:	800007b7          	lui	a5,0x80000
80004364:	15c78793          	addi	a5,a5,348 # 8000015c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000015d>
80004368:	02f52a23          	sw	a5,52(a0)
	thread->switch_handle = thread;
8000436c:	06a52e23          	sw	a0,124(a0)
}
80004370:	00c12703          	lw	a4,12(sp)
80004374:	2505a783          	lw	a5,592(a1)
80004378:	00f747b3          	xor	a5,a4,a5
8000437c:	00000713          	li	a4,0
80004380:	00079863          	bnez	a5,80004390 <arch_new_thread+0x80>
80004384:	01c12083          	lw	ra,28(sp)
80004388:	02010113          	addi	sp,sp,32
8000438c:	00008067          	ret
80004390:	780030ef          	jal	ra,80007b10 <_StackCheckHandler>

80004394 <malloc_prepare>:
80004394:	00308013          	addi	zero,ra,3
{
80004398:	fe010113          	addi	sp,sp,-32
8000439c:	00112e23          	sw	ra,28(sp)
800043a0:	8000d7b7          	lui	a5,0x8000d
800043a4:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800043a8:	00e12623          	sw	a4,12(sp)
800043ac:	00000713          	li	a4,0
}
800043b0:	00c12703          	lw	a4,12(sp)
800043b4:	2507a783          	lw	a5,592(a5)
800043b8:	00f747b3          	xor	a5,a4,a5
800043bc:	00000713          	li	a4,0
800043c0:	00079a63          	bnez	a5,800043d4 <malloc_prepare+0x40>
800043c4:	00000513          	li	a0,0
800043c8:	01c12083          	lw	ra,28(sp)
800043cc:	02010113          	addi	sp,sp,32
800043d0:	00008067          	ret
800043d4:	73c030ef          	jal	ra,80007b10 <_StackCheckHandler>

800043d8 <_stdout_hook_default>:
800043d8:	00308013          	addi	zero,ra,3
{
800043dc:	fe010113          	addi	sp,sp,-32
800043e0:	00112e23          	sw	ra,28(sp)
800043e4:	8000d7b7          	lui	a5,0x8000d
800043e8:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800043ec:	00e12623          	sw	a4,12(sp)
800043f0:	00000713          	li	a4,0
}
800043f4:	00c12703          	lw	a4,12(sp)
800043f8:	2507a783          	lw	a5,592(a5)
800043fc:	00f747b3          	xor	a5,a4,a5
80004400:	00000713          	li	a4,0
80004404:	00079a63          	bnez	a5,80004418 <_stdout_hook_default+0x40>
80004408:	fff00513          	li	a0,-1
8000440c:	01c12083          	lw	ra,28(sp)
80004410:	02010113          	addi	sp,sp,32
80004414:	00008067          	ret
80004418:	6f8030ef          	jal	ra,80007b10 <_StackCheckHandler>

8000441c <__stdout_hook_install>:
8000441c:	00308013          	addi	zero,ra,3
{
80004420:	fe010113          	addi	sp,sp,-32
80004424:	00112e23          	sw	ra,28(sp)
80004428:	8000d7b7          	lui	a5,0x8000d
8000442c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004430:	00e12623          	sw	a4,12(sp)
80004434:	00000713          	li	a4,0
	_stdout_hook = hook;
80004438:	82a1a023          	sw	a0,-2016(gp) # 8000d908 <_stdout_hook>
}
8000443c:	00c12703          	lw	a4,12(sp)
80004440:	2507a783          	lw	a5,592(a5)
80004444:	00f747b3          	xor	a5,a4,a5
80004448:	00000713          	li	a4,0
8000444c:	00079863          	bnez	a5,8000445c <__stdout_hook_install+0x40>
80004450:	01c12083          	lw	ra,28(sp)
80004454:	02010113          	addi	sp,sp,32
80004458:	00008067          	ret
8000445c:	6b4030ef          	jal	ra,80007b10 <_StackCheckHandler>

80004460 <z_impl_zephyr_write_stdout>:
80004460:	00308013          	addi	zero,ra,3
{
80004464:	fd010113          	addi	sp,sp,-48
80004468:	02112623          	sw	ra,44(sp)
8000446c:	02812423          	sw	s0,40(sp)
80004470:	02912223          	sw	s1,36(sp)
80004474:	03212023          	sw	s2,32(sp)
80004478:	01312e23          	sw	s3,28(sp)
8000447c:	00050993          	mv	s3,a0
80004480:	00058913          	mv	s2,a1
80004484:	8000d7b7          	lui	a5,0x8000d
80004488:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000448c:	00e12623          	sw	a4,12(sp)
80004490:	00000713          	li	a4,0
	for (i = 0; i < nbytes; i++) {
80004494:	00000413          	li	s0,0
80004498:	0140006f          	j	800044ac <z_impl_zephyr_write_stdout+0x4c>
		_stdout_hook(*(buf + i));
8000449c:	8201a783          	lw	a5,-2016(gp) # 8000d908 <_stdout_hook>
800044a0:	0004c503          	lbu	a0,0(s1)
800044a4:	000780e7          	jalr	a5
	for (i = 0; i < nbytes; i++) {
800044a8:	00140413          	addi	s0,s0,1
800044ac:	03245263          	bge	s0,s2,800044d0 <z_impl_zephyr_write_stdout+0x70>
		if (*(buf + i) == '\n') {
800044b0:	008984b3          	add	s1,s3,s0
800044b4:	0004c703          	lbu	a4,0(s1)
800044b8:	00a00793          	li	a5,10
800044bc:	fef710e3          	bne	a4,a5,8000449c <z_impl_zephyr_write_stdout+0x3c>
			_stdout_hook('\r');
800044c0:	8201a783          	lw	a5,-2016(gp) # 8000d908 <_stdout_hook>
800044c4:	00d00513          	li	a0,13
800044c8:	000780e7          	jalr	a5
800044cc:	fd1ff06f          	j	8000449c <z_impl_zephyr_write_stdout+0x3c>
}
800044d0:	8000d7b7          	lui	a5,0x8000d
800044d4:	00c12703          	lw	a4,12(sp)
800044d8:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800044dc:	00f747b3          	xor	a5,a4,a5
800044e0:	00000713          	li	a4,0
800044e4:	02079263          	bnez	a5,80004508 <z_impl_zephyr_write_stdout+0xa8>
800044e8:	00090513          	mv	a0,s2
800044ec:	02c12083          	lw	ra,44(sp)
800044f0:	02812403          	lw	s0,40(sp)
800044f4:	02412483          	lw	s1,36(sp)
800044f8:	02012903          	lw	s2,32(sp)
800044fc:	01c12983          	lw	s3,28(sp)
80004500:	03010113          	addi	sp,sp,48
80004504:	00008067          	ret
80004508:	608030ef          	jal	ra,80007b10 <_StackCheckHandler>

8000450c <_write>:
8000450c:	00308013          	addi	zero,ra,3
{
80004510:	fe010113          	addi	sp,sp,-32
80004514:	00112e23          	sw	ra,28(sp)
80004518:	00812c23          	sw	s0,24(sp)
8000451c:	00058513          	mv	a0,a1
80004520:	00060593          	mv	a1,a2
80004524:	8000d437          	lui	s0,0x8000d
80004528:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000452c:	00f12623          	sw	a5,12(sp)
80004530:	00000793          	li	a5,0
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
80004534:	f2dff0ef          	jal	ra,80004460 <z_impl_zephyr_write_stdout>
}
80004538:	00c12703          	lw	a4,12(sp)
8000453c:	25042783          	lw	a5,592(s0)
80004540:	00f747b3          	xor	a5,a4,a5
80004544:	00000713          	li	a4,0
80004548:	00079a63          	bnez	a5,8000455c <_write+0x50>
8000454c:	01c12083          	lw	ra,28(sp)
80004550:	01812403          	lw	s0,24(sp)
80004554:	02010113          	addi	sp,sp,32
80004558:	00008067          	ret
8000455c:	5b4030ef          	jal	ra,80007b10 <_StackCheckHandler>

80004560 <_exit>:
80004560:	00308013          	addi	zero,ra,3
{
80004564:	fe010113          	addi	sp,sp,-32
80004568:	00112e23          	sw	ra,28(sp)
8000456c:	8000d7b7          	lui	a5,0x8000d
80004570:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004574:	00e12623          	sw	a4,12(sp)
80004578:	00000713          	li	a4,0
	_write(1, "exit\n", 5);
8000457c:	00500613          	li	a2,5
80004580:	8000a5b7          	lui	a1,0x8000a
80004584:	6c058593          	addi	a1,a1,1728 # 8000a6c0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a6c1>
80004588:	00100513          	li	a0,1
8000458c:	f81ff0ef          	jal	ra,8000450c <_write>
	while (1) {
80004590:	0000006f          	j	80004590 <_exit+0x30>

80004594 <_sbrk>:
80004594:	00308013          	addi	zero,ra,3
{
80004598:	fe010113          	addi	sp,sp,-32
8000459c:	00112e23          	sw	ra,28(sp)
800045a0:	00050713          	mv	a4,a0
800045a4:	8000d7b7          	lui	a5,0x8000d
800045a8:	2507a683          	lw	a3,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800045ac:	00d12623          	sw	a3,12(sp)
800045b0:	00000693          	li	a3,0
	ptr = ((char *)HEAP_BASE) + heap_sz;
800045b4:	8000b7b7          	lui	a5,0x8000b
800045b8:	9507a683          	lw	a3,-1712(a5) # 8000a950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a951>
800045bc:	84818793          	addi	a5,gp,-1976 # 8000d930 <__data_region_end>
800045c0:	00f68533          	add	a0,a3,a5
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
800045c4:	00d70733          	add	a4,a4,a3
800045c8:	c00006b7          	lui	a3,0xc0000
800045cc:	40f687b3          	sub	a5,a3,a5
800045d0:	02f77863          	bgeu	a4,a5,80004600 <_sbrk+0x6c>
		heap_sz += count;
800045d4:	8000b7b7          	lui	a5,0x8000b
800045d8:	94e7a823          	sw	a4,-1712(a5) # 8000a950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a951>
}
800045dc:	8000d7b7          	lui	a5,0x8000d
800045e0:	00c12703          	lw	a4,12(sp)
800045e4:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800045e8:	00f747b3          	xor	a5,a4,a5
800045ec:	00000713          	li	a4,0
800045f0:	00079c63          	bnez	a5,80004608 <_sbrk+0x74>
800045f4:	01c12083          	lw	ra,28(sp)
800045f8:	02010113          	addi	sp,sp,32
800045fc:	00008067          	ret
		ret = (void *)-1;
80004600:	fff00513          	li	a0,-1
	return ret;
80004604:	fd9ff06f          	j	800045dc <_sbrk+0x48>
}
80004608:	508030ef          	jal	ra,80007b10 <_StackCheckHandler>

8000460c <__retarget_lock_acquire_recursive>:
8000460c:	00308013          	addi	zero,ra,3
{
80004610:	fe010113          	addi	sp,sp,-32
80004614:	00112e23          	sw	ra,28(sp)
80004618:	00812c23          	sw	s0,24(sp)
8000461c:	8000d437          	lui	s0,0x8000d
80004620:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004624:	00f12623          	sw	a5,12(sp)
80004628:	00000793          	li	a5,0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
8000462c:	fff00593          	li	a1,-1
80004630:	fff00613          	li	a2,-1
80004634:	33d010ef          	jal	ra,80006170 <z_impl_k_mutex_lock>
}
80004638:	00c12703          	lw	a4,12(sp)
8000463c:	25042783          	lw	a5,592(s0)
80004640:	00f747b3          	xor	a5,a4,a5
80004644:	00000713          	li	a4,0
80004648:	00079a63          	bnez	a5,8000465c <__retarget_lock_acquire_recursive+0x50>
8000464c:	01c12083          	lw	ra,28(sp)
80004650:	01812403          	lw	s0,24(sp)
80004654:	02010113          	addi	sp,sp,32
80004658:	00008067          	ret
8000465c:	4b4030ef          	jal	ra,80007b10 <_StackCheckHandler>

80004660 <__retarget_lock_release_recursive>:
80004660:	00308013          	addi	zero,ra,3
{
80004664:	fe010113          	addi	sp,sp,-32
80004668:	00112e23          	sw	ra,28(sp)
8000466c:	00812c23          	sw	s0,24(sp)
80004670:	8000d437          	lui	s0,0x8000d
80004674:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004678:	00f12623          	sw	a5,12(sp)
8000467c:	00000793          	li	a5,0
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
80004680:	49d010ef          	jal	ra,8000631c <z_impl_k_mutex_unlock>
}
80004684:	00c12703          	lw	a4,12(sp)
80004688:	25042783          	lw	a5,592(s0)
8000468c:	00f747b3          	xor	a5,a4,a5
80004690:	00000713          	li	a4,0
80004694:	00079a63          	bnez	a5,800046a8 <__retarget_lock_release_recursive+0x48>
80004698:	01c12083          	lw	ra,28(sp)
8000469c:	01812403          	lw	s0,24(sp)
800046a0:	02010113          	addi	sp,sp,32
800046a4:	00008067          	ret
800046a8:	468030ef          	jal	ra,80007b10 <_StackCheckHandler>

800046ac <__chk_fail>:
800046ac:	00308013          	addi	zero,ra,3
{
800046b0:	fe010113          	addi	sp,sp,-32
800046b4:	00112e23          	sw	ra,28(sp)
800046b8:	8000d7b7          	lui	a5,0x8000d
800046bc:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800046c0:	00e12623          	sw	a4,12(sp)
800046c4:	00000713          	li	a4,0
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
800046c8:	01d00613          	li	a2,29
800046cc:	8000a5b7          	lui	a1,0x8000a
800046d0:	6c858593          	addi	a1,a1,1736 # 8000a6c8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a6c9>
800046d4:	00200513          	li	a0,2
800046d8:	e35ff0ef          	jal	ra,8000450c <_write>
	return a0;
}

static inline uintptr_t arch_syscall_invoke1(uintptr_t arg1, uintptr_t call_id)
{
	register unsigned long a0 __asm__ ("a0") = arg1;
800046dc:	00300513          	li	a0,3
	register unsigned long t0 __asm__ ("t0") = call_id;
800046e0:	00000293          	li	t0,0

	__asm__ volatile ("ecall"
800046e4:	00000073          	ecall

800046e8 <z_impl_sys_rand32_get>:
800046e8:	00308013          	addi	zero,ra,3
{
800046ec:	fe010113          	addi	sp,sp,-32
800046f0:	00112e23          	sw	ra,28(sp)
800046f4:	00812c23          	sw	s0,24(sp)
800046f8:	8000d437          	lui	s0,0x8000d
800046fc:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004700:	00f12623          	sw	a5,12(sp)
80004704:	00000793          	li	a5,0

extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
80004708:	5c9000ef          	jal	ra,800054d0 <sys_clock_cycle_get_32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
8000470c:	8000b7b7          	lui	a5,0x8000b
80004710:	3b9ad737          	lui	a4,0x3b9ad
80004714:	a0370713          	addi	a4,a4,-1533 # 3b9aca03 <CONFIG_SRAM_SIZE+0x3b8aca03>
80004718:	95478793          	addi	a5,a5,-1708 # 8000a954 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a955>
8000471c:	0f50000f          	fence	iorw,ow
80004720:	04e7a6af          	amoadd.w.aq	a3,a4,(a5)
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
80004724:	00a68533          	add	a0,a3,a0
}
80004728:	00c12703          	lw	a4,12(sp)
8000472c:	25042783          	lw	a5,592(s0)
80004730:	00f747b3          	xor	a5,a4,a5
80004734:	00000713          	li	a4,0
80004738:	00079a63          	bnez	a5,8000474c <z_impl_sys_rand32_get+0x64>
8000473c:	01c12083          	lw	ra,28(sp)
80004740:	01812403          	lw	s0,24(sp)
80004744:	02010113          	addi	sp,sp,32
80004748:	00008067          	ret
8000474c:	3c4030ef          	jal	ra,80007b10 <_StackCheckHandler>

80004750 <z_impl_sys_rand_get>:
80004750:	00308013          	addi	zero,ra,3
{
80004754:	fe010113          	addi	sp,sp,-32
80004758:	00112e23          	sw	ra,28(sp)
8000475c:	00812c23          	sw	s0,24(sp)
80004760:	00912a23          	sw	s1,20(sp)
80004764:	01212823          	sw	s2,16(sp)
80004768:	00050913          	mv	s2,a0
8000476c:	00058413          	mv	s0,a1
80004770:	8000d7b7          	lui	a5,0x8000d
80004774:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004778:	00e12623          	sw	a4,12(sp)
8000477c:	00000713          	li	a4,0
	while (outlen) {
80004780:	01c0006f          	j	8000479c <z_impl_sys_rand_get+0x4c>
80004784:	00048613          	mv	a2,s1
80004788:	00810593          	addi	a1,sp,8
8000478c:	00090513          	mv	a0,s2
80004790:	a68fc0ef          	jal	ra,800009f8 <memcpy>
		udst += blocksize;
80004794:	00990933          	add	s2,s2,s1
		outlen -= blocksize;
80004798:	40940433          	sub	s0,s0,s1
	while (outlen) {
8000479c:	02040063          	beqz	s0,800047bc <z_impl_sys_rand_get+0x6c>
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
800047a0:	f49ff0ef          	jal	ra,800046e8 <z_impl_sys_rand32_get>
		ret = sys_rand32_get();
800047a4:	00a12423          	sw	a0,8(sp)
		blocksize = MIN(outlen, sizeof(ret));
800047a8:	00040493          	mv	s1,s0
800047ac:	00400793          	li	a5,4
800047b0:	fc87fae3          	bgeu	a5,s0,80004784 <z_impl_sys_rand_get+0x34>
800047b4:	00400493          	li	s1,4
800047b8:	fcdff06f          	j	80004784 <z_impl_sys_rand_get+0x34>
}
800047bc:	8000d7b7          	lui	a5,0x8000d
800047c0:	00c12703          	lw	a4,12(sp)
800047c4:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800047c8:	00f747b3          	xor	a5,a4,a5
800047cc:	00000713          	li	a4,0
800047d0:	00079e63          	bnez	a5,800047ec <z_impl_sys_rand_get+0x9c>
800047d4:	01c12083          	lw	ra,28(sp)
800047d8:	01812403          	lw	s0,24(sp)
800047dc:	01412483          	lw	s1,20(sp)
800047e0:	01012903          	lw	s2,16(sp)
800047e4:	02010113          	addi	sp,sp,32
800047e8:	00008067          	ret
800047ec:	324030ef          	jal	ra,80007b10 <_StackCheckHandler>

800047f0 <plic_init>:
800047f0:	00308013          	addi	zero,ra,3
{
800047f4:	fe010113          	addi	sp,sp,-32
800047f8:	00112e23          	sw	ra,28(sp)
800047fc:	8000d7b7          	lui	a5,0x8000d
80004800:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004804:	00e12623          	sw	a4,12(sp)
80004808:	00000713          	li	a4,0
	for (i = 0; i < PLIC_EN_SIZE; i++) {
8000480c:	00000793          	li	a5,0
	volatile uint32_t *en = (volatile uint32_t *)PLIC_IRQ_EN;
80004810:	0c002737          	lui	a4,0xc002
	for (i = 0; i < PLIC_EN_SIZE; i++) {
80004814:	0100006f          	j	80004824 <plic_init+0x34>
		*en = 0U;
80004818:	00072023          	sw	zero,0(a4) # c002000 <CONFIG_SRAM_SIZE+0xbf02000>
		en++;
8000481c:	00470713          	addi	a4,a4,4
	for (i = 0; i < PLIC_EN_SIZE; i++) {
80004820:	00178793          	addi	a5,a5,1
80004824:	00100693          	li	a3,1
80004828:	fef6d8e3          	bge	a3,a5,80004818 <plic_init+0x28>
	for (i = 0; i < PLIC_IRQS; i++) {
8000482c:	00000793          	li	a5,0
	volatile uint32_t *prio = (volatile uint32_t *)PLIC_PRIO;
80004830:	0c000737          	lui	a4,0xc000
80004834:	0100006f          	j	80004844 <plic_init+0x54>
		*prio = 0U;
80004838:	00072023          	sw	zero,0(a4) # c000000 <CONFIG_SRAM_SIZE+0xbf00000>
		prio++;
8000483c:	00470713          	addi	a4,a4,4
	for (i = 0; i < PLIC_IRQS; i++) {
80004840:	00178793          	addi	a5,a5,1
80004844:	03300693          	li	a3,51
80004848:	fef6d8e3          	bge	a3,a5,80004838 <plic_init+0x48>
	regs->threshold_prio = 0U;
8000484c:	0c2007b7          	lui	a5,0xc200
80004850:	0007a023          	sw	zero,0(a5) # c200000 <CONFIG_SRAM_SIZE+0xc100000>
	IRQ_CONNECT(RISCV_MACHINE_EXT_IRQ,
80004854:	00000613          	li	a2,0
80004858:	00000593          	li	a1,0
8000485c:	00b00513          	li	a0,11
80004860:	f98ff0ef          	jal	ra,80003ff8 <z_riscv_irq_priority_set>
	irq_enable(RISCV_MACHINE_EXT_IRQ);
80004864:	00b00513          	li	a0,11
80004868:	f28ff0ef          	jal	ra,80003f90 <arch_irq_enable>
}
8000486c:	8000d7b7          	lui	a5,0x8000d
80004870:	00c12703          	lw	a4,12(sp)
80004874:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004878:	00f747b3          	xor	a5,a4,a5
8000487c:	00000713          	li	a4,0
80004880:	00079a63          	bnez	a5,80004894 <plic_init+0xa4>
80004884:	00000513          	li	a0,0
80004888:	01c12083          	lw	ra,28(sp)
8000488c:	02010113          	addi	sp,sp,32
80004890:	00008067          	ret
80004894:	27c030ef          	jal	ra,80007b10 <_StackCheckHandler>

80004898 <plic_irq_handler>:
80004898:	00308013          	addi	zero,ra,3
{
8000489c:	fe010113          	addi	sp,sp,-32
800048a0:	00112e23          	sw	ra,28(sp)
800048a4:	00812c23          	sw	s0,24(sp)
800048a8:	8000d7b7          	lui	a5,0x8000d
800048ac:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800048b0:	00e12623          	sw	a4,12(sp)
800048b4:	00000713          	li	a4,0
	irq = regs->claim_complete;
800048b8:	0c2007b7          	lui	a5,0xc200
800048bc:	0047a403          	lw	s0,4(a5) # c200004 <CONFIG_SRAM_SIZE+0xc100004>
	save_irq = irq;
800048c0:	8000b7b7          	lui	a5,0x8000b
800048c4:	9487ac23          	sw	s0,-1704(a5) # 8000a958 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a959>
	if (irq == 0U || irq >= PLIC_IRQS)
800048c8:	fff40713          	addi	a4,s0,-1
800048cc:	03200793          	li	a5,50
800048d0:	04e7ee63          	bltu	a5,a4,8000492c <plic_irq_handler+0x94>
	irq += CONFIG_2ND_LVL_ISR_TBL_OFFSET;
800048d4:	00c40413          	addi	s0,s0,12
	ite->isr(ite->arg);
800048d8:	800097b7          	lui	a5,0x80009
800048dc:	00341413          	slli	s0,s0,0x3
800048e0:	5f478793          	addi	a5,a5,1524 # 800095f4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800095f5>
800048e4:	008787b3          	add	a5,a5,s0
800048e8:	0047a703          	lw	a4,4(a5)
800048ec:	0007a503          	lw	a0,0(a5)
800048f0:	000700e7          	jalr	a4
	regs->claim_complete = save_irq;
800048f4:	8000b7b7          	lui	a5,0x8000b
800048f8:	9587a703          	lw	a4,-1704(a5) # 8000a958 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a959>
800048fc:	0c2007b7          	lui	a5,0xc200
80004900:	00e7a223          	sw	a4,4(a5) # c200004 <CONFIG_SRAM_SIZE+0xc100004>
}
80004904:	8000d7b7          	lui	a5,0x8000d
80004908:	00c12703          	lw	a4,12(sp)
8000490c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004910:	00f747b3          	xor	a5,a4,a5
80004914:	00000713          	li	a4,0
80004918:	02079063          	bnez	a5,80004938 <plic_irq_handler+0xa0>
8000491c:	01c12083          	lw	ra,28(sp)
80004920:	01812403          	lw	s0,24(sp)
80004924:	02010113          	addi	sp,sp,32
80004928:	00008067          	ret
		z_irq_spurious(NULL);
8000492c:	00000513          	li	a0,0
80004930:	855ff0ef          	jal	ra,80004184 <z_irq_spurious>
80004934:	fa1ff06f          	j	800048d4 <plic_irq_handler+0x3c>
}
80004938:	1d8030ef          	jal	ra,80007b10 <_StackCheckHandler>

8000493c <riscv_plic_irq_enable>:
8000493c:	00308013          	addi	zero,ra,3
{
80004940:	fe010113          	addi	sp,sp,-32
80004944:	00112e23          	sw	ra,28(sp)
80004948:	8000d5b7          	lui	a1,0x8000d
8000494c:	2505a783          	lw	a5,592(a1) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004950:	00f12623          	sw	a5,12(sp)
80004954:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004958:	30047773          	csrrci	a4,mstatus,8
	en += (irq >> 5);
8000495c:	00555693          	srli	a3,a0,0x5
80004960:	00269693          	slli	a3,a3,0x2
80004964:	0c0027b7          	lui	a5,0xc002
80004968:	00d787b3          	add	a5,a5,a3
	*en |= (1 << (irq & 31));
8000496c:	0007a683          	lw	a3,0(a5) # c002000 <CONFIG_SRAM_SIZE+0xbf02000>
80004970:	00100613          	li	a2,1
80004974:	00a61633          	sll	a2,a2,a0
80004978:	00c6e6b3          	or	a3,a3,a2
8000497c:	00d7a023          	sw	a3,0(a5)
			  : "r" (key & MSTATUS_IEN)
80004980:	00877793          	andi	a5,a4,8
	__asm__ volatile ("csrs mstatus, %0"
80004984:	3007a073          	csrs	mstatus,a5
}
80004988:	00c12703          	lw	a4,12(sp)
8000498c:	2505a783          	lw	a5,592(a1)
80004990:	00f747b3          	xor	a5,a4,a5
80004994:	00000713          	li	a4,0
80004998:	00079863          	bnez	a5,800049a8 <riscv_plic_irq_enable+0x6c>
8000499c:	01c12083          	lw	ra,28(sp)
800049a0:	02010113          	addi	sp,sp,32
800049a4:	00008067          	ret
800049a8:	168030ef          	jal	ra,80007b10 <_StackCheckHandler>

800049ac <riscv_plic_set_priority>:
800049ac:	00308013          	addi	zero,ra,3
{
800049b0:	fe010113          	addi	sp,sp,-32
800049b4:	00112e23          	sw	ra,28(sp)
800049b8:	8000d7b7          	lui	a5,0x8000d
800049bc:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800049c0:	00e12623          	sw	a4,12(sp)
800049c4:	00000713          	li	a4,0
	if (priority > PLIC_MAX_PRIO)
800049c8:	00700793          	li	a5,7
800049cc:	00b7f463          	bgeu	a5,a1,800049d4 <riscv_plic_set_priority+0x28>
		priority = PLIC_MAX_PRIO;
800049d0:	00700593          	li	a1,7
	prio += irq;
800049d4:	00251513          	slli	a0,a0,0x2
800049d8:	0c0007b7          	lui	a5,0xc000
800049dc:	00a787b3          	add	a5,a5,a0
	*prio = priority;
800049e0:	00b7a023          	sw	a1,0(a5) # c000000 <CONFIG_SRAM_SIZE+0xbf00000>
}
800049e4:	8000d7b7          	lui	a5,0x8000d
800049e8:	00c12703          	lw	a4,12(sp)
800049ec:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800049f0:	00f747b3          	xor	a5,a4,a5
800049f4:	00000713          	li	a4,0
800049f8:	00079863          	bnez	a5,80004a08 <riscv_plic_set_priority+0x5c>
800049fc:	01c12083          	lw	ra,28(sp)
80004a00:	02010113          	addi	sp,sp,32
80004a04:	00008067          	ret
80004a08:	108030ef          	jal	ra,80007b10 <_StackCheckHandler>

80004a0c <console_out>:
80004a0c:	00308013          	addi	zero,ra,3
{
80004a10:	fe010113          	addi	sp,sp,-32
80004a14:	00112e23          	sw	ra,28(sp)
80004a18:	00812c23          	sw	s0,24(sp)
80004a1c:	00050413          	mv	s0,a0
80004a20:	8000d7b7          	lui	a5,0x8000d
80004a24:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004a28:	00e12623          	sw	a4,12(sp)
80004a2c:	00000713          	li	a4,0
	if ('\n' == c) {
80004a30:	00a00793          	li	a5,10
80004a34:	04f50663          	beq	a0,a5,80004a80 <console_out+0x74>
	uart_poll_out(uart_console_dev, c);
80004a38:	0ff47593          	zext.b	a1,s0
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
80004a3c:	80009537          	lui	a0,0x80009
80004a40:	5dc50793          	addi	a5,a0,1500 # 800095dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800095dd>
80004a44:	0087a783          	lw	a5,8(a5)
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
80004a48:	0047a783          	lw	a5,4(a5)
80004a4c:	5dc50513          	addi	a0,a0,1500
80004a50:	000780e7          	jalr	a5
}
80004a54:	8000d7b7          	lui	a5,0x8000d
80004a58:	00c12703          	lw	a4,12(sp)
80004a5c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004a60:	00f747b3          	xor	a5,a4,a5
80004a64:	00000713          	li	a4,0
80004a68:	02079c63          	bnez	a5,80004aa0 <console_out+0x94>
80004a6c:	00040513          	mv	a0,s0
80004a70:	01c12083          	lw	ra,28(sp)
80004a74:	01812403          	lw	s0,24(sp)
80004a78:	02010113          	addi	sp,sp,32
80004a7c:	00008067          	ret
	const struct uart_driver_api *api =
80004a80:	80009537          	lui	a0,0x80009
80004a84:	5dc50793          	addi	a5,a0,1500 # 800095dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800095dd>
80004a88:	0087a783          	lw	a5,8(a5)
	api->poll_out(dev, out_char);
80004a8c:	0047a783          	lw	a5,4(a5)
80004a90:	00d00593          	li	a1,13
80004a94:	5dc50513          	addi	a0,a0,1500
80004a98:	000780e7          	jalr	a5
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
80004a9c:	f9dff06f          	j	80004a38 <console_out+0x2c>
80004aa0:	070030ef          	jal	ra,80007b10 <_StackCheckHandler>

80004aa4 <uart_console_hook_install>:
80004aa4:	00308013          	addi	zero,ra,3
{
80004aa8:	fe010113          	addi	sp,sp,-32
80004aac:	00112e23          	sw	ra,28(sp)
80004ab0:	00812c23          	sw	s0,24(sp)
80004ab4:	00912a23          	sw	s1,20(sp)
80004ab8:	8000d437          	lui	s0,0x8000d
80004abc:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004ac0:	00f12623          	sw	a5,12(sp)
80004ac4:	00000793          	li	a5,0
	__stdout_hook_install(console_out);
80004ac8:	800054b7          	lui	s1,0x80005
80004acc:	a0c48513          	addi	a0,s1,-1524 # 80004a0c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80004a0d>
80004ad0:	94dff0ef          	jal	ra,8000441c <__stdout_hook_install>
	__printk_hook_install(console_out);
80004ad4:	a0c48513          	addi	a0,s1,-1524
80004ad8:	f09fd0ef          	jal	ra,800029e0 <__printk_hook_install>
}
80004adc:	00c12703          	lw	a4,12(sp)
80004ae0:	25042783          	lw	a5,592(s0)
80004ae4:	00f747b3          	xor	a5,a4,a5
80004ae8:	00000713          	li	a4,0
80004aec:	00079c63          	bnez	a5,80004b04 <uart_console_hook_install+0x60>
80004af0:	01c12083          	lw	ra,28(sp)
80004af4:	01812403          	lw	s0,24(sp)
80004af8:	01412483          	lw	s1,20(sp)
80004afc:	02010113          	addi	sp,sp,32
80004b00:	00008067          	ret
80004b04:	00c030ef          	jal	ra,80007b10 <_StackCheckHandler>

80004b08 <uart_console_init>:
80004b08:	00308013          	addi	zero,ra,3
{
80004b0c:	fe010113          	addi	sp,sp,-32
80004b10:	00112e23          	sw	ra,28(sp)
80004b14:	8000d7b7          	lui	a5,0x8000d
80004b18:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004b1c:	00e12623          	sw	a4,12(sp)
80004b20:	00000713          	li	a4,0
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
80004b24:	80009537          	lui	a0,0x80009
80004b28:	5dc50513          	addi	a0,a0,1500 # 800095dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800095dd>
80004b2c:	335000ef          	jal	ra,80005660 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
80004b30:	02050863          	beqz	a0,80004b60 <uart_console_init+0x58>
	uart_console_hook_install();
80004b34:	f71ff0ef          	jal	ra,80004aa4 <uart_console_hook_install>
	return 0;
80004b38:	00000513          	li	a0,0
}
80004b3c:	8000d7b7          	lui	a5,0x8000d
80004b40:	00c12703          	lw	a4,12(sp)
80004b44:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004b48:	00f747b3          	xor	a5,a4,a5
80004b4c:	00000713          	li	a4,0
80004b50:	00079c63          	bnez	a5,80004b68 <uart_console_init+0x60>
80004b54:	01c12083          	lw	ra,28(sp)
80004b58:	02010113          	addi	sp,sp,32
80004b5c:	00008067          	ret
		return -ENODEV;
80004b60:	fed00513          	li	a0,-19
80004b64:	fd9ff06f          	j	80004b3c <uart_console_init+0x34>
}
80004b68:	7a9020ef          	jal	ra,80007b10 <_StackCheckHandler>

80004b6c <clock_control_get_rate>:
80004b6c:	00308013          	addi	zero,ra,3
 * @retval -ENOSYS if the interface is not implemented.
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
80004b70:	fe010113          	addi	sp,sp,-32
80004b74:	00112e23          	sw	ra,28(sp)
80004b78:	8000d7b7          	lui	a5,0x8000d
80004b7c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004b80:	00e12623          	sw	a4,12(sp)
80004b84:	00000713          	li	a4,0
	const struct clock_control_driver_api *api =
80004b88:	00852783          	lw	a5,8(a0)
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
80004b8c:	00c7a783          	lw	a5,12(a5)
80004b90:	02078663          	beqz	a5,80004bbc <clock_control_get_rate+0x50>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
80004b94:	000780e7          	jalr	a5
}
80004b98:	8000d7b7          	lui	a5,0x8000d
80004b9c:	00c12703          	lw	a4,12(sp)
80004ba0:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004ba4:	00f747b3          	xor	a5,a4,a5
80004ba8:	00000713          	li	a4,0
80004bac:	00079c63          	bnez	a5,80004bc4 <clock_control_get_rate+0x58>
80004bb0:	01c12083          	lw	ra,28(sp)
80004bb4:	02010113          	addi	sp,sp,32
80004bb8:	00008067          	ret
		return -ENOSYS;
80004bbc:	fa800513          	li	a0,-88
80004bc0:	fd9ff06f          	j	80004b98 <clock_control_get_rate+0x2c>
}
80004bc4:	74d020ef          	jal	ra,80007b10 <_StackCheckHandler>

80004bc8 <set_baud_rate>:
80004bc8:	00308013          	addi	zero,ra,3
{
80004bcc:	fe010113          	addi	sp,sp,-32
80004bd0:	00112e23          	sw	ra,28(sp)
80004bd4:	8000d7b7          	lui	a5,0x8000d
80004bd8:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004bdc:	00e12623          	sw	a4,12(sp)
80004be0:	00000713          	li	a4,0
	struct uart_ns16550_dev_data * const dev_data = dev->data;
80004be4:	01052703          	lw	a4,16(a0)
	if ((baud_rate != 0U) && (pclk != 0U)) {
80004be8:	08058263          	beqz	a1,80004c6c <set_baud_rate+0xa4>
80004bec:	08060063          	beqz	a2,80004c6c <set_baud_rate+0xa4>
		divisor = (pclk / (baud_rate << 4));
80004bf0:	00459793          	slli	a5,a1,0x4
80004bf4:	02f65633          	divu	a2,a2,a5
	return DEVICE_MMIO_GET(dev);
80004bf8:	00452783          	lw	a5,4(a0)
80004bfc:	0007a803          	lw	a6,0(a5)
	return config->reg_interval;
80004c00:	0107c683          	lbu	a3,16(a5)
		lcr_cache = INBYTE(LCR(dev));
80004c04:	00169793          	slli	a5,a3,0x1
80004c08:	00d787b3          	add	a5,a5,a3
80004c0c:	010787b3          	add	a5,a5,a6
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
80004c10:	0007c683          	lbu	a3,0(a5)
80004c14:	0ff6f813          	zext.b	a6,a3
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
80004c18:	0806e693          	ori	a3,a3,128
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
80004c1c:	00d78023          	sb	a3,0(a5)
		OUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));
80004c20:	0ff67693          	zext.b	a3,a2
	const struct uart_ns16550_device_config *config = dev->config;
80004c24:	00452783          	lw	a5,4(a0)
	return DEVICE_MMIO_GET(dev);
80004c28:	0007a783          	lw	a5,0(a5)
80004c2c:	00d78023          	sb	a3,0(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
80004c30:	00865613          	srli	a2,a2,0x8
80004c34:	0ff67613          	zext.b	a2,a2
	return DEVICE_MMIO_GET(dev);
80004c38:	00452783          	lw	a5,4(a0)
80004c3c:	0007a683          	lw	a3,0(a5)
	return config->reg_interval;
80004c40:	0107c783          	lbu	a5,16(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
80004c44:	00d787b3          	add	a5,a5,a3
80004c48:	00c78023          	sb	a2,0(a5)
	return DEVICE_MMIO_GET(dev);
80004c4c:	00452783          	lw	a5,4(a0)
80004c50:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
80004c54:	0107c683          	lbu	a3,16(a5)
		OUTBYTE(LCR(dev), lcr_cache);
80004c58:	00169793          	slli	a5,a3,0x1
80004c5c:	00d787b3          	add	a5,a5,a3
80004c60:	00c787b3          	add	a5,a5,a2
80004c64:	01078023          	sb	a6,0(a5)
		dev_data->uart_config.baudrate = baud_rate;
80004c68:	00b72023          	sw	a1,0(a4)
}
80004c6c:	8000d7b7          	lui	a5,0x8000d
80004c70:	00c12703          	lw	a4,12(sp)
80004c74:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004c78:	00f747b3          	xor	a5,a4,a5
80004c7c:	00000713          	li	a4,0
80004c80:	00079863          	bnez	a5,80004c90 <set_baud_rate+0xc8>
80004c84:	01c12083          	lw	ra,28(sp)
80004c88:	02010113          	addi	sp,sp,32
80004c8c:	00008067          	ret
80004c90:	681020ef          	jal	ra,80007b10 <_StackCheckHandler>

80004c94 <uart_ns16550_config_get>:
80004c94:	00308013          	addi	zero,ra,3
{
80004c98:	fe010113          	addi	sp,sp,-32
80004c9c:	00112e23          	sw	ra,28(sp)
80004ca0:	8000d737          	lui	a4,0x8000d
80004ca4:	25072783          	lw	a5,592(a4) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004ca8:	00f12623          	sw	a5,12(sp)
80004cac:	00000793          	li	a5,0
	struct uart_ns16550_dev_data *data = dev->data;
80004cb0:	01052783          	lw	a5,16(a0)
	cfg->baudrate = data->uart_config.baudrate;
80004cb4:	0007a683          	lw	a3,0(a5)
80004cb8:	00d5a023          	sw	a3,0(a1)
	cfg->parity = data->uart_config.parity;
80004cbc:	0047c683          	lbu	a3,4(a5)
80004cc0:	00d58223          	sb	a3,4(a1)
	cfg->stop_bits = data->uart_config.stop_bits;
80004cc4:	0057c683          	lbu	a3,5(a5)
80004cc8:	00d582a3          	sb	a3,5(a1)
	cfg->data_bits = data->uart_config.data_bits;
80004ccc:	0067c683          	lbu	a3,6(a5)
80004cd0:	00d58323          	sb	a3,6(a1)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
80004cd4:	0077c783          	lbu	a5,7(a5)
80004cd8:	00f583a3          	sb	a5,7(a1)
}
80004cdc:	00c12683          	lw	a3,12(sp)
80004ce0:	25072783          	lw	a5,592(a4)
80004ce4:	00f6c7b3          	xor	a5,a3,a5
80004ce8:	00000693          	li	a3,0
80004cec:	00079a63          	bnez	a5,80004d00 <uart_ns16550_config_get+0x6c>
80004cf0:	00000513          	li	a0,0
80004cf4:	01c12083          	lw	ra,28(sp)
80004cf8:	02010113          	addi	sp,sp,32
80004cfc:	00008067          	ret
80004d00:	611020ef          	jal	ra,80007b10 <_StackCheckHandler>

80004d04 <uart_ns16550_poll_in>:
80004d04:	00308013          	addi	zero,ra,3
{
80004d08:	fe010113          	addi	sp,sp,-32
80004d0c:	00112e23          	sw	ra,28(sp)
80004d10:	8000d7b7          	lui	a5,0x8000d
80004d14:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004d18:	00e12623          	sw	a4,12(sp)
80004d1c:	00000713          	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004d20:	30047773          	csrrci	a4,mstatus,8
	return DEVICE_MMIO_GET(dev);
80004d24:	00452783          	lw	a5,4(a0)
80004d28:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
80004d2c:	0107c683          	lbu	a3,16(a5)
	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
80004d30:	00269793          	slli	a5,a3,0x2
80004d34:	00d787b3          	add	a5,a5,a3
80004d38:	00c787b3          	add	a5,a5,a2
	return *(volatile uint8_t *)addr;
80004d3c:	0007c783          	lbu	a5,0(a5)
80004d40:	0017f793          	andi	a5,a5,1
80004d44:	02078e63          	beqz	a5,80004d80 <uart_ns16550_poll_in+0x7c>
80004d48:	00064783          	lbu	a5,0(a2)
		*c = INBYTE(RDR(dev));
80004d4c:	00f58023          	sb	a5,0(a1)
		ret = 0;
80004d50:	00000513          	li	a0,0
	__asm__ volatile ("csrs mstatus, %0"
80004d54:	00877793          	andi	a5,a4,8
80004d58:	3007a073          	csrs	mstatus,a5
}
80004d5c:	8000d7b7          	lui	a5,0x8000d
80004d60:	00c12703          	lw	a4,12(sp)
80004d64:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004d68:	00f747b3          	xor	a5,a4,a5
80004d6c:	00000713          	li	a4,0
80004d70:	00079c63          	bnez	a5,80004d88 <uart_ns16550_poll_in+0x84>
80004d74:	01c12083          	lw	ra,28(sp)
80004d78:	02010113          	addi	sp,sp,32
80004d7c:	00008067          	ret
	int ret = -1;
80004d80:	fff00513          	li	a0,-1
80004d84:	fd1ff06f          	j	80004d54 <uart_ns16550_poll_in+0x50>
}
80004d88:	589020ef          	jal	ra,80007b10 <_StackCheckHandler>

80004d8c <uart_ns16550_poll_out>:
80004d8c:	00308013          	addi	zero,ra,3
{
80004d90:	fe010113          	addi	sp,sp,-32
80004d94:	00112e23          	sw	ra,28(sp)
80004d98:	8000d7b7          	lui	a5,0x8000d
80004d9c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004da0:	00e12623          	sw	a4,12(sp)
80004da4:	00000713          	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004da8:	30047673          	csrrci	a2,mstatus,8
	return DEVICE_MMIO_GET(dev);
80004dac:	00452783          	lw	a5,4(a0)
80004db0:	0007a683          	lw	a3,0(a5)
	return config->reg_interval;
80004db4:	0107c703          	lbu	a4,16(a5)
	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0) {
80004db8:	00271793          	slli	a5,a4,0x2
80004dbc:	00e787b3          	add	a5,a5,a4
80004dc0:	00d787b3          	add	a5,a5,a3
80004dc4:	0007c783          	lbu	a5,0(a5)
80004dc8:	0207f793          	andi	a5,a5,32
80004dcc:	fe0780e3          	beqz	a5,80004dac <uart_ns16550_poll_out+0x20>
	*(volatile uint8_t *)addr = data;
80004dd0:	00b68023          	sb	a1,0(a3) # c0000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xc0000001>
	__asm__ volatile ("csrs mstatus, %0"
80004dd4:	00867793          	andi	a5,a2,8
80004dd8:	3007a073          	csrs	mstatus,a5
}
80004ddc:	8000d7b7          	lui	a5,0x8000d
80004de0:	00c12703          	lw	a4,12(sp)
80004de4:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004de8:	00f747b3          	xor	a5,a4,a5
80004dec:	00000713          	li	a4,0
80004df0:	00079863          	bnez	a5,80004e00 <uart_ns16550_poll_out+0x74>
80004df4:	01c12083          	lw	ra,28(sp)
80004df8:	02010113          	addi	sp,sp,32
80004dfc:	00008067          	ret
80004e00:	511020ef          	jal	ra,80007b10 <_StackCheckHandler>

80004e04 <uart_ns16550_err_check>:
80004e04:	00308013          	addi	zero,ra,3
{
80004e08:	fe010113          	addi	sp,sp,-32
80004e0c:	00112e23          	sw	ra,28(sp)
80004e10:	8000d6b7          	lui	a3,0x8000d
80004e14:	2506a783          	lw	a5,592(a3) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004e18:	00f12623          	sw	a5,12(sp)
80004e1c:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004e20:	30047773          	csrrci	a4,mstatus,8
	return DEVICE_MMIO_GET(dev);
80004e24:	00452783          	lw	a5,4(a0)
80004e28:	0007a583          	lw	a1,0(a5)
	return config->reg_interval;
80004e2c:	0107c603          	lbu	a2,16(a5)
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
80004e30:	00261793          	slli	a5,a2,0x2
80004e34:	00c787b3          	add	a5,a5,a2
80004e38:	00b787b3          	add	a5,a5,a1
	return *(volatile uint8_t *)addr;
80004e3c:	0007c503          	lbu	a0,0(a5)
	__asm__ volatile ("csrs mstatus, %0"
80004e40:	00877793          	andi	a5,a4,8
80004e44:	3007a073          	csrs	mstatus,a5
}
80004e48:	00c12703          	lw	a4,12(sp)
80004e4c:	2506a783          	lw	a5,592(a3)
80004e50:	00f747b3          	xor	a5,a4,a5
80004e54:	00000713          	li	a4,0
80004e58:	00079c63          	bnez	a5,80004e70 <uart_ns16550_err_check+0x6c>
80004e5c:	01e57513          	andi	a0,a0,30
80004e60:	40155513          	srai	a0,a0,0x1
80004e64:	01c12083          	lw	ra,28(sp)
80004e68:	02010113          	addi	sp,sp,32
80004e6c:	00008067          	ret
80004e70:	4a1020ef          	jal	ra,80007b10 <_StackCheckHandler>

80004e74 <uart_ns16550_configure>:
80004e74:	00308013          	addi	zero,ra,3
{
80004e78:	fd010113          	addi	sp,sp,-48
80004e7c:	02112623          	sw	ra,44(sp)
80004e80:	02812423          	sw	s0,40(sp)
80004e84:	02912223          	sw	s1,36(sp)
80004e88:	03212023          	sw	s2,32(sp)
80004e8c:	01312e23          	sw	s3,28(sp)
80004e90:	01412c23          	sw	s4,24(sp)
80004e94:	00050413          	mv	s0,a0
80004e98:	00058493          	mv	s1,a1
80004e9c:	8000d7b7          	lui	a5,0x8000d
80004ea0:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004ea4:	00e12623          	sw	a4,12(sp)
80004ea8:	00000713          	li	a4,0
	struct uart_ns16550_dev_data * const dev_data = dev->data;
80004eac:	01052a03          	lw	s4,16(a0)
	const struct uart_ns16550_device_config * const dev_cfg = dev->config;
80004eb0:	00452983          	lw	s3,4(a0)
	uint32_t pclk = 0U;
80004eb4:	00012023          	sw	zero,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004eb8:	30047973          	csrrci	s2,mstatus,8
	if (dev_cfg->sys_clk_freq != 0U) {
80004ebc:	0049a783          	lw	a5,4(s3)
80004ec0:	04078063          	beqz	a5,80004f00 <uart_ns16550_configure+0x8c>
		pclk = dev_cfg->sys_clk_freq;
80004ec4:	00f12023          	sw	a5,0(sp)
	set_baud_rate(dev, cfg->baudrate, pclk);
80004ec8:	00012603          	lw	a2,0(sp)
80004ecc:	0004a583          	lw	a1,0(s1)
80004ed0:	00040513          	mv	a0,s0
80004ed4:	cf5ff0ef          	jal	ra,80004bc8 <set_baud_rate>
	switch (cfg->data_bits) {
80004ed8:	0064c783          	lbu	a5,6(s1)
80004edc:	00200713          	li	a4,2
80004ee0:	0ce78063          	beq	a5,a4,80004fa0 <uart_ns16550_configure+0x12c>
80004ee4:	04f76263          	bltu	a4,a5,80004f28 <uart_ns16550_configure+0xb4>
80004ee8:	04078e63          	beqz	a5,80004f44 <uart_ns16550_configure+0xd0>
80004eec:	00100713          	li	a4,1
80004ef0:	02e79863          	bne	a5,a4,80004f20 <uart_ns16550_configure+0xac>
		uart_cfg.data_bits = LCR_CS6;
80004ef4:	00100793          	li	a5,1
80004ef8:	00f10523          	sb	a5,10(sp)
		break;
80004efc:	04c0006f          	j	80004f48 <uart_ns16550_configure+0xd4>
		if (!device_is_ready(dev_cfg->clock_dev)) {
80004f00:	0089a503          	lw	a0,8(s3)
80004f04:	75c000ef          	jal	ra,80005660 <z_device_is_ready>
80004f08:	1a050663          	beqz	a0,800050b4 <uart_ns16550_configure+0x240>
		clock_control_get_rate(dev_cfg->clock_dev, dev_cfg->clock_subsys,
80004f0c:	00010613          	mv	a2,sp
80004f10:	00c9a583          	lw	a1,12(s3)
80004f14:	0089a503          	lw	a0,8(s3)
80004f18:	c55ff0ef          	jal	ra,80004b6c <clock_control_get_rate>
80004f1c:	fadff06f          	j	80004ec8 <uart_ns16550_configure+0x54>
	switch (cfg->data_bits) {
80004f20:	f7a00513          	li	a0,-134
80004f24:	03c0006f          	j	80004f60 <uart_ns16550_configure+0xec>
80004f28:	00300713          	li	a4,3
80004f2c:	00e79863          	bne	a5,a4,80004f3c <uart_ns16550_configure+0xc8>
		uart_cfg.data_bits = LCR_CS8;
80004f30:	00300793          	li	a5,3
80004f34:	00f10523          	sb	a5,10(sp)
		break;
80004f38:	0100006f          	j	80004f48 <uart_ns16550_configure+0xd4>
	switch (cfg->data_bits) {
80004f3c:	f7a00513          	li	a0,-134
80004f40:	0200006f          	j	80004f60 <uart_ns16550_configure+0xec>
		uart_cfg.data_bits = LCR_CS5;
80004f44:	00010523          	sb	zero,10(sp)
	switch (cfg->stop_bits) {
80004f48:	0054c783          	lbu	a5,5(s1)
80004f4c:	00100713          	li	a4,1
80004f50:	04e78e63          	beq	a5,a4,80004fac <uart_ns16550_configure+0x138>
80004f54:	00300713          	li	a4,3
80004f58:	06e78863          	beq	a5,a4,80004fc8 <uart_ns16550_configure+0x154>
80004f5c:	f7a00513          	li	a0,-134
			  : "r" (key & MSTATUS_IEN)
80004f60:	00897913          	andi	s2,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80004f64:	30092073          	csrs	mstatus,s2
};
80004f68:	8000d7b7          	lui	a5,0x8000d
80004f6c:	00c12703          	lw	a4,12(sp)
80004f70:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80004f74:	00f747b3          	xor	a5,a4,a5
80004f78:	00000713          	li	a4,0
80004f7c:	14079063          	bnez	a5,800050bc <uart_ns16550_configure+0x248>
80004f80:	02c12083          	lw	ra,44(sp)
80004f84:	02812403          	lw	s0,40(sp)
80004f88:	02412483          	lw	s1,36(sp)
80004f8c:	02012903          	lw	s2,32(sp)
80004f90:	01c12983          	lw	s3,28(sp)
80004f94:	01812a03          	lw	s4,24(sp)
80004f98:	03010113          	addi	sp,sp,48
80004f9c:	00008067          	ret
		uart_cfg.data_bits = LCR_CS7;
80004fa0:	00200793          	li	a5,2
80004fa4:	00f10523          	sb	a5,10(sp)
		break;
80004fa8:	fa1ff06f          	j	80004f48 <uart_ns16550_configure+0xd4>
		uart_cfg.stop_bits = LCR_1_STB;
80004fac:	000104a3          	sb	zero,9(sp)
	switch (cfg->parity) {
80004fb0:	0044c783          	lbu	a5,4(s1)
80004fb4:	02078063          	beqz	a5,80004fd4 <uart_ns16550_configure+0x160>
80004fb8:	00200713          	li	a4,2
80004fbc:	0ee78063          	beq	a5,a4,8000509c <uart_ns16550_configure+0x228>
80004fc0:	f7a00513          	li	a0,-134
80004fc4:	f9dff06f          	j	80004f60 <uart_ns16550_configure+0xec>
		uart_cfg.stop_bits = LCR_2_STB;
80004fc8:	00400793          	li	a5,4
80004fcc:	00f104a3          	sb	a5,9(sp)
		break;
80004fd0:	fe1ff06f          	j	80004fb0 <uart_ns16550_configure+0x13c>
		uart_cfg.parity = LCR_PDIS;
80004fd4:	00010423          	sb	zero,8(sp)
	dev_data->uart_config = *cfg;
80004fd8:	0004a783          	lw	a5,0(s1)
80004fdc:	00fa2023          	sw	a5,0(s4)
80004fe0:	0044a783          	lw	a5,4(s1)
80004fe4:	00fa2223          	sw	a5,4(s4)
	OUTBYTE(LCR(dev),
80004fe8:	00a14783          	lbu	a5,10(sp)
80004fec:	00914683          	lbu	a3,9(sp)
80004ff0:	00814703          	lbu	a4,8(sp)
80004ff4:	00d7e7b3          	or	a5,a5,a3
80004ff8:	00f76733          	or	a4,a4,a5
	return DEVICE_MMIO_GET(dev);
80004ffc:	00442783          	lw	a5,4(s0)
80005000:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
80005004:	0107c683          	lbu	a3,16(a5)
	OUTBYTE(LCR(dev),
80005008:	00169793          	slli	a5,a3,0x1
8000500c:	00d787b3          	add	a5,a5,a3
80005010:	00c787b3          	add	a5,a5,a2
	*(volatile uint8_t *)addr = data;
80005014:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
80005018:	00442783          	lw	a5,4(s0)
8000501c:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
80005020:	0107c783          	lbu	a5,16(a5)
	OUTBYTE(MDC(dev), mdc);
80005024:	00279793          	slli	a5,a5,0x2
80005028:	00e787b3          	add	a5,a5,a4
8000502c:	00b00713          	li	a4,11
80005030:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
80005034:	00442783          	lw	a5,4(s0)
80005038:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
8000503c:	0107c783          	lbu	a5,16(a5)
	OUTBYTE(FCR(dev),
80005040:	00179793          	slli	a5,a5,0x1
80005044:	00e787b3          	add	a5,a5,a4
80005048:	f8700713          	li	a4,-121
8000504c:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
80005050:	00442783          	lw	a5,4(s0)
80005054:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
80005058:	0107c783          	lbu	a5,16(a5)
	if ((INBYTE(IIR(dev)) & IIR_FE) == IIR_FE) {
8000505c:	00179793          	slli	a5,a5,0x1
80005060:	00e787b3          	add	a5,a5,a4
	return *(volatile uint8_t *)addr;
80005064:	0007c783          	lbu	a5,0(a5)
80005068:	0c07f793          	andi	a5,a5,192
8000506c:	0c000713          	li	a4,192
80005070:	02e78c63          	beq	a5,a4,800050a8 <uart_ns16550_configure+0x234>
		dev_data->fifo_size = 1;
80005074:	00100793          	li	a5,1
80005078:	00fa0423          	sb	a5,8(s4)
	const struct uart_ns16550_device_config *config = dev->config;
8000507c:	00442703          	lw	a4,4(s0)
	return config->reg_interval;
80005080:	01074783          	lbu	a5,16(a4)
	return DEVICE_MMIO_GET(dev);
80005084:	00072703          	lw	a4,0(a4)
80005088:	00074683          	lbu	a3,0(a4)
	OUTBYTE(IER(dev), 0x00);
8000508c:	00e787b3          	add	a5,a5,a4
	*(volatile uint8_t *)addr = data;
80005090:	00078023          	sb	zero,0(a5)
	int ret = 0;
80005094:	00000513          	li	a0,0
}
80005098:	ec9ff06f          	j	80004f60 <uart_ns16550_configure+0xec>
		uart_cfg.parity = LCR_EPS;
8000509c:	01000793          	li	a5,16
800050a0:	00f10423          	sb	a5,8(sp)
		break;
800050a4:	f35ff06f          	j	80004fd8 <uart_ns16550_configure+0x164>
		dev_data->fifo_size = 16;
800050a8:	01000793          	li	a5,16
800050ac:	00fa0423          	sb	a5,8(s4)
800050b0:	fcdff06f          	j	8000507c <uart_ns16550_configure+0x208>
			ret = -EINVAL;
800050b4:	fea00513          	li	a0,-22
800050b8:	ea9ff06f          	j	80004f60 <uart_ns16550_configure+0xec>
};
800050bc:	255020ef          	jal	ra,80007b10 <_StackCheckHandler>

800050c0 <uart_ns16550_init>:
800050c0:	00308013          	addi	zero,ra,3
{
800050c4:	fe010113          	addi	sp,sp,-32
800050c8:	00112e23          	sw	ra,28(sp)
800050cc:	00812c23          	sw	s0,24(sp)
800050d0:	8000d437          	lui	s0,0x8000d
800050d4:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800050d8:	00f12623          	sw	a5,12(sp)
800050dc:	00000793          	li	a5,0
	ret = uart_ns16550_configure(dev, &data->uart_config);
800050e0:	01052583          	lw	a1,16(a0)
800050e4:	d91ff0ef          	jal	ra,80004e74 <uart_ns16550_configure>
}
800050e8:	00c12703          	lw	a4,12(sp)
800050ec:	25042783          	lw	a5,592(s0)
800050f0:	00f747b3          	xor	a5,a4,a5
800050f4:	00000713          	li	a4,0
800050f8:	00079a63          	bnez	a5,8000510c <uart_ns16550_init+0x4c>
800050fc:	01c12083          	lw	ra,28(sp)
80005100:	01812403          	lw	s0,24(sp)
80005104:	02010113          	addi	sp,sp,32
80005108:	00008067          	ret
8000510c:	205020ef          	jal	ra,80007b10 <_StackCheckHandler>

80005110 <get_hart_mtimecmp>:
80005110:	00308013          	addi	zero,ra,3
{
80005114:	fe010113          	addi	sp,sp,-32
80005118:	00112e23          	sw	ra,28(sp)
8000511c:	8000d737          	lui	a4,0x8000d
80005120:	25072783          	lw	a5,592(a4) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005124:	00f12623          	sw	a5,12(sp)
80005128:	00000793          	li	a5,0
	return MTIMECMP_REG + (_current_cpu->id * 8);
8000512c:	8000b7b7          	lui	a5,0x8000b
80005130:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80005134:	0147c503          	lbu	a0,20(a5)
80005138:	00351513          	slli	a0,a0,0x3
8000513c:	020047b7          	lui	a5,0x2004
80005140:	00f50533          	add	a0,a0,a5
}
80005144:	00c12683          	lw	a3,12(sp)
80005148:	25072783          	lw	a5,592(a4)
8000514c:	00f6c7b3          	xor	a5,a3,a5
80005150:	00000693          	li	a3,0
80005154:	00079a63          	bnez	a5,80005168 <get_hart_mtimecmp+0x58>
80005158:	00000593          	li	a1,0
8000515c:	01c12083          	lw	ra,28(sp)
80005160:	02010113          	addi	sp,sp,32
80005164:	00008067          	ret
80005168:	1a9020ef          	jal	ra,80007b10 <_StackCheckHandler>

8000516c <set_mtimecmp>:
8000516c:	00308013          	addi	zero,ra,3
{
80005170:	fe010113          	addi	sp,sp,-32
80005174:	00112e23          	sw	ra,28(sp)
80005178:	00812c23          	sw	s0,24(sp)
8000517c:	00912a23          	sw	s1,20(sp)
80005180:	01212823          	sw	s2,16(sp)
80005184:	00050493          	mv	s1,a0
80005188:	00058413          	mv	s0,a1
8000518c:	8000d937          	lui	s2,0x8000d
80005190:	25092783          	lw	a5,592(s2) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005194:	00f12623          	sw	a5,12(sp)
80005198:	00000793          	li	a5,0
	volatile uint32_t *r = (uint32_t *)(uint32_t)get_hart_mtimecmp();
8000519c:	f75ff0ef          	jal	ra,80005110 <get_hart_mtimecmp>
	r[1] = 0xffffffff;
800051a0:	fff00793          	li	a5,-1
800051a4:	00f52223          	sw	a5,4(a0)
	r[0] = (uint32_t)time;
800051a8:	00952023          	sw	s1,0(a0)
	r[1] = (uint32_t)(time >> 32);
800051ac:	00852223          	sw	s0,4(a0)
}
800051b0:	00c12703          	lw	a4,12(sp)
800051b4:	25092783          	lw	a5,592(s2)
800051b8:	00f747b3          	xor	a5,a4,a5
800051bc:	00000713          	li	a4,0
800051c0:	00079e63          	bnez	a5,800051dc <set_mtimecmp+0x70>
800051c4:	01c12083          	lw	ra,28(sp)
800051c8:	01812403          	lw	s0,24(sp)
800051cc:	01412483          	lw	s1,20(sp)
800051d0:	01012903          	lw	s2,16(sp)
800051d4:	02010113          	addi	sp,sp,32
800051d8:	00008067          	ret
800051dc:	135020ef          	jal	ra,80007b10 <_StackCheckHandler>

800051e0 <mtime>:
800051e0:	00308013          	addi	zero,ra,3
{
800051e4:	fe010113          	addi	sp,sp,-32
800051e8:	00112e23          	sw	ra,28(sp)
800051ec:	8000d7b7          	lui	a5,0x8000d
800051f0:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800051f4:	00e12623          	sw	a4,12(sp)
800051f8:	00000713          	li	a4,0
		hi = r[1];
800051fc:	0200c7b7          	lui	a5,0x200c
80005200:	ffc7a583          	lw	a1,-4(a5) # 200bffc <CONFIG_SRAM_SIZE+0x1f0bffc>
		lo = r[0];
80005204:	ff87a503          	lw	a0,-8(a5)
	} while (r[1] != hi);
80005208:	ffc7a783          	lw	a5,-4(a5)
8000520c:	feb798e3          	bne	a5,a1,800051fc <mtime+0x1c>
}
80005210:	8000d7b7          	lui	a5,0x8000d
80005214:	00c12703          	lw	a4,12(sp)
80005218:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000521c:	00f747b3          	xor	a5,a4,a5
80005220:	00000713          	li	a4,0
80005224:	00079863          	bnez	a5,80005234 <mtime+0x54>
80005228:	01c12083          	lw	ra,28(sp)
8000522c:	02010113          	addi	sp,sp,32
80005230:	00008067          	ret
80005234:	0dd020ef          	jal	ra,80007b10 <_StackCheckHandler>

80005238 <sys_clock_driver_init>:
80005238:	00308013          	addi	zero,ra,3
{
8000523c:	fe010113          	addi	sp,sp,-32
80005240:	00112e23          	sw	ra,28(sp)
80005244:	00812c23          	sw	s0,24(sp)
80005248:	8000d437          	lui	s0,0x8000d
8000524c:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005250:	00f12623          	sw	a5,12(sp)
80005254:	00000793          	li	a5,0
	IRQ_CONNECT(TIMER_IRQN, 0, timer_isr, NULL, 0);
80005258:	00000613          	li	a2,0
8000525c:	00000593          	li	a1,0
80005260:	00700513          	li	a0,7
80005264:	d95fe0ef          	jal	ra,80003ff8 <z_riscv_irq_priority_set>
	last_count = mtime();
80005268:	f79ff0ef          	jal	ra,800051e0 <mtime>
8000526c:	00050793          	mv	a5,a0
80005270:	8000b737          	lui	a4,0x8000b
80005274:	92a72023          	sw	a0,-1760(a4) # 8000a920 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a921>
80005278:	92b72223          	sw	a1,-1756(a4)
	set_mtimecmp(last_count + CYC_PER_TICK);
8000527c:	10050513          	addi	a0,a0,256
80005280:	00f537b3          	sltu	a5,a0,a5
80005284:	00b785b3          	add	a1,a5,a1
80005288:	ee5ff0ef          	jal	ra,8000516c <set_mtimecmp>
	irq_enable(TIMER_IRQN);
8000528c:	00700513          	li	a0,7
80005290:	d01fe0ef          	jal	ra,80003f90 <arch_irq_enable>
}
80005294:	00c12703          	lw	a4,12(sp)
80005298:	25042783          	lw	a5,592(s0)
8000529c:	00f747b3          	xor	a5,a4,a5
800052a0:	00000713          	li	a4,0
800052a4:	00079c63          	bnez	a5,800052bc <sys_clock_driver_init+0x84>
800052a8:	00000513          	li	a0,0
800052ac:	01c12083          	lw	ra,28(sp)
800052b0:	01812403          	lw	s0,24(sp)
800052b4:	02010113          	addi	sp,sp,32
800052b8:	00008067          	ret
800052bc:	055020ef          	jal	ra,80007b10 <_StackCheckHandler>

800052c0 <timer_isr>:
800052c0:	00308013          	addi	zero,ra,3
{
800052c4:	fe010113          	addi	sp,sp,-32
800052c8:	00112e23          	sw	ra,28(sp)
800052cc:	00812c23          	sw	s0,24(sp)
800052d0:	00912a23          	sw	s1,20(sp)
800052d4:	8000d4b7          	lui	s1,0x8000d
800052d8:	2504a783          	lw	a5,592(s1) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800052dc:	00f12623          	sw	a5,12(sp)
800052e0:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800052e4:	30047473          	csrrci	s0,mstatus,8
	uint64_t now = mtime();
800052e8:	ef9ff0ef          	jal	ra,800051e0 <mtime>
800052ec:	00050693          	mv	a3,a0
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
800052f0:	8000b637          	lui	a2,0x8000b
800052f4:	92062783          	lw	a5,-1760(a2) # 8000a920 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a921>
800052f8:	92462703          	lw	a4,-1756(a2)
800052fc:	40f507b3          	sub	a5,a0,a5
80005300:	00f53533          	sltu	a0,a0,a5
80005304:	40e58733          	sub	a4,a1,a4
80005308:	40a70733          	sub	a4,a4,a0
8000530c:	01871713          	slli	a4,a4,0x18
80005310:	0087d513          	srli	a0,a5,0x8
80005314:	00a76533          	or	a0,a4,a0
	last_count = now;
80005318:	92d62023          	sw	a3,-1760(a2)
8000531c:	92b62223          	sw	a1,-1756(a2)
	__asm__ volatile ("csrs mstatus, %0"
80005320:	00847413          	andi	s0,s0,8
80005324:	30042073          	csrs	mstatus,s0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
80005328:	5d1020ef          	jal	ra,800080f8 <sys_clock_announce>
}
8000532c:	00c12703          	lw	a4,12(sp)
80005330:	2504a783          	lw	a5,592(s1)
80005334:	00f747b3          	xor	a5,a4,a5
80005338:	00000713          	li	a4,0
8000533c:	00079c63          	bnez	a5,80005354 <timer_isr+0x94>
80005340:	01c12083          	lw	ra,28(sp)
80005344:	01812403          	lw	s0,24(sp)
80005348:	01412483          	lw	s1,20(sp)
8000534c:	02010113          	addi	sp,sp,32
80005350:	00008067          	ret
80005354:	7bc020ef          	jal	ra,80007b10 <_StackCheckHandler>

80005358 <sys_clock_set_timeout>:
80005358:	00308013          	addi	zero,ra,3
{
8000535c:	fe010113          	addi	sp,sp,-32
80005360:	00112e23          	sw	ra,28(sp)
80005364:	00812c23          	sw	s0,24(sp)
80005368:	00912a23          	sw	s1,20(sp)
8000536c:	8000d7b7          	lui	a5,0x8000d
80005370:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005374:	00e12623          	sw	a4,12(sp)
80005378:	00000713          	li	a4,0
	if (idle) {
8000537c:	0a059a63          	bnez	a1,80005430 <sys_clock_set_timeout+0xd8>
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
80005380:	fff00793          	li	a5,-1
80005384:	04f50a63          	beq	a0,a5,800053d8 <sys_clock_set_timeout+0x80>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
80005388:	00100793          	li	a5,1
8000538c:	04a7dc63          	bge	a5,a0,800053e4 <sys_clock_set_timeout+0x8c>
80005390:	008007b7          	lui	a5,0x800
80005394:	ffe78793          	addi	a5,a5,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
80005398:	04a7ca63          	blt	a5,a0,800053ec <sys_clock_set_timeout+0x94>
8000539c:	fff50413          	addi	s0,a0,-1
	__asm__ volatile ("csrrc %0, mstatus, %1"
800053a0:	300474f3          	csrrci	s1,mstatus,8
	uint64_t now = mtime();
800053a4:	e3dff0ef          	jal	ra,800051e0 <mtime>
	uint32_t adj, cyc = ticks * CYC_PER_TICK;
800053a8:	00841793          	slli	a5,s0,0x8
	adj = (uint32_t)(now - last_count) + (CYC_PER_TICK - 1);
800053ac:	8000b6b7          	lui	a3,0x8000b
800053b0:	9206a703          	lw	a4,-1760(a3) # 8000a920 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a921>
800053b4:	9246a583          	lw	a1,-1756(a3)
800053b8:	40e50633          	sub	a2,a0,a4
800053bc:	0ff60613          	addi	a2,a2,255
	if (cyc <= MAX_CYC - adj) {
800053c0:	800006b7          	lui	a3,0x80000
800053c4:	fff6c693          	not	a3,a3
800053c8:	40c686b3          	sub	a3,a3,a2
800053cc:	02f6e663          	bltu	a3,a5,800053f8 <sys_clock_set_timeout+0xa0>
		cyc += adj;
800053d0:	00c787b3          	add	a5,a5,a2
800053d4:	02c0006f          	j	80005400 <sys_clock_set_timeout+0xa8>
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
800053d8:	00800537          	lui	a0,0x800
800053dc:	ffe50513          	addi	a0,a0,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
800053e0:	fb1ff06f          	j	80005390 <sys_clock_set_timeout+0x38>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
800053e4:	00000413          	li	s0,0
800053e8:	fb9ff06f          	j	800053a0 <sys_clock_set_timeout+0x48>
800053ec:	00800537          	lui	a0,0x800
800053f0:	ffe50413          	addi	s0,a0,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
800053f4:	fadff06f          	j	800053a0 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYC;
800053f8:	800007b7          	lui	a5,0x80000
800053fc:	fff7c793          	not	a5,a5
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
80005400:	f007f793          	andi	a5,a5,-256
	if ((int32_t)(cyc + last_count - now) < MIN_DELAY) {
80005404:	00f706b3          	add	a3,a4,a5
80005408:	40a686b3          	sub	a3,a3,a0
8000540c:	06300613          	li	a2,99
80005410:	00d64463          	blt	a2,a3,80005418 <sys_clock_set_timeout+0xc0>
		cyc += CYC_PER_TICK;
80005414:	10078793          	addi	a5,a5,256 # 80000100 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000101>
	set_mtimecmp(cyc + last_count);
80005418:	00e78533          	add	a0,a5,a4
8000541c:	00f537b3          	sltu	a5,a0,a5
80005420:	00b785b3          	add	a1,a5,a1
80005424:	d49ff0ef          	jal	ra,8000516c <set_mtimecmp>
	__asm__ volatile ("csrs mstatus, %0"
80005428:	0084f493          	andi	s1,s1,8
8000542c:	3004a073          	csrs	mstatus,s1
}
80005430:	8000d7b7          	lui	a5,0x8000d
80005434:	00c12703          	lw	a4,12(sp)
80005438:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000543c:	00f747b3          	xor	a5,a4,a5
80005440:	00000713          	li	a4,0
80005444:	00079c63          	bnez	a5,8000545c <sys_clock_set_timeout+0x104>
80005448:	01c12083          	lw	ra,28(sp)
8000544c:	01812403          	lw	s0,24(sp)
80005450:	01412483          	lw	s1,20(sp)
80005454:	02010113          	addi	sp,sp,32
80005458:	00008067          	ret
8000545c:	6b4020ef          	jal	ra,80007b10 <_StackCheckHandler>

80005460 <sys_clock_elapsed>:
80005460:	00308013          	addi	zero,ra,3
{
80005464:	fe010113          	addi	sp,sp,-32
80005468:	00112e23          	sw	ra,28(sp)
8000546c:	00812c23          	sw	s0,24(sp)
80005470:	00912a23          	sw	s1,20(sp)
80005474:	8000d4b7          	lui	s1,0x8000d
80005478:	2504a783          	lw	a5,592(s1) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000547c:	00f12623          	sw	a5,12(sp)
80005480:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005484:	30047473          	csrrci	s0,mstatus,8
	uint32_t ret = ((uint32_t)mtime() - (uint32_t)last_count) / CYC_PER_TICK;
80005488:	d59ff0ef          	jal	ra,800051e0 <mtime>
8000548c:	8000b7b7          	lui	a5,0x8000b
80005490:	9207a783          	lw	a5,-1760(a5) # 8000a920 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a921>
80005494:	40f50533          	sub	a0,a0,a5
	__asm__ volatile ("csrs mstatus, %0"
80005498:	00847413          	andi	s0,s0,8
8000549c:	30042073          	csrs	mstatus,s0
}
800054a0:	00c12703          	lw	a4,12(sp)
800054a4:	2504a783          	lw	a5,592(s1)
800054a8:	00f747b3          	xor	a5,a4,a5
800054ac:	00000713          	li	a4,0
800054b0:	00079e63          	bnez	a5,800054cc <sys_clock_elapsed+0x6c>
800054b4:	00855513          	srli	a0,a0,0x8
800054b8:	01c12083          	lw	ra,28(sp)
800054bc:	01812403          	lw	s0,24(sp)
800054c0:	01412483          	lw	s1,20(sp)
800054c4:	02010113          	addi	sp,sp,32
800054c8:	00008067          	ret
800054cc:	644020ef          	jal	ra,80007b10 <_StackCheckHandler>

800054d0 <sys_clock_cycle_get_32>:
800054d0:	00308013          	addi	zero,ra,3
{
800054d4:	fe010113          	addi	sp,sp,-32
800054d8:	00112e23          	sw	ra,28(sp)
800054dc:	00812c23          	sw	s0,24(sp)
800054e0:	8000d437          	lui	s0,0x8000d
800054e4:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800054e8:	00f12623          	sw	a5,12(sp)
800054ec:	00000793          	li	a5,0
	return (uint32_t)(mtime() << CONFIG_RISCV_MACHINE_TIMER_SYSTEM_CLOCK_DIVIDER);
800054f0:	cf1ff0ef          	jal	ra,800051e0 <mtime>
}
800054f4:	00c12703          	lw	a4,12(sp)
800054f8:	25042783          	lw	a5,592(s0)
800054fc:	00f747b3          	xor	a5,a4,a5
80005500:	00000713          	li	a4,0
80005504:	00079a63          	bnez	a5,80005518 <sys_clock_cycle_get_32+0x48>
80005508:	01c12083          	lw	ra,28(sp)
8000550c:	01812403          	lw	s0,24(sp)
80005510:	02010113          	addi	sp,sp,32
80005514:	00008067          	ret
80005518:	5f8020ef          	jal	ra,80007b10 <_StackCheckHandler>

8000551c <z_device_state_init>:
8000551c:	00308013          	addi	zero,ra,3
{
80005520:	fe010113          	addi	sp,sp,-32
80005524:	00112e23          	sw	ra,28(sp)
80005528:	8000d7b7          	lui	a5,0x8000d
8000552c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005530:	00e12623          	sw	a4,12(sp)
80005534:	00000713          	li	a4,0
	const struct device *dev = __device_start;
80005538:	80009737          	lui	a4,0x80009
8000553c:	5dc70713          	addi	a4,a4,1500 # 800095dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800095dd>
	while (dev < __device_end) {
80005540:	0080006f          	j	80005548 <z_device_state_init+0x2c>
		++dev;
80005544:	01870713          	addi	a4,a4,24
	while (dev < __device_end) {
80005548:	800097b7          	lui	a5,0x80009
8000554c:	5f478793          	addi	a5,a5,1524 # 800095f4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800095f5>
80005550:	fef76ae3          	bltu	a4,a5,80005544 <z_device_state_init+0x28>
}
80005554:	8000d7b7          	lui	a5,0x8000d
80005558:	00c12703          	lw	a4,12(sp)
8000555c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005560:	00f747b3          	xor	a5,a4,a5
80005564:	00000713          	li	a4,0
80005568:	00079863          	bnez	a5,80005578 <z_device_state_init+0x5c>
8000556c:	01c12083          	lw	ra,28(sp)
80005570:	02010113          	addi	sp,sp,32
80005574:	00008067          	ret
80005578:	598020ef          	jal	ra,80007b10 <_StackCheckHandler>

8000557c <z_sys_init_run_level>:
8000557c:	00308013          	addi	zero,ra,3
{
80005580:	fe010113          	addi	sp,sp,-32
80005584:	00112e23          	sw	ra,28(sp)
80005588:	00812c23          	sw	s0,24(sp)
8000558c:	00912a23          	sw	s1,20(sp)
80005590:	01212823          	sw	s2,16(sp)
80005594:	00050913          	mv	s2,a0
80005598:	8000d7b7          	lui	a5,0x8000d
8000559c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800055a0:	00e12623          	sw	a4,12(sp)
800055a4:	00000713          	li	a4,0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
800055a8:	8000a7b7          	lui	a5,0x8000a
800055ac:	00251713          	slli	a4,a0,0x2
800055b0:	72078793          	addi	a5,a5,1824 # 8000a720 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a721>
800055b4:	00e787b3          	add	a5,a5,a4
800055b8:	0007a403          	lw	s0,0(a5)
800055bc:	0280006f          	j	800055e4 <z_sys_init_run_level+0x68>
					rc = -rc;
800055c0:	40a00533          	neg	a0,a0
800055c4:	0580006f          	j	8000561c <z_sys_init_run_level+0xa0>
				dev->state->init_res = rc;
800055c8:	00c4a783          	lw	a5,12(s1)
800055cc:	00a78023          	sb	a0,0(a5)
			dev->state->initialized = true;
800055d0:	00c4a703          	lw	a4,12(s1)
800055d4:	00075783          	lhu	a5,0(a4)
800055d8:	1007e793          	ori	a5,a5,256
800055dc:	00f71023          	sh	a5,0(a4)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
800055e0:	00840413          	addi	s0,s0,8
800055e4:	00190713          	addi	a4,s2,1
800055e8:	8000a7b7          	lui	a5,0x8000a
800055ec:	00271713          	slli	a4,a4,0x2
800055f0:	72078793          	addi	a5,a5,1824 # 8000a720 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a721>
800055f4:	00e787b3          	add	a5,a5,a4
800055f8:	0007a783          	lw	a5,0(a5)
800055fc:	02f47863          	bgeu	s0,a5,8000562c <z_sys_init_run_level+0xb0>
		const struct device *dev = entry->dev;
80005600:	00442483          	lw	s1,4(s0)
		int rc = entry->init(dev);
80005604:	00042783          	lw	a5,0(s0)
80005608:	00048513          	mv	a0,s1
8000560c:	000780e7          	jalr	a5
		if (dev != NULL) {
80005610:	fc0488e3          	beqz	s1,800055e0 <z_sys_init_run_level+0x64>
			if (rc != 0) {
80005614:	fa050ee3          	beqz	a0,800055d0 <z_sys_init_run_level+0x54>
				if (rc < 0) {
80005618:	fa0544e3          	bltz	a0,800055c0 <z_sys_init_run_level+0x44>
				if (rc > UINT8_MAX) {
8000561c:	0ff00793          	li	a5,255
80005620:	faa7d4e3          	bge	a5,a0,800055c8 <z_sys_init_run_level+0x4c>
					rc = UINT8_MAX;
80005624:	0ff00513          	li	a0,255
80005628:	fa1ff06f          	j	800055c8 <z_sys_init_run_level+0x4c>
}
8000562c:	8000d7b7          	lui	a5,0x8000d
80005630:	00c12703          	lw	a4,12(sp)
80005634:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005638:	00f747b3          	xor	a5,a4,a5
8000563c:	00000713          	li	a4,0
80005640:	00079e63          	bnez	a5,8000565c <z_sys_init_run_level+0xe0>
80005644:	01c12083          	lw	ra,28(sp)
80005648:	01812403          	lw	s0,24(sp)
8000564c:	01412483          	lw	s1,20(sp)
80005650:	01012903          	lw	s2,16(sp)
80005654:	02010113          	addi	sp,sp,32
80005658:	00008067          	ret
8000565c:	4b4020ef          	jal	ra,80007b10 <_StackCheckHandler>

80005660 <z_device_is_ready>:
80005660:	00308013          	addi	zero,ra,3
{
80005664:	fe010113          	addi	sp,sp,-32
80005668:	00112e23          	sw	ra,28(sp)
8000566c:	8000d7b7          	lui	a5,0x8000d
80005670:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005674:	00e12623          	sw	a4,12(sp)
80005678:	00000713          	li	a4,0
	if (dev == NULL) {
8000567c:	02050e63          	beqz	a0,800056b8 <z_device_is_ready+0x58>
	return dev->state->initialized && (dev->state->init_res == 0U);
80005680:	00c52783          	lw	a5,12(a0)
80005684:	0007a503          	lw	a0,0(a5)
80005688:	1ff57513          	andi	a0,a0,511
8000568c:	f0050513          	addi	a0,a0,-256
80005690:	00153513          	seqz	a0,a0
}
80005694:	8000d7b7          	lui	a5,0x8000d
80005698:	00c12703          	lw	a4,12(sp)
8000569c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800056a0:	00f747b3          	xor	a5,a4,a5
800056a4:	00000713          	li	a4,0
800056a8:	00079c63          	bnez	a5,800056c0 <z_device_is_ready+0x60>
800056ac:	01c12083          	lw	ra,28(sp)
800056b0:	02010113          	addi	sp,sp,32
800056b4:	00008067          	ret
		return false;
800056b8:	00000513          	li	a0,0
800056bc:	fd9ff06f          	j	80005694 <z_device_is_ready+0x34>
}
800056c0:	450020ef          	jal	ra,80007b10 <_StackCheckHandler>

800056c4 <arch_system_halt>:
800056c4:	00308013          	addi	zero,ra,3
{
800056c8:	ff010113          	addi	sp,sp,-16
800056cc:	8000d7b7          	lui	a5,0x8000d
800056d0:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800056d4:	00e12623          	sw	a4,12(sp)
800056d8:	00000713          	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800056dc:	300477f3          	csrrci	a5,mstatus,8
	for (;;) {
800056e0:	0000006f          	j	800056e0 <arch_system_halt+0x1c>

800056e4 <k_sys_fatal_error_handler>:
800056e4:	00308013          	addi	zero,ra,3
{
800056e8:	fe010113          	addi	sp,sp,-32
800056ec:	00112e23          	sw	ra,28(sp)
800056f0:	8000d7b7          	lui	a5,0x8000d
800056f4:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800056f8:	00e12623          	sw	a4,12(sp)
800056fc:	00000713          	li	a4,0
	arch_system_halt(reason);
80005700:	fc5ff0ef          	jal	ra,800056c4 <arch_system_halt>

80005704 <z_fatal_error>:
80005704:	00308013          	addi	zero,ra,3
{
80005708:	fd010113          	addi	sp,sp,-48
8000570c:	02112623          	sw	ra,44(sp)
80005710:	02812423          	sw	s0,40(sp)
80005714:	02912223          	sw	s1,36(sp)
80005718:	03212023          	sw	s2,32(sp)
8000571c:	01312e23          	sw	s3,28(sp)
80005720:	01412c23          	sw	s4,24(sp)
80005724:	00050913          	mv	s2,a0
80005728:	00058993          	mv	s3,a1
8000572c:	8000da37          	lui	s4,0x8000d
80005730:	250a2783          	lw	a5,592(s4) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005734:	00f12623          	sw	a5,12(sp)
80005738:	00000793          	li	a5,0
8000573c:	300474f3          	csrrci	s1,mstatus,8
	return z_impl_z_current_get();
80005740:	264020ef          	jal	ra,800079a4 <z_impl_z_current_get>
80005744:	00050413          	mv	s0,a0
	k_sys_fatal_error_handler(reason, esf);
80005748:	00098593          	mv	a1,s3
8000574c:	00090513          	mv	a0,s2
80005750:	f95ff0ef          	jal	ra,800056e4 <k_sys_fatal_error_handler>
			  : "r" (key & MSTATUS_IEN)
80005754:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80005758:	3004a073          	csrs	mstatus,s1
	z_impl_k_thread_abort(thread);
8000575c:	00040513          	mv	a0,s0
80005760:	364020ef          	jal	ra,80007ac4 <z_impl_k_thread_abort>
}
80005764:	00c12703          	lw	a4,12(sp)
80005768:	250a2783          	lw	a5,592(s4)
8000576c:	00f747b3          	xor	a5,a4,a5
80005770:	00000713          	li	a4,0
80005774:	02079263          	bnez	a5,80005798 <z_fatal_error+0x94>
80005778:	02c12083          	lw	ra,44(sp)
8000577c:	02812403          	lw	s0,40(sp)
80005780:	02412483          	lw	s1,36(sp)
80005784:	02012903          	lw	s2,32(sp)
80005788:	01c12983          	lw	s3,28(sp)
8000578c:	01812a03          	lw	s4,24(sp)
80005790:	03010113          	addi	sp,sp,48
80005794:	00008067          	ret
80005798:	378020ef          	jal	ra,80007b10 <_StackCheckHandler>

8000579c <init_idle_thread>:
8000579c:	00308013          	addi	zero,ra,3
{
800057a0:	fc010113          	addi	sp,sp,-64
800057a4:	02112e23          	sw	ra,60(sp)
800057a8:	02812c23          	sw	s0,56(sp)
800057ac:	02912a23          	sw	s1,52(sp)
800057b0:	03212823          	sw	s2,48(sp)
800057b4:	03312623          	sw	s3,44(sp)
800057b8:	03412423          	sw	s4,40(sp)
800057bc:	00050413          	mv	s0,a0
800057c0:	8000da37          	lui	s4,0x8000d
800057c4:	250a2783          	lw	a5,592(s4) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800057c8:	00f12e23          	sw	a5,28(sp)
800057cc:	00000793          	li	a5,0
	struct k_thread *thread = &z_idle_threads[i];
800057d0:	00451913          	slli	s2,a0,0x4
800057d4:	00a909b3          	add	s3,s2,a0
800057d8:	00399993          	slli	s3,s3,0x3
800057dc:	8000b4b7          	lui	s1,0x8000b
800057e0:	aa848493          	addi	s1,s1,-1368 # 8000aaa8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000aaa9>
800057e4:	009989b3          	add	s3,s3,s1
	k_thread_stack_t *stack = z_idle_stacks[i];
800057e8:	00a51513          	slli	a0,a0,0xa
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
800057ec:	00141693          	slli	a3,s0,0x1
800057f0:	008686b3          	add	a3,a3,s0
800057f4:	00369693          	slli	a3,a3,0x3
	z_setup_new_thread(thread, stack,
800057f8:	00012223          	sw	zero,4(sp)
800057fc:	00100793          	li	a5,1
80005800:	00f12023          	sw	a5,0(sp)
80005804:	00f00893          	li	a7,15
80005808:	00000813          	li	a6,0
8000580c:	00000793          	li	a5,0
80005810:	8000b737          	lui	a4,0x8000b
80005814:	e2070713          	addi	a4,a4,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80005818:	00d70733          	add	a4,a4,a3
8000581c:	800066b7          	lui	a3,0x80006
80005820:	08c68693          	addi	a3,a3,140 # 8000608c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000608d>
80005824:	40000613          	li	a2,1024
80005828:	8000c5b7          	lui	a1,0x8000c
8000582c:	e5058593          	addi	a1,a1,-432 # 8000be50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000be51>
80005830:	00a585b3          	add	a1,a1,a0
80005834:	00098513          	mv	a0,s3
80005838:	624000ef          	jal	ra,80005e5c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
8000583c:	00d9c783          	lbu	a5,13(s3)
80005840:	ffb7f793          	andi	a5,a5,-5
80005844:	00f986a3          	sb	a5,13(s3)
}
80005848:	01c12703          	lw	a4,28(sp)
8000584c:	250a2783          	lw	a5,592(s4)
80005850:	00f747b3          	xor	a5,a4,a5
80005854:	00000713          	li	a4,0
80005858:	02079263          	bnez	a5,8000587c <init_idle_thread+0xe0>
8000585c:	03c12083          	lw	ra,60(sp)
80005860:	03812403          	lw	s0,56(sp)
80005864:	03412483          	lw	s1,52(sp)
80005868:	03012903          	lw	s2,48(sp)
8000586c:	02c12983          	lw	s3,44(sp)
80005870:	02812a03          	lw	s4,40(sp)
80005874:	04010113          	addi	sp,sp,64
80005878:	00008067          	ret
8000587c:	294020ef          	jal	ra,80007b10 <_StackCheckHandler>

80005880 <bg_thread_main>:
80005880:	00308013          	addi	zero,ra,3
{
80005884:	fe010113          	addi	sp,sp,-32
80005888:	00112e23          	sw	ra,28(sp)
8000588c:	00812c23          	sw	s0,24(sp)
80005890:	8000d437          	lui	s0,0x8000d
80005894:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005898:	00f12623          	sw	a5,12(sp)
8000589c:	00000793          	li	a5,0
	z_sys_post_kernel = true;
800058a0:	8000b7b7          	lui	a5,0x8000b
800058a4:	00100713          	li	a4,1
800058a8:	96e78a23          	sb	a4,-1676(a5) # 8000a974 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a975>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
800058ac:	00200513          	li	a0,2
800058b0:	ccdff0ef          	jal	ra,8000557c <z_sys_init_run_level>
	boot_banner();
800058b4:	1c5020ef          	jal	ra,80008278 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
800058b8:	00300513          	li	a0,3
800058bc:	cc1ff0ef          	jal	ra,8000557c <z_sys_init_run_level>
	z_init_static_threads();
800058c0:	6a4000ef          	jal	ra,80005f64 <z_init_static_threads>
	main();
800058c4:	fe9fc0ef          	jal	ra,800028ac <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
800058c8:	8000b7b7          	lui	a5,0x8000b
800058cc:	b3078793          	addi	a5,a5,-1232 # 8000ab30 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ab31>
800058d0:	00c7c703          	lbu	a4,12(a5)
800058d4:	ffe77713          	andi	a4,a4,-2
800058d8:	00e78623          	sb	a4,12(a5)
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
800058dc:	00c12703          	lw	a4,12(sp)
800058e0:	25042783          	lw	a5,592(s0)
800058e4:	00f747b3          	xor	a5,a4,a5
800058e8:	00000713          	li	a4,0
800058ec:	00079a63          	bnez	a5,80005900 <bg_thread_main+0x80>
800058f0:	01c12083          	lw	ra,28(sp)
800058f4:	01812403          	lw	s0,24(sp)
800058f8:	02010113          	addi	sp,sp,32
800058fc:	00008067          	ret
80005900:	210020ef          	jal	ra,80007b10 <_StackCheckHandler>

80005904 <z_swap_unlocked>:
80005904:	00308013          	addi	zero,ra,3
{
	return do_swap(key.key, lock, true);
}

static inline void z_swap_unlocked(void)
{
80005908:	fe010113          	addi	sp,sp,-32
8000590c:	00112e23          	sw	ra,28(sp)
80005910:	00812c23          	sw	s0,24(sp)
80005914:	00912a23          	sw	s1,20(sp)
80005918:	01212823          	sw	s2,16(sp)
8000591c:	8000d7b7          	lui	a5,0x8000d
80005920:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005924:	00e12623          	sw	a4,12(sp)
80005928:	00000713          	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000592c:	300474f3          	csrrci	s1,mstatus,8
	old_thread = _current;
80005930:	8000b7b7          	lui	a5,0x8000b
80005934:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80005938:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
8000593c:	ff500793          	li	a5,-11
80005940:	06f92c23          	sw	a5,120(s2)
80005944:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80005948:	68d000ef          	jal	ra,800067d4 <z_swap_next_thread>
	if (new_thread != old_thread) {
8000594c:	02a90263          	beq	s2,a0,80005970 <z_swap_unlocked+0x6c>
80005950:	00050413          	mv	s0,a0
		_current_cpu->current = new_thread;
80005954:	8000b7b7          	lui	a5,0x8000b
80005958:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
8000595c:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
80005960:	495000ef          	jal	ra,800065f4 <z_reset_time_slice>
	struct k_thread *old = CONTAINER_OF(switched_from, struct k_thread,
					    switch_handle);
#ifdef CONFIG_RISCV_ALWAYS_SWITCH_THROUGH_ECALL
	arch_syscall_invoke2((uintptr_t)new, (uintptr_t)old, RV_ECALL_SCHEDULE);
#else
	z_riscv_switch(new, old);
80005964:	00090593          	mv	a1,s2
80005968:	07c42503          	lw	a0,124(s0)
8000596c:	8e9fe0ef          	jal	ra,80004254 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
80005970:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80005974:	3004a073          	csrs	mstatus,s1
	(void) do_swap(arch_irq_lock(), NULL, true);
}
80005978:	8000d7b7          	lui	a5,0x8000d
8000597c:	00c12703          	lw	a4,12(sp)
80005980:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005984:	00f747b3          	xor	a5,a4,a5
80005988:	00000713          	li	a4,0
8000598c:	00079e63          	bnez	a5,800059a8 <z_swap_unlocked+0xa4>
80005990:	01c12083          	lw	ra,28(sp)
80005994:	01812403          	lw	s0,24(sp)
80005998:	01412483          	lw	s1,20(sp)
8000599c:	01012903          	lw	s2,16(sp)
800059a0:	02010113          	addi	sp,sp,32
800059a4:	00008067          	ret
800059a8:	168020ef          	jal	ra,80007b10 <_StackCheckHandler>

800059ac <switch_to_main_thread>:
800059ac:	00308013          	addi	zero,ra,3
{
800059b0:	fe010113          	addi	sp,sp,-32
800059b4:	00112e23          	sw	ra,28(sp)
800059b8:	8000d7b7          	lui	a5,0x8000d
800059bc:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800059c0:	00e12623          	sw	a4,12(sp)
800059c4:	00000713          	li	a4,0
	z_swap_unlocked();
800059c8:	f3dff0ef          	jal	ra,80005904 <z_swap_unlocked>

800059cc <z_early_memset>:
800059cc:	00308013          	addi	zero,ra,3
{
800059d0:	fe010113          	addi	sp,sp,-32
800059d4:	00112e23          	sw	ra,28(sp)
800059d8:	00812c23          	sw	s0,24(sp)
800059dc:	8000d437          	lui	s0,0x8000d
800059e0:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800059e4:	00f12623          	sw	a5,12(sp)
800059e8:	00000793          	li	a5,0
__ssp_bos_icheck3(memset, void *, int)
800059ec:	830fb0ef          	jal	ra,80000a1c <memset>
}
800059f0:	00c12703          	lw	a4,12(sp)
800059f4:	25042783          	lw	a5,592(s0)
800059f8:	00f747b3          	xor	a5,a4,a5
800059fc:	00000713          	li	a4,0
80005a00:	00079a63          	bnez	a5,80005a14 <z_early_memset+0x48>
80005a04:	01c12083          	lw	ra,28(sp)
80005a08:	01812403          	lw	s0,24(sp)
80005a0c:	02010113          	addi	sp,sp,32
80005a10:	00008067          	ret
80005a14:	0fc020ef          	jal	ra,80007b10 <_StackCheckHandler>

80005a18 <z_bss_zero>:
80005a18:	00308013          	addi	zero,ra,3
{
80005a1c:	fe010113          	addi	sp,sp,-32
80005a20:	00112e23          	sw	ra,28(sp)
80005a24:	00812c23          	sw	s0,24(sp)
80005a28:	8000d437          	lui	s0,0x8000d
80005a2c:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005a30:	00f12623          	sw	a5,12(sp)
80005a34:	00000793          	li	a5,0
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
80005a38:	8000b537          	lui	a0,0x8000b
80005a3c:	92050613          	addi	a2,a0,-1760 # 8000a920 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a921>
80005a40:	8000b7b7          	lui	a5,0x8000b
80005a44:	e4478793          	addi	a5,a5,-444 # 8000ae44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae45>
80005a48:	40c78633          	sub	a2,a5,a2
80005a4c:	00000593          	li	a1,0
80005a50:	92050513          	addi	a0,a0,-1760
80005a54:	f79ff0ef          	jal	ra,800059cc <z_early_memset>
}
80005a58:	00c12703          	lw	a4,12(sp)
80005a5c:	25042783          	lw	a5,592(s0)
80005a60:	00f747b3          	xor	a5,a4,a5
80005a64:	00000713          	li	a4,0
80005a68:	00079a63          	bnez	a5,80005a7c <z_bss_zero+0x64>
80005a6c:	01c12083          	lw	ra,28(sp)
80005a70:	01812403          	lw	s0,24(sp)
80005a74:	02010113          	addi	sp,sp,32
80005a78:	00008067          	ret
80005a7c:	094020ef          	jal	ra,80007b10 <_StackCheckHandler>

80005a80 <z_init_cpu>:
80005a80:	00308013          	addi	zero,ra,3
{
80005a84:	fe010113          	addi	sp,sp,-32
80005a88:	00112e23          	sw	ra,28(sp)
80005a8c:	00812c23          	sw	s0,24(sp)
80005a90:	00912a23          	sw	s1,20(sp)
80005a94:	00050413          	mv	s0,a0
80005a98:	8000d4b7          	lui	s1,0x8000d
80005a9c:	2504a783          	lw	a5,592(s1) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005aa0:	00f12623          	sw	a5,12(sp)
80005aa4:	00000793          	li	a5,0
	init_idle_thread(id);
80005aa8:	cf5ff0ef          	jal	ra,8000579c <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
80005aac:	00441793          	slli	a5,s0,0x4
80005ab0:	008787b3          	add	a5,a5,s0
80005ab4:	00379793          	slli	a5,a5,0x3
80005ab8:	8000b737          	lui	a4,0x8000b
80005abc:	aa870713          	addi	a4,a4,-1368 # 8000aaa8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000aaa9>
80005ac0:	00e787b3          	add	a5,a5,a4
80005ac4:	8000b737          	lui	a4,0x8000b
80005ac8:	e2070713          	addi	a4,a4,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80005acc:	00141693          	slli	a3,s0,0x1
80005ad0:	00868633          	add	a2,a3,s0
80005ad4:	00361613          	slli	a2,a2,0x3
80005ad8:	00c70633          	add	a2,a4,a2
80005adc:	00f62623          	sw	a5,12(a2)
	_kernel.cpus[id].id = id;
80005ae0:	00860a23          	sb	s0,20(a2)
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
80005ae4:	00c41793          	slli	a5,s0,0xc
80005ae8:	8000b637          	lui	a2,0x8000b
80005aec:	e5060613          	addi	a2,a2,-432 # 8000ae50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae51>
80005af0:	00c787b3          	add	a5,a5,a2
80005af4:	00001637          	lui	a2,0x1
80005af8:	00c787b3          	add	a5,a5,a2
	_kernel.cpus[id].irq_stack =
80005afc:	008686b3          	add	a3,a3,s0
80005b00:	00369693          	slli	a3,a3,0x3
80005b04:	00d70733          	add	a4,a4,a3
80005b08:	00f72223          	sw	a5,4(a4)
}
80005b0c:	00c12703          	lw	a4,12(sp)
80005b10:	2504a783          	lw	a5,592(s1)
80005b14:	00f747b3          	xor	a5,a4,a5
80005b18:	00000713          	li	a4,0
80005b1c:	00079c63          	bnez	a5,80005b34 <z_init_cpu+0xb4>
80005b20:	01c12083          	lw	ra,28(sp)
80005b24:	01812403          	lw	s0,24(sp)
80005b28:	01412483          	lw	s1,20(sp)
80005b2c:	02010113          	addi	sp,sp,32
80005b30:	00008067          	ret
80005b34:	7dd010ef          	jal	ra,80007b10 <_StackCheckHandler>

80005b38 <prepare_multithreading>:
80005b38:	00308013          	addi	zero,ra,3
{
80005b3c:	fc010113          	addi	sp,sp,-64
80005b40:	02112e23          	sw	ra,60(sp)
80005b44:	02812c23          	sw	s0,56(sp)
80005b48:	02912a23          	sw	s1,52(sp)
80005b4c:	03212823          	sw	s2,48(sp)
80005b50:	03312623          	sw	s3,44(sp)
80005b54:	8000d9b7          	lui	s3,0x8000d
80005b58:	2509a783          	lw	a5,592(s3) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005b5c:	00f12e23          	sw	a5,28(sp)
80005b60:	00000793          	li	a5,0
	z_sched_init();
80005b64:	5e1010ef          	jal	ra,80007944 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
80005b68:	8000b7b7          	lui	a5,0x8000b
80005b6c:	8000b437          	lui	s0,0x8000b
80005b70:	b3040493          	addi	s1,s0,-1232 # 8000ab30 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ab31>
80005b74:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80005b78:	0097ac23          	sw	s1,24(a5)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
80005b7c:	8000a7b7          	lui	a5,0x8000a
80005b80:	73478793          	addi	a5,a5,1844 # 8000a734 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a735>
80005b84:	00f12223          	sw	a5,4(sp)
80005b88:	00100793          	li	a5,1
80005b8c:	00f12023          	sw	a5,0(sp)
80005b90:	00000893          	li	a7,0
80005b94:	00000813          	li	a6,0
80005b98:	00000793          	li	a5,0
80005b9c:	00000713          	li	a4,0
80005ba0:	800066b7          	lui	a3,0x80006
80005ba4:	88068693          	addi	a3,a3,-1920 # 80005880 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80005881>
80005ba8:	00001637          	lui	a2,0x1
80005bac:	8000c5b7          	lui	a1,0x8000c
80005bb0:	25058593          	addi	a1,a1,592 # 8000c250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000c251>
80005bb4:	b3040513          	addi	a0,s0,-1232
80005bb8:	2a4000ef          	jal	ra,80005e5c <z_setup_new_thread>
80005bbc:	00050913          	mv	s2,a0
80005bc0:	00d4c783          	lbu	a5,13(s1)
80005bc4:	ffb7f793          	andi	a5,a5,-5
80005bc8:	00f486a3          	sb	a5,13(s1)
	z_ready_thread(&z_main_thread);
80005bcc:	b3040513          	addi	a0,s0,-1232
80005bd0:	4b0010ef          	jal	ra,80007080 <z_ready_thread>
	z_init_cpu(0);
80005bd4:	00000513          	li	a0,0
80005bd8:	ea9ff0ef          	jal	ra,80005a80 <z_init_cpu>
}
80005bdc:	01c12703          	lw	a4,28(sp)
80005be0:	2509a783          	lw	a5,592(s3)
80005be4:	00f747b3          	xor	a5,a4,a5
80005be8:	00000713          	li	a4,0
80005bec:	02079263          	bnez	a5,80005c10 <prepare_multithreading+0xd8>
80005bf0:	00090513          	mv	a0,s2
80005bf4:	03c12083          	lw	ra,60(sp)
80005bf8:	03812403          	lw	s0,56(sp)
80005bfc:	03412483          	lw	s1,52(sp)
80005c00:	03012903          	lw	s2,48(sp)
80005c04:	02c12983          	lw	s3,44(sp)
80005c08:	04010113          	addi	sp,sp,64
80005c0c:	00008067          	ret
80005c10:	701010ef          	jal	ra,80007b10 <_StackCheckHandler>

80005c14 <z_early_boot_rand_get>:
80005c14:	00308013          	addi	zero,ra,3
{
80005c18:	fe010113          	addi	sp,sp,-32
80005c1c:	00112e23          	sw	ra,28(sp)
80005c20:	00812c23          	sw	s0,24(sp)
80005c24:	8000d437          	lui	s0,0x8000d
80005c28:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005c2c:	00f12623          	sw	a5,12(sp)
80005c30:	00000793          	li	a5,0
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SYS_RAND_GET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_sys_rand_get(dst, len);
80005c34:	b1dfe0ef          	jal	ra,80004750 <z_impl_sys_rand_get>
}
80005c38:	00c12703          	lw	a4,12(sp)
80005c3c:	25042783          	lw	a5,592(s0)
80005c40:	00f747b3          	xor	a5,a4,a5
80005c44:	00000713          	li	a4,0
80005c48:	00079a63          	bnez	a5,80005c5c <z_early_boot_rand_get+0x48>
80005c4c:	01c12083          	lw	ra,28(sp)
80005c50:	01812403          	lw	s0,24(sp)
80005c54:	02010113          	addi	sp,sp,32
80005c58:	00008067          	ret
80005c5c:	6b5010ef          	jal	ra,80007b10 <_StackCheckHandler>

80005c60 <z_cstart>:
80005c60:	00308013          	addi	zero,ra,3
{
80005c64:	f5010113          	addi	sp,sp,-176
80005c68:	0a112623          	sw	ra,172(sp)
80005c6c:	0a812423          	sw	s0,168(sp)
80005c70:	8000d437          	lui	s0,0x8000d
80005c74:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005c78:	08f12e23          	sw	a5,156(sp)
80005c7c:	00000793          	li	a5,0
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
80005c80:	00100793          	li	a5,1
80005c84:	00f10ea3          	sb	a5,29(sp)
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
80005c88:	00f10e23          	sb	a5,28(sp)
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
80005c8c:	08012823          	sw	zero,144(sp)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
80005c90:	8000b7b7          	lui	a5,0x8000b
80005c94:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80005c98:	01010713          	addi	a4,sp,16
80005c9c:	00e7a423          	sw	a4,8(a5)
	z_device_state_init();
80005ca0:	87dff0ef          	jal	ra,8000551c <z_device_state_init>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
80005ca4:	00000513          	li	a0,0
80005ca8:	8d5ff0ef          	jal	ra,8000557c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
80005cac:	00100513          	li	a0,1
80005cb0:	8cdff0ef          	jal	ra,8000557c <z_sys_init_run_level>
	z_early_boot_rand_get((uint8_t *)&stack_guard, sizeof(stack_guard));
80005cb4:	00400593          	li	a1,4
80005cb8:	00c10513          	addi	a0,sp,12
80005cbc:	f59ff0ef          	jal	ra,80005c14 <z_early_boot_rand_get>
	__stack_chk_guard = stack_guard;
80005cc0:	00c12783          	lw	a5,12(sp)
80005cc4:	24f42823          	sw	a5,592(s0)
	__stack_chk_guard <<= 8;
80005cc8:	25042783          	lw	a5,592(s0)
80005ccc:	00879793          	slli	a5,a5,0x8
80005cd0:	24f42823          	sw	a5,592(s0)
	switch_to_main_thread(prepare_multithreading());
80005cd4:	e65ff0ef          	jal	ra,80005b38 <prepare_multithreading>
80005cd8:	cd5ff0ef          	jal	ra,800059ac <switch_to_main_thread>

80005cdc <setup_thread_stack>:
80005cdc:	00308013          	addi	zero,ra,3
{
80005ce0:	fe010113          	addi	sp,sp,-32
80005ce4:	00112e23          	sw	ra,28(sp)
80005ce8:	00812c23          	sw	s0,24(sp)
80005cec:	00912a23          	sw	s1,20(sp)
80005cf0:	00058513          	mv	a0,a1
80005cf4:	8000d437          	lui	s0,0x8000d
80005cf8:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005cfc:	00f12623          	sw	a5,12(sp)
80005d00:	00000793          	li	a5,0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
80005d04:	00f60613          	addi	a2,a2,15 # 100f <CONFIG_ISR_STACK_SIZE+0xf>
80005d08:	ff067613          	andi	a2,a2,-16
	stack_ptr = (char *)stack + stack_obj_size;
80005d0c:	00c584b3          	add	s1,a1,a2
80005d10:	0aa00593          	li	a1,170
80005d14:	d09fa0ef          	jal	ra,80000a1c <memset>
}
80005d18:	00c12703          	lw	a4,12(sp)
80005d1c:	25042783          	lw	a5,592(s0)
80005d20:	00f747b3          	xor	a5,a4,a5
80005d24:	00000713          	li	a4,0
80005d28:	00079e63          	bnez	a5,80005d44 <setup_thread_stack+0x68>
80005d2c:	00048513          	mv	a0,s1
80005d30:	01c12083          	lw	ra,28(sp)
80005d34:	01812403          	lw	s0,24(sp)
80005d38:	01412483          	lw	s1,20(sp)
80005d3c:	02010113          	addi	sp,sp,32
80005d40:	00008067          	ret
80005d44:	5cd010ef          	jal	ra,80007b10 <_StackCheckHandler>

80005d48 <z_impl_k_thread_start>:
80005d48:	00308013          	addi	zero,ra,3
{
80005d4c:	fe010113          	addi	sp,sp,-32
80005d50:	00112e23          	sw	ra,28(sp)
80005d54:	00812c23          	sw	s0,24(sp)
80005d58:	8000d437          	lui	s0,0x8000d
80005d5c:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005d60:	00f12623          	sw	a5,12(sp)
80005d64:	00000793          	li	a5,0
	z_sched_start(thread);
80005d68:	3a4010ef          	jal	ra,8000710c <z_sched_start>
}
80005d6c:	00c12703          	lw	a4,12(sp)
80005d70:	25042783          	lw	a5,592(s0)
80005d74:	00f747b3          	xor	a5,a4,a5
80005d78:	00000713          	li	a4,0
80005d7c:	00079a63          	bnez	a5,80005d90 <z_impl_k_thread_start+0x48>
80005d80:	01c12083          	lw	ra,28(sp)
80005d84:	01812403          	lw	s0,24(sp)
80005d88:	02010113          	addi	sp,sp,32
80005d8c:	00008067          	ret
80005d90:	581010ef          	jal	ra,80007b10 <_StackCheckHandler>

80005d94 <schedule_new_thread>:
80005d94:	00308013          	addi	zero,ra,3
{
80005d98:	fe010113          	addi	sp,sp,-32
80005d9c:	00112e23          	sw	ra,28(sp)
80005da0:	00060693          	mv	a3,a2
80005da4:	8000d7b7          	lui	a5,0x8000d
80005da8:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005dac:	00e12623          	sw	a4,12(sp)
80005db0:	00000713          	li	a4,0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
80005db4:	00b667b3          	or	a5,a2,a1
80005db8:	02079663          	bnez	a5,80005de4 <schedule_new_thread+0x50>
	z_impl_k_thread_start(thread);
80005dbc:	f8dff0ef          	jal	ra,80005d48 <z_impl_k_thread_start>
}
80005dc0:	8000d7b7          	lui	a5,0x8000d
80005dc4:	00c12703          	lw	a4,12(sp)
80005dc8:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005dcc:	00f747b3          	xor	a5,a4,a5
80005dd0:	00000713          	li	a4,0
80005dd4:	02079463          	bnez	a5,80005dfc <schedule_new_thread+0x68>
80005dd8:	01c12083          	lw	ra,28(sp)
80005ddc:	02010113          	addi	sp,sp,32
80005de0:	00008067          	ret
80005de4:	00058613          	mv	a2,a1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
80005de8:	800075b7          	lui	a1,0x80007
80005dec:	19058593          	addi	a1,a1,400 # 80007190 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007191>
80005df0:	01850513          	addi	a0,a0,24
80005df4:	7a9010ef          	jal	ra,80007d9c <z_add_timeout>
80005df8:	fc9ff06f          	j	80005dc0 <schedule_new_thread+0x2c>
80005dfc:	515010ef          	jal	ra,80007b10 <_StackCheckHandler>

80005e00 <z_init_thread_base>:
80005e00:	00308013          	addi	zero,ra,3
{
80005e04:	fe010113          	addi	sp,sp,-32
80005e08:	00112e23          	sw	ra,28(sp)
80005e0c:	8000d7b7          	lui	a5,0x8000d
80005e10:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005e14:	00e12623          	sw	a4,12(sp)
80005e18:	00000713          	li	a4,0
	thread_base->pended_on = NULL;
80005e1c:	00052423          	sw	zero,8(a0)
	thread_base->user_options = (uint8_t)options;
80005e20:	00d50623          	sb	a3,12(a0)
	thread_base->thread_state = (uint8_t)initial_state;
80005e24:	00c506a3          	sb	a2,13(a0)
	thread_base->prio = priority;
80005e28:	00b50723          	sb	a1,14(a0)
	thread_base->sched_locked = 0U;
80005e2c:	000507a3          	sb	zero,15(a0)
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
80005e30:	00052c23          	sw	zero,24(a0)
	node->prev = NULL;
80005e34:	00052e23          	sw	zero,28(a0)
}
80005e38:	00c12703          	lw	a4,12(sp)
80005e3c:	2507a783          	lw	a5,592(a5)
80005e40:	00f747b3          	xor	a5,a4,a5
80005e44:	00000713          	li	a4,0
80005e48:	00079863          	bnez	a5,80005e58 <z_init_thread_base+0x58>
80005e4c:	01c12083          	lw	ra,28(sp)
80005e50:	02010113          	addi	sp,sp,32
80005e54:	00008067          	ret
80005e58:	4b9010ef          	jal	ra,80007b10 <_StackCheckHandler>

80005e5c <z_setup_new_thread>:
80005e5c:	00308013          	addi	zero,ra,3
{
80005e60:	fc010113          	addi	sp,sp,-64
80005e64:	02112e23          	sw	ra,60(sp)
80005e68:	02812c23          	sw	s0,56(sp)
80005e6c:	02912a23          	sw	s1,52(sp)
80005e70:	03212823          	sw	s2,48(sp)
80005e74:	03312623          	sw	s3,44(sp)
80005e78:	03412423          	sw	s4,40(sp)
80005e7c:	03512223          	sw	s5,36(sp)
80005e80:	03612023          	sw	s6,32(sp)
80005e84:	01712e23          	sw	s7,28(sp)
80005e88:	00050413          	mv	s0,a0
80005e8c:	00058493          	mv	s1,a1
80005e90:	00060913          	mv	s2,a2
80005e94:	00068993          	mv	s3,a3
80005e98:	00070a13          	mv	s4,a4
80005e9c:	00078a93          	mv	s5,a5
80005ea0:	00080b13          	mv	s6,a6
80005ea4:	00088593          	mv	a1,a7
80005ea8:	8000dbb7          	lui	s7,0x8000d
80005eac:	250ba783          	lw	a5,592(s7) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005eb0:	00f12623          	sw	a5,12(sp)
80005eb4:	00000793          	li	a5,0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
80005eb8:	06c50793          	addi	a5,a0,108
	list->head = (sys_dnode_t *)list;
80005ebc:	06f52623          	sw	a5,108(a0)
	list->tail = (sys_dnode_t *)list;
80005ec0:	06f52823          	sw	a5,112(a0)
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
80005ec4:	04012683          	lw	a3,64(sp)
80005ec8:	00400613          	li	a2,4
80005ecc:	f35ff0ef          	jal	ra,80005e00 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
80005ed0:	00090613          	mv	a2,s2
80005ed4:	00048593          	mv	a1,s1
80005ed8:	00040513          	mv	a0,s0
80005edc:	e01ff0ef          	jal	ra,80005cdc <setup_thread_stack>
80005ee0:	00050913          	mv	s2,a0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
80005ee4:	000b0813          	mv	a6,s6
80005ee8:	000a8793          	mv	a5,s5
80005eec:	000a0713          	mv	a4,s4
80005ef0:	00098693          	mv	a3,s3
80005ef4:	00050613          	mv	a2,a0
80005ef8:	00048593          	mv	a1,s1
80005efc:	00040513          	mv	a0,s0
80005f00:	c10fe0ef          	jal	ra,80004310 <arch_new_thread>
	new_thread->init_data = NULL;
80005f04:	06042423          	sw	zero,104(s0)
	new_thread->resource_pool = _current->resource_pool;
80005f08:	8000b7b7          	lui	a5,0x8000b
80005f0c:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80005f10:	0087a783          	lw	a5,8(a5)
80005f14:	0807a783          	lw	a5,128(a5)
80005f18:	08f42023          	sw	a5,128(s0)
}
80005f1c:	00c12703          	lw	a4,12(sp)
80005f20:	250ba783          	lw	a5,592(s7)
80005f24:	00f747b3          	xor	a5,a4,a5
80005f28:	00000713          	li	a4,0
80005f2c:	02079a63          	bnez	a5,80005f60 <z_setup_new_thread+0x104>
80005f30:	00090513          	mv	a0,s2
80005f34:	03c12083          	lw	ra,60(sp)
80005f38:	03812403          	lw	s0,56(sp)
80005f3c:	03412483          	lw	s1,52(sp)
80005f40:	03012903          	lw	s2,48(sp)
80005f44:	02c12983          	lw	s3,44(sp)
80005f48:	02812a03          	lw	s4,40(sp)
80005f4c:	02412a83          	lw	s5,36(sp)
80005f50:	02012b03          	lw	s6,32(sp)
80005f54:	01c12b83          	lw	s7,28(sp)
80005f58:	04010113          	addi	sp,sp,64
80005f5c:	00008067          	ret
80005f60:	3b1010ef          	jal	ra,80007b10 <_StackCheckHandler>

80005f64 <z_init_static_threads>:
80005f64:	00308013          	addi	zero,ra,3
{
80005f68:	fd010113          	addi	sp,sp,-48
80005f6c:	02112623          	sw	ra,44(sp)
80005f70:	02812423          	sw	s0,40(sp)
80005f74:	02912223          	sw	s1,36(sp)
80005f78:	8000d7b7          	lui	a5,0x8000d
80005f7c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80005f80:	00e12e23          	sw	a4,28(sp)
80005f84:	00000713          	li	a4,0
	_FOREACH_STATIC_THREAD(thread_data) {
80005f88:	80009437          	lui	s0,0x80009
80005f8c:	7f440413          	addi	s0,s0,2036 # 800097f4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800097f5>
80005f90:	0440006f          	j	80005fd4 <z_init_static_threads+0x70>
		z_setup_new_thread(
80005f94:	02c42783          	lw	a5,44(s0)
80005f98:	00f12223          	sw	a5,4(sp)
80005f9c:	02042783          	lw	a5,32(s0)
80005fa0:	00f12023          	sw	a5,0(sp)
80005fa4:	01c42883          	lw	a7,28(s0)
80005fa8:	01842803          	lw	a6,24(s0)
80005fac:	01442783          	lw	a5,20(s0)
80005fb0:	01042703          	lw	a4,16(s0)
80005fb4:	00c42683          	lw	a3,12(s0)
80005fb8:	00842603          	lw	a2,8(s0)
80005fbc:	00442583          	lw	a1,4(s0)
80005fc0:	00042503          	lw	a0,0(s0)
80005fc4:	e99ff0ef          	jal	ra,80005e5c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
80005fc8:	00042783          	lw	a5,0(s0)
80005fcc:	0687a423          	sw	s0,104(a5)
	_FOREACH_STATIC_THREAD(thread_data) {
80005fd0:	03040413          	addi	s0,s0,48
80005fd4:	800097b7          	lui	a5,0x80009
80005fd8:	7f478793          	addi	a5,a5,2036 # 800097f4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800097f5>
80005fdc:	faf46ce3          	bltu	s0,a5,80005f94 <z_init_static_threads+0x30>
	k_sched_lock();
80005fe0:	77c000ef          	jal	ra,8000675c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
80005fe4:	80009437          	lui	s0,0x80009
80005fe8:	7f440413          	addi	s0,s0,2036 # 800097f4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800097f5>
80005fec:	0440006f          	j	80006030 <z_init_static_threads+0xcc>
					    K_MSEC(thread_data->init_delay));
80005ff0:	41f7d593          	srai	a1,a5,0x1f
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
80005ff4:	0197d713          	srli	a4,a5,0x19
80005ff8:	00759593          	slli	a1,a1,0x7
80005ffc:	00b765b3          	or	a1,a4,a1
80006000:	00779793          	slli	a5,a5,0x7
80006004:	3e778513          	addi	a0,a5,999
80006008:	00f537b3          	sltu	a5,a0,a5
8000600c:	3e800613          	li	a2,1000
80006010:	00000693          	li	a3,0
80006014:	00b785b3          	add	a1,a5,a1
80006018:	9ccfa0ef          	jal	ra,800001e4 <__udivdi3>
			schedule_new_thread(thread_data->init_thread,
8000601c:	00058613          	mv	a2,a1
80006020:	00050593          	mv	a1,a0
80006024:	00048513          	mv	a0,s1
80006028:	d6dff0ef          	jal	ra,80005d94 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
8000602c:	03040413          	addi	s0,s0,48
80006030:	800097b7          	lui	a5,0x80009
80006034:	7f478793          	addi	a5,a5,2036 # 800097f4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800097f5>
80006038:	02f47063          	bgeu	s0,a5,80006058 <z_init_static_threads+0xf4>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
8000603c:	02442783          	lw	a5,36(s0)
80006040:	fff00713          	li	a4,-1
80006044:	fee784e3          	beq	a5,a4,8000602c <z_init_static_threads+0xc8>
			schedule_new_thread(thread_data->init_thread,
80006048:	00042483          	lw	s1,0(s0)
					    K_MSEC(thread_data->init_delay));
8000604c:	fa07d2e3          	bgez	a5,80005ff0 <z_init_static_threads+0x8c>
80006050:	00000793          	li	a5,0
80006054:	f9dff06f          	j	80005ff0 <z_init_static_threads+0x8c>
	k_sched_unlock();
80006058:	6a8010ef          	jal	ra,80007700 <k_sched_unlock>
}
8000605c:	8000d7b7          	lui	a5,0x8000d
80006060:	01c12703          	lw	a4,28(sp)
80006064:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006068:	00f747b3          	xor	a5,a4,a5
8000606c:	00000713          	li	a4,0
80006070:	00079c63          	bnez	a5,80006088 <z_init_static_threads+0x124>
80006074:	02c12083          	lw	ra,44(sp)
80006078:	02812403          	lw	s0,40(sp)
8000607c:	02412483          	lw	s1,36(sp)
80006080:	03010113          	addi	sp,sp,48
80006084:	00008067          	ret
80006088:	289010ef          	jal	ra,80007b10 <_StackCheckHandler>

8000608c <idle>:
8000608c:	00308013          	addi	zero,ra,3
{
80006090:	fe010113          	addi	sp,sp,-32
80006094:	00112e23          	sw	ra,28(sp)
80006098:	8000d7b7          	lui	a5,0x8000d
8000609c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800060a0:	00e12623          	sw	a4,12(sp)
800060a4:	00000713          	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800060a8:	300477f3          	csrrci	a5,mstatus,8
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
800060ac:	e8dfd0ef          	jal	ra,80003f38 <arch_cpu_idle>
800060b0:	ff9ff06f          	j	800060a8 <idle+0x1c>

800060b4 <new_prio_for_inheritance>:
800060b4:	00308013          	addi	zero,ra,3
{
800060b8:	fe010113          	addi	sp,sp,-32
800060bc:	00112e23          	sw	ra,28(sp)
800060c0:	8000d7b7          	lui	a5,0x8000d
800060c4:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800060c8:	00e12623          	sw	a4,12(sp)
800060cc:	00000713          	li	a4,0
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
800060d0:	00b55463          	bge	a0,a1,800060d8 <new_prio_for_inheritance+0x24>
800060d4:	00050593          	mv	a1,a0
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
800060d8:	f8100793          	li	a5,-127
800060dc:	02f5c663          	blt	a1,a5,80006108 <new_prio_for_inheritance+0x54>
800060e0:	00058513          	mv	a0,a1
}
800060e4:	8000d7b7          	lui	a5,0x8000d
800060e8:	00c12703          	lw	a4,12(sp)
800060ec:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800060f0:	00f747b3          	xor	a5,a4,a5
800060f4:	00000713          	li	a4,0
800060f8:	00079c63          	bnez	a5,80006110 <new_prio_for_inheritance+0x5c>
800060fc:	01c12083          	lw	ra,28(sp)
80006100:	02010113          	addi	sp,sp,32
80006104:	00008067          	ret
80006108:	f8100513          	li	a0,-127
	return new_prio;
8000610c:	fd9ff06f          	j	800060e4 <new_prio_for_inheritance+0x30>
}
80006110:	201010ef          	jal	ra,80007b10 <_StackCheckHandler>

80006114 <adjust_owner_prio>:
80006114:	00308013          	addi	zero,ra,3
{
80006118:	fe010113          	addi	sp,sp,-32
8000611c:	00112e23          	sw	ra,28(sp)
80006120:	8000d7b7          	lui	a5,0x8000d
80006124:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006128:	00e12623          	sw	a4,12(sp)
8000612c:	00000713          	li	a4,0
	if (mutex->owner->base.prio != new_prio) {
80006130:	00852503          	lw	a0,8(a0)
80006134:	00e50783          	lb	a5,14(a0)
80006138:	02b79663          	bne	a5,a1,80006164 <adjust_owner_prio+0x50>
	return false;
8000613c:	00000513          	li	a0,0
}
80006140:	8000d7b7          	lui	a5,0x8000d
80006144:	00c12703          	lw	a4,12(sp)
80006148:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000614c:	00f747b3          	xor	a5,a4,a5
80006150:	00000713          	li	a4,0
80006154:	00079c63          	bnez	a5,8000616c <adjust_owner_prio+0x58>
80006158:	01c12083          	lw	ra,28(sp)
8000615c:	02010113          	addi	sp,sp,32
80006160:	00008067          	ret
		return z_set_prio(mutex->owner, new_prio);
80006164:	420010ef          	jal	ra,80007584 <z_set_prio>
80006168:	fd9ff06f          	j	80006140 <adjust_owner_prio+0x2c>
}
8000616c:	1a5010ef          	jal	ra,80007b10 <_StackCheckHandler>

80006170 <z_impl_k_mutex_lock>:
80006170:	00308013          	addi	zero,ra,3
{
80006174:	fd010113          	addi	sp,sp,-48
80006178:	02112623          	sw	ra,44(sp)
8000617c:	02812423          	sw	s0,40(sp)
80006180:	02912223          	sw	s1,36(sp)
80006184:	03212023          	sw	s2,32(sp)
80006188:	01312e23          	sw	s3,28(sp)
8000618c:	01412c23          	sw	s4,24(sp)
80006190:	00050413          	mv	s0,a0
80006194:	8000d7b7          	lui	a5,0x8000d
80006198:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000619c:	00e12623          	sw	a4,12(sp)
800061a0:	00000713          	li	a4,0
800061a4:	300474f3          	csrrci	s1,mstatus,8
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
800061a8:	00c52783          	lw	a5,12(a0)
800061ac:	06079c63          	bnez	a5,80006224 <z_impl_k_mutex_lock+0xb4>
					_current->base.prio :
800061b0:	10079c63          	bnez	a5,800062c8 <z_impl_k_mutex_lock+0x158>
800061b4:	8000b737          	lui	a4,0x8000b
800061b8:	e2070713          	addi	a4,a4,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
800061bc:	00872703          	lw	a4,8(a4)
800061c0:	00e70703          	lb	a4,14(a4)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
800061c4:	00e42823          	sw	a4,16(s0)
		mutex->lock_count++;
800061c8:	00178793          	addi	a5,a5,1
800061cc:	00f42623          	sw	a5,12(s0)
		mutex->owner = _current;
800061d0:	8000b7b7          	lui	a5,0x8000b
800061d4:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
800061d8:	0087a783          	lw	a5,8(a5)
800061dc:	00f42423          	sw	a5,8(s0)
	__asm__ volatile ("csrs mstatus, %0"
800061e0:	0084f493          	andi	s1,s1,8
800061e4:	3004a073          	csrs	mstatus,s1
		return 0;
800061e8:	00000513          	li	a0,0
}
800061ec:	8000d7b7          	lui	a5,0x8000d
800061f0:	00c12703          	lw	a4,12(sp)
800061f4:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800061f8:	00f747b3          	xor	a5,a4,a5
800061fc:	00000713          	li	a4,0
80006200:	10079c63          	bnez	a5,80006318 <z_impl_k_mutex_lock+0x1a8>
80006204:	02c12083          	lw	ra,44(sp)
80006208:	02812403          	lw	s0,40(sp)
8000620c:	02412483          	lw	s1,36(sp)
80006210:	02012903          	lw	s2,32(sp)
80006214:	01c12983          	lw	s3,28(sp)
80006218:	01812a03          	lw	s4,24(sp)
8000621c:	03010113          	addi	sp,sp,48
80006220:	00008067          	ret
80006224:	00058993          	mv	s3,a1
80006228:	00060913          	mv	s2,a2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
8000622c:	00852683          	lw	a3,8(a0)
80006230:	8000b737          	lui	a4,0x8000b
80006234:	e2070713          	addi	a4,a4,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006238:	00872703          	lw	a4,8(a4)
8000623c:	f6e68ae3          	beq	a3,a4,800061b0 <z_impl_k_mutex_lock+0x40>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
80006240:	00b667b3          	or	a5,a2,a1
80006244:	08078663          	beqz	a5,800062d0 <z_impl_k_mutex_lock+0x160>
					    mutex->owner->base.prio);
80006248:	00e68a03          	lb	s4,14(a3)
	new_prio = new_prio_for_inheritance(_current->base.prio,
8000624c:	000a0593          	mv	a1,s4
80006250:	00e70503          	lb	a0,14(a4)
80006254:	e61ff0ef          	jal	ra,800060b4 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
80006258:	09454463          	blt	a0,s4,800062e0 <z_impl_k_mutex_lock+0x170>
	bool resched = false;
8000625c:	00000a13          	li	s4,0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
80006260:	00098693          	mv	a3,s3
80006264:	00090713          	mv	a4,s2
80006268:	00040613          	mv	a2,s0
8000626c:	00048593          	mv	a1,s1
80006270:	8000b537          	lui	a0,0x8000b
80006274:	e4450513          	addi	a0,a0,-444 # 8000ae44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae45>
80006278:	284010ef          	jal	ra,800074fc <z_pend_curr>
	if (got_mutex == 0) {
8000627c:	f60508e3          	beqz	a0,800061ec <z_impl_k_mutex_lock+0x7c>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006280:	300474f3          	csrrci	s1,mstatus,8
	if (likely(mutex->owner != NULL)) {
80006284:	00842783          	lw	a5,8(s0)
80006288:	06078a63          	beqz	a5,800062fc <z_impl_k_mutex_lock+0x18c>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
8000628c:	00042783          	lw	a5,0(s0)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
80006290:	06878263          	beq	a5,s0,800062f4 <z_impl_k_mutex_lock+0x184>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
80006294:	06078063          	beqz	a5,800062f4 <z_impl_k_mutex_lock+0x184>
80006298:	01042583          	lw	a1,16(s0)
8000629c:	00e78503          	lb	a0,14(a5)
800062a0:	e15ff0ef          	jal	ra,800060b4 <new_prio_for_inheritance>
800062a4:	00050593          	mv	a1,a0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
800062a8:	00040513          	mv	a0,s0
800062ac:	e69ff0ef          	jal	ra,80006114 <adjust_owner_prio>
800062b0:	04051863          	bnez	a0,80006300 <z_impl_k_mutex_lock+0x190>
800062b4:	040a1663          	bnez	s4,80006300 <z_impl_k_mutex_lock+0x190>
	__asm__ volatile ("csrs mstatus, %0"
800062b8:	0084f493          	andi	s1,s1,8
800062bc:	3004a073          	csrs	mstatus,s1
	return -EAGAIN;
800062c0:	ff500513          	li	a0,-11
800062c4:	f29ff06f          	j	800061ec <z_impl_k_mutex_lock+0x7c>
					_current->base.prio :
800062c8:	01042703          	lw	a4,16(s0)
800062cc:	ef9ff06f          	j	800061c4 <z_impl_k_mutex_lock+0x54>
800062d0:	0084f493          	andi	s1,s1,8
800062d4:	3004a073          	csrs	mstatus,s1
		return -EBUSY;
800062d8:	ff000513          	li	a0,-16
800062dc:	f11ff06f          	j	800061ec <z_impl_k_mutex_lock+0x7c>
		resched = adjust_owner_prio(mutex, new_prio);
800062e0:	00050593          	mv	a1,a0
800062e4:	00040513          	mv	a0,s0
800062e8:	e2dff0ef          	jal	ra,80006114 <adjust_owner_prio>
800062ec:	00050a13          	mv	s4,a0
800062f0:	f71ff06f          	j	80006260 <z_impl_k_mutex_lock+0xf0>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
800062f4:	01042583          	lw	a1,16(s0)
800062f8:	fb1ff06f          	j	800062a8 <z_impl_k_mutex_lock+0x138>
	if (resched) {
800062fc:	fa0a0ee3          	beqz	s4,800062b8 <z_impl_k_mutex_lock+0x148>
		z_reschedule(&lock, key);
80006300:	00048593          	mv	a1,s1
80006304:	8000b537          	lui	a0,0x8000b
80006308:	e4450513          	addi	a0,a0,-444 # 8000ae44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae45>
8000630c:	6f4000ef          	jal	ra,80006a00 <z_reschedule>
	return -EAGAIN;
80006310:	ff500513          	li	a0,-11
80006314:	ed9ff06f          	j	800061ec <z_impl_k_mutex_lock+0x7c>
}
80006318:	7f8010ef          	jal	ra,80007b10 <_StackCheckHandler>

8000631c <z_impl_k_mutex_unlock>:
8000631c:	00308013          	addi	zero,ra,3
{
80006320:	fe010113          	addi	sp,sp,-32
80006324:	00112e23          	sw	ra,28(sp)
80006328:	00812c23          	sw	s0,24(sp)
8000632c:	00912a23          	sw	s1,20(sp)
80006330:	8000d7b7          	lui	a5,0x8000d
80006334:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006338:	00e12623          	sw	a4,12(sp)
8000633c:	00000713          	li	a4,0
	CHECKIF(mutex->owner == NULL) {
80006340:	00852703          	lw	a4,8(a0)
80006344:	0a070a63          	beqz	a4,800063f8 <z_impl_k_mutex_unlock+0xdc>
80006348:	00050413          	mv	s0,a0
	CHECKIF(mutex->owner != _current) {
8000634c:	8000b7b7          	lui	a5,0x8000b
80006350:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006354:	0087a783          	lw	a5,8(a5)
80006358:	0af71463          	bne	a4,a5,80006400 <z_impl_k_mutex_unlock+0xe4>
	if (mutex->lock_count > 1U) {
8000635c:	00c52783          	lw	a5,12(a0)
80006360:	00100713          	li	a4,1
80006364:	02f77e63          	bgeu	a4,a5,800063a0 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count--;
80006368:	fff78793          	addi	a5,a5,-1
8000636c:	00f52623          	sw	a5,12(a0)
	return 0;
80006370:	00000513          	li	a0,0
}
80006374:	8000d7b7          	lui	a5,0x8000d
80006378:	00c12703          	lw	a4,12(sp)
8000637c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006380:	00f747b3          	xor	a5,a4,a5
80006384:	00000713          	li	a4,0
80006388:	08079063          	bnez	a5,80006408 <z_impl_k_mutex_unlock+0xec>
8000638c:	01c12083          	lw	ra,28(sp)
80006390:	01812403          	lw	s0,24(sp)
80006394:	01412483          	lw	s1,20(sp)
80006398:	02010113          	addi	sp,sp,32
8000639c:	00008067          	ret
	__asm__ volatile ("csrrc %0, mstatus, %1"
800063a0:	300474f3          	csrrci	s1,mstatus,8
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
800063a4:	01052583          	lw	a1,16(a0)
800063a8:	d6dff0ef          	jal	ra,80006114 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
800063ac:	00040513          	mv	a0,s0
800063b0:	4a4010ef          	jal	ra,80007854 <z_unpend_first_thread>
	mutex->owner = new_owner;
800063b4:	00a42423          	sw	a0,8(s0)
	if (new_owner != NULL) {
800063b8:	02050663          	beqz	a0,800063e4 <z_impl_k_mutex_unlock+0xc8>
		mutex->owner_orig_prio = new_owner->base.prio;
800063bc:	00e50783          	lb	a5,14(a0)
800063c0:	00f42823          	sw	a5,16(s0)
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
800063c4:	06052c23          	sw	zero,120(a0)
		z_ready_thread(new_owner);
800063c8:	4b9000ef          	jal	ra,80007080 <z_ready_thread>
		z_reschedule(&lock, key);
800063cc:	00048593          	mv	a1,s1
800063d0:	8000b537          	lui	a0,0x8000b
800063d4:	e4450513          	addi	a0,a0,-444 # 8000ae44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae45>
800063d8:	628000ef          	jal	ra,80006a00 <z_reschedule>
	return 0;
800063dc:	00000513          	li	a0,0
800063e0:	f95ff06f          	j	80006374 <z_impl_k_mutex_unlock+0x58>
		mutex->lock_count = 0U;
800063e4:	00042623          	sw	zero,12(s0)
	__asm__ volatile ("csrs mstatus, %0"
800063e8:	0084f493          	andi	s1,s1,8
800063ec:	3004a073          	csrs	mstatus,s1
	return 0;
800063f0:	00000513          	li	a0,0
800063f4:	f81ff06f          	j	80006374 <z_impl_k_mutex_unlock+0x58>
		return -EINVAL;
800063f8:	fea00513          	li	a0,-22
800063fc:	f79ff06f          	j	80006374 <z_impl_k_mutex_unlock+0x58>
		return -EPERM;
80006400:	fff00513          	li	a0,-1
80006404:	f71ff06f          	j	80006374 <z_impl_k_mutex_unlock+0x58>
}
80006408:	708010ef          	jal	ra,80007b10 <_StackCheckHandler>

8000640c <sliceable>:
8000640c:	00308013          	addi	zero,ra,3
{
80006410:	fe010113          	addi	sp,sp,-32
80006414:	00112e23          	sw	ra,28(sp)
80006418:	8000d7b7          	lui	a5,0x8000d
8000641c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006420:	00e12623          	sw	a4,12(sp)
80006424:	00000713          	li	a4,0
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
80006428:	00e55703          	lhu	a4,14(a0)
		&& !z_is_idle_thread_object(thread);
8000642c:	07f00793          	li	a5,127
80006430:	02e7ea63          	bltu	a5,a4,80006464 <sliceable+0x58>
	uint8_t state = thread->base.thread_state;
80006434:	00d54783          	lbu	a5,13(a0)
		&& !z_is_thread_prevented_from_running(thread)
80006438:	01f7f793          	andi	a5,a5,31
8000643c:	04079863          	bnez	a5,8000648c <sliceable+0x80>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
80006440:	00e50703          	lb	a4,14(a0)
80006444:	8000b7b7          	lui	a5,0x8000b
80006448:	95c7a783          	lw	a5,-1700(a5) # 8000a95c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a95d>
8000644c:	04f74463          	blt	a4,a5,80006494 <sliceable+0x88>
		&& !z_is_idle_thread_object(thread);
80006450:	8000b7b7          	lui	a5,0x8000b
80006454:	aa878793          	addi	a5,a5,-1368 # 8000aaa8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000aaa9>
80006458:	04f50263          	beq	a0,a5,8000649c <sliceable+0x90>
8000645c:	00100513          	li	a0,1
80006460:	0080006f          	j	80006468 <sliceable+0x5c>
80006464:	00000513          	li	a0,0
}
80006468:	8000d7b7          	lui	a5,0x8000d
8000646c:	00c12703          	lw	a4,12(sp)
80006470:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006474:	00f747b3          	xor	a5,a4,a5
80006478:	00000713          	li	a4,0
8000647c:	02079463          	bnez	a5,800064a4 <sliceable+0x98>
80006480:	01c12083          	lw	ra,28(sp)
80006484:	02010113          	addi	sp,sp,32
80006488:	00008067          	ret
		&& !z_is_idle_thread_object(thread);
8000648c:	00000513          	li	a0,0
80006490:	fd9ff06f          	j	80006468 <sliceable+0x5c>
80006494:	00000513          	li	a0,0
80006498:	fd1ff06f          	j	80006468 <sliceable+0x5c>
8000649c:	00000513          	li	a0,0
800064a0:	fc9ff06f          	j	80006468 <sliceable+0x5c>
}
800064a4:	66c010ef          	jal	ra,80007b10 <_StackCheckHandler>

800064a8 <thread_active_elsewhere>:
800064a8:	00308013          	addi	zero,ra,3
{
800064ac:	fe010113          	addi	sp,sp,-32
800064b0:	00112e23          	sw	ra,28(sp)
800064b4:	8000d7b7          	lui	a5,0x8000d
800064b8:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800064bc:	00e12623          	sw	a4,12(sp)
800064c0:	00000713          	li	a4,0
}
800064c4:	00c12703          	lw	a4,12(sp)
800064c8:	2507a783          	lw	a5,592(a5)
800064cc:	00f747b3          	xor	a5,a4,a5
800064d0:	00000713          	li	a4,0
800064d4:	00079a63          	bnez	a5,800064e8 <thread_active_elsewhere+0x40>
800064d8:	00000513          	li	a0,0
800064dc:	01c12083          	lw	ra,28(sp)
800064e0:	02010113          	addi	sp,sp,32
800064e4:	00008067          	ret
800064e8:	628010ef          	jal	ra,80007b10 <_StackCheckHandler>

800064ec <pended_on_thread>:
800064ec:	00308013          	addi	zero,ra,3
{
800064f0:	fe010113          	addi	sp,sp,-32
800064f4:	00112e23          	sw	ra,28(sp)
800064f8:	8000d7b7          	lui	a5,0x8000d
800064fc:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006500:	00e12623          	sw	a4,12(sp)
80006504:	00000713          	li	a4,0
	return thread->base.pended_on;
80006508:	00852503          	lw	a0,8(a0)
}
8000650c:	00c12703          	lw	a4,12(sp)
80006510:	2507a783          	lw	a5,592(a5)
80006514:	00f747b3          	xor	a5,a4,a5
80006518:	00000713          	li	a4,0
8000651c:	00079863          	bnez	a5,8000652c <pended_on_thread+0x40>
80006520:	01c12083          	lw	ra,28(sp)
80006524:	02010113          	addi	sp,sp,32
80006528:	00008067          	ret
8000652c:	5e4010ef          	jal	ra,80007b10 <_StackCheckHandler>

80006530 <add_thread_timeout>:
80006530:	00308013          	addi	zero,ra,3
{
80006534:	fe010113          	addi	sp,sp,-32
80006538:	00112e23          	sw	ra,28(sp)
8000653c:	00060693          	mv	a3,a2
80006540:	8000d7b7          	lui	a5,0x8000d
80006544:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006548:	00e12623          	sw	a4,12(sp)
8000654c:	00000713          	li	a4,0
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
80006550:	fff00793          	li	a5,-1
80006554:	00b79463          	bne	a5,a1,8000655c <add_thread_timeout+0x2c>
80006558:	00f60c63          	beq	a2,a5,80006570 <add_thread_timeout+0x40>
8000655c:	00058613          	mv	a2,a1
80006560:	800075b7          	lui	a1,0x80007
80006564:	19058593          	addi	a1,a1,400 # 80007190 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007191>
80006568:	01850513          	addi	a0,a0,24
8000656c:	031010ef          	jal	ra,80007d9c <z_add_timeout>
}
80006570:	8000d7b7          	lui	a5,0x8000d
80006574:	00c12703          	lw	a4,12(sp)
80006578:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000657c:	00f747b3          	xor	a5,a4,a5
80006580:	00000713          	li	a4,0
80006584:	00079863          	bnez	a5,80006594 <add_thread_timeout+0x64>
80006588:	01c12083          	lw	ra,28(sp)
8000658c:	02010113          	addi	sp,sp,32
80006590:	00008067          	ret
80006594:	57c010ef          	jal	ra,80007b10 <_StackCheckHandler>

80006598 <z_sched_prio_cmp>:
80006598:	00308013          	addi	zero,ra,3
{
8000659c:	fe010113          	addi	sp,sp,-32
800065a0:	00112e23          	sw	ra,28(sp)
800065a4:	8000d7b7          	lui	a5,0x8000d
800065a8:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800065ac:	00e12623          	sw	a4,12(sp)
800065b0:	00000713          	li	a4,0
	int32_t b1 = thread_1->base.prio;
800065b4:	00e50783          	lb	a5,14(a0)
	int32_t b2 = thread_2->base.prio;
800065b8:	00e58503          	lb	a0,14(a1)
	if (b1 != b2) {
800065bc:	02a78663          	beq	a5,a0,800065e8 <z_sched_prio_cmp+0x50>
		return b2 - b1;
800065c0:	40f50533          	sub	a0,a0,a5
}
800065c4:	8000d7b7          	lui	a5,0x8000d
800065c8:	00c12703          	lw	a4,12(sp)
800065cc:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800065d0:	00f747b3          	xor	a5,a4,a5
800065d4:	00000713          	li	a4,0
800065d8:	00079c63          	bnez	a5,800065f0 <z_sched_prio_cmp+0x58>
800065dc:	01c12083          	lw	ra,28(sp)
800065e0:	02010113          	addi	sp,sp,32
800065e4:	00008067          	ret
	return 0;
800065e8:	00000513          	li	a0,0
800065ec:	fd9ff06f          	j	800065c4 <z_sched_prio_cmp+0x2c>
}
800065f0:	520010ef          	jal	ra,80007b10 <_StackCheckHandler>

800065f4 <z_reset_time_slice>:
800065f4:	00308013          	addi	zero,ra,3
{
800065f8:	fe010113          	addi	sp,sp,-32
800065fc:	00112e23          	sw	ra,28(sp)
80006600:	00812c23          	sw	s0,24(sp)
80006604:	8000d7b7          	lui	a5,0x8000d
80006608:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000660c:	00e12623          	sw	a4,12(sp)
80006610:	00000713          	li	a4,0
	int ret = slice_ticks;
80006614:	8000b7b7          	lui	a5,0x8000b
80006618:	9607a403          	lw	s0,-1696(a5) # 8000a960 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a961>
	if (slice_time(curr) != 0) {
8000661c:	02041663          	bnez	s0,80006648 <z_reset_time_slice+0x54>
}
80006620:	8000d7b7          	lui	a5,0x8000d
80006624:	00c12703          	lw	a4,12(sp)
80006628:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000662c:	00f747b3          	xor	a5,a4,a5
80006630:	00000713          	li	a4,0
80006634:	02079e63          	bnez	a5,80006670 <z_reset_time_slice+0x7c>
80006638:	01c12083          	lw	ra,28(sp)
8000663c:	01812403          	lw	s0,24(sp)
80006640:	02010113          	addi	sp,sp,32
80006644:	00008067          	ret
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
80006648:	e19fe0ef          	jal	ra,80005460 <sys_clock_elapsed>
8000664c:	00a40433          	add	s0,s0,a0
80006650:	8000b7b7          	lui	a5,0x8000b
80006654:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006658:	0087a823          	sw	s0,16(a5)
		z_set_timeout_expiry(slice_time(curr), false);
8000665c:	00000593          	li	a1,0
80006660:	8000b7b7          	lui	a5,0x8000b
80006664:	9607a503          	lw	a0,-1696(a5) # 8000a960 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a961>
80006668:	1c9010ef          	jal	ra,80008030 <z_set_timeout_expiry>
}
8000666c:	fb5ff06f          	j	80006620 <z_reset_time_slice+0x2c>
80006670:	4a0010ef          	jal	ra,80007b10 <_StackCheckHandler>

80006674 <k_sched_time_slice_set>:
80006674:	00308013          	addi	zero,ra,3
{
80006678:	fe010113          	addi	sp,sp,-32
8000667c:	00112e23          	sw	ra,28(sp)
80006680:	00812c23          	sw	s0,24(sp)
80006684:	00912a23          	sw	s1,20(sp)
80006688:	01212823          	sw	s2,16(sp)
8000668c:	00050413          	mv	s0,a0
80006690:	00058493          	mv	s1,a1
80006694:	8000d7b7          	lui	a5,0x8000d
80006698:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000669c:	00e12623          	sw	a4,12(sp)
800066a0:	00000713          	li	a4,0
	LOCKED(&sched_spinlock) {
800066a4:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800066a8:	30047973          	csrrci	s2,mstatus,8
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
800066ac:	0300006f          	j	800066dc <k_sched_time_slice_set+0x68>
			slice_ticks = MAX(2, slice_ticks);
800066b0:	8000b7b7          	lui	a5,0x8000b
800066b4:	96a7a023          	sw	a0,-1696(a5) # 8000a960 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a961>
		slice_max_prio = prio;
800066b8:	8000b7b7          	lui	a5,0x8000b
800066bc:	9497ae23          	sw	s1,-1700(a5) # 8000a95c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a95d>
		z_reset_time_slice(_current);
800066c0:	8000b7b7          	lui	a5,0x8000b
800066c4:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
800066c8:	0087a503          	lw	a0,8(a5)
800066cc:	f29ff0ef          	jal	ra,800065f4 <z_reset_time_slice>
			  : "r" (key & MSTATUS_IEN)
800066d0:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
800066d4:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
800066d8:	00100793          	li	a5,1
800066dc:	04079663          	bnez	a5,80006728 <k_sched_time_slice_set+0xb4>
		_current_cpu->slice_ticks = 0;
800066e0:	8000b7b7          	lui	a5,0x8000b
800066e4:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
800066e8:	0007a823          	sw	zero,16(a5)
			return (uint32_t)((t * to_hz + off) / from_hz);
800066ec:	01945593          	srli	a1,s0,0x19
800066f0:	00741793          	slli	a5,s0,0x7
800066f4:	3e778513          	addi	a0,a5,999
800066f8:	00f537b3          	sltu	a5,a0,a5
800066fc:	3e800613          	li	a2,1000
80006700:	00000693          	li	a3,0
80006704:	00b785b3          	add	a1,a5,a1
80006708:	addf90ef          	jal	ra,800001e4 <__udivdi3>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
8000670c:	8000b7b7          	lui	a5,0x8000b
80006710:	96a7a023          	sw	a0,-1696(a5) # 8000a960 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a961>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
80006714:	fa8052e3          	blez	s0,800066b8 <k_sched_time_slice_set+0x44>
			slice_ticks = MAX(2, slice_ticks);
80006718:	00200793          	li	a5,2
8000671c:	f8f55ae3          	bge	a0,a5,800066b0 <k_sched_time_slice_set+0x3c>
80006720:	00200513          	li	a0,2
80006724:	f8dff06f          	j	800066b0 <k_sched_time_slice_set+0x3c>
}
80006728:	8000d7b7          	lui	a5,0x8000d
8000672c:	00c12703          	lw	a4,12(sp)
80006730:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006734:	00f747b3          	xor	a5,a4,a5
80006738:	00000713          	li	a4,0
8000673c:	00079e63          	bnez	a5,80006758 <k_sched_time_slice_set+0xe4>
80006740:	01c12083          	lw	ra,28(sp)
80006744:	01812403          	lw	s0,24(sp)
80006748:	01412483          	lw	s1,20(sp)
8000674c:	01012903          	lw	s2,16(sp)
80006750:	02010113          	addi	sp,sp,32
80006754:	00008067          	ret
80006758:	3b8010ef          	jal	ra,80007b10 <_StackCheckHandler>

8000675c <k_sched_lock>:
8000675c:	00308013          	addi	zero,ra,3
{
80006760:	fe010113          	addi	sp,sp,-32
80006764:	00112e23          	sw	ra,28(sp)
80006768:	8000d7b7          	lui	a5,0x8000d
8000676c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006770:	00e12623          	sw	a4,12(sp)
80006774:	00000713          	li	a4,0
	LOCKED(&sched_spinlock) {
80006778:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000677c:	300476f3          	csrrci	a3,mstatus,8
80006780:	0280006f          	j	800067a8 <k_sched_lock+0x4c>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
80006784:	8000b7b7          	lui	a5,0x8000b
80006788:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
8000678c:	0087a703          	lw	a4,8(a5)
80006790:	00f74783          	lbu	a5,15(a4)
80006794:	fff78793          	addi	a5,a5,-1
80006798:	00f707a3          	sb	a5,15(a4)
			  : "r" (key & MSTATUS_IEN)
8000679c:	0086f793          	andi	a5,a3,8
	__asm__ volatile ("csrs mstatus, %0"
800067a0:	3007a073          	csrs	mstatus,a5
800067a4:	00100793          	li	a5,1
800067a8:	fc078ee3          	beqz	a5,80006784 <k_sched_lock+0x28>
}
800067ac:	8000d7b7          	lui	a5,0x8000d
800067b0:	00c12703          	lw	a4,12(sp)
800067b4:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800067b8:	00f747b3          	xor	a5,a4,a5
800067bc:	00000713          	li	a4,0
800067c0:	00079863          	bnez	a5,800067d0 <k_sched_lock+0x74>
800067c4:	01c12083          	lw	ra,28(sp)
800067c8:	02010113          	addi	sp,sp,32
800067cc:	00008067          	ret
800067d0:	340010ef          	jal	ra,80007b10 <_StackCheckHandler>

800067d4 <z_swap_next_thread>:
800067d4:	00308013          	addi	zero,ra,3
{
800067d8:	fe010113          	addi	sp,sp,-32
800067dc:	00112e23          	sw	ra,28(sp)
800067e0:	8000d737          	lui	a4,0x8000d
800067e4:	25072783          	lw	a5,592(a4) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800067e8:	00f12623          	sw	a5,12(sp)
800067ec:	00000793          	li	a5,0
	return _kernel.ready_q.cache;
800067f0:	8000b7b7          	lui	a5,0x8000b
800067f4:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
800067f8:	0187a503          	lw	a0,24(a5)
}
800067fc:	00c12683          	lw	a3,12(sp)
80006800:	25072783          	lw	a5,592(a4)
80006804:	00f6c7b3          	xor	a5,a3,a5
80006808:	00000693          	li	a3,0
8000680c:	00079863          	bnez	a5,8000681c <z_swap_next_thread+0x48>
80006810:	01c12083          	lw	ra,28(sp)
80006814:	02010113          	addi	sp,sp,32
80006818:	00008067          	ret
8000681c:	2f4010ef          	jal	ra,80007b10 <_StackCheckHandler>

80006820 <z_swap_irqlock>:
80006820:	00308013          	addi	zero,ra,3
{
80006824:	fe010113          	addi	sp,sp,-32
80006828:	00112e23          	sw	ra,28(sp)
8000682c:	00812c23          	sw	s0,24(sp)
80006830:	00912a23          	sw	s1,20(sp)
80006834:	01212823          	sw	s2,16(sp)
80006838:	00050413          	mv	s0,a0
8000683c:	8000d7b7          	lui	a5,0x8000d
80006840:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006844:	00e12623          	sw	a4,12(sp)
80006848:	00000713          	li	a4,0
	old_thread = _current;
8000684c:	8000b7b7          	lui	a5,0x8000b
80006850:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006854:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
80006858:	ff500793          	li	a5,-11
8000685c:	06f92c23          	sw	a5,120(s2)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006860:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80006864:	f71ff0ef          	jal	ra,800067d4 <z_swap_next_thread>
	if (new_thread != old_thread) {
80006868:	02a90263          	beq	s2,a0,8000688c <z_swap_irqlock+0x6c>
8000686c:	00050493          	mv	s1,a0
		_current_cpu->current = new_thread;
80006870:	8000b7b7          	lui	a5,0x8000b
80006874:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006878:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
8000687c:	d79ff0ef          	jal	ra,800065f4 <z_reset_time_slice>
80006880:	00090593          	mv	a1,s2
80006884:	07c4a503          	lw	a0,124(s1)
80006888:	9cdfd0ef          	jal	ra,80004254 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
8000688c:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80006890:	30042073          	csrs	mstatus,s0
	return _current->swap_retval;
80006894:	8000b7b7          	lui	a5,0x8000b
80006898:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
8000689c:	0087a783          	lw	a5,8(a5)
800068a0:	0787a503          	lw	a0,120(a5)
}
800068a4:	8000d7b7          	lui	a5,0x8000d
800068a8:	00c12703          	lw	a4,12(sp)
800068ac:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800068b0:	00f747b3          	xor	a5,a4,a5
800068b4:	00000713          	li	a4,0
800068b8:	00079e63          	bnez	a5,800068d4 <z_swap_irqlock+0xb4>
800068bc:	01c12083          	lw	ra,28(sp)
800068c0:	01812403          	lw	s0,24(sp)
800068c4:	01412483          	lw	s1,20(sp)
800068c8:	01012903          	lw	s2,16(sp)
800068cc:	02010113          	addi	sp,sp,32
800068d0:	00008067          	ret
800068d4:	23c010ef          	jal	ra,80007b10 <_StackCheckHandler>

800068d8 <z_reschedule_irqlock>:
800068d8:	00308013          	addi	zero,ra,3
{
800068dc:	fe010113          	addi	sp,sp,-32
800068e0:	00112e23          	sw	ra,28(sp)
800068e4:	8000d7b7          	lui	a5,0x8000d
800068e8:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800068ec:	00e12623          	sw	a4,12(sp)
800068f0:	00000713          	li	a4,0
	return (key & MSTATUS_IEN) != 0;
800068f4:	00857793          	andi	a5,a0,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
800068f8:	00078c63          	beqz	a5,80006910 <z_reschedule_irqlock+0x38>
	bool ret = arch_curr_cpu()->nested != 0U;

	arch_irq_unlock(key);
	return ret;
#else
	return _kernel.cpus[0].nested != 0U;
800068fc:	8000b737          	lui	a4,0x8000b
80006900:	e2072703          	lw	a4,-480(a4) # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006904:	00071663          	bnez	a4,80006910 <z_reschedule_irqlock+0x38>
		z_swap_irqlock(key);
80006908:	f19ff0ef          	jal	ra,80006820 <z_swap_irqlock>
8000690c:	0080006f          	j	80006914 <z_reschedule_irqlock+0x3c>
	__asm__ volatile ("csrs mstatus, %0"
80006910:	3007a073          	csrs	mstatus,a5
}
80006914:	8000d7b7          	lui	a5,0x8000d
80006918:	00c12703          	lw	a4,12(sp)
8000691c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006920:	00f747b3          	xor	a5,a4,a5
80006924:	00000713          	li	a4,0
80006928:	00079863          	bnez	a5,80006938 <z_reschedule_irqlock+0x60>
8000692c:	01c12083          	lw	ra,28(sp)
80006930:	02010113          	addi	sp,sp,32
80006934:	00008067          	ret
80006938:	1d8010ef          	jal	ra,80007b10 <_StackCheckHandler>

8000693c <z_swap>:
8000693c:	00308013          	addi	zero,ra,3
{
80006940:	fe010113          	addi	sp,sp,-32
80006944:	00112e23          	sw	ra,28(sp)
80006948:	00812c23          	sw	s0,24(sp)
8000694c:	00912a23          	sw	s1,20(sp)
80006950:	01212823          	sw	s2,16(sp)
80006954:	00058413          	mv	s0,a1
80006958:	8000d7b7          	lui	a5,0x8000d
8000695c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006960:	00e12623          	sw	a4,12(sp)
80006964:	00000713          	li	a4,0
	old_thread = _current;
80006968:	8000b7b7          	lui	a5,0x8000b
8000696c:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006970:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
80006974:	ff500793          	li	a5,-11
80006978:	06f92c23          	sw	a5,120(s2)
	if (!is_spinlock || lock != &sched_spinlock) {
8000697c:	8000b7b7          	lui	a5,0x8000b
80006980:	e4478793          	addi	a5,a5,-444 # 8000ae44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae45>
80006984:	00a78463          	beq	a5,a0,8000698c <z_swap+0x50>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006988:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
8000698c:	e49ff0ef          	jal	ra,800067d4 <z_swap_next_thread>
80006990:	00050493          	mv	s1,a0
	if (new_thread != old_thread) {
80006994:	02a90063          	beq	s2,a0,800069b4 <z_swap+0x78>
		_current_cpu->current = new_thread;
80006998:	8000b7b7          	lui	a5,0x8000b
8000699c:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
800069a0:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
800069a4:	c51ff0ef          	jal	ra,800065f4 <z_reset_time_slice>
	z_riscv_switch(new, old);
800069a8:	00090593          	mv	a1,s2
800069ac:	07c4a503          	lw	a0,124(s1)
800069b0:	8a5fd0ef          	jal	ra,80004254 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
800069b4:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
800069b8:	30042073          	csrs	mstatus,s0
	return _current->swap_retval;
800069bc:	8000b7b7          	lui	a5,0x8000b
800069c0:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
800069c4:	0087a783          	lw	a5,8(a5)
800069c8:	0787a503          	lw	a0,120(a5)
}
800069cc:	8000d7b7          	lui	a5,0x8000d
800069d0:	00c12703          	lw	a4,12(sp)
800069d4:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800069d8:	00f747b3          	xor	a5,a4,a5
800069dc:	00000713          	li	a4,0
800069e0:	00079e63          	bnez	a5,800069fc <z_swap+0xc0>
800069e4:	01c12083          	lw	ra,28(sp)
800069e8:	01812403          	lw	s0,24(sp)
800069ec:	01412483          	lw	s1,20(sp)
800069f0:	01012903          	lw	s2,16(sp)
800069f4:	02010113          	addi	sp,sp,32
800069f8:	00008067          	ret
800069fc:	114010ef          	jal	ra,80007b10 <_StackCheckHandler>

80006a00 <z_reschedule>:
80006a00:	00308013          	addi	zero,ra,3
{
80006a04:	fe010113          	addi	sp,sp,-32
80006a08:	00112e23          	sw	ra,28(sp)
80006a0c:	8000d7b7          	lui	a5,0x8000d
80006a10:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006a14:	00e12623          	sw	a4,12(sp)
80006a18:	00000713          	li	a4,0
	return (key & MSTATUS_IEN) != 0;
80006a1c:	0085f793          	andi	a5,a1,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
80006a20:	02078663          	beqz	a5,80006a4c <z_reschedule+0x4c>
	return _kernel.cpus[0].nested != 0U;
80006a24:	8000b737          	lui	a4,0x8000b
80006a28:	e2072703          	lw	a4,-480(a4) # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006a2c:	02071063          	bnez	a4,80006a4c <z_reschedule+0x4c>
	new_thread = _kernel.ready_q.cache;
80006a30:	8000b737          	lui	a4,0x8000b
80006a34:	e2070713          	addi	a4,a4,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006a38:	01872683          	lw	a3,24(a4)
	return new_thread != _current;
80006a3c:	00872703          	lw	a4,8(a4)
	if (resched(key.key) && need_swap()) {
80006a40:	00e68663          	beq	a3,a4,80006a4c <z_reschedule+0x4c>
		z_swap(lock, key);
80006a44:	ef9ff0ef          	jal	ra,8000693c <z_swap>
80006a48:	0080006f          	j	80006a50 <z_reschedule+0x50>
	__asm__ volatile ("csrs mstatus, %0"
80006a4c:	3007a073          	csrs	mstatus,a5
}
80006a50:	8000d7b7          	lui	a5,0x8000d
80006a54:	00c12703          	lw	a4,12(sp)
80006a58:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006a5c:	00f747b3          	xor	a5,a4,a5
80006a60:	00000713          	li	a4,0
80006a64:	00079863          	bnez	a5,80006a74 <z_reschedule+0x74>
80006a68:	01c12083          	lw	ra,28(sp)
80006a6c:	02010113          	addi	sp,sp,32
80006a70:	00008067          	ret
80006a74:	09c010ef          	jal	ra,80007b10 <_StackCheckHandler>

80006a78 <z_get_next_switch_handle>:
80006a78:	00308013          	addi	zero,ra,3
{
80006a7c:	fe010113          	addi	sp,sp,-32
80006a80:	00112e23          	sw	ra,28(sp)
80006a84:	8000d737          	lui	a4,0x8000d
80006a88:	25072783          	lw	a5,592(a4) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006a8c:	00f12623          	sw	a5,12(sp)
80006a90:	00000793          	li	a5,0
	z_sched_usage_switch(_kernel.ready_q.cache);
80006a94:	8000b7b7          	lui	a5,0x8000b
80006a98:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006a9c:	0187a683          	lw	a3,24(a5)
	_current->switch_handle = interrupted;
80006aa0:	0087a603          	lw	a2,8(a5)
80006aa4:	06a62e23          	sw	a0,124(a2)
	_current_cpu->current = new_thread;
80006aa8:	00d7a423          	sw	a3,8(a5)
	return _current->switch_handle;
80006aac:	07c6a503          	lw	a0,124(a3)
}
80006ab0:	00c12683          	lw	a3,12(sp)
80006ab4:	25072783          	lw	a5,592(a4)
80006ab8:	00f6c7b3          	xor	a5,a3,a5
80006abc:	00000693          	li	a3,0
80006ac0:	00079863          	bnez	a5,80006ad0 <z_get_next_switch_handle+0x58>
80006ac4:	01c12083          	lw	ra,28(sp)
80006ac8:	02010113          	addi	sp,sp,32
80006acc:	00008067          	ret
80006ad0:	040010ef          	jal	ra,80007b10 <_StackCheckHandler>

80006ad4 <z_priq_dumb_remove>:
80006ad4:	00308013          	addi	zero,ra,3
{
80006ad8:	fe010113          	addi	sp,sp,-32
80006adc:	00112e23          	sw	ra,28(sp)
80006ae0:	8000d7b7          	lui	a5,0x8000d
80006ae4:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006ae8:	00e12623          	sw	a4,12(sp)
80006aec:	00000713          	li	a4,0
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
80006af0:	0045a683          	lw	a3,4(a1)
	sys_dnode_t *const next = node->next;
80006af4:	0005a703          	lw	a4,0(a1)

	prev->next = next;
80006af8:	00e6a023          	sw	a4,0(a3)
	next->prev = prev;
80006afc:	00d72223          	sw	a3,4(a4)
	node->next = NULL;
80006b00:	0005a023          	sw	zero,0(a1)
	node->prev = NULL;
80006b04:	0005a223          	sw	zero,4(a1)
}
80006b08:	00c12703          	lw	a4,12(sp)
80006b0c:	2507a783          	lw	a5,592(a5)
80006b10:	00f747b3          	xor	a5,a4,a5
80006b14:	00000713          	li	a4,0
80006b18:	00079863          	bnez	a5,80006b28 <z_priq_dumb_remove+0x54>
80006b1c:	01c12083          	lw	ra,28(sp)
80006b20:	02010113          	addi	sp,sp,32
80006b24:	00008067          	ret
80006b28:	7e9000ef          	jal	ra,80007b10 <_StackCheckHandler>

80006b2c <unpend_thread_no_timeout>:
80006b2c:	00308013          	addi	zero,ra,3
{
80006b30:	fe010113          	addi	sp,sp,-32
80006b34:	00112e23          	sw	ra,28(sp)
80006b38:	00812c23          	sw	s0,24(sp)
80006b3c:	00912a23          	sw	s1,20(sp)
80006b40:	00050413          	mv	s0,a0
80006b44:	8000d4b7          	lui	s1,0x8000d
80006b48:	2504a783          	lw	a5,592(s1) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006b4c:	00f12623          	sw	a5,12(sp)
80006b50:	00000793          	li	a5,0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
80006b54:	999ff0ef          	jal	ra,800064ec <pended_on_thread>
80006b58:	00040593          	mv	a1,s0
80006b5c:	f79ff0ef          	jal	ra,80006ad4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
80006b60:	00d44783          	lbu	a5,13(s0)
80006b64:	ffd7f793          	andi	a5,a5,-3
80006b68:	00f406a3          	sb	a5,13(s0)
	thread->base.pended_on = NULL;
80006b6c:	00042423          	sw	zero,8(s0)
}
80006b70:	00c12703          	lw	a4,12(sp)
80006b74:	2504a783          	lw	a5,592(s1)
80006b78:	00f747b3          	xor	a5,a4,a5
80006b7c:	00000713          	li	a4,0
80006b80:	00079c63          	bnez	a5,80006b98 <unpend_thread_no_timeout+0x6c>
80006b84:	01c12083          	lw	ra,28(sp)
80006b88:	01812403          	lw	s0,24(sp)
80006b8c:	01412483          	lw	s1,20(sp)
80006b90:	02010113          	addi	sp,sp,32
80006b94:	00008067          	ret
80006b98:	779000ef          	jal	ra,80007b10 <_StackCheckHandler>

80006b9c <z_priq_dumb_best>:
80006b9c:	00308013          	addi	zero,ra,3
{
80006ba0:	fe010113          	addi	sp,sp,-32
80006ba4:	00112e23          	sw	ra,28(sp)
80006ba8:	00050793          	mv	a5,a0
80006bac:	8000d737          	lui	a4,0x8000d
80006bb0:	25072683          	lw	a3,592(a4) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006bb4:	00d12623          	sw	a3,12(sp)
80006bb8:	00000693          	li	a3,0
	return list->head == list;
80006bbc:	00052503          	lw	a0,0(a0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80006bc0:	02a78463          	beq	a5,a0,80006be8 <z_priq_dumb_best+0x4c>
}
80006bc4:	8000d7b7          	lui	a5,0x8000d
80006bc8:	00c12703          	lw	a4,12(sp)
80006bcc:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006bd0:	00f747b3          	xor	a5,a4,a5
80006bd4:	00000713          	li	a4,0
80006bd8:	00079c63          	bnez	a5,80006bf0 <z_priq_dumb_best+0x54>
80006bdc:	01c12083          	lw	ra,28(sp)
80006be0:	02010113          	addi	sp,sp,32
80006be4:	00008067          	ret
	struct k_thread *thread = NULL;
80006be8:	00000513          	li	a0,0
	return thread;
80006bec:	fd9ff06f          	j	80006bc4 <z_priq_dumb_best+0x28>
}
80006bf0:	721000ef          	jal	ra,80007b10 <_StackCheckHandler>

80006bf4 <update_cache>:
80006bf4:	00308013          	addi	zero,ra,3
{
80006bf8:	fe010113          	addi	sp,sp,-32
80006bfc:	00112e23          	sw	ra,28(sp)
80006c00:	00812c23          	sw	s0,24(sp)
80006c04:	00912a23          	sw	s1,20(sp)
80006c08:	00050493          	mv	s1,a0
80006c0c:	8000d7b7          	lui	a5,0x8000d
80006c10:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006c14:	00e12623          	sw	a4,12(sp)
80006c18:	00000713          	li	a4,0
	return _priq_run_best(curr_cpu_runq());
80006c1c:	8000b537          	lui	a0,0x8000b
80006c20:	e3c50513          	addi	a0,a0,-452 # 8000ae3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae3d>
80006c24:	f79ff0ef          	jal	ra,80006b9c <z_priq_dumb_best>
80006c28:	00050413          	mv	s0,a0
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
80006c2c:	02050e63          	beqz	a0,80006c68 <update_cache+0x74>
	if (preempt_ok != 0) {
80006c30:	04049463          	bnez	s1,80006c78 <update_cache+0x84>
	if (z_is_thread_prevented_from_running(_current)) {
80006c34:	8000b7b7          	lui	a5,0x8000b
80006c38:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006c3c:	0087a703          	lw	a4,8(a5)
	uint8_t state = thread->base.thread_state;
80006c40:	00d74783          	lbu	a5,13(a4)
80006c44:	01f7f793          	andi	a5,a5,31
80006c48:	02079863          	bnez	a5,80006c78 <update_cache+0x84>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
80006c4c:	00e75683          	lhu	a3,14(a4)
	if (is_preempt(_current) || is_metairq(thread)) {
80006c50:	07f00793          	li	a5,127
80006c54:	02d7f263          	bgeu	a5,a3,80006c78 <update_cache+0x84>
		_kernel.ready_q.cache = _current;
80006c58:	8000b7b7          	lui	a5,0x8000b
80006c5c:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006c60:	00e7ac23          	sw	a4,24(a5)
80006c64:	0380006f          	j	80006c9c <update_cache+0xa8>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
80006c68:	8000b7b7          	lui	a5,0x8000b
80006c6c:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006c70:	00c7a403          	lw	s0,12(a5)
80006c74:	fbdff06f          	j	80006c30 <update_cache+0x3c>
		if (thread != _current) {
80006c78:	8000b7b7          	lui	a5,0x8000b
80006c7c:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006c80:	0087a783          	lw	a5,8(a5)
80006c84:	00878663          	beq	a5,s0,80006c90 <update_cache+0x9c>
			z_reset_time_slice(thread);
80006c88:	00040513          	mv	a0,s0
80006c8c:	969ff0ef          	jal	ra,800065f4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
80006c90:	8000b7b7          	lui	a5,0x8000b
80006c94:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006c98:	0087ac23          	sw	s0,24(a5)
}
80006c9c:	8000d7b7          	lui	a5,0x8000d
80006ca0:	00c12703          	lw	a4,12(sp)
80006ca4:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006ca8:	00f747b3          	xor	a5,a4,a5
80006cac:	00000713          	li	a4,0
80006cb0:	00079c63          	bnez	a5,80006cc8 <update_cache+0xd4>
80006cb4:	01c12083          	lw	ra,28(sp)
80006cb8:	01812403          	lw	s0,24(sp)
80006cbc:	01412483          	lw	s1,20(sp)
80006cc0:	02010113          	addi	sp,sp,32
80006cc4:	00008067          	ret
80006cc8:	649000ef          	jal	ra,80007b10 <_StackCheckHandler>

80006ccc <move_thread_to_end_of_prio_q>:
80006ccc:	00308013          	addi	zero,ra,3
{
80006cd0:	fe010113          	addi	sp,sp,-32
80006cd4:	00112e23          	sw	ra,28(sp)
80006cd8:	00812c23          	sw	s0,24(sp)
80006cdc:	00912a23          	sw	s1,20(sp)
80006ce0:	00050493          	mv	s1,a0
80006ce4:	8000d7b7          	lui	a5,0x8000d
80006ce8:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006cec:	00e12623          	sw	a4,12(sp)
80006cf0:	00000713          	li	a4,0
	return (thread->base.thread_state & state) != 0U;
80006cf4:	00d54783          	lbu	a5,13(a0)
	if (z_is_thread_queued(thread)) {
80006cf8:	01879713          	slli	a4,a5,0x18
80006cfc:	41875713          	srai	a4,a4,0x18
80006d00:	02074863          	bltz	a4,80006d30 <move_thread_to_end_of_prio_q+0x64>
	thread->base.thread_state |= _THREAD_QUEUED;
80006d04:	00d4c783          	lbu	a5,13(s1)
80006d08:	f807e793          	ori	a5,a5,-128
80006d0c:	00f486a3          	sb	a5,13(s1)
	return list->head == list;
80006d10:	8000b7b7          	lui	a5,0x8000b
80006d14:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006d18:	01c7a403          	lw	s0,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80006d1c:	8000b7b7          	lui	a5,0x8000b
80006d20:	e3c78793          	addi	a5,a5,-452 # 8000ae3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae3d>
80006d24:	04f41263          	bne	s0,a5,80006d68 <move_thread_to_end_of_prio_q+0x9c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80006d28:	00000413          	li	s0,0
80006d2c:	03c0006f          	j	80006d68 <move_thread_to_end_of_prio_q+0x9c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
80006d30:	07f7f793          	andi	a5,a5,127
80006d34:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
80006d38:	00050593          	mv	a1,a0
80006d3c:	8000b537          	lui	a0,0x8000b
80006d40:	e3c50513          	addi	a0,a0,-452 # 8000ae3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae3d>
80006d44:	d91ff0ef          	jal	ra,80006ad4 <z_priq_dumb_remove>
}
80006d48:	fbdff06f          	j	80006d04 <move_thread_to_end_of_prio_q+0x38>
	sys_dnode_t *const prev = successor->prev;
80006d4c:	00442783          	lw	a5,4(s0)
	node->prev = prev;
80006d50:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
80006d54:	0084a023          	sw	s0,0(s1)
	prev->next = node;
80006d58:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
80006d5c:	00942223          	sw	s1,4(s0)
}
80006d60:	05c0006f          	j	80006dbc <move_thread_to_end_of_prio_q+0xf0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80006d64:	00000413          	li	s0,0
80006d68:	02040863          	beqz	s0,80006d98 <move_thread_to_end_of_prio_q+0xcc>
		if (z_sched_prio_cmp(thread, t) > 0) {
80006d6c:	00040593          	mv	a1,s0
80006d70:	00048513          	mv	a0,s1
80006d74:	825ff0ef          	jal	ra,80006598 <z_sched_prio_cmp>
80006d78:	fca04ae3          	bgtz	a0,80006d4c <move_thread_to_end_of_prio_q+0x80>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80006d7c:	fe0406e3          	beqz	s0,80006d68 <move_thread_to_end_of_prio_q+0x9c>
	return (node == list->tail) ? NULL : node->next;
80006d80:	8000b7b7          	lui	a5,0x8000b
80006d84:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006d88:	0207a783          	lw	a5,32(a5)
80006d8c:	fcf40ce3          	beq	s0,a5,80006d64 <move_thread_to_end_of_prio_q+0x98>
80006d90:	00042403          	lw	s0,0(s0)
80006d94:	fd5ff06f          	j	80006d68 <move_thread_to_end_of_prio_q+0x9c>
	sys_dnode_t *const tail = list->tail;
80006d98:	8000b7b7          	lui	a5,0x8000b
80006d9c:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006da0:	0207a683          	lw	a3,32(a5)
	node->next = list;
80006da4:	8000b737          	lui	a4,0x8000b
80006da8:	e3c70713          	addi	a4,a4,-452 # 8000ae3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae3d>
80006dac:	00e4a023          	sw	a4,0(s1)
	node->prev = tail;
80006db0:	00d4a223          	sw	a3,4(s1)
	tail->next = node;
80006db4:	0096a023          	sw	s1,0(a3)
	list->tail = node;
80006db8:	0297a023          	sw	s1,32(a5)
	update_cache(thread == _current);
80006dbc:	8000b7b7          	lui	a5,0x8000b
80006dc0:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006dc4:	0087a503          	lw	a0,8(a5)
80006dc8:	40950533          	sub	a0,a0,s1
80006dcc:	00153513          	seqz	a0,a0
80006dd0:	e25ff0ef          	jal	ra,80006bf4 <update_cache>
}
80006dd4:	8000d7b7          	lui	a5,0x8000d
80006dd8:	00c12703          	lw	a4,12(sp)
80006ddc:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006de0:	00f747b3          	xor	a5,a4,a5
80006de4:	00000713          	li	a4,0
80006de8:	00079c63          	bnez	a5,80006e00 <move_thread_to_end_of_prio_q+0x134>
80006dec:	01c12083          	lw	ra,28(sp)
80006df0:	01812403          	lw	s0,24(sp)
80006df4:	01412483          	lw	s1,20(sp)
80006df8:	02010113          	addi	sp,sp,32
80006dfc:	00008067          	ret
80006e00:	511000ef          	jal	ra,80007b10 <_StackCheckHandler>

80006e04 <slice_expired_locked>:
80006e04:	00308013          	addi	zero,ra,3
{
80006e08:	fe010113          	addi	sp,sp,-32
80006e0c:	00112e23          	sw	ra,28(sp)
80006e10:	00812c23          	sw	s0,24(sp)
80006e14:	00912a23          	sw	s1,20(sp)
80006e18:	00050413          	mv	s0,a0
80006e1c:	8000d7b7          	lui	a5,0x8000d
80006e20:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006e24:	00e12623          	sw	a4,12(sp)
80006e28:	00000713          	li	a4,0
	struct k_thread *curr = _current;
80006e2c:	8000b7b7          	lui	a5,0x8000b
80006e30:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006e34:	0087a483          	lw	s1,8(a5)
	uint8_t state = thread->base.thread_state;
80006e38:	00d4c783          	lbu	a5,13(s1)
	if (!z_is_thread_prevented_from_running(curr)) {
80006e3c:	01f7f793          	andi	a5,a5,31
80006e40:	02078e63          	beqz	a5,80006e7c <slice_expired_locked+0x78>
	z_reset_time_slice(curr);
80006e44:	00048513          	mv	a0,s1
80006e48:	facff0ef          	jal	ra,800065f4 <z_reset_time_slice>
}
80006e4c:	8000d7b7          	lui	a5,0x8000d
80006e50:	00c12703          	lw	a4,12(sp)
80006e54:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006e58:	00f747b3          	xor	a5,a4,a5
80006e5c:	00000713          	li	a4,0
80006e60:	02079463          	bnez	a5,80006e88 <slice_expired_locked+0x84>
80006e64:	00040513          	mv	a0,s0
80006e68:	01c12083          	lw	ra,28(sp)
80006e6c:	01812403          	lw	s0,24(sp)
80006e70:	01412483          	lw	s1,20(sp)
80006e74:	02010113          	addi	sp,sp,32
80006e78:	00008067          	ret
		move_thread_to_end_of_prio_q(curr);
80006e7c:	00048513          	mv	a0,s1
80006e80:	e4dff0ef          	jal	ra,80006ccc <move_thread_to_end_of_prio_q>
80006e84:	fc1ff06f          	j	80006e44 <slice_expired_locked+0x40>
}
80006e88:	489000ef          	jal	ra,80007b10 <_StackCheckHandler>

80006e8c <z_time_slice>:
80006e8c:	00308013          	addi	zero,ra,3
{
80006e90:	fe010113          	addi	sp,sp,-32
80006e94:	00112e23          	sw	ra,28(sp)
80006e98:	00812c23          	sw	s0,24(sp)
80006e9c:	00912a23          	sw	s1,20(sp)
80006ea0:	01212823          	sw	s2,16(sp)
80006ea4:	00050913          	mv	s2,a0
80006ea8:	8000d7b7          	lui	a5,0x8000d
80006eac:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006eb0:	00e12623          	sw	a4,12(sp)
80006eb4:	00000713          	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006eb8:	300474f3          	csrrci	s1,mstatus,8
80006ebc:	00048413          	mv	s0,s1
	if (slice_time(_current) && sliceable(_current)) {
80006ec0:	8000b7b7          	lui	a5,0x8000b
80006ec4:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006ec8:	0087a503          	lw	a0,8(a5)
	int ret = slice_ticks;
80006ecc:	8000b7b7          	lui	a5,0x8000b
80006ed0:	9607a783          	lw	a5,-1696(a5) # 8000a960 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a961>
	if (slice_time(_current) && sliceable(_current)) {
80006ed4:	04078063          	beqz	a5,80006f14 <z_time_slice+0x88>
80006ed8:	d34ff0ef          	jal	ra,8000640c <sliceable>
80006edc:	02050c63          	beqz	a0,80006f14 <z_time_slice+0x88>
		if (ticks >= _current_cpu->slice_ticks) {
80006ee0:	8000b7b7          	lui	a5,0x8000b
80006ee4:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006ee8:	0107a783          	lw	a5,16(a5)
80006eec:	00f95c63          	bge	s2,a5,80006f04 <z_time_slice+0x78>
			_current_cpu->slice_ticks -= ticks;
80006ef0:	8000b737          	lui	a4,0x8000b
80006ef4:	412787b3          	sub	a5,a5,s2
80006ef8:	e2070713          	addi	a4,a4,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006efc:	00f72823          	sw	a5,16(a4)
80006f00:	0200006f          	j	80006f20 <z_time_slice+0x94>
			key = slice_expired_locked(key);
80006f04:	00048513          	mv	a0,s1
80006f08:	efdff0ef          	jal	ra,80006e04 <slice_expired_locked>
80006f0c:	00050413          	mv	s0,a0
80006f10:	0100006f          	j	80006f20 <z_time_slice+0x94>
		_current_cpu->slice_ticks = 0;
80006f14:	8000b7b7          	lui	a5,0x8000b
80006f18:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006f1c:	0007a823          	sw	zero,16(a5)
			  : "r" (key & MSTATUS_IEN)
80006f20:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80006f24:	30042073          	csrs	mstatus,s0
}
80006f28:	8000d7b7          	lui	a5,0x8000d
80006f2c:	00c12703          	lw	a4,12(sp)
80006f30:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006f34:	00f747b3          	xor	a5,a4,a5
80006f38:	00000713          	li	a4,0
80006f3c:	00079e63          	bnez	a5,80006f58 <z_time_slice+0xcc>
80006f40:	01c12083          	lw	ra,28(sp)
80006f44:	01812403          	lw	s0,24(sp)
80006f48:	01412483          	lw	s1,20(sp)
80006f4c:	01012903          	lw	s2,16(sp)
80006f50:	02010113          	addi	sp,sp,32
80006f54:	00008067          	ret
80006f58:	3b9000ef          	jal	ra,80007b10 <_StackCheckHandler>

80006f5c <ready_thread>:
80006f5c:	00308013          	addi	zero,ra,3
{
80006f60:	fe010113          	addi	sp,sp,-32
80006f64:	00112e23          	sw	ra,28(sp)
80006f68:	00812c23          	sw	s0,24(sp)
80006f6c:	00912a23          	sw	s1,20(sp)
80006f70:	01212823          	sw	s2,16(sp)
80006f74:	8000d7b7          	lui	a5,0x8000d
80006f78:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006f7c:	00e12623          	sw	a4,12(sp)
80006f80:	00000713          	li	a4,0
	return (thread->base.thread_state & state) != 0U;
80006f84:	00d54783          	lbu	a5,13(a0)
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
80006f88:	01879713          	slli	a4,a5,0x18
80006f8c:	41875713          	srai	a4,a4,0x18
80006f90:	00074c63          	bltz	a4,80006fa8 <ready_thread+0x4c>
80006f94:	00050413          	mv	s0,a0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
80006f98:	01f7f713          	andi	a4,a5,31
80006f9c:	00071663          	bnez	a4,80006fa8 <ready_thread+0x4c>
	return node->next != NULL;
80006fa0:	01852903          	lw	s2,24(a0)
80006fa4:	02090a63          	beqz	s2,80006fd8 <ready_thread+0x7c>
}
80006fa8:	8000d7b7          	lui	a5,0x8000d
80006fac:	00c12703          	lw	a4,12(sp)
80006fb0:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80006fb4:	00f747b3          	xor	a5,a4,a5
80006fb8:	00000713          	li	a4,0
80006fbc:	0c079063          	bnez	a5,8000707c <ready_thread+0x120>
80006fc0:	01c12083          	lw	ra,28(sp)
80006fc4:	01812403          	lw	s0,24(sp)
80006fc8:	01412483          	lw	s1,20(sp)
80006fcc:	01012903          	lw	s2,16(sp)
80006fd0:	02010113          	addi	sp,sp,32
80006fd4:	00008067          	ret
	thread->base.thread_state |= _THREAD_QUEUED;
80006fd8:	f807e793          	ori	a5,a5,-128
80006fdc:	00f506a3          	sb	a5,13(a0)
	return list->head == list;
80006fe0:	8000b7b7          	lui	a5,0x8000b
80006fe4:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80006fe8:	01c7a483          	lw	s1,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80006fec:	8000b7b7          	lui	a5,0x8000b
80006ff0:	e3c78793          	addi	a5,a5,-452 # 8000ae3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae3d>
80006ff4:	02f49463          	bne	s1,a5,8000701c <ready_thread+0xc0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80006ff8:	00090493          	mv	s1,s2
80006ffc:	0200006f          	j	8000701c <ready_thread+0xc0>
	sys_dnode_t *const prev = successor->prev;
80007000:	0044a783          	lw	a5,4(s1)
	node->prev = prev;
80007004:	00f42223          	sw	a5,4(s0)
	node->next = successor;
80007008:	00942023          	sw	s1,0(s0)
	prev->next = node;
8000700c:	0087a023          	sw	s0,0(a5)
	successor->prev = node;
80007010:	0084a223          	sw	s0,4(s1)
}
80007014:	05c0006f          	j	80007070 <ready_thread+0x114>
80007018:	00090493          	mv	s1,s2
8000701c:	02048863          	beqz	s1,8000704c <ready_thread+0xf0>
		if (z_sched_prio_cmp(thread, t) > 0) {
80007020:	00048593          	mv	a1,s1
80007024:	00040513          	mv	a0,s0
80007028:	d70ff0ef          	jal	ra,80006598 <z_sched_prio_cmp>
8000702c:	fca04ae3          	bgtz	a0,80007000 <ready_thread+0xa4>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80007030:	fe0486e3          	beqz	s1,8000701c <ready_thread+0xc0>
	return (node == list->tail) ? NULL : node->next;
80007034:	8000b7b7          	lui	a5,0x8000b
80007038:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
8000703c:	0207a783          	lw	a5,32(a5)
80007040:	fcf48ce3          	beq	s1,a5,80007018 <ready_thread+0xbc>
80007044:	0004a483          	lw	s1,0(s1)
80007048:	fd5ff06f          	j	8000701c <ready_thread+0xc0>
	sys_dnode_t *const tail = list->tail;
8000704c:	8000b7b7          	lui	a5,0x8000b
80007050:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80007054:	0207a683          	lw	a3,32(a5)
	node->next = list;
80007058:	8000b737          	lui	a4,0x8000b
8000705c:	e3c70713          	addi	a4,a4,-452 # 8000ae3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae3d>
80007060:	00e42023          	sw	a4,0(s0)
	node->prev = tail;
80007064:	00d42223          	sw	a3,4(s0)
	tail->next = node;
80007068:	0086a023          	sw	s0,0(a3)
	list->tail = node;
8000706c:	0287a023          	sw	s0,32(a5)
		update_cache(0);
80007070:	00000513          	li	a0,0
80007074:	b81ff0ef          	jal	ra,80006bf4 <update_cache>
}
80007078:	f31ff06f          	j	80006fa8 <ready_thread+0x4c>
8000707c:	295000ef          	jal	ra,80007b10 <_StackCheckHandler>

80007080 <z_ready_thread>:
80007080:	00308013          	addi	zero,ra,3
{
80007084:	fe010113          	addi	sp,sp,-32
80007088:	00112e23          	sw	ra,28(sp)
8000708c:	00812c23          	sw	s0,24(sp)
80007090:	00912a23          	sw	s1,20(sp)
80007094:	00050413          	mv	s0,a0
80007098:	8000d7b7          	lui	a5,0x8000d
8000709c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800070a0:	00e12623          	sw	a4,12(sp)
800070a4:	00000713          	li	a4,0
	LOCKED(&sched_spinlock) {
800070a8:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800070ac:	300474f3          	csrrci	s1,mstatus,8
800070b0:	0100006f          	j	800070c0 <z_ready_thread+0x40>
			  : "r" (key & MSTATUS_IEN)
800070b4:	0084f793          	andi	a5,s1,8
	__asm__ volatile ("csrs mstatus, %0"
800070b8:	3007a073          	csrs	mstatus,a5
800070bc:	00100793          	li	a5,1
800070c0:	00079e63          	bnez	a5,800070dc <z_ready_thread+0x5c>
		if (!thread_active_elsewhere(thread)) {
800070c4:	00040513          	mv	a0,s0
800070c8:	be0ff0ef          	jal	ra,800064a8 <thread_active_elsewhere>
800070cc:	fe0514e3          	bnez	a0,800070b4 <z_ready_thread+0x34>
			ready_thread(thread);
800070d0:	00040513          	mv	a0,s0
800070d4:	e89ff0ef          	jal	ra,80006f5c <ready_thread>
800070d8:	fddff06f          	j	800070b4 <z_ready_thread+0x34>
}
800070dc:	8000d7b7          	lui	a5,0x8000d
800070e0:	00c12703          	lw	a4,12(sp)
800070e4:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800070e8:	00f747b3          	xor	a5,a4,a5
800070ec:	00000713          	li	a4,0
800070f0:	00079c63          	bnez	a5,80007108 <z_ready_thread+0x88>
800070f4:	01c12083          	lw	ra,28(sp)
800070f8:	01812403          	lw	s0,24(sp)
800070fc:	01412483          	lw	s1,20(sp)
80007100:	02010113          	addi	sp,sp,32
80007104:	00008067          	ret
80007108:	209000ef          	jal	ra,80007b10 <_StackCheckHandler>

8000710c <z_sched_start>:
8000710c:	00308013          	addi	zero,ra,3
{
80007110:	fe010113          	addi	sp,sp,-32
80007114:	00112e23          	sw	ra,28(sp)
80007118:	00812c23          	sw	s0,24(sp)
8000711c:	8000d7b7          	lui	a5,0x8000d
80007120:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007124:	00e12623          	sw	a4,12(sp)
80007128:	00000713          	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000712c:	30047473          	csrrci	s0,mstatus,8
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
80007130:	00d54783          	lbu	a5,13(a0)
	if (z_has_thread_started(thread)) {
80007134:	0047f713          	andi	a4,a5,4
80007138:	02071a63          	bnez	a4,8000716c <z_sched_start+0x60>
	__asm__ volatile ("csrs mstatus, %0"
8000713c:	00847413          	andi	s0,s0,8
80007140:	30042073          	csrs	mstatus,s0
}
80007144:	8000d7b7          	lui	a5,0x8000d
80007148:	00c12703          	lw	a4,12(sp)
8000714c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007150:	00f747b3          	xor	a5,a4,a5
80007154:	00000713          	li	a4,0
80007158:	02079a63          	bnez	a5,8000718c <z_sched_start+0x80>
8000715c:	01c12083          	lw	ra,28(sp)
80007160:	01812403          	lw	s0,24(sp)
80007164:	02010113          	addi	sp,sp,32
80007168:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_PRESTART;
8000716c:	ffb7f793          	andi	a5,a5,-5
80007170:	00f506a3          	sb	a5,13(a0)
	ready_thread(thread);
80007174:	de9ff0ef          	jal	ra,80006f5c <ready_thread>
	z_reschedule(&sched_spinlock, key);
80007178:	00040593          	mv	a1,s0
8000717c:	8000b537          	lui	a0,0x8000b
80007180:	e4450513          	addi	a0,a0,-444 # 8000ae44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae45>
80007184:	87dff0ef          	jal	ra,80006a00 <z_reschedule>
80007188:	fbdff06f          	j	80007144 <z_sched_start+0x38>
}
8000718c:	185000ef          	jal	ra,80007b10 <_StackCheckHandler>

80007190 <z_thread_timeout>:
80007190:	00308013          	addi	zero,ra,3
{
80007194:	fe010113          	addi	sp,sp,-32
80007198:	00112e23          	sw	ra,28(sp)
8000719c:	00812c23          	sw	s0,24(sp)
800071a0:	00912a23          	sw	s1,20(sp)
800071a4:	01212823          	sw	s2,16(sp)
800071a8:	00050413          	mv	s0,a0
800071ac:	8000d7b7          	lui	a5,0x8000d
800071b0:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800071b4:	00e12623          	sw	a4,12(sp)
800071b8:	00000713          	li	a4,0
	struct k_thread *thread = CONTAINER_OF(timeout,
800071bc:	fe850913          	addi	s2,a0,-24
	LOCKED(&sched_spinlock) {
800071c0:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800071c4:	300474f3          	csrrci	s1,mstatus,8
800071c8:	02c0006f          	j	800071f4 <z_thread_timeout+0x64>
800071cc:	ff544783          	lbu	a5,-11(s0)
800071d0:	ffb7f713          	andi	a4,a5,-5
800071d4:	fee40aa3          	sb	a4,-11(s0)
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
800071d8:	feb7f793          	andi	a5,a5,-21
800071dc:	fef40aa3          	sb	a5,-11(s0)
			ready_thread(thread);
800071e0:	00090513          	mv	a0,s2
800071e4:	d79ff0ef          	jal	ra,80006f5c <ready_thread>
			  : "r" (key & MSTATUS_IEN)
800071e8:	0084f793          	andi	a5,s1,8
	__asm__ volatile ("csrs mstatus, %0"
800071ec:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
800071f0:	00100793          	li	a5,1
800071f4:	02079263          	bnez	a5,80007218 <z_thread_timeout+0x88>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
800071f8:	ff544783          	lbu	a5,-11(s0)
		if (!killed) {
800071fc:	0287f793          	andi	a5,a5,40
80007200:	fe0794e3          	bnez	a5,800071e8 <z_thread_timeout+0x58>
			if (thread->base.pended_on != NULL) {
80007204:	ff042783          	lw	a5,-16(s0)
80007208:	fc0782e3          	beqz	a5,800071cc <z_thread_timeout+0x3c>
				unpend_thread_no_timeout(thread);
8000720c:	00090513          	mv	a0,s2
80007210:	91dff0ef          	jal	ra,80006b2c <unpend_thread_no_timeout>
80007214:	fb9ff06f          	j	800071cc <z_thread_timeout+0x3c>
}
80007218:	8000d7b7          	lui	a5,0x8000d
8000721c:	00c12703          	lw	a4,12(sp)
80007220:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007224:	00f747b3          	xor	a5,a4,a5
80007228:	00000713          	li	a4,0
8000722c:	00079e63          	bnez	a5,80007248 <z_thread_timeout+0xb8>
80007230:	01c12083          	lw	ra,28(sp)
80007234:	01812403          	lw	s0,24(sp)
80007238:	01412483          	lw	s1,20(sp)
8000723c:	01012903          	lw	s2,16(sp)
80007240:	02010113          	addi	sp,sp,32
80007244:	00008067          	ret
80007248:	0c9000ef          	jal	ra,80007b10 <_StackCheckHandler>

8000724c <unpend_all>:
8000724c:	00308013          	addi	zero,ra,3
{
80007250:	fe010113          	addi	sp,sp,-32
80007254:	00112e23          	sw	ra,28(sp)
80007258:	00812c23          	sw	s0,24(sp)
8000725c:	00912a23          	sw	s1,20(sp)
80007260:	00050493          	mv	s1,a0
80007264:	8000d7b7          	lui	a5,0x8000d
80007268:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000726c:	00e12623          	sw	a4,12(sp)
80007270:	00000713          	li	a4,0
	return list->head == list;
80007274:	0004a403          	lw	s0,0(s1)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80007278:	02848463          	beq	s1,s0,800072a0 <unpend_all+0x54>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
8000727c:	02040263          	beqz	s0,800072a0 <unpend_all+0x54>
		unpend_thread_no_timeout(thread);
80007280:	00040513          	mv	a0,s0
80007284:	8a9ff0ef          	jal	ra,80006b2c <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
80007288:	01840513          	addi	a0,s0,24
8000728c:	50d000ef          	jal	ra,80007f98 <z_abort_timeout>
80007290:	06042c23          	sw	zero,120(s0)
		ready_thread(thread);
80007294:	00040513          	mv	a0,s0
80007298:	cc5ff0ef          	jal	ra,80006f5c <ready_thread>
8000729c:	fd9ff06f          	j	80007274 <unpend_all+0x28>
}
800072a0:	8000d7b7          	lui	a5,0x8000d
800072a4:	00c12703          	lw	a4,12(sp)
800072a8:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800072ac:	00f747b3          	xor	a5,a4,a5
800072b0:	00000713          	li	a4,0
800072b4:	00079c63          	bnez	a5,800072cc <unpend_all+0x80>
800072b8:	01c12083          	lw	ra,28(sp)
800072bc:	01812403          	lw	s0,24(sp)
800072c0:	01412483          	lw	s1,20(sp)
800072c4:	02010113          	addi	sp,sp,32
800072c8:	00008067          	ret
800072cc:	045000ef          	jal	ra,80007b10 <_StackCheckHandler>

800072d0 <unready_thread>:
800072d0:	00308013          	addi	zero,ra,3
{
800072d4:	fe010113          	addi	sp,sp,-32
800072d8:	00112e23          	sw	ra,28(sp)
800072dc:	00812c23          	sw	s0,24(sp)
800072e0:	00050413          	mv	s0,a0
800072e4:	8000d7b7          	lui	a5,0x8000d
800072e8:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800072ec:	00e12623          	sw	a4,12(sp)
800072f0:	00000713          	li	a4,0
	return (thread->base.thread_state & state) != 0U;
800072f4:	00d54783          	lbu	a5,13(a0)
	if (z_is_thread_queued(thread)) {
800072f8:	01879713          	slli	a4,a5,0x18
800072fc:	41875713          	srai	a4,a4,0x18
80007300:	04074263          	bltz	a4,80007344 <unready_thread+0x74>
	update_cache(thread == _current);
80007304:	8000b7b7          	lui	a5,0x8000b
80007308:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
8000730c:	0087a503          	lw	a0,8(a5)
80007310:	40850533          	sub	a0,a0,s0
80007314:	00153513          	seqz	a0,a0
80007318:	8ddff0ef          	jal	ra,80006bf4 <update_cache>
}
8000731c:	8000d7b7          	lui	a5,0x8000d
80007320:	00c12703          	lw	a4,12(sp)
80007324:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007328:	00f747b3          	xor	a5,a4,a5
8000732c:	00000713          	li	a4,0
80007330:	02079863          	bnez	a5,80007360 <unready_thread+0x90>
80007334:	01c12083          	lw	ra,28(sp)
80007338:	01812403          	lw	s0,24(sp)
8000733c:	02010113          	addi	sp,sp,32
80007340:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_QUEUED;
80007344:	07f7f793          	andi	a5,a5,127
80007348:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
8000734c:	00050593          	mv	a1,a0
80007350:	8000b537          	lui	a0,0x8000b
80007354:	e3c50513          	addi	a0,a0,-452 # 8000ae3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae3d>
80007358:	f7cff0ef          	jal	ra,80006ad4 <z_priq_dumb_remove>
}
8000735c:	fa9ff06f          	j	80007304 <unready_thread+0x34>
}
80007360:	7b0000ef          	jal	ra,80007b10 <_StackCheckHandler>

80007364 <add_to_waitq_locked>:
80007364:	00308013          	addi	zero,ra,3
{
80007368:	fe010113          	addi	sp,sp,-32
8000736c:	00112e23          	sw	ra,28(sp)
80007370:	00812c23          	sw	s0,24(sp)
80007374:	00912a23          	sw	s1,20(sp)
80007378:	01212823          	sw	s2,16(sp)
8000737c:	00050493          	mv	s1,a0
80007380:	00058913          	mv	s2,a1
80007384:	8000d7b7          	lui	a5,0x8000d
80007388:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000738c:	00e12623          	sw	a4,12(sp)
80007390:	00000713          	li	a4,0
	unready_thread(thread);
80007394:	f3dff0ef          	jal	ra,800072d0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
80007398:	00d4c783          	lbu	a5,13(s1)
8000739c:	0027e793          	ori	a5,a5,2
800073a0:	00f486a3          	sb	a5,13(s1)
	if (wait_q != NULL) {
800073a4:	06090863          	beqz	s2,80007414 <add_to_waitq_locked+0xb0>
		thread->base.pended_on = wait_q;
800073a8:	0124a423          	sw	s2,8(s1)
	return list->head == list;
800073ac:	00092403          	lw	s0,0(s2)
	return sys_dlist_is_empty(list) ? NULL : list->head;
800073b0:	02891463          	bne	s2,s0,800073d8 <add_to_waitq_locked+0x74>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800073b4:	00000413          	li	s0,0
800073b8:	0200006f          	j	800073d8 <add_to_waitq_locked+0x74>
	sys_dnode_t *const prev = successor->prev;
800073bc:	00442783          	lw	a5,4(s0)
	node->prev = prev;
800073c0:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
800073c4:	0084a023          	sw	s0,0(s1)
	prev->next = node;
800073c8:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
800073cc:	00942223          	sw	s1,4(s0)
}
800073d0:	0440006f          	j	80007414 <add_to_waitq_locked+0xb0>
800073d4:	00000413          	li	s0,0
800073d8:	02040463          	beqz	s0,80007400 <add_to_waitq_locked+0x9c>
		if (z_sched_prio_cmp(thread, t) > 0) {
800073dc:	00040593          	mv	a1,s0
800073e0:	00048513          	mv	a0,s1
800073e4:	9b4ff0ef          	jal	ra,80006598 <z_sched_prio_cmp>
800073e8:	fca04ae3          	bgtz	a0,800073bc <add_to_waitq_locked+0x58>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
800073ec:	fe0406e3          	beqz	s0,800073d8 <add_to_waitq_locked+0x74>
	return (node == list->tail) ? NULL : node->next;
800073f0:	00492703          	lw	a4,4(s2)
800073f4:	fee400e3          	beq	s0,a4,800073d4 <add_to_waitq_locked+0x70>
800073f8:	00042403          	lw	s0,0(s0)
800073fc:	fddff06f          	j	800073d8 <add_to_waitq_locked+0x74>
	sys_dnode_t *const tail = list->tail;
80007400:	00492783          	lw	a5,4(s2)
	node->next = list;
80007404:	0124a023          	sw	s2,0(s1)
	node->prev = tail;
80007408:	00f4a223          	sw	a5,4(s1)
	tail->next = node;
8000740c:	0097a023          	sw	s1,0(a5)
	list->tail = node;
80007410:	00992223          	sw	s1,4(s2)
}
80007414:	8000d7b7          	lui	a5,0x8000d
80007418:	00c12703          	lw	a4,12(sp)
8000741c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007420:	00f747b3          	xor	a5,a4,a5
80007424:	00000713          	li	a4,0
80007428:	00079e63          	bnez	a5,80007444 <add_to_waitq_locked+0xe0>
8000742c:	01c12083          	lw	ra,28(sp)
80007430:	01812403          	lw	s0,24(sp)
80007434:	01412483          	lw	s1,20(sp)
80007438:	01012903          	lw	s2,16(sp)
8000743c:	02010113          	addi	sp,sp,32
80007440:	00008067          	ret
80007444:	6cc000ef          	jal	ra,80007b10 <_StackCheckHandler>

80007448 <pend>:
80007448:	00308013          	addi	zero,ra,3
{
8000744c:	fd010113          	addi	sp,sp,-48
80007450:	02112623          	sw	ra,44(sp)
80007454:	02812423          	sw	s0,40(sp)
80007458:	02912223          	sw	s1,36(sp)
8000745c:	03212023          	sw	s2,32(sp)
80007460:	01312e23          	sw	s3,28(sp)
80007464:	01412c23          	sw	s4,24(sp)
80007468:	00050413          	mv	s0,a0
8000746c:	00058493          	mv	s1,a1
80007470:	00060a13          	mv	s4,a2
80007474:	00068993          	mv	s3,a3
80007478:	8000d7b7          	lui	a5,0x8000d
8000747c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007480:	00e12623          	sw	a4,12(sp)
80007484:	00000713          	li	a4,0
	LOCKED(&sched_spinlock) {
80007488:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000748c:	30047973          	csrrci	s2,mstatus,8
80007490:	01c0006f          	j	800074ac <pend+0x64>
		add_to_waitq_locked(thread, wait_q);
80007494:	00048593          	mv	a1,s1
80007498:	00040513          	mv	a0,s0
8000749c:	ec9ff0ef          	jal	ra,80007364 <add_to_waitq_locked>
			  : "r" (key & MSTATUS_IEN)
800074a0:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
800074a4:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
800074a8:	00100793          	li	a5,1
800074ac:	fe0784e3          	beqz	a5,80007494 <pend+0x4c>
	add_thread_timeout(thread, timeout);
800074b0:	000a0593          	mv	a1,s4
800074b4:	00098613          	mv	a2,s3
800074b8:	00040513          	mv	a0,s0
800074bc:	874ff0ef          	jal	ra,80006530 <add_thread_timeout>
}
800074c0:	8000d7b7          	lui	a5,0x8000d
800074c4:	00c12703          	lw	a4,12(sp)
800074c8:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800074cc:	00f747b3          	xor	a5,a4,a5
800074d0:	00000713          	li	a4,0
800074d4:	02079263          	bnez	a5,800074f8 <pend+0xb0>
800074d8:	02c12083          	lw	ra,44(sp)
800074dc:	02812403          	lw	s0,40(sp)
800074e0:	02412483          	lw	s1,36(sp)
800074e4:	02012903          	lw	s2,32(sp)
800074e8:	01c12983          	lw	s3,28(sp)
800074ec:	01812a03          	lw	s4,24(sp)
800074f0:	03010113          	addi	sp,sp,48
800074f4:	00008067          	ret
800074f8:	618000ef          	jal	ra,80007b10 <_StackCheckHandler>

800074fc <z_pend_curr>:
800074fc:	00308013          	addi	zero,ra,3
{
80007500:	fe010113          	addi	sp,sp,-32
80007504:	00112e23          	sw	ra,28(sp)
80007508:	00812c23          	sw	s0,24(sp)
8000750c:	00912a23          	sw	s1,20(sp)
80007510:	01212823          	sw	s2,16(sp)
80007514:	00050413          	mv	s0,a0
80007518:	00058493          	mv	s1,a1
8000751c:	00060593          	mv	a1,a2
80007520:	00068613          	mv	a2,a3
80007524:	00070693          	mv	a3,a4
80007528:	8000d937          	lui	s2,0x8000d
8000752c:	25092783          	lw	a5,592(s2) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007530:	00f12623          	sw	a5,12(sp)
80007534:	00000793          	li	a5,0
	pend(_current, wait_q, timeout);
80007538:	8000b7b7          	lui	a5,0x8000b
8000753c:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80007540:	0087a503          	lw	a0,8(a5)
80007544:	f05ff0ef          	jal	ra,80007448 <pend>
	return z_swap(lock, key);
80007548:	00048593          	mv	a1,s1
8000754c:	00040513          	mv	a0,s0
80007550:	becff0ef          	jal	ra,8000693c <z_swap>
}
80007554:	00c12703          	lw	a4,12(sp)
80007558:	25092783          	lw	a5,592(s2)
8000755c:	00f747b3          	xor	a5,a4,a5
80007560:	00000713          	li	a4,0
80007564:	00079e63          	bnez	a5,80007580 <z_pend_curr+0x84>
80007568:	01c12083          	lw	ra,28(sp)
8000756c:	01812403          	lw	s0,24(sp)
80007570:	01412483          	lw	s1,20(sp)
80007574:	01012903          	lw	s2,16(sp)
80007578:	02010113          	addi	sp,sp,32
8000757c:	00008067          	ret
80007580:	590000ef          	jal	ra,80007b10 <_StackCheckHandler>

80007584 <z_set_prio>:
80007584:	00308013          	addi	zero,ra,3
{
80007588:	fd010113          	addi	sp,sp,-48
8000758c:	02112623          	sw	ra,44(sp)
80007590:	02812423          	sw	s0,40(sp)
80007594:	02912223          	sw	s1,36(sp)
80007598:	03212023          	sw	s2,32(sp)
8000759c:	01312e23          	sw	s3,28(sp)
800075a0:	01412c23          	sw	s4,24(sp)
800075a4:	01512a23          	sw	s5,20(sp)
800075a8:	00050493          	mv	s1,a0
800075ac:	00058913          	mv	s2,a1
800075b0:	8000d7b7          	lui	a5,0x8000d
800075b4:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800075b8:	00e12623          	sw	a4,12(sp)
800075bc:	00000713          	li	a4,0
	LOCKED(&sched_spinlock) {
800075c0:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800075c4:	300479f3          	csrrci	s3,mstatus,8
	bool need_sched = 0;
800075c8:	00000513          	li	a0,0
800075cc:	0980006f          	j	80007664 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
800075d0:	00442783          	lw	a5,4(s0)
	node->prev = prev;
800075d4:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
800075d8:	0084a023          	sw	s0,0(s1)
	prev->next = node;
800075dc:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
800075e0:	00942223          	sw	s1,4(s0)
}
800075e4:	05c0006f          	j	80007640 <z_set_prio+0xbc>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800075e8:	000a0413          	mv	s0,s4
800075ec:	02040863          	beqz	s0,8000761c <z_set_prio+0x98>
		if (z_sched_prio_cmp(thread, t) > 0) {
800075f0:	00040593          	mv	a1,s0
800075f4:	00048513          	mv	a0,s1
800075f8:	fa1fe0ef          	jal	ra,80006598 <z_sched_prio_cmp>
800075fc:	fca04ae3          	bgtz	a0,800075d0 <z_set_prio+0x4c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80007600:	fe0406e3          	beqz	s0,800075ec <z_set_prio+0x68>
	return (node == list->tail) ? NULL : node->next;
80007604:	8000b7b7          	lui	a5,0x8000b
80007608:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
8000760c:	0207a783          	lw	a5,32(a5)
80007610:	fcf40ce3          	beq	s0,a5,800075e8 <z_set_prio+0x64>
80007614:	00042403          	lw	s0,0(s0)
80007618:	fd5ff06f          	j	800075ec <z_set_prio+0x68>
	sys_dnode_t *const tail = list->tail;
8000761c:	8000b7b7          	lui	a5,0x8000b
80007620:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80007624:	0207a683          	lw	a3,32(a5)
	node->next = list;
80007628:	8000b737          	lui	a4,0x8000b
8000762c:	e3c70713          	addi	a4,a4,-452 # 8000ae3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae3d>
80007630:	00e4a023          	sw	a4,0(s1)
	node->prev = tail;
80007634:	00d4a223          	sw	a3,4(s1)
	tail->next = node;
80007638:	0096a023          	sw	s1,0(a3)
	list->tail = node;
8000763c:	0297a023          	sw	s1,32(a5)
			update_cache(1);
80007640:	00100513          	li	a0,1
80007644:	db0ff0ef          	jal	ra,80006bf4 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
80007648:	00100513          	li	a0,1
8000764c:	00c0006f          	j	80007658 <z_set_prio+0xd4>
			thread->base.prio = prio;
80007650:	01248723          	sb	s2,14(s1)
80007654:	00000513          	li	a0,0
			  : "r" (key & MSTATUS_IEN)
80007658:	0089f793          	andi	a5,s3,8
	__asm__ volatile ("csrs mstatus, %0"
8000765c:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80007660:	00100793          	li	a5,1
80007664:	04079e63          	bnez	a5,800076c0 <z_set_prio+0x13c>
	uint8_t state = thread->base.thread_state;
80007668:	00d4c783          	lbu	a5,13(s1)
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
8000766c:	01f7f713          	andi	a4,a5,31
80007670:	fe0710e3          	bnez	a4,80007650 <z_set_prio+0xcc>
	return node->next != NULL;
80007674:	0184aa03          	lw	s4,24(s1)
80007678:	fc0a1ce3          	bnez	s4,80007650 <z_set_prio+0xcc>
	thread->base.thread_state &= ~_THREAD_QUEUED;
8000767c:	07f7f793          	andi	a5,a5,127
80007680:	00f486a3          	sb	a5,13(s1)
	_priq_run_remove(thread_runq(thread), thread);
80007684:	00048593          	mv	a1,s1
80007688:	8000bab7          	lui	s5,0x8000b
8000768c:	e3ca8513          	addi	a0,s5,-452 # 8000ae3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae3d>
80007690:	c44ff0ef          	jal	ra,80006ad4 <z_priq_dumb_remove>
				thread->base.prio = prio;
80007694:	01248723          	sb	s2,14(s1)
	thread->base.thread_state |= _THREAD_QUEUED;
80007698:	00d4c783          	lbu	a5,13(s1)
8000769c:	f807e793          	ori	a5,a5,-128
800076a0:	00f486a3          	sb	a5,13(s1)
	return list->head == list;
800076a4:	8000b7b7          	lui	a5,0x8000b
800076a8:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
800076ac:	01c7a403          	lw	s0,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
800076b0:	e3ca8a93          	addi	s5,s5,-452
800076b4:	f3541ce3          	bne	s0,s5,800075ec <z_set_prio+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800076b8:	000a0413          	mv	s0,s4
800076bc:	f31ff06f          	j	800075ec <z_set_prio+0x68>
}
800076c0:	8000d7b7          	lui	a5,0x8000d
800076c4:	00c12703          	lw	a4,12(sp)
800076c8:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800076cc:	00f747b3          	xor	a5,a4,a5
800076d0:	00000713          	li	a4,0
800076d4:	02079463          	bnez	a5,800076fc <z_set_prio+0x178>
800076d8:	02c12083          	lw	ra,44(sp)
800076dc:	02812403          	lw	s0,40(sp)
800076e0:	02412483          	lw	s1,36(sp)
800076e4:	02012903          	lw	s2,32(sp)
800076e8:	01c12983          	lw	s3,28(sp)
800076ec:	01812a03          	lw	s4,24(sp)
800076f0:	01412a83          	lw	s5,20(sp)
800076f4:	03010113          	addi	sp,sp,48
800076f8:	00008067          	ret
800076fc:	414000ef          	jal	ra,80007b10 <_StackCheckHandler>

80007700 <k_sched_unlock>:
80007700:	00308013          	addi	zero,ra,3
{
80007704:	fe010113          	addi	sp,sp,-32
80007708:	00112e23          	sw	ra,28(sp)
8000770c:	00812c23          	sw	s0,24(sp)
80007710:	8000d7b7          	lui	a5,0x8000d
80007714:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007718:	00e12623          	sw	a4,12(sp)
8000771c:	00000713          	li	a4,0
	LOCKED(&sched_spinlock) {
80007720:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007724:	30047473          	csrrci	s0,mstatus,8
80007728:	0300006f          	j	80007758 <k_sched_unlock+0x58>
		++_current->base.sched_locked;
8000772c:	8000b7b7          	lui	a5,0x8000b
80007730:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80007734:	0087a703          	lw	a4,8(a5)
80007738:	00f74783          	lbu	a5,15(a4)
8000773c:	00178793          	addi	a5,a5,1
80007740:	00f707a3          	sb	a5,15(a4)
		update_cache(0);
80007744:	00000513          	li	a0,0
80007748:	cacff0ef          	jal	ra,80006bf4 <update_cache>
			  : "r" (key & MSTATUS_IEN)
8000774c:	00847793          	andi	a5,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80007750:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80007754:	00100793          	li	a5,1
80007758:	fc078ae3          	beqz	a5,8000772c <k_sched_unlock+0x2c>
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000775c:	30047573          	csrrci	a0,mstatus,8
	(void) z_reschedule_irqlock(arch_irq_lock());
80007760:	978ff0ef          	jal	ra,800068d8 <z_reschedule_irqlock>
}
80007764:	8000d7b7          	lui	a5,0x8000d
80007768:	00c12703          	lw	a4,12(sp)
8000776c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007770:	00f747b3          	xor	a5,a4,a5
80007774:	00000713          	li	a4,0
80007778:	00079a63          	bnez	a5,8000778c <k_sched_unlock+0x8c>
8000777c:	01c12083          	lw	ra,28(sp)
80007780:	01812403          	lw	s0,24(sp)
80007784:	02010113          	addi	sp,sp,32
80007788:	00008067          	ret
8000778c:	384000ef          	jal	ra,80007b10 <_StackCheckHandler>

80007790 <end_thread>:
80007790:	00308013          	addi	zero,ra,3
{
80007794:	fe010113          	addi	sp,sp,-32
80007798:	00112e23          	sw	ra,28(sp)
8000779c:	00812c23          	sw	s0,24(sp)
800077a0:	8000d7b7          	lui	a5,0x8000d
800077a4:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800077a8:	00e12623          	sw	a4,12(sp)
800077ac:	00000713          	li	a4,0
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
800077b0:	00d54783          	lbu	a5,13(a0)
800077b4:	0087f713          	andi	a4,a5,8
800077b8:	04071863          	bnez	a4,80007808 <end_thread+0x78>
800077bc:	00050413          	mv	s0,a0
		thread->base.thread_state |= _THREAD_DEAD;
800077c0:	0087e713          	ori	a4,a5,8
800077c4:	00e506a3          	sb	a4,13(a0)
		thread->base.thread_state &= ~_THREAD_ABORTING;
800077c8:	fdf7f713          	andi	a4,a5,-33
800077cc:	00876713          	ori	a4,a4,8
800077d0:	00e506a3          	sb	a4,13(a0)
		if (z_is_thread_queued(thread)) {
800077d4:	01871713          	slli	a4,a4,0x18
800077d8:	41875713          	srai	a4,a4,0x18
800077dc:	04074a63          	bltz	a4,80007830 <end_thread+0xa0>
		if (thread->base.pended_on != NULL) {
800077e0:	00842783          	lw	a5,8(s0)
800077e4:	00078663          	beqz	a5,800077f0 <end_thread+0x60>
			unpend_thread_no_timeout(thread);
800077e8:	00040513          	mv	a0,s0
800077ec:	b40ff0ef          	jal	ra,80006b2c <unpend_thread_no_timeout>
800077f0:	01840513          	addi	a0,s0,24
800077f4:	7a4000ef          	jal	ra,80007f98 <z_abort_timeout>
		unpend_all(&thread->join_queue);
800077f8:	06c40513          	addi	a0,s0,108
800077fc:	a51ff0ef          	jal	ra,8000724c <unpend_all>
		update_cache(1);
80007800:	00100513          	li	a0,1
80007804:	bf0ff0ef          	jal	ra,80006bf4 <update_cache>
}
80007808:	8000d7b7          	lui	a5,0x8000d
8000780c:	00c12703          	lw	a4,12(sp)
80007810:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007814:	00f747b3          	xor	a5,a4,a5
80007818:	00000713          	li	a4,0
8000781c:	02079a63          	bnez	a5,80007850 <end_thread+0xc0>
80007820:	01c12083          	lw	ra,28(sp)
80007824:	01812403          	lw	s0,24(sp)
80007828:	02010113          	addi	sp,sp,32
8000782c:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_QUEUED;
80007830:	05f7f793          	andi	a5,a5,95
80007834:	0087e793          	ori	a5,a5,8
80007838:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
8000783c:	00050593          	mv	a1,a0
80007840:	8000b537          	lui	a0,0x8000b
80007844:	e3c50513          	addi	a0,a0,-452 # 8000ae3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae3d>
80007848:	a8cff0ef          	jal	ra,80006ad4 <z_priq_dumb_remove>
}
8000784c:	f95ff06f          	j	800077e0 <end_thread+0x50>
}
80007850:	2c0000ef          	jal	ra,80007b10 <_StackCheckHandler>

80007854 <z_unpend_first_thread>:
80007854:	00308013          	addi	zero,ra,3
{
80007858:	fe010113          	addi	sp,sp,-32
8000785c:	00112e23          	sw	ra,28(sp)
80007860:	00812c23          	sw	s0,24(sp)
80007864:	00912a23          	sw	s1,20(sp)
80007868:	01212823          	sw	s2,16(sp)
8000786c:	00050493          	mv	s1,a0
80007870:	8000d7b7          	lui	a5,0x8000d
80007874:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007878:	00e12623          	sw	a4,12(sp)
8000787c:	00000713          	li	a4,0
	LOCKED(&sched_spinlock) {
80007880:	00000793          	li	a5,0
80007884:	30047973          	csrrci	s2,mstatus,8
	struct k_thread *thread = NULL;
80007888:	00000413          	li	s0,0
8000788c:	0100006f          	j	8000789c <z_unpend_first_thread+0x48>
			  : "r" (key & MSTATUS_IEN)
80007890:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80007894:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80007898:	00100793          	li	a5,1
8000789c:	02079263          	bnez	a5,800078c0 <z_unpend_first_thread+0x6c>
		thread = _priq_wait_best(&wait_q->waitq);
800078a0:	00048513          	mv	a0,s1
800078a4:	af8ff0ef          	jal	ra,80006b9c <z_priq_dumb_best>
800078a8:	00050413          	mv	s0,a0
		if (thread != NULL) {
800078ac:	fe0502e3          	beqz	a0,80007890 <z_unpend_first_thread+0x3c>
			unpend_thread_no_timeout(thread);
800078b0:	a7cff0ef          	jal	ra,80006b2c <unpend_thread_no_timeout>
800078b4:	01840513          	addi	a0,s0,24
800078b8:	6e0000ef          	jal	ra,80007f98 <z_abort_timeout>
800078bc:	fd5ff06f          	j	80007890 <z_unpend_first_thread+0x3c>
}
800078c0:	8000d7b7          	lui	a5,0x8000d
800078c4:	00c12703          	lw	a4,12(sp)
800078c8:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800078cc:	00f747b3          	xor	a5,a4,a5
800078d0:	00000713          	li	a4,0
800078d4:	02079063          	bnez	a5,800078f4 <z_unpend_first_thread+0xa0>
800078d8:	00040513          	mv	a0,s0
800078dc:	01c12083          	lw	ra,28(sp)
800078e0:	01812403          	lw	s0,24(sp)
800078e4:	01412483          	lw	s1,20(sp)
800078e8:	01012903          	lw	s2,16(sp)
800078ec:	02010113          	addi	sp,sp,32
800078f0:	00008067          	ret
800078f4:	21c000ef          	jal	ra,80007b10 <_StackCheckHandler>

800078f8 <init_ready_q>:
800078f8:	00308013          	addi	zero,ra,3
{
800078fc:	fe010113          	addi	sp,sp,-32
80007900:	00112e23          	sw	ra,28(sp)
80007904:	8000d7b7          	lui	a5,0x8000d
80007908:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000790c:	00e12623          	sw	a4,12(sp)
80007910:	00000713          	li	a4,0
	sys_dlist_init(&rq->runq);
80007914:	00450713          	addi	a4,a0,4
	list->head = (sys_dnode_t *)list;
80007918:	00e52223          	sw	a4,4(a0)
	list->tail = (sys_dnode_t *)list;
8000791c:	00e52423          	sw	a4,8(a0)
}
80007920:	00c12703          	lw	a4,12(sp)
80007924:	2507a783          	lw	a5,592(a5)
80007928:	00f747b3          	xor	a5,a4,a5
8000792c:	00000713          	li	a4,0
80007930:	00079863          	bnez	a5,80007940 <init_ready_q+0x48>
80007934:	01c12083          	lw	ra,28(sp)
80007938:	02010113          	addi	sp,sp,32
8000793c:	00008067          	ret
80007940:	1d0000ef          	jal	ra,80007b10 <_StackCheckHandler>

80007944 <z_sched_init>:
80007944:	00308013          	addi	zero,ra,3
{
80007948:	fe010113          	addi	sp,sp,-32
8000794c:	00112e23          	sw	ra,28(sp)
80007950:	00812c23          	sw	s0,24(sp)
80007954:	8000d437          	lui	s0,0x8000d
80007958:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000795c:	00f12623          	sw	a5,12(sp)
80007960:	00000793          	li	a5,0
	init_ready_q(&_kernel.ready_q);
80007964:	8000b537          	lui	a0,0x8000b
80007968:	e3850513          	addi	a0,a0,-456 # 8000ae38 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae39>
8000796c:	f8dff0ef          	jal	ra,800078f8 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
80007970:	00000593          	li	a1,0
80007974:	00000513          	li	a0,0
80007978:	cfdfe0ef          	jal	ra,80006674 <k_sched_time_slice_set>
}
8000797c:	00c12703          	lw	a4,12(sp)
80007980:	25042783          	lw	a5,592(s0)
80007984:	00f747b3          	xor	a5,a4,a5
80007988:	00000713          	li	a4,0
8000798c:	00079a63          	bnez	a5,800079a0 <z_sched_init+0x5c>
80007990:	01c12083          	lw	ra,28(sp)
80007994:	01812403          	lw	s0,24(sp)
80007998:	02010113          	addi	sp,sp,32
8000799c:	00008067          	ret
800079a0:	170000ef          	jal	ra,80007b10 <_StackCheckHandler>

800079a4 <z_impl_z_current_get>:
800079a4:	00308013          	addi	zero,ra,3
{
800079a8:	fe010113          	addi	sp,sp,-32
800079ac:	00112e23          	sw	ra,28(sp)
800079b0:	8000d737          	lui	a4,0x8000d
800079b4:	25072783          	lw	a5,592(a4) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800079b8:	00f12623          	sw	a5,12(sp)
800079bc:	00000793          	li	a5,0
	k_tid_t ret = _current_cpu->current;
800079c0:	8000b7b7          	lui	a5,0x8000b
800079c4:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
800079c8:	0087a503          	lw	a0,8(a5)
}
800079cc:	00c12683          	lw	a3,12(sp)
800079d0:	25072783          	lw	a5,592(a4)
800079d4:	00f6c7b3          	xor	a5,a3,a5
800079d8:	00000693          	li	a3,0
800079dc:	00079863          	bnez	a5,800079ec <z_impl_z_current_get+0x48>
800079e0:	01c12083          	lw	ra,28(sp)
800079e4:	02010113          	addi	sp,sp,32
800079e8:	00008067          	ret
800079ec:	124000ef          	jal	ra,80007b10 <_StackCheckHandler>

800079f0 <z_thread_abort>:
800079f0:	00308013          	addi	zero,ra,3
{
800079f4:	fe010113          	addi	sp,sp,-32
800079f8:	00112e23          	sw	ra,28(sp)
800079fc:	00812c23          	sw	s0,24(sp)
80007a00:	00912a23          	sw	s1,20(sp)
80007a04:	8000d7b7          	lui	a5,0x8000d
80007a08:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007a0c:	00e12623          	sw	a4,12(sp)
80007a10:	00000713          	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007a14:	300474f3          	csrrci	s1,mstatus,8
	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
80007a18:	00c54783          	lbu	a5,12(a0)
80007a1c:	0017f793          	andi	a5,a5,1
80007a20:	02079063          	bnez	a5,80007a40 <z_thread_abort+0x50>
80007a24:	00050413          	mv	s0,a0
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
80007a28:	00d54783          	lbu	a5,13(a0)
80007a2c:	0087f793          	andi	a5,a5,8
80007a30:	04078863          	beqz	a5,80007a80 <z_thread_abort+0x90>
	__asm__ volatile ("csrs mstatus, %0"
80007a34:	0084f493          	andi	s1,s1,8
80007a38:	3004a073          	csrs	mstatus,s1
		return;
80007a3c:	0180006f          	j	80007a54 <z_thread_abort+0x64>
80007a40:	0084f493          	andi	s1,s1,8
80007a44:	3004a073          	csrs	mstatus,s1
	register unsigned long a0 __asm__ ("a0") = arg1;
80007a48:	00400513          	li	a0,4
	register unsigned long t0 __asm__ ("t0") = call_id;
80007a4c:	00000293          	li	t0,0
	__asm__ volatile ("ecall"
80007a50:	00000073          	ecall
}
80007a54:	8000d7b7          	lui	a5,0x8000d
80007a58:	00c12703          	lw	a4,12(sp)
80007a5c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007a60:	00f747b3          	xor	a5,a4,a5
80007a64:	00000713          	li	a4,0
80007a68:	04079c63          	bnez	a5,80007ac0 <z_thread_abort+0xd0>
80007a6c:	01c12083          	lw	ra,28(sp)
80007a70:	01812403          	lw	s0,24(sp)
80007a74:	01412483          	lw	s1,20(sp)
80007a78:	02010113          	addi	sp,sp,32
80007a7c:	00008067          	ret
	end_thread(thread);
80007a80:	d11ff0ef          	jal	ra,80007790 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
80007a84:	8000b7b7          	lui	a5,0x8000b
80007a88:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80007a8c:	0087a783          	lw	a5,8(a5)
80007a90:	00878863          	beq	a5,s0,80007aa0 <z_thread_abort+0xb0>
80007a94:	0084f493          	andi	s1,s1,8
80007a98:	3004a073          	csrs	mstatus,s1
80007a9c:	fb9ff06f          	j	80007a54 <z_thread_abort+0x64>
80007aa0:	8000b7b7          	lui	a5,0x8000b
80007aa4:	e207a783          	lw	a5,-480(a5) # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80007aa8:	fe0796e3          	bnez	a5,80007a94 <z_thread_abort+0xa4>
		z_swap(&sched_spinlock, key);
80007aac:	00048593          	mv	a1,s1
80007ab0:	8000b537          	lui	a0,0x8000b
80007ab4:	e4450513          	addi	a0,a0,-444 # 8000ae44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae45>
80007ab8:	e85fe0ef          	jal	ra,8000693c <z_swap>
80007abc:	fd9ff06f          	j	80007a94 <z_thread_abort+0xa4>
}
80007ac0:	050000ef          	jal	ra,80007b10 <_StackCheckHandler>

80007ac4 <z_impl_k_thread_abort>:
80007ac4:	00308013          	addi	zero,ra,3
{
80007ac8:	fe010113          	addi	sp,sp,-32
80007acc:	00112e23          	sw	ra,28(sp)
80007ad0:	00812c23          	sw	s0,24(sp)
80007ad4:	8000d437          	lui	s0,0x8000d
80007ad8:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007adc:	00f12623          	sw	a5,12(sp)
80007ae0:	00000793          	li	a5,0
	z_thread_abort(thread);
80007ae4:	f0dff0ef          	jal	ra,800079f0 <z_thread_abort>
}
80007ae8:	00c12703          	lw	a4,12(sp)
80007aec:	25042783          	lw	a5,592(s0)
80007af0:	00f747b3          	xor	a5,a4,a5
80007af4:	00000713          	li	a4,0
80007af8:	00079a63          	bnez	a5,80007b0c <z_impl_k_thread_abort+0x48>
80007afc:	01c12083          	lw	ra,28(sp)
80007b00:	01812403          	lw	s0,24(sp)
80007b04:	02010113          	addi	sp,sp,32
80007b08:	00008067          	ret
80007b0c:	004000ef          	jal	ra,80007b10 <_StackCheckHandler>

80007b10 <_StackCheckHandler>:
80007b10:	00308013          	addi	zero,ra,3
{
80007b14:	ff010113          	addi	sp,sp,-16
80007b18:	8000d7b7          	lui	a5,0x8000d
80007b1c:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007b20:	00e12623          	sw	a4,12(sp)
80007b24:	00000713          	li	a4,0
	register unsigned long a0 __asm__ ("a0") = arg1;
80007b28:	00200513          	li	a0,2
	register unsigned long t0 __asm__ ("t0") = call_id;
80007b2c:	00000293          	li	t0,0
	__asm__ volatile ("ecall"
80007b30:	00000073          	ecall

80007b34 <first>:
80007b34:	00308013          	addi	zero,ra,3
{
80007b38:	fe010113          	addi	sp,sp,-32
80007b3c:	00112e23          	sw	ra,28(sp)
80007b40:	8000d7b7          	lui	a5,0x8000d
80007b44:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007b48:	00e12623          	sw	a4,12(sp)
80007b4c:	00000713          	li	a4,0
	return list->head == list;
80007b50:	82418793          	addi	a5,gp,-2012 # 8000d90c <timeout_list>
80007b54:	0007a503          	lw	a0,0(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80007b58:	02f50463          	beq	a0,a5,80007b80 <first+0x4c>
}
80007b5c:	8000d7b7          	lui	a5,0x8000d
80007b60:	00c12703          	lw	a4,12(sp)
80007b64:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007b68:	00f747b3          	xor	a5,a4,a5
80007b6c:	00000713          	li	a4,0
80007b70:	00079c63          	bnez	a5,80007b88 <first+0x54>
80007b74:	01c12083          	lw	ra,28(sp)
80007b78:	02010113          	addi	sp,sp,32
80007b7c:	00008067          	ret
80007b80:	00000513          	li	a0,0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
80007b84:	fd9ff06f          	j	80007b5c <first+0x28>
}
80007b88:	f89ff0ef          	jal	ra,80007b10 <_StackCheckHandler>

80007b8c <next>:
80007b8c:	00308013          	addi	zero,ra,3
{
80007b90:	fe010113          	addi	sp,sp,-32
80007b94:	00112e23          	sw	ra,28(sp)
80007b98:	8000d737          	lui	a4,0x8000d
80007b9c:	25072683          	lw	a3,592(a4) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007ba0:	00d12623          	sw	a3,12(sp)
80007ba4:	00000693          	li	a3,0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80007ba8:	00050a63          	beqz	a0,80007bbc <next+0x30>
	return (node == list->tail) ? NULL : node->next;
80007bac:	82418713          	addi	a4,gp,-2012 # 8000d90c <timeout_list>
80007bb0:	00472703          	lw	a4,4(a4)
80007bb4:	02e50663          	beq	a0,a4,80007be0 <next+0x54>
80007bb8:	00052503          	lw	a0,0(a0)
}
80007bbc:	8000d7b7          	lui	a5,0x8000d
80007bc0:	00c12703          	lw	a4,12(sp)
80007bc4:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007bc8:	00f747b3          	xor	a5,a4,a5
80007bcc:	00000713          	li	a4,0
80007bd0:	00079c63          	bnez	a5,80007be8 <next+0x5c>
80007bd4:	01c12083          	lw	ra,28(sp)
80007bd8:	02010113          	addi	sp,sp,32
80007bdc:	00008067          	ret
80007be0:	00000513          	li	a0,0
	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
80007be4:	fd9ff06f          	j	80007bbc <next+0x30>
}
80007be8:	f29ff0ef          	jal	ra,80007b10 <_StackCheckHandler>

80007bec <remove_timeout>:
80007bec:	00308013          	addi	zero,ra,3
{
80007bf0:	fe010113          	addi	sp,sp,-32
80007bf4:	00112e23          	sw	ra,28(sp)
80007bf8:	00812c23          	sw	s0,24(sp)
80007bfc:	00050413          	mv	s0,a0
80007c00:	8000d7b7          	lui	a5,0x8000d
80007c04:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007c08:	00e12623          	sw	a4,12(sp)
80007c0c:	00000713          	li	a4,0
	if (next(t) != NULL) {
80007c10:	f7dff0ef          	jal	ra,80007b8c <next>
80007c14:	02050663          	beqz	a0,80007c40 <remove_timeout+0x54>
		next(t)->dticks += t->dticks;
80007c18:	01052783          	lw	a5,16(a0)
80007c1c:	01452683          	lw	a3,20(a0)
80007c20:	01042703          	lw	a4,16(s0)
80007c24:	01442603          	lw	a2,20(s0)
80007c28:	00e78733          	add	a4,a5,a4
80007c2c:	00f737b3          	sltu	a5,a4,a5
80007c30:	00c686b3          	add	a3,a3,a2
80007c34:	00d787b3          	add	a5,a5,a3
80007c38:	00e52823          	sw	a4,16(a0)
80007c3c:	00f52a23          	sw	a5,20(a0)
	sys_dnode_t *const prev = node->prev;
80007c40:	00442703          	lw	a4,4(s0)
	sys_dnode_t *const next = node->next;
80007c44:	00042783          	lw	a5,0(s0)
	prev->next = next;
80007c48:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
80007c4c:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
80007c50:	00042023          	sw	zero,0(s0)
	node->prev = NULL;
80007c54:	00042223          	sw	zero,4(s0)
}
80007c58:	8000d7b7          	lui	a5,0x8000d
80007c5c:	00c12703          	lw	a4,12(sp)
80007c60:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007c64:	00f747b3          	xor	a5,a4,a5
80007c68:	00000713          	li	a4,0
80007c6c:	00079a63          	bnez	a5,80007c80 <remove_timeout+0x94>
80007c70:	01c12083          	lw	ra,28(sp)
80007c74:	01812403          	lw	s0,24(sp)
80007c78:	02010113          	addi	sp,sp,32
80007c7c:	00008067          	ret
80007c80:	e91ff0ef          	jal	ra,80007b10 <_StackCheckHandler>

80007c84 <elapsed>:
80007c84:	00308013          	addi	zero,ra,3
{
80007c88:	fe010113          	addi	sp,sp,-32
80007c8c:	00112e23          	sw	ra,28(sp)
80007c90:	8000d7b7          	lui	a5,0x8000d
80007c94:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007c98:	00e12623          	sw	a4,12(sp)
80007c9c:	00000713          	li	a4,0
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
80007ca0:	8000b7b7          	lui	a5,0x8000b
80007ca4:	9647a783          	lw	a5,-1692(a5) # 8000a964 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a965>
80007ca8:	02078663          	beqz	a5,80007cd4 <elapsed+0x50>
80007cac:	00000513          	li	a0,0
}
80007cb0:	8000d7b7          	lui	a5,0x8000d
80007cb4:	00c12703          	lw	a4,12(sp)
80007cb8:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007cbc:	00f747b3          	xor	a5,a4,a5
80007cc0:	00000713          	li	a4,0
80007cc4:	00079c63          	bnez	a5,80007cdc <elapsed+0x58>
80007cc8:	01c12083          	lw	ra,28(sp)
80007ccc:	02010113          	addi	sp,sp,32
80007cd0:	00008067          	ret
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
80007cd4:	f8cfd0ef          	jal	ra,80005460 <sys_clock_elapsed>
80007cd8:	fd9ff06f          	j	80007cb0 <elapsed+0x2c>
}
80007cdc:	e35ff0ef          	jal	ra,80007b10 <_StackCheckHandler>

80007ce0 <next_timeout>:
80007ce0:	00308013          	addi	zero,ra,3
{
80007ce4:	fe010113          	addi	sp,sp,-32
80007ce8:	00112e23          	sw	ra,28(sp)
80007cec:	00812c23          	sw	s0,24(sp)
80007cf0:	8000d7b7          	lui	a5,0x8000d
80007cf4:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007cf8:	00e12623          	sw	a4,12(sp)
80007cfc:	00000713          	li	a4,0
	struct _timeout *to = first();
80007d00:	e35ff0ef          	jal	ra,80007b34 <first>
80007d04:	00050413          	mv	s0,a0
	int32_t ticks_elapsed = elapsed();
80007d08:	f7dff0ef          	jal	ra,80007c84 <elapsed>
	if ((to == NULL) ||
80007d0c:	02040c63          	beqz	s0,80007d44 <next_timeout+0x64>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
80007d10:	01042703          	lw	a4,16(s0)
80007d14:	01442783          	lw	a5,20(s0)
80007d18:	41f55693          	srai	a3,a0,0x1f
80007d1c:	40a70533          	sub	a0,a4,a0
80007d20:	00a73733          	sltu	a4,a4,a0
80007d24:	40d787b3          	sub	a5,a5,a3
80007d28:	40e787b3          	sub	a5,a5,a4
	if ((to == NULL) ||
80007d2c:	02f04263          	bgtz	a5,80007d50 <next_timeout+0x70>
80007d30:	00079463          	bnez	a5,80007d38 <next_timeout+0x58>
80007d34:	00054e63          	bltz	a0,80007d50 <next_timeout+0x70>
		ret = MAX(0, to->dticks - ticks_elapsed);
80007d38:	0207d063          	bgez	a5,80007d58 <next_timeout+0x78>
80007d3c:	00000513          	li	a0,0
80007d40:	0180006f          	j	80007d58 <next_timeout+0x78>
		ret = MAX_WAIT;
80007d44:	80000537          	lui	a0,0x80000
80007d48:	fff54513          	not	a0,a0
80007d4c:	00c0006f          	j	80007d58 <next_timeout+0x78>
80007d50:	80000537          	lui	a0,0x80000
80007d54:	fff54513          	not	a0,a0
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
80007d58:	8000b7b7          	lui	a5,0x8000b
80007d5c:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80007d60:	0107a783          	lw	a5,16(a5)
80007d64:	00078663          	beqz	a5,80007d70 <next_timeout+0x90>
80007d68:	00a7d463          	bge	a5,a0,80007d70 <next_timeout+0x90>
		ret = _current_cpu->slice_ticks;
80007d6c:	00078513          	mv	a0,a5
}
80007d70:	8000d7b7          	lui	a5,0x8000d
80007d74:	00c12703          	lw	a4,12(sp)
80007d78:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007d7c:	00f747b3          	xor	a5,a4,a5
80007d80:	00000713          	li	a4,0
80007d84:	00079a63          	bnez	a5,80007d98 <next_timeout+0xb8>
80007d88:	01c12083          	lw	ra,28(sp)
80007d8c:	01812403          	lw	s0,24(sp)
80007d90:	02010113          	addi	sp,sp,32
80007d94:	00008067          	ret
80007d98:	d79ff0ef          	jal	ra,80007b10 <_StackCheckHandler>

80007d9c <z_add_timeout>:
80007d9c:	00308013          	addi	zero,ra,3
{
80007da0:	fd010113          	addi	sp,sp,-48
80007da4:	02112623          	sw	ra,44(sp)
80007da8:	02812423          	sw	s0,40(sp)
80007dac:	02912223          	sw	s1,36(sp)
80007db0:	03212023          	sw	s2,32(sp)
80007db4:	01312e23          	sw	s3,28(sp)
80007db8:	01412c23          	sw	s4,24(sp)
80007dbc:	01512a23          	sw	s5,20(sp)
80007dc0:	00050413          	mv	s0,a0
80007dc4:	00060493          	mv	s1,a2
80007dc8:	00068913          	mv	s2,a3
80007dcc:	8000d7b7          	lui	a5,0x8000d
80007dd0:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007dd4:	00e12623          	sw	a4,12(sp)
80007dd8:	00000713          	li	a4,0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
80007ddc:	fff00793          	li	a5,-1
80007de0:	00c78a63          	beq	a5,a2,80007df4 <z_add_timeout+0x58>
	to->fn = fn;
80007de4:	00b42423          	sw	a1,8(s0)
	LOCKED(&timeout_lock) {
80007de8:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007dec:	300479f3          	csrrci	s3,mstatus,8
80007df0:	1200006f          	j	80007f10 <z_add_timeout+0x174>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
80007df4:	fef698e3          	bne	a3,a5,80007de4 <z_add_timeout+0x48>
}
80007df8:	8000d7b7          	lui	a5,0x8000d
80007dfc:	00c12703          	lw	a4,12(sp)
80007e00:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007e04:	00f747b3          	xor	a5,a4,a5
80007e08:	00000713          	li	a4,0
80007e0c:	18079463          	bnez	a5,80007f94 <z_add_timeout+0x1f8>
80007e10:	02c12083          	lw	ra,44(sp)
80007e14:	02812403          	lw	s0,40(sp)
80007e18:	02412483          	lw	s1,36(sp)
80007e1c:	02012903          	lw	s2,32(sp)
80007e20:	01c12983          	lw	s3,28(sp)
80007e24:	01812a03          	lw	s4,24(sp)
80007e28:	01412a83          	lw	s5,20(sp)
80007e2c:	03010113          	addi	sp,sp,48
80007e30:	00008067          	ret
			to->dticks = MAX(1, ticks);
80007e34:	00071463          	bnez	a4,80007e3c <z_add_timeout+0xa0>
80007e38:	12079463          	bnez	a5,80007f60 <z_add_timeout+0x1c4>
80007e3c:	00100793          	li	a5,1
80007e40:	00000713          	li	a4,0
80007e44:	11c0006f          	j	80007f60 <z_add_timeout+0x1c4>
			to->dticks = timeout.ticks + 1 + elapsed();
80007e48:	00148a13          	addi	s4,s1,1
80007e4c:	009a3ab3          	sltu	s5,s4,s1
80007e50:	012a8ab3          	add	s5,s5,s2
80007e54:	e31ff0ef          	jal	ra,80007c84 <elapsed>
80007e58:	41f55713          	srai	a4,a0,0x1f
80007e5c:	00aa07b3          	add	a5,s4,a0
80007e60:	0147ba33          	sltu	s4,a5,s4
80007e64:	00ea8ab3          	add	s5,s5,a4
80007e68:	015a0a33          	add	s4,s4,s5
80007e6c:	00f42823          	sw	a5,16(s0)
80007e70:	01442a23          	sw	s4,20(s0)
80007e74:	0f40006f          	j	80007f68 <z_add_timeout+0x1cc>
			to->dticks -= t->dticks;
80007e78:	40d706b3          	sub	a3,a4,a3
80007e7c:	00d73733          	sltu	a4,a4,a3
80007e80:	40c787b3          	sub	a5,a5,a2
80007e84:	40e787b3          	sub	a5,a5,a4
80007e88:	00d42823          	sw	a3,16(s0)
80007e8c:	00f42a23          	sw	a5,20(s0)
		for (t = first(); t != NULL; t = next(t)) {
80007e90:	cfdff0ef          	jal	ra,80007b8c <next>
80007e94:	04050863          	beqz	a0,80007ee4 <z_add_timeout+0x148>
			if (t->dticks > to->dticks) {
80007e98:	01052683          	lw	a3,16(a0) # 80000010 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000011>
80007e9c:	01452603          	lw	a2,20(a0)
80007ea0:	01042703          	lw	a4,16(s0)
80007ea4:	01442783          	lw	a5,20(s0)
80007ea8:	00c7c663          	blt	a5,a2,80007eb4 <z_add_timeout+0x118>
80007eac:	fcf616e3          	bne	a2,a5,80007e78 <z_add_timeout+0xdc>
80007eb0:	fcd774e3          	bgeu	a4,a3,80007e78 <z_add_timeout+0xdc>
				t->dticks -= to->dticks;
80007eb4:	40e68733          	sub	a4,a3,a4
80007eb8:	00e6b6b3          	sltu	a3,a3,a4
80007ebc:	40f60633          	sub	a2,a2,a5
80007ec0:	40d60633          	sub	a2,a2,a3
80007ec4:	00e52823          	sw	a4,16(a0)
80007ec8:	00c52a23          	sw	a2,20(a0)
	sys_dnode_t *const prev = successor->prev;
80007ecc:	00452783          	lw	a5,4(a0)
	node->prev = prev;
80007ed0:	00f42223          	sw	a5,4(s0)
	node->next = successor;
80007ed4:	00a42023          	sw	a0,0(s0)
	prev->next = node;
80007ed8:	0087a023          	sw	s0,0(a5)
	successor->prev = node;
80007edc:	00852223          	sw	s0,4(a0)
		if (t == NULL) {
80007ee0:	01c0006f          	j	80007efc <z_add_timeout+0x160>
	sys_dnode_t *const tail = list->tail;
80007ee4:	82418793          	addi	a5,gp,-2012 # 8000d90c <timeout_list>
80007ee8:	0047a703          	lw	a4,4(a5)
	node->next = list;
80007eec:	00f42023          	sw	a5,0(s0)
	node->prev = tail;
80007ef0:	00e42223          	sw	a4,4(s0)
	tail->next = node;
80007ef4:	00872023          	sw	s0,0(a4)
	list->tail = node;
80007ef8:	0087a223          	sw	s0,4(a5)
		if (to == first()) {
80007efc:	c39ff0ef          	jal	ra,80007b34 <first>
80007f00:	06a40863          	beq	s0,a0,80007f70 <z_add_timeout+0x1d4>
			  : "r" (key & MSTATUS_IEN)
80007f04:	0089f793          	andi	a5,s3,8
	__asm__ volatile ("csrs mstatus, %0"
80007f08:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
80007f0c:	00100793          	li	a5,1
80007f10:	ee0794e3          	bnez	a5,80007df8 <z_add_timeout+0x5c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
80007f14:	ffe00793          	li	a5,-2
80007f18:	40978733          	sub	a4,a5,s1
80007f1c:	00e7b733          	sltu	a4,a5,a4
80007f20:	fff94793          	not	a5,s2
80007f24:	40e787b3          	sub	a5,a5,a4
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
80007f28:	f207c0e3          	bltz	a5,80007e48 <z_add_timeout+0xac>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
80007f2c:	8000b737          	lui	a4,0x8000b
80007f30:	92872783          	lw	a5,-1752(a4) # 8000a928 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a929>
80007f34:	92c72683          	lw	a3,-1748(a4)
80007f38:	009787b3          	add	a5,a5,s1
80007f3c:	0097b733          	sltu	a4,a5,s1
80007f40:	012686b3          	add	a3,a3,s2
80007f44:	00d70733          	add	a4,a4,a3
80007f48:	ffe00693          	li	a3,-2
80007f4c:	40f687b3          	sub	a5,a3,a5
80007f50:	00f6b6b3          	sltu	a3,a3,a5
80007f54:	fff74713          	not	a4,a4
			to->dticks = MAX(1, ticks);
80007f58:	40d70733          	sub	a4,a4,a3
80007f5c:	ece05ce3          	blez	a4,80007e34 <z_add_timeout+0x98>
80007f60:	00f42823          	sw	a5,16(s0)
80007f64:	00e42a23          	sw	a4,20(s0)
		for (t = first(); t != NULL; t = next(t)) {
80007f68:	bcdff0ef          	jal	ra,80007b34 <first>
80007f6c:	f29ff06f          	j	80007e94 <z_add_timeout+0xf8>
			int32_t next_time = next_timeout();
80007f70:	d71ff0ef          	jal	ra,80007ce0 <next_timeout>
			if (next_time == 0 ||
80007f74:	00050a63          	beqz	a0,80007f88 <z_add_timeout+0x1ec>
			    _current_cpu->slice_ticks != next_time) {
80007f78:	8000b7b7          	lui	a5,0x8000b
80007f7c:	e2078793          	addi	a5,a5,-480 # 8000ae20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ae21>
80007f80:	0107a783          	lw	a5,16(a5)
			if (next_time == 0 ||
80007f84:	f8a780e3          	beq	a5,a0,80007f04 <z_add_timeout+0x168>
				sys_clock_set_timeout(next_time, false);
80007f88:	00000593          	li	a1,0
80007f8c:	bccfd0ef          	jal	ra,80005358 <sys_clock_set_timeout>
80007f90:	f75ff06f          	j	80007f04 <z_add_timeout+0x168>
}
80007f94:	b7dff0ef          	jal	ra,80007b10 <_StackCheckHandler>

80007f98 <z_abort_timeout>:
80007f98:	00308013          	addi	zero,ra,3
{
80007f9c:	fe010113          	addi	sp,sp,-32
80007fa0:	00112e23          	sw	ra,28(sp)
80007fa4:	00812c23          	sw	s0,24(sp)
80007fa8:	00912a23          	sw	s1,20(sp)
80007fac:	01212823          	sw	s2,16(sp)
80007fb0:	00050493          	mv	s1,a0
80007fb4:	8000d7b7          	lui	a5,0x8000d
80007fb8:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80007fbc:	00e12623          	sw	a4,12(sp)
80007fc0:	00000713          	li	a4,0
	LOCKED(&timeout_lock) {
80007fc4:	00000413          	li	s0,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007fc8:	30047973          	csrrci	s2,mstatus,8
	int ret = -EINVAL;
80007fcc:	fea00513          	li	a0,-22
80007fd0:	0100006f          	j	80007fe0 <z_abort_timeout+0x48>
			  : "r" (key & MSTATUS_IEN)
80007fd4:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80007fd8:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
80007fdc:	00100413          	li	s0,1
80007fe0:	00041e63          	bnez	s0,80007ffc <z_abort_timeout+0x64>
	return node->next != NULL;
80007fe4:	0004a783          	lw	a5,0(s1)
		if (sys_dnode_is_linked(&to->node)) {
80007fe8:	fe0786e3          	beqz	a5,80007fd4 <z_abort_timeout+0x3c>
			remove_timeout(to);
80007fec:	00048513          	mv	a0,s1
80007ff0:	bfdff0ef          	jal	ra,80007bec <remove_timeout>
			ret = 0;
80007ff4:	00040513          	mv	a0,s0
80007ff8:	fddff06f          	j	80007fd4 <z_abort_timeout+0x3c>
}
80007ffc:	8000d7b7          	lui	a5,0x8000d
80008000:	00c12703          	lw	a4,12(sp)
80008004:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80008008:	00f747b3          	xor	a5,a4,a5
8000800c:	00000713          	li	a4,0
80008010:	00079e63          	bnez	a5,8000802c <z_abort_timeout+0x94>
80008014:	01c12083          	lw	ra,28(sp)
80008018:	01812403          	lw	s0,24(sp)
8000801c:	01412483          	lw	s1,20(sp)
80008020:	01012903          	lw	s2,16(sp)
80008024:	02010113          	addi	sp,sp,32
80008028:	00008067          	ret
8000802c:	ae5ff0ef          	jal	ra,80007b10 <_StackCheckHandler>

80008030 <z_set_timeout_expiry>:
80008030:	00308013          	addi	zero,ra,3
{
80008034:	fd010113          	addi	sp,sp,-48
80008038:	02112623          	sw	ra,44(sp)
8000803c:	02812423          	sw	s0,40(sp)
80008040:	02912223          	sw	s1,36(sp)
80008044:	03212023          	sw	s2,32(sp)
80008048:	01312e23          	sw	s3,28(sp)
8000804c:	00050493          	mv	s1,a0
80008050:	00058993          	mv	s3,a1
80008054:	8000d7b7          	lui	a5,0x8000d
80008058:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000805c:	00e12623          	sw	a4,12(sp)
80008060:	00000713          	li	a4,0
	LOCKED(&timeout_lock) {
80008064:	00000413          	li	s0,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80008068:	30047973          	csrrci	s2,mstatus,8
8000806c:	0240006f          	j	80008090 <z_set_timeout_expiry+0x60>
			      || (ticks <= next_to);
80008070:	00100413          	li	s0,1
		bool sooner = (next_to == K_TICKS_FOREVER)
80008074:	00147413          	andi	s0,s0,1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
80008078:	00100793          	li	a5,1
8000807c:	00a7d463          	bge	a5,a0,80008084 <z_set_timeout_expiry+0x54>
80008080:	02041663          	bnez	s0,800080ac <z_set_timeout_expiry+0x7c>
			  : "r" (key & MSTATUS_IEN)
80008084:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80008088:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
8000808c:	00100413          	li	s0,1
80008090:	02041863          	bnez	s0,800080c0 <z_set_timeout_expiry+0x90>
		int next_to = next_timeout();
80008094:	c4dff0ef          	jal	ra,80007ce0 <next_timeout>
			      || (ticks <= next_to);
80008098:	fff00793          	li	a5,-1
8000809c:	fcf50ae3          	beq	a0,a5,80008070 <z_set_timeout_expiry+0x40>
800080a0:	fc954ae3          	blt	a0,s1,80008074 <z_set_timeout_expiry+0x44>
800080a4:	00100413          	li	s0,1
800080a8:	fcdff06f          	j	80008074 <z_set_timeout_expiry+0x44>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
800080ac:	00a4d463          	bge	s1,a0,800080b4 <z_set_timeout_expiry+0x84>
800080b0:	00048513          	mv	a0,s1
800080b4:	00098593          	mv	a1,s3
800080b8:	aa0fd0ef          	jal	ra,80005358 <sys_clock_set_timeout>
800080bc:	fc9ff06f          	j	80008084 <z_set_timeout_expiry+0x54>
}
800080c0:	8000d7b7          	lui	a5,0x8000d
800080c4:	00c12703          	lw	a4,12(sp)
800080c8:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800080cc:	00f747b3          	xor	a5,a4,a5
800080d0:	00000713          	li	a4,0
800080d4:	02079063          	bnez	a5,800080f4 <z_set_timeout_expiry+0xc4>
800080d8:	02c12083          	lw	ra,44(sp)
800080dc:	02812403          	lw	s0,40(sp)
800080e0:	02412483          	lw	s1,36(sp)
800080e4:	02012903          	lw	s2,32(sp)
800080e8:	01c12983          	lw	s3,28(sp)
800080ec:	03010113          	addi	sp,sp,48
800080f0:	00008067          	ret
800080f4:	a1dff0ef          	jal	ra,80007b10 <_StackCheckHandler>

800080f8 <sys_clock_announce>:
800080f8:	00308013          	addi	zero,ra,3
{
800080fc:	fe010113          	addi	sp,sp,-32
80008100:	00112e23          	sw	ra,28(sp)
80008104:	00812c23          	sw	s0,24(sp)
80008108:	00912a23          	sw	s1,20(sp)
8000810c:	01212823          	sw	s2,16(sp)
80008110:	00050413          	mv	s0,a0
80008114:	8000d7b7          	lui	a5,0x8000d
80008118:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
8000811c:	00e12623          	sw	a4,12(sp)
80008120:	00000713          	li	a4,0
	z_time_slice(ticks);
80008124:	d69fe0ef          	jal	ra,80006e8c <z_time_slice>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80008128:	300474f3          	csrrci	s1,mstatus,8
	announce_remaining = ticks;
8000812c:	8000b7b7          	lui	a5,0x8000b
80008130:	9687a223          	sw	s0,-1692(a5) # 8000a964 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a965>
	while (first() != NULL && first()->dticks <= announce_remaining) {
80008134:	06c0006f          	j	800081a0 <sys_clock_announce+0xa8>
		curr_tick += dt;
80008138:	8000b737          	lui	a4,0x8000b
8000813c:	41f95593          	srai	a1,s2,0x1f
80008140:	92872783          	lw	a5,-1752(a4) # 8000a928 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a929>
80008144:	92c72683          	lw	a3,-1748(a4)
80008148:	01278633          	add	a2,a5,s2
8000814c:	00f637b3          	sltu	a5,a2,a5
80008150:	00b686b3          	add	a3,a3,a1
80008154:	00d787b3          	add	a5,a5,a3
80008158:	92c72423          	sw	a2,-1752(a4)
8000815c:	92f72623          	sw	a5,-1748(a4)
		t->dticks = 0;
80008160:	00000793          	li	a5,0
80008164:	00000813          	li	a6,0
80008168:	00f42823          	sw	a5,16(s0)
8000816c:	01042a23          	sw	a6,20(s0)
		remove_timeout(t);
80008170:	00040513          	mv	a0,s0
80008174:	a79ff0ef          	jal	ra,80007bec <remove_timeout>
			  : "r" (key & MSTATUS_IEN)
80008178:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
8000817c:	3004a073          	csrs	mstatus,s1
		t->fn(t);
80008180:	00842783          	lw	a5,8(s0)
80008184:	00040513          	mv	a0,s0
80008188:	000780e7          	jalr	a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000818c:	300474f3          	csrrci	s1,mstatus,8
		announce_remaining -= dt;
80008190:	8000b737          	lui	a4,0x8000b
80008194:	96472783          	lw	a5,-1692(a4) # 8000a964 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a965>
80008198:	412787b3          	sub	a5,a5,s2
8000819c:	96f72223          	sw	a5,-1692(a4)
	while (first() != NULL && first()->dticks <= announce_remaining) {
800081a0:	995ff0ef          	jal	ra,80007b34 <first>
800081a4:	00050413          	mv	s0,a0
800081a8:	02050263          	beqz	a0,800081cc <sys_clock_announce+0xd4>
800081ac:	01052903          	lw	s2,16(a0)
800081b0:	01452703          	lw	a4,20(a0)
800081b4:	8000b7b7          	lui	a5,0x8000b
800081b8:	9647a683          	lw	a3,-1692(a5) # 8000a964 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a965>
800081bc:	41f6d793          	srai	a5,a3,0x1f
800081c0:	00e7c663          	blt	a5,a4,800081cc <sys_clock_announce+0xd4>
800081c4:	f6f71ae3          	bne	a4,a5,80008138 <sys_clock_announce+0x40>
800081c8:	f726f8e3          	bgeu	a3,s2,80008138 <sys_clock_announce+0x40>
	if (first() != NULL) {
800081cc:	02040863          	beqz	s0,800081fc <sys_clock_announce+0x104>
		first()->dticks -= announce_remaining;
800081d0:	01042683          	lw	a3,16(s0)
800081d4:	01442783          	lw	a5,20(s0)
800081d8:	8000b737          	lui	a4,0x8000b
800081dc:	96472703          	lw	a4,-1692(a4) # 8000a964 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a965>
800081e0:	41f75613          	srai	a2,a4,0x1f
800081e4:	40e68733          	sub	a4,a3,a4
800081e8:	00e6b6b3          	sltu	a3,a3,a4
800081ec:	40c787b3          	sub	a5,a5,a2
800081f0:	40d787b3          	sub	a5,a5,a3
800081f4:	00e42823          	sw	a4,16(s0)
800081f8:	00f42a23          	sw	a5,20(s0)
	curr_tick += announce_remaining;
800081fc:	8000b6b7          	lui	a3,0x8000b
80008200:	8000b5b7          	lui	a1,0x8000b
80008204:	9645a703          	lw	a4,-1692(a1) # 8000a964 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a965>
80008208:	41f75513          	srai	a0,a4,0x1f
8000820c:	9286a783          	lw	a5,-1752(a3) # 8000a928 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a929>
80008210:	92c6a603          	lw	a2,-1748(a3)
80008214:	00e78733          	add	a4,a5,a4
80008218:	00f737b3          	sltu	a5,a4,a5
8000821c:	00a60633          	add	a2,a2,a0
80008220:	00c787b3          	add	a5,a5,a2
80008224:	92e6a423          	sw	a4,-1752(a3)
80008228:	92f6a623          	sw	a5,-1748(a3)
	announce_remaining = 0;
8000822c:	9605a223          	sw	zero,-1692(a1)
	sys_clock_set_timeout(next_timeout(), false);
80008230:	ab1ff0ef          	jal	ra,80007ce0 <next_timeout>
80008234:	00000593          	li	a1,0
80008238:	920fd0ef          	jal	ra,80005358 <sys_clock_set_timeout>
			  : "r" (key & MSTATUS_IEN)
8000823c:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80008240:	3004a073          	csrs	mstatus,s1
}
80008244:	8000d7b7          	lui	a5,0x8000d
80008248:	00c12703          	lw	a4,12(sp)
8000824c:	2507a783          	lw	a5,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80008250:	00f747b3          	xor	a5,a4,a5
80008254:	00000713          	li	a4,0
80008258:	00079e63          	bnez	a5,80008274 <sys_clock_announce+0x17c>
8000825c:	01c12083          	lw	ra,28(sp)
80008260:	01812403          	lw	s0,24(sp)
80008264:	01412483          	lw	s1,20(sp)
80008268:	01012903          	lw	s2,16(sp)
8000826c:	02010113          	addi	sp,sp,32
80008270:	00008067          	ret
80008274:	89dff0ef          	jal	ra,80007b10 <_StackCheckHandler>

80008278 <boot_banner>:
80008278:	00308013          	addi	zero,ra,3
{
8000827c:	fe010113          	addi	sp,sp,-32
80008280:	00112e23          	sw	ra,28(sp)
80008284:	00812c23          	sw	s0,24(sp)
80008288:	8000d437          	lui	s0,0x8000d
8000828c:	25042783          	lw	a5,592(s0) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
80008290:	00f12623          	sw	a5,12(sp)
80008294:	00000793          	li	a5,0
	printk("*** Booting Zephyr OS build %s %s ***\n",
80008298:	8000a637          	lui	a2,0x8000a
8000829c:	b6060613          	addi	a2,a2,-1184 # 80009b60 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009b61>
800082a0:	8000a5b7          	lui	a1,0x8000a
800082a4:	73c58593          	addi	a1,a1,1852 # 8000a73c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a73d>
800082a8:	8000a537          	lui	a0,0x8000a
800082ac:	75c50513          	addi	a0,a0,1884 # 8000a75c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a75d>
800082b0:	fd8fa0ef          	jal	ra,80002a88 <printk>
}
800082b4:	00c12703          	lw	a4,12(sp)
800082b8:	25042783          	lw	a5,592(s0)
800082bc:	00f747b3          	xor	a5,a4,a5
800082c0:	00000713          	li	a4,0
800082c4:	00079a63          	bnez	a5,800082d8 <boot_banner+0x60>
800082c8:	01c12083          	lw	ra,28(sp)
800082cc:	01812403          	lw	s0,24(sp)
800082d0:	02010113          	addi	sp,sp,32
800082d4:	00008067          	ret
800082d8:	839ff0ef          	jal	ra,80007b10 <_StackCheckHandler>

800082dc <_OffsetAbsSyms>:
800082dc:	00308013          	addi	zero,ra,3
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
800082e0:	fe010113          	addi	sp,sp,-32
800082e4:	00112e23          	sw	ra,28(sp)
800082e8:	8000d7b7          	lui	a5,0x8000d
800082ec:	2507a703          	lw	a4,592(a5) # 8000d250 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000d251>
800082f0:	00e12623          	sw	a4,12(sp)
800082f4:	00000713          	li	a4,0
GEN_ABS_SYM_END
800082f8:	00c12703          	lw	a4,12(sp)
800082fc:	2507a783          	lw	a5,592(a5)
80008300:	00f747b3          	xor	a5,a4,a5
80008304:	00000713          	li	a4,0
80008308:	00079863          	bnez	a5,80008318 <_OffsetAbsSyms+0x3c>
8000830c:	01c12083          	lw	ra,28(sp)
80008310:	02010113          	addi	sp,sp,32
80008314:	00008067          	ret
80008318:	ff8ff0ef          	jal	ra,80007b10 <_StackCheckHandler>

8000831c <exit>:
8000831c:	ff010113          	addi	sp,sp,-16
80008320:	00812423          	sw	s0,8(sp)
80008324:	00112623          	sw	ra,12(sp)
80008328:	00000793          	li	a5,0
8000832c:	00050413          	mv	s0,a0
80008330:	00078863          	beqz	a5,80008340 <exit+0x24>
80008334:	00000593          	li	a1,0
80008338:	00000097          	auipc	ra,0x0
8000833c:	000000e7          	jalr	zero # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
80008340:	800097b7          	lui	a5,0x80009
80008344:	7fc7a503          	lw	a0,2044(a5) # 800097fc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800097fd>
80008348:	02852783          	lw	a5,40(a0)
8000834c:	00078463          	beqz	a5,80008354 <exit+0x38>
80008350:	000780e7          	jalr	a5
80008354:	00040513          	mv	a0,s0
80008358:	a08fc0ef          	jal	ra,80004560 <_exit>

8000835c <malloc>:
8000835c:	00050593          	mv	a1,a0
80008360:	82c1a503          	lw	a0,-2004(gp) # 8000d914 <_impure_ptr>
80008364:	1000006f          	j	80008464 <_malloc_r>

80008368 <_free_r>:
80008368:	0e058c63          	beqz	a1,80008460 <_free_r+0xf8>
8000836c:	ffc5a783          	lw	a5,-4(a1)
80008370:	fe010113          	addi	sp,sp,-32
80008374:	00812c23          	sw	s0,24(sp)
80008378:	00112e23          	sw	ra,28(sp)
8000837c:	ffc58413          	addi	s0,a1,-4
80008380:	0007d463          	bgez	a5,80008388 <_free_r+0x20>
80008384:	00f40433          	add	s0,s0,a5
80008388:	00a12623          	sw	a0,12(sp)
8000838c:	6bc000ef          	jal	ra,80008a48 <__malloc_lock>
80008390:	8000b737          	lui	a4,0x8000b
80008394:	96c72783          	lw	a5,-1684(a4) # 8000a96c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a96d>
80008398:	00c12503          	lw	a0,12(sp)
8000839c:	00079e63          	bnez	a5,800083b8 <_free_r+0x50>
800083a0:	00042223          	sw	zero,4(s0)
800083a4:	96872623          	sw	s0,-1684(a4)
800083a8:	01812403          	lw	s0,24(sp)
800083ac:	01c12083          	lw	ra,28(sp)
800083b0:	02010113          	addi	sp,sp,32
800083b4:	69c0006f          	j	80008a50 <__malloc_unlock>
800083b8:	02f47463          	bgeu	s0,a5,800083e0 <_free_r+0x78>
800083bc:	00042603          	lw	a2,0(s0)
800083c0:	00c406b3          	add	a3,s0,a2
800083c4:	00d79a63          	bne	a5,a3,800083d8 <_free_r+0x70>
800083c8:	0007a683          	lw	a3,0(a5)
800083cc:	0047a783          	lw	a5,4(a5)
800083d0:	00c686b3          	add	a3,a3,a2
800083d4:	00d42023          	sw	a3,0(s0)
800083d8:	00f42223          	sw	a5,4(s0)
800083dc:	fc9ff06f          	j	800083a4 <_free_r+0x3c>
800083e0:	00078713          	mv	a4,a5
800083e4:	0047a783          	lw	a5,4(a5)
800083e8:	00078463          	beqz	a5,800083f0 <_free_r+0x88>
800083ec:	fef47ae3          	bgeu	s0,a5,800083e0 <_free_r+0x78>
800083f0:	00072683          	lw	a3,0(a4)
800083f4:	00d70633          	add	a2,a4,a3
800083f8:	02861863          	bne	a2,s0,80008428 <_free_r+0xc0>
800083fc:	00042603          	lw	a2,0(s0)
80008400:	00c686b3          	add	a3,a3,a2
80008404:	00d72023          	sw	a3,0(a4)
80008408:	00d70633          	add	a2,a4,a3
8000840c:	f8c79ee3          	bne	a5,a2,800083a8 <_free_r+0x40>
80008410:	0007a603          	lw	a2,0(a5)
80008414:	0047a783          	lw	a5,4(a5)
80008418:	00d606b3          	add	a3,a2,a3
8000841c:	00d72023          	sw	a3,0(a4)
80008420:	00f72223          	sw	a5,4(a4)
80008424:	f85ff06f          	j	800083a8 <_free_r+0x40>
80008428:	00c47863          	bgeu	s0,a2,80008438 <_free_r+0xd0>
8000842c:	00c00793          	li	a5,12
80008430:	00f52023          	sw	a5,0(a0)
80008434:	f75ff06f          	j	800083a8 <_free_r+0x40>
80008438:	00042603          	lw	a2,0(s0)
8000843c:	00c406b3          	add	a3,s0,a2
80008440:	00d79a63          	bne	a5,a3,80008454 <_free_r+0xec>
80008444:	0007a683          	lw	a3,0(a5)
80008448:	0047a783          	lw	a5,4(a5)
8000844c:	00c686b3          	add	a3,a3,a2
80008450:	00d42023          	sw	a3,0(s0)
80008454:	00f42223          	sw	a5,4(s0)
80008458:	00872223          	sw	s0,4(a4)
8000845c:	f4dff06f          	j	800083a8 <_free_r+0x40>
80008460:	00008067          	ret

80008464 <_malloc_r>:
80008464:	fe010113          	addi	sp,sp,-32
80008468:	00912a23          	sw	s1,20(sp)
8000846c:	00358493          	addi	s1,a1,3
80008470:	ffc4f493          	andi	s1,s1,-4
80008474:	01212823          	sw	s2,16(sp)
80008478:	00112e23          	sw	ra,28(sp)
8000847c:	00812c23          	sw	s0,24(sp)
80008480:	01312623          	sw	s3,12(sp)
80008484:	00848493          	addi	s1,s1,8
80008488:	00c00793          	li	a5,12
8000848c:	00050913          	mv	s2,a0
80008490:	06f4f463          	bgeu	s1,a5,800084f8 <_malloc_r+0x94>
80008494:	00c00493          	li	s1,12
80008498:	06b4e263          	bltu	s1,a1,800084fc <_malloc_r+0x98>
8000849c:	00090513          	mv	a0,s2
800084a0:	5a8000ef          	jal	ra,80008a48 <__malloc_lock>
800084a4:	8000b6b7          	lui	a3,0x8000b
800084a8:	96c6a703          	lw	a4,-1684(a3) # 8000a96c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a96d>
800084ac:	00070413          	mv	s0,a4
800084b0:	06041a63          	bnez	s0,80008524 <_malloc_r+0xc0>
800084b4:	8000b437          	lui	s0,0x8000b
800084b8:	96842783          	lw	a5,-1688(s0) # 8000a968 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a969>
800084bc:	00079a63          	bnez	a5,800084d0 <_malloc_r+0x6c>
800084c0:	00000593          	li	a1,0
800084c4:	00090513          	mv	a0,s2
800084c8:	0ec000ef          	jal	ra,800085b4 <_sbrk_r>
800084cc:	96a42423          	sw	a0,-1688(s0)
800084d0:	00048593          	mv	a1,s1
800084d4:	00090513          	mv	a0,s2
800084d8:	0dc000ef          	jal	ra,800085b4 <_sbrk_r>
800084dc:	fff00993          	li	s3,-1
800084e0:	0b351a63          	bne	a0,s3,80008594 <_malloc_r+0x130>
800084e4:	00c00793          	li	a5,12
800084e8:	00f92023          	sw	a5,0(s2)
800084ec:	00090513          	mv	a0,s2
800084f0:	560000ef          	jal	ra,80008a50 <__malloc_unlock>
800084f4:	0100006f          	j	80008504 <_malloc_r+0xa0>
800084f8:	fa04d0e3          	bgez	s1,80008498 <_malloc_r+0x34>
800084fc:	00c00793          	li	a5,12
80008500:	00f92023          	sw	a5,0(s2)
80008504:	00000513          	li	a0,0
80008508:	01c12083          	lw	ra,28(sp)
8000850c:	01812403          	lw	s0,24(sp)
80008510:	01412483          	lw	s1,20(sp)
80008514:	01012903          	lw	s2,16(sp)
80008518:	00c12983          	lw	s3,12(sp)
8000851c:	02010113          	addi	sp,sp,32
80008520:	00008067          	ret
80008524:	00042783          	lw	a5,0(s0)
80008528:	409787b3          	sub	a5,a5,s1
8000852c:	0407ce63          	bltz	a5,80008588 <_malloc_r+0x124>
80008530:	00b00613          	li	a2,11
80008534:	00f67a63          	bgeu	a2,a5,80008548 <_malloc_r+0xe4>
80008538:	00f42023          	sw	a5,0(s0)
8000853c:	00f40433          	add	s0,s0,a5
80008540:	00942023          	sw	s1,0(s0)
80008544:	0100006f          	j	80008554 <_malloc_r+0xf0>
80008548:	00442783          	lw	a5,4(s0)
8000854c:	02871a63          	bne	a4,s0,80008580 <_malloc_r+0x11c>
80008550:	96f6a623          	sw	a5,-1684(a3)
80008554:	00090513          	mv	a0,s2
80008558:	4f8000ef          	jal	ra,80008a50 <__malloc_unlock>
8000855c:	00b40513          	addi	a0,s0,11
80008560:	00440793          	addi	a5,s0,4
80008564:	ff857513          	andi	a0,a0,-8
80008568:	40f50733          	sub	a4,a0,a5
8000856c:	f8f50ee3          	beq	a0,a5,80008508 <_malloc_r+0xa4>
80008570:	00e40433          	add	s0,s0,a4
80008574:	40a787b3          	sub	a5,a5,a0
80008578:	00f42023          	sw	a5,0(s0)
8000857c:	f8dff06f          	j	80008508 <_malloc_r+0xa4>
80008580:	00f72223          	sw	a5,4(a4)
80008584:	fd1ff06f          	j	80008554 <_malloc_r+0xf0>
80008588:	00040713          	mv	a4,s0
8000858c:	00442403          	lw	s0,4(s0)
80008590:	f21ff06f          	j	800084b0 <_malloc_r+0x4c>
80008594:	00350413          	addi	s0,a0,3
80008598:	ffc47413          	andi	s0,s0,-4
8000859c:	fa8502e3          	beq	a0,s0,80008540 <_malloc_r+0xdc>
800085a0:	40a405b3          	sub	a1,s0,a0
800085a4:	00090513          	mv	a0,s2
800085a8:	00c000ef          	jal	ra,800085b4 <_sbrk_r>
800085ac:	f9351ae3          	bne	a0,s3,80008540 <_malloc_r+0xdc>
800085b0:	f35ff06f          	j	800084e4 <_malloc_r+0x80>

800085b4 <_sbrk_r>:
800085b4:	ff010113          	addi	sp,sp,-16
800085b8:	00812423          	sw	s0,8(sp)
800085bc:	00912223          	sw	s1,4(sp)
800085c0:	00050413          	mv	s0,a0
800085c4:	8000b4b7          	lui	s1,0x8000b
800085c8:	00058513          	mv	a0,a1
800085cc:	00112623          	sw	ra,12(sp)
800085d0:	9604a823          	sw	zero,-1680(s1) # 8000a970 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a971>
800085d4:	fc1fb0ef          	jal	ra,80004594 <_sbrk>
800085d8:	fff00793          	li	a5,-1
800085dc:	00f51863          	bne	a0,a5,800085ec <_sbrk_r+0x38>
800085e0:	9704a783          	lw	a5,-1680(s1)
800085e4:	00078463          	beqz	a5,800085ec <_sbrk_r+0x38>
800085e8:	00f42023          	sw	a5,0(s0)
800085ec:	00c12083          	lw	ra,12(sp)
800085f0:	00812403          	lw	s0,8(sp)
800085f4:	00412483          	lw	s1,4(sp)
800085f8:	01010113          	addi	sp,sp,16
800085fc:	00008067          	ret

80008600 <sniprintf>:
80008600:	f6010113          	addi	sp,sp,-160
80008604:	06912a23          	sw	s1,116(sp)
80008608:	08f12a23          	sw	a5,148(sp)
8000860c:	06112e23          	sw	ra,124(sp)
80008610:	06812c23          	sw	s0,120(sp)
80008614:	07212823          	sw	s2,112(sp)
80008618:	08d12623          	sw	a3,140(sp)
8000861c:	08e12823          	sw	a4,144(sp)
80008620:	09012c23          	sw	a6,152(sp)
80008624:	09112e23          	sw	a7,156(sp)
80008628:	82c1a483          	lw	s1,-2004(gp) # 8000d914 <_impure_ptr>
8000862c:	0205d463          	bgez	a1,80008654 <sniprintf+0x54>
80008630:	08b00793          	li	a5,139
80008634:	00f4a023          	sw	a5,0(s1)
80008638:	fff00513          	li	a0,-1
8000863c:	07c12083          	lw	ra,124(sp)
80008640:	07812403          	lw	s0,120(sp)
80008644:	07412483          	lw	s1,116(sp)
80008648:	07012903          	lw	s2,112(sp)
8000864c:	0a010113          	addi	sp,sp,160
80008650:	00008067          	ret
80008654:	20800793          	li	a5,520
80008658:	00f11a23          	sh	a5,20(sp)
8000865c:	00a12423          	sw	a0,8(sp)
80008660:	00a12c23          	sw	a0,24(sp)
80008664:	00058413          	mv	s0,a1
80008668:	00000793          	li	a5,0
8000866c:	00058463          	beqz	a1,80008674 <sniprintf+0x74>
80008670:	fff58793          	addi	a5,a1,-1
80008674:	fff00913          	li	s2,-1
80008678:	08c10693          	addi	a3,sp,140
8000867c:	00810593          	addi	a1,sp,8
80008680:	00048513          	mv	a0,s1
80008684:	00f12823          	sw	a5,16(sp)
80008688:	00f12e23          	sw	a5,28(sp)
8000868c:	01211b23          	sh	s2,22(sp)
80008690:	00d12223          	sw	a3,4(sp)
80008694:	528000ef          	jal	ra,80008bbc <_svfiprintf_r>
80008698:	01255663          	bge	a0,s2,800086a4 <sniprintf+0xa4>
8000869c:	08b00793          	li	a5,139
800086a0:	00f4a023          	sw	a5,0(s1)
800086a4:	f8040ce3          	beqz	s0,8000863c <sniprintf+0x3c>
800086a8:	00812783          	lw	a5,8(sp)
800086ac:	00078023          	sb	zero,0(a5)
800086b0:	f8dff06f          	j	8000863c <sniprintf+0x3c>

800086b4 <strcat>:
800086b4:	00050793          	mv	a5,a0
800086b8:	0007c683          	lbu	a3,0(a5)
800086bc:	00078713          	mv	a4,a5
800086c0:	00178793          	addi	a5,a5,1
800086c4:	fe069ae3          	bnez	a3,800086b8 <strcat+0x4>
800086c8:	0005c783          	lbu	a5,0(a1)
800086cc:	00158593          	addi	a1,a1,1
800086d0:	00170713          	addi	a4,a4,1
800086d4:	fef70fa3          	sb	a5,-1(a4)
800086d8:	fe0798e3          	bnez	a5,800086c8 <strcat+0x14>
800086dc:	00008067          	ret

800086e0 <__strcat_chk>:
800086e0:	00050713          	mv	a4,a0
800086e4:	00074783          	lbu	a5,0(a4)
800086e8:	02079063          	bnez	a5,80008708 <__strcat_chk+0x28>
800086ec:	00f586b3          	add	a3,a1,a5
800086f0:	0006c803          	lbu	a6,0(a3)
800086f4:	00f706b3          	add	a3,a4,a5
800086f8:	02081663          	bnez	a6,80008724 <__strcat_chk+0x44>
800086fc:	00f60863          	beq	a2,a5,8000870c <__strcat_chk+0x2c>
80008700:	00068023          	sb	zero,0(a3)
80008704:	00008067          	ret
80008708:	00061863          	bnez	a2,80008718 <__strcat_chk+0x38>
8000870c:	ff010113          	addi	sp,sp,-16
80008710:	00112623          	sw	ra,12(sp)
80008714:	f99fb0ef          	jal	ra,800046ac <__chk_fail>
80008718:	00170713          	addi	a4,a4,1
8000871c:	fff60613          	addi	a2,a2,-1
80008720:	fc5ff06f          	j	800086e4 <__strcat_chk+0x4>
80008724:	fec784e3          	beq	a5,a2,8000870c <__strcat_chk+0x2c>
80008728:	01068023          	sb	a6,0(a3)
8000872c:	00178793          	addi	a5,a5,1
80008730:	fbdff06f          	j	800086ec <__strcat_chk+0xc>

80008734 <strcpy>:
80008734:	00050793          	mv	a5,a0
80008738:	0005c703          	lbu	a4,0(a1)
8000873c:	00178793          	addi	a5,a5,1
80008740:	00158593          	addi	a1,a1,1
80008744:	fee78fa3          	sb	a4,-1(a5)
80008748:	fe0718e3          	bnez	a4,80008738 <strcpy+0x4>
8000874c:	00008067          	ret

80008750 <__strcpy_chk>:
80008750:	fe010113          	addi	sp,sp,-32
80008754:	00812c23          	sw	s0,24(sp)
80008758:	00050413          	mv	s0,a0
8000875c:	00058513          	mv	a0,a1
80008760:	00912a23          	sw	s1,20(sp)
80008764:	00b12623          	sw	a1,12(sp)
80008768:	00060493          	mv	s1,a2
8000876c:	00112e23          	sw	ra,28(sp)
80008770:	044000ef          	jal	ra,800087b4 <strlen>
80008774:	00150613          	addi	a2,a0,1
80008778:	00c12583          	lw	a1,12(sp)
8000877c:	00c4f463          	bgeu	s1,a2,80008784 <__strcpy_chk+0x34>
80008780:	f2dfb0ef          	jal	ra,800046ac <__chk_fail>
80008784:	00b46863          	bltu	s0,a1,80008794 <__strcpy_chk+0x44>
80008788:	00c587b3          	add	a5,a1,a2
8000878c:	fef46ae3          	bltu	s0,a5,80008780 <__strcpy_chk+0x30>
80008790:	00859663          	bne	a1,s0,8000879c <__strcpy_chk+0x4c>
80008794:	00c407b3          	add	a5,s0,a2
80008798:	fef5e4e3          	bltu	a1,a5,80008780 <__strcpy_chk+0x30>
8000879c:	00040513          	mv	a0,s0
800087a0:	01812403          	lw	s0,24(sp)
800087a4:	01c12083          	lw	ra,28(sp)
800087a8:	01412483          	lw	s1,20(sp)
800087ac:	02010113          	addi	sp,sp,32
800087b0:	a48f806f          	j	800009f8 <memcpy>

800087b4 <strlen>:
800087b4:	00050793          	mv	a5,a0
800087b8:	0007c703          	lbu	a4,0(a5)
800087bc:	00178793          	addi	a5,a5,1
800087c0:	fe071ce3          	bnez	a4,800087b8 <strlen+0x4>
800087c4:	40a78533          	sub	a0,a5,a0
800087c8:	fff50513          	addi	a0,a0,-1
800087cc:	00008067          	ret

800087d0 <strncat>:
800087d0:	00050793          	mv	a5,a0
800087d4:	0007c703          	lbu	a4,0(a5)
800087d8:	00071863          	bnez	a4,800087e8 <strncat+0x18>
800087dc:	fff60713          	addi	a4,a2,-1
800087e0:	00061c63          	bnez	a2,800087f8 <strncat+0x28>
800087e4:	00008067          	ret
800087e8:	00178793          	addi	a5,a5,1
800087ec:	fe9ff06f          	j	800087d4 <strncat+0x4>
800087f0:	02070063          	beqz	a4,80008810 <strncat+0x40>
800087f4:	fff70713          	addi	a4,a4,-1
800087f8:	0005c683          	lbu	a3,0(a1)
800087fc:	00158593          	addi	a1,a1,1
80008800:	00178793          	addi	a5,a5,1
80008804:	fed78fa3          	sb	a3,-1(a5)
80008808:	fe0694e3          	bnez	a3,800087f0 <strncat+0x20>
8000880c:	00008067          	ret
80008810:	00078023          	sb	zero,0(a5)
80008814:	00008067          	ret

80008818 <__strncat_chk>:
80008818:	04060e63          	beqz	a2,80008874 <__strncat_chk+0x5c>
8000881c:	00050793          	mv	a5,a0
80008820:	00c6fe63          	bgeu	a3,a2,8000883c <__strncat_chk+0x24>
80008824:	ff010113          	addi	sp,sp,-16
80008828:	00112623          	sw	ra,12(sp)
8000882c:	e81fb0ef          	jal	ra,800046ac <__chk_fail>
80008830:	fe068ae3          	beqz	a3,80008824 <__strncat_chk+0xc>
80008834:	00178793          	addi	a5,a5,1
80008838:	fff68693          	addi	a3,a3,-1
8000883c:	0007c703          	lbu	a4,0(a5)
80008840:	fe0718e3          	bnez	a4,80008830 <__strncat_chk+0x18>
80008844:	00068813          	mv	a6,a3
80008848:	00e588b3          	add	a7,a1,a4
8000884c:	0008c883          	lbu	a7,0(a7) # 1000000 <CONFIG_SRAM_SIZE+0xf00000>
80008850:	01178023          	sb	a7,0(a5)
80008854:	00088c63          	beqz	a7,8000886c <__strncat_chk+0x54>
80008858:	fff80813          	addi	a6,a6,-1 # ffff <__rom_region_size+0x56e3>
8000885c:	fcd704e3          	beq	a4,a3,80008824 <__strncat_chk+0xc>
80008860:	00170713          	addi	a4,a4,1
80008864:	00178793          	addi	a5,a5,1
80008868:	fee610e3          	bne	a2,a4,80008848 <__strncat_chk+0x30>
8000886c:	fa080ce3          	beqz	a6,80008824 <__strncat_chk+0xc>
80008870:	00078023          	sb	zero,0(a5)
80008874:	00008067          	ret

80008878 <strncpy>:
80008878:	00050793          	mv	a5,a0
8000887c:	00060e63          	beqz	a2,80008898 <strncpy+0x20>
80008880:	0005c703          	lbu	a4,0(a1)
80008884:	00158593          	addi	a1,a1,1
80008888:	00178793          	addi	a5,a5,1
8000888c:	fee78fa3          	sb	a4,-1(a5)
80008890:	fff60613          	addi	a2,a2,-1
80008894:	fe0714e3          	bnez	a4,8000887c <strncpy+0x4>
80008898:	00c78633          	add	a2,a5,a2
8000889c:	00c79463          	bne	a5,a2,800088a4 <strncpy+0x2c>
800088a0:	00008067          	ret
800088a4:	00178793          	addi	a5,a5,1
800088a8:	fe078fa3          	sb	zero,-1(a5)
800088ac:	ff1ff06f          	j	8000889c <strncpy+0x24>

800088b0 <strnlen>:
800088b0:	00b505b3          	add	a1,a0,a1
800088b4:	00050793          	mv	a5,a0
800088b8:	00b78663          	beq	a5,a1,800088c4 <strnlen+0x14>
800088bc:	0007c703          	lbu	a4,0(a5)
800088c0:	00071663          	bnez	a4,800088cc <strnlen+0x1c>
800088c4:	40a78533          	sub	a0,a5,a0
800088c8:	00008067          	ret
800088cc:	00178793          	addi	a5,a5,1
800088d0:	fe9ff06f          	j	800088b8 <strnlen+0x8>

800088d4 <_strtoul_l.constprop.0>:
800088d4:	8000a8b7          	lui	a7,0x8000a
800088d8:	00050f13          	mv	t5,a0
800088dc:	00058793          	mv	a5,a1
800088e0:	78588893          	addi	a7,a7,1925 # 8000a785 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a786>
800088e4:	00078313          	mv	t1,a5
800088e8:	0007c703          	lbu	a4,0(a5)
800088ec:	00178793          	addi	a5,a5,1
800088f0:	01170533          	add	a0,a4,a7
800088f4:	00054803          	lbu	a6,0(a0)
800088f8:	00887813          	andi	a6,a6,8
800088fc:	fe0814e3          	bnez	a6,800088e4 <_strtoul_l.constprop.0+0x10>
80008900:	02d00513          	li	a0,45
80008904:	06a71e63          	bne	a4,a0,80008980 <_strtoul_l.constprop.0+0xac>
80008908:	0007c703          	lbu	a4,0(a5)
8000890c:	00100f93          	li	t6,1
80008910:	00230793          	addi	a5,t1,2 # 1002 <CONFIG_ISR_STACK_SIZE+0x2>
80008914:	08069263          	bnez	a3,80008998 <_strtoul_l.constprop.0+0xc4>
80008918:	03000693          	li	a3,48
8000891c:	0ad70663          	beq	a4,a3,800089c8 <_strtoul_l.constprop.0+0xf4>
80008920:	00a00693          	li	a3,10
80008924:	fff00813          	li	a6,-1
80008928:	02d85e33          	divu	t3,a6,a3
8000892c:	00000893          	li	a7,0
80008930:	00000513          	li	a0,0
80008934:	00900293          	li	t0,9
80008938:	01900e93          	li	t4,25
8000893c:	fff00393          	li	t2,-1
80008940:	02d87333          	remu	t1,a6,a3
80008944:	fd070813          	addi	a6,a4,-48
80008948:	0902ea63          	bltu	t0,a6,800089dc <_strtoul_l.constprop.0+0x108>
8000894c:	00080713          	mv	a4,a6
80008950:	0ad75663          	bge	a4,a3,800089fc <_strtoul_l.constprop.0+0x128>
80008954:	02788063          	beq	a7,t2,80008974 <_strtoul_l.constprop.0+0xa0>
80008958:	fff00893          	li	a7,-1
8000895c:	00ae6c63          	bltu	t3,a0,80008974 <_strtoul_l.constprop.0+0xa0>
80008960:	00ae1463          	bne	t3,a0,80008968 <_strtoul_l.constprop.0+0x94>
80008964:	00e34863          	blt	t1,a4,80008974 <_strtoul_l.constprop.0+0xa0>
80008968:	00100893          	li	a7,1
8000896c:	02a68533          	mul	a0,a3,a0
80008970:	00a70533          	add	a0,a4,a0
80008974:	00178793          	addi	a5,a5,1
80008978:	fff7c703          	lbu	a4,-1(a5)
8000897c:	fc9ff06f          	j	80008944 <_strtoul_l.constprop.0+0x70>
80008980:	02b00513          	li	a0,43
80008984:	00000f93          	li	t6,0
80008988:	f8a716e3          	bne	a4,a0,80008914 <_strtoul_l.constprop.0+0x40>
8000898c:	0007c703          	lbu	a4,0(a5)
80008990:	00230793          	addi	a5,t1,2
80008994:	f81ff06f          	j	80008914 <_strtoul_l.constprop.0+0x40>
80008998:	01000513          	li	a0,16
8000899c:	f8a694e3          	bne	a3,a0,80008924 <_strtoul_l.constprop.0+0x50>
800089a0:	03000513          	li	a0,48
800089a4:	f8a710e3          	bne	a4,a0,80008924 <_strtoul_l.constprop.0+0x50>
800089a8:	0007c803          	lbu	a6,0(a5)
800089ac:	05800513          	li	a0,88
800089b0:	0df87813          	andi	a6,a6,223
800089b4:	f6a818e3          	bne	a6,a0,80008924 <_strtoul_l.constprop.0+0x50>
800089b8:	0017c703          	lbu	a4,1(a5)
800089bc:	01000693          	li	a3,16
800089c0:	00278793          	addi	a5,a5,2
800089c4:	f61ff06f          	j	80008924 <_strtoul_l.constprop.0+0x50>
800089c8:	0007c803          	lbu	a6,0(a5)
800089cc:	05800513          	li	a0,88
800089d0:	00800693          	li	a3,8
800089d4:	0df87813          	andi	a6,a6,223
800089d8:	fddff06f          	j	800089b4 <_strtoul_l.constprop.0+0xe0>
800089dc:	fbf70813          	addi	a6,a4,-65
800089e0:	010ee663          	bltu	t4,a6,800089ec <_strtoul_l.constprop.0+0x118>
800089e4:	fc970713          	addi	a4,a4,-55
800089e8:	f69ff06f          	j	80008950 <_strtoul_l.constprop.0+0x7c>
800089ec:	f9f70813          	addi	a6,a4,-97
800089f0:	010ee663          	bltu	t4,a6,800089fc <_strtoul_l.constprop.0+0x128>
800089f4:	fa970713          	addi	a4,a4,-87
800089f8:	f59ff06f          	j	80008950 <_strtoul_l.constprop.0+0x7c>
800089fc:	fff00713          	li	a4,-1
80008a00:	00e89c63          	bne	a7,a4,80008a18 <_strtoul_l.constprop.0+0x144>
80008a04:	02200713          	li	a4,34
80008a08:	00ef2023          	sw	a4,0(t5)
80008a0c:	fff00513          	li	a0,-1
80008a10:	00061c63          	bnez	a2,80008a28 <_strtoul_l.constprop.0+0x154>
80008a14:	00008067          	ret
80008a18:	000f8463          	beqz	t6,80008a20 <_strtoul_l.constprop.0+0x14c>
80008a1c:	40a00533          	neg	a0,a0
80008a20:	00060863          	beqz	a2,80008a30 <_strtoul_l.constprop.0+0x15c>
80008a24:	00088463          	beqz	a7,80008a2c <_strtoul_l.constprop.0+0x158>
80008a28:	fff78593          	addi	a1,a5,-1
80008a2c:	00b62023          	sw	a1,0(a2)
80008a30:	00008067          	ret

80008a34 <strtoul>:
80008a34:	00060693          	mv	a3,a2
80008a38:	00058613          	mv	a2,a1
80008a3c:	00050593          	mv	a1,a0
80008a40:	82c1a503          	lw	a0,-2004(gp) # 8000d914 <_impure_ptr>
80008a44:	e91ff06f          	j	800088d4 <_strtoul_l.constprop.0>

80008a48 <__malloc_lock>:
80008a48:	83418513          	addi	a0,gp,-1996 # 8000d91c <__lock___malloc_recursive_mutex>
80008a4c:	bc1fb06f          	j	8000460c <__retarget_lock_acquire_recursive>

80008a50 <__malloc_unlock>:
80008a50:	83418513          	addi	a0,gp,-1996 # 8000d91c <__lock___malloc_recursive_mutex>
80008a54:	c0dfb06f          	j	80004660 <__retarget_lock_release_recursive>

80008a58 <__ssputs_r>:
80008a58:	fe010113          	addi	sp,sp,-32
80008a5c:	01212823          	sw	s2,16(sp)
80008a60:	0085a903          	lw	s2,8(a1)
80008a64:	00812c23          	sw	s0,24(sp)
80008a68:	01312623          	sw	s3,12(sp)
80008a6c:	01512223          	sw	s5,4(sp)
80008a70:	01612023          	sw	s6,0(sp)
80008a74:	00112e23          	sw	ra,28(sp)
80008a78:	00912a23          	sw	s1,20(sp)
80008a7c:	01412423          	sw	s4,8(sp)
80008a80:	0005aa83          	lw	s5,0(a1)
80008a84:	00058413          	mv	s0,a1
80008a88:	00060b13          	mv	s6,a2
80008a8c:	00068993          	mv	s3,a3
80008a90:	0926ec63          	bltu	a3,s2,80008b28 <__ssputs_r+0xd0>
80008a94:	00c59783          	lh	a5,12(a1)
80008a98:	4807f713          	andi	a4,a5,1152
80008a9c:	08070463          	beqz	a4,80008b24 <__ssputs_r+0xcc>
80008aa0:	01442703          	lw	a4,20(s0)
80008aa4:	00300493          	li	s1,3
80008aa8:	0105a583          	lw	a1,16(a1)
80008aac:	02e484b3          	mul	s1,s1,a4
80008ab0:	00200713          	li	a4,2
80008ab4:	40ba8ab3          	sub	s5,s5,a1
80008ab8:	00050a13          	mv	s4,a0
80008abc:	02e4c4b3          	div	s1,s1,a4
80008ac0:	00168713          	addi	a4,a3,1
80008ac4:	01570733          	add	a4,a4,s5
80008ac8:	00e4f463          	bgeu	s1,a4,80008ad0 <__ssputs_r+0x78>
80008acc:	00070493          	mv	s1,a4
80008ad0:	4007f793          	andi	a5,a5,1024
80008ad4:	0a078663          	beqz	a5,80008b80 <__ssputs_r+0x128>
80008ad8:	00048593          	mv	a1,s1
80008adc:	000a0513          	mv	a0,s4
80008ae0:	985ff0ef          	jal	ra,80008464 <_malloc_r>
80008ae4:	00050913          	mv	s2,a0
80008ae8:	0a050c63          	beqz	a0,80008ba0 <__ssputs_r+0x148>
80008aec:	01042583          	lw	a1,16(s0)
80008af0:	000a8613          	mv	a2,s5
80008af4:	f05f70ef          	jal	ra,800009f8 <memcpy>
80008af8:	00c45783          	lhu	a5,12(s0)
80008afc:	b7f7f793          	andi	a5,a5,-1153
80008b00:	0807e793          	ori	a5,a5,128
80008b04:	00f41623          	sh	a5,12(s0)
80008b08:	01242823          	sw	s2,16(s0)
80008b0c:	00942a23          	sw	s1,20(s0)
80008b10:	01590933          	add	s2,s2,s5
80008b14:	415484b3          	sub	s1,s1,s5
80008b18:	01242023          	sw	s2,0(s0)
80008b1c:	00942423          	sw	s1,8(s0)
80008b20:	00098913          	mv	s2,s3
80008b24:	0129f463          	bgeu	s3,s2,80008b2c <__ssputs_r+0xd4>
80008b28:	00098913          	mv	s2,s3
80008b2c:	00042503          	lw	a0,0(s0)
80008b30:	00090613          	mv	a2,s2
80008b34:	000b0593          	mv	a1,s6
80008b38:	f85f70ef          	jal	ra,80000abc <memmove>
80008b3c:	00842783          	lw	a5,8(s0)
80008b40:	00000513          	li	a0,0
80008b44:	412787b3          	sub	a5,a5,s2
80008b48:	00f42423          	sw	a5,8(s0)
80008b4c:	00042783          	lw	a5,0(s0)
80008b50:	012787b3          	add	a5,a5,s2
80008b54:	00f42023          	sw	a5,0(s0)
80008b58:	01c12083          	lw	ra,28(sp)
80008b5c:	01812403          	lw	s0,24(sp)
80008b60:	01412483          	lw	s1,20(sp)
80008b64:	01012903          	lw	s2,16(sp)
80008b68:	00c12983          	lw	s3,12(sp)
80008b6c:	00812a03          	lw	s4,8(sp)
80008b70:	00412a83          	lw	s5,4(sp)
80008b74:	00012b03          	lw	s6,0(sp)
80008b78:	02010113          	addi	sp,sp,32
80008b7c:	00008067          	ret
80008b80:	00048613          	mv	a2,s1
80008b84:	000a0513          	mv	a0,s4
80008b88:	161000ef          	jal	ra,800094e8 <_realloc_r>
80008b8c:	00050913          	mv	s2,a0
80008b90:	f6051ce3          	bnez	a0,80008b08 <__ssputs_r+0xb0>
80008b94:	01042583          	lw	a1,16(s0)
80008b98:	000a0513          	mv	a0,s4
80008b9c:	fccff0ef          	jal	ra,80008368 <_free_r>
80008ba0:	00c00793          	li	a5,12
80008ba4:	00fa2023          	sw	a5,0(s4)
80008ba8:	00c45783          	lhu	a5,12(s0)
80008bac:	fff00513          	li	a0,-1
80008bb0:	0407e793          	ori	a5,a5,64
80008bb4:	00f41623          	sh	a5,12(s0)
80008bb8:	fa1ff06f          	j	80008b58 <__ssputs_r+0x100>

80008bbc <_svfiprintf_r>:
80008bbc:	00c5d783          	lhu	a5,12(a1)
80008bc0:	f5010113          	addi	sp,sp,-176
80008bc4:	0a812423          	sw	s0,168(sp)
80008bc8:	0a912223          	sw	s1,164(sp)
80008bcc:	0b212023          	sw	s2,160(sp)
80008bd0:	09412c23          	sw	s4,152(sp)
80008bd4:	0a112623          	sw	ra,172(sp)
80008bd8:	09312e23          	sw	s3,156(sp)
80008bdc:	09512a23          	sw	s5,148(sp)
80008be0:	09612823          	sw	s6,144(sp)
80008be4:	09712623          	sw	s7,140(sp)
80008be8:	09812423          	sw	s8,136(sp)
80008bec:	09912223          	sw	s9,132(sp)
80008bf0:	09a12023          	sw	s10,128(sp)
80008bf4:	07b12e23          	sw	s11,124(sp)
80008bf8:	0807f793          	andi	a5,a5,128
80008bfc:	00050a13          	mv	s4,a0
80008c00:	00058913          	mv	s2,a1
80008c04:	00060493          	mv	s1,a2
80008c08:	00068413          	mv	s0,a3
80008c0c:	06078863          	beqz	a5,80008c7c <_svfiprintf_r+0xc0>
80008c10:	0105a783          	lw	a5,16(a1)
80008c14:	06079463          	bnez	a5,80008c7c <_svfiprintf_r+0xc0>
80008c18:	04000593          	li	a1,64
80008c1c:	849ff0ef          	jal	ra,80008464 <_malloc_r>
80008c20:	00a92023          	sw	a0,0(s2)
80008c24:	00a92823          	sw	a0,16(s2)
80008c28:	04051663          	bnez	a0,80008c74 <_svfiprintf_r+0xb8>
80008c2c:	00c00793          	li	a5,12
80008c30:	00fa2023          	sw	a5,0(s4)
80008c34:	fff00513          	li	a0,-1
80008c38:	0ac12083          	lw	ra,172(sp)
80008c3c:	0a812403          	lw	s0,168(sp)
80008c40:	0a412483          	lw	s1,164(sp)
80008c44:	0a012903          	lw	s2,160(sp)
80008c48:	09c12983          	lw	s3,156(sp)
80008c4c:	09812a03          	lw	s4,152(sp)
80008c50:	09412a83          	lw	s5,148(sp)
80008c54:	09012b03          	lw	s6,144(sp)
80008c58:	08c12b83          	lw	s7,140(sp)
80008c5c:	08812c03          	lw	s8,136(sp)
80008c60:	08412c83          	lw	s9,132(sp)
80008c64:	08012d03          	lw	s10,128(sp)
80008c68:	07c12d83          	lw	s11,124(sp)
80008c6c:	0b010113          	addi	sp,sp,176
80008c70:	00008067          	ret
80008c74:	04000793          	li	a5,64
80008c78:	00f92a23          	sw	a5,20(s2)
80008c7c:	02000793          	li	a5,32
80008c80:	02f104a3          	sb	a5,41(sp)
80008c84:	03000793          	li	a5,48
80008c88:	02012223          	sw	zero,36(sp)
80008c8c:	02f10523          	sb	a5,42(sp)
80008c90:	00812623          	sw	s0,12(sp)
80008c94:	02500c93          	li	s9,37
80008c98:	8000bb37          	lui	s6,0x8000b
80008c9c:	8000bbb7          	lui	s7,0x8000b
80008ca0:	8000bd37          	lui	s10,0x8000b
80008ca4:	80009c37          	lui	s8,0x80009
80008ca8:	00000a93          	li	s5,0
80008cac:	00048413          	mv	s0,s1
80008cb0:	00044783          	lbu	a5,0(s0)
80008cb4:	00078463          	beqz	a5,80008cbc <_svfiprintf_r+0x100>
80008cb8:	0d979c63          	bne	a5,s9,80008d90 <_svfiprintf_r+0x1d4>
80008cbc:	40940db3          	sub	s11,s0,s1
80008cc0:	02940663          	beq	s0,s1,80008cec <_svfiprintf_r+0x130>
80008cc4:	000d8693          	mv	a3,s11
80008cc8:	00048613          	mv	a2,s1
80008ccc:	00090593          	mv	a1,s2
80008cd0:	000a0513          	mv	a0,s4
80008cd4:	d85ff0ef          	jal	ra,80008a58 <__ssputs_r>
80008cd8:	fff00793          	li	a5,-1
80008cdc:	24f50463          	beq	a0,a5,80008f24 <_svfiprintf_r+0x368>
80008ce0:	02412783          	lw	a5,36(sp)
80008ce4:	01b787b3          	add	a5,a5,s11
80008ce8:	02f12223          	sw	a5,36(sp)
80008cec:	00044783          	lbu	a5,0(s0)
80008cf0:	22078a63          	beqz	a5,80008f24 <_svfiprintf_r+0x368>
80008cf4:	fff00793          	li	a5,-1
80008cf8:	00140493          	addi	s1,s0,1
80008cfc:	00012823          	sw	zero,16(sp)
80008d00:	00012e23          	sw	zero,28(sp)
80008d04:	00f12a23          	sw	a5,20(sp)
80008d08:	00012c23          	sw	zero,24(sp)
80008d0c:	040109a3          	sb	zero,83(sp)
80008d10:	06012423          	sw	zero,104(sp)
80008d14:	00100d93          	li	s11,1
80008d18:	0004c583          	lbu	a1,0(s1)
80008d1c:	00500613          	li	a2,5
80008d20:	888b0513          	addi	a0,s6,-1912 # 8000a888 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a889>
80008d24:	7a0000ef          	jal	ra,800094c4 <memchr>
80008d28:	01012783          	lw	a5,16(sp)
80008d2c:	00148413          	addi	s0,s1,1
80008d30:	06051463          	bnez	a0,80008d98 <_svfiprintf_r+0x1dc>
80008d34:	0107f713          	andi	a4,a5,16
80008d38:	00070663          	beqz	a4,80008d44 <_svfiprintf_r+0x188>
80008d3c:	02000713          	li	a4,32
80008d40:	04e109a3          	sb	a4,83(sp)
80008d44:	0087f713          	andi	a4,a5,8
80008d48:	00070663          	beqz	a4,80008d54 <_svfiprintf_r+0x198>
80008d4c:	02b00713          	li	a4,43
80008d50:	04e109a3          	sb	a4,83(sp)
80008d54:	0004c683          	lbu	a3,0(s1)
80008d58:	02a00713          	li	a4,42
80008d5c:	04e68c63          	beq	a3,a4,80008db4 <_svfiprintf_r+0x1f8>
80008d60:	01c12783          	lw	a5,28(sp)
80008d64:	00048413          	mv	s0,s1
80008d68:	00000693          	li	a3,0
80008d6c:	00900613          	li	a2,9
80008d70:	00a00513          	li	a0,10
80008d74:	00044703          	lbu	a4,0(s0)
80008d78:	00140593          	addi	a1,s0,1
80008d7c:	fd070713          	addi	a4,a4,-48
80008d80:	08e67e63          	bgeu	a2,a4,80008e1c <_svfiprintf_r+0x260>
80008d84:	04068463          	beqz	a3,80008dcc <_svfiprintf_r+0x210>
80008d88:	00f12e23          	sw	a5,28(sp)
80008d8c:	0400006f          	j	80008dcc <_svfiprintf_r+0x210>
80008d90:	00140413          	addi	s0,s0,1
80008d94:	f1dff06f          	j	80008cb0 <_svfiprintf_r+0xf4>
80008d98:	888b0713          	addi	a4,s6,-1912
80008d9c:	40e50533          	sub	a0,a0,a4
80008da0:	00ad9533          	sll	a0,s11,a0
80008da4:	00a7e7b3          	or	a5,a5,a0
80008da8:	00f12823          	sw	a5,16(sp)
80008dac:	00040493          	mv	s1,s0
80008db0:	f69ff06f          	j	80008d18 <_svfiprintf_r+0x15c>
80008db4:	00c12703          	lw	a4,12(sp)
80008db8:	00470693          	addi	a3,a4,4
80008dbc:	00072703          	lw	a4,0(a4)
80008dc0:	00d12623          	sw	a3,12(sp)
80008dc4:	04074263          	bltz	a4,80008e08 <_svfiprintf_r+0x24c>
80008dc8:	00e12e23          	sw	a4,28(sp)
80008dcc:	00044703          	lbu	a4,0(s0)
80008dd0:	02e00793          	li	a5,46
80008dd4:	08f71463          	bne	a4,a5,80008e5c <_svfiprintf_r+0x2a0>
80008dd8:	00144703          	lbu	a4,1(s0)
80008ddc:	02a00793          	li	a5,42
80008de0:	04f71863          	bne	a4,a5,80008e30 <_svfiprintf_r+0x274>
80008de4:	00c12783          	lw	a5,12(sp)
80008de8:	00240413          	addi	s0,s0,2
80008dec:	00478713          	addi	a4,a5,4
80008df0:	0007a783          	lw	a5,0(a5)
80008df4:	00e12623          	sw	a4,12(sp)
80008df8:	0007d463          	bgez	a5,80008e00 <_svfiprintf_r+0x244>
80008dfc:	fff00793          	li	a5,-1
80008e00:	00f12a23          	sw	a5,20(sp)
80008e04:	0580006f          	j	80008e5c <_svfiprintf_r+0x2a0>
80008e08:	40e00733          	neg	a4,a4
80008e0c:	0027e793          	ori	a5,a5,2
80008e10:	00e12e23          	sw	a4,28(sp)
80008e14:	00f12823          	sw	a5,16(sp)
80008e18:	fb5ff06f          	j	80008dcc <_svfiprintf_r+0x210>
80008e1c:	02a787b3          	mul	a5,a5,a0
80008e20:	00058413          	mv	s0,a1
80008e24:	00100693          	li	a3,1
80008e28:	00e787b3          	add	a5,a5,a4
80008e2c:	f49ff06f          	j	80008d74 <_svfiprintf_r+0x1b8>
80008e30:	00140413          	addi	s0,s0,1
80008e34:	00012a23          	sw	zero,20(sp)
80008e38:	00000693          	li	a3,0
80008e3c:	00000793          	li	a5,0
80008e40:	00900613          	li	a2,9
80008e44:	00a00513          	li	a0,10
80008e48:	00044703          	lbu	a4,0(s0)
80008e4c:	00140593          	addi	a1,s0,1
80008e50:	fd070713          	addi	a4,a4,-48
80008e54:	08e67263          	bgeu	a2,a4,80008ed8 <_svfiprintf_r+0x31c>
80008e58:	fa0694e3          	bnez	a3,80008e00 <_svfiprintf_r+0x244>
80008e5c:	00044583          	lbu	a1,0(s0)
80008e60:	00300613          	li	a2,3
80008e64:	890b8513          	addi	a0,s7,-1904 # 8000a890 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a891>
80008e68:	65c000ef          	jal	ra,800094c4 <memchr>
80008e6c:	02050263          	beqz	a0,80008e90 <_svfiprintf_r+0x2d4>
80008e70:	890b8793          	addi	a5,s7,-1904
80008e74:	40f50533          	sub	a0,a0,a5
80008e78:	01012783          	lw	a5,16(sp)
80008e7c:	04000713          	li	a4,64
80008e80:	00a71733          	sll	a4,a4,a0
80008e84:	00e7e7b3          	or	a5,a5,a4
80008e88:	00140413          	addi	s0,s0,1
80008e8c:	00f12823          	sw	a5,16(sp)
80008e90:	00044583          	lbu	a1,0(s0)
80008e94:	00600613          	li	a2,6
80008e98:	894d0513          	addi	a0,s10,-1900 # 8000a894 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a895>
80008e9c:	00140493          	addi	s1,s0,1
80008ea0:	02b10423          	sb	a1,40(sp)
80008ea4:	620000ef          	jal	ra,800094c4 <memchr>
80008ea8:	08050863          	beqz	a0,80008f38 <_svfiprintf_r+0x37c>
80008eac:	040a9863          	bnez	s5,80008efc <_svfiprintf_r+0x340>
80008eb0:	01012703          	lw	a4,16(sp)
80008eb4:	00c12783          	lw	a5,12(sp)
80008eb8:	10077713          	andi	a4,a4,256
80008ebc:	02070863          	beqz	a4,80008eec <_svfiprintf_r+0x330>
80008ec0:	00478793          	addi	a5,a5,4
80008ec4:	00f12623          	sw	a5,12(sp)
80008ec8:	02412783          	lw	a5,36(sp)
80008ecc:	013787b3          	add	a5,a5,s3
80008ed0:	02f12223          	sw	a5,36(sp)
80008ed4:	dd9ff06f          	j	80008cac <_svfiprintf_r+0xf0>
80008ed8:	02a787b3          	mul	a5,a5,a0
80008edc:	00058413          	mv	s0,a1
80008ee0:	00100693          	li	a3,1
80008ee4:	00e787b3          	add	a5,a5,a4
80008ee8:	f61ff06f          	j	80008e48 <_svfiprintf_r+0x28c>
80008eec:	00778793          	addi	a5,a5,7
80008ef0:	ff87f793          	andi	a5,a5,-8
80008ef4:	00878793          	addi	a5,a5,8
80008ef8:	fcdff06f          	j	80008ec4 <_svfiprintf_r+0x308>
80008efc:	00c10713          	addi	a4,sp,12
80008f00:	a58c0693          	addi	a3,s8,-1448 # 80008a58 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008a59>
80008f04:	00090613          	mv	a2,s2
80008f08:	01010593          	addi	a1,sp,16
80008f0c:	000a0513          	mv	a0,s4
80008f10:	00000097          	auipc	ra,0x0
80008f14:	000000e7          	jalr	zero # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
80008f18:	fff00793          	li	a5,-1
80008f1c:	00050993          	mv	s3,a0
80008f20:	faf514e3          	bne	a0,a5,80008ec8 <_svfiprintf_r+0x30c>
80008f24:	00c95783          	lhu	a5,12(s2)
80008f28:	0407f793          	andi	a5,a5,64
80008f2c:	d00794e3          	bnez	a5,80008c34 <_svfiprintf_r+0x78>
80008f30:	02412503          	lw	a0,36(sp)
80008f34:	d05ff06f          	j	80008c38 <_svfiprintf_r+0x7c>
80008f38:	00c10713          	addi	a4,sp,12
80008f3c:	a58c0693          	addi	a3,s8,-1448
80008f40:	00090613          	mv	a2,s2
80008f44:	01010593          	addi	a1,sp,16
80008f48:	000a0513          	mv	a0,s4
80008f4c:	1b8000ef          	jal	ra,80009104 <_printf_i>
80008f50:	fc9ff06f          	j	80008f18 <_svfiprintf_r+0x35c>

80008f54 <_printf_common>:
80008f54:	fd010113          	addi	sp,sp,-48
80008f58:	01512a23          	sw	s5,20(sp)
80008f5c:	0105a783          	lw	a5,16(a1)
80008f60:	00070a93          	mv	s5,a4
80008f64:	0085a703          	lw	a4,8(a1)
80008f68:	02812423          	sw	s0,40(sp)
80008f6c:	03212023          	sw	s2,32(sp)
80008f70:	01312e23          	sw	s3,28(sp)
80008f74:	01412c23          	sw	s4,24(sp)
80008f78:	02112623          	sw	ra,44(sp)
80008f7c:	02912223          	sw	s1,36(sp)
80008f80:	01612823          	sw	s6,16(sp)
80008f84:	01712623          	sw	s7,12(sp)
80008f88:	00050993          	mv	s3,a0
80008f8c:	00058413          	mv	s0,a1
80008f90:	00060913          	mv	s2,a2
80008f94:	00068a13          	mv	s4,a3
80008f98:	00e7d463          	bge	a5,a4,80008fa0 <_printf_common+0x4c>
80008f9c:	00070793          	mv	a5,a4
80008fa0:	00f92023          	sw	a5,0(s2)
80008fa4:	04344703          	lbu	a4,67(s0)
80008fa8:	00070663          	beqz	a4,80008fb4 <_printf_common+0x60>
80008fac:	00178793          	addi	a5,a5,1
80008fb0:	00f92023          	sw	a5,0(s2)
80008fb4:	00042783          	lw	a5,0(s0)
80008fb8:	0207f793          	andi	a5,a5,32
80008fbc:	00078863          	beqz	a5,80008fcc <_printf_common+0x78>
80008fc0:	00092783          	lw	a5,0(s2)
80008fc4:	00278793          	addi	a5,a5,2
80008fc8:	00f92023          	sw	a5,0(s2)
80008fcc:	00042483          	lw	s1,0(s0)
80008fd0:	0064f493          	andi	s1,s1,6
80008fd4:	00049e63          	bnez	s1,80008ff0 <_printf_common+0x9c>
80008fd8:	01940b13          	addi	s6,s0,25
80008fdc:	fff00b93          	li	s7,-1
80008fe0:	00c42783          	lw	a5,12(s0)
80008fe4:	00092703          	lw	a4,0(s2)
80008fe8:	40e787b3          	sub	a5,a5,a4
80008fec:	08f4c263          	blt	s1,a5,80009070 <_printf_common+0x11c>
80008ff0:	04344783          	lbu	a5,67(s0)
80008ff4:	00f036b3          	snez	a3,a5
80008ff8:	00042783          	lw	a5,0(s0)
80008ffc:	0207f793          	andi	a5,a5,32
80009000:	0c079063          	bnez	a5,800090c0 <_printf_common+0x16c>
80009004:	04340613          	addi	a2,s0,67
80009008:	000a0593          	mv	a1,s4
8000900c:	00098513          	mv	a0,s3
80009010:	000a80e7          	jalr	s5
80009014:	fff00793          	li	a5,-1
80009018:	06f50863          	beq	a0,a5,80009088 <_printf_common+0x134>
8000901c:	00042783          	lw	a5,0(s0)
80009020:	00400713          	li	a4,4
80009024:	00000493          	li	s1,0
80009028:	0067f793          	andi	a5,a5,6
8000902c:	00e79c63          	bne	a5,a4,80009044 <_printf_common+0xf0>
80009030:	00c42483          	lw	s1,12(s0)
80009034:	00092783          	lw	a5,0(s2)
80009038:	40f484b3          	sub	s1,s1,a5
8000903c:	0004d463          	bgez	s1,80009044 <_printf_common+0xf0>
80009040:	00000493          	li	s1,0
80009044:	00842783          	lw	a5,8(s0)
80009048:	01042703          	lw	a4,16(s0)
8000904c:	00f75663          	bge	a4,a5,80009058 <_printf_common+0x104>
80009050:	40e787b3          	sub	a5,a5,a4
80009054:	00f484b3          	add	s1,s1,a5
80009058:	00000913          	li	s2,0
8000905c:	01a40413          	addi	s0,s0,26
80009060:	fff00b13          	li	s6,-1
80009064:	09249063          	bne	s1,s2,800090e4 <_printf_common+0x190>
80009068:	00000513          	li	a0,0
8000906c:	0200006f          	j	8000908c <_printf_common+0x138>
80009070:	00100693          	li	a3,1
80009074:	000b0613          	mv	a2,s6
80009078:	000a0593          	mv	a1,s4
8000907c:	00098513          	mv	a0,s3
80009080:	000a80e7          	jalr	s5
80009084:	03751a63          	bne	a0,s7,800090b8 <_printf_common+0x164>
80009088:	fff00513          	li	a0,-1
8000908c:	02c12083          	lw	ra,44(sp)
80009090:	02812403          	lw	s0,40(sp)
80009094:	02412483          	lw	s1,36(sp)
80009098:	02012903          	lw	s2,32(sp)
8000909c:	01c12983          	lw	s3,28(sp)
800090a0:	01812a03          	lw	s4,24(sp)
800090a4:	01412a83          	lw	s5,20(sp)
800090a8:	01012b03          	lw	s6,16(sp)
800090ac:	00c12b83          	lw	s7,12(sp)
800090b0:	03010113          	addi	sp,sp,48
800090b4:	00008067          	ret
800090b8:	00148493          	addi	s1,s1,1
800090bc:	f25ff06f          	j	80008fe0 <_printf_common+0x8c>
800090c0:	00d40733          	add	a4,s0,a3
800090c4:	03000613          	li	a2,48
800090c8:	04c701a3          	sb	a2,67(a4)
800090cc:	04544703          	lbu	a4,69(s0)
800090d0:	00168793          	addi	a5,a3,1
800090d4:	00f407b3          	add	a5,s0,a5
800090d8:	00268693          	addi	a3,a3,2
800090dc:	04e781a3          	sb	a4,67(a5)
800090e0:	f25ff06f          	j	80009004 <_printf_common+0xb0>
800090e4:	00100693          	li	a3,1
800090e8:	00040613          	mv	a2,s0
800090ec:	000a0593          	mv	a1,s4
800090f0:	00098513          	mv	a0,s3
800090f4:	000a80e7          	jalr	s5
800090f8:	f96508e3          	beq	a0,s6,80009088 <_printf_common+0x134>
800090fc:	00190913          	addi	s2,s2,1
80009100:	f65ff06f          	j	80009064 <_printf_common+0x110>

80009104 <_printf_i>:
80009104:	fd010113          	addi	sp,sp,-48
80009108:	02812423          	sw	s0,40(sp)
8000910c:	02912223          	sw	s1,36(sp)
80009110:	03212023          	sw	s2,32(sp)
80009114:	01312e23          	sw	s3,28(sp)
80009118:	02112623          	sw	ra,44(sp)
8000911c:	01412c23          	sw	s4,24(sp)
80009120:	01512a23          	sw	s5,20(sp)
80009124:	01612823          	sw	s6,16(sp)
80009128:	0185c883          	lbu	a7,24(a1)
8000912c:	07800793          	li	a5,120
80009130:	00050493          	mv	s1,a0
80009134:	00058413          	mv	s0,a1
80009138:	00060913          	mv	s2,a2
8000913c:	00068993          	mv	s3,a3
80009140:	0117ee63          	bltu	a5,a7,8000915c <_printf_i+0x58>
80009144:	06200793          	li	a5,98
80009148:	04358693          	addi	a3,a1,67
8000914c:	0117ee63          	bltu	a5,a7,80009168 <_printf_i+0x64>
80009150:	2a088a63          	beqz	a7,80009404 <_printf_i+0x300>
80009154:	05800793          	li	a5,88
80009158:	20f88a63          	beq	a7,a5,8000936c <_printf_i+0x268>
8000915c:	04240a93          	addi	s5,s0,66
80009160:	05140123          	sb	a7,66(s0)
80009164:	0440006f          	j	800091a8 <_printf_i+0xa4>
80009168:	f9d88793          	addi	a5,a7,-99
8000916c:	0ff7f793          	zext.b	a5,a5
80009170:	01500613          	li	a2,21
80009174:	fef664e3          	bltu	a2,a5,8000915c <_printf_i+0x58>
80009178:	8000b637          	lui	a2,0x8000b
8000917c:	00279793          	slli	a5,a5,0x2
80009180:	8c460613          	addi	a2,a2,-1852 # 8000a8c4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a8c5>
80009184:	00c787b3          	add	a5,a5,a2
80009188:	0007a783          	lw	a5,0(a5)
8000918c:	00078067          	jr	a5
80009190:	00072783          	lw	a5,0(a4)
80009194:	04258a93          	addi	s5,a1,66
80009198:	00478693          	addi	a3,a5,4
8000919c:	0007a783          	lw	a5,0(a5)
800091a0:	00d72023          	sw	a3,0(a4)
800091a4:	04f58123          	sb	a5,66(a1)
800091a8:	00100793          	li	a5,1
800091ac:	2940006f          	j	80009440 <_printf_i+0x33c>
800091b0:	0005a603          	lw	a2,0(a1)
800091b4:	00072783          	lw	a5,0(a4)
800091b8:	08067513          	andi	a0,a2,128
800091bc:	00478593          	addi	a1,a5,4
800091c0:	04050e63          	beqz	a0,8000921c <_printf_i+0x118>
800091c4:	0007a783          	lw	a5,0(a5)
800091c8:	00b72023          	sw	a1,0(a4)
800091cc:	8000b737          	lui	a4,0x8000b
800091d0:	00442583          	lw	a1,4(s0)
800091d4:	89c70813          	addi	a6,a4,-1892 # 8000a89c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a89d>
800091d8:	1e07d263          	bgez	a5,800093bc <_printf_i+0x2b8>
800091dc:	02d00713          	li	a4,45
800091e0:	04e401a3          	sb	a4,67(s0)
800091e4:	00b42423          	sw	a1,8(s0)
800091e8:	0405d863          	bgez	a1,80009238 <_printf_i+0x134>
800091ec:	40f007b3          	neg	a5,a5
800091f0:	00a00713          	li	a4,10
800091f4:	00068a93          	mv	s5,a3
800091f8:	02e7f633          	remu	a2,a5,a4
800091fc:	fffa8a93          	addi	s5,s5,-1
80009200:	00c80633          	add	a2,a6,a2
80009204:	00064603          	lbu	a2,0(a2)
80009208:	00ca8023          	sb	a2,0(s5)
8000920c:	00078613          	mv	a2,a5
80009210:	02e7d7b3          	divu	a5,a5,a4
80009214:	fee672e3          	bgeu	a2,a4,800091f8 <_printf_i+0xf4>
80009218:	0980006f          	j	800092b0 <_printf_i+0x1ac>
8000921c:	0007a783          	lw	a5,0(a5)
80009220:	04067513          	andi	a0,a2,64
80009224:	00b72023          	sw	a1,0(a4)
80009228:	fa0502e3          	beqz	a0,800091cc <_printf_i+0xc8>
8000922c:	01079793          	slli	a5,a5,0x10
80009230:	4107d793          	srai	a5,a5,0x10
80009234:	f99ff06f          	j	800091cc <_printf_i+0xc8>
80009238:	ffb67613          	andi	a2,a2,-5
8000923c:	00c42023          	sw	a2,0(s0)
80009240:	fadff06f          	j	800091ec <_printf_i+0xe8>
80009244:	0005a603          	lw	a2,0(a1)
80009248:	00072783          	lw	a5,0(a4)
8000924c:	08067513          	andi	a0,a2,128
80009250:	00478593          	addi	a1,a5,4
80009254:	00050863          	beqz	a0,80009264 <_printf_i+0x160>
80009258:	00b72023          	sw	a1,0(a4)
8000925c:	0007a783          	lw	a5,0(a5)
80009260:	0140006f          	j	80009274 <_printf_i+0x170>
80009264:	04067613          	andi	a2,a2,64
80009268:	00b72023          	sw	a1,0(a4)
8000926c:	fe0608e3          	beqz	a2,8000925c <_printf_i+0x158>
80009270:	0007d783          	lhu	a5,0(a5)
80009274:	8000b837          	lui	a6,0x8000b
80009278:	06f00713          	li	a4,111
8000927c:	89c80813          	addi	a6,a6,-1892 # 8000a89c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a89d>
80009280:	12e89a63          	bne	a7,a4,800093b4 <_printf_i+0x2b0>
80009284:	00800713          	li	a4,8
80009288:	040401a3          	sb	zero,67(s0)
8000928c:	00442603          	lw	a2,4(s0)
80009290:	00c42423          	sw	a2,8(s0)
80009294:	f60640e3          	bltz	a2,800091f4 <_printf_i+0xf0>
80009298:	00042583          	lw	a1,0(s0)
8000929c:	ffb5f593          	andi	a1,a1,-5
800092a0:	00b42023          	sw	a1,0(s0)
800092a4:	f40798e3          	bnez	a5,800091f4 <_printf_i+0xf0>
800092a8:	00068a93          	mv	s5,a3
800092ac:	f40614e3          	bnez	a2,800091f4 <_printf_i+0xf0>
800092b0:	00800793          	li	a5,8
800092b4:	02f71463          	bne	a4,a5,800092dc <_printf_i+0x1d8>
800092b8:	00042783          	lw	a5,0(s0)
800092bc:	0017f793          	andi	a5,a5,1
800092c0:	00078e63          	beqz	a5,800092dc <_printf_i+0x1d8>
800092c4:	00442703          	lw	a4,4(s0)
800092c8:	01042783          	lw	a5,16(s0)
800092cc:	00e7c863          	blt	a5,a4,800092dc <_printf_i+0x1d8>
800092d0:	03000793          	li	a5,48
800092d4:	fefa8fa3          	sb	a5,-1(s5)
800092d8:	fffa8a93          	addi	s5,s5,-1
800092dc:	415686b3          	sub	a3,a3,s5
800092e0:	00d42823          	sw	a3,16(s0)
800092e4:	00098713          	mv	a4,s3
800092e8:	00090693          	mv	a3,s2
800092ec:	00c10613          	addi	a2,sp,12
800092f0:	00040593          	mv	a1,s0
800092f4:	00048513          	mv	a0,s1
800092f8:	c5dff0ef          	jal	ra,80008f54 <_printf_common>
800092fc:	fff00a13          	li	s4,-1
80009300:	15451663          	bne	a0,s4,8000944c <_printf_i+0x348>
80009304:	fff00513          	li	a0,-1
80009308:	02c12083          	lw	ra,44(sp)
8000930c:	02812403          	lw	s0,40(sp)
80009310:	02412483          	lw	s1,36(sp)
80009314:	02012903          	lw	s2,32(sp)
80009318:	01c12983          	lw	s3,28(sp)
8000931c:	01812a03          	lw	s4,24(sp)
80009320:	01412a83          	lw	s5,20(sp)
80009324:	01012b03          	lw	s6,16(sp)
80009328:	03010113          	addi	sp,sp,48
8000932c:	00008067          	ret
80009330:	0005a783          	lw	a5,0(a1)
80009334:	0207e793          	ori	a5,a5,32
80009338:	00f5a023          	sw	a5,0(a1)
8000933c:	8000b837          	lui	a6,0x8000b
80009340:	07800893          	li	a7,120
80009344:	8b080813          	addi	a6,a6,-1872 # 8000a8b0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a8b1>
80009348:	00042603          	lw	a2,0(s0)
8000934c:	051402a3          	sb	a7,69(s0)
80009350:	00072783          	lw	a5,0(a4)
80009354:	08067513          	andi	a0,a2,128
80009358:	00478593          	addi	a1,a5,4
8000935c:	00050e63          	beqz	a0,80009378 <_printf_i+0x274>
80009360:	00b72023          	sw	a1,0(a4)
80009364:	0007a783          	lw	a5,0(a5)
80009368:	0200006f          	j	80009388 <_printf_i+0x284>
8000936c:	8000b837          	lui	a6,0x8000b
80009370:	89c80813          	addi	a6,a6,-1892 # 8000a89c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a89d>
80009374:	fd5ff06f          	j	80009348 <_printf_i+0x244>
80009378:	04067513          	andi	a0,a2,64
8000937c:	00b72023          	sw	a1,0(a4)
80009380:	fe0502e3          	beqz	a0,80009364 <_printf_i+0x260>
80009384:	0007d783          	lhu	a5,0(a5)
80009388:	00167713          	andi	a4,a2,1
8000938c:	00070663          	beqz	a4,80009398 <_printf_i+0x294>
80009390:	02066613          	ori	a2,a2,32
80009394:	00c42023          	sw	a2,0(s0)
80009398:	00078663          	beqz	a5,800093a4 <_printf_i+0x2a0>
8000939c:	01000713          	li	a4,16
800093a0:	ee9ff06f          	j	80009288 <_printf_i+0x184>
800093a4:	00042703          	lw	a4,0(s0)
800093a8:	fdf77713          	andi	a4,a4,-33
800093ac:	00e42023          	sw	a4,0(s0)
800093b0:	fedff06f          	j	8000939c <_printf_i+0x298>
800093b4:	00a00713          	li	a4,10
800093b8:	ed1ff06f          	j	80009288 <_printf_i+0x184>
800093bc:	89c70813          	addi	a6,a4,-1892
800093c0:	00a00713          	li	a4,10
800093c4:	ec9ff06f          	j	8000928c <_printf_i+0x188>
800093c8:	0005a603          	lw	a2,0(a1)
800093cc:	00072783          	lw	a5,0(a4)
800093d0:	0145a583          	lw	a1,20(a1)
800093d4:	08067813          	andi	a6,a2,128
800093d8:	00478513          	addi	a0,a5,4
800093dc:	00080a63          	beqz	a6,800093f0 <_printf_i+0x2ec>
800093e0:	00a72023          	sw	a0,0(a4)
800093e4:	0007a783          	lw	a5,0(a5)
800093e8:	00b7a023          	sw	a1,0(a5)
800093ec:	0180006f          	j	80009404 <_printf_i+0x300>
800093f0:	00a72023          	sw	a0,0(a4)
800093f4:	04067613          	andi	a2,a2,64
800093f8:	0007a783          	lw	a5,0(a5)
800093fc:	fe0606e3          	beqz	a2,800093e8 <_printf_i+0x2e4>
80009400:	00b79023          	sh	a1,0(a5)
80009404:	00042823          	sw	zero,16(s0)
80009408:	00068a93          	mv	s5,a3
8000940c:	ed9ff06f          	j	800092e4 <_printf_i+0x1e0>
80009410:	00072783          	lw	a5,0(a4)
80009414:	0045a603          	lw	a2,4(a1)
80009418:	00000593          	li	a1,0
8000941c:	00478693          	addi	a3,a5,4
80009420:	00d72023          	sw	a3,0(a4)
80009424:	0007aa83          	lw	s5,0(a5)
80009428:	000a8513          	mv	a0,s5
8000942c:	098000ef          	jal	ra,800094c4 <memchr>
80009430:	00050663          	beqz	a0,8000943c <_printf_i+0x338>
80009434:	41550533          	sub	a0,a0,s5
80009438:	00a42223          	sw	a0,4(s0)
8000943c:	00442783          	lw	a5,4(s0)
80009440:	00f42823          	sw	a5,16(s0)
80009444:	040401a3          	sb	zero,67(s0)
80009448:	e9dff06f          	j	800092e4 <_printf_i+0x1e0>
8000944c:	01042683          	lw	a3,16(s0)
80009450:	000a8613          	mv	a2,s5
80009454:	00090593          	mv	a1,s2
80009458:	00048513          	mv	a0,s1
8000945c:	000980e7          	jalr	s3
80009460:	eb4502e3          	beq	a0,s4,80009304 <_printf_i+0x200>
80009464:	00042783          	lw	a5,0(s0)
80009468:	0027f793          	andi	a5,a5,2
8000946c:	04079463          	bnez	a5,800094b4 <_printf_i+0x3b0>
80009470:	00c12783          	lw	a5,12(sp)
80009474:	00c42503          	lw	a0,12(s0)
80009478:	e8f558e3          	bge	a0,a5,80009308 <_printf_i+0x204>
8000947c:	00078513          	mv	a0,a5
80009480:	e89ff06f          	j	80009308 <_printf_i+0x204>
80009484:	00100693          	li	a3,1
80009488:	000a8613          	mv	a2,s5
8000948c:	00090593          	mv	a1,s2
80009490:	00048513          	mv	a0,s1
80009494:	000980e7          	jalr	s3
80009498:	e76506e3          	beq	a0,s6,80009304 <_printf_i+0x200>
8000949c:	001a0a13          	addi	s4,s4,1
800094a0:	00c42783          	lw	a5,12(s0)
800094a4:	00c12703          	lw	a4,12(sp)
800094a8:	40e787b3          	sub	a5,a5,a4
800094ac:	fcfa4ce3          	blt	s4,a5,80009484 <_printf_i+0x380>
800094b0:	fc1ff06f          	j	80009470 <_printf_i+0x36c>
800094b4:	00000a13          	li	s4,0
800094b8:	01940a93          	addi	s5,s0,25
800094bc:	fff00b13          	li	s6,-1
800094c0:	fe1ff06f          	j	800094a0 <_printf_i+0x39c>

800094c4 <memchr>:
800094c4:	0ff5f593          	zext.b	a1,a1
800094c8:	00c50633          	add	a2,a0,a2
800094cc:	00c51663          	bne	a0,a2,800094d8 <memchr+0x14>
800094d0:	00000513          	li	a0,0
800094d4:	00008067          	ret
800094d8:	00054783          	lbu	a5,0(a0)
800094dc:	feb78ce3          	beq	a5,a1,800094d4 <memchr+0x10>
800094e0:	00150513          	addi	a0,a0,1
800094e4:	fe9ff06f          	j	800094cc <memchr+0x8>

800094e8 <_realloc_r>:
800094e8:	fe010113          	addi	sp,sp,-32
800094ec:	00912a23          	sw	s1,20(sp)
800094f0:	00112e23          	sw	ra,28(sp)
800094f4:	00812c23          	sw	s0,24(sp)
800094f8:	01212823          	sw	s2,16(sp)
800094fc:	01312623          	sw	s3,12(sp)
80009500:	00060493          	mv	s1,a2
80009504:	02059263          	bnez	a1,80009528 <_realloc_r+0x40>
80009508:	01812403          	lw	s0,24(sp)
8000950c:	01c12083          	lw	ra,28(sp)
80009510:	01412483          	lw	s1,20(sp)
80009514:	01012903          	lw	s2,16(sp)
80009518:	00c12983          	lw	s3,12(sp)
8000951c:	00060593          	mv	a1,a2
80009520:	02010113          	addi	sp,sp,32
80009524:	f41fe06f          	j	80008464 <_malloc_r>
80009528:	02061663          	bnez	a2,80009554 <_realloc_r+0x6c>
8000952c:	e3dfe0ef          	jal	ra,80008368 <_free_r>
80009530:	00000413          	li	s0,0
80009534:	01c12083          	lw	ra,28(sp)
80009538:	00040513          	mv	a0,s0
8000953c:	01812403          	lw	s0,24(sp)
80009540:	01412483          	lw	s1,20(sp)
80009544:	01012903          	lw	s2,16(sp)
80009548:	00c12983          	lw	s3,12(sp)
8000954c:	02010113          	addi	sp,sp,32
80009550:	00008067          	ret
80009554:	00050993          	mv	s3,a0
80009558:	00058413          	mv	s0,a1
8000955c:	03c000ef          	jal	ra,80009598 <_malloc_usable_size_r>
80009560:	fc957ae3          	bgeu	a0,s1,80009534 <_realloc_r+0x4c>
80009564:	00048593          	mv	a1,s1
80009568:	00098513          	mv	a0,s3
8000956c:	ef9fe0ef          	jal	ra,80008464 <_malloc_r>
80009570:	00050913          	mv	s2,a0
80009574:	fa050ee3          	beqz	a0,80009530 <_realloc_r+0x48>
80009578:	00040593          	mv	a1,s0
8000957c:	00048613          	mv	a2,s1
80009580:	c78f70ef          	jal	ra,800009f8 <memcpy>
80009584:	00040593          	mv	a1,s0
80009588:	00098513          	mv	a0,s3
8000958c:	dddfe0ef          	jal	ra,80008368 <_free_r>
80009590:	00090413          	mv	s0,s2
80009594:	fa1ff06f          	j	80009534 <_realloc_r+0x4c>

80009598 <_malloc_usable_size_r>:
80009598:	ffc5a783          	lw	a5,-4(a1)
8000959c:	ffc78513          	addi	a0,a5,-4
800095a0:	0007d863          	bgez	a5,800095b0 <_malloc_usable_size_r+0x18>
800095a4:	00a585b3          	add	a1,a1,a0
800095a8:	0005a783          	lw	a5,0(a1)
800095ac:	00f50533          	add	a0,a0,a5
800095b0:	00008067          	ret
