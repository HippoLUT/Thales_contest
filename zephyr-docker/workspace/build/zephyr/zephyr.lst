
zephyr.elf:     file format elf32-littleriscv


Disassembly of section rom_start:

80000000 <__start>:
SECTION_FUNC(vectors, __start)
#if defined(CONFIG_RISCV_GP)
	/* Initialize global pointer */
	.option push
	.option norelax
	la gp, __global_pointer$
80000000:	0000c197          	auipc	gp,0xc
80000004:	27018193          	addi	gp,gp,624 # 8000c270 <__global_pointer$>
#else
	/*
	 * Set mtvec (Machine Trap-Vector Base-Address Register)
	 * to _isr_wrapper.
	 */
	la t0, _isr_wrapper
80000008:	00000297          	auipc	t0,0x0
8000000c:	01428293          	addi	t0,t0,20 # 8000001c <_isr_wrapper>
#endif

	csrw mtvec, t0
80000010:	30529073          	csrw	mtvec,t0

	/* Jump to __reset */
	tail __reset
80000014:	0040006f          	j	80000018 <__reset>

Disassembly of section reset:

80000018 <__reset>:
	/*
	 * jump to __initialize
	 * use call opcode in case __initialize is far away.
	 * This will be dependent on linker.ld configuration.
	 */
	call __initialize
80000018:	159030ef          	jal	ra,80003970 <__initialize>

Disassembly of section exceptions:

8000001c <_isr_wrapper>:
	csrrw sp, mscratch, sp
1:
#endif

	/* Save caller-saved registers on current thread stack. */
	addi sp, sp, -__z_arch_esf_t_SIZEOF
8000001c:	fb010113          	addi	sp,sp,-80
	DO_CALLER_SAVED(sr)		;
80000020:	00512223          	sw	t0,4(sp)
80000024:	00612423          	sw	t1,8(sp)
80000028:	00712623          	sw	t2,12(sp)
8000002c:	01c12823          	sw	t3,16(sp)
80000030:	01d12a23          	sw	t4,20(sp)
80000034:	01e12c23          	sw	t5,24(sp)
80000038:	01f12e23          	sw	t6,28(sp)
8000003c:	02a12023          	sw	a0,32(sp)
80000040:	02b12223          	sw	a1,36(sp)
80000044:	02c12423          	sw	a2,40(sp)
80000048:	02d12623          	sw	a3,44(sp)
8000004c:	02e12823          	sw	a4,48(sp)
80000050:	02f12a23          	sw	a5,52(sp)
80000054:	03012c23          	sw	a6,56(sp)
80000058:	03112e23          	sw	a7,60(sp)
8000005c:	00112023          	sw	ra,0(sp)

	/* Save s0 in the esf and load it with &_current_cpu. */
	sr s0, __z_arch_esf_t_s0_OFFSET(sp)
80000060:	04812423          	sw	s0,72(sp)
	GET_CURRENT_CPU(s0, t0)
80000064:	00009417          	auipc	s0,0x9
80000068:	f5440413          	addi	s0,s0,-172 # 80008fb8 <_kernel>
	add t0, t0, tp, %tprel_add(is_user_mode)
	sb zero, %tprel_lo(is_user_mode)(t0)
#endif

	/* Save MEPC register */
	csrr t0, mepc
8000006c:	341022f3          	csrr	t0,mepc
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
80000070:	04512023          	sw	t0,64(sp)

	/* Save MSTATUS register */
	csrr t2, mstatus
80000074:	300023f3          	csrr	t2,mstatus
	sr t2, __z_arch_esf_t_mstatus_OFFSET(sp)
80000078:	04712223          	sw	t2,68(sp)
	 * SOCs (like pulpino or riscv-qemu), the MSB is never set to indicate
	 * interrupt. Hence, check for interrupt/exception via the __soc_is_irq
	 * function (that needs to be implemented by each SOC). The result is
	 * returned via register a0 (1: interrupt, 0 exception)
	 */
	jal ra, __soc_is_irq
8000007c:	14c000ef          	jal	ra,800001c8 <__soc_is_irq>

	/* If a0 != 0, jump to is_interrupt */
	bnez a0, is_interrupt
80000080:	04051a63          	bnez	a0,800000d4 <is_interrupt>
	/*
	 * If the exception is the result of an ECALL, check whether to
	 * perform a context-switch or an IRQ offload. Otherwise call _Fault
	 * to report the exception.
	 */
	csrr t0, mcause
80000084:	342022f3          	csrr	t0,mcause
	li t2, SOC_MCAUSE_EXP_MASK
80000088:	800003b7          	lui	t2,0x80000
8000008c:	fff38393          	addi	t2,t2,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and t0, t0, t2
80000090:	0072f2b3          	and	t0,t0,t2

	/*
	 * If mcause == SOC_MCAUSE_ECALL_EXP, handle system call from
	 * kernel thread.
	 */
	li t1, SOC_MCAUSE_ECALL_EXP
80000094:	00b00313          	li	t1,11
	beq t0, t1, is_kernel_syscall
80000098:	00628a63          	beq	t0,t1,800000ac <is_kernel_syscall>
	 * Stack pointer is pointing to a z_arch_esf_t structure, pass it
	 * to _Fault (via register a0).
	 * If _Fault shall return, set return address to
	 * no_reschedule to restore stack.
	 */
	mv a0, sp
8000009c:	00010513          	mv	a0,sp
	la ra, no_reschedule
800000a0:	00000097          	auipc	ra,0x0
800000a4:	0bc08093          	addi	ra,ra,188 # 8000015c <z_riscv_thread_start>
	tail _Fault
800000a8:	0650306f          	j	8000390c <_Fault>

800000ac <is_kernel_syscall>:
	 * again upon exiting the ISR.
	 *
	 * It's safe to always increment by 4, even with compressed
	 * instructions, because the ecall instruction is always 4 bytes.
	 */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
800000ac:	04012283          	lw	t0,64(sp)
	addi t0, t0, 4
800000b0:	00428293          	addi	t0,t0,4
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
800000b4:	04512023          	sw	t0,64(sp)
	li t1, MSTATUS_MPRV
	csrs mstatus, t1
#endif

	/* Determine what to do. Operation code is in t0. */
	lr t0, __z_arch_esf_t_t0_OFFSET(sp)
800000b8:	00412283          	lw	t0,4(sp)

	.if RV_ECALL_RUNTIME_EXCEPT != 0; .err; .endif
	beqz t0, do_fault
800000bc:	00028663          	beqz	t0,800000c8 <do_fault>
	j reschedule
skip_schedule:
#endif

	/* default fault code is K_ERR_KERNEL_OOPS */
	li a0, 3
800000c0:	00300513          	li	a0,3
	j 1f
800000c4:	0080006f          	j	800000cc <do_fault+0x4>

800000c8 <do_fault>:

do_fault:
	/* Handle RV_ECALL_RUNTIME_EXCEPT. Retrieve reason in a0, esf in A1. */
	lr a0, __z_arch_esf_t_a0_OFFSET(sp)
800000c8:	02012503          	lw	a0,32(sp)
1:	mv a1, sp
800000cc:	00010593          	mv	a1,sp
	tail z_riscv_fatal_error
800000d0:	02d0306f          	j	800038fc <z_riscv_fatal_error>

800000d4 <is_interrupt>:
	csrs mstatus, t1
2:
#endif

	/* Increment _current_cpu->nested */
	lw t1, ___cpu_t_nested_OFFSET(s0)
800000d4:	00042303          	lw	t1,0(s0)
	addi t2, t1, 1
800000d8:	00130393          	addi	t2,t1,1
	sw t2, ___cpu_t_nested_OFFSET(s0)
800000dc:	00742023          	sw	t2,0(s0)
	bnez t1, on_irq_stack
800000e0:	00031a63          	bnez	t1,800000f4 <on_irq_stack>

	/* Switch to interrupt stack */
	mv t0, sp
800000e4:	00010293          	mv	t0,sp
	lr sp, ___cpu_t_irq_stack_OFFSET(s0)
800000e8:	00442103          	lw	sp,4(s0)

	/*
	 * Save thread stack pointer on interrupt stack
	 * In RISC-V, stack pointer needs to be 16-byte aligned
	 */
	addi sp, sp, -16
800000ec:	ff010113          	addi	sp,sp,-16
	sr t0, 0(sp)
800000f0:	00512023          	sw	t0,0(sp)

800000f4 <on_irq_stack>:
#ifdef CONFIG_TRACING_ISR
	call sys_trace_isr_enter
#endif

	/* Get IRQ causing interrupt */
	csrr a0, mcause
800000f4:	34202573          	csrr	a0,mcause
	li t0, SOC_MCAUSE_EXP_MASK
800000f8:	800002b7          	lui	t0,0x80000
800000fc:	fff28293          	addi	t0,t0,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and a0, a0, t0
80000100:	00557533          	and	a0,a0,t0

	/*
	 * Clear pending IRQ generating the interrupt at SOC level
	 * Pass IRQ number to __soc_handle_irq via register a0
	 */
	jal ra, __soc_handle_irq
80000104:	0b4000ef          	jal	ra,800001b8 <__soc_handle_irq>

	/*
	 * Call corresponding registered function in _sw_isr_table.
	 * (table is 2-word wide, we should shift index accordingly)
	 */
	la t0, _sw_isr_table
80000108:	00007297          	auipc	t0,0x7
8000010c:	68428293          	addi	t0,t0,1668 # 8000778c <_sw_isr_table>
	slli a0, a0, (RV_REGSHIFT + 1)
80000110:	00351513          	slli	a0,a0,0x3
	add t0, t0, a0
80000114:	00a282b3          	add	t0,t0,a0

	/* Load argument in a0 register */
	lr a0, 0(t0)
80000118:	0002a503          	lw	a0,0(t0)

	/* Load ISR function address in register t1 */
	lr t1, RV_REGSIZE(t0)
8000011c:	0042a303          	lw	t1,4(t0)

	/* Call ISR function */
	jalr ra, t1, 0
80000120:	000300e7          	jalr	t1

80000124 <irq_done>:
    call sys_trace_isr_exit
#endif

irq_done:
	/* Decrement _current_cpu->nested */
	lw t2, ___cpu_t_nested_OFFSET(s0)
80000124:	00042383          	lw	t2,0(s0)
	addi t2, t2, -1
80000128:	fff38393          	addi	t2,t2,-1
	sw t2, ___cpu_t_nested_OFFSET(s0)
8000012c:	00742023          	sw	t2,0(s0)
	bnez t2, no_reschedule
80000130:	02039663          	bnez	t2,8000015c <z_riscv_thread_start>

	/* nested count is back to 0: Return to thread stack */
	lr sp, 0(sp)
80000134:	00012103          	lw	sp,0(sp)

80000138 <check_reschedule>:
#endif

check_reschedule:

	/* Get pointer to current thread on this CPU */
	lr a1, ___cpu_t_current_OFFSET(s0)
80000138:	00842583          	lw	a1,8(s0)
	/*
	 * Get next thread to schedule with z_get_next_switch_handle().
	 * We pass it a NULL as we didn't save the whole thread context yet.
	 * If no scheduling is necessary then NULL will be returned.
	 */
	addi sp, sp, -16
8000013c:	ff010113          	addi	sp,sp,-16
	sr a1, 0(sp)
80000140:	00b12023          	sw	a1,0(sp)
	mv a0, zero
80000144:	00000513          	li	a0,0
	call z_get_next_switch_handle
80000148:	1c0050ef          	jal	ra,80005308 <z_get_next_switch_handle>
	lr a1, 0(sp)
8000014c:	00012583          	lw	a1,0(sp)
	addi sp, sp, 16
80000150:	01010113          	addi	sp,sp,16
	beqz a0, no_reschedule
80000154:	00050463          	beqz	a0,8000015c <z_riscv_thread_start>

80000158 <reschedule>:
	/*
	 * Perform context switch:
	 * a0 = new thread
	 * a1 = old thread
	 */
	call z_riscv_switch
80000158:	095030ef          	jal	ra,800039ec <z_riscv_switch>

8000015c <z_riscv_thread_start>:
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
8000015c:	04012283          	lw	t0,64(sp)
	csrw mepc, t0
80000160:	34129073          	csrw	mepc,t0

	/* Restore MSTATUS register */
	lr t2, __z_arch_esf_t_mstatus_OFFSET(sp)
80000164:	04412383          	lw	t2,68(sp)
	csrrw t0, mstatus, t2
80000168:	300392f3          	csrrw	t0,mstatus,t2
	csrw mscratch, t0
1:
#endif

	/* Restore s0 (it is no longer ours) */
	lr s0, __z_arch_esf_t_s0_OFFSET(sp)
8000016c:	04812403          	lw	s0,72(sp)

	/* Restore caller-saved registers from thread stack */
	DO_CALLER_SAVED(lr)
80000170:	00412283          	lw	t0,4(sp)
80000174:	00812303          	lw	t1,8(sp)
80000178:	00c12383          	lw	t2,12(sp)
8000017c:	01012e03          	lw	t3,16(sp)
80000180:	01412e83          	lw	t4,20(sp)
80000184:	01812f03          	lw	t5,24(sp)
80000188:	01c12f83          	lw	t6,28(sp)
8000018c:	02012503          	lw	a0,32(sp)
80000190:	02412583          	lw	a1,36(sp)
80000194:	02812603          	lw	a2,40(sp)
80000198:	02c12683          	lw	a3,44(sp)
8000019c:	03012703          	lw	a4,48(sp)
800001a0:	03412783          	lw	a5,52(sp)
800001a4:	03812803          	lw	a6,56(sp)
800001a8:	03c12883          	lw	a7,60(sp)
800001ac:	00012083          	lw	ra,0(sp)
#ifdef CONFIG_USERSPACE
	/* retrieve saved stack pointer */
	lr sp, __z_arch_esf_t_sp_OFFSET(sp)
#else
	/* remove esf from the stack */
	addi sp, sp, __z_arch_esf_t_SIZEOF
800001b0:	05010113          	addi	sp,sp,80
#endif

	mret
800001b4:	30200073          	mret

800001b8 <__soc_handle_irq>:
 * SOC-specific function to handle pending IRQ number generating the interrupt.
 * Exception number is given as parameter via register a0.
 */
SECTION_FUNC(exception.other, __soc_handle_irq)
	/* Clear exception number from CSR mip register */
	li t1, 1
800001b8:	00100313          	li	t1,1
	sll t0, t1, a0
800001bc:	00a312b3          	sll	t0,t1,a0
	csrrc t1, mip, t0
800001c0:	3442b373          	csrrc	t1,mip,t0

	/* Return */
	ret
800001c4:	00008067          	ret

800001c8 <__soc_is_irq>:
 * return 1 (interrupt) or 0 (exception)
 *
 */
SECTION_FUNC(exception.other, __soc_is_irq)
	/* Read mcause and check if interrupt bit is set */
	csrr t0, mcause
800001c8:	342022f3          	csrr	t0,mcause
	li t1, SOC_MCAUSE_IRQ_MASK
800001cc:	80000337          	lui	t1,0x80000
	and t0, t0, t1
800001d0:	0062f2b3          	and	t0,t0,t1

	/* If interrupt bit is not set, return with 0 */
	addi a0, x0, 0
800001d4:	00000513          	li	a0,0
	beqz t0, not_interrupt
800001d8:	00028463          	beqz	t0,800001e0 <not_interrupt>
	addi a0, a0, 1
800001dc:	00150513          	addi	a0,a0,1

800001e0 <not_interrupt>:

not_interrupt:
	/* return */
	ret
800001e0:	00008067          	ret

Disassembly of section text:

800001e4 <__udivdi3>:
800001e4:	00050893          	mv	a7,a0
800001e8:	00058313          	mv	t1,a1
800001ec:	00060713          	mv	a4,a2
800001f0:	00050813          	mv	a6,a0
800001f4:	00058793          	mv	a5,a1
800001f8:	28069263          	bnez	a3,8000047c <__udivdi3+0x298>
800001fc:	800085b7          	lui	a1,0x80008
80000200:	99858593          	addi	a1,a1,-1640 # 80007998 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007999>
80000204:	0ec37663          	bgeu	t1,a2,800002f0 <__udivdi3+0x10c>
80000208:	000106b7          	lui	a3,0x10
8000020c:	0cd67863          	bgeu	a2,a3,800002dc <__udivdi3+0xf8>
80000210:	10063693          	sltiu	a3,a2,256
80000214:	0016c693          	xori	a3,a3,1
80000218:	00369693          	slli	a3,a3,0x3
8000021c:	00d65533          	srl	a0,a2,a3
80000220:	00a585b3          	add	a1,a1,a0
80000224:	0005c583          	lbu	a1,0(a1)
80000228:	02000513          	li	a0,32
8000022c:	00d586b3          	add	a3,a1,a3
80000230:	40d505b3          	sub	a1,a0,a3
80000234:	00d50c63          	beq	a0,a3,8000024c <__udivdi3+0x68>
80000238:	00b317b3          	sll	a5,t1,a1
8000023c:	00d8d6b3          	srl	a3,a7,a3
80000240:	00b61733          	sll	a4,a2,a1
80000244:	00f6e7b3          	or	a5,a3,a5
80000248:	00b89833          	sll	a6,a7,a1
8000024c:	01075593          	srli	a1,a4,0x10
80000250:	02b7d333          	divu	t1,a5,a1
80000254:	01071613          	slli	a2,a4,0x10
80000258:	01065613          	srli	a2,a2,0x10
8000025c:	02b7f7b3          	remu	a5,a5,a1
80000260:	00030513          	mv	a0,t1
80000264:	026608b3          	mul	a7,a2,t1
80000268:	01079693          	slli	a3,a5,0x10
8000026c:	01085793          	srli	a5,a6,0x10
80000270:	00d7e7b3          	or	a5,a5,a3
80000274:	0117fe63          	bgeu	a5,a7,80000290 <__udivdi3+0xac>
80000278:	00f707b3          	add	a5,a4,a5
8000027c:	fff30513          	addi	a0,t1,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
80000280:	00e7e863          	bltu	a5,a4,80000290 <__udivdi3+0xac>
80000284:	0117f663          	bgeu	a5,a7,80000290 <__udivdi3+0xac>
80000288:	ffe30513          	addi	a0,t1,-2
8000028c:	00e787b3          	add	a5,a5,a4
80000290:	411787b3          	sub	a5,a5,a7
80000294:	02b7d8b3          	divu	a7,a5,a1
80000298:	01081813          	slli	a6,a6,0x10
8000029c:	01085813          	srli	a6,a6,0x10
800002a0:	02b7f7b3          	remu	a5,a5,a1
800002a4:	031606b3          	mul	a3,a2,a7
800002a8:	01079793          	slli	a5,a5,0x10
800002ac:	00f86833          	or	a6,a6,a5
800002b0:	00088793          	mv	a5,a7
800002b4:	00d87c63          	bgeu	a6,a3,800002cc <__udivdi3+0xe8>
800002b8:	01070833          	add	a6,a4,a6
800002bc:	fff88793          	addi	a5,a7,-1
800002c0:	00e86663          	bltu	a6,a4,800002cc <__udivdi3+0xe8>
800002c4:	00d87463          	bgeu	a6,a3,800002cc <__udivdi3+0xe8>
800002c8:	ffe88793          	addi	a5,a7,-2
800002cc:	01051513          	slli	a0,a0,0x10
800002d0:	00f56533          	or	a0,a0,a5
800002d4:	00000593          	li	a1,0
800002d8:	00008067          	ret
800002dc:	01000537          	lui	a0,0x1000
800002e0:	01000693          	li	a3,16
800002e4:	f2a66ce3          	bltu	a2,a0,8000021c <__udivdi3+0x38>
800002e8:	01800693          	li	a3,24
800002ec:	f31ff06f          	j	8000021c <__udivdi3+0x38>
800002f0:	00000693          	li	a3,0
800002f4:	00060c63          	beqz	a2,8000030c <__udivdi3+0x128>
800002f8:	000107b7          	lui	a5,0x10
800002fc:	0cf67063          	bgeu	a2,a5,800003bc <__udivdi3+0x1d8>
80000300:	10063693          	sltiu	a3,a2,256
80000304:	0016c693          	xori	a3,a3,1
80000308:	00369693          	slli	a3,a3,0x3
8000030c:	00d657b3          	srl	a5,a2,a3
80000310:	00f585b3          	add	a1,a1,a5
80000314:	0005c783          	lbu	a5,0(a1)
80000318:	00d787b3          	add	a5,a5,a3
8000031c:	02000693          	li	a3,32
80000320:	40f685b3          	sub	a1,a3,a5
80000324:	0af69663          	bne	a3,a5,800003d0 <__udivdi3+0x1ec>
80000328:	40c307b3          	sub	a5,t1,a2
8000032c:	00100593          	li	a1,1
80000330:	01075893          	srli	a7,a4,0x10
80000334:	0317de33          	divu	t3,a5,a7
80000338:	01071613          	slli	a2,a4,0x10
8000033c:	01065613          	srli	a2,a2,0x10
80000340:	01085693          	srli	a3,a6,0x10
80000344:	0317f7b3          	remu	a5,a5,a7
80000348:	000e0513          	mv	a0,t3
8000034c:	03c60333          	mul	t1,a2,t3
80000350:	01079793          	slli	a5,a5,0x10
80000354:	00f6e7b3          	or	a5,a3,a5
80000358:	0067fe63          	bgeu	a5,t1,80000374 <__udivdi3+0x190>
8000035c:	00f707b3          	add	a5,a4,a5
80000360:	fffe0513          	addi	a0,t3,-1
80000364:	00e7e863          	bltu	a5,a4,80000374 <__udivdi3+0x190>
80000368:	0067f663          	bgeu	a5,t1,80000374 <__udivdi3+0x190>
8000036c:	ffee0513          	addi	a0,t3,-2
80000370:	00e787b3          	add	a5,a5,a4
80000374:	406787b3          	sub	a5,a5,t1
80000378:	0317d333          	divu	t1,a5,a7
8000037c:	01081813          	slli	a6,a6,0x10
80000380:	01085813          	srli	a6,a6,0x10
80000384:	0317f7b3          	remu	a5,a5,a7
80000388:	026606b3          	mul	a3,a2,t1
8000038c:	01079793          	slli	a5,a5,0x10
80000390:	00f86833          	or	a6,a6,a5
80000394:	00030793          	mv	a5,t1
80000398:	00d87c63          	bgeu	a6,a3,800003b0 <__udivdi3+0x1cc>
8000039c:	01070833          	add	a6,a4,a6
800003a0:	fff30793          	addi	a5,t1,-1
800003a4:	00e86663          	bltu	a6,a4,800003b0 <__udivdi3+0x1cc>
800003a8:	00d87463          	bgeu	a6,a3,800003b0 <__udivdi3+0x1cc>
800003ac:	ffe30793          	addi	a5,t1,-2
800003b0:	01051513          	slli	a0,a0,0x10
800003b4:	00f56533          	or	a0,a0,a5
800003b8:	00008067          	ret
800003bc:	010007b7          	lui	a5,0x1000
800003c0:	01000693          	li	a3,16
800003c4:	f4f664e3          	bltu	a2,a5,8000030c <__udivdi3+0x128>
800003c8:	01800693          	li	a3,24
800003cc:	f41ff06f          	j	8000030c <__udivdi3+0x128>
800003d0:	00b61733          	sll	a4,a2,a1
800003d4:	00f356b3          	srl	a3,t1,a5
800003d8:	01075513          	srli	a0,a4,0x10
800003dc:	00b31333          	sll	t1,t1,a1
800003e0:	00f8d7b3          	srl	a5,a7,a5
800003e4:	0067e7b3          	or	a5,a5,t1
800003e8:	02a6d333          	divu	t1,a3,a0
800003ec:	01071613          	slli	a2,a4,0x10
800003f0:	01065613          	srli	a2,a2,0x10
800003f4:	00b89833          	sll	a6,a7,a1
800003f8:	02a6f6b3          	remu	a3,a3,a0
800003fc:	026608b3          	mul	a7,a2,t1
80000400:	01069593          	slli	a1,a3,0x10
80000404:	0107d693          	srli	a3,a5,0x10
80000408:	00b6e6b3          	or	a3,a3,a1
8000040c:	00030593          	mv	a1,t1
80000410:	0116fe63          	bgeu	a3,a7,8000042c <__udivdi3+0x248>
80000414:	00d706b3          	add	a3,a4,a3
80000418:	fff30593          	addi	a1,t1,-1
8000041c:	00e6e863          	bltu	a3,a4,8000042c <__udivdi3+0x248>
80000420:	0116f663          	bgeu	a3,a7,8000042c <__udivdi3+0x248>
80000424:	ffe30593          	addi	a1,t1,-2
80000428:	00e686b3          	add	a3,a3,a4
8000042c:	411686b3          	sub	a3,a3,a7
80000430:	02a6d8b3          	divu	a7,a3,a0
80000434:	01079793          	slli	a5,a5,0x10
80000438:	0107d793          	srli	a5,a5,0x10
8000043c:	02a6f6b3          	remu	a3,a3,a0
80000440:	03160633          	mul	a2,a2,a7
80000444:	01069693          	slli	a3,a3,0x10
80000448:	00d7e7b3          	or	a5,a5,a3
8000044c:	00088693          	mv	a3,a7
80000450:	00c7fe63          	bgeu	a5,a2,8000046c <__udivdi3+0x288>
80000454:	00f707b3          	add	a5,a4,a5
80000458:	fff88693          	addi	a3,a7,-1
8000045c:	00e7e863          	bltu	a5,a4,8000046c <__udivdi3+0x288>
80000460:	00c7f663          	bgeu	a5,a2,8000046c <__udivdi3+0x288>
80000464:	ffe88693          	addi	a3,a7,-2
80000468:	00e787b3          	add	a5,a5,a4
8000046c:	01059593          	slli	a1,a1,0x10
80000470:	40c787b3          	sub	a5,a5,a2
80000474:	00d5e5b3          	or	a1,a1,a3
80000478:	eb9ff06f          	j	80000330 <__udivdi3+0x14c>
8000047c:	18d5e663          	bltu	a1,a3,80000608 <__udivdi3+0x424>
80000480:	000107b7          	lui	a5,0x10
80000484:	04f6f463          	bgeu	a3,a5,800004cc <__udivdi3+0x2e8>
80000488:	1006b713          	sltiu	a4,a3,256
8000048c:	00174713          	xori	a4,a4,1
80000490:	00371713          	slli	a4,a4,0x3
80000494:	800087b7          	lui	a5,0x80008
80000498:	00e6d5b3          	srl	a1,a3,a4
8000049c:	99878793          	addi	a5,a5,-1640 # 80007998 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007999>
800004a0:	00b787b3          	add	a5,a5,a1
800004a4:	0007c783          	lbu	a5,0(a5)
800004a8:	00e787b3          	add	a5,a5,a4
800004ac:	02000713          	li	a4,32
800004b0:	40f705b3          	sub	a1,a4,a5
800004b4:	02f71663          	bne	a4,a5,800004e0 <__udivdi3+0x2fc>
800004b8:	00100513          	li	a0,1
800004bc:	e066eee3          	bltu	a3,t1,800002d8 <__udivdi3+0xf4>
800004c0:	00c8b533          	sltu	a0,a7,a2
800004c4:	00154513          	xori	a0,a0,1
800004c8:	00008067          	ret
800004cc:	010007b7          	lui	a5,0x1000
800004d0:	01000713          	li	a4,16
800004d4:	fcf6e0e3          	bltu	a3,a5,80000494 <__udivdi3+0x2b0>
800004d8:	01800713          	li	a4,24
800004dc:	fb9ff06f          	j	80000494 <__udivdi3+0x2b0>
800004e0:	00f65733          	srl	a4,a2,a5
800004e4:	00b696b3          	sll	a3,a3,a1
800004e8:	00d766b3          	or	a3,a4,a3
800004ec:	00f35733          	srl	a4,t1,a5
800004f0:	00b31333          	sll	t1,t1,a1
800004f4:	00f8d7b3          	srl	a5,a7,a5
800004f8:	0067e7b3          	or	a5,a5,t1
800004fc:	0106d313          	srli	t1,a3,0x10
80000500:	02675eb3          	divu	t4,a4,t1
80000504:	01069813          	slli	a6,a3,0x10
80000508:	01085813          	srli	a6,a6,0x10
8000050c:	00b61633          	sll	a2,a2,a1
80000510:	02677733          	remu	a4,a4,t1
80000514:	03d80e33          	mul	t3,a6,t4
80000518:	01071513          	slli	a0,a4,0x10
8000051c:	0107d713          	srli	a4,a5,0x10
80000520:	00a76733          	or	a4,a4,a0
80000524:	000e8513          	mv	a0,t4
80000528:	01c77e63          	bgeu	a4,t3,80000544 <__udivdi3+0x360>
8000052c:	00e68733          	add	a4,a3,a4
80000530:	fffe8513          	addi	a0,t4,-1
80000534:	00d76863          	bltu	a4,a3,80000544 <__udivdi3+0x360>
80000538:	01c77663          	bgeu	a4,t3,80000544 <__udivdi3+0x360>
8000053c:	ffee8513          	addi	a0,t4,-2
80000540:	00d70733          	add	a4,a4,a3
80000544:	41c70733          	sub	a4,a4,t3
80000548:	02675e33          	divu	t3,a4,t1
8000054c:	01079793          	slli	a5,a5,0x10
80000550:	0107d793          	srli	a5,a5,0x10
80000554:	02677733          	remu	a4,a4,t1
80000558:	03c80833          	mul	a6,a6,t3
8000055c:	01071713          	slli	a4,a4,0x10
80000560:	00e7e7b3          	or	a5,a5,a4
80000564:	000e0713          	mv	a4,t3
80000568:	0107fe63          	bgeu	a5,a6,80000584 <__udivdi3+0x3a0>
8000056c:	00f687b3          	add	a5,a3,a5
80000570:	fffe0713          	addi	a4,t3,-1
80000574:	00d7e863          	bltu	a5,a3,80000584 <__udivdi3+0x3a0>
80000578:	0107f663          	bgeu	a5,a6,80000584 <__udivdi3+0x3a0>
8000057c:	ffee0713          	addi	a4,t3,-2
80000580:	00d787b3          	add	a5,a5,a3
80000584:	01051513          	slli	a0,a0,0x10
80000588:	00010e37          	lui	t3,0x10
8000058c:	00e56533          	or	a0,a0,a4
80000590:	fffe0693          	addi	a3,t3,-1 # ffff <__rom_region_size+0x754b>
80000594:	00d57733          	and	a4,a0,a3
80000598:	410787b3          	sub	a5,a5,a6
8000059c:	00d676b3          	and	a3,a2,a3
800005a0:	01055813          	srli	a6,a0,0x10
800005a4:	01065613          	srli	a2,a2,0x10
800005a8:	02d70333          	mul	t1,a4,a3
800005ac:	02d806b3          	mul	a3,a6,a3
800005b0:	02c70733          	mul	a4,a4,a2
800005b4:	02c80833          	mul	a6,a6,a2
800005b8:	00d70633          	add	a2,a4,a3
800005bc:	01035713          	srli	a4,t1,0x10
800005c0:	00c70733          	add	a4,a4,a2
800005c4:	00d77463          	bgeu	a4,a3,800005cc <__udivdi3+0x3e8>
800005c8:	01c80833          	add	a6,a6,t3
800005cc:	01075693          	srli	a3,a4,0x10
800005d0:	010686b3          	add	a3,a3,a6
800005d4:	02d7e663          	bltu	a5,a3,80000600 <__udivdi3+0x41c>
800005d8:	ced79ee3          	bne	a5,a3,800002d4 <__udivdi3+0xf0>
800005dc:	000107b7          	lui	a5,0x10
800005e0:	fff78793          	addi	a5,a5,-1 # ffff <__rom_region_size+0x754b>
800005e4:	00f77733          	and	a4,a4,a5
800005e8:	01071713          	slli	a4,a4,0x10
800005ec:	00f37333          	and	t1,t1,a5
800005f0:	00b898b3          	sll	a7,a7,a1
800005f4:	00670733          	add	a4,a4,t1
800005f8:	00000593          	li	a1,0
800005fc:	cce8fee3          	bgeu	a7,a4,800002d8 <__udivdi3+0xf4>
80000600:	fff50513          	addi	a0,a0,-1 # ffffff <CONFIG_SRAM_SIZE+0xefffff>
80000604:	cd1ff06f          	j	800002d4 <__udivdi3+0xf0>
80000608:	00000593          	li	a1,0
8000060c:	00000513          	li	a0,0
80000610:	00008067          	ret

80000614 <__umoddi3>:
80000614:	00060813          	mv	a6,a2
80000618:	00050793          	mv	a5,a0
8000061c:	00058713          	mv	a4,a1
80000620:	20069663          	bnez	a3,8000082c <__umoddi3+0x218>
80000624:	800088b7          	lui	a7,0x80008
80000628:	99888893          	addi	a7,a7,-1640 # 80007998 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007999>
8000062c:	0cc5fc63          	bgeu	a1,a2,80000704 <__umoddi3+0xf0>
80000630:	000106b7          	lui	a3,0x10
80000634:	0ad67e63          	bgeu	a2,a3,800006f0 <__umoddi3+0xdc>
80000638:	10063693          	sltiu	a3,a2,256
8000063c:	0016c693          	xori	a3,a3,1
80000640:	00369693          	slli	a3,a3,0x3
80000644:	00d65333          	srl	t1,a2,a3
80000648:	006888b3          	add	a7,a7,t1
8000064c:	0008c883          	lbu	a7,0(a7)
80000650:	02000313          	li	t1,32
80000654:	00d886b3          	add	a3,a7,a3
80000658:	40d308b3          	sub	a7,t1,a3
8000065c:	00d30c63          	beq	t1,a3,80000674 <__umoddi3+0x60>
80000660:	01159733          	sll	a4,a1,a7
80000664:	00d556b3          	srl	a3,a0,a3
80000668:	01161833          	sll	a6,a2,a7
8000066c:	00e6e733          	or	a4,a3,a4
80000670:	011517b3          	sll	a5,a0,a7
80000674:	01085613          	srli	a2,a6,0x10
80000678:	02c756b3          	divu	a3,a4,a2
8000067c:	01081513          	slli	a0,a6,0x10
80000680:	01055513          	srli	a0,a0,0x10
80000684:	02c77733          	remu	a4,a4,a2
80000688:	02a686b3          	mul	a3,a3,a0
8000068c:	01071593          	slli	a1,a4,0x10
80000690:	0107d713          	srli	a4,a5,0x10
80000694:	00b76733          	or	a4,a4,a1
80000698:	00d77a63          	bgeu	a4,a3,800006ac <__umoddi3+0x98>
8000069c:	00e80733          	add	a4,a6,a4
800006a0:	01076663          	bltu	a4,a6,800006ac <__umoddi3+0x98>
800006a4:	00d77463          	bgeu	a4,a3,800006ac <__umoddi3+0x98>
800006a8:	01070733          	add	a4,a4,a6
800006ac:	40d70733          	sub	a4,a4,a3
800006b0:	02c756b3          	divu	a3,a4,a2
800006b4:	02c77733          	remu	a4,a4,a2
800006b8:	02a686b3          	mul	a3,a3,a0
800006bc:	01079793          	slli	a5,a5,0x10
800006c0:	01071713          	slli	a4,a4,0x10
800006c4:	0107d793          	srli	a5,a5,0x10
800006c8:	00e7e7b3          	or	a5,a5,a4
800006cc:	00d7fa63          	bgeu	a5,a3,800006e0 <__umoddi3+0xcc>
800006d0:	00f807b3          	add	a5,a6,a5
800006d4:	0107e663          	bltu	a5,a6,800006e0 <__umoddi3+0xcc>
800006d8:	00d7f463          	bgeu	a5,a3,800006e0 <__umoddi3+0xcc>
800006dc:	010787b3          	add	a5,a5,a6
800006e0:	40d787b3          	sub	a5,a5,a3
800006e4:	0117d533          	srl	a0,a5,a7
800006e8:	00000593          	li	a1,0
800006ec:	00008067          	ret
800006f0:	01000337          	lui	t1,0x1000
800006f4:	01000693          	li	a3,16
800006f8:	f46666e3          	bltu	a2,t1,80000644 <__umoddi3+0x30>
800006fc:	01800693          	li	a3,24
80000700:	f45ff06f          	j	80000644 <__umoddi3+0x30>
80000704:	00000693          	li	a3,0
80000708:	00060c63          	beqz	a2,80000720 <__umoddi3+0x10c>
8000070c:	00010737          	lui	a4,0x10
80000710:	06e67e63          	bgeu	a2,a4,8000078c <__umoddi3+0x178>
80000714:	10063693          	sltiu	a3,a2,256
80000718:	0016c693          	xori	a3,a3,1
8000071c:	00369693          	slli	a3,a3,0x3
80000720:	00d65733          	srl	a4,a2,a3
80000724:	00e888b3          	add	a7,a7,a4
80000728:	0008c703          	lbu	a4,0(a7)
8000072c:	00d70733          	add	a4,a4,a3
80000730:	02000693          	li	a3,32
80000734:	40e688b3          	sub	a7,a3,a4
80000738:	06e69463          	bne	a3,a4,800007a0 <__umoddi3+0x18c>
8000073c:	40c58733          	sub	a4,a1,a2
80000740:	01085593          	srli	a1,a6,0x10
80000744:	02b75633          	divu	a2,a4,a1
80000748:	01081513          	slli	a0,a6,0x10
8000074c:	01055513          	srli	a0,a0,0x10
80000750:	0107d693          	srli	a3,a5,0x10
80000754:	02b77733          	remu	a4,a4,a1
80000758:	02a60633          	mul	a2,a2,a0
8000075c:	01071713          	slli	a4,a4,0x10
80000760:	00e6e733          	or	a4,a3,a4
80000764:	00c77a63          	bgeu	a4,a2,80000778 <__umoddi3+0x164>
80000768:	00e80733          	add	a4,a6,a4
8000076c:	01076663          	bltu	a4,a6,80000778 <__umoddi3+0x164>
80000770:	00c77463          	bgeu	a4,a2,80000778 <__umoddi3+0x164>
80000774:	01070733          	add	a4,a4,a6
80000778:	40c70733          	sub	a4,a4,a2
8000077c:	02b756b3          	divu	a3,a4,a1
80000780:	02b77733          	remu	a4,a4,a1
80000784:	02a686b3          	mul	a3,a3,a0
80000788:	f35ff06f          	j	800006bc <__umoddi3+0xa8>
8000078c:	01000737          	lui	a4,0x1000
80000790:	01000693          	li	a3,16
80000794:	f8e666e3          	bltu	a2,a4,80000720 <__umoddi3+0x10c>
80000798:	01800693          	li	a3,24
8000079c:	f85ff06f          	j	80000720 <__umoddi3+0x10c>
800007a0:	01161833          	sll	a6,a2,a7
800007a4:	00e5d6b3          	srl	a3,a1,a4
800007a8:	011517b3          	sll	a5,a0,a7
800007ac:	011595b3          	sll	a1,a1,a7
800007b0:	00e55733          	srl	a4,a0,a4
800007b4:	01085513          	srli	a0,a6,0x10
800007b8:	00b76733          	or	a4,a4,a1
800007bc:	02a6d5b3          	divu	a1,a3,a0
800007c0:	01081313          	slli	t1,a6,0x10
800007c4:	01035313          	srli	t1,t1,0x10
800007c8:	02a6f6b3          	remu	a3,a3,a0
800007cc:	026585b3          	mul	a1,a1,t1
800007d0:	01069613          	slli	a2,a3,0x10
800007d4:	01075693          	srli	a3,a4,0x10
800007d8:	00c6e6b3          	or	a3,a3,a2
800007dc:	00b6fa63          	bgeu	a3,a1,800007f0 <__umoddi3+0x1dc>
800007e0:	00d806b3          	add	a3,a6,a3
800007e4:	0106e663          	bltu	a3,a6,800007f0 <__umoddi3+0x1dc>
800007e8:	00b6f463          	bgeu	a3,a1,800007f0 <__umoddi3+0x1dc>
800007ec:	010686b3          	add	a3,a3,a6
800007f0:	40b686b3          	sub	a3,a3,a1
800007f4:	02a6d633          	divu	a2,a3,a0
800007f8:	01071713          	slli	a4,a4,0x10
800007fc:	01075713          	srli	a4,a4,0x10
80000800:	02a6f6b3          	remu	a3,a3,a0
80000804:	02660633          	mul	a2,a2,t1
80000808:	01069693          	slli	a3,a3,0x10
8000080c:	00d76733          	or	a4,a4,a3
80000810:	00c77a63          	bgeu	a4,a2,80000824 <__umoddi3+0x210>
80000814:	00e80733          	add	a4,a6,a4
80000818:	01076663          	bltu	a4,a6,80000824 <__umoddi3+0x210>
8000081c:	00c77463          	bgeu	a4,a2,80000824 <__umoddi3+0x210>
80000820:	01070733          	add	a4,a4,a6
80000824:	40c70733          	sub	a4,a4,a2
80000828:	f19ff06f          	j	80000740 <__umoddi3+0x12c>
8000082c:	1cd5e463          	bltu	a1,a3,800009f4 <__umoddi3+0x3e0>
80000830:	00010837          	lui	a6,0x10
80000834:	0506fe63          	bgeu	a3,a6,80000890 <__umoddi3+0x27c>
80000838:	1006b813          	sltiu	a6,a3,256
8000083c:	00184813          	xori	a6,a6,1
80000840:	00381813          	slli	a6,a6,0x3
80000844:	800088b7          	lui	a7,0x80008
80000848:	0106d333          	srl	t1,a3,a6
8000084c:	99888893          	addi	a7,a7,-1640 # 80007998 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007999>
80000850:	006888b3          	add	a7,a7,t1
80000854:	0008c883          	lbu	a7,0(a7)
80000858:	02000313          	li	t1,32
8000085c:	010888b3          	add	a7,a7,a6
80000860:	41130833          	sub	a6,t1,a7
80000864:	05131063          	bne	t1,a7,800008a4 <__umoddi3+0x290>
80000868:	00b6e463          	bltu	a3,a1,80000870 <__umoddi3+0x25c>
8000086c:	00c56c63          	bltu	a0,a2,80000884 <__umoddi3+0x270>
80000870:	40c50633          	sub	a2,a0,a2
80000874:	40d586b3          	sub	a3,a1,a3
80000878:	00c53733          	sltu	a4,a0,a2
8000087c:	00060793          	mv	a5,a2
80000880:	40e68733          	sub	a4,a3,a4
80000884:	00078513          	mv	a0,a5
80000888:	00070593          	mv	a1,a4
8000088c:	00008067          	ret
80000890:	010008b7          	lui	a7,0x1000
80000894:	01000813          	li	a6,16
80000898:	fb16e6e3          	bltu	a3,a7,80000844 <__umoddi3+0x230>
8000089c:	01800813          	li	a6,24
800008a0:	fa5ff06f          	j	80000844 <__umoddi3+0x230>
800008a4:	011657b3          	srl	a5,a2,a7
800008a8:	010696b3          	sll	a3,a3,a6
800008ac:	00d7e6b3          	or	a3,a5,a3
800008b0:	0115d733          	srl	a4,a1,a7
800008b4:	0106de13          	srli	t3,a3,0x10
800008b8:	03c75f33          	divu	t5,a4,t3
800008bc:	01069313          	slli	t1,a3,0x10
800008c0:	01035313          	srli	t1,t1,0x10
800008c4:	010597b3          	sll	a5,a1,a6
800008c8:	011555b3          	srl	a1,a0,a7
800008cc:	00f5e5b3          	or	a1,a1,a5
800008d0:	0105d793          	srli	a5,a1,0x10
800008d4:	01061633          	sll	a2,a2,a6
800008d8:	01051533          	sll	a0,a0,a6
800008dc:	03c77733          	remu	a4,a4,t3
800008e0:	03e30eb3          	mul	t4,t1,t5
800008e4:	01071713          	slli	a4,a4,0x10
800008e8:	00e7e7b3          	or	a5,a5,a4
800008ec:	000f0713          	mv	a4,t5
800008f0:	01d7fe63          	bgeu	a5,t4,8000090c <__umoddi3+0x2f8>
800008f4:	00f687b3          	add	a5,a3,a5
800008f8:	ffff0713          	addi	a4,t5,-1
800008fc:	00d7e863          	bltu	a5,a3,8000090c <__umoddi3+0x2f8>
80000900:	01d7f663          	bgeu	a5,t4,8000090c <__umoddi3+0x2f8>
80000904:	ffef0713          	addi	a4,t5,-2
80000908:	00d787b3          	add	a5,a5,a3
8000090c:	41d787b3          	sub	a5,a5,t4
80000910:	03c7deb3          	divu	t4,a5,t3
80000914:	01059593          	slli	a1,a1,0x10
80000918:	0105d593          	srli	a1,a1,0x10
8000091c:	03c7f7b3          	remu	a5,a5,t3
80000920:	000e8e13          	mv	t3,t4
80000924:	03d30333          	mul	t1,t1,t4
80000928:	01079793          	slli	a5,a5,0x10
8000092c:	00f5e5b3          	or	a1,a1,a5
80000930:	0065fe63          	bgeu	a1,t1,8000094c <__umoddi3+0x338>
80000934:	00b685b3          	add	a1,a3,a1
80000938:	fffe8e13          	addi	t3,t4,-1
8000093c:	00d5e863          	bltu	a1,a3,8000094c <__umoddi3+0x338>
80000940:	0065f663          	bgeu	a1,t1,8000094c <__umoddi3+0x338>
80000944:	ffee8e13          	addi	t3,t4,-2
80000948:	00d585b3          	add	a1,a1,a3
8000094c:	01071793          	slli	a5,a4,0x10
80000950:	00010f37          	lui	t5,0x10
80000954:	01c7e7b3          	or	a5,a5,t3
80000958:	406585b3          	sub	a1,a1,t1
8000095c:	ffff0313          	addi	t1,t5,-1 # ffff <__rom_region_size+0x754b>
80000960:	0067f733          	and	a4,a5,t1
80000964:	01065e13          	srli	t3,a2,0x10
80000968:	0107d793          	srli	a5,a5,0x10
8000096c:	00667333          	and	t1,a2,t1
80000970:	02670eb3          	mul	t4,a4,t1
80000974:	02678333          	mul	t1,a5,t1
80000978:	03c70733          	mul	a4,a4,t3
8000097c:	03c787b3          	mul	a5,a5,t3
80000980:	00670e33          	add	t3,a4,t1
80000984:	010ed713          	srli	a4,t4,0x10
80000988:	01c70733          	add	a4,a4,t3
8000098c:	00677463          	bgeu	a4,t1,80000994 <__umoddi3+0x380>
80000990:	01e787b3          	add	a5,a5,t5
80000994:	01075313          	srli	t1,a4,0x10
80000998:	00f307b3          	add	a5,t1,a5
8000099c:	00010337          	lui	t1,0x10
800009a0:	fff30313          	addi	t1,t1,-1 # ffff <__rom_region_size+0x754b>
800009a4:	00677733          	and	a4,a4,t1
800009a8:	01071713          	slli	a4,a4,0x10
800009ac:	006efeb3          	and	t4,t4,t1
800009b0:	01d70733          	add	a4,a4,t4
800009b4:	00f5e663          	bltu	a1,a5,800009c0 <__umoddi3+0x3ac>
800009b8:	00f59e63          	bne	a1,a5,800009d4 <__umoddi3+0x3c0>
800009bc:	00e57c63          	bgeu	a0,a4,800009d4 <__umoddi3+0x3c0>
800009c0:	40c70633          	sub	a2,a4,a2
800009c4:	00c73333          	sltu	t1,a4,a2
800009c8:	00d306b3          	add	a3,t1,a3
800009cc:	00060713          	mv	a4,a2
800009d0:	40d787b3          	sub	a5,a5,a3
800009d4:	40e50733          	sub	a4,a0,a4
800009d8:	00e53533          	sltu	a0,a0,a4
800009dc:	40f585b3          	sub	a1,a1,a5
800009e0:	40a585b3          	sub	a1,a1,a0
800009e4:	011598b3          	sll	a7,a1,a7
800009e8:	01075733          	srl	a4,a4,a6
800009ec:	00e8e533          	or	a0,a7,a4
800009f0:	0105d5b3          	srl	a1,a1,a6
800009f4:	00008067          	ret

800009f8 <memcpy>:
800009f8:	00050313          	mv	t1,a0
800009fc:	00060e63          	beqz	a2,80000a18 <memcpy+0x20>
80000a00:	00058383          	lb	t2,0(a1)
80000a04:	00730023          	sb	t2,0(t1)
80000a08:	fff60613          	addi	a2,a2,-1
80000a0c:	00130313          	addi	t1,t1,1
80000a10:	00158593          	addi	a1,a1,1
80000a14:	fe0616e3          	bnez	a2,80000a00 <memcpy+0x8>
80000a18:	00008067          	ret

80000a1c <memset>:
80000a1c:	00050313          	mv	t1,a0
80000a20:	00060a63          	beqz	a2,80000a34 <memset+0x18>
80000a24:	00b30023          	sb	a1,0(t1)
80000a28:	fff60613          	addi	a2,a2,-1
80000a2c:	00130313          	addi	t1,t1,1
80000a30:	fe061ae3          	bnez	a2,80000a24 <memset+0x8>
80000a34:	00008067          	ret

80000a38 <setjmp>:
80000a38:	00152023          	sw	ra,0(a0)
80000a3c:	00852223          	sw	s0,4(a0)
80000a40:	00952423          	sw	s1,8(a0)
80000a44:	01252623          	sw	s2,12(a0)
80000a48:	01352823          	sw	s3,16(a0)
80000a4c:	01452a23          	sw	s4,20(a0)
80000a50:	01552c23          	sw	s5,24(a0)
80000a54:	01652e23          	sw	s6,28(a0)
80000a58:	03752023          	sw	s7,32(a0)
80000a5c:	03852223          	sw	s8,36(a0)
80000a60:	03952423          	sw	s9,40(a0)
80000a64:	03a52623          	sw	s10,44(a0)
80000a68:	03b52823          	sw	s11,48(a0)
80000a6c:	02252a23          	sw	sp,52(a0)
80000a70:	00000513          	li	a0,0
80000a74:	00008067          	ret

80000a78 <longjmp>:
80000a78:	00052083          	lw	ra,0(a0)
80000a7c:	00452403          	lw	s0,4(a0)
80000a80:	00852483          	lw	s1,8(a0)
80000a84:	00c52903          	lw	s2,12(a0)
80000a88:	01052983          	lw	s3,16(a0)
80000a8c:	01452a03          	lw	s4,20(a0)
80000a90:	01852a83          	lw	s5,24(a0)
80000a94:	01c52b03          	lw	s6,28(a0)
80000a98:	02052b83          	lw	s7,32(a0)
80000a9c:	02452c03          	lw	s8,36(a0)
80000aa0:	02852c83          	lw	s9,40(a0)
80000aa4:	02c52d03          	lw	s10,44(a0)
80000aa8:	03052d83          	lw	s11,48(a0)
80000aac:	03452103          	lw	sp,52(a0)
80000ab0:	0015b513          	seqz	a0,a1
80000ab4:	00b50533          	add	a0,a0,a1
80000ab8:	00008067          	ret

80000abc <memmove>:
80000abc:	02060c63          	beqz	a2,80000af4 <memmove+0x38>
80000ac0:	00050313          	mv	t1,a0
80000ac4:	00100693          	li	a3,1
80000ac8:	00b56a63          	bltu	a0,a1,80000adc <memmove+0x20>
80000acc:	fff00693          	li	a3,-1
80000ad0:	fff60713          	addi	a4,a2,-1
80000ad4:	00e30333          	add	t1,t1,a4
80000ad8:	00e585b3          	add	a1,a1,a4
80000adc:	00058383          	lb	t2,0(a1)
80000ae0:	00730023          	sb	t2,0(t1)
80000ae4:	fff60613          	addi	a2,a2,-1
80000ae8:	00d30333          	add	t1,t1,a3
80000aec:	00d585b3          	add	a1,a1,a3
80000af0:	fe0616e3          	bnez	a2,80000adc <memmove+0x20>
80000af4:	00008067          	ret

80000af8 <dummy_function>:
80000af8:	00308013          	addi	zero,ra,3
void set_inject_param(char *choice);
void set_code_ptr(char *choice);
void set_location(char *choice);
void set_function(char *choice);

int dummy_function(const char *str) {
80000afc:	ff010113          	addi	sp,sp,-16
80000b00:	00112623          	sw	ra,12(sp)
        printf("Dummy function\n");
80000b04:	80008537          	lui	a0,0x80008
80000b08:	a9850513          	addi	a0,a0,-1384 # 80007a98 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007a99>
80000b0c:	36d010ef          	jal	ra,80002678 <printk>
        return 0;
}
80000b10:	00000513          	li	a0,0
80000b14:	00c12083          	lw	ra,12(sp)
80000b18:	01010113          	addi	sp,sp,16
80000b1c:	00008067          	ret

80000b20 <shellcode_target>:
80000b20:	00308013          	addi	zero,ra,3
{
80000b24:	ff010113          	addi	sp,sp,-16
80000b28:	00112623          	sw	ra,12(sp)
    printf("success.\nCode injection function reached.\n");
80000b2c:	80008537          	lui	a0,0x80008
80000b30:	aa850513          	addi	a0,a0,-1368 # 80007aa8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007aa9>
80000b34:	345010ef          	jal	ra,80002678 <printk>
    exit(0);
80000b38:	00000513          	li	a0,0
80000b3c:	179050ef          	jal	ra,800064b4 <exit>

80000b40 <ret2libc_target>:
80000b40:	00308013          	addi	zero,ra,3
{
80000b44:	ff010113          	addi	sp,sp,-16
80000b48:	00112623          	sw	ra,12(sp)
    printf("success.\nRet2Libc function reached.\n");
80000b4c:	80008537          	lui	a0,0x80008
80000b50:	ad450513          	addi	a0,a0,-1324 # 80007ad4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007ad5>
80000b54:	325010ef          	jal	ra,80002678 <printk>
    exit(0);
80000b58:	00000513          	li	a0,0
80000b5c:	159050ef          	jal	ra,800064b4 <exit>

80000b60 <rop_target>:
80000b60:	00308013          	addi	zero,ra,3
{
80000b64:	ff010113          	addi	sp,sp,-16
80000b68:	00112623          	sw	ra,12(sp)
    printf("success.\nROP function reached.\n");
80000b6c:	80008537          	lui	a0,0x80008
80000b70:	afc50513          	addi	a0,a0,-1284 # 80007afc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007afd>
80000b74:	305010ef          	jal	ra,80002678 <printk>
    exit(0);
80000b78:	00000513          	li	a0,0
80000b7c:	139050ef          	jal	ra,800064b4 <exit>

80000b80 <hex_to_bin>:
80000b80:	00308013          	addi	zero,ra,3
void build_shellcode(char *shellcode);
void hex_to_string(char *str, size_t val);
void format_instruction(char *dest, size_t insn);

const char *hex_to_bin(char c) {
	if (c >= '0' && c <= '9') return bin4b[c - '0'];
80000b84:	fd050793          	addi	a5,a0,-48
80000b88:	0ff7f793          	zext.b	a5,a5
80000b8c:	00900713          	li	a4,9
80000b90:	02f77863          	bgeu	a4,a5,80000bc0 <hex_to_bin+0x40>
	if (c >= 'a' && c <= 'f') return bin4b[10 + c - 'a'];
80000b94:	f9f50793          	addi	a5,a0,-97
80000b98:	0ff7f793          	zext.b	a5,a5
80000b9c:	00500713          	li	a4,5
80000ba0:	02f76e63          	bltu	a4,a5,80000bdc <hex_to_bin+0x5c>
80000ba4:	fa950513          	addi	a0,a0,-87
80000ba8:	8000c7b7          	lui	a5,0x8000c
80000bac:	00251513          	slli	a0,a0,0x2
80000bb0:	93478793          	addi	a5,a5,-1740 # 8000b934 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b935>
80000bb4:	00a787b3          	add	a5,a5,a0
80000bb8:	0007a503          	lw	a0,0(a5)
80000bbc:	00008067          	ret
	if (c >= '0' && c <= '9') return bin4b[c - '0'];
80000bc0:	fd050513          	addi	a0,a0,-48
80000bc4:	8000c7b7          	lui	a5,0x8000c
80000bc8:	00251513          	slli	a0,a0,0x2
80000bcc:	93478793          	addi	a5,a5,-1740 # 8000b934 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b935>
80000bd0:	00a787b3          	add	a5,a5,a0
80000bd4:	0007a503          	lw	a0,0(a5)
80000bd8:	00008067          	ret
	return NULL;
80000bdc:	00000513          	li	a0,0
}
80000be0:	00008067          	ret

80000be4 <print_current_test_parameters>:
80000be4:	00308013          	addi	zero,ra,3
print_current_test_parameters(void) {
80000be8:	ff010113          	addi	sp,sp,-16
80000bec:	00112623          	sw	ra,12(sp)
    printk("RIPE parameters:\n");
80000bf0:	80008537          	lui	a0,0x80008
80000bf4:	b1c50513          	addi	a0,a0,-1252 # 80007b1c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007b1d>
80000bf8:	281010ef          	jal	ra,80002678 <printk>
        opt_techniques[attack.technique-100],
80000bfc:	800097b7          	lui	a5,0x80009
80000c00:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80000c04:	0007a503          	lw	a0,0(a5)
80000c08:	f9c50513          	addi	a0,a0,-100
        opt_inject_params[attack.inject_param-200],
80000c0c:	0047a583          	lw	a1,4(a5)
80000c10:	f3858593          	addi	a1,a1,-200
        opt_code_ptrs[attack.code_ptr-300],
80000c14:	0087a603          	lw	a2,8(a5)
80000c18:	ed460613          	addi	a2,a2,-300
        opt_locations[attack.location-400],
80000c1c:	00c7a683          	lw	a3,12(a5)
80000c20:	e7068693          	addi	a3,a3,-400 # fe70 <__rom_region_size+0x73bc>
        opt_funcs[attack.function-500]);
80000c24:	0107a703          	lw	a4,16(a5)
80000c28:	e0c70713          	addi	a4,a4,-500 # fffe0c <CONFIG_SRAM_SIZE+0xeffe0c>
	printk("technique\t%s\n"
80000c2c:	8000c7b7          	lui	a5,0x8000c
80000c30:	00271713          	slli	a4,a4,0x2
80000c34:	97478793          	addi	a5,a5,-1676 # 8000b974 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b975>
80000c38:	00e787b3          	add	a5,a5,a4
80000c3c:	8000c737          	lui	a4,0x8000c
80000c40:	00269693          	slli	a3,a3,0x2
80000c44:	99870713          	addi	a4,a4,-1640 # 8000b998 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b999>
80000c48:	00d70733          	add	a4,a4,a3
80000c4c:	8000c6b7          	lui	a3,0x8000c
80000c50:	00261613          	slli	a2,a2,0x2
80000c54:	9a868693          	addi	a3,a3,-1624 # 8000b9a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b9a9>
80000c58:	00c686b3          	add	a3,a3,a2
80000c5c:	8000c637          	lui	a2,0x8000c
80000c60:	00259593          	slli	a1,a1,0x2
80000c64:	9f060613          	addi	a2,a2,-1552 # 8000b9f0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b9f1>
80000c68:	00b60633          	add	a2,a2,a1
80000c6c:	00251513          	slli	a0,a0,0x2
80000c70:	81418593          	addi	a1,gp,-2028 # 8000ba84 <opt_techniques>
80000c74:	00a585b3          	add	a1,a1,a0
80000c78:	0007a783          	lw	a5,0(a5)
80000c7c:	00072703          	lw	a4,0(a4)
80000c80:	0006a683          	lw	a3,0(a3)
80000c84:	00062603          	lw	a2,0(a2)
80000c88:	0005a583          	lw	a1,0(a1)
80000c8c:	80008537          	lui	a0,0x80008
80000c90:	b3050513          	addi	a0,a0,-1232 # 80007b30 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007b31>
80000c94:	1e5010ef          	jal	ra,80002678 <printk>
}
80000c98:	00c12083          	lw	ra,12(sp)
80000c9c:	01010113          	addi	sp,sp,16
80000ca0:	00008067          	ret

80000ca4 <build_payload>:
80000ca4:	00308013          	addi	zero,ra,3
{
80000ca8:	ff010113          	addi	sp,sp,-16
80000cac:	00112623          	sw	ra,12(sp)
80000cb0:	00812423          	sw	s0,8(sp)
80000cb4:	00912223          	sw	s1,4(sp)
80000cb8:	01212023          	sw	s2,0(sp)
80000cbc:	00050413          	mv	s0,a0
	switch (attack.inject_param) {
80000cc0:	800097b7          	lui	a5,0x80009
80000cc4:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80000cc8:	0047a783          	lw	a5,4(a5)
80000ccc:	0ca00713          	li	a4,202
80000cd0:	02f76863          	bltu	a4,a5,80000d00 <build_payload+0x5c>
80000cd4:	0c900713          	li	a4,201
80000cd8:	04e7f663          	bgeu	a5,a4,80000d24 <build_payload+0x80>
80000cdc:	0c800713          	li	a4,200
80000ce0:	04e79e63          	bne	a5,a4,80000d3c <build_payload+0x98>
            if (payload->size < (size_shellcode_nonop + sizeof(long))) {
80000ce4:	00452703          	lw	a4,4(a0)
80000ce8:	00f00793          	li	a5,15
80000cec:	18e7fa63          	bgeu	a5,a4,80000e80 <build_payload+0x1dc>
            shellcode      = shellcode_nonop;
80000cf0:	800094b7          	lui	s1,0x80009
80000cf4:	f8848493          	addi	s1,s1,-120 # 80008f88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f89>
            size_shellcode = size_shellcode_nonop;
80000cf8:	00c00913          	li	s2,12
80000cfc:	0400006f          	j	80000d3c <build_payload+0x98>
	switch (attack.inject_param) {
80000d00:	0cb00713          	li	a4,203
80000d04:	02e79c63          	bne	a5,a4,80000d3c <build_payload+0x98>
            if (attack.code_ptr == VAR_IOF)
80000d08:	800097b7          	lui	a5,0x80009
80000d0c:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80000d10:	0087a783          	lw	a5,8(a5)
80000d14:	13c00713          	li	a4,316
80000d18:	10e78063          	beq	a5,a4,80000e18 <build_payload+0x174>
			if (attack.code_ptr == VAR_LEAK) {
80000d1c:	13d00713          	li	a4,317
80000d20:	10e78263          	beq	a5,a4,80000e24 <build_payload+0x180>
            if (payload->size < sizeof(long))
80000d24:	00442703          	lw	a4,4(s0)
80000d28:	00300793          	li	a5,3
80000d2c:	14e7fe63          	bgeu	a5,a4,80000e88 <build_payload+0x1e4>
            shellcode      = "dummy";
80000d30:	800084b7          	lui	s1,0x80008
80000d34:	b7848493          	addi	s1,s1,-1160 # 80007b78 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007b79>
            size_shellcode = 0;
80000d38:	00000913          	li	s2,0
    payload->buffer = (char *) malloc(payload->size);
80000d3c:	00442503          	lw	a0,4(s0)
80000d40:	7b4050ef          	jal	ra,800064f4 <malloc>
80000d44:	00a42623          	sw	a0,12(s0)
    if (payload->buffer == NULL) {
80000d48:	12050263          	beqz	a0,80000e6c <build_payload+0x1c8>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
80000d4c:	00090613          	mv	a2,s2
80000d50:	00048593          	mv	a1,s1
80000d54:	ca5ff0ef          	jal	ra,800009f8 <memcpy>
      (payload->size - size_shellcode - sizeof(long) - sizeof(char));
80000d58:	00442483          	lw	s1,4(s0)
80000d5c:	412484b3          	sub	s1,s1,s2
    bytes_to_pad =
80000d60:	ffb48493          	addi	s1,s1,-5
    memset((payload->buffer + size_shellcode), 'A', bytes_to_pad);
80000d64:	00c42503          	lw	a0,12(s0)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
80000d68:	00048613          	mv	a2,s1
80000d6c:	04100593          	li	a1,65
80000d70:	01250533          	add	a0,a0,s2
80000d74:	ca9ff0ef          	jal	ra,80000a1c <memset>
        fprintf(stderr, "bytes to pad: %d\n", bytes_to_pad);
80000d78:	00048593          	mv	a1,s1
80000d7c:	80008537          	lui	a0,0x80008
80000d80:	ba450513          	addi	a0,a0,-1116 # 80007ba4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007ba5>
80000d84:	0f5010ef          	jal	ra,80002678 <printk>
        fprintf(stderr, "\noverflow_ptr: %p\n", payload->overflow_ptr);
80000d88:	00842583          	lw	a1,8(s0)
80000d8c:	80008537          	lui	a0,0x80008
80000d90:	bb850513          	addi	a0,a0,-1096 # 80007bb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007bb9>
80000d94:	0e5010ef          	jal	ra,80002678 <printk>
    if (attack.code_ptr != VAR_IOF) {
80000d98:	800097b7          	lui	a5,0x80009
80000d9c:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80000da0:	0087a703          	lw	a4,8(a5)
80000da4:	13c00793          	li	a5,316
80000da8:	02f70863          	beq	a4,a5,80000dd8 <build_payload+0x134>
        memcpy(&(payload->buffer[size_shellcode + bytes_to_pad]),
80000dac:	00c42783          	lw	a5,12(s0)
80000db0:	00990933          	add	s2,s2,s1
80000db4:	012787b3          	add	a5,a5,s2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
80000db8:	00844583          	lbu	a1,8(s0)
80000dbc:	00944603          	lbu	a2,9(s0)
80000dc0:	00a44683          	lbu	a3,10(s0)
80000dc4:	00b44703          	lbu	a4,11(s0)
80000dc8:	00b78023          	sb	a1,0(a5)
80000dcc:	00c780a3          	sb	a2,1(a5)
80000dd0:	00d78123          	sb	a3,2(a5)
80000dd4:	00e781a3          	sb	a4,3(a5)
    memset((payload->buffer + payload->size - 1), '\0', 1);
80000dd8:	00c42783          	lw	a5,12(s0)
80000ddc:	00442703          	lw	a4,4(s0)
80000de0:	fff70713          	addi	a4,a4,-1
80000de4:	00e787b3          	add	a5,a5,a4
__ssp_bos_icheck3(memset, void *, int)
80000de8:	00078023          	sb	zero,0(a5)
        fprintf(stderr, "payload: %s\n", payload->buffer);
80000dec:	00c42583          	lw	a1,12(s0)
80000df0:	80008537          	lui	a0,0x80008
80000df4:	bcc50513          	addi	a0,a0,-1076 # 80007bcc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007bcd>
80000df8:	081010ef          	jal	ra,80002678 <printk>
    return TRUE;
80000dfc:	00100513          	li	a0,1
} /* build_payload */
80000e00:	00c12083          	lw	ra,12(sp)
80000e04:	00812403          	lw	s0,8(sp)
80000e08:	00412483          	lw	s1,4(sp)
80000e0c:	00012903          	lw	s2,0(sp)
80000e10:	01010113          	addi	sp,sp,16
80000e14:	00008067          	ret
                payload->size = 256 + sizeof(long) + sizeof(char);
80000e18:	10500713          	li	a4,261
80000e1c:	00e52223          	sw	a4,4(a0)
80000e20:	efdff06f          	j	80000d1c <build_payload+0x78>
				payload->size += 32 - sizeof(long);
80000e24:	00442783          	lw	a5,4(s0)
80000e28:	01c78793          	addi	a5,a5,28
80000e2c:	00f42223          	sw	a5,4(s0)
				payload->buffer[0] = payload->size & 0xFF;
80000e30:	00c42703          	lw	a4,12(s0)
80000e34:	00f70023          	sb	a5,0(a4)
				payload->buffer[1] = payload->size / 0x100;
80000e38:	00442783          	lw	a5,4(s0)
80000e3c:	0087d793          	srli	a5,a5,0x8
80000e40:	00c42703          	lw	a4,12(s0)
80000e44:	00f700a3          	sb	a5,1(a4)
				payload->buffer[2] = 'A';
80000e48:	00c42783          	lw	a5,12(s0)
80000e4c:	04100713          	li	a4,65
80000e50:	00e78123          	sb	a4,2(a5)
				payload->buffer[3] = '\0';
80000e54:	00c42783          	lw	a5,12(s0)
80000e58:	000781a3          	sb	zero,3(a5)
				payload->size = 4;
80000e5c:	00400793          	li	a5,4
80000e60:	00f42223          	sw	a5,4(s0)
				return TRUE;
80000e64:	00100513          	li	a0,1
80000e68:	f99ff06f          	j	80000e00 <build_payload+0x15c>
            printk("Unable to allocate payload buffer.");
80000e6c:	80008537          	lui	a0,0x80008
80000e70:	b8050513          	addi	a0,a0,-1152 # 80007b80 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007b81>
80000e74:	005010ef          	jal	ra,80002678 <printk>
        return FALSE;
80000e78:	00000513          	li	a0,0
80000e7c:	f85ff06f          	j	80000e00 <build_payload+0x15c>
                return FALSE;
80000e80:	00000513          	li	a0,0
80000e84:	f7dff06f          	j	80000e00 <build_payload+0x15c>
                return FALSE;
80000e88:	00000513          	li	a0,0
80000e8c:	f75ff06f          	j	80000e00 <build_payload+0x15c>

80000e90 <lj_func>:
80000e90:	00308013          	addi	zero,ra,3
{
80000e94:	ff010113          	addi	sp,sp,-16
80000e98:	00112623          	sw	ra,12(sp)
    longjmp(lj_buf, 1111);
80000e9c:	45700593          	li	a1,1111
80000ea0:	bd9ff0ef          	jal	ra,80000a78 <longjmp>

80000ea4 <homebrew_memcpy>:
80000ea4:	00308013          	addi	zero,ra,3
    while (length--) {
80000ea8:	0180006f          	j	80000ec0 <homebrew_memcpy+0x1c>
        *d++ = *s++;
80000eac:	0005c703          	lbu	a4,0(a1)
80000eb0:	00e50023          	sb	a4,0(a0)
80000eb4:	00158593          	addi	a1,a1,1
80000eb8:	00150513          	addi	a0,a0,1
    while (length--) {
80000ebc:	00078613          	mv	a2,a5
80000ec0:	fff60793          	addi	a5,a2,-1
80000ec4:	fe0614e3          	bnez	a2,80000eac <homebrew_memcpy+0x8>
}
80000ec8:	00008067          	ret

80000ecc <set_low_buf>:
80000ecc:	00308013          	addi	zero,ra,3
{
80000ed0:	bf010113          	addi	sp,sp,-1040
80000ed4:	40112623          	sw	ra,1036(sp)
80000ed8:	40812423          	sw	s0,1032(sp)
80000edc:	00050413          	mv	s0,a0
        fprintf(stderr, "Inside set_low_buf()\n");
80000ee0:	80008537          	lui	a0,0x80008
80000ee4:	bdc50513          	addi	a0,a0,-1060 # 80007bdc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007bdd>
80000ee8:	790010ef          	jal	ra,80002678 <printk>
    *buf = &low_buf;
80000eec:	00242023          	sw	sp,0(s0)
}
80000ef0:	40c12083          	lw	ra,1036(sp)
80000ef4:	40812403          	lw	s0,1032(sp)
80000ef8:	41010113          	addi	sp,sp,1040
80000efc:	00008067          	ret

80000f00 <iof>:
80000f00:	00308013          	addi	zero,ra,3
{
80000f04:	ff010113          	addi	sp,sp,-16
80000f08:	00112623          	sw	ra,12(sp)
80000f0c:	00812423          	sw	s0,8(sp)
80000f10:	00912223          	sw	s1,4(sp)
80000f14:	00058493          	mv	s1,a1
    uint8_t len  = strlen(buf);
80000f18:	235050ef          	jal	ra,8000694c <strlen>
    map      = (char *) malloc(len * sizeof(char));
80000f1c:	0ff57413          	zext.b	s0,a0
80000f20:	00040513          	mv	a0,s0
80000f24:	5d0050ef          	jal	ra,800064f4 <malloc>
    key     -= (uint32_t) map;
80000f28:	40a484b3          	sub	s1,s1,a0
    key     &= (uint16_t) len - 1;
80000f2c:	fff40413          	addi	s0,s0,-1
80000f30:	00947433          	and	s0,s0,s1
    map[key] = 0xa1;
80000f34:	00850533          	add	a0,a0,s0
80000f38:	fa100793          	li	a5,-95
80000f3c:	00f50023          	sb	a5,0(a0)
}
80000f40:	00c12083          	lw	ra,12(sp)
80000f44:	00812403          	lw	s0,8(sp)
80000f48:	00412483          	lw	s1,4(sp)
80000f4c:	01010113          	addi	sp,sp,16
80000f50:	00008067          	ret

80000f54 <dop_target>:
80000f54:	00308013          	addi	zero,ra,3
{
80000f58:	fe010113          	addi	sp,sp,-32
80000f5c:	00112e23          	sw	ra,28(sp)
    size_t auth_loc = auth;
80000f60:	00b12623          	sw	a1,12(sp)
    if (attack.code_ptr == VAR_IOF) {
80000f64:	800097b7          	lui	a5,0x80009
80000f68:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80000f6c:	0087a703          	lw	a4,8(a5)
80000f70:	13c00793          	li	a5,316
80000f74:	02f70263          	beq	a4,a5,80000f98 <dop_target+0x44>
    if (!auth_loc) {
80000f78:	00c12783          	lw	a5,12(sp)
80000f7c:	02079463          	bnez	a5,80000fa4 <dop_target+0x50>
        printf("DOP attack failed\n");
80000f80:	80008537          	lui	a0,0x80008
80000f84:	bf450513          	addi	a0,a0,-1036 # 80007bf4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007bf5>
80000f88:	6f0010ef          	jal	ra,80002678 <printk>
}
80000f8c:	01c12083          	lw	ra,28(sp)
80000f90:	02010113          	addi	sp,sp,32
80000f94:	00008067          	ret
        iof(buf, &auth_loc);
80000f98:	00c10593          	addi	a1,sp,12
80000f9c:	f65ff0ef          	jal	ra,80000f00 <iof>
80000fa0:	fd9ff06f          	j	80000f78 <dop_target+0x24>
        printf("success.\nDOP memory corruption reached.\n");
80000fa4:	80008537          	lui	a0,0x80008
80000fa8:	c0850513          	addi	a0,a0,-1016 # 80007c08 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007c09>
80000fac:	6cc010ef          	jal	ra,80002678 <printk>
        exit(0);
80000fb0:	00000513          	li	a0,0
80000fb4:	500050ef          	jal	ra,800064b4 <exit>

80000fb8 <data_leak>:
80000fb8:	00308013          	addi	zero,ra,3
data_leak(char *buf) {
80000fbc:	ff010113          	addi	sp,sp,-16
80000fc0:	00112623          	sw	ra,12(sp)
80000fc4:	00812423          	sw	s0,8(sp)
80000fc8:	00912223          	sw	s1,4(sp)
80000fcc:	01212023          	sw	s2,0(sp)
80000fd0:	00050413          	mv	s0,a0
	uint16_t size = buf[0] + (buf[1] * 0x100), i;
80000fd4:	00054483          	lbu	s1,0(a0)
80000fd8:	00154783          	lbu	a5,1(a0)
80000fdc:	00879793          	slli	a5,a5,0x8
80000fe0:	00f484b3          	add	s1,s1,a5
80000fe4:	01049493          	slli	s1,s1,0x10
80000fe8:	0104d493          	srli	s1,s1,0x10
	char *msg = (char *)malloc(size);
80000fec:	00048513          	mv	a0,s1
80000ff0:	504050ef          	jal	ra,800064f4 <malloc>
80000ff4:	00050913          	mv	s2,a0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
80000ff8:	00048613          	mv	a2,s1
80000ffc:	00240593          	addi	a1,s0,2
80001000:	9f9ff0ef          	jal	ra,800009f8 <memcpy>
80001004:	00000413          	li	s0,0
80001008:	0100006f          	j	80001018 <data_leak+0x60>
	for (i = 0; i < size; i++) {
8000100c:	00140413          	addi	s0,s0,1
80001010:	01041413          	slli	s0,s0,0x10
80001014:	01045413          	srli	s0,s0,0x10
80001018:	02947263          	bgeu	s0,s1,8000103c <data_leak+0x84>
		if (msg[i] >= 0x20) printf("%c",msg[i]);
8000101c:	008907b3          	add	a5,s2,s0
80001020:	0007c583          	lbu	a1,0(a5)
80001024:	01f00793          	li	a5,31
80001028:	feb7f2e3          	bgeu	a5,a1,8000100c <data_leak+0x54>
8000102c:	80008537          	lui	a0,0x80008
80001030:	c3450513          	addi	a0,a0,-972 # 80007c34 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007c35>
80001034:	644010ef          	jal	ra,80002678 <printk>
80001038:	fd5ff06f          	j	8000100c <data_leak+0x54>
	printf("\n");
8000103c:	80008537          	lui	a0,0x80008
80001040:	bf050513          	addi	a0,a0,-1040 # 80007bf0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007bf1>
80001044:	634010ef          	jal	ra,80002678 <printk>
}			
80001048:	00c12083          	lw	ra,12(sp)
8000104c:	00812403          	lw	s0,8(sp)
80001050:	00412483          	lw	s1,4(sp)
80001054:	00012903          	lw	s2,0(sp)
80001058:	01010113          	addi	sp,sp,16
8000105c:	00008067          	ret

80001060 <hex_to_string>:
80001060:	00308013          	addi	zero,ra,3
{
80001064:	ff010113          	addi	sp,sp,-16
80001068:	00112623          	sw	ra,12(sp)
8000106c:	00812423          	sw	s0,8(sp)
80001070:	00050413          	mv	s0,a0
80001074:	00058693          	mv	a3,a1
    snprintf(str, 9, "%8x", val);
80001078:	80008637          	lui	a2,0x80008
8000107c:	c3860613          	addi	a2,a2,-968 # 80007c38 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007c39>
80001080:	00900593          	li	a1,9
80001084:	714050ef          	jal	ra,80006798 <sniprintf>
    for (int i = 0; i < 9; i++) {
80001088:	00000793          	li	a5,0
8000108c:	0080006f          	j	80001094 <hex_to_string+0x34>
80001090:	00178793          	addi	a5,a5,1
80001094:	00800713          	li	a4,8
80001098:	02f74063          	blt	a4,a5,800010b8 <hex_to_string+0x58>
        if (str[i] == ' ') str[i] = '0';
8000109c:	00f40733          	add	a4,s0,a5
800010a0:	00074603          	lbu	a2,0(a4)
800010a4:	02000693          	li	a3,32
800010a8:	fed614e3          	bne	a2,a3,80001090 <hex_to_string+0x30>
800010ac:	03000693          	li	a3,48
800010b0:	00d70023          	sb	a3,0(a4)
800010b4:	fddff06f          	j	80001090 <hex_to_string+0x30>
}
800010b8:	00c12083          	lw	ra,12(sp)
800010bc:	00812403          	lw	s0,8(sp)
800010c0:	01010113          	addi	sp,sp,16
800010c4:	00008067          	ret

800010c8 <format_instruction>:
800010c8:	00308013          	addi	zero,ra,3
{
800010cc:	ff010113          	addi	sp,sp,-16
    insn_bytes[0] = (insn >> 24) & 0xff;
800010d0:	0185d793          	srli	a5,a1,0x18
800010d4:	00f10623          	sb	a5,12(sp)
    insn_bytes[1] = (insn >> 16) & 0xff;
800010d8:	0105d793          	srli	a5,a1,0x10
800010dc:	00f106a3          	sb	a5,13(sp)
    insn_bytes[2] = (insn >> 8) & 0xff;
800010e0:	0085d793          	srli	a5,a1,0x8
800010e4:	00f10723          	sb	a5,14(sp)
    insn_bytes[3] = insn & 0xff;
800010e8:	00b107a3          	sb	a1,15(sp)
    for (int i = 3; i >= 0; i--) {
800010ec:	00300713          	li	a4,3
800010f0:	0240006f          	j	80001114 <format_instruction+0x4c>
        dest[3 - i] = insn_bytes[i];
800010f4:	00300793          	li	a5,3
800010f8:	40e787b3          	sub	a5,a5,a4
800010fc:	00f507b3          	add	a5,a0,a5
80001100:	01070693          	addi	a3,a4,16
80001104:	002686b3          	add	a3,a3,sp
80001108:	ffc6c683          	lbu	a3,-4(a3)
8000110c:	00d78023          	sb	a3,0(a5)
    for (int i = 3; i >= 0; i--) {
80001110:	fff70713          	addi	a4,a4,-1
80001114:	fe0750e3          	bgez	a4,800010f4 <format_instruction+0x2c>
}
80001118:	01010113          	addi	sp,sp,16
8000111c:	00008067          	ret

80001120 <build_shellcode>:
80001120:	00308013          	addi	zero,ra,3
{
80001124:	f6010113          	addi	sp,sp,-160
80001128:	08112e23          	sw	ra,156(sp)
8000112c:	08812c23          	sw	s0,152(sp)
80001130:	08912a23          	sw	s1,148(sp)
80001134:	09212823          	sw	s2,144(sp)
80001138:	09312623          	sw	s3,140(sp)
8000113c:	00050493          	mv	s1,a0
    memset(attack_addr, 0, sizeof(attack_addr) );
80001140:	06012a23          	sw	zero,116(sp)
80001144:	06012c23          	sw	zero,120(sp)
80001148:	06010e23          	sb	zero,124(sp)
    memset(low_bits,    0, sizeof(low_bits) );
8000114c:	06012823          	sw	zero,112(sp)
    memset(high_bits,   0, sizeof(high_bits) );
80001150:	06012423          	sw	zero,104(sp)
80001154:	06011623          	sh	zero,108(sp)
    memset(lui_bin,     0, sizeof(lui_bin) );
80001158:	04012223          	sw	zero,68(sp)
8000115c:	04012423          	sw	zero,72(sp)
80001160:	04012623          	sw	zero,76(sp)
80001164:	04012823          	sw	zero,80(sp)
80001168:	04012a23          	sw	zero,84(sp)
8000116c:	04012c23          	sw	zero,88(sp)
80001170:	04012e23          	sw	zero,92(sp)
80001174:	06012023          	sw	zero,96(sp)
80001178:	06010223          	sb	zero,100(sp)
    memset(addi_bin,    0, sizeof(addi_bin) );
8000117c:	02012023          	sw	zero,32(sp)
80001180:	02012223          	sw	zero,36(sp)
80001184:	02012423          	sw	zero,40(sp)
80001188:	02012623          	sw	zero,44(sp)
8000118c:	02012823          	sw	zero,48(sp)
80001190:	02012a23          	sw	zero,52(sp)
80001194:	02012c23          	sw	zero,56(sp)
80001198:	02012e23          	sw	zero,60(sp)
8000119c:	04010023          	sb	zero,64(sp)
    memset(lui_s,       0, sizeof(lui_s) );
800011a0:	00012a23          	sw	zero,20(sp)
800011a4:	00012c23          	sw	zero,24(sp)
800011a8:	00010e23          	sb	zero,28(sp)
    memset(addi_s,      0, sizeof(addi_s) );
800011ac:	00012423          	sw	zero,8(sp)
800011b0:	00012623          	sw	zero,12(sp)
800011b4:	00010823          	sb	zero,16(sp)
	if (((unsigned long)&shellcode_target & 0x00000fff) >= 0x800)
800011b8:	800015b7          	lui	a1,0x80001
800011bc:	b2058593          	addi	a1,a1,-1248 # 80000b20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b21>
800011c0:	000017b7          	lui	a5,0x1
800011c4:	80078793          	addi	a5,a5,-2048 # 800 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE>
800011c8:	00f5f7b3          	and	a5,a1,a5
800011cc:	04078a63          	beqz	a5,80001220 <build_shellcode+0x100>
		hex_to_string(attack_addr, &shellcode_target + 0x1000);
800011d0:	800025b7          	lui	a1,0x80002
800011d4:	b2058593          	addi	a1,a1,-1248 # 80001b20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80001b21>
800011d8:	07410513          	addi	a0,sp,116
800011dc:	e85ff0ef          	jal	ra,80001060 <hex_to_string>
    strncpy(low_bits, &attack_addr[5], 3);
800011e0:	00300613          	li	a2,3
800011e4:	07910593          	addi	a1,sp,121
800011e8:	07010513          	addi	a0,sp,112
800011ec:	025050ef          	jal	ra,80006a10 <strncpy>
    strncpy(high_bits, attack_addr, 5);
800011f0:	00500613          	li	a2,5
800011f4:	07410593          	addi	a1,sp,116
800011f8:	06810513          	addi	a0,sp,104
800011fc:	015050ef          	jal	ra,80006a10 <strncpy>
    jalr_val = strtoul(jalr_s, 0, 16);
80001200:	01000613          	li	a2,16
80001204:	00000593          	li	a1,0
80001208:	80008537          	lui	a0,0x80008
8000120c:	c3c50513          	addi	a0,a0,-964 # 80007c3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007c3d>
80001210:	1bd050ef          	jal	ra,80006bcc <strtoul>
80001214:	00050913          	mv	s2,a0
    for (int i = 0; i < 5; i++) {
80001218:	00000413          	li	s0,0
8000121c:	0380006f          	j	80001254 <build_shellcode+0x134>
		hex_to_string(attack_addr, &shellcode_target);
80001220:	07410513          	addi	a0,sp,116
80001224:	e3dff0ef          	jal	ra,80001060 <hex_to_string>
80001228:	fb9ff06f          	j	800011e0 <build_shellcode+0xc0>
        strncat(lui_bin, hex_to_bin(high_bits[i]), 4);
8000122c:	08040793          	addi	a5,s0,128
80001230:	002787b3          	add	a5,a5,sp
80001234:	fe87c503          	lbu	a0,-24(a5)
80001238:	949ff0ef          	jal	ra,80000b80 <hex_to_bin>
8000123c:	00050593          	mv	a1,a0
80001240:	02100693          	li	a3,33
80001244:	00400613          	li	a2,4
80001248:	04410513          	addi	a0,sp,68
8000124c:	764050ef          	jal	ra,800069b0 <__strncat_chk>
    for (int i = 0; i < 5; i++) {
80001250:	00140413          	addi	s0,s0,1
80001254:	00400793          	li	a5,4
80001258:	fc87dae3          	bge	a5,s0,8000122c <build_shellcode+0x10c>
    strncat(lui_bin, "001100110111", 12);
8000125c:	02100613          	li	a2,33
80001260:	800085b7          	lui	a1,0x80008
80001264:	c4858593          	addi	a1,a1,-952 # 80007c48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007c49>
80001268:	04410513          	addi	a0,sp,68
8000126c:	60c050ef          	jal	ra,80006878 <__strcat_chk>
    lui_val = strtoul(lui_bin, 0, 2);
80001270:	00200613          	li	a2,2
80001274:	00000593          	li	a1,0
80001278:	04410513          	addi	a0,sp,68
8000127c:	151050ef          	jal	ra,80006bcc <strtoul>
80001280:	00050993          	mv	s3,a0
    hex_to_string(lui_s, lui_val);
80001284:	00050593          	mv	a1,a0
80001288:	01410513          	addi	a0,sp,20
8000128c:	dd5ff0ef          	jal	ra,80001060 <hex_to_string>
    for (int i = 0; i < 3; i++) {
80001290:	00000413          	li	s0,0
80001294:	02c0006f          	j	800012c0 <build_shellcode+0x1a0>
        strncat(addi_bin, hex_to_bin(low_bits[i]), 4);
80001298:	08040793          	addi	a5,s0,128
8000129c:	002787b3          	add	a5,a5,sp
800012a0:	ff07c503          	lbu	a0,-16(a5)
800012a4:	8ddff0ef          	jal	ra,80000b80 <hex_to_bin>
800012a8:	00050593          	mv	a1,a0
800012ac:	02100693          	li	a3,33
800012b0:	00400613          	li	a2,4
800012b4:	02010513          	addi	a0,sp,32
800012b8:	6f8050ef          	jal	ra,800069b0 <__strncat_chk>
    for (int i = 0; i < 3; i++) {
800012bc:	00140413          	addi	s0,s0,1
800012c0:	00200793          	li	a5,2
800012c4:	fc87dae3          	bge	a5,s0,80001298 <build_shellcode+0x178>
    strncat(addi_bin, "00110000001100010011", 20);
800012c8:	02100613          	li	a2,33
800012cc:	800085b7          	lui	a1,0x80008
800012d0:	c5858593          	addi	a1,a1,-936 # 80007c58 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007c59>
800012d4:	02010513          	addi	a0,sp,32
800012d8:	5a0050ef          	jal	ra,80006878 <__strcat_chk>
    addi_val = strtoul(addi_bin, 0, 2);
800012dc:	00200613          	li	a2,2
800012e0:	00000593          	li	a1,0
800012e4:	02010513          	addi	a0,sp,32
800012e8:	0e5050ef          	jal	ra,80006bcc <strtoul>
800012ec:	00050413          	mv	s0,a0
    hex_to_string(addi_s, addi_val);
800012f0:	00050593          	mv	a1,a0
800012f4:	00810513          	addi	a0,sp,8
800012f8:	d69ff0ef          	jal	ra,80001060 <hex_to_string>
    format_instruction(shellcode, lui_val);
800012fc:	00098593          	mv	a1,s3
80001300:	00048513          	mv	a0,s1
80001304:	dc5ff0ef          	jal	ra,800010c8 <format_instruction>
    format_instruction(shellcode + 4, addi_val);
80001308:	00040593          	mv	a1,s0
8000130c:	00448513          	addi	a0,s1,4
80001310:	db9ff0ef          	jal	ra,800010c8 <format_instruction>
    format_instruction(shellcode + 8, jalr_val);
80001314:	00090593          	mv	a1,s2
80001318:	00848513          	addi	a0,s1,8
8000131c:	dadff0ef          	jal	ra,800010c8 <format_instruction>
    hex_to_string(lui_s, lui_val);
80001320:	00098593          	mv	a1,s3
80001324:	01410513          	addi	a0,sp,20
80001328:	d39ff0ef          	jal	ra,80001060 <hex_to_string>
    hex_to_string(addi_s, addi_val);
8000132c:	00040593          	mv	a1,s0
80001330:	00810513          	addi	a0,sp,8
80001334:	d2dff0ef          	jal	ra,80001060 <hex_to_string>
        printf("----------------\nShellcode instructions:\n");
80001338:	80008537          	lui	a0,0x80008
8000133c:	c7050513          	addi	a0,a0,-912 # 80007c70 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007c71>
80001340:	338010ef          	jal	ra,80002678 <printk>
        printf("%s0x%-20s%14s\n", "lui t1,  ", high_bits, lui_s);
80001344:	01410693          	addi	a3,sp,20
80001348:	06810613          	addi	a2,sp,104
8000134c:	800085b7          	lui	a1,0x80008
80001350:	c9c58593          	addi	a1,a1,-868 # 80007c9c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007c9d>
80001354:	80008537          	lui	a0,0x80008
80001358:	ca850513          	addi	a0,a0,-856 # 80007ca8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007ca9>
8000135c:	31c010ef          	jal	ra,80002678 <printk>
        printf("%s0x%-20s%10s\n", "addi t1, t1, ", low_bits, addi_s);
80001360:	00810693          	addi	a3,sp,8
80001364:	07010613          	addi	a2,sp,112
80001368:	800085b7          	lui	a1,0x80008
8000136c:	cb858593          	addi	a1,a1,-840 # 80007cb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007cb9>
80001370:	80008537          	lui	a0,0x80008
80001374:	cc850513          	addi	a0,a0,-824 # 80007cc8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007cc9>
80001378:	300010ef          	jal	ra,80002678 <printk>
        printf("%s%38s\n----------------\n", "jalr t1", jalr_s);
8000137c:	80008637          	lui	a2,0x80008
80001380:	c3c60613          	addi	a2,a2,-964 # 80007c3c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007c3d>
80001384:	800085b7          	lui	a1,0x80008
80001388:	cd858593          	addi	a1,a1,-808 # 80007cd8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007cd9>
8000138c:	80008537          	lui	a0,0x80008
80001390:	ce050513          	addi	a0,a0,-800 # 80007ce0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007ce1>
80001394:	2e4010ef          	jal	ra,80002678 <printk>
} /* build_shellcode */
80001398:	09c12083          	lw	ra,156(sp)
8000139c:	09812403          	lw	s0,152(sp)
800013a0:	09412483          	lw	s1,148(sp)
800013a4:	09012903          	lw	s2,144(sp)
800013a8:	08c12983          	lw	s3,140(sp)
800013ac:	0a010113          	addi	sp,sp,160
800013b0:	00008067          	ret

800013b4 <perform_attack>:
800013b4:	00308013          	addi	zero,ra,3
{
800013b8:	91010113          	addi	sp,sp,-1776
800013bc:	6e112623          	sw	ra,1772(sp)
800013c0:	6e812423          	sw	s0,1768(sp)
800013c4:	6e912223          	sw	s1,1764(sp)
800013c8:	6f212023          	sw	s2,1760(sp)
800013cc:	6d312e23          	sw	s3,1756(sp)
800013d0:	6d412c23          	sw	s4,1752(sp)
800013d4:	6f010413          	addi	s0,sp,1776
800013d8:	92a42e23          	sw	a0,-1732(s0)
800013dc:	92b42c23          	sw	a1,-1736(s0)
	strcpy(stack_secret, data_secret);
800013e0:	02000613          	li	a2,32
800013e4:	8000b5b7          	lui	a1,0x8000b
800013e8:	71058593          	addi	a1,a1,1808 # 8000b710 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b711>
800013ec:	e8040513          	addi	a0,s0,-384
800013f0:	4f8050ef          	jal	ra,800068e8 <__strcpy_chk>
    stack_struct.func_ptr = &dummy_function;
800013f4:	800014b7          	lui	s1,0x80001
800013f8:	af848493          	addi	s1,s1,-1288 # 80000af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000af9>
800013fc:	a6942e23          	sw	s1,-1412(s0)
      (struct attackme *) malloc(sizeof(struct attackme));
80001400:	10400513          	li	a0,260
80001404:	0f0050ef          	jal	ra,800064f4 <malloc>
80001408:	92a42623          	sw	a0,-1748(s0)
    heap_struct->func_ptr = dummy_function;
8000140c:	10952023          	sw	s1,256(a0)
    char * heap_buffer1 = (char *) malloc(256 + sizeof(long));
80001410:	10400513          	li	a0,260
80001414:	0e0050ef          	jal	ra,800064f4 <malloc>
80001418:	00050493          	mv	s1,a0
    char * heap_buffer2 = (char *) malloc(256 + sizeof(long));
8000141c:	10400513          	li	a0,260
80001420:	0d4050ef          	jal	ra,800064f4 <malloc>
80001424:	00050913          	mv	s2,a0
    char * heap_buffer3 = (char *) malloc(256 + sizeof(long));
80001428:	10400513          	li	a0,260
8000142c:	0c8050ef          	jal	ra,800064f4 <malloc>
80001430:	00050a13          	mv	s4,a0
    int * heap_flag = (int *) malloc(sizeof(int *));
80001434:	00400513          	li	a0,4
80001438:	0bc050ef          	jal	ra,800064f4 <malloc>
    int(**heap_func_ptr)(const char *) = 0;
8000143c:	92042a23          	sw	zero,-1740(s0)
    if (heap_buffer1 == NULL || heap_buffer2 == NULL) {
80001440:	08048863          	beqz	s1,800014d0 <perform_attack+0x11c>
80001444:	00050993          	mv	s3,a0
80001448:	08090463          	beqz	s2,800014d0 <perform_attack+0x11c>
    bss_buffer[0]  = 'a';
8000144c:	800097b7          	lui	a5,0x80009
80001450:	06100713          	li	a4,97
80001454:	e6e78a23          	sb	a4,-396(a5) # 80008e74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008e75>
  	strcpy(bss_secret, data_secret);
80001458:	02000613          	li	a2,32
8000145c:	8000b5b7          	lui	a1,0x8000b
80001460:	71058593          	addi	a1,a1,1808 # 8000b710 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b711>
80001464:	80009537          	lui	a0,0x80009
80001468:	e5450513          	addi	a0,a0,-428 # 80008e54 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008e55>
8000146c:	47c050ef          	jal	ra,800068e8 <__strcpy_chk>
    build_shellcode(shellcode_nonop);
80001470:	80009537          	lui	a0,0x80009
80001474:	f8850513          	addi	a0,a0,-120 # 80008f88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f89>
80001478:	ca9ff0ef          	jal	ra,80001120 <build_shellcode>
    switch (attack.location) {
8000147c:	800097b7          	lui	a5,0x80009
80001480:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001484:	00c7a783          	lw	a5,12(a5)
80001488:	19200713          	li	a4,402
8000148c:	26e78663          	beq	a5,a4,800016f8 <perform_attack+0x344>
80001490:	04f76a63          	bltu	a4,a5,800014e4 <perform_attack+0x130>
80001494:	19000713          	li	a4,400
80001498:	0ae78263          	beq	a5,a4,8000153c <perform_attack+0x188>
8000149c:	19100713          	li	a4,401
800014a0:	0ce79e63          	bne	a5,a4,8000157c <perform_attack+0x1c8>
            if (attack.code_ptr == STRUCT_FUNC_PTR_HEAP &&
800014a4:	800097b7          	lui	a5,0x80009
800014a8:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800014ac:	0087a783          	lw	a5,8(a5)
800014b0:	13800713          	li	a4,312
800014b4:	16e78863          	beq	a5,a4,80001624 <perform_attack+0x270>
            if (((unsigned long) heap_buffer1 < (unsigned long) heap_buffer2) &&
800014b8:	1924e463          	bltu	s1,s2,80001640 <perform_attack+0x28c>
                    fprintf(stderr,
800014bc:	80008537          	lui	a0,0x80008
800014c0:	d1c50513          	addi	a0,a0,-740 # 80007d1c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d1d>
800014c4:	1b4010ef          	jal	ra,80002678 <printk>
                exit(1);
800014c8:	00100513          	li	a0,1
800014cc:	7e9040ef          	jal	ra,800064b4 <exit>
        printk("Unable to allocate heap memory.");
800014d0:	80008537          	lui	a0,0x80008
800014d4:	cfc50513          	addi	a0,a0,-772 # 80007cfc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007cfd>
800014d8:	1a0010ef          	jal	ra,80002678 <printk>
        exit(1);
800014dc:	00100513          	li	a0,1
800014e0:	7d5040ef          	jal	ra,800064b4 <exit>
    switch (attack.location) {
800014e4:	19300713          	li	a4,403
800014e8:	08e79a63          	bne	a5,a4,8000157c <perform_attack+0x1c8>
            if (attack.code_ptr == STRUCT_FUNC_PTR_DATA) {
800014ec:	800097b7          	lui	a5,0x80009
800014f0:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800014f4:	0087a783          	lw	a5,8(a5)
800014f8:	13900713          	li	a4,313
800014fc:	1ae78663          	beq	a5,a4,800016a8 <perform_attack+0x2f4>
            if ((attack.code_ptr == FUNC_PTR_DATA ||
80001500:	13100713          	li	a4,305
80001504:	1ae78a63          	beq	a5,a4,800016b8 <perform_attack+0x304>
80001508:	13b00713          	li	a4,315
8000150c:	1ae78663          	beq	a5,a4,800016b8 <perform_attack+0x304>
                buffer = data_buffer1;
80001510:	8000b7b7          	lui	a5,0x8000b
80001514:	73078793          	addi	a5,a5,1840 # 8000b730 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b731>
80001518:	96f42c23          	sw	a5,-1672(s0)
            if (attack.inject_param == DATA_ONLY) {
8000151c:	800097b7          	lui	a5,0x80009
80001520:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001524:	0047a703          	lw	a4,4(a5)
80001528:	0cb00793          	li	a5,203
8000152c:	1af70663          	beq	a4,a5,800016d8 <perform_attack+0x324>
            heap_jmp_buffer = heap_buffer1;
80001530:	92942423          	sw	s1,-1752(s0)
            heap_func_ptr   = (void *) heap_buffer1;
80001534:	92942a23          	sw	s1,-1740(s0)
80001538:	0440006f          	j	8000157c <perform_attack+0x1c8>
            if (attack.code_ptr == STRUCT_FUNC_PTR_STACK &&
8000153c:	800097b7          	lui	a5,0x80009
80001540:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001544:	0087a783          	lw	a5,8(a5)
80001548:	13700713          	li	a4,311
8000154c:	08e78663          	beq	a5,a4,800015d8 <perform_attack+0x224>
            } else if (attack.code_ptr == FUNC_PTR_STACK_PARAM &&
80001550:	12e00713          	li	a4,302
80001554:	0ae78063          	beq	a5,a4,800015f4 <perform_attack+0x240>
                buffer = stack_buffer;
80001558:	a8040793          	addi	a5,s0,-1408
8000155c:	96f42c23          	sw	a5,-1672(s0)
            if (attack.inject_param == DATA_ONLY) {
80001560:	800097b7          	lui	a5,0x80009
80001564:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001568:	0047a703          	lw	a4,4(a5)
8000156c:	0cb00793          	li	a5,203
80001570:	0af70063          	beq	a4,a5,80001610 <perform_attack+0x25c>
            heap_jmp_buffer = (void *) heap_buffer1;
80001574:	92942423          	sw	s1,-1752(s0)
            heap_func_ptr   = (void *) heap_buffer1;
80001578:	92942a23          	sw	s1,-1740(s0)
    if (heap_func_ptr)
8000157c:	93442703          	lw	a4,-1740(s0)
80001580:	00070863          	beqz	a4,80001590 <perform_attack+0x1dc>
        *heap_func_ptr = dummy_function;
80001584:	800017b7          	lui	a5,0x80001
80001588:	af878793          	addi	a5,a5,-1288 # 80000af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000af9>
8000158c:	00f72023          	sw	a5,0(a4)
    switch (attack.technique) {
80001590:	800097b7          	lui	a5,0x80009
80001594:	f747a783          	lw	a5,-140(a5) # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001598:	06400713          	li	a4,100
8000159c:	1ee78863          	beq	a5,a4,8000178c <perform_attack+0x3d8>
800015a0:	06500713          	li	a4,101
800015a4:	36e78463          	beq	a5,a4,8000190c <perform_attack+0x558>
    switch (attack.code_ptr) {
800015a8:	800097b7          	lui	a5,0x80009
800015ac:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800015b0:	0087a783          	lw	a5,8(a5)
800015b4:	ece78793          	addi	a5,a5,-306
800015b8:	00400713          	li	a4,4
800015bc:	44f76a63          	bltu	a4,a5,80001a10 <perform_attack+0x65c>
800015c0:	00279793          	slli	a5,a5,0x2
800015c4:	80008737          	lui	a4,0x80008
800015c8:	ed070713          	addi	a4,a4,-304 # 80007ed0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007ed1>
800015cc:	00e787b3          	add	a5,a5,a4
800015d0:	0007a783          	lw	a5,0(a5)
800015d4:	00078067          	jr	a5
              attack.technique == DIRECT)
800015d8:	80009737          	lui	a4,0x80009
800015dc:	f7472683          	lw	a3,-140(a4) # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
            if (attack.code_ptr == STRUCT_FUNC_PTR_STACK &&
800015e0:	06400713          	li	a4,100
800015e4:	f6e696e3          	bne	a3,a4,80001550 <perform_attack+0x19c>
                buffer = stack_struct.buffer;
800015e8:	97c40793          	addi	a5,s0,-1668
800015ec:	96f42c23          	sw	a5,-1672(s0)
800015f0:	f71ff06f          	j	80001560 <perform_attack+0x1ac>
              attack.technique == DIRECT)
800015f4:	800097b7          	lui	a5,0x80009
800015f8:	f747a703          	lw	a4,-140(a5) # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
            } else if (attack.code_ptr == FUNC_PTR_STACK_PARAM &&
800015fc:	06400793          	li	a5,100
80001600:	f4f71ce3          	bne	a4,a5,80001558 <perform_attack+0x1a4>
                set_low_buf(&buffer);
80001604:	97840513          	addi	a0,s0,-1672
80001608:	8c5ff0ef          	jal	ra,80000ecc <set_low_buf>
8000160c:	f55ff06f          	j	80001560 <perform_attack+0x1ac>
                stack_mem_ptr = &stack_flag;
80001610:	ea040793          	addi	a5,s0,-352
80001614:	eaf42423          	sw	a5,-344(s0)
            heap_jmp_buffer = (void *) heap_buffer1;
80001618:	92942423          	sw	s1,-1752(s0)
            heap_func_ptr   = (void *) heap_buffer1;
8000161c:	92942a23          	sw	s1,-1740(s0)
80001620:	f5dff06f          	j	8000157c <perform_attack+0x1c8>
              attack.technique == DIRECT)
80001624:	80009737          	lui	a4,0x80009
80001628:	f7472683          	lw	a3,-140(a4) # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
            if (attack.code_ptr == STRUCT_FUNC_PTR_HEAP &&
8000162c:	06400713          	li	a4,100
80001630:	e8e694e3          	bne	a3,a4,800014b8 <perform_attack+0x104>
                buffer = heap_struct->buffer;
80001634:	92c42783          	lw	a5,-1748(s0)
80001638:	96f42c23          	sw	a5,-1672(s0)
                break;
8000163c:	f41ff06f          	j	8000157c <perform_attack+0x1c8>
            if (((unsigned long) heap_buffer1 < (unsigned long) heap_buffer2) &&
80001640:	e7497ee3          	bgeu	s2,s4,800014bc <perform_attack+0x108>
                buffer = heap_buffer1;
80001644:	96942c23          	sw	s1,-1672(s0)
                heap_mem_ptr_aux = (long *) heap_buffer2;
80001648:	93242023          	sw	s2,-1760(s0)
                heap_mem_ptr     = (long *) heap_buffer3;
8000164c:	91442e23          	sw	s4,-1764(s0)
				if (attack.code_ptr == VAR_LEAK) {
80001650:	13d00713          	li	a4,317
80001654:	02e78e63          	beq	a5,a4,80001690 <perform_attack+0x2dc>
80001658:	00000913          	li	s2,0
                heap_func_ptr = malloc(sizeof(void *));
8000165c:	00400513          	li	a0,4
80001660:	695040ef          	jal	ra,800064f4 <malloc>
80001664:	92a42a23          	sw	a0,-1740(s0)
                heap_jmp_buffer = (int *) malloc(sizeof(jmp_buf));
80001668:	13000513          	li	a0,304
8000166c:	689040ef          	jal	ra,800064f4 <malloc>
            if (attack.inject_param == DATA_ONLY) {
80001670:	80009737          	lui	a4,0x80009
80001674:	f7470713          	addi	a4,a4,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001678:	00472683          	lw	a3,4(a4)
8000167c:	0cb00713          	li	a4,203
80001680:	0ee68e63          	beq	a3,a4,8000177c <perform_attack+0x3c8>
                heap_jmp_buffer = (int *) malloc(sizeof(jmp_buf));
80001684:	92a42423          	sw	a0,-1752(s0)
            if (attack.inject_param == DATA_ONLY) {
80001688:	93242823          	sw	s2,-1744(s0)
8000168c:	ef1ff06f          	j	8000157c <perform_attack+0x1c8>
					strcpy(heap_secret, data_secret);
80001690:	10400613          	li	a2,260
80001694:	8000b5b7          	lui	a1,0x8000b
80001698:	71058593          	addi	a1,a1,1808 # 8000b710 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b711>
8000169c:	00090513          	mv	a0,s2
800016a0:	248050ef          	jal	ra,800068e8 <__strcpy_chk>
800016a4:	fb9ff06f          	j	8000165c <perform_attack+0x2a8>
                buffer = data_struct.buffer;
800016a8:	8000c7b7          	lui	a5,0x8000c
800016ac:	83078793          	addi	a5,a5,-2000 # 8000b830 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b831>
800016b0:	96f42c23          	sw	a5,-1672(s0)
                break;
800016b4:	ec9ff06f          	j	8000157c <perform_attack+0x1c8>
              attack.technique == DIRECT)
800016b8:	800097b7          	lui	a5,0x80009
800016bc:	f747a703          	lw	a4,-140(a5) # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
              attack.code_ptr == VAR_BOF) &&
800016c0:	06400793          	li	a5,100
800016c4:	e4f716e3          	bne	a4,a5,80001510 <perform_attack+0x15c>
                buffer = data_buffer2;
800016c8:	8000c7b7          	lui	a5,0x8000c
800016cc:	a7878793          	addi	a5,a5,-1416 # 8000ba78 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ba79>
800016d0:	96f42c23          	sw	a5,-1672(s0)
800016d4:	e49ff06f          	j	8000151c <perform_attack+0x168>
                data_flag     = 0;
800016d8:	8000c7b7          	lui	a5,0x8000c
800016dc:	a607aa23          	sw	zero,-1420(a5) # 8000ba74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ba75>
                *data_mem_ptr = &data_flag;
800016e0:	a7478793          	addi	a5,a5,-1420
800016e4:	8000b737          	lui	a4,0x8000b
800016e8:	50f72823          	sw	a5,1296(a4) # 8000b510 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b511>
            heap_jmp_buffer = heap_buffer1;
800016ec:	92942423          	sw	s1,-1752(s0)
            heap_func_ptr   = (void *) heap_buffer1;
800016f0:	92942a23          	sw	s1,-1740(s0)
800016f4:	e89ff06f          	j	8000157c <perform_attack+0x1c8>
            if (attack.code_ptr == STRUCT_FUNC_PTR_BSS) {
800016f8:	800097b7          	lui	a5,0x80009
800016fc:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001700:	0087a703          	lw	a4,8(a5)
80001704:	13a00793          	li	a5,314
80001708:	04f70663          	beq	a4,a5,80001754 <perform_attack+0x3a0>
            buffer = bss_buffer;
8000170c:	800097b7          	lui	a5,0x80009
80001710:	e7478793          	addi	a5,a5,-396 # 80008e74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008e75>
80001714:	96f42c23          	sw	a5,-1672(s0)
            bss_flag = 0;
80001718:	800097b7          	lui	a5,0x80009
8000171c:	ac07aa23          	sw	zero,-1324(a5) # 80008ad4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ad5>
            bss_mem_ptr_aux = &dummy_function;
80001720:	800017b7          	lui	a5,0x80001
80001724:	af878793          	addi	a5,a5,-1288 # 80000af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000af9>
80001728:	80009737          	lui	a4,0x80009
8000172c:	acf72823          	sw	a5,-1328(a4) # 80008ad0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ad1>
            bss_mem_ptr     = &dummy_function;
80001730:	80009737          	lui	a4,0x80009
80001734:	acf72623          	sw	a5,-1332(a4) # 80008acc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008acd>
            if (attack.inject_param == DATA_ONLY) {
80001738:	800097b7          	lui	a5,0x80009
8000173c:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001740:	0047a703          	lw	a4,4(a5)
80001744:	0cb00793          	li	a5,203
80001748:	00f70e63          	beq	a4,a5,80001764 <perform_attack+0x3b0>
            heap_func_ptr = (void *) heap_buffer1;
8000174c:	92942a23          	sw	s1,-1740(s0)
80001750:	e2dff06f          	j	8000157c <perform_attack+0x1c8>
                buffer = bss_struct.buffer;
80001754:	800097b7          	lui	a5,0x80009
80001758:	d5078793          	addi	a5,a5,-688 # 80008d50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008d51>
8000175c:	96f42c23          	sw	a5,-1672(s0)
                break;
80001760:	e1dff06f          	j	8000157c <perform_attack+0x1c8>
                bss_mem_ptr = &bss_flag;
80001764:	80009737          	lui	a4,0x80009
80001768:	800097b7          	lui	a5,0x80009
8000176c:	ad478793          	addi	a5,a5,-1324 # 80008ad4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ad5>
80001770:	acf72623          	sw	a5,-1332(a4) # 80008acc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008acd>
            heap_func_ptr = (void *) heap_buffer1;
80001774:	92942a23          	sw	s1,-1740(s0)
80001778:	e05ff06f          	j	8000157c <perform_attack+0x1c8>
                heap_jmp_buffer = (int *) malloc(sizeof(jmp_buf));
8000177c:	92a42423          	sw	a0,-1752(s0)
80001780:	93242823          	sw	s2,-1744(s0)
                heap_mem_ptr = heap_flag;
80001784:	91342e23          	sw	s3,-1764(s0)
80001788:	df5ff06f          	j	8000157c <perform_attack+0x1c8>
            switch (attack.code_ptr) {
8000178c:	800097b7          	lui	a5,0x80009
80001790:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001794:	0087a783          	lw	a5,8(a5)
80001798:	ed478793          	addi	a5,a5,-300
8000179c:	01100713          	li	a4,17
800017a0:	e0f764e3          	bltu	a4,a5,800015a8 <perform_attack+0x1f4>
800017a4:	00279793          	slli	a5,a5,0x2
800017a8:	80008737          	lui	a4,0x80008
800017ac:	ee470713          	addi	a4,a4,-284 # 80007ee4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007ee5>
800017b0:	00e787b3          	add	a5,a5,a4
800017b4:	0007a783          	lw	a5,0(a5)
800017b8:	00078067          	jr	a5
                    target_addr = RET_ADDR_PTR;
800017bc:	ffc40793          	addi	a5,s0,-4
800017c0:	92f42823          	sw	a5,-1744(s0)
                    break;
800017c4:	de5ff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = &stack_func_ptr_param;
800017c8:	93c40793          	addi	a5,s0,-1732
800017cc:	92f42823          	sw	a5,-1744(s0)
                    break;
800017d0:	dd9ff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = heap_func_ptr;
800017d4:	93442783          	lw	a5,-1740(s0)
800017d8:	92f42823          	sw	a5,-1744(s0)
                    break;
800017dc:	dcdff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = &bss_func_ptr;
800017e0:	800097b7          	lui	a5,0x80009
800017e4:	ac878793          	addi	a5,a5,-1336 # 80008ac8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ac9>
800017e8:	92f42823          	sw	a5,-1744(s0)
                    break;
800017ec:	dbdff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = &data_func_ptr;
800017f0:	8000c7b7          	lui	a5,0x8000c
800017f4:	a7078793          	addi	a5,a5,-1424 # 8000ba70 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ba71>
800017f8:	92f42823          	sw	a5,-1744(s0)
                    break;
800017fc:	dadff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = stack_jmp_buffer;
80001800:	eb040793          	addi	a5,s0,-336
80001804:	92f42823          	sw	a5,-1744(s0)
                    break;
80001808:	da1ff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = stack_jmp_buffer_param;
8000180c:	93842783          	lw	a5,-1736(s0)
80001810:	92f42823          	sw	a5,-1744(s0)
                    break;
80001814:	d95ff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = (void *) heap_jmp_buffer;
80001818:	92842783          	lw	a5,-1752(s0)
8000181c:	92f42823          	sw	a5,-1744(s0)
                    break;
80001820:	d89ff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = data_jmp_buffer;
80001824:	8000b7b7          	lui	a5,0x8000b
80001828:	3e078793          	addi	a5,a5,992 # 8000b3e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b3e1>
8000182c:	92f42823          	sw	a5,-1744(s0)
                    break;
80001830:	d79ff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = bss_jmp_buffer;
80001834:	800097b7          	lui	a5,0x80009
80001838:	b1078793          	addi	a5,a5,-1264 # 80008b10 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008b11>
8000183c:	92f42823          	sw	a5,-1744(s0)
                    break;
80001840:	d69ff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = &stack_struct.func_ptr;
80001844:	a7c40793          	addi	a5,s0,-1412
80001848:	92f42823          	sw	a5,-1744(s0)
                    break;
8000184c:	d5dff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = (void *) heap_struct + 256;
80001850:	92c42783          	lw	a5,-1748(s0)
80001854:	10078793          	addi	a5,a5,256
80001858:	92f42823          	sw	a5,-1744(s0)
                    break;
8000185c:	d4dff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = &data_struct.func_ptr;
80001860:	8000c7b7          	lui	a5,0x8000c
80001864:	93078793          	addi	a5,a5,-1744 # 8000b930 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b931>
80001868:	92f42823          	sw	a5,-1744(s0)
                    break;
8000186c:	d3dff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = &bss_struct.func_ptr;
80001870:	800097b7          	lui	a5,0x80009
80001874:	e5078793          	addi	a5,a5,-432 # 80008e50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008e51>
80001878:	92f42823          	sw	a5,-1744(s0)
                    break;
8000187c:	d2dff06f          	j	800015a8 <perform_attack+0x1f4>
                    switch (attack.location) {
80001880:	800097b7          	lui	a5,0x80009
80001884:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001888:	00c7a783          	lw	a5,12(a5)
8000188c:	19200713          	li	a4,402
80001890:	0ee78463          	beq	a5,a4,80001978 <perform_attack+0x5c4>
80001894:	00f76e63          	bltu	a4,a5,800018b0 <perform_attack+0x4fc>
80001898:	19000713          	li	a4,400
8000189c:	0ee78663          	beq	a5,a4,80001988 <perform_attack+0x5d4>
800018a0:	19100713          	li	a4,401
800018a4:	d0e792e3          	bne	a5,a4,800015a8 <perform_attack+0x1f4>
                            target_addr = heap_flag;
800018a8:	93342823          	sw	s3,-1744(s0)
800018ac:	cfdff06f          	j	800015a8 <perform_attack+0x1f4>
800018b0:	19300713          	li	a4,403
800018b4:	cee79ae3          	bne	a5,a4,800015a8 <perform_attack+0x1f4>
                            target_addr = &data_flag;
800018b8:	8000c7b7          	lui	a5,0x8000c
800018bc:	a7478793          	addi	a5,a5,-1420 # 8000ba74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ba75>
800018c0:	92f42823          	sw	a5,-1744(s0)
800018c4:	ce5ff06f          	j	800015a8 <perform_attack+0x1f4>
                    switch (attack.location) {
800018c8:	800097b7          	lui	a5,0x80009
800018cc:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800018d0:	00c7a783          	lw	a5,12(a5)
800018d4:	19200713          	li	a4,402
800018d8:	0ae78e63          	beq	a5,a4,80001994 <perform_attack+0x5e0>
800018dc:	00f76c63          	bltu	a4,a5,800018f4 <perform_attack+0x540>
800018e0:	19000713          	li	a4,400
800018e4:	cce792e3          	bne	a5,a4,800015a8 <perform_attack+0x1f4>
                            target_addr = &stack_secret;
800018e8:	e8040793          	addi	a5,s0,-384
800018ec:	92f42823          	sw	a5,-1744(s0)
800018f0:	cb9ff06f          	j	800015a8 <perform_attack+0x1f4>
800018f4:	19300713          	li	a4,403
800018f8:	cae798e3          	bne	a5,a4,800015a8 <perform_attack+0x1f4>
                            target_addr = &data_secret;
800018fc:	8000b7b7          	lui	a5,0x8000b
80001900:	71078793          	addi	a5,a5,1808 # 8000b710 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b711>
80001904:	92f42823          	sw	a5,-1744(s0)
80001908:	ca1ff06f          	j	800015a8 <perform_attack+0x1f4>
            switch (attack.location) {
8000190c:	800097b7          	lui	a5,0x80009
80001910:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001914:	00c7a783          	lw	a5,12(a5)
80001918:	19200713          	li	a4,402
8000191c:	08e78463          	beq	a5,a4,800019a4 <perform_attack+0x5f0>
80001920:	02f76463          	bltu	a4,a5,80001948 <perform_attack+0x594>
80001924:	19000713          	li	a4,400
80001928:	08e78c63          	beq	a5,a4,800019c0 <perform_attack+0x60c>
8000192c:	19100713          	li	a4,401
80001930:	c6e79ce3          	bne	a5,a4,800015a8 <perform_attack+0x1f4>
                    target_addr_aux = heap_mem_ptr_aux;
80001934:	92042783          	lw	a5,-1760(s0)
80001938:	92f42223          	sw	a5,-1756(s0)
                    target_addr     = heap_mem_ptr;
8000193c:	91c42783          	lw	a5,-1764(s0)
80001940:	92f42823          	sw	a5,-1744(s0)
                    break;
80001944:	c65ff06f          	j	800015a8 <perform_attack+0x1f4>
80001948:	19300713          	li	a4,403
8000194c:	c4e79ee3          	bne	a5,a4,800015a8 <perform_attack+0x1f4>
                    target_addr_aux = &data_mem_ptr_aux;
80001950:	8000b7b7          	lui	a5,0x8000b
80001954:	61078793          	addi	a5,a5,1552 # 8000b610 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b611>
80001958:	92f42223          	sw	a5,-1756(s0)
                    target_addr     = &data_mem_ptr;
8000195c:	8000b7b7          	lui	a5,0x8000b
80001960:	51078793          	addi	a5,a5,1296 # 8000b510 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b511>
80001964:	92f42823          	sw	a5,-1744(s0)
80001968:	c41ff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr = &stack_func_ptr;
8000196c:	eac40793          	addi	a5,s0,-340
80001970:	92f42823          	sw	a5,-1744(s0)
80001974:	c35ff06f          	j	800015a8 <perform_attack+0x1f4>
                            target_addr = &bss_flag;
80001978:	800097b7          	lui	a5,0x80009
8000197c:	ad478793          	addi	a5,a5,-1324 # 80008ad4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ad5>
80001980:	92f42823          	sw	a5,-1744(s0)
80001984:	c25ff06f          	j	800015a8 <perform_attack+0x1f4>
                            target_addr = &stack_flag;
80001988:	ea040793          	addi	a5,s0,-352
8000198c:	92f42823          	sw	a5,-1744(s0)
80001990:	c19ff06f          	j	800015a8 <perform_attack+0x1f4>
                            target_addr = &bss_secret;
80001994:	800097b7          	lui	a5,0x80009
80001998:	e5478793          	addi	a5,a5,-428 # 80008e54 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008e55>
8000199c:	92f42823          	sw	a5,-1744(s0)
800019a0:	c09ff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr_aux = &bss_mem_ptr_aux;
800019a4:	800097b7          	lui	a5,0x80009
800019a8:	ad078793          	addi	a5,a5,-1328 # 80008ad0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ad1>
800019ac:	92f42223          	sw	a5,-1756(s0)
                    target_addr     = &bss_mem_ptr;
800019b0:	800097b7          	lui	a5,0x80009
800019b4:	acc78793          	addi	a5,a5,-1332 # 80008acc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008acd>
800019b8:	92f42823          	sw	a5,-1744(s0)
800019bc:	bedff06f          	j	800015a8 <perform_attack+0x1f4>
                    target_addr_aux = &stack_mem_ptr_aux;
800019c0:	ea440793          	addi	a5,s0,-348
800019c4:	92f42223          	sw	a5,-1756(s0)
                    target_addr     = &stack_mem_ptr;
800019c8:	ea840793          	addi	a5,s0,-344
800019cc:	92f42823          	sw	a5,-1744(s0)
800019d0:	bd9ff06f          	j	800015a8 <perform_attack+0x1f4>
            if (setjmp(stack_jmp_buffer) != 0) {
800019d4:	eb040513          	addi	a0,s0,-336
800019d8:	860ff0ef          	jal	ra,80000a38 <setjmp>
800019dc:	00051863          	bnez	a0,800019ec <perform_attack+0x638>
            payload.jmp_buffer = &stack_jmp_buffer;
800019e0:	eb040793          	addi	a5,s0,-336
800019e4:	94f42823          	sw	a5,-1712(s0)
            break;
800019e8:	0280006f          	j	80001a10 <perform_attack+0x65c>
                printf("Longjmp attack failed. Returning normally...\n");
800019ec:	80008537          	lui	a0,0x80008
800019f0:	d5050513          	addi	a0,a0,-688 # 80007d50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d51>
800019f4:	485000ef          	jal	ra,80002678 <printk>
800019f8:	5bc0006f          	j	80001fb4 <perform_attack+0xc00>
            if (setjmp(stack_jmp_buffer_param) != 0) {
800019fc:	93842503          	lw	a0,-1736(s0)
80001a00:	838ff0ef          	jal	ra,80000a38 <setjmp>
80001a04:	0c051063          	bnez	a0,80001ac4 <perform_attack+0x710>
            payload.jmp_buffer = &stack_jmp_buffer_param;
80001a08:	93840793          	addi	a5,s0,-1736
80001a0c:	94f42823          	sw	a5,-1712(s0)
    payload.ptr_to_correct_return_addr = RET_ADDR_PTR;
80001a10:	ffc40793          	addi	a5,s0,-4
80001a14:	96f42223          	sw	a5,-1692(s0)
    payload.inject_param = attack.inject_param;
80001a18:	800097b7          	lui	a5,0x80009
80001a1c:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001a20:	0047a703          	lw	a4,4(a5)
80001a24:	94e42023          	sw	a4,-1728(s0)
    switch (attack.technique) {
80001a28:	0007a783          	lw	a5,0(a5)
80001a2c:	06400693          	li	a3,100
80001a30:	12d78c63          	beq	a5,a3,80001b68 <perform_attack+0x7b4>
80001a34:	06500713          	li	a4,101
80001a38:	1ae78263          	beq	a5,a4,80001bdc <perform_attack+0x828>
        fprintf(stderr, "target_addr == %p\n", target_addr);
80001a3c:	93042483          	lw	s1,-1744(s0)
80001a40:	00048593          	mv	a1,s1
80001a44:	80008537          	lui	a0,0x80008
80001a48:	dc850513          	addi	a0,a0,-568 # 80007dc8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007dc9>
80001a4c:	42d000ef          	jal	ra,80002678 <printk>
        fprintf(stderr, "buffer == %p\n", buffer);
80001a50:	97842583          	lw	a1,-1672(s0)
80001a54:	80008537          	lui	a0,0x80008
80001a58:	ddc50513          	addi	a0,a0,-548 # 80007ddc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007ddd>
80001a5c:	41d000ef          	jal	ra,80002678 <printk>
    if ((unsigned long) target_addr > (unsigned long) buffer) {
80001a60:	97842583          	lw	a1,-1672(s0)
80001a64:	2895fc63          	bgeu	a1,s1,80001cfc <perform_attack+0x948>
          - (unsigned long) buffer
80001a68:	40b485b3          	sub	a1,s1,a1
          + 1); /* For null termination so that buffer can be     */
80001a6c:	00558593          	addi	a1,a1,5
        payload.size =
80001a70:	94b42223          	sw	a1,-1724(s0)
            fprintf(stderr, "payload size == %d\n", payload.size);
80001a74:	80008537          	lui	a0,0x80008
80001a78:	dec50513          	addi	a0,a0,-532 # 80007dec <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007ded>
80001a7c:	3fd000ef          	jal	ra,80002678 <printk>
    buffer[0] = '\0';
80001a80:	97842783          	lw	a5,-1672(s0)
80001a84:	00078023          	sb	zero,0(a5)
    if (!build_payload(&payload)) {
80001a88:	94040513          	addi	a0,s0,-1728
80001a8c:	a18ff0ef          	jal	ra,80000ca4 <build_payload>
80001a90:	28050063          	beqz	a0,80001d10 <perform_attack+0x95c>
    switch (attack.function) {
80001a94:	800097b7          	lui	a5,0x80009
80001a98:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001a9c:	0107a783          	lw	a5,16(a5)
80001aa0:	e0c78793          	addi	a5,a5,-500
80001aa4:	00800713          	li	a4,8
80001aa8:	3cf76463          	bltu	a4,a5,80001e70 <perform_attack+0xabc>
80001aac:	00279793          	slli	a5,a5,0x2
80001ab0:	80008737          	lui	a4,0x80008
80001ab4:	f2c70713          	addi	a4,a4,-212 # 80007f2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007f2d>
80001ab8:	00e787b3          	add	a5,a5,a4
80001abc:	0007a783          	lw	a5,0(a5)
80001ac0:	00078067          	jr	a5
                printf("Longjmp attack failed. Returning normally...\n");
80001ac4:	80008537          	lui	a0,0x80008
80001ac8:	d5050513          	addi	a0,a0,-688 # 80007d50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d51>
80001acc:	3ad000ef          	jal	ra,80002678 <printk>
80001ad0:	f39ff06f          	j	80001a08 <perform_attack+0x654>
            if (setjmp(*heap_jmp_buffer) != 0) {
80001ad4:	92842503          	lw	a0,-1752(s0)
80001ad8:	f61fe0ef          	jal	ra,80000a38 <setjmp>
80001adc:	00051a63          	bnez	a0,80001af0 <perform_attack+0x73c>
            payload.jmp_buffer = (void *) heap_jmp_buffer;
80001ae0:	92842783          	lw	a5,-1752(s0)
80001ae4:	94f42823          	sw	a5,-1712(s0)
            payload.stack_jmp_buffer_param = NULL;
80001ae8:	94042a23          	sw	zero,-1708(s0)
            break;
80001aec:	f25ff06f          	j	80001a10 <perform_attack+0x65c>
                printf("Longjmp attack failed. Returning normally...\n");
80001af0:	80008537          	lui	a0,0x80008
80001af4:	d5050513          	addi	a0,a0,-688 # 80007d50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d51>
80001af8:	381000ef          	jal	ra,80002678 <printk>
80001afc:	4b80006f          	j	80001fb4 <perform_attack+0xc00>
            if (setjmp(data_jmp_buffer) != 0) {
80001b00:	8000b537          	lui	a0,0x8000b
80001b04:	3e050513          	addi	a0,a0,992 # 8000b3e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b3e1>
80001b08:	f31fe0ef          	jal	ra,80000a38 <setjmp>
80001b0c:	00051c63          	bnez	a0,80001b24 <perform_attack+0x770>
            payload.jmp_buffer = (void *) data_jmp_buffer;
80001b10:	8000b7b7          	lui	a5,0x8000b
80001b14:	3e078793          	addi	a5,a5,992 # 8000b3e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b3e1>
80001b18:	94f42823          	sw	a5,-1712(s0)
            payload.stack_jmp_buffer_param = NULL;
80001b1c:	94042a23          	sw	zero,-1708(s0)
            break;
80001b20:	ef1ff06f          	j	80001a10 <perform_attack+0x65c>
                printf("Longjmp attack failed. Returning normally...\n");
80001b24:	80008537          	lui	a0,0x80008
80001b28:	d5050513          	addi	a0,a0,-688 # 80007d50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d51>
80001b2c:	34d000ef          	jal	ra,80002678 <printk>
80001b30:	4840006f          	j	80001fb4 <perform_attack+0xc00>
            if (setjmp(bss_jmp_buffer) != 0) {
80001b34:	80009537          	lui	a0,0x80009
80001b38:	b1050513          	addi	a0,a0,-1264 # 80008b10 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008b11>
80001b3c:	efdfe0ef          	jal	ra,80000a38 <setjmp>
80001b40:	00051c63          	bnez	a0,80001b58 <perform_attack+0x7a4>
            payload.jmp_buffer = (void *) bss_jmp_buffer;
80001b44:	800097b7          	lui	a5,0x80009
80001b48:	b1078793          	addi	a5,a5,-1264 # 80008b10 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008b11>
80001b4c:	94f42823          	sw	a5,-1712(s0)
            payload.stack_jmp_buffer_param = NULL;
80001b50:	94042a23          	sw	zero,-1708(s0)
            break;
80001b54:	ebdff06f          	j	80001a10 <perform_attack+0x65c>
                printf("Longjmp attack failed. Returning normally...\n");
80001b58:	80008537          	lui	a0,0x80008
80001b5c:	d5050513          	addi	a0,a0,-688 # 80007d50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d51>
80001b60:	319000ef          	jal	ra,80002678 <printk>
80001b64:	4500006f          	j	80001fb4 <perform_attack+0xc00>
            switch (attack.inject_param) {
80001b68:	0ca00793          	li	a5,202
80001b6c:	04f70063          	beq	a4,a5,80001bac <perform_attack+0x7f8>
80001b70:	02e7e263          	bltu	a5,a4,80001b94 <perform_attack+0x7e0>
80001b74:	0c800793          	li	a5,200
80001b78:	04f70263          	beq	a4,a5,80001bbc <perform_attack+0x808>
80001b7c:	0c900793          	li	a5,201
80001b80:	04f71463          	bne	a4,a5,80001bc8 <perform_attack+0x814>
                    payload.overflow_ptr = &ret2libc_target;
80001b84:	800017b7          	lui	a5,0x80001
80001b88:	b4078793          	addi	a5,a5,-1216 # 80000b40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b41>
80001b8c:	94f42423          	sw	a5,-1720(s0)
                    break;
80001b90:	eadff06f          	j	80001a3c <perform_attack+0x688>
80001b94:	0cb00793          	li	a5,203
80001b98:	02f71863          	bne	a4,a5,80001bc8 <perform_attack+0x814>
                    payload.overflow_ptr = 0xdeadbeef;
80001b9c:	deadc7b7          	lui	a5,0xdeadc
80001ba0:	eef78793          	addi	a5,a5,-273 # deadbeef <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xdeadbef0>
80001ba4:	94f42423          	sw	a5,-1720(s0)
                    break;
80001ba8:	e95ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = (uintptr_t) &rop_target;
80001bac:	800017b7          	lui	a5,0x80001
80001bb0:	b6078793          	addi	a5,a5,-1184 # 80000b60 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b61>
80001bb4:	94f42423          	sw	a5,-1720(s0)
                    break;
80001bb8:	e85ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = buffer;
80001bbc:	97842783          	lw	a5,-1672(s0)
80001bc0:	94f42423          	sw	a5,-1720(s0)
                    break;
80001bc4:	e79ff06f          	j	80001a3c <perform_attack+0x688>
                        fprintf(stderr, "Unknown choice of attack code");
80001bc8:	80008537          	lui	a0,0x80008
80001bcc:	d8050513          	addi	a0,a0,-640 # 80007d80 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d81>
80001bd0:	2a9000ef          	jal	ra,80002678 <printk>
                        exit(1);
80001bd4:	00100513          	li	a0,1
80001bd8:	0dd040ef          	jal	ra,800064b4 <exit>
            switch (attack.code_ptr) {
80001bdc:	800097b7          	lui	a5,0x80009
80001be0:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001be4:	0087a783          	lw	a5,8(a5)
80001be8:	ed478793          	addi	a5,a5,-300
80001bec:	01100713          	li	a4,17
80001bf0:	0ef76c63          	bltu	a4,a5,80001ce8 <perform_attack+0x934>
80001bf4:	00279793          	slli	a5,a5,0x2
80001bf8:	80008737          	lui	a4,0x80008
80001bfc:	f5070713          	addi	a4,a4,-176 # 80007f50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007f51>
80001c00:	00e787b3          	add	a5,a5,a4
80001c04:	0007a783          	lw	a5,0(a5)
80001c08:	00078067          	jr	a5
                    payload.overflow_ptr = RET_ADDR_PTR;
80001c0c:	ffc40793          	addi	a5,s0,-4
80001c10:	94f42423          	sw	a5,-1720(s0)
                    break;
80001c14:	e29ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = &stack_func_ptr;
80001c18:	eac40793          	addi	a5,s0,-340
80001c1c:	94f42423          	sw	a5,-1720(s0)
                    break;
80001c20:	e1dff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = &stack_func_ptr_param;
80001c24:	93c40793          	addi	a5,s0,-1732
80001c28:	94f42423          	sw	a5,-1720(s0)
                    break;
80001c2c:	e11ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = heap_func_ptr;
80001c30:	93442783          	lw	a5,-1740(s0)
80001c34:	94f42423          	sw	a5,-1720(s0)
                    break;
80001c38:	e05ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = &bss_func_ptr;
80001c3c:	800097b7          	lui	a5,0x80009
80001c40:	ac878793          	addi	a5,a5,-1336 # 80008ac8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ac9>
80001c44:	94f42423          	sw	a5,-1720(s0)
                    break;
80001c48:	df5ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = &data_func_ptr;
80001c4c:	8000c7b7          	lui	a5,0x8000c
80001c50:	a7078793          	addi	a5,a5,-1424 # 8000ba70 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ba71>
80001c54:	94f42423          	sw	a5,-1720(s0)
                    break;
80001c58:	de5ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = &stack_struct.func_ptr;
80001c5c:	a7c40793          	addi	a5,s0,-1412
80001c60:	94f42423          	sw	a5,-1720(s0)
                    break;
80001c64:	dd9ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = (void *) heap_struct + 256;
80001c68:	92c42783          	lw	a5,-1748(s0)
80001c6c:	10078793          	addi	a5,a5,256
80001c70:	94f42423          	sw	a5,-1720(s0)
                    break;
80001c74:	dc9ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = &data_struct.func_ptr;
80001c78:	8000c7b7          	lui	a5,0x8000c
80001c7c:	93078793          	addi	a5,a5,-1744 # 8000b930 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b931>
80001c80:	94f42423          	sw	a5,-1720(s0)
                    break;
80001c84:	db9ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = &bss_struct.func_ptr;
80001c88:	800097b7          	lui	a5,0x80009
80001c8c:	e5078793          	addi	a5,a5,-432 # 80008e50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008e51>
80001c90:	94f42423          	sw	a5,-1720(s0)
                    break;
80001c94:	da9ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = stack_jmp_buffer;
80001c98:	eb040793          	addi	a5,s0,-336
80001c9c:	94f42423          	sw	a5,-1720(s0)
                    break;
80001ca0:	d9dff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = stack_jmp_buffer_param;
80001ca4:	93842783          	lw	a5,-1736(s0)
80001ca8:	94f42423          	sw	a5,-1720(s0)
                    break;
80001cac:	d91ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = *heap_jmp_buffer;
80001cb0:	92842783          	lw	a5,-1752(s0)
80001cb4:	94f42423          	sw	a5,-1720(s0)
                    break;
80001cb8:	d85ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = data_jmp_buffer;
80001cbc:	8000b7b7          	lui	a5,0x8000b
80001cc0:	3e078793          	addi	a5,a5,992 # 8000b3e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b3e1>
80001cc4:	94f42423          	sw	a5,-1720(s0)
                    break;
80001cc8:	d75ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = bss_jmp_buffer;
80001ccc:	800097b7          	lui	a5,0x80009
80001cd0:	b1078793          	addi	a5,a5,-1264 # 80008b10 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008b11>
80001cd4:	94f42423          	sw	a5,-1720(s0)
                    break;
80001cd8:	d65ff06f          	j	80001a3c <perform_attack+0x688>
                    payload.overflow_ptr = &dop_dest;
80001cdc:	81018793          	addi	a5,gp,-2032 # 8000ba80 <dop_dest>
80001ce0:	94f42423          	sw	a5,-1720(s0)
                    break;
80001ce4:	d59ff06f          	j	80001a3c <perform_attack+0x688>
                        fprintf(stderr,
80001ce8:	80008537          	lui	a0,0x80008
80001cec:	da050513          	addi	a0,a0,-608 # 80007da0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007da1>
80001cf0:	189000ef          	jal	ra,80002678 <printk>
                    exit(1);
80001cf4:	00100513          	li	a0,1
80001cf8:	7bc040ef          	jal	ra,800064b4 <exit>
            fprintf(stderr, "Error calculating size of payload\n");
80001cfc:	80008537          	lui	a0,0x80008
80001d00:	e0050513          	addi	a0,a0,-512 # 80007e00 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007e01>
80001d04:	175000ef          	jal	ra,80002678 <printk>
        exit(1);
80001d08:	00100513          	li	a0,1
80001d0c:	7a8040ef          	jal	ra,800064b4 <exit>
            fprintf(stderr, "Error: Could not build payload\n");
80001d10:	80008537          	lui	a0,0x80008
80001d14:	e2450513          	addi	a0,a0,-476 # 80007e24 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007e25>
80001d18:	161000ef          	jal	ra,80002678 <printk>
        exit(1);
80001d1c:	00100513          	li	a0,1
80001d20:	794040ef          	jal	ra,800064b4 <exit>
80001d24:	94442603          	lw	a2,-1724(s0)
80001d28:	fff60613          	addi	a2,a2,-1
80001d2c:	94c42583          	lw	a1,-1716(s0)
80001d30:	97842503          	lw	a0,-1672(s0)
80001d34:	cc5fe0ef          	jal	ra,800009f8 <memcpy>
    switch (attack.technique) {
80001d38:	800097b7          	lui	a5,0x80009
80001d3c:	f747a783          	lw	a5,-140(a5) # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001d40:	06400713          	li	a4,100
80001d44:	02e78e63          	beq	a5,a4,80001d80 <perform_attack+0x9cc>
80001d48:	06500713          	li	a4,101
80001d4c:	24e79463          	bne	a5,a4,80001f94 <perform_attack+0xbe0>
            if (attack.function == SSCANF) {
80001d50:	800097b7          	lui	a5,0x80009
80001d54:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001d58:	0107a703          	lw	a4,16(a5)
80001d5c:	1fb00793          	li	a5,507
80001d60:	12f70263          	beq	a4,a5,80001e84 <perform_attack+0xad0>
            if (attack.inject_param == RETURN_INTO_LIBC) {
80001d64:	800097b7          	lui	a5,0x80009
80001d68:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001d6c:	0047a783          	lw	a5,4(a5)
80001d70:	0c900713          	li	a4,201
80001d74:	12e78a63          	beq	a5,a4,80001ea8 <perform_attack+0xaf4>
            } else if (attack.inject_param == INJECTED_CODE_NO_NOP) {
80001d78:	0c800713          	li	a4,200
80001d7c:	20e78263          	beq	a5,a4,80001f80 <perform_attack+0xbcc>
    printf("");
80001d80:	80008537          	lui	a0,0x80008
80001d84:	cf850513          	addi	a0,a0,-776 # 80007cf8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007cf9>
80001d88:	0f1000ef          	jal	ra,80002678 <printk>
    printf("\nExecuting attack... ");
80001d8c:	80008537          	lui	a0,0x80008
80001d90:	eb850513          	addi	a0,a0,-328 # 80007eb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007eb9>
80001d94:	0e5000ef          	jal	ra,80002678 <printk>
    switch (attack.code_ptr) {
80001d98:	800097b7          	lui	a5,0x80009
80001d9c:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001da0:	0087a783          	lw	a5,8(a5)
80001da4:	ed378793          	addi	a5,a5,-301
80001da8:	01000713          	li	a4,16
80001dac:	20f76463          	bltu	a4,a5,80001fb4 <perform_attack+0xc00>
80001db0:	00279793          	slli	a5,a5,0x2
80001db4:	80008737          	lui	a4,0x80008
80001db8:	f9870713          	addi	a4,a4,-104 # 80007f98 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007f99>
80001dbc:	00e787b3          	add	a5,a5,a4
80001dc0:	0007a783          	lw	a5,0(a5)
80001dc4:	00078067          	jr	a5
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
80001dc8:	94c42583          	lw	a1,-1716(s0)
80001dcc:	97842503          	lw	a0,-1672(s0)
80001dd0:	2fd040ef          	jal	ra,800068cc <strcpy>
80001dd4:	f65ff06f          	j	80001d38 <perform_attack+0x984>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
80001dd8:	94442603          	lw	a2,-1724(s0)
80001ddc:	94c42583          	lw	a1,-1716(s0)
80001de0:	97842503          	lw	a0,-1672(s0)
80001de4:	42d040ef          	jal	ra,80006a10 <strncpy>
80001de8:	f51ff06f          	j	80001d38 <perform_attack+0x984>
            sprintf(buffer, "%s", payload.buffer);
80001dec:	94c42583          	lw	a1,-1716(s0)
80001df0:	97842503          	lw	a0,-1672(s0)
80001df4:	2d9040ef          	jal	ra,800068cc <strcpy>
80001df8:	f41ff06f          	j	80001d38 <perform_attack+0x984>
            snprintf(buffer, payload.size, "%s", payload.buffer);
80001dfc:	94c42683          	lw	a3,-1716(s0)
80001e00:	80008637          	lui	a2,0x80008
80001e04:	e4460613          	addi	a2,a2,-444 # 80007e44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007e45>
80001e08:	94442583          	lw	a1,-1724(s0)
80001e0c:	97842503          	lw	a0,-1672(s0)
80001e10:	189040ef          	jal	ra,80006798 <sniprintf>
80001e14:	f25ff06f          	j	80001d38 <perform_attack+0x984>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
80001e18:	94c42583          	lw	a1,-1716(s0)
80001e1c:	97842503          	lw	a0,-1672(s0)
80001e20:	22d040ef          	jal	ra,8000684c <strcat>
80001e24:	f15ff06f          	j	80001d38 <perform_attack+0x984>
__ssp_bos_icheck3_restrict(strncat, char *, const char *)
80001e28:	94442603          	lw	a2,-1724(s0)
80001e2c:	94c42583          	lw	a1,-1716(s0)
80001e30:	97842503          	lw	a0,-1672(s0)
80001e34:	335040ef          	jal	ra,80006968 <strncat>
80001e38:	f01ff06f          	j	80001d38 <perform_attack+0x984>
            snprintf(format_string_buf, 15, "%%%ic", payload.size);
80001e3c:	94442683          	lw	a3,-1724(s0)
80001e40:	80008637          	lui	a2,0x80008
80001e44:	e4860613          	addi	a2,a2,-440 # 80007e48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007e49>
80001e48:	00f00593          	li	a1,15
80001e4c:	96840513          	addi	a0,s0,-1688
80001e50:	149040ef          	jal	ra,80006798 <sniprintf>
80001e54:	ee5ff06f          	j	80001d38 <perform_attack+0x984>
            homebrew_memcpy(buffer, payload.buffer, payload.size - 1);
80001e58:	94442603          	lw	a2,-1724(s0)
80001e5c:	fff60613          	addi	a2,a2,-1
80001e60:	94c42583          	lw	a1,-1716(s0)
80001e64:	97842503          	lw	a0,-1672(s0)
80001e68:	83cff0ef          	jal	ra,80000ea4 <homebrew_memcpy>
80001e6c:	ecdff06f          	j	80001d38 <perform_attack+0x984>
                fprintf(stderr, "Error: Unknown choice of function\n");
80001e70:	80008537          	lui	a0,0x80008
80001e74:	e5050513          	addi	a0,a0,-432 # 80007e50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007e51>
80001e78:	001000ef          	jal	ra,80002678 <printk>
            exit(1);
80001e7c:	00100513          	li	a0,1
80001e80:	634040ef          	jal	ra,800064b4 <exit>
                *(uint32_t *) target_addr <<= 8;
80001e84:	93042683          	lw	a3,-1744(s0)
80001e88:	0006a783          	lw	a5,0(a3)
80001e8c:	00879713          	slli	a4,a5,0x8
80001e90:	00e6a023          	sw	a4,0(a3)
                *(uint32_t *) target_addr >>= 8;
80001e94:	01000737          	lui	a4,0x1000
80001e98:	fff70713          	addi	a4,a4,-1 # ffffff <CONFIG_SRAM_SIZE+0xefffff>
80001e9c:	00e7f7b3          	and	a5,a5,a4
80001ea0:	00f6a023          	sw	a5,0(a3)
80001ea4:	ec1ff06f          	j	80001d64 <perform_attack+0x9b0>
                payload.overflow_ptr = &ret2libc_target;
80001ea8:	800017b7          	lui	a5,0x80001
80001eac:	b4078793          	addi	a5,a5,-1216 # 80000b40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b41>
80001eb0:	94f42423          	sw	a5,-1720(s0)
                  - (uintptr_t) buffer + sizeof(long) + 1;
80001eb4:	97842783          	lw	a5,-1672(s0)
80001eb8:	92442483          	lw	s1,-1756(s0)
80001ebc:	40f487b3          	sub	a5,s1,a5
80001ec0:	00578793          	addi	a5,a5,5
                payload.size         = (uintptr_t) target_addr_aux
80001ec4:	94f42223          	sw	a5,-1724(s0)
                build_payload(&payload);
80001ec8:	94040513          	addi	a0,s0,-1728
80001ecc:	dd9fe0ef          	jal	ra,80000ca4 <build_payload>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
80001ed0:	94442603          	lw	a2,-1724(s0)
80001ed4:	fff60613          	addi	a2,a2,-1
80001ed8:	94c42583          	lw	a1,-1716(s0)
80001edc:	97842503          	lw	a0,-1672(s0)
80001ee0:	b19fe0ef          	jal	ra,800009f8 <memcpy>
                printf("target_addr_aux: %p\n", target_addr_aux);
80001ee4:	00048593          	mv	a1,s1
80001ee8:	80008537          	lui	a0,0x80008
80001eec:	e7450513          	addi	a0,a0,-396 # 80007e74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007e75>
80001ef0:	788000ef          	jal	ra,80002678 <printk>
                switch (attack.location) {
80001ef4:	800097b7          	lui	a5,0x80009
80001ef8:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80001efc:	00c7a783          	lw	a5,12(a5)
80001f00:	19200713          	li	a4,402
80001f04:	06e78263          	beq	a5,a4,80001f68 <perform_attack+0xbb4>
80001f08:	02f76663          	bltu	a4,a5,80001f34 <perform_attack+0xb80>
80001f0c:	19000713          	li	a4,400
80001f10:	04e78263          	beq	a5,a4,80001f54 <perform_attack+0xba0>
80001f14:	19100713          	li	a4,401
80001f18:	e6e794e3          	bne	a5,a4,80001d80 <perform_attack+0x9cc>
                          (uintptr_t) *heap_mem_ptr_aux;
80001f1c:	92042783          	lw	a5,-1760(s0)
80001f20:	0007a703          	lw	a4,0(a5)
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80001f24:	93042783          	lw	a5,-1744(s0)
80001f28:	0007a783          	lw	a5,0(a5)
80001f2c:	00e7a023          	sw	a4,0(a5)
                        break;
80001f30:	e51ff06f          	j	80001d80 <perform_attack+0x9cc>
80001f34:	19300713          	li	a4,403
80001f38:	e4e794e3          	bne	a5,a4,80001d80 <perform_attack+0x9cc>
                          (uintptr_t) *data_mem_ptr_aux;
80001f3c:	8000b7b7          	lui	a5,0x8000b
80001f40:	6107a703          	lw	a4,1552(a5) # 8000b610 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b611>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80001f44:	93042783          	lw	a5,-1744(s0)
80001f48:	0007a783          	lw	a5,0(a5)
80001f4c:	00e7a023          	sw	a4,0(a5)
                        break;
80001f50:	e31ff06f          	j	80001d80 <perform_attack+0x9cc>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80001f54:	93042783          	lw	a5,-1744(s0)
80001f58:	0007a783          	lw	a5,0(a5)
                          (uintptr_t) stack_mem_ptr_aux;
80001f5c:	ea442703          	lw	a4,-348(s0)
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80001f60:	00e7a023          	sw	a4,0(a5)
                        break;
80001f64:	e1dff06f          	j	80001d80 <perform_attack+0x9cc>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80001f68:	93042783          	lw	a5,-1744(s0)
80001f6c:	0007a783          	lw	a5,0(a5)
                          (uintptr_t) bss_mem_ptr_aux;
80001f70:	80009737          	lui	a4,0x80009
80001f74:	ad072703          	lw	a4,-1328(a4) # 80008ad0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ad1>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80001f78:	00e7a023          	sw	a4,0(a5)
                        break;
80001f7c:	e05ff06f          	j	80001d80 <perform_attack+0x9cc>
                *(uintptr_t *) (*(uintptr_t *) target_addr) =
80001f80:	93042783          	lw	a5,-1744(s0)
80001f84:	0007a783          	lw	a5,0(a5)
                  (uintptr_t) buffer;
80001f88:	97842703          	lw	a4,-1672(s0)
                *(uintptr_t *) (*(uintptr_t *) target_addr) =
80001f8c:	00e7a023          	sw	a4,0(a5)
80001f90:	df1ff06f          	j	80001d80 <perform_attack+0x9cc>
                fprintf(stderr, "Error: Unknown choice of attack parameterB\n");
80001f94:	80008537          	lui	a0,0x80008
80001f98:	e8c50513          	addi	a0,a0,-372 # 80007e8c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007e8d>
80001f9c:	6dc000ef          	jal	ra,80002678 <printk>
            exit(1);
80001fa0:	00100513          	li	a0,1
80001fa4:	510040ef          	jal	ra,800064b4 <exit>
            stack_func_ptr(NULL);
80001fa8:	00000513          	li	a0,0
80001fac:	eac42783          	lw	a5,-340(s0)
80001fb0:	000780e7          	jalr	a5
} /* perform_attack */
80001fb4:	6ec12083          	lw	ra,1772(sp)
80001fb8:	6e812403          	lw	s0,1768(sp)
80001fbc:	6e412483          	lw	s1,1764(sp)
80001fc0:	6e012903          	lw	s2,1760(sp)
80001fc4:	6dc12983          	lw	s3,1756(sp)
80001fc8:	6d812a03          	lw	s4,1752(sp)
80001fcc:	6f010113          	addi	sp,sp,1776
80001fd0:	00008067          	ret
            ((int (*)(char *, int))(*stack_func_ptr_param))(NULL, 0);
80001fd4:	00000593          	li	a1,0
80001fd8:	00000513          	li	a0,0
80001fdc:	93c42783          	lw	a5,-1732(s0)
80001fe0:	000780e7          	jalr	a5
80001fe4:	fd1ff06f          	j	80001fb4 <perform_attack+0xc00>
            ((int (*)(char *, int)) * heap_func_ptr)(NULL, 0);
80001fe8:	93442783          	lw	a5,-1740(s0)
80001fec:	0007a783          	lw	a5,0(a5)
80001ff0:	00000593          	li	a1,0
80001ff4:	00000513          	li	a0,0
80001ff8:	000780e7          	jalr	a5
80001ffc:	fb9ff06f          	j	80001fb4 <perform_attack+0xc00>
            ((int (*)(char *, int))(*bss_func_ptr))(NULL, 0);
80002000:	800097b7          	lui	a5,0x80009
80002004:	ac87a783          	lw	a5,-1336(a5) # 80008ac8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ac9>
80002008:	00000593          	li	a1,0
8000200c:	00000513          	li	a0,0
80002010:	000780e7          	jalr	a5
80002014:	fa1ff06f          	j	80001fb4 <perform_attack+0xc00>
            ((int (*)(char *, int))(*data_func_ptr))(NULL, 0);
80002018:	8000c7b7          	lui	a5,0x8000c
8000201c:	a707a783          	lw	a5,-1424(a5) # 8000ba70 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ba71>
80002020:	00000593          	li	a1,0
80002024:	00000513          	li	a0,0
80002028:	000780e7          	jalr	a5
8000202c:	f89ff06f          	j	80001fb4 <perform_attack+0xc00>
            lj_func(stack_jmp_buffer);
80002030:	eb040513          	addi	a0,s0,-336
80002034:	e5dfe0ef          	jal	ra,80000e90 <lj_func>
            lj_func(stack_jmp_buffer_param);
80002038:	93842503          	lw	a0,-1736(s0)
8000203c:	e55fe0ef          	jal	ra,80000e90 <lj_func>
            lj_func(*heap_jmp_buffer);
80002040:	92842503          	lw	a0,-1752(s0)
80002044:	e4dfe0ef          	jal	ra,80000e90 <lj_func>
            lj_func(data_jmp_buffer);
80002048:	8000b537          	lui	a0,0x8000b
8000204c:	3e050513          	addi	a0,a0,992 # 8000b3e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b3e1>
80002050:	e41fe0ef          	jal	ra,80000e90 <lj_func>
            lj_func(bss_jmp_buffer);
80002054:	80009537          	lui	a0,0x80009
80002058:	b1050513          	addi	a0,a0,-1264 # 80008b10 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008b11>
8000205c:	e35fe0ef          	jal	ra,80000e90 <lj_func>
            ((int (*)(char *, int)) * (stack_struct.func_ptr))(NULL, 0);
80002060:	00000593          	li	a1,0
80002064:	00000513          	li	a0,0
80002068:	a7c42783          	lw	a5,-1412(s0)
8000206c:	000780e7          	jalr	a5
80002070:	f45ff06f          	j	80001fb4 <perform_attack+0xc00>
            (*heap_struct->func_ptr)(NULL, 0);
80002074:	92c42783          	lw	a5,-1748(s0)
80002078:	1007a783          	lw	a5,256(a5)
8000207c:	00000593          	li	a1,0
80002080:	00000513          	li	a0,0
80002084:	000780e7          	jalr	a5
80002088:	f2dff06f          	j	80001fb4 <perform_attack+0xc00>
            (*data_struct.func_ptr)(NULL, 0);
8000208c:	8000c7b7          	lui	a5,0x8000c
80002090:	83078793          	addi	a5,a5,-2000 # 8000b830 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b831>
80002094:	1007a783          	lw	a5,256(a5)
80002098:	00000593          	li	a1,0
8000209c:	00000513          	li	a0,0
800020a0:	000780e7          	jalr	a5
800020a4:	f11ff06f          	j	80001fb4 <perform_attack+0xc00>
            (*bss_struct.func_ptr)(NULL, 0);
800020a8:	800097b7          	lui	a5,0x80009
800020ac:	d5078793          	addi	a5,a5,-688 # 80008d50 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008d51>
800020b0:	1007a783          	lw	a5,256(a5)
800020b4:	00000593          	li	a1,0
800020b8:	00000513          	li	a0,0
800020bc:	000780e7          	jalr	a5
800020c0:	ef5ff06f          	j	80001fb4 <perform_attack+0xc00>
            switch (attack.location) {
800020c4:	800097b7          	lui	a5,0x80009
800020c8:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800020cc:	00c7a783          	lw	a5,12(a5)
800020d0:	19200713          	li	a4,402
800020d4:	06e78063          	beq	a5,a4,80002134 <perform_attack+0xd80>
800020d8:	02f76463          	bltu	a4,a5,80002100 <perform_attack+0xd4c>
800020dc:	19000713          	li	a4,400
800020e0:	04e78063          	beq	a5,a4,80002120 <perform_attack+0xd6c>
800020e4:	19100713          	li	a4,401
800020e8:	ece796e3          	bne	a5,a4,80001fb4 <perform_attack+0xc00>
                    dop_target(buffer, *heap_mem_ptr);
800020ec:	91c42783          	lw	a5,-1764(s0)
800020f0:	0007a583          	lw	a1,0(a5)
800020f4:	97842503          	lw	a0,-1672(s0)
800020f8:	e5dfe0ef          	jal	ra,80000f54 <dop_target>
800020fc:	eb9ff06f          	j	80001fb4 <perform_attack+0xc00>
80002100:	19300713          	li	a4,403
80002104:	eae798e3          	bne	a5,a4,80001fb4 <perform_attack+0xc00>
                    dop_target(buffer, **data_mem_ptr);
80002108:	8000b7b7          	lui	a5,0x8000b
8000210c:	5107a783          	lw	a5,1296(a5) # 8000b510 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b511>
80002110:	0007a583          	lw	a1,0(a5)
80002114:	97842503          	lw	a0,-1672(s0)
80002118:	e3dfe0ef          	jal	ra,80000f54 <dop_target>
8000211c:	e99ff06f          	j	80001fb4 <perform_attack+0xc00>
                    dop_target(buffer, *stack_mem_ptr);
80002120:	ea842783          	lw	a5,-344(s0)
80002124:	0007a583          	lw	a1,0(a5)
80002128:	97842503          	lw	a0,-1672(s0)
8000212c:	e29fe0ef          	jal	ra,80000f54 <dop_target>
80002130:	e85ff06f          	j	80001fb4 <perform_attack+0xc00>
                    dop_target(buffer, *bss_mem_ptr);
80002134:	800097b7          	lui	a5,0x80009
80002138:	acc7a783          	lw	a5,-1332(a5) # 80008acc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008acd>
8000213c:	0007a583          	lw	a1,0(a5)
80002140:	97842503          	lw	a0,-1672(s0)
80002144:	e11fe0ef          	jal	ra,80000f54 <dop_target>
80002148:	e6dff06f          	j	80001fb4 <perform_attack+0xc00>
			data_leak(buffer);
8000214c:	97842503          	lw	a0,-1672(s0)
80002150:	e69fe0ef          	jal	ra,80000fb8 <data_leak>
80002154:	e61ff06f          	j	80001fb4 <perform_attack+0xc00>

80002158 <is_attack_possible>:
80002158:	00308013          	addi	zero,ra,3
{
8000215c:	ff010113          	addi	sp,sp,-16
80002160:	00112623          	sw	ra,12(sp)
    if ((attack.inject_param == INJECTED_CODE_NO_NOP) &&
80002164:	800097b7          	lui	a5,0x80009
80002168:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
8000216c:	0047a783          	lw	a5,4(a5)
80002170:	0c800713          	li	a4,200
80002174:	06e78663          	beq	a5,a4,800021e0 <is_attack_possible+0x88>
    if (attack.inject_param == RETURN_ORIENTED_PROGRAMMING &&
80002178:	0ca00713          	li	a4,202
8000217c:	08e78a63          	beq	a5,a4,80002210 <is_attack_possible+0xb8>
    if (attack.inject_param == DATA_ONLY) {
80002180:	0cb00713          	li	a4,203
80002184:	0ae78863          	beq	a5,a4,80002234 <is_attack_possible+0xdc>
    } else if (attack.code_ptr == VAR_BOF ||
80002188:	800097b7          	lui	a5,0x80009
8000218c:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80002190:	0087a783          	lw	a5,8(a5)
			   attack.code_ptr == VAR_IOF ||
80002194:	ec578793          	addi	a5,a5,-315
    } else if (attack.code_ptr == VAR_BOF ||
80002198:	00200713          	li	a4,2
8000219c:	12f77663          	bgeu	a4,a5,800022c8 <is_attack_possible+0x170>
    switch (attack.location) {
800021a0:	800097b7          	lui	a5,0x80009
800021a4:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800021a8:	00c7a783          	lw	a5,12(a5)
800021ac:	19200713          	li	a4,402
800021b0:	2ce78063          	beq	a5,a4,80002470 <is_attack_possible+0x318>
800021b4:	12f76863          	bltu	a4,a5,800022e4 <is_attack_possible+0x18c>
800021b8:	19000713          	li	a4,400
800021bc:	14e78c63          	beq	a5,a4,80002314 <is_attack_possible+0x1bc>
800021c0:	19100713          	li	a4,401
800021c4:	10e79c63          	bne	a5,a4,800022dc <is_attack_possible+0x184>
            if ((attack.technique == DIRECT) &&
800021c8:	800097b7          	lui	a5,0x80009
800021cc:	f747a703          	lw	a4,-140(a5) # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800021d0:	06400793          	li	a5,100
800021d4:	20f70463          	beq	a4,a5,800023dc <is_attack_possible+0x284>
    return TRUE;
800021d8:	00100513          	li	a0,1
800021dc:	12c0006f          	j	80002308 <is_attack_possible+0x1b0>
      (!(attack.function == MEMCPY) && !(attack.function == HOMEBREW)))
800021e0:	80009737          	lui	a4,0x80009
800021e4:	f7470713          	addi	a4,a4,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800021e8:	01072703          	lw	a4,16(a4)
    if ((attack.inject_param == INJECTED_CODE_NO_NOP) &&
800021ec:	1f400693          	li	a3,500
800021f0:	f8d704e3          	beq	a4,a3,80002178 <is_attack_possible+0x20>
      (!(attack.function == MEMCPY) && !(attack.function == HOMEBREW)))
800021f4:	1fc00693          	li	a3,508
800021f8:	f8d700e3          	beq	a4,a3,80002178 <is_attack_possible+0x20>
        fprintf(stderr,
800021fc:	80008537          	lui	a0,0x80008
80002200:	fdc50513          	addi	a0,a0,-36 # 80007fdc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007fdd>
80002204:	474000ef          	jal	ra,80002678 <printk>
        return FALSE;
80002208:	00000513          	li	a0,0
8000220c:	0fc0006f          	j	80002308 <is_attack_possible+0x1b0>
      attack.technique != DIRECT)
80002210:	80009737          	lui	a4,0x80009
80002214:	f7472683          	lw	a3,-140(a4) # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
    if (attack.inject_param == RETURN_ORIENTED_PROGRAMMING &&
80002218:	06400713          	li	a4,100
8000221c:	f6e682e3          	beq	a3,a4,80002180 <is_attack_possible+0x28>
        fprintf(stderr,
80002220:	80008537          	lui	a0,0x80008
80002224:	02450513          	addi	a0,a0,36 # 80008024 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008025>
80002228:	450000ef          	jal	ra,80002678 <printk>
        return FALSE;
8000222c:	00000513          	li	a0,0
80002230:	0d80006f          	j	80002308 <is_attack_possible+0x1b0>
        if (attack.code_ptr != VAR_BOF &&
80002234:	800097b7          	lui	a5,0x80009
80002238:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
8000223c:	0087a783          	lw	a5,8(a5)
          	attack.code_ptr != VAR_IOF &&
80002240:	ec578693          	addi	a3,a5,-315
        if (attack.code_ptr != VAR_BOF &&
80002244:	00200713          	li	a4,2
80002248:	04d76463          	bltu	a4,a3,80002290 <is_attack_possible+0x138>
        if ((attack.code_ptr == VAR_LEAK || attack.code_ptr == VAR_IOF) && attack.technique == INDIRECT) {
8000224c:	ec478793          	addi	a5,a5,-316
80002250:	00100713          	li	a4,1
80002254:	04f77863          	bgeu	a4,a5,800022a4 <is_attack_possible+0x14c>
        if (attack.location == HEAP && attack.technique == INDIRECT) {
80002258:	800097b7          	lui	a5,0x80009
8000225c:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80002260:	00c7a703          	lw	a4,12(a5)
80002264:	19100793          	li	a5,401
80002268:	f2f71ce3          	bne	a4,a5,800021a0 <is_attack_possible+0x48>
8000226c:	800097b7          	lui	a5,0x80009
80002270:	f747a703          	lw	a4,-140(a5) # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80002274:	06500793          	li	a5,101
80002278:	f2f714e3          	bne	a4,a5,800021a0 <is_attack_possible+0x48>
            fprintf(stderr,
8000227c:	80008537          	lui	a0,0x80008
80002280:	0d450513          	addi	a0,a0,212 # 800080d4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800080d5>
80002284:	3f4000ef          	jal	ra,80002678 <printk>
        	return FALSE;
80002288:	00000513          	li	a0,0
8000228c:	07c0006f          	j	80002308 <is_attack_possible+0x1b0>
            fprintf(stderr, "Error: Misused DOP code pointer parameters.\n");
80002290:	80008537          	lui	a0,0x80008
80002294:	06850513          	addi	a0,a0,104 # 80008068 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008069>
80002298:	3e0000ef          	jal	ra,80002678 <printk>
			return FALSE;
8000229c:	00000513          	li	a0,0
800022a0:	0680006f          	j	80002308 <is_attack_possible+0x1b0>
        if ((attack.code_ptr == VAR_LEAK || attack.code_ptr == VAR_IOF) && attack.technique == INDIRECT) {
800022a4:	800097b7          	lui	a5,0x80009
800022a8:	f747a703          	lw	a4,-140(a5) # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800022ac:	06500793          	li	a5,101
800022b0:	faf714e3          	bne	a4,a5,80002258 <is_attack_possible+0x100>
            fprintf(stderr,
800022b4:	80008537          	lui	a0,0x80008
800022b8:	09850513          	addi	a0,a0,152 # 80008098 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008099>
800022bc:	3bc000ef          	jal	ra,80002678 <printk>
			return FALSE;
800022c0:	00000513          	li	a0,0
800022c4:	0440006f          	j	80002308 <is_attack_possible+0x1b0>
        fprintf(stderr,
800022c8:	80008537          	lui	a0,0x80008
800022cc:	10c50513          	addi	a0,a0,268 # 8000810c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000810d>
800022d0:	3a8000ef          	jal	ra,80002678 <printk>
    	return FALSE;
800022d4:	00000513          	li	a0,0
800022d8:	0300006f          	j	80002308 <is_attack_possible+0x1b0>
    switch (attack.location) {
800022dc:	00100513          	li	a0,1
800022e0:	0280006f          	j	80002308 <is_attack_possible+0x1b0>
800022e4:	19300713          	li	a4,403
800022e8:	00e79e63          	bne	a5,a4,80002304 <is_attack_possible+0x1ac>
            if ((attack.technique == DIRECT) &&
800022ec:	800097b7          	lui	a5,0x80009
800022f0:	f747a703          	lw	a4,-140(a5) # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800022f4:	06400793          	li	a5,100
800022f8:	12f70663          	beq	a4,a5,80002424 <is_attack_possible+0x2cc>
    return TRUE;
800022fc:	00100513          	li	a0,1
80002300:	0080006f          	j	80002308 <is_attack_possible+0x1b0>
    switch (attack.location) {
80002304:	00100513          	li	a0,1
} /* is_attack_possible */
80002308:	00c12083          	lw	ra,12(sp)
8000230c:	01010113          	addi	sp,sp,16
80002310:	00008067          	ret
            if ((attack.technique == DIRECT)) {
80002314:	800097b7          	lui	a5,0x80009
80002318:	f747a703          	lw	a4,-140(a5) # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
8000231c:	06400793          	li	a5,100
80002320:	00f70663          	beq	a4,a5,8000232c <is_attack_possible+0x1d4>
    return TRUE;
80002324:	00100513          	li	a0,1
80002328:	fe1ff06f          	j	80002308 <is_attack_possible+0x1b0>
                if ((attack.code_ptr == FUNC_PTR_HEAP) ||
8000232c:	800097b7          	lui	a5,0x80009
80002330:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80002334:	0087a783          	lw	a5,8(a5)
                  (attack.code_ptr == FUNC_PTR_BSS) ||
80002338:	ed178693          	addi	a3,a5,-303
                if ((attack.code_ptr == FUNC_PTR_HEAP) ||
8000233c:	00200713          	li	a4,2
80002340:	04d77263          	bgeu	a4,a3,80002384 <is_attack_possible+0x22c>
                  (attack.code_ptr == FUNC_PTR_DATA) ||
80002344:	13400713          	li	a4,308
80002348:	02e78e63          	beq	a5,a4,80002384 <is_attack_possible+0x22c>
                  (attack.code_ptr == LONGJMP_BUF_HEAP) ||
8000234c:	13600713          	li	a4,310
80002350:	02e78a63          	beq	a5,a4,80002384 <is_attack_possible+0x22c>
                  (attack.code_ptr == LONGJMP_BUF_DATA) ||
80002354:	13500713          	li	a4,309
80002358:	02e78663          	beq	a5,a4,80002384 <is_attack_possible+0x22c>
                  (attack.code_ptr == LONGJMP_BUF_BSS) ||
8000235c:	13800713          	li	a4,312
80002360:	02e78263          	beq	a5,a4,80002384 <is_attack_possible+0x22c>
                  (attack.code_ptr == STRUCT_FUNC_PTR_HEAP) ||
80002364:	13900713          	li	a4,313
80002368:	00e78e63          	beq	a5,a4,80002384 <is_attack_possible+0x22c>
                  (attack.code_ptr == STRUCT_FUNC_PTR_DATA) ||
8000236c:	13a00713          	li	a4,314
80002370:	00e78a63          	beq	a5,a4,80002384 <is_attack_possible+0x22c>
                } else if ((attack.code_ptr == FUNC_PTR_STACK_PARAM) &&
80002374:	12e00713          	li	a4,302
80002378:	02e78063          	beq	a5,a4,80002398 <is_attack_possible+0x240>
    return TRUE;
8000237c:	00100513          	li	a0,1
80002380:	f89ff06f          	j	80002308 <is_attack_possible+0x1b0>
                    fprintf(stderr,
80002384:	80008537          	lui	a0,0x80008
80002388:	15050513          	addi	a0,a0,336 # 80008150 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008151>
8000238c:	2ec000ef          	jal	ra,80002678 <printk>
                    return FALSE;
80002390:	00000513          	li	a0,0
80002394:	f75ff06f          	j	80002308 <is_attack_possible+0x1b0>
                  ((attack.function == STRCAT) ||
80002398:	800097b7          	lui	a5,0x80009
8000239c:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800023a0:	0107a783          	lw	a5,16(a5)
800023a4:	e0878693          	addi	a3,a5,-504
                } else if ((attack.code_ptr == FUNC_PTR_STACK_PARAM) &&
800023a8:	00100713          	li	a4,1
800023ac:	00d77e63          	bgeu	a4,a3,800023c8 <is_attack_possible+0x270>
                  (attack.function == SNPRINTF) ||
800023b0:	1fb00713          	li	a4,507
800023b4:	00e78a63          	beq	a5,a4,800023c8 <is_attack_possible+0x270>
                  (attack.function == SSCANF) ||
800023b8:	1fc00713          	li	a4,508
800023bc:	00e78663          	beq	a5,a4,800023c8 <is_attack_possible+0x270>
    return TRUE;
800023c0:	00100513          	li	a0,1
800023c4:	f45ff06f          	j	80002308 <is_attack_possible+0x1b0>
                    fprintf(stderr,
800023c8:	80008537          	lui	a0,0x80008
800023cc:	1a850513          	addi	a0,a0,424 # 800081a8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800081a9>
800023d0:	2a8000ef          	jal	ra,80002678 <printk>
                    return FALSE;
800023d4:	00000513          	li	a0,0
800023d8:	f31ff06f          	j	80002308 <is_attack_possible+0x1b0>
              ((attack.code_ptr == RET_ADDR) ||
800023dc:	800097b7          	lui	a5,0x80009
800023e0:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800023e4:	0087a783          	lw	a5,8(a5)
              (attack.code_ptr == FUNC_PTR_STACK_VAR) ||
800023e8:	ed478693          	addi	a3,a5,-300
            if ((attack.technique == DIRECT) &&
800023ec:	00200713          	li	a4,2
800023f0:	02d77063          	bgeu	a4,a3,80002410 <is_attack_possible+0x2b8>
800023f4:	ed078793          	addi	a5,a5,-304
800023f8:	00a00713          	li	a4,10
800023fc:	12f76c63          	bltu	a4,a5,80002534 <is_attack_possible+0x3dc>
80002400:	6ef00713          	li	a4,1775
80002404:	00f757b3          	srl	a5,a4,a5
80002408:	0017f793          	andi	a5,a5,1
8000240c:	12078863          	beqz	a5,8000253c <is_attack_possible+0x3e4>
                fprintf(stderr,
80002410:	80008537          	lui	a0,0x80008
80002414:	23450513          	addi	a0,a0,564 # 80008234 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008235>
80002418:	260000ef          	jal	ra,80002678 <printk>
                return FALSE;
8000241c:	00000513          	li	a0,0
80002420:	ee9ff06f          	j	80002308 <is_attack_possible+0x1b0>
              ((attack.code_ptr == RET_ADDR) ||
80002424:	800097b7          	lui	a5,0x80009
80002428:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
8000242c:	0087a783          	lw	a5,8(a5)
              (attack.code_ptr == FUNC_PTR_STACK_VAR) ||
80002430:	ed478693          	addi	a3,a5,-300
            if ((attack.technique == DIRECT) &&
80002434:	00200713          	li	a4,2
80002438:	02d77263          	bgeu	a4,a3,8000245c <is_attack_possible+0x304>
8000243c:	ed178713          	addi	a4,a5,-303
80002440:	00b00793          	li	a5,11
80002444:	10e7e063          	bltu	a5,a4,80002544 <is_attack_possible+0x3ec>
80002448:	000017b7          	lui	a5,0x1
8000244c:	b7b78793          	addi	a5,a5,-1157 # b7b <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x37b>
80002450:	00e7d7b3          	srl	a5,a5,a4
80002454:	0017f793          	andi	a5,a5,1
80002458:	0e078a63          	beqz	a5,8000254c <is_attack_possible+0x3f4>
                fprintf(stderr,
8000245c:	80008537          	lui	a0,0x80008
80002460:	28c50513          	addi	a0,a0,652 # 8000828c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000828d>
80002464:	214000ef          	jal	ra,80002678 <printk>
                return FALSE;
80002468:	00000513          	li	a0,0
8000246c:	e9dff06f          	j	80002308 <is_attack_possible+0x1b0>
            if ((attack.technique == DIRECT) &&
80002470:	800097b7          	lui	a5,0x80009
80002474:	f747a783          	lw	a5,-140(a5) # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80002478:	06400713          	li	a4,100
8000247c:	00e78a63          	beq	a5,a4,80002490 <is_attack_possible+0x338>
            } else if ((attack.technique == INDIRECT) &&
80002480:	06500713          	li	a4,101
80002484:	04e78a63          	beq	a5,a4,800024d8 <is_attack_possible+0x380>
    return TRUE;
80002488:	00100513          	li	a0,1
8000248c:	e7dff06f          	j	80002308 <is_attack_possible+0x1b0>
              ((attack.code_ptr == RET_ADDR) ||
80002490:	80009737          	lui	a4,0x80009
80002494:	f7470713          	addi	a4,a4,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
80002498:	00872703          	lw	a4,8(a4)
              (attack.code_ptr == FUNC_PTR_STACK_VAR) ||
8000249c:	ed470613          	addi	a2,a4,-300
            if ((attack.technique == DIRECT) &&
800024a0:	00200693          	li	a3,2
800024a4:	02c6f063          	bgeu	a3,a2,800024c4 <is_attack_possible+0x36c>
800024a8:	ed170713          	addi	a4,a4,-303
800024ac:	00a00693          	li	a3,10
800024b0:	fce6e8e3          	bltu	a3,a4,80002480 <is_attack_possible+0x328>
800024b4:	7bd00693          	li	a3,1981
800024b8:	00e6d733          	srl	a4,a3,a4
800024bc:	00177713          	andi	a4,a4,1
800024c0:	fc0700e3          	beqz	a4,80002480 <is_attack_possible+0x328>
                fprintf(stderr,
800024c4:	80008537          	lui	a0,0x80008
800024c8:	2ec50513          	addi	a0,a0,748 # 800082ec <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800082ed>
800024cc:	1ac000ef          	jal	ra,80002678 <printk>
                return FALSE;
800024d0:	00000513          	li	a0,0
800024d4:	e35ff06f          	j	80002308 <is_attack_possible+0x1b0>
              (attack.code_ptr == LONGJMP_BUF_HEAP) &&
800024d8:	800097b7          	lui	a5,0x80009
800024dc:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800024e0:	0087a703          	lw	a4,8(a5)
            } else if ((attack.technique == INDIRECT) &&
800024e4:	13400793          	li	a5,308
800024e8:	00f70663          	beq	a4,a5,800024f4 <is_attack_possible+0x39c>
    return TRUE;
800024ec:	00100513          	li	a0,1
800024f0:	e19ff06f          	j	80002308 <is_attack_possible+0x1b0>
              (!(attack.function == MEMCPY) &&
800024f4:	800097b7          	lui	a5,0x80009
800024f8:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800024fc:	0107a783          	lw	a5,16(a5)
              (attack.code_ptr == LONGJMP_BUF_HEAP) &&
80002500:	1f400713          	li	a4,500
80002504:	04e78863          	beq	a5,a4,80002554 <is_attack_possible+0x3fc>
              (!(attack.function == MEMCPY) &&
80002508:	1f600713          	li	a4,502
8000250c:	04e78863          	beq	a5,a4,8000255c <is_attack_possible+0x404>
              !(attack.function == STRNCPY) &&
80002510:	1fc00713          	li	a4,508
80002514:	00e79663          	bne	a5,a4,80002520 <is_attack_possible+0x3c8>
    return TRUE;
80002518:	00100513          	li	a0,1
8000251c:	dedff06f          	j	80002308 <is_attack_possible+0x1b0>
                fprintf(stderr,
80002520:	80008537          	lui	a0,0x80008
80002524:	34450513          	addi	a0,a0,836 # 80008344 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008345>
80002528:	150000ef          	jal	ra,80002678 <printk>
                return FALSE;
8000252c:	00000513          	li	a0,0
80002530:	dd9ff06f          	j	80002308 <is_attack_possible+0x1b0>
            if ((attack.technique == DIRECT) &&
80002534:	00100513          	li	a0,1
80002538:	dd1ff06f          	j	80002308 <is_attack_possible+0x1b0>
8000253c:	00100513          	li	a0,1
80002540:	dc9ff06f          	j	80002308 <is_attack_possible+0x1b0>
            if ((attack.technique == DIRECT) &&
80002544:	00100513          	li	a0,1
80002548:	dc1ff06f          	j	80002308 <is_attack_possible+0x1b0>
8000254c:	00100513          	li	a0,1
80002550:	db9ff06f          	j	80002308 <is_attack_possible+0x1b0>
    return TRUE;
80002554:	00100513          	li	a0,1
80002558:	db1ff06f          	j	80002308 <is_attack_possible+0x1b0>
8000255c:	00100513          	li	a0,1
80002560:	da9ff06f          	j	80002308 <is_attack_possible+0x1b0>

80002564 <try_attack>:
80002564:	00308013          	addi	zero,ra,3
{
80002568:	ec010113          	addi	sp,sp,-320
8000256c:	12112e23          	sw	ra,316(sp)
    if (is_attack_possible()) {
80002570:	be9ff0ef          	jal	ra,80002158 <is_attack_possible>
80002574:	02050063          	beqz	a0,80002594 <try_attack+0x30>
        perform_attack(&dummy_function, stack_jmp_buffer_param);
80002578:	00010593          	mv	a1,sp
8000257c:	80001537          	lui	a0,0x80001
80002580:	af850513          	addi	a0,a0,-1288 # 80000af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000af9>
80002584:	e31fe0ef          	jal	ra,800013b4 <perform_attack>
}
80002588:	13c12083          	lw	ra,316(sp)
8000258c:	14010113          	addi	sp,sp,320
80002590:	00008067          	ret
        exit(ATTACK_IMPOSSIBLE);
80002594:	c7c00513          	li	a0,-900
80002598:	71d030ef          	jal	ra,800064b4 <exit>

8000259c <main>:
8000259c:	00308013          	addi	zero,ra,3
{
800025a0:	ff010113          	addi	sp,sp,-16
800025a4:	00112623          	sw	ra,12(sp)
    attack.technique = DIRECT;
800025a8:	800097b7          	lui	a5,0x80009
800025ac:	f7478793          	addi	a5,a5,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
800025b0:	06400713          	li	a4,100
800025b4:	00e7a023          	sw	a4,0(a5)
    attack.inject_param = RETURN_ORIENTED_PROGRAMMING;
800025b8:	0ca00713          	li	a4,202
800025bc:	00e7a223          	sw	a4,4(a5)
    attack.code_ptr= RET_ADDR;
800025c0:	12c00713          	li	a4,300
800025c4:	00e7a423          	sw	a4,8(a5)
    attack.location = STACK;
800025c8:	19000713          	li	a4,400
800025cc:	00e7a623          	sw	a4,12(a5)
    attack.function = MEMCPY;
800025d0:	1f400713          	li	a4,500
800025d4:	00e7a823          	sw	a4,16(a5)
    printk("RIPE is alive! %s\n", CONFIG_BOARD);
800025d8:	800085b7          	lui	a1,0x80008
800025dc:	39458593          	addi	a1,a1,916 # 80008394 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008395>
800025e0:	80008537          	lui	a0,0x80008
800025e4:	3a050513          	addi	a0,a0,928 # 800083a0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800083a1>
800025e8:	090000ef          	jal	ra,80002678 <printk>
    print_current_test_parameters();
800025ec:	df8fe0ef          	jal	ra,80000be4 <print_current_test_parameters>
    try_attack();
800025f0:	f75ff0ef          	jal	ra,80002564 <try_attack>
    printf("Unexpected back in main\n");
800025f4:	80008537          	lui	a0,0x80008
800025f8:	3b450513          	addi	a0,a0,948 # 800083b4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800083b5>
800025fc:	07c000ef          	jal	ra,80002678 <printk>
}
80002600:	00c12083          	lw	ra,12(sp)
80002604:	01010113          	addi	sp,sp,16
80002608:	00008067          	ret

8000260c <arch_printk_char_out>:
8000260c:	00308013          	addi	zero,ra,3
}
80002610:	00000513          	li	a0,0
80002614:	00008067          	ret

80002618 <char_out>:
80002618:	00308013          	addi	zero,ra,3
{
8000261c:	ff010113          	addi	sp,sp,-16
80002620:	00112623          	sw	ra,12(sp)
	return _char_out(c);
80002624:	81c1a783          	lw	a5,-2020(gp) # 8000ba8c <_char_out>
80002628:	000780e7          	jalr	a5
}
8000262c:	00c12083          	lw	ra,12(sp)
80002630:	01010113          	addi	sp,sp,16
80002634:	00008067          	ret

80002638 <__printk_hook_install>:
80002638:	00308013          	addi	zero,ra,3
	_char_out = fn;
8000263c:	80a1ae23          	sw	a0,-2020(gp) # 8000ba8c <_char_out>
}
80002640:	00008067          	ret

80002644 <vprintk>:
80002644:	00308013          	addi	zero,ra,3
{
80002648:	ff010113          	addi	sp,sp,-16
8000264c:	00112623          	sw	ra,12(sp)
80002650:	00050613          	mv	a2,a0
80002654:	00058693          	mv	a3,a1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
80002658:	00000713          	li	a4,0
8000265c:	00000593          	li	a1,0
80002660:	80002537          	lui	a0,0x80002
80002664:	61850513          	addi	a0,a0,1560 # 80002618 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80002619>
80002668:	1d5000ef          	jal	ra,8000303c <z_cbvprintf_impl>
}
8000266c:	00c12083          	lw	ra,12(sp)
80002670:	01010113          	addi	sp,sp,16
80002674:	00008067          	ret

80002678 <printk>:
80002678:	00308013          	addi	zero,ra,3
{
8000267c:	fc010113          	addi	sp,sp,-64
80002680:	00112e23          	sw	ra,28(sp)
80002684:	02b12223          	sw	a1,36(sp)
80002688:	02c12423          	sw	a2,40(sp)
8000268c:	02d12623          	sw	a3,44(sp)
80002690:	02e12823          	sw	a4,48(sp)
80002694:	02f12a23          	sw	a5,52(sp)
80002698:	03012c23          	sw	a6,56(sp)
8000269c:	03112e23          	sw	a7,60(sp)
	va_start(ap, fmt);
800026a0:	02410593          	addi	a1,sp,36
800026a4:	00b12623          	sw	a1,12(sp)
	vprintk(fmt, ap);
800026a8:	f9dff0ef          	jal	ra,80002644 <vprintk>
}
800026ac:	01c12083          	lw	ra,28(sp)
800026b0:	04010113          	addi	sp,sp,64
800026b4:	00008067          	ret

800026b8 <z_thread_entry>:
800026b8:	00308013          	addi	zero,ra,3
{
800026bc:	ff010113          	addi	sp,sp,-16
800026c0:	00112623          	sw	ra,12(sp)
800026c4:	00050793          	mv	a5,a0
800026c8:	00058513          	mv	a0,a1
800026cc:	00060593          	mv	a1,a2
	entry(p1, p2, p3);
800026d0:	00068613          	mv	a2,a3
800026d4:	000780e7          	jalr	a5
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
800026d8:	730030ef          	jal	ra,80005e08 <z_impl_z_current_get>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
800026dc:	7e8030ef          	jal	ra,80005ec4 <z_impl_k_thread_abort>

800026e0 <extract_decimal>:
800026e0:	00308013          	addi	zero,ra,3
{
800026e4:	00050613          	mv	a2,a0
	const char *sp = *str;
800026e8:	00052703          	lw	a4,0(a0)
	size_t val = 0;
800026ec:	00000513          	li	a0,0
	while (isdigit((int)(unsigned char)*sp)) {
800026f0:	01c0006f          	j	8000270c <extract_decimal+0x2c>
		val = 10U * val + *sp++ - '0';
800026f4:	00251793          	slli	a5,a0,0x2
800026f8:	00a787b3          	add	a5,a5,a0
800026fc:	00179793          	slli	a5,a5,0x1
80002700:	00170713          	addi	a4,a4,1
80002704:	00d787b3          	add	a5,a5,a3
80002708:	fd078513          	addi	a0,a5,-48
	while (isdigit((int)(unsigned char)*sp)) {
8000270c:	00074683          	lbu	a3,0(a4)
80002710:	800097b7          	lui	a5,0x80009
80002714:	91d78793          	addi	a5,a5,-1763 # 8000891d <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000891e>
80002718:	00f687b3          	add	a5,a3,a5
8000271c:	0007c783          	lbu	a5,0(a5)
80002720:	0047f793          	andi	a5,a5,4
80002724:	fc0798e3          	bnez	a5,800026f4 <extract_decimal+0x14>
	*str = sp;
80002728:	00e62023          	sw	a4,0(a2)
}
8000272c:	00008067          	ret

80002730 <extract_flags>:
80002730:	00308013          	addi	zero,ra,3
{
80002734:	00050613          	mv	a2,a0
80002738:	00058513          	mv	a0,a1
	bool loop = true;
8000273c:	00100693          	li	a3,1
80002740:	0640006f          	j	800027a4 <extract_flags+0x74>
			conv->flag_dash = true;
80002744:	00065783          	lhu	a5,0(a2)
80002748:	0047e793          	ori	a5,a5,4
8000274c:	00f61023          	sh	a5,0(a2)
		if (loop) {
80002750:	04068863          	beqz	a3,800027a0 <extract_flags+0x70>
			++sp;
80002754:	00150513          	addi	a0,a0,1
80002758:	0480006f          	j	800027a0 <extract_flags+0x70>
			conv->flag_plus = true;
8000275c:	00065783          	lhu	a5,0(a2)
80002760:	0087e793          	ori	a5,a5,8
80002764:	00f61023          	sh	a5,0(a2)
			break;
80002768:	fe9ff06f          	j	80002750 <extract_flags+0x20>
			conv->flag_space = true;
8000276c:	00065783          	lhu	a5,0(a2)
80002770:	0107e793          	ori	a5,a5,16
80002774:	00f61023          	sh	a5,0(a2)
			break;
80002778:	fd9ff06f          	j	80002750 <extract_flags+0x20>
			conv->flag_hash = true;
8000277c:	00065783          	lhu	a5,0(a2)
80002780:	0207e793          	ori	a5,a5,32
80002784:	00f61023          	sh	a5,0(a2)
			break;
80002788:	fc9ff06f          	j	80002750 <extract_flags+0x20>
			conv->flag_zero = true;
8000278c:	00065783          	lhu	a5,0(a2)
80002790:	0407e793          	ori	a5,a5,64
80002794:	00f61023          	sh	a5,0(a2)
			break;
80002798:	fb9ff06f          	j	80002750 <extract_flags+0x20>
		switch (*sp) {
8000279c:	00000693          	li	a3,0
	} while (loop);
800027a0:	02068863          	beqz	a3,800027d0 <extract_flags+0xa0>
		switch (*sp) {
800027a4:	00054783          	lbu	a5,0(a0)
800027a8:	fe078793          	addi	a5,a5,-32
800027ac:	0ff7f593          	zext.b	a1,a5
800027b0:	01000713          	li	a4,16
800027b4:	feb764e3          	bltu	a4,a1,8000279c <extract_flags+0x6c>
800027b8:	00259793          	slli	a5,a1,0x2
800027bc:	80008737          	lui	a4,0x80008
800027c0:	5e070713          	addi	a4,a4,1504 # 800085e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800085e1>
800027c4:	00e787b3          	add	a5,a5,a4
800027c8:	0007a783          	lw	a5,0(a5)
800027cc:	00078067          	jr	a5
	if (conv->flag_zero && conv->flag_dash) {
800027d0:	00062783          	lw	a5,0(a2)
800027d4:	0447f793          	andi	a5,a5,68
800027d8:	04400713          	li	a4,68
800027dc:	00e78463          	beq	a5,a4,800027e4 <extract_flags+0xb4>
}
800027e0:	00008067          	ret
		conv->flag_zero = false;
800027e4:	00065783          	lhu	a5,0(a2)
800027e8:	fbf7f793          	andi	a5,a5,-65
800027ec:	00f61023          	sh	a5,0(a2)
800027f0:	ff1ff06f          	j	800027e0 <extract_flags+0xb0>

800027f4 <extract_width>:
800027f4:	00308013          	addi	zero,ra,3
{
800027f8:	fe010113          	addi	sp,sp,-32
800027fc:	00112e23          	sw	ra,28(sp)
80002800:	00812c23          	sw	s0,24(sp)
80002804:	00912a23          	sw	s1,20(sp)
80002808:	00050413          	mv	s0,a0
8000280c:	00b12623          	sw	a1,12(sp)
	conv->width_present = true;
80002810:	00055783          	lhu	a5,0(a0)
80002814:	0807e793          	ori	a5,a5,128
80002818:	00f51023          	sh	a5,0(a0)
	if (*sp == '*') {
8000281c:	00058493          	mv	s1,a1
80002820:	0005c703          	lbu	a4,0(a1)
80002824:	02a00793          	li	a5,42
80002828:	06f70463          	beq	a4,a5,80002890 <extract_width+0x9c>
	size_t width = extract_decimal(&sp);
8000282c:	00c10513          	addi	a0,sp,12
80002830:	eb1ff0ef          	jal	ra,800026e0 <extract_decimal>
	if (sp != wp) {
80002834:	00c12783          	lw	a5,12(sp)
80002838:	04f48063          	beq	s1,a5,80002878 <extract_width+0x84>
		conv->width_present = true;
8000283c:	00045783          	lhu	a5,0(s0)
80002840:	0807e793          	ori	a5,a5,128
80002844:	00f41023          	sh	a5,0(s0)
		conv->width_value = width;
80002848:	00a42223          	sw	a0,4(s0)
		conv->unsupported |= ((conv->width_value < 0)
8000284c:	00042783          	lw	a5,0(s0)
80002850:	0017d793          	srli	a5,a5,0x1
80002854:	0017f793          	andi	a5,a5,1
				      || (width != (size_t)conv->width_value));
80002858:	04054863          	bltz	a0,800028a8 <extract_width+0xb4>
8000285c:	00000713          	li	a4,0
		conv->unsupported |= ((conv->width_value < 0)
80002860:	00e7e7b3          	or	a5,a5,a4
80002864:	00179793          	slli	a5,a5,0x1
80002868:	00045703          	lhu	a4,0(s0)
8000286c:	ffd77713          	andi	a4,a4,-3
80002870:	00f767b3          	or	a5,a4,a5
80002874:	00f41023          	sh	a5,0(s0)
	return sp;
80002878:	00c12503          	lw	a0,12(sp)
}
8000287c:	01c12083          	lw	ra,28(sp)
80002880:	01812403          	lw	s0,24(sp)
80002884:	01412483          	lw	s1,20(sp)
80002888:	02010113          	addi	sp,sp,32
8000288c:	00008067          	ret
		conv->width_star = true;
80002890:	00055783          	lhu	a5,0(a0)
80002894:	1007e793          	ori	a5,a5,256
80002898:	00f51023          	sh	a5,0(a0)
		return ++sp;
8000289c:	00158513          	addi	a0,a1,1
800028a0:	00a12623          	sw	a0,12(sp)
800028a4:	fd9ff06f          	j	8000287c <extract_width+0x88>
				      || (width != (size_t)conv->width_value));
800028a8:	00100713          	li	a4,1
800028ac:	fb5ff06f          	j	80002860 <extract_width+0x6c>

800028b0 <extract_prec>:
800028b0:	00308013          	addi	zero,ra,3
{
800028b4:	fe010113          	addi	sp,sp,-32
800028b8:	00112e23          	sw	ra,28(sp)
800028bc:	00812c23          	sw	s0,24(sp)
800028c0:	00b12623          	sw	a1,12(sp)
	conv->prec_present = (*sp == '.');
800028c4:	0005c703          	lbu	a4,0(a1)
800028c8:	fd270713          	addi	a4,a4,-46
800028cc:	00173693          	seqz	a3,a4
800028d0:	00969693          	slli	a3,a3,0x9
800028d4:	00055783          	lhu	a5,0(a0)
800028d8:	dff7f793          	andi	a5,a5,-513
800028dc:	00d7e7b3          	or	a5,a5,a3
800028e0:	00f51023          	sh	a5,0(a0)
	if (!conv->prec_present) {
800028e4:	06071663          	bnez	a4,80002950 <extract_prec+0xa0>
800028e8:	00050413          	mv	s0,a0
	++sp;
800028ec:	00c12783          	lw	a5,12(sp)
800028f0:	00178713          	addi	a4,a5,1
800028f4:	00e12623          	sw	a4,12(sp)
	if (*sp == '*') {
800028f8:	0017c703          	lbu	a4,1(a5)
800028fc:	02a00793          	li	a5,42
80002900:	04f70c63          	beq	a4,a5,80002958 <extract_prec+0xa8>
	size_t prec = extract_decimal(&sp);
80002904:	00c10513          	addi	a0,sp,12
80002908:	dd9ff0ef          	jal	ra,800026e0 <extract_decimal>
	conv->prec_value = prec;
8000290c:	00a42423          	sw	a0,8(s0)
	conv->unsupported |= ((conv->prec_value < 0)
80002910:	00042783          	lw	a5,0(s0)
80002914:	0017d793          	srli	a5,a5,0x1
80002918:	0017f793          	andi	a5,a5,1
			      || (prec != (size_t)conv->prec_value));
8000291c:	04054c63          	bltz	a0,80002974 <extract_prec+0xc4>
80002920:	00000713          	li	a4,0
	conv->unsupported |= ((conv->prec_value < 0)
80002924:	00e7e7b3          	or	a5,a5,a4
80002928:	00179793          	slli	a5,a5,0x1
8000292c:	00045703          	lhu	a4,0(s0)
80002930:	ffd77713          	andi	a4,a4,-3
80002934:	00f767b3          	or	a5,a4,a5
80002938:	00f41023          	sh	a5,0(s0)
	return sp;
8000293c:	00c12503          	lw	a0,12(sp)
}
80002940:	01c12083          	lw	ra,28(sp)
80002944:	01812403          	lw	s0,24(sp)
80002948:	02010113          	addi	sp,sp,32
8000294c:	00008067          	ret
		return sp;
80002950:	00058513          	mv	a0,a1
80002954:	fedff06f          	j	80002940 <extract_prec+0x90>
		conv->prec_star = true;
80002958:	00055783          	lhu	a5,0(a0)
8000295c:	4007e793          	ori	a5,a5,1024
80002960:	00f51023          	sh	a5,0(a0)
		return ++sp;
80002964:	00c12503          	lw	a0,12(sp)
80002968:	00150513          	addi	a0,a0,1
8000296c:	00a12623          	sw	a0,12(sp)
80002970:	fd1ff06f          	j	80002940 <extract_prec+0x90>
			      || (prec != (size_t)conv->prec_value));
80002974:	00100713          	li	a4,1
80002978:	fadff06f          	j	80002924 <extract_prec+0x74>

8000297c <extract_length>:
8000297c:	00308013          	addi	zero,ra,3
{
80002980:	00050613          	mv	a2,a0
	switch (*sp) {
80002984:	0005c783          	lbu	a5,0(a1)
80002988:	fb478793          	addi	a5,a5,-76
8000298c:	0ff7f693          	zext.b	a3,a5
80002990:	02e00713          	li	a4,46
80002994:	16d76a63          	bltu	a4,a3,80002b08 <extract_length+0x18c>
80002998:	00269793          	slli	a5,a3,0x2
8000299c:	80008737          	lui	a4,0x80008
800029a0:	62470713          	addi	a4,a4,1572 # 80008624 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008625>
800029a4:	00e787b3          	add	a5,a5,a4
800029a8:	0007a783          	lw	a5,0(a5)
800029ac:	00078067          	jr	a5
		if (*++sp == 'h') {
800029b0:	00158513          	addi	a0,a1,1
800029b4:	0015c703          	lbu	a4,1(a1)
800029b8:	06800793          	li	a5,104
800029bc:	02f70263          	beq	a4,a5,800029e0 <extract_length+0x64>
			conv->length_mod = LENGTH_H;
800029c0:	00065783          	lhu	a5,0(a2)
800029c4:	ffff8737          	lui	a4,0xffff8
800029c8:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
800029cc:	00e7f7b3          	and	a5,a5,a4
800029d0:	00001737          	lui	a4,0x1
800029d4:	00e7e7b3          	or	a5,a5,a4
800029d8:	00f61023          	sh	a5,0(a2)
800029dc:	00008067          	ret
			conv->length_mod = LENGTH_HH;
800029e0:	00065783          	lhu	a5,0(a2)
800029e4:	ffff8737          	lui	a4,0xffff8
800029e8:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
800029ec:	00e7f7b3          	and	a5,a5,a4
800029f0:	00001737          	lui	a4,0x1
800029f4:	80070713          	addi	a4,a4,-2048 # 800 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE>
800029f8:	00e7e7b3          	or	a5,a5,a4
800029fc:	00f61023          	sh	a5,0(a2)
			++sp;
80002a00:	00258513          	addi	a0,a1,2
80002a04:	00008067          	ret
		if (*++sp == 'l') {
80002a08:	00158513          	addi	a0,a1,1
80002a0c:	0015c703          	lbu	a4,1(a1)
80002a10:	06c00793          	li	a5,108
80002a14:	02f70463          	beq	a4,a5,80002a3c <extract_length+0xc0>
			conv->length_mod = LENGTH_L;
80002a18:	00065783          	lhu	a5,0(a2)
80002a1c:	ffff8737          	lui	a4,0xffff8
80002a20:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002a24:	00e7f7b3          	and	a5,a5,a4
80002a28:	00002737          	lui	a4,0x2
80002a2c:	80070713          	addi	a4,a4,-2048 # 1800 <CONFIG_ISR_STACK_SIZE+0x800>
80002a30:	00e7e7b3          	or	a5,a5,a4
80002a34:	00f61023          	sh	a5,0(a2)
80002a38:	00008067          	ret
			conv->length_mod = LENGTH_LL;
80002a3c:	00065783          	lhu	a5,0(a2)
80002a40:	ffff8737          	lui	a4,0xffff8
80002a44:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002a48:	00e7f7b3          	and	a5,a5,a4
80002a4c:	00002737          	lui	a4,0x2
80002a50:	00e7e7b3          	or	a5,a5,a4
80002a54:	00f61023          	sh	a5,0(a2)
			++sp;
80002a58:	00258513          	addi	a0,a1,2
80002a5c:	00008067          	ret
		conv->length_mod = LENGTH_J;
80002a60:	00055783          	lhu	a5,0(a0)
80002a64:	ffff8737          	lui	a4,0xffff8
80002a68:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002a6c:	00e7f7b3          	and	a5,a5,a4
80002a70:	00003737          	lui	a4,0x3
80002a74:	80070713          	addi	a4,a4,-2048 # 2800 <CONFIG_ISR_STACK_SIZE+0x1800>
80002a78:	00e7e7b3          	or	a5,a5,a4
80002a7c:	00f51023          	sh	a5,0(a0)
		++sp;
80002a80:	00158513          	addi	a0,a1,1
		break;
80002a84:	00008067          	ret
		conv->length_mod = LENGTH_Z;
80002a88:	00055783          	lhu	a5,0(a0)
80002a8c:	ffff8737          	lui	a4,0xffff8
80002a90:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002a94:	00e7f7b3          	and	a5,a5,a4
80002a98:	00003737          	lui	a4,0x3
80002a9c:	00e7e7b3          	or	a5,a5,a4
80002aa0:	00f51023          	sh	a5,0(a0)
		++sp;
80002aa4:	00158513          	addi	a0,a1,1
		break;
80002aa8:	00008067          	ret
		conv->length_mod = LENGTH_T;
80002aac:	00055783          	lhu	a5,0(a0)
80002ab0:	ffff8737          	lui	a4,0xffff8
80002ab4:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002ab8:	00e7f7b3          	and	a5,a5,a4
80002abc:	00004737          	lui	a4,0x4
80002ac0:	80070713          	addi	a4,a4,-2048 # 3800 <__kernel_ram_size+0x800>
80002ac4:	00e7e7b3          	or	a5,a5,a4
80002ac8:	00f51023          	sh	a5,0(a0)
		++sp;
80002acc:	00158513          	addi	a0,a1,1
		break;
80002ad0:	00008067          	ret
		conv->length_mod = LENGTH_UPPER_L;
80002ad4:	00055783          	lhu	a5,0(a0)
80002ad8:	ffff8737          	lui	a4,0xffff8
80002adc:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002ae0:	00e7f7b3          	and	a5,a5,a4
80002ae4:	00004737          	lui	a4,0x4
80002ae8:	00e7e7b3          	or	a5,a5,a4
80002aec:	00f51023          	sh	a5,0(a0)
		++sp;
80002af0:	00158513          	addi	a0,a1,1
		conv->unsupported = true;
80002af4:	01079793          	slli	a5,a5,0x10
80002af8:	0107d793          	srli	a5,a5,0x10
80002afc:	0027e793          	ori	a5,a5,2
80002b00:	00f61023          	sh	a5,0(a2)
		break;
80002b04:	00008067          	ret
		conv->length_mod = LENGTH_NONE;
80002b08:	00065783          	lhu	a5,0(a2)
80002b0c:	ffff8737          	lui	a4,0xffff8
80002b10:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002b14:	00e7f7b3          	and	a5,a5,a4
80002b18:	00f61023          	sh	a5,0(a2)
		break;
80002b1c:	00058513          	mv	a0,a1
}
80002b20:	00008067          	ret

80002b24 <extract_specifier>:
80002b24:	00308013          	addi	zero,ra,3
{
80002b28:	00050713          	mv	a4,a0
	conv->specifier = *sp++;
80002b2c:	00158513          	addi	a0,a1,1
80002b30:	0005c783          	lbu	a5,0(a1)
80002b34:	00f701a3          	sb	a5,3(a4)
	switch (conv->specifier) {
80002b38:	07800693          	li	a3,120
80002b3c:	04f6ea63          	bltu	a3,a5,80002b90 <extract_specifier+0x6c>
80002b40:	06e00693          	li	a3,110
80002b44:	08d7fa63          	bgeu	a5,a3,80002bd8 <extract_specifier+0xb4>
80002b48:	06900693          	li	a3,105
80002b4c:	04f6e263          	bltu	a3,a5,80002b90 <extract_specifier+0x6c>
80002b50:	05800693          	li	a3,88
80002b54:	04d7e863          	bltu	a5,a3,80002ba4 <extract_specifier+0x80>
80002b58:	fa878613          	addi	a2,a5,-88
80002b5c:	00100693          	li	a3,1
80002b60:	00c696b3          	sll	a3,a3,a2
80002b64:	0000e637          	lui	a2,0xe
80002b68:	20060613          	addi	a2,a2,512 # e200 <__rom_region_size+0x574c>
80002b6c:	00c6f633          	and	a2,a3,a2
80002b70:	04061863          	bnez	a2,80002bc0 <extract_specifier+0x9c>
80002b74:	00001637          	lui	a2,0x1
80002b78:	80160613          	addi	a2,a2,-2047 # 801 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1>
80002b7c:	00c6f633          	and	a2,a3,a2
80002b80:	10061863          	bnez	a2,80002c90 <extract_specifier+0x16c>
80002b84:	00021637          	lui	a2,0x21
80002b88:	00c6f6b3          	and	a3,a3,a2
80002b8c:	0a069463          	bnez	a3,80002c34 <extract_specifier+0x110>
		conv->invalid = true;
80002b90:	00075783          	lhu	a5,0(a4)
80002b94:	0017e793          	ori	a5,a5,1
80002b98:	00f71023          	sh	a5,0(a4)
	bool unsupported = false;
80002b9c:	00000793          	li	a5,0
		break;
80002ba0:	0c80006f          	j	80002c68 <extract_specifier+0x144>
	switch (conv->specifier) {
80002ba4:	04100693          	li	a3,65
80002ba8:	00d78c63          	beq	a5,a3,80002bc0 <extract_specifier+0x9c>
80002bac:	fed7e2e3          	bltu	a5,a3,80002b90 <extract_specifier+0x6c>
80002bb0:	fbb78793          	addi	a5,a5,-69
80002bb4:	0ff7f793          	zext.b	a5,a5
80002bb8:	00200693          	li	a3,2
80002bbc:	fcf6eae3          	bltu	a3,a5,80002b90 <extract_specifier+0x6c>
		conv->specifier_cat = SPECIFIER_FP;
80002bc0:	00274783          	lbu	a5,2(a4)
80002bc4:	ff87f793          	andi	a5,a5,-8
80002bc8:	0047e793          	ori	a5,a5,4
80002bcc:	00f70123          	sb	a5,2(a4)
			unsupported = true;
80002bd0:	00100793          	li	a5,1
			break;
80002bd4:	0940006f          	j	80002c68 <extract_specifier+0x144>
	switch (conv->specifier) {
80002bd8:	f9278613          	addi	a2,a5,-110
80002bdc:	00100693          	li	a3,1
80002be0:	00c696b3          	sll	a3,a3,a2
80002be4:	4826f613          	andi	a2,a3,1154
80002be8:	00c035b3          	snez	a1,a2
80002bec:	0a061263          	bnez	a2,80002c90 <extract_specifier+0x16c>
80002bf0:	0246f613          	andi	a2,a3,36
80002bf4:	00c037b3          	snez	a5,a2
80002bf8:	0c061a63          	bnez	a2,80002ccc <extract_specifier+0x1a8>
80002bfc:	0016f693          	andi	a3,a3,1
80002c00:	f80688e3          	beqz	a3,80002b90 <extract_specifier+0x6c>
		conv->specifier_cat = SPECIFIER_PTR;
80002c04:	00274603          	lbu	a2,2(a4)
80002c08:	ff867613          	andi	a2,a2,-8
80002c0c:	00366613          	ori	a2,a2,3
80002c10:	00c70123          	sb	a2,2(a4)
		if (conv->length_mod == LENGTH_UPPER_L) {
80002c14:	00075603          	lhu	a2,0(a4)
80002c18:	000085b7          	lui	a1,0x8
80002c1c:	80058593          	addi	a1,a1,-2048 # 7800 <__kernel_ram_size+0x4800>
80002c20:	00b67633          	and	a2,a2,a1
80002c24:	000045b7          	lui	a1,0x4
80002c28:	04b61063          	bne	a2,a1,80002c68 <extract_specifier+0x144>
			unsupported = true;
80002c2c:	00068793          	mv	a5,a3
80002c30:	0380006f          	j	80002c68 <extract_specifier+0x144>
		conv->specifier_cat = SPECIFIER_SINT;
80002c34:	00274683          	lbu	a3,2(a4)
80002c38:	ff86f693          	andi	a3,a3,-8
80002c3c:	0016e693          	ori	a3,a3,1
80002c40:	00d70123          	sb	a3,2(a4)
		if (conv->length_mod == LENGTH_UPPER_L) {
80002c44:	00075683          	lhu	a3,0(a4)
80002c48:	00008637          	lui	a2,0x8
80002c4c:	80060613          	addi	a2,a2,-2048 # 7800 <__kernel_ram_size+0x4800>
80002c50:	00c6f6b3          	and	a3,a3,a2
80002c54:	00004637          	lui	a2,0x4
80002c58:	04c68663          	beq	a3,a2,80002ca4 <extract_specifier+0x180>
		if (conv->specifier == 'c') {
80002c5c:	06300693          	li	a3,99
80002c60:	04d78a63          	beq	a5,a3,80002cb4 <extract_specifier+0x190>
	bool unsupported = false;
80002c64:	00000793          	li	a5,0
	conv->unsupported |= unsupported;
80002c68:	00072683          	lw	a3,0(a4)
80002c6c:	0016d693          	srli	a3,a3,0x1
80002c70:	0016f693          	andi	a3,a3,1
80002c74:	00d7e7b3          	or	a5,a5,a3
80002c78:	00179793          	slli	a5,a5,0x1
80002c7c:	00075683          	lhu	a3,0(a4)
80002c80:	ffd6f693          	andi	a3,a3,-3
80002c84:	00f6e7b3          	or	a5,a3,a5
80002c88:	00f71023          	sh	a5,0(a4)
}
80002c8c:	00008067          	ret
		conv->specifier_cat = SPECIFIER_UINT;
80002c90:	00274683          	lbu	a3,2(a4)
80002c94:	ff86f693          	andi	a3,a3,-8
80002c98:	0026e693          	ori	a3,a3,2
80002c9c:	00d70123          	sb	a3,2(a4)
80002ca0:	fa5ff06f          	j	80002c44 <extract_specifier+0x120>
			conv->invalid = true;
80002ca4:	00075683          	lhu	a3,0(a4)
80002ca8:	0016e693          	ori	a3,a3,1
80002cac:	00d71023          	sh	a3,0(a4)
80002cb0:	fadff06f          	j	80002c5c <extract_specifier+0x138>
			unsupported = (conv->length_mod != LENGTH_NONE);
80002cb4:	00075783          	lhu	a5,0(a4)
80002cb8:	000086b7          	lui	a3,0x8
80002cbc:	80068693          	addi	a3,a3,-2048 # 7800 <__kernel_ram_size+0x4800>
80002cc0:	00d7f7b3          	and	a5,a5,a3
80002cc4:	00f037b3          	snez	a5,a5
80002cc8:	fa1ff06f          	j	80002c68 <extract_specifier+0x144>
		conv->specifier_cat = SPECIFIER_PTR;
80002ccc:	00274683          	lbu	a3,2(a4)
80002cd0:	ff86f693          	andi	a3,a3,-8
80002cd4:	0036e693          	ori	a3,a3,3
80002cd8:	00d70123          	sb	a3,2(a4)
		if (conv->length_mod != LENGTH_NONE) {
80002cdc:	00075683          	lhu	a3,0(a4)
80002ce0:	00008637          	lui	a2,0x8
80002ce4:	80060613          	addi	a2,a2,-2048 # 7800 <__kernel_ram_size+0x4800>
80002ce8:	00c6f6b3          	and	a3,a3,a2
80002cec:	f6069ee3          	bnez	a3,80002c68 <extract_specifier+0x144>
	bool unsupported = false;
80002cf0:	00058793          	mv	a5,a1
80002cf4:	f75ff06f          	j	80002c68 <extract_specifier+0x144>

80002cf8 <extract_conversion>:
80002cf8:	00308013          	addi	zero,ra,3
{
80002cfc:	ff010113          	addi	sp,sp,-16
80002d00:	00112623          	sw	ra,12(sp)
80002d04:	00812423          	sw	s0,8(sp)
80002d08:	00050413          	mv	s0,a0
	*conv = (struct conversion) {
80002d0c:	00052023          	sw	zero,0(a0)
80002d10:	00052223          	sw	zero,4(a0)
80002d14:	00052423          	sw	zero,8(a0)
	if (*sp == '%') {
80002d18:	0015c783          	lbu	a5,1(a1) # 4001 <__kernel_ram_size+0x1001>
80002d1c:	02500713          	li	a4,37
80002d20:	04e78863          	beq	a5,a4,80002d70 <extract_conversion+0x78>
80002d24:	00158593          	addi	a1,a1,1
	sp = extract_flags(conv, sp);
80002d28:	00040513          	mv	a0,s0
80002d2c:	a05ff0ef          	jal	ra,80002730 <extract_flags>
80002d30:	00050593          	mv	a1,a0
	sp = extract_width(conv, sp);
80002d34:	00040513          	mv	a0,s0
80002d38:	abdff0ef          	jal	ra,800027f4 <extract_width>
80002d3c:	00050593          	mv	a1,a0
	sp = extract_prec(conv, sp);
80002d40:	00040513          	mv	a0,s0
80002d44:	b6dff0ef          	jal	ra,800028b0 <extract_prec>
80002d48:	00050593          	mv	a1,a0
	sp = extract_length(conv, sp);
80002d4c:	00040513          	mv	a0,s0
80002d50:	c2dff0ef          	jal	ra,8000297c <extract_length>
80002d54:	00050593          	mv	a1,a0
	sp = extract_specifier(conv, sp);
80002d58:	00040513          	mv	a0,s0
80002d5c:	dc9ff0ef          	jal	ra,80002b24 <extract_specifier>
}
80002d60:	00c12083          	lw	ra,12(sp)
80002d64:	00812403          	lw	s0,8(sp)
80002d68:	01010113          	addi	sp,sp,16
80002d6c:	00008067          	ret
		conv->specifier = *sp++;
80002d70:	00258513          	addi	a0,a1,2
80002d74:	00f401a3          	sb	a5,3(s0)
		return sp;
80002d78:	fe9ff06f          	j	80002d60 <extract_conversion+0x68>

80002d7c <conversion_radix>:
80002d7c:	00308013          	addi	zero,ra,3
	switch (specifier) {
80002d80:	06f00793          	li	a5,111
80002d84:	02f50c63          	beq	a0,a5,80002dbc <conversion_radix+0x40>
80002d88:	00a7fe63          	bgeu	a5,a0,80002da4 <conversion_radix+0x28>
80002d8c:	07000793          	li	a5,112
80002d90:	02f50a63          	beq	a0,a5,80002dc4 <conversion_radix+0x48>
80002d94:	07800793          	li	a5,120
80002d98:	02f51a63          	bne	a0,a5,80002dcc <conversion_radix+0x50>
		return 16;
80002d9c:	01000513          	li	a0,16
80002da0:	00008067          	ret
	switch (specifier) {
80002da4:	05800793          	li	a5,88
80002da8:	00f50663          	beq	a0,a5,80002db4 <conversion_radix+0x38>
80002dac:	00a00513          	li	a0,10
80002db0:	00008067          	ret
		return 16;
80002db4:	01000513          	li	a0,16
80002db8:	00008067          	ret
		return 8;
80002dbc:	00800513          	li	a0,8
80002dc0:	00008067          	ret
		return 16;
80002dc4:	01000513          	li	a0,16
80002dc8:	00008067          	ret
	switch (specifier) {
80002dcc:	00a00513          	li	a0,10
}
80002dd0:	00008067          	ret

80002dd4 <encode_uint>:
80002dd4:	00308013          	addi	zero,ra,3
{
80002dd8:	fd010113          	addi	sp,sp,-48
80002ddc:	02112623          	sw	ra,44(sp)
80002de0:	02812423          	sw	s0,40(sp)
80002de4:	02912223          	sw	s1,36(sp)
80002de8:	03212023          	sw	s2,32(sp)
80002dec:	01312e23          	sw	s3,28(sp)
80002df0:	01412c23          	sw	s4,24(sp)
80002df4:	01512a23          	sw	s5,20(sp)
80002df8:	01612823          	sw	s6,16(sp)
80002dfc:	01712623          	sw	s7,12(sp)
80002e00:	01812423          	sw	s8,8(sp)
80002e04:	00050993          	mv	s3,a0
80002e08:	00058413          	mv	s0,a1
80002e0c:	00060c13          	mv	s8,a2
80002e10:	00068a93          	mv	s5,a3
80002e14:	00070493          	mv	s1,a4
	bool upcase = isupper((int)conv->specifier);
80002e18:	00364503          	lbu	a0,3(a2)
80002e1c:	800097b7          	lui	a5,0x80009
80002e20:	91d78793          	addi	a5,a5,-1763 # 8000891d <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000891e>
80002e24:	00f507b3          	add	a5,a0,a5
80002e28:	0007cb83          	lbu	s7,0(a5)
80002e2c:	003bfb93          	andi	s7,s7,3
	const unsigned int radix = conversion_radix(conv->specifier);
80002e30:	f4dff0ef          	jal	ra,80002d7c <conversion_radix>
80002e34:	00050913          	mv	s2,a0
	char *bp = bps + (bpe - bps);
80002e38:	0480006f          	j	80002e80 <encode_uint+0xac>
		*--bp = (lsv <= 9) ? ('0' + lsv)
80002e3c:	00100793          	li	a5,1
80002e40:	06fb8a63          	beq	s7,a5,80002eb4 <encode_uint+0xe0>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
80002e44:	0ff57793          	zext.b	a5,a0
		*--bp = (lsv <= 9) ? ('0' + lsv)
80002e48:	05778793          	addi	a5,a5,87
80002e4c:	0ff7f793          	zext.b	a5,a5
80002e50:	fff48493          	addi	s1,s1,-1
80002e54:	00f48023          	sb	a5,0(s1)
		value /= radix;
80002e58:	00090613          	mv	a2,s2
80002e5c:	00000693          	li	a3,0
80002e60:	00098513          	mv	a0,s3
80002e64:	00040593          	mv	a1,s0
80002e68:	b7cfd0ef          	jal	ra,800001e4 <__udivdi3>
	} while ((value != 0) && (bps < bp));
80002e6c:	05446e63          	bltu	s0,s4,80002ec8 <encode_uint+0xf4>
80002e70:	048a0a63          	beq	s4,s0,80002ec4 <encode_uint+0xf0>
80002e74:	049afa63          	bgeu	s5,s1,80002ec8 <encode_uint+0xf4>
		value /= radix;
80002e78:	00050993          	mv	s3,a0
80002e7c:	00058413          	mv	s0,a1
		unsigned int lsv = (unsigned int)(value % radix);
80002e80:	00090b13          	mv	s6,s2
80002e84:	00000a13          	li	s4,0
80002e88:	00090613          	mv	a2,s2
80002e8c:	00000693          	li	a3,0
80002e90:	00098513          	mv	a0,s3
80002e94:	00040593          	mv	a1,s0
80002e98:	f7cfd0ef          	jal	ra,80000614 <__umoddi3>
		*--bp = (lsv <= 9) ? ('0' + lsv)
80002e9c:	00900793          	li	a5,9
80002ea0:	f8a7eee3          	bltu	a5,a0,80002e3c <encode_uint+0x68>
80002ea4:	0ff57793          	zext.b	a5,a0
80002ea8:	03078793          	addi	a5,a5,48
80002eac:	0ff7f793          	zext.b	a5,a5
80002eb0:	fa1ff06f          	j	80002e50 <encode_uint+0x7c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
80002eb4:	0ff57793          	zext.b	a5,a0
		*--bp = (lsv <= 9) ? ('0' + lsv)
80002eb8:	03778793          	addi	a5,a5,55
80002ebc:	0ff7f793          	zext.b	a5,a5
80002ec0:	f91ff06f          	j	80002e50 <encode_uint+0x7c>
	} while ((value != 0) && (bps < bp));
80002ec4:	fb69f8e3          	bgeu	s3,s6,80002e74 <encode_uint+0xa0>
	if (conv->flag_hash) {
80002ec8:	000c5783          	lhu	a5,0(s8)
80002ecc:	0207f793          	andi	a5,a5,32
80002ed0:	00078a63          	beqz	a5,80002ee4 <encode_uint+0x110>
		if (radix == 8) {
80002ed4:	00800793          	li	a5,8
80002ed8:	04f90063          	beq	s2,a5,80002f18 <encode_uint+0x144>
		} else if (radix == 16) {
80002edc:	01000793          	li	a5,16
80002ee0:	04f90463          	beq	s2,a5,80002f28 <encode_uint+0x154>
}
80002ee4:	00048513          	mv	a0,s1
80002ee8:	02c12083          	lw	ra,44(sp)
80002eec:	02812403          	lw	s0,40(sp)
80002ef0:	02412483          	lw	s1,36(sp)
80002ef4:	02012903          	lw	s2,32(sp)
80002ef8:	01c12983          	lw	s3,28(sp)
80002efc:	01812a03          	lw	s4,24(sp)
80002f00:	01412a83          	lw	s5,20(sp)
80002f04:	01012b03          	lw	s6,16(sp)
80002f08:	00c12b83          	lw	s7,12(sp)
80002f0c:	00812c03          	lw	s8,8(sp)
80002f10:	03010113          	addi	sp,sp,48
80002f14:	00008067          	ret
			conv->altform_0 = true;
80002f18:	002c4783          	lbu	a5,2(s8)
80002f1c:	0087e793          	ori	a5,a5,8
80002f20:	00fc0123          	sb	a5,2(s8)
80002f24:	fc1ff06f          	j	80002ee4 <encode_uint+0x110>
			conv->altform_0c = true;
80002f28:	002c4783          	lbu	a5,2(s8)
80002f2c:	0107e793          	ori	a5,a5,16
80002f30:	00fc0123          	sb	a5,2(s8)
80002f34:	fb1ff06f          	j	80002ee4 <encode_uint+0x110>

80002f38 <store_count>:
80002f38:	00308013          	addi	zero,ra,3
	switch ((enum length_mod_enum)conv->length_mod) {
80002f3c:	00052783          	lw	a5,0(a0)
80002f40:	00b7d793          	srli	a5,a5,0xb
80002f44:	00f7f793          	andi	a5,a5,15
80002f48:	00700713          	li	a4,7
80002f4c:	06f76463          	bltu	a4,a5,80002fb4 <store_count+0x7c>
80002f50:	00279793          	slli	a5,a5,0x2
80002f54:	80008737          	lui	a4,0x80008
80002f58:	6e070713          	addi	a4,a4,1760 # 800086e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800086e1>
80002f5c:	00e787b3          	add	a5,a5,a4
80002f60:	0007a783          	lw	a5,0(a5)
80002f64:	00078067          	jr	a5
		*(int *)dp = count;
80002f68:	00c5a023          	sw	a2,0(a1)
		break;
80002f6c:	00008067          	ret
		*(signed char *)dp = (signed char)count;
80002f70:	00c58023          	sb	a2,0(a1)
		break;
80002f74:	00008067          	ret
		*(short *)dp = (short)count;
80002f78:	00c59023          	sh	a2,0(a1)
		break;
80002f7c:	00008067          	ret
		*(long *)dp = (long)count;
80002f80:	00c5a023          	sw	a2,0(a1)
		break;
80002f84:	00008067          	ret
		*(long long *)dp = (long long)count;
80002f88:	41f65793          	srai	a5,a2,0x1f
80002f8c:	00c5a023          	sw	a2,0(a1)
80002f90:	00f5a223          	sw	a5,4(a1)
		break;
80002f94:	00008067          	ret
		*(intmax_t *)dp = (intmax_t)count;
80002f98:	41f65793          	srai	a5,a2,0x1f
80002f9c:	00c5a023          	sw	a2,0(a1)
80002fa0:	00f5a223          	sw	a5,4(a1)
		break;
80002fa4:	00008067          	ret
		*(size_t *)dp = (size_t)count;
80002fa8:	00c5a023          	sw	a2,0(a1)
		break;
80002fac:	00008067          	ret
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
80002fb0:	00c5a023          	sw	a2,0(a1)
}
80002fb4:	00008067          	ret

80002fb8 <outs>:
80002fb8:	00308013          	addi	zero,ra,3
{
80002fbc:	fe010113          	addi	sp,sp,-32
80002fc0:	00112e23          	sw	ra,28(sp)
80002fc4:	00812c23          	sw	s0,24(sp)
80002fc8:	00912a23          	sw	s1,20(sp)
80002fcc:	01212823          	sw	s2,16(sp)
80002fd0:	01312623          	sw	s3,12(sp)
80002fd4:	01412423          	sw	s4,8(sp)
80002fd8:	00050a13          	mv	s4,a0
80002fdc:	00058993          	mv	s3,a1
80002fe0:	00068913          	mv	s2,a3
	size_t count = 0;
80002fe4:	00000413          	li	s0,0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
80002fe8:	0200006f          	j	80003008 <outs+0x50>
		int rc = out((int)*sp++, ctx);
80002fec:	00160493          	addi	s1,a2,1
80002ff0:	00098593          	mv	a1,s3
80002ff4:	00064503          	lbu	a0,0(a2)
80002ff8:	000a00e7          	jalr	s4
		if (rc < 0) {
80002ffc:	02054063          	bltz	a0,8000301c <outs+0x64>
		++count;
80003000:	00140413          	addi	s0,s0,1
		int rc = out((int)*sp++, ctx);
80003004:	00048613          	mv	a2,s1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
80003008:	ff2662e3          	bltu	a2,s2,80002fec <outs+0x34>
8000300c:	00091663          	bnez	s2,80003018 <outs+0x60>
80003010:	00064783          	lbu	a5,0(a2)
80003014:	fc079ce3          	bnez	a5,80002fec <outs+0x34>
	return (int)count;
80003018:	00040513          	mv	a0,s0
}
8000301c:	01c12083          	lw	ra,28(sp)
80003020:	01812403          	lw	s0,24(sp)
80003024:	01412483          	lw	s1,20(sp)
80003028:	01012903          	lw	s2,16(sp)
8000302c:	00c12983          	lw	s3,12(sp)
80003030:	00812a03          	lw	s4,8(sp)
80003034:	02010113          	addi	sp,sp,32
80003038:	00008067          	ret

8000303c <z_cbvprintf_impl>:
8000303c:	00308013          	addi	zero,ra,3
{
80003040:	f8010113          	addi	sp,sp,-128
80003044:	06112e23          	sw	ra,124(sp)
80003048:	06812c23          	sw	s0,120(sp)
8000304c:	06912a23          	sw	s1,116(sp)
80003050:	07212823          	sw	s2,112(sp)
80003054:	07312623          	sw	s3,108(sp)
80003058:	07412423          	sw	s4,104(sp)
8000305c:	07512223          	sw	s5,100(sp)
80003060:	07612023          	sw	s6,96(sp)
80003064:	05712e23          	sw	s7,92(sp)
80003068:	05812c23          	sw	s8,88(sp)
8000306c:	00050913          	mv	s2,a0
80003070:	00058493          	mv	s1,a1
80003074:	00060a93          	mv	s5,a2
80003078:	00d12623          	sw	a3,12(sp)
	size_t count = 0;
8000307c:	00000413          	li	s0,0
	while (*fp != 0) {
80003080:	000ac503          	lbu	a0,0(s5)
80003084:	78050063          	beqz	a0,80003804 <z_cbvprintf_impl+0x7c8>
		if (*fp != '%') {
80003088:	02500793          	li	a5,37
8000308c:	00f50e63          	beq	a0,a5,800030a8 <z_cbvprintf_impl+0x6c>
			OUTC(*fp++);
80003090:	001a8a93          	addi	s5,s5,1
80003094:	00048593          	mv	a1,s1
80003098:	000900e7          	jalr	s2
8000309c:	76054663          	bltz	a0,80003808 <z_cbvprintf_impl+0x7cc>
800030a0:	00140413          	addi	s0,s0,1
			continue;
800030a4:	fddff06f          	j	80003080 <z_cbvprintf_impl+0x44>
		} state = {
800030a8:	00012823          	sw	zero,16(sp)
800030ac:	00012a23          	sw	zero,20(sp)
800030b0:	00012c23          	sw	zero,24(sp)
800030b4:	00012e23          	sw	zero,28(sp)
800030b8:	02012023          	sw	zero,32(sp)
800030bc:	02012223          	sw	zero,36(sp)
800030c0:	02012423          	sw	zero,40(sp)
800030c4:	02012623          	sw	zero,44(sp)
		fp = extract_conversion(conv, sp);
800030c8:	000a8593          	mv	a1,s5
800030cc:	02010513          	addi	a0,sp,32
800030d0:	c29ff0ef          	jal	ra,80002cf8 <extract_conversion>
800030d4:	00050993          	mv	s3,a0
		if (conv->width_star) {
800030d8:	02015783          	lhu	a5,32(sp)
800030dc:	1007f713          	andi	a4,a5,256
800030e0:	0c070263          	beqz	a4,800031a4 <z_cbvprintf_impl+0x168>
			width = va_arg(ap, int);
800030e4:	00c12783          	lw	a5,12(sp)
800030e8:	00478713          	addi	a4,a5,4
800030ec:	00e12623          	sw	a4,12(sp)
800030f0:	0007aa03          	lw	s4,0(a5)
			if (width < 0) {
800030f4:	080a4e63          	bltz	s4,80003190 <z_cbvprintf_impl+0x154>
		if (conv->prec_star) {
800030f8:	02015783          	lhu	a5,32(sp)
800030fc:	4007f713          	andi	a4,a5,1024
80003100:	0c070863          	beqz	a4,800031d0 <z_cbvprintf_impl+0x194>
			int arg = va_arg(ap, int);
80003104:	00c12783          	lw	a5,12(sp)
80003108:	00478713          	addi	a4,a5,4
8000310c:	00e12623          	sw	a4,12(sp)
80003110:	0007ab03          	lw	s6,0(a5)
			if (arg < 0) {
80003114:	0a0b4463          	bltz	s6,800031bc <z_cbvprintf_impl+0x180>
		conv->pad0_value = 0;
80003118:	02012223          	sw	zero,36(sp)
		conv->pad0_pre_exp = 0;
8000311c:	02012423          	sw	zero,40(sp)
			= (enum specifier_cat_enum)conv->specifier_cat;
80003120:	02012783          	lw	a5,32(sp)
80003124:	0107d713          	srli	a4,a5,0x10
80003128:	00777713          	andi	a4,a4,7
			= (enum length_mod_enum)conv->length_mod;
8000312c:	00b7d793          	srli	a5,a5,0xb
80003130:	00f7f793          	andi	a5,a5,15
		enum length_mod_enum length_mod
80003134:	00078693          	mv	a3,a5
		if (specifier_cat == SPECIFIER_SINT) {
80003138:	00100613          	li	a2,1
8000313c:	0ac70663          	beq	a4,a2,800031e8 <z_cbvprintf_impl+0x1ac>
		} else if (specifier_cat == SPECIFIER_UINT) {
80003140:	00200613          	li	a2,2
80003144:	1ec70063          	beq	a4,a2,80003324 <z_cbvprintf_impl+0x2e8>
		} else if (specifier_cat == SPECIFIER_FP) {
80003148:	00400793          	li	a5,4
8000314c:	2cf70a63          	beq	a4,a5,80003420 <z_cbvprintf_impl+0x3e4>
		} else if (specifier_cat == SPECIFIER_PTR) {
80003150:	00300793          	li	a5,3
80003154:	32f70863          	beq	a4,a5,80003484 <z_cbvprintf_impl+0x448>
		if (conv->invalid || conv->unsupported) {
80003158:	02012783          	lw	a5,32(sp)
8000315c:	0037f793          	andi	a5,a5,3
80003160:	32079e63          	bnez	a5,8000349c <z_cbvprintf_impl+0x460>
		switch (conv->specifier) {
80003164:	02314783          	lbu	a5,35(sp)
80003168:	fdb78793          	addi	a5,a5,-37
8000316c:	0ff7f693          	zext.b	a3,a5
80003170:	05300713          	li	a4,83
80003174:	4cd76a63          	bltu	a4,a3,80003648 <z_cbvprintf_impl+0x60c>
80003178:	00269793          	slli	a5,a3,0x2
8000317c:	80008737          	lui	a4,0x80008
80003180:	70870713          	addi	a4,a4,1800 # 80008708 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008709>
80003184:	00e787b3          	add	a5,a5,a4
80003188:	0007a783          	lw	a5,0(a5)
8000318c:	00078067          	jr	a5
				conv->flag_dash = true;
80003190:	02015783          	lhu	a5,32(sp)
80003194:	0047e793          	ori	a5,a5,4
80003198:	02f11023          	sh	a5,32(sp)
				width = -width;
8000319c:	41400a33          	neg	s4,s4
800031a0:	f59ff06f          	j	800030f8 <z_cbvprintf_impl+0xbc>
		} else if (conv->width_present) {
800031a4:	0807f793          	andi	a5,a5,128
800031a8:	00078663          	beqz	a5,800031b4 <z_cbvprintf_impl+0x178>
			width = conv->width_value;
800031ac:	02412a03          	lw	s4,36(sp)
800031b0:	f49ff06f          	j	800030f8 <z_cbvprintf_impl+0xbc>
		int width = -1;
800031b4:	fff00a13          	li	s4,-1
800031b8:	f41ff06f          	j	800030f8 <z_cbvprintf_impl+0xbc>
				conv->prec_present = false;
800031bc:	02015783          	lhu	a5,32(sp)
800031c0:	dff7f793          	andi	a5,a5,-513
800031c4:	02f11023          	sh	a5,32(sp)
		int precision = -1;
800031c8:	fff00b13          	li	s6,-1
800031cc:	f4dff06f          	j	80003118 <z_cbvprintf_impl+0xdc>
		} else if (conv->prec_present) {
800031d0:	2007f793          	andi	a5,a5,512
800031d4:	00078663          	beqz	a5,800031e0 <z_cbvprintf_impl+0x1a4>
			precision = conv->prec_value;
800031d8:	02812b03          	lw	s6,40(sp)
800031dc:	f3dff06f          	j	80003118 <z_cbvprintf_impl+0xdc>
		int precision = -1;
800031e0:	fff00b13          	li	s6,-1
800031e4:	f35ff06f          	j	80003118 <z_cbvprintf_impl+0xdc>
			switch (length_mod) {
800031e8:	00500713          	li	a4,5
800031ec:	0ee78e63          	beq	a5,a4,800032e8 <z_cbvprintf_impl+0x2ac>
800031f0:	02f76e63          	bltu	a4,a5,8000322c <z_cbvprintf_impl+0x1f0>
800031f4:	00300713          	li	a4,3
800031f8:	0ae78263          	beq	a5,a4,8000329c <z_cbvprintf_impl+0x260>
800031fc:	00400713          	li	a4,4
80003200:	04e79e63          	bne	a5,a4,8000325c <z_cbvprintf_impl+0x220>
					(sint_value_type)va_arg(ap, long long);
80003204:	00c12783          	lw	a5,12(sp)
80003208:	00778793          	addi	a5,a5,7
8000320c:	ff87f793          	andi	a5,a5,-8
80003210:	00878713          	addi	a4,a5,8
80003214:	00e12623          	sw	a4,12(sp)
80003218:	0007a703          	lw	a4,0(a5)
8000321c:	0047a783          	lw	a5,4(a5)
				value->sint =
80003220:	00e12823          	sw	a4,16(sp)
80003224:	00f12a23          	sw	a5,20(sp)
				break;
80003228:	0500006f          	j	80003278 <z_cbvprintf_impl+0x23c>
			switch (length_mod) {
8000322c:	00a78793          	addi	a5,a5,10
80003230:	00f7f793          	andi	a5,a5,15
80003234:	00100713          	li	a4,1
80003238:	02f76263          	bltu	a4,a5,8000325c <z_cbvprintf_impl+0x220>
					(sint_value_type)va_arg(ap, ptrdiff_t);
8000323c:	00c12783          	lw	a5,12(sp)
80003240:	00478713          	addi	a4,a5,4
80003244:	00e12623          	sw	a4,12(sp)
80003248:	0007a783          	lw	a5,0(a5)
8000324c:	41f7d713          	srai	a4,a5,0x1f
				value->sint =
80003250:	00f12823          	sw	a5,16(sp)
80003254:	00e12a23          	sw	a4,20(sp)
				break;
80003258:	0200006f          	j	80003278 <z_cbvprintf_impl+0x23c>
				value->sint = va_arg(ap, int);
8000325c:	00c12783          	lw	a5,12(sp)
80003260:	00478713          	addi	a4,a5,4
80003264:	00e12623          	sw	a4,12(sp)
80003268:	0007a783          	lw	a5,0(a5)
8000326c:	41f7d713          	srai	a4,a5,0x1f
80003270:	00f12823          	sw	a5,16(sp)
80003274:	00e12a23          	sw	a4,20(sp)
			if (length_mod == LENGTH_HH) {
80003278:	00100793          	li	a5,1
8000327c:	08f68a63          	beq	a3,a5,80003310 <z_cbvprintf_impl+0x2d4>
			} else if (length_mod == LENGTH_H) {
80003280:	00200793          	li	a5,2
80003284:	ecf69ae3          	bne	a3,a5,80003158 <z_cbvprintf_impl+0x11c>
				value->sint = (short)value->sint;
80003288:	01011783          	lh	a5,16(sp)
8000328c:	41f7d713          	srai	a4,a5,0x1f
80003290:	00f12823          	sw	a5,16(sp)
80003294:	00e12a23          	sw	a4,20(sp)
80003298:	ec1ff06f          	j	80003158 <z_cbvprintf_impl+0x11c>
				    && (conv->specifier == 'c')) {
8000329c:	02314703          	lbu	a4,35(sp)
				if (WCHAR_IS_SIGNED
800032a0:	06300793          	li	a5,99
800032a4:	02f70263          	beq	a4,a5,800032c8 <z_cbvprintf_impl+0x28c>
					value->sint = va_arg(ap, long);
800032a8:	00c12783          	lw	a5,12(sp)
800032ac:	00478713          	addi	a4,a5,4
800032b0:	00e12623          	sw	a4,12(sp)
800032b4:	0007a783          	lw	a5,0(a5)
800032b8:	41f7d713          	srai	a4,a5,0x1f
800032bc:	00f12823          	sw	a5,16(sp)
800032c0:	00e12a23          	sw	a4,20(sp)
800032c4:	fb5ff06f          	j	80003278 <z_cbvprintf_impl+0x23c>
					value->sint = (wchar_t)va_arg(ap,
800032c8:	00c12783          	lw	a5,12(sp)
800032cc:	00478713          	addi	a4,a5,4
800032d0:	00e12623          	sw	a4,12(sp)
800032d4:	0007a783          	lw	a5,0(a5)
800032d8:	41f7d713          	srai	a4,a5,0x1f
800032dc:	00f12823          	sw	a5,16(sp)
800032e0:	00e12a23          	sw	a4,20(sp)
800032e4:	f95ff06f          	j	80003278 <z_cbvprintf_impl+0x23c>
					(sint_value_type)va_arg(ap, intmax_t);
800032e8:	00c12783          	lw	a5,12(sp)
800032ec:	00778793          	addi	a5,a5,7
800032f0:	ff87f793          	andi	a5,a5,-8
800032f4:	00878713          	addi	a4,a5,8
800032f8:	00e12623          	sw	a4,12(sp)
800032fc:	0007a703          	lw	a4,0(a5)
80003300:	0047a783          	lw	a5,4(a5)
				value->sint =
80003304:	00e12823          	sw	a4,16(sp)
80003308:	00f12a23          	sw	a5,20(sp)
				break;
8000330c:	f6dff06f          	j	80003278 <z_cbvprintf_impl+0x23c>
				value->sint = (signed char)value->sint;
80003310:	01010783          	lb	a5,16(sp)
80003314:	41f7d713          	srai	a4,a5,0x1f
80003318:	00f12823          	sw	a5,16(sp)
8000331c:	00e12a23          	sw	a4,20(sp)
80003320:	e39ff06f          	j	80003158 <z_cbvprintf_impl+0x11c>
			switch (length_mod) {
80003324:	00500713          	li	a4,5
80003328:	0ce78063          	beq	a5,a4,800033e8 <z_cbvprintf_impl+0x3ac>
8000332c:	02f76e63          	bltu	a4,a5,80003368 <z_cbvprintf_impl+0x32c>
80003330:	00300713          	li	a4,3
80003334:	08e78c63          	beq	a5,a4,800033cc <z_cbvprintf_impl+0x390>
80003338:	00400713          	li	a4,4
8000333c:	04e79c63          	bne	a5,a4,80003394 <z_cbvprintf_impl+0x358>
					(uint_value_type)va_arg(ap,
80003340:	00c12783          	lw	a5,12(sp)
80003344:	00778793          	addi	a5,a5,7
80003348:	ff87f793          	andi	a5,a5,-8
8000334c:	00878713          	addi	a4,a5,8
80003350:	00e12623          	sw	a4,12(sp)
80003354:	0007a703          	lw	a4,0(a5)
80003358:	0047a783          	lw	a5,4(a5)
				value->uint =
8000335c:	00e12823          	sw	a4,16(sp)
80003360:	00f12a23          	sw	a5,20(sp)
				break;
80003364:	0480006f          	j	800033ac <z_cbvprintf_impl+0x370>
			switch (length_mod) {
80003368:	00a78793          	addi	a5,a5,10
8000336c:	00f7f793          	andi	a5,a5,15
80003370:	00100713          	li	a4,1
80003374:	02f76063          	bltu	a4,a5,80003394 <z_cbvprintf_impl+0x358>
					(uint_value_type)va_arg(ap, size_t);
80003378:	00c12783          	lw	a5,12(sp)
8000337c:	00478713          	addi	a4,a5,4
80003380:	00e12623          	sw	a4,12(sp)
80003384:	0007a783          	lw	a5,0(a5)
				value->uint =
80003388:	00f12823          	sw	a5,16(sp)
8000338c:	00012a23          	sw	zero,20(sp)
				break;
80003390:	01c0006f          	j	800033ac <z_cbvprintf_impl+0x370>
				value->uint = va_arg(ap, unsigned int);
80003394:	00c12783          	lw	a5,12(sp)
80003398:	00478713          	addi	a4,a5,4
8000339c:	00e12623          	sw	a4,12(sp)
800033a0:	0007a783          	lw	a5,0(a5)
800033a4:	00f12823          	sw	a5,16(sp)
800033a8:	00012a23          	sw	zero,20(sp)
			if (length_mod == LENGTH_HH) {
800033ac:	00100793          	li	a5,1
800033b0:	06f68063          	beq	a3,a5,80003410 <z_cbvprintf_impl+0x3d4>
			} else if (length_mod == LENGTH_H) {
800033b4:	00200793          	li	a5,2
800033b8:	daf690e3          	bne	a3,a5,80003158 <z_cbvprintf_impl+0x11c>
				value->uint = (unsigned short)value->uint;
800033bc:	01015783          	lhu	a5,16(sp)
800033c0:	00f12823          	sw	a5,16(sp)
800033c4:	00012a23          	sw	zero,20(sp)
800033c8:	d91ff06f          	j	80003158 <z_cbvprintf_impl+0x11c>
					value->uint = va_arg(ap, unsigned long);
800033cc:	00c12783          	lw	a5,12(sp)
800033d0:	00478713          	addi	a4,a5,4
800033d4:	00e12623          	sw	a4,12(sp)
800033d8:	0007a783          	lw	a5,0(a5)
800033dc:	00f12823          	sw	a5,16(sp)
800033e0:	00012a23          	sw	zero,20(sp)
				break;
800033e4:	fc9ff06f          	j	800033ac <z_cbvprintf_impl+0x370>
					(uint_value_type)va_arg(ap,
800033e8:	00c12783          	lw	a5,12(sp)
800033ec:	00778793          	addi	a5,a5,7
800033f0:	ff87f793          	andi	a5,a5,-8
800033f4:	00878713          	addi	a4,a5,8
800033f8:	00e12623          	sw	a4,12(sp)
800033fc:	0007a703          	lw	a4,0(a5)
80003400:	0047a783          	lw	a5,4(a5)
				value->uint =
80003404:	00e12823          	sw	a4,16(sp)
80003408:	00f12a23          	sw	a5,20(sp)
				break;
8000340c:	fa1ff06f          	j	800033ac <z_cbvprintf_impl+0x370>
				value->uint = (unsigned char)value->uint;
80003410:	01014783          	lbu	a5,16(sp)
80003414:	00f12823          	sw	a5,16(sp)
80003418:	00012a23          	sw	zero,20(sp)
8000341c:	d3dff06f          	j	80003158 <z_cbvprintf_impl+0x11c>
			if (length_mod == LENGTH_UPPER_L) {
80003420:	00800793          	li	a5,8
80003424:	02f68663          	beq	a3,a5,80003450 <z_cbvprintf_impl+0x414>
				value->dbl = va_arg(ap, double);
80003428:	00c12783          	lw	a5,12(sp)
8000342c:	00778793          	addi	a5,a5,7
80003430:	ff87f793          	andi	a5,a5,-8
80003434:	00878713          	addi	a4,a5,8
80003438:	00e12623          	sw	a4,12(sp)
8000343c:	0007a703          	lw	a4,0(a5)
80003440:	0047a783          	lw	a5,4(a5)
80003444:	00e12823          	sw	a4,16(sp)
80003448:	00f12a23          	sw	a5,20(sp)
8000344c:	d0dff06f          	j	80003158 <z_cbvprintf_impl+0x11c>
				value->ldbl = va_arg(ap, long double);
80003450:	00c12783          	lw	a5,12(sp)
80003454:	00478713          	addi	a4,a5,4
80003458:	00e12623          	sw	a4,12(sp)
8000345c:	0007a783          	lw	a5,0(a5)
80003460:	0007a603          	lw	a2,0(a5)
80003464:	0047a683          	lw	a3,4(a5)
80003468:	0087a703          	lw	a4,8(a5)
8000346c:	00c7a783          	lw	a5,12(a5)
80003470:	00c12823          	sw	a2,16(sp)
80003474:	00d12a23          	sw	a3,20(sp)
80003478:	00e12c23          	sw	a4,24(sp)
8000347c:	00f12e23          	sw	a5,28(sp)
80003480:	cd9ff06f          	j	80003158 <z_cbvprintf_impl+0x11c>
			value->ptr = va_arg(ap, void *);
80003484:	00c12783          	lw	a5,12(sp)
80003488:	00478713          	addi	a4,a5,4
8000348c:	00e12623          	sw	a4,12(sp)
80003490:	0007a783          	lw	a5,0(a5)
80003494:	00f12823          	sw	a5,16(sp)
80003498:	cc1ff06f          	j	80003158 <z_cbvprintf_impl+0x11c>
			OUTS(sp, fp);
8000349c:	00098693          	mv	a3,s3
800034a0:	000a8613          	mv	a2,s5
800034a4:	00048593          	mv	a1,s1
800034a8:	00090513          	mv	a0,s2
800034ac:	b0dff0ef          	jal	ra,80002fb8 <outs>
800034b0:	34054c63          	bltz	a0,80003808 <z_cbvprintf_impl+0x7cc>
800034b4:	00a40433          	add	s0,s0,a0
		fp = extract_conversion(conv, sp);
800034b8:	00098a93          	mv	s5,s3
			continue;
800034bc:	bc5ff06f          	j	80003080 <z_cbvprintf_impl+0x44>
			OUTC('%');
800034c0:	00048593          	mv	a1,s1
800034c4:	02500513          	li	a0,37
800034c8:	000900e7          	jalr	s2
800034cc:	32054e63          	bltz	a0,80003808 <z_cbvprintf_impl+0x7cc>
800034d0:	00140413          	addi	s0,s0,1
		char sign = 0;
800034d4:	00000b93          	li	s7,0
		const char *bpe = buf + sizeof(buf);
800034d8:	04e10b13          	addi	s6,sp,78
		const char *bps = NULL;
800034dc:	00000a93          	li	s5,0
			break;
800034e0:	1740006f          	j	80003654 <z_cbvprintf_impl+0x618>
			bps = (const char *)value->ptr;
800034e4:	01012a83          	lw	s5,16(sp)
			if (precision >= 0) {
800034e8:	000b4e63          	bltz	s6,80003504 <z_cbvprintf_impl+0x4c8>
				len = strnlen(bps, precision);
800034ec:	000b0593          	mv	a1,s6
800034f0:	000a8513          	mv	a0,s5
800034f4:	554030ef          	jal	ra,80006a48 <strnlen>
			bpe = bps + len;
800034f8:	00aa8b33          	add	s6,s5,a0
		char sign = 0;
800034fc:	00000b93          	li	s7,0
			break;
80003500:	1540006f          	j	80003654 <z_cbvprintf_impl+0x618>
				len = strlen(bps);
80003504:	000a8513          	mv	a0,s5
80003508:	444030ef          	jal	ra,8000694c <strlen>
8000350c:	fedff06f          	j	800034f8 <z_cbvprintf_impl+0x4bc>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
80003510:	01012783          	lw	a5,16(sp)
80003514:	02f10c23          	sb	a5,56(sp)
		char sign = 0;
80003518:	00000b93          	li	s7,0
			bpe = buf + 1;
8000351c:	03910b13          	addi	s6,sp,57
			bps = buf;
80003520:	03810a93          	addi	s5,sp,56
			break;
80003524:	1300006f          	j	80003654 <z_cbvprintf_impl+0x618>
			if (conv->flag_plus) {
80003528:	02015783          	lhu	a5,32(sp)
8000352c:	0087f713          	andi	a4,a5,8
80003530:	00071a63          	bnez	a4,80003544 <z_cbvprintf_impl+0x508>
			} else if (conv->flag_space) {
80003534:	0107f793          	andi	a5,a5,16
80003538:	02079463          	bnez	a5,80003560 <z_cbvprintf_impl+0x524>
		char sign = 0;
8000353c:	00000b93          	li	s7,0
80003540:	0080006f          	j	80003548 <z_cbvprintf_impl+0x50c>
				sign = '+';
80003544:	02b00b93          	li	s7,43
			sint = value->sint;
80003548:	01012703          	lw	a4,16(sp)
8000354c:	01412783          	lw	a5,20(sp)
			if (sint < 0) {
80003550:	0007cc63          	bltz	a5,80003568 <z_cbvprintf_impl+0x52c>
				value->uint = (uint_value_type)sint;
80003554:	00e12823          	sw	a4,16(sp)
80003558:	00f12a23          	sw	a5,20(sp)
8000355c:	0300006f          	j	8000358c <z_cbvprintf_impl+0x550>
				sign = ' ';
80003560:	02000b93          	li	s7,32
80003564:	fe5ff06f          	j	80003548 <z_cbvprintf_impl+0x50c>
				value->uint = (uint_value_type)-sint;
80003568:	40e006b3          	neg	a3,a4
8000356c:	00e03733          	snez	a4,a4
80003570:	40f007b3          	neg	a5,a5
80003574:	40e787b3          	sub	a5,a5,a4
80003578:	00d12823          	sw	a3,16(sp)
8000357c:	00f12a23          	sw	a5,20(sp)
				sign = '-';
80003580:	02d00b93          	li	s7,45
80003584:	0080006f          	j	8000358c <z_cbvprintf_impl+0x550>
		switch (conv->specifier) {
80003588:	00000b93          	li	s7,0
			bps = encode_uint(value->uint, conv, buf, bpe);
8000358c:	04e10713          	addi	a4,sp,78
80003590:	03810693          	addi	a3,sp,56
80003594:	02010613          	addi	a2,sp,32
80003598:	01012503          	lw	a0,16(sp)
8000359c:	01412583          	lw	a1,20(sp)
800035a0:	835ff0ef          	jal	ra,80002dd4 <encode_uint>
800035a4:	00050a93          	mv	s5,a0
			if (precision >= 0) {
800035a8:	120b4663          	bltz	s6,800036d4 <z_cbvprintf_impl+0x698>
				size_t len = bpe - bps;
800035ac:	04e10793          	addi	a5,sp,78
800035b0:	415787b3          	sub	a5,a5,s5
				conv->flag_zero = false;
800035b4:	02015703          	lhu	a4,32(sp)
800035b8:	fbf77713          	andi	a4,a4,-65
800035bc:	02e11023          	sh	a4,32(sp)
				if (len < (size_t)precision) {
800035c0:	1167fe63          	bgeu	a5,s6,800036dc <z_cbvprintf_impl+0x6a0>
					conv->pad0_value = precision - (int)len;
800035c4:	40fb07b3          	sub	a5,s6,a5
800035c8:	02f12223          	sw	a5,36(sp)
		const char *bpe = buf + sizeof(buf);
800035cc:	04e10b13          	addi	s6,sp,78
800035d0:	0840006f          	j	80003654 <z_cbvprintf_impl+0x618>
			if (value->ptr != NULL) {
800035d4:	01012503          	lw	a0,16(sp)
800035d8:	00051e63          	bnez	a0,800035f4 <z_cbvprintf_impl+0x5b8>
		char sign = 0;
800035dc:	00000b93          	li	s7,0
			bpe = bps + 5;
800035e0:	80008b37          	lui	s6,0x80008
800035e4:	705b0b13          	addi	s6,s6,1797 # 80008705 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008706>
			bps = "(nil)";
800035e8:	80008ab7          	lui	s5,0x80008
800035ec:	700a8a93          	addi	s5,s5,1792 # 80008700 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008701>
800035f0:	0640006f          	j	80003654 <z_cbvprintf_impl+0x618>
				bps = encode_uint((uintptr_t)value->ptr, conv,
800035f4:	04e10713          	addi	a4,sp,78
800035f8:	03810693          	addi	a3,sp,56
800035fc:	02010613          	addi	a2,sp,32
80003600:	00000593          	li	a1,0
80003604:	fd0ff0ef          	jal	ra,80002dd4 <encode_uint>
80003608:	00050a93          	mv	s5,a0
				conv->altform_0c = true;
8000360c:	02214783          	lbu	a5,34(sp)
80003610:	0107e793          	ori	a5,a5,16
80003614:	02f10123          	sb	a5,34(sp)
				conv->specifier = 'x';
80003618:	07800793          	li	a5,120
8000361c:	02f101a3          	sb	a5,35(sp)
		char sign = 0;
80003620:	00000b93          	li	s7,0
				goto prec_int_pad0;
80003624:	f85ff06f          	j	800035a8 <z_cbvprintf_impl+0x56c>
				store_count(conv, value->ptr, count);
80003628:	00040613          	mv	a2,s0
8000362c:	01012583          	lw	a1,16(sp)
80003630:	02010513          	addi	a0,sp,32
80003634:	905ff0ef          	jal	ra,80002f38 <store_count>
		char sign = 0;
80003638:	00000b93          	li	s7,0
		const char *bpe = buf + sizeof(buf);
8000363c:	04e10b13          	addi	s6,sp,78
		const char *bps = NULL;
80003640:	00000a93          	li	s5,0
			break;
80003644:	0100006f          	j	80003654 <z_cbvprintf_impl+0x618>
		switch (conv->specifier) {
80003648:	00000b93          	li	s7,0
8000364c:	04e10b13          	addi	s6,sp,78
80003650:	00000a93          	li	s5,0
		if (bps == NULL) {
80003654:	1a0a8463          	beqz	s5,800037fc <z_cbvprintf_impl+0x7c0>
		size_t nj_len = (bpe - bps);
80003658:	415b06b3          	sub	a3,s6,s5
		if (sign != 0) {
8000365c:	000b8463          	beqz	s7,80003664 <z_cbvprintf_impl+0x628>
			nj_len += 1U;
80003660:	00168693          	addi	a3,a3,1
		if (conv->altform_0c) {
80003664:	02214783          	lbu	a5,34(sp)
80003668:	0107f713          	andi	a4,a5,16
8000366c:	06070c63          	beqz	a4,800036e4 <z_cbvprintf_impl+0x6a8>
			nj_len += 2U;
80003670:	00268693          	addi	a3,a3,2
		nj_len += conv->pad0_value;
80003674:	02412703          	lw	a4,36(sp)
80003678:	00d70733          	add	a4,a4,a3
		if (conv->pad_fp) {
8000367c:	0407f793          	andi	a5,a5,64
80003680:	00078663          	beqz	a5,8000368c <z_cbvprintf_impl+0x650>
			nj_len += conv->pad0_pre_exp;
80003684:	02812783          	lw	a5,40(sp)
80003688:	00f70733          	add	a4,a4,a5
		if (width > 0) {
8000368c:	09405e63          	blez	s4,80003728 <z_cbvprintf_impl+0x6ec>
			width -= (int)nj_len;
80003690:	40ea0a33          	sub	s4,s4,a4
			if (!conv->flag_dash) {
80003694:	02012783          	lw	a5,32(sp)
80003698:	0027d793          	srli	a5,a5,0x2
8000369c:	0017f793          	andi	a5,a5,1
800036a0:	08079463          	bnez	a5,80003728 <z_cbvprintf_impl+0x6ec>
				if (conv->flag_zero) {
800036a4:	02015783          	lhu	a5,32(sp)
800036a8:	0407f793          	andi	a5,a5,64
800036ac:	04078463          	beqz	a5,800036f4 <z_cbvprintf_impl+0x6b8>
					if (sign != 0) {
800036b0:	040b8663          	beqz	s7,800036fc <z_cbvprintf_impl+0x6c0>
						OUTC(sign);
800036b4:	00048593          	mv	a1,s1
800036b8:	000b8513          	mv	a0,s7
800036bc:	000900e7          	jalr	s2
800036c0:	14054463          	bltz	a0,80003808 <z_cbvprintf_impl+0x7cc>
800036c4:	00140413          	addi	s0,s0,1
					pad = '0';
800036c8:	03000c13          	li	s8,48
						sign = 0;
800036cc:	00000b93          	li	s7,0
800036d0:	0300006f          	j	80003700 <z_cbvprintf_impl+0x6c4>
		const char *bpe = buf + sizeof(buf);
800036d4:	04e10b13          	addi	s6,sp,78
800036d8:	f7dff06f          	j	80003654 <z_cbvprintf_impl+0x618>
800036dc:	04e10b13          	addi	s6,sp,78
800036e0:	f75ff06f          	j	80003654 <z_cbvprintf_impl+0x618>
		} else if (conv->altform_0) {
800036e4:	0087f713          	andi	a4,a5,8
800036e8:	f80706e3          	beqz	a4,80003674 <z_cbvprintf_impl+0x638>
			nj_len += 1U;
800036ec:	00168693          	addi	a3,a3,1
800036f0:	f85ff06f          	j	80003674 <z_cbvprintf_impl+0x638>
				char pad = ' ';
800036f4:	02000c13          	li	s8,32
800036f8:	0080006f          	j	80003700 <z_cbvprintf_impl+0x6c4>
					pad = '0';
800036fc:	03000c13          	li	s8,48
80003700:	000a0793          	mv	a5,s4
				while (width-- > 0) {
80003704:	fff78a13          	addi	s4,a5,-1
80003708:	02f05063          	blez	a5,80003728 <z_cbvprintf_impl+0x6ec>
					OUTC(pad);
8000370c:	00048593          	mv	a1,s1
80003710:	000c0513          	mv	a0,s8
80003714:	000900e7          	jalr	s2
80003718:	0e054863          	bltz	a0,80003808 <z_cbvprintf_impl+0x7cc>
8000371c:	00140413          	addi	s0,s0,1
				while (width-- > 0) {
80003720:	000a0793          	mv	a5,s4
80003724:	fe1ff06f          	j	80003704 <z_cbvprintf_impl+0x6c8>
		if (sign != 0) {
80003728:	000b8c63          	beqz	s7,80003740 <z_cbvprintf_impl+0x704>
			OUTC(sign);
8000372c:	00048593          	mv	a1,s1
80003730:	000b8513          	mv	a0,s7
80003734:	000900e7          	jalr	s2
80003738:	0c054863          	bltz	a0,80003808 <z_cbvprintf_impl+0x7cc>
8000373c:	00140413          	addi	s0,s0,1
			if (conv->altform_0c | conv->altform_0) {
80003740:	02012783          	lw	a5,32(sp)
80003744:	0147d713          	srli	a4,a5,0x14
80003748:	00177713          	andi	a4,a4,1
8000374c:	0137d793          	srli	a5,a5,0x13
80003750:	0017f793          	andi	a5,a5,1
80003754:	00f767b3          	or	a5,a4,a5
80003758:	00078c63          	beqz	a5,80003770 <z_cbvprintf_impl+0x734>
				OUTC('0');
8000375c:	00048593          	mv	a1,s1
80003760:	03000513          	li	a0,48
80003764:	000900e7          	jalr	s2
80003768:	0a054063          	bltz	a0,80003808 <z_cbvprintf_impl+0x7cc>
8000376c:	00140413          	addi	s0,s0,1
			if (conv->altform_0c) {
80003770:	02214783          	lbu	a5,34(sp)
80003774:	0107f793          	andi	a5,a5,16
80003778:	00078c63          	beqz	a5,80003790 <z_cbvprintf_impl+0x754>
				OUTC(conv->specifier);
8000377c:	00048593          	mv	a1,s1
80003780:	02314503          	lbu	a0,35(sp)
80003784:	000900e7          	jalr	s2
80003788:	08054063          	bltz	a0,80003808 <z_cbvprintf_impl+0x7cc>
8000378c:	00140413          	addi	s0,s0,1
			pad_len = conv->pad0_value;
80003790:	02412783          	lw	a5,36(sp)
			while (pad_len-- > 0) {
80003794:	fff78b93          	addi	s7,a5,-1
80003798:	02f05063          	blez	a5,800037b8 <z_cbvprintf_impl+0x77c>
				OUTC('0');
8000379c:	00048593          	mv	a1,s1
800037a0:	03000513          	li	a0,48
800037a4:	000900e7          	jalr	s2
800037a8:	06054063          	bltz	a0,80003808 <z_cbvprintf_impl+0x7cc>
800037ac:	00140413          	addi	s0,s0,1
			while (pad_len-- > 0) {
800037b0:	000b8793          	mv	a5,s7
800037b4:	fe1ff06f          	j	80003794 <z_cbvprintf_impl+0x758>
			OUTS(bps, bpe);
800037b8:	000b0693          	mv	a3,s6
800037bc:	000a8613          	mv	a2,s5
800037c0:	00048593          	mv	a1,s1
800037c4:	00090513          	mv	a0,s2
800037c8:	ff0ff0ef          	jal	ra,80002fb8 <outs>
800037cc:	02054e63          	bltz	a0,80003808 <z_cbvprintf_impl+0x7cc>
800037d0:	00a40433          	add	s0,s0,a0
		while (width > 0) {
800037d4:	03405063          	blez	s4,800037f4 <z_cbvprintf_impl+0x7b8>
			OUTC(' ');
800037d8:	00048593          	mv	a1,s1
800037dc:	02000513          	li	a0,32
800037e0:	000900e7          	jalr	s2
800037e4:	02054263          	bltz	a0,80003808 <z_cbvprintf_impl+0x7cc>
800037e8:	00140413          	addi	s0,s0,1
			--width;
800037ec:	fffa0a13          	addi	s4,s4,-1
800037f0:	fe5ff06f          	j	800037d4 <z_cbvprintf_impl+0x798>
		fp = extract_conversion(conv, sp);
800037f4:	00098a93          	mv	s5,s3
800037f8:	889ff06f          	j	80003080 <z_cbvprintf_impl+0x44>
800037fc:	00098a93          	mv	s5,s3
80003800:	881ff06f          	j	80003080 <z_cbvprintf_impl+0x44>
	return count;
80003804:	00040513          	mv	a0,s0
}
80003808:	07c12083          	lw	ra,124(sp)
8000380c:	07812403          	lw	s0,120(sp)
80003810:	07412483          	lw	s1,116(sp)
80003814:	07012903          	lw	s2,112(sp)
80003818:	06c12983          	lw	s3,108(sp)
8000381c:	06812a03          	lw	s4,104(sp)
80003820:	06412a83          	lw	s5,100(sp)
80003824:	06012b03          	lw	s6,96(sp)
80003828:	05c12b83          	lw	s7,92(sp)
8000382c:	05812c03          	lw	s8,88(sp)
80003830:	08010113          	addi	sp,sp,128
80003834:	00008067          	ret

80003838 <_ConfigAbsSyms>:
80003838:	00308013          	addi	zero,ra,3
GEN_ABS_SYM_END
8000383c:	00008067          	ret

80003840 <arch_cpu_idle>:
80003840:	00308013          	addi	zero,ra,3
{
80003844:	ff010113          	addi	sp,sp,-16
80003848:	00112623          	sw	ra,12(sp)
	sys_trace_idle();
8000384c:	09c000ef          	jal	ra,800038e8 <sys_trace_idle>
 * use atomic instruction csrs to unlock global irq
 * csrs: atomic set bits in CSR register
 */
static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	__asm__ volatile ("csrs mstatus, %0"
80003850:	00800793          	li	a5,8
80003854:	3007a073          	csrs	mstatus,a5
	__asm__ volatile("wfi");
80003858:	10500073          	wfi
}
8000385c:	00c12083          	lw	ra,12(sp)
80003860:	01010113          	addi	sp,sp,16
80003864:	00008067          	ret

80003868 <arch_irq_enable>:
80003868:	00308013          	addi	zero,ra,3
{
#if defined(CONFIG_3RD_LEVEL_INTERRUPTS)
	return ((irq >> 16) & 0xFF) != 0 ? 3 :
		(((irq >> 8) & 0xFF) == 0 ? 1 : 2);
#elif defined(CONFIG_2ND_LEVEL_INTERRUPTS)
	return ((irq >> 8) & 0xFF) == 0 ? 1 : 2;
8000386c:	00855793          	srli	a5,a0,0x8
80003870:	0ff7f713          	zext.b	a4,a5
80003874:	00071a63          	bnez	a4,80003888 <arch_irq_enable+0x20>
			  : "r" (1 << irq));
80003878:	00100793          	li	a5,1
8000387c:	00a797b3          	sll	a5,a5,a0
	__asm__ volatile ("csrrs %0, mie, %1\n"
80003880:	3047a7f3          	csrrs	a5,mie,a5
80003884:	00008067          	ret
{
80003888:	ff010113          	addi	sp,sp,-16
8000388c:	00112623          	sw	ra,12(sp)
		riscv_plic_irq_enable(irq);
80003890:	fff78513          	addi	a0,a5,-1
80003894:	4d8000ef          	jal	ra,80003d6c <riscv_plic_irq_enable>
}
80003898:	00c12083          	lw	ra,12(sp)
8000389c:	01010113          	addi	sp,sp,16
800038a0:	00008067          	ret

800038a4 <z_riscv_irq_priority_set>:
800038a4:	00308013          	addi	zero,ra,3
800038a8:	00855513          	srli	a0,a0,0x8
800038ac:	0ff57793          	zext.b	a5,a0
800038b0:	00079463          	bnez	a5,800038b8 <z_riscv_irq_priority_set+0x14>
800038b4:	00008067          	ret
{
800038b8:	ff010113          	addi	sp,sp,-16
800038bc:	00112623          	sw	ra,12(sp)
		riscv_plic_set_priority(irq, prio);
800038c0:	fff50513          	addi	a0,a0,-1
800038c4:	4e0000ef          	jal	ra,80003da4 <riscv_plic_set_priority>
}
800038c8:	00c12083          	lw	ra,12(sp)
800038cc:	01010113          	addi	sp,sp,16
800038d0:	00008067          	ret

800038d4 <soc_interrupt_init>:
800038d4:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
800038d8:	300477f3          	csrrci	a5,mstatus,8
	__asm__ volatile ("csrwi mie, 0\n"
800038dc:	30405073          	csrwi	mie,0
800038e0:	34405073          	csrwi	mip,0
}
800038e4:	00008067          	ret

800038e8 <sys_trace_idle>:
800038e8:	00308013          	addi	zero,ra,3
void sys_trace_idle(void) {}
800038ec:	00008067          	ret

800038f0 <bad_stack_pointer>:
800038f0:	00308013          	addi	zero,ra,3
}
800038f4:	00000513          	li	a0,0
800038f8:	00008067          	ret

800038fc <z_riscv_fatal_error>:
800038fc:	00308013          	addi	zero,ra,3
{
80003900:	ff010113          	addi	sp,sp,-16
80003904:	00112623          	sw	ra,12(sp)
	z_fatal_error(reason, esf);
80003908:	515000ef          	jal	ra,8000461c <z_fatal_error>

8000390c <_Fault>:
8000390c:	00308013          	addi	zero,ra,3
{
80003910:	ff010113          	addi	sp,sp,-16
80003914:	00112623          	sw	ra,12(sp)
80003918:	00812423          	sw	s0,8(sp)
8000391c:	00050413          	mv	s0,a0
	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
80003920:	342027f3          	csrr	a5,mcause
	__asm__ volatile("csrr %0, mtval" : "=r" (mtval));
80003924:	343027f3          	csrr	a5,mtval
	if (bad_stack_pointer(esf)) {
80003928:	fc9ff0ef          	jal	ra,800038f0 <bad_stack_pointer>
8000392c:	00050463          	beqz	a0,80003934 <_Fault+0x28>
		reason = K_ERR_STACK_CHK_FAIL;
80003930:	00200513          	li	a0,2
	z_riscv_fatal_error(reason, esf);
80003934:	00040593          	mv	a1,s0
80003938:	fc5ff0ef          	jal	ra,800038fc <z_riscv_fatal_error>

8000393c <z_irq_spurious>:
8000393c:	00308013          	addi	zero,ra,3
{
80003940:	ff010113          	addi	sp,sp,-16
80003944:	00112623          	sw	ra,12(sp)
	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
80003948:	342027f3          	csrr	a5,mcause
	z_riscv_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
8000394c:	00000593          	li	a1,0
80003950:	00100513          	li	a0,1
80003954:	fa9ff0ef          	jal	ra,800038fc <z_riscv_fatal_error>

80003958 <_PrepC>:
80003958:	00308013          	addi	zero,ra,3
{
8000395c:	ff010113          	addi	sp,sp,-16
80003960:	00112623          	sw	ra,12(sp)
	z_bss_zero();
80003964:	6d1000ef          	jal	ra,80004834 <z_bss_zero>
	soc_interrupt_init();
80003968:	f6dff0ef          	jal	ra,800038d4 <soc_interrupt_init>
	z_cstart();
8000396c:	034010ef          	jal	ra,800049a0 <z_cstart>

80003970 <__initialize>:
/*
 * Remainder of asm-land initialization code before we can jump into
 * the C domain
 */
SECTION_FUNC(TEXT, __initialize)
	csrr a0, mhartid
80003970:	f1402573          	csrr	a0,mhartid
	beqz a0, boot_first_core
80003974:	00050a63          	beqz	a0,80003988 <boot_first_core>

	li t0, CONFIG_MP_NUM_CPUS
80003978:	00100293          	li	t0,1
	blt a0, t0, boot_secondary_core
8000397c:	04554263          	blt	a0,t0,800039c0 <boot_secondary_core>

80003980 <loop_unconfigured_cores>:

loop_unconfigured_cores:
	wfi
80003980:	10500073          	wfi
	j loop_unconfigured_cores
80003984:	ffdff06f          	j	80003980 <loop_unconfigured_cores>

80003988 <boot_first_core>:
	fscsr zero
#endif

#ifdef CONFIG_INIT_STACKS
	/* Pre-populate all bytes in z_interrupt_stacks with 0xAA */
	la t0, z_interrupt_stacks
80003988:	00005297          	auipc	t0,0x5
8000398c:	65828293          	addi	t0,t0,1624 # 80008fe0 <z_interrupt_stacks>
	li t1, __z_interrupt_stack_SIZEOF
80003990:	00001337          	lui	t1,0x1
	add t1, t1, t0
80003994:	00530333          	add	t1,t1,t0

	/* Populate z_interrupt_stacks with 0xaaaaaaaa */
	li t2, 0xaaaaaaaa
80003998:	aaaab3b7          	lui	t2,0xaaaab
8000399c:	aaa38393          	addi	t2,t2,-1366 # aaaaaaaa <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xaaaaaaab>

800039a0 <aa_loop>:
aa_loop:
	sw t2, 0x00(t0)
800039a0:	0072a023          	sw	t2,0(t0)
	addi t0, t0, 4
800039a4:	00428293          	addi	t0,t0,4
	blt t0, t1, aa_loop
800039a8:	fe62cce3          	blt	t0,t1,800039a0 <aa_loop>

	/*
	 * Initially, setup stack pointer to
	 * z_interrupt_stacks + __z_interrupt_stack_SIZEOF
	 */
	la sp, z_interrupt_stacks
800039ac:	00005117          	auipc	sp,0x5
800039b0:	63410113          	addi	sp,sp,1588 # 80008fe0 <z_interrupt_stacks>
	li t0, __z_interrupt_stack_SIZEOF
800039b4:	000012b7          	lui	t0,0x1
	add sp, sp, t0
800039b8:	00510133          	add	sp,sp,t0

	/*
	 * Jump into C domain. _PrepC zeroes BSS, copies rw data into RAM,
	 * and then enters kernel z_cstart
	 */
	call _PrepC
800039bc:	f9dff0ef          	jal	ra,80003958 <_PrepC>

800039c0 <boot_secondary_core>:

boot_secondary_core:
	la t0, riscv_cpu_wake_flag
800039c0:	00005297          	auipc	t0,0x5
800039c4:	11c28293          	addi	t0,t0,284 # 80008adc <riscv_cpu_wake_flag>
	lr t0, 0(t0)
800039c8:	0002a283          	lw	t0,0(t0)
	bne a0, t0, boot_secondary_core
800039cc:	fe551ae3          	bne	a0,t0,800039c0 <boot_secondary_core>

	/* Set up stack */
	la t0, riscv_cpu_sp
800039d0:	00005297          	auipc	t0,0x5
800039d4:	10828293          	addi	t0,t0,264 # 80008ad8 <riscv_cpu_sp>
	lr sp, 0(t0)
800039d8:	0002a103          	lw	sp,0(t0)

	la t0, riscv_cpu_wake_flag
800039dc:	00005297          	auipc	t0,0x5
800039e0:	10028293          	addi	t0,t0,256 # 80008adc <riscv_cpu_wake_flag>
	sr zero, 0(t0)
800039e4:	0002a023          	sw	zero,0(t0)
	j z_riscv_secondary_cpu_init
800039e8:	07c0006f          	j	80003a64 <z_riscv_secondary_cpu_init>

800039ec <z_riscv_switch>:

/* void z_riscv_switch(k_thread_t *switch_to, k_thread_t *switch_from) */
SECTION_FUNC(TEXT, z_riscv_switch)

	/* Save the old thread's callee-saved registers */
	DO_CALLEE_SAVED(sr, a1)
800039ec:	0215aa23          	sw	ra,52(a1)
800039f0:	0285ac23          	sw	s0,56(a1)
800039f4:	0295ae23          	sw	s1,60(a1)
800039f8:	0525a023          	sw	s2,64(a1)
800039fc:	0535a223          	sw	s3,68(a1)
80003a00:	0545a423          	sw	s4,72(a1)
80003a04:	0555a623          	sw	s5,76(a1)
80003a08:	0565a823          	sw	s6,80(a1)
80003a0c:	0575aa23          	sw	s7,84(a1)
80003a10:	0585ac23          	sw	s8,88(a1)
80003a14:	0595ae23          	sw	s9,92(a1)
80003a18:	07a5a023          	sw	s10,96(a1)
80003a1c:	07b5a223          	sw	s11,100(a1)
	DO_FP_CALLEE_SAVED(fsr, a1)
skip_store_fp_callee_saved:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Save the old thread's stack pointer */
	sr sp, _thread_offset_to_sp(a1)
80003a20:	0225a823          	sw	sp,48(a1)

	/* Set thread->switch_handle = thread to mark completion */
	sr a1, ___thread_t_switch_handle_OFFSET(a1)
80003a24:	06b5ae23          	sw	a1,124(a1)

	/* Get the new thread's stack pointer */
	lr sp, _thread_offset_to_sp(a0)
80003a28:	03052103          	lw	sp,48(a0)
	call z_thread_mark_switched_in
	mv a0, s0
#endif

	/* Restore the new thread's callee-saved registers */
	DO_CALLEE_SAVED(lr, a0)
80003a2c:	03452083          	lw	ra,52(a0)
80003a30:	03852403          	lw	s0,56(a0)
80003a34:	03c52483          	lw	s1,60(a0)
80003a38:	04052903          	lw	s2,64(a0)
80003a3c:	04452983          	lw	s3,68(a0)
80003a40:	04852a03          	lw	s4,72(a0)
80003a44:	04c52a83          	lw	s5,76(a0)
80003a48:	05052b03          	lw	s6,80(a0)
80003a4c:	05452b83          	lw	s7,84(a0)
80003a50:	05852c03          	lw	s8,88(a0)
80003a54:	05c52c83          	lw	s9,92(a0)
80003a58:	06052d03          	lw	s10,96(a0)
80003a5c:	06452d83          	lw	s11,100(a0)
	csrc mstatus, t1
1:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Return to arch_switch() or _irq_wrapper() */
	ret
80003a60:	00008067          	ret

80003a64 <z_riscv_secondary_cpu_init>:
80003a64:	00308013          	addi	zero,ra,3
{
80003a68:	ff010113          	addi	sp,sp,-16
80003a6c:	00112623          	sw	ra,12(sp)
80003a70:	00812423          	sw	s0,8(sp)
80003a74:	00050413          	mv	s0,a0
	soc_interrupt_init();
80003a78:	e5dff0ef          	jal	ra,800038d4 <soc_interrupt_init>
	riscv_cpu_init[cpu_num].fn(riscv_cpu_init[cpu_num].arg);
80003a7c:	800097b7          	lui	a5,0x80009
80003a80:	00341413          	slli	s0,s0,0x3
80003a84:	ae078793          	addi	a5,a5,-1312 # 80008ae0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ae1>
80003a88:	008787b3          	add	a5,a5,s0
80003a8c:	0007a703          	lw	a4,0(a5)
80003a90:	0047a503          	lw	a0,4(a5)
80003a94:	000700e7          	jalr	a4

80003a98 <arch_new_thread>:
80003a98:	00308013          	addi	zero,ra,3
	stack_init = (struct __esf *)Z_STACK_PTR_ALIGN(
80003a9c:	fb060613          	addi	a2,a2,-80
 * @param ptr Proposed stack pointer address
 * @return Properly aligned stack pointer address
 */
static inline char *z_stack_ptr_align(char *ptr)
{
	return (char *)ROUND_DOWN(ptr, ARCH_STACK_PTR_ALIGN);
80003aa0:	ff067613          	andi	a2,a2,-16
	stack_init->a0 = (unsigned long)entry;
80003aa4:	02d62023          	sw	a3,32(a2)
	stack_init->a1 = (unsigned long)p1;
80003aa8:	02e62223          	sw	a4,36(a2)
	stack_init->a2 = (unsigned long)p2;
80003aac:	02f62423          	sw	a5,40(a2)
	stack_init->a3 = (unsigned long)p3;
80003ab0:	03062623          	sw	a6,44(a2)
	stack_init->mstatus = MSTATUS_DEF_RESTORE;
80003ab4:	000027b7          	lui	a5,0x2
80003ab8:	88078793          	addi	a5,a5,-1920 # 1880 <CONFIG_ISR_STACK_SIZE+0x880>
80003abc:	04f62223          	sw	a5,68(a2)
		stack_init->mepc = (unsigned long)z_thread_entry;
80003ac0:	800027b7          	lui	a5,0x80002
80003ac4:	6b878793          	addi	a5,a5,1720 # 800026b8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800026b9>
80003ac8:	04f62023          	sw	a5,64(a2)
	thread->callee_saved.sp = (unsigned long)stack_init;
80003acc:	02c52823          	sw	a2,48(a0)
	thread->callee_saved.ra = (unsigned long)z_riscv_thread_start;
80003ad0:	800007b7          	lui	a5,0x80000
80003ad4:	15c78793          	addi	a5,a5,348 # 8000015c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000015d>
80003ad8:	02f52a23          	sw	a5,52(a0)
	thread->switch_handle = thread;
80003adc:	06a52e23          	sw	a0,124(a0)
}
80003ae0:	00008067          	ret

80003ae4 <malloc_prepare>:
80003ae4:	00308013          	addi	zero,ra,3
}
80003ae8:	00000513          	li	a0,0
80003aec:	00008067          	ret

80003af0 <_stdout_hook_default>:
80003af0:	00308013          	addi	zero,ra,3
}
80003af4:	fff00513          	li	a0,-1
80003af8:	00008067          	ret

80003afc <__stdout_hook_install>:
80003afc:	00308013          	addi	zero,ra,3
	_stdout_hook = hook;
80003b00:	82a1a023          	sw	a0,-2016(gp) # 8000ba90 <_stdout_hook>
}
80003b04:	00008067          	ret

80003b08 <z_impl_zephyr_write_stdout>:
80003b08:	00308013          	addi	zero,ra,3
{
80003b0c:	fe010113          	addi	sp,sp,-32
80003b10:	00112e23          	sw	ra,28(sp)
80003b14:	00812c23          	sw	s0,24(sp)
80003b18:	00912a23          	sw	s1,20(sp)
80003b1c:	01212823          	sw	s2,16(sp)
80003b20:	01312623          	sw	s3,12(sp)
80003b24:	00050993          	mv	s3,a0
80003b28:	00058913          	mv	s2,a1
	for (i = 0; i < nbytes; i++) {
80003b2c:	00000413          	li	s0,0
80003b30:	0140006f          	j	80003b44 <z_impl_zephyr_write_stdout+0x3c>
		_stdout_hook(*(buf + i));
80003b34:	8201a783          	lw	a5,-2016(gp) # 8000ba90 <_stdout_hook>
80003b38:	0004c503          	lbu	a0,0(s1)
80003b3c:	000780e7          	jalr	a5
	for (i = 0; i < nbytes; i++) {
80003b40:	00140413          	addi	s0,s0,1
80003b44:	03245263          	bge	s0,s2,80003b68 <z_impl_zephyr_write_stdout+0x60>
		if (*(buf + i) == '\n') {
80003b48:	008984b3          	add	s1,s3,s0
80003b4c:	0004c703          	lbu	a4,0(s1)
80003b50:	00a00793          	li	a5,10
80003b54:	fef710e3          	bne	a4,a5,80003b34 <z_impl_zephyr_write_stdout+0x2c>
			_stdout_hook('\r');
80003b58:	8201a783          	lw	a5,-2016(gp) # 8000ba90 <_stdout_hook>
80003b5c:	00d00513          	li	a0,13
80003b60:	000780e7          	jalr	a5
80003b64:	fd1ff06f          	j	80003b34 <z_impl_zephyr_write_stdout+0x2c>
}
80003b68:	00090513          	mv	a0,s2
80003b6c:	01c12083          	lw	ra,28(sp)
80003b70:	01812403          	lw	s0,24(sp)
80003b74:	01412483          	lw	s1,20(sp)
80003b78:	01012903          	lw	s2,16(sp)
80003b7c:	00c12983          	lw	s3,12(sp)
80003b80:	02010113          	addi	sp,sp,32
80003b84:	00008067          	ret

80003b88 <_write>:
80003b88:	00308013          	addi	zero,ra,3
{
80003b8c:	ff010113          	addi	sp,sp,-16
80003b90:	00112623          	sw	ra,12(sp)
80003b94:	00058513          	mv	a0,a1
80003b98:	00060593          	mv	a1,a2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
80003b9c:	f6dff0ef          	jal	ra,80003b08 <z_impl_zephyr_write_stdout>
}
80003ba0:	00c12083          	lw	ra,12(sp)
80003ba4:	01010113          	addi	sp,sp,16
80003ba8:	00008067          	ret

80003bac <_exit>:
80003bac:	00308013          	addi	zero,ra,3
{
80003bb0:	ff010113          	addi	sp,sp,-16
80003bb4:	00112623          	sw	ra,12(sp)
	_write(1, "exit\n", 5);
80003bb8:	00500613          	li	a2,5
80003bbc:	800095b7          	lui	a1,0x80009
80003bc0:	85858593          	addi	a1,a1,-1960 # 80008858 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008859>
80003bc4:	00100513          	li	a0,1
80003bc8:	fc1ff0ef          	jal	ra,80003b88 <_write>
	while (1) {
80003bcc:	0000006f          	j	80003bcc <_exit+0x20>

80003bd0 <_sbrk>:
80003bd0:	00308013          	addi	zero,ra,3
{
80003bd4:	00050713          	mv	a4,a0
	ptr = ((char *)HEAP_BASE) + heap_sz;
80003bd8:	800097b7          	lui	a5,0x80009
80003bdc:	ae87a683          	lw	a3,-1304(a5) # 80008ae8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ae9>
80003be0:	84818793          	addi	a5,gp,-1976 # 8000bab8 <__data_region_end>
80003be4:	00f68533          	add	a0,a3,a5
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
80003be8:	00d70733          	add	a4,a4,a3
80003bec:	c00006b7          	lui	a3,0xc0000
80003bf0:	40f687b3          	sub	a5,a3,a5
80003bf4:	00f77863          	bgeu	a4,a5,80003c04 <_sbrk+0x34>
		heap_sz += count;
80003bf8:	800097b7          	lui	a5,0x80009
80003bfc:	aee7a423          	sw	a4,-1304(a5) # 80008ae8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ae9>
		ret = ptr;
80003c00:	00008067          	ret
		ret = (void *)-1;
80003c04:	fff00513          	li	a0,-1
}
80003c08:	00008067          	ret

80003c0c <__retarget_lock_acquire_recursive>:
80003c0c:	00308013          	addi	zero,ra,3
{
80003c10:	ff010113          	addi	sp,sp,-16
80003c14:	00112623          	sw	ra,12(sp)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
80003c18:	fff00593          	li	a1,-1
80003c1c:	fff00613          	li	a2,-1
80003c20:	0c4010ef          	jal	ra,80004ce4 <z_impl_k_mutex_lock>
}
80003c24:	00c12083          	lw	ra,12(sp)
80003c28:	01010113          	addi	sp,sp,16
80003c2c:	00008067          	ret

80003c30 <__retarget_lock_release_recursive>:
80003c30:	00308013          	addi	zero,ra,3
{
80003c34:	ff010113          	addi	sp,sp,-16
80003c38:	00112623          	sw	ra,12(sp)
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
80003c3c:	228010ef          	jal	ra,80004e64 <z_impl_k_mutex_unlock>
}
80003c40:	00c12083          	lw	ra,12(sp)
80003c44:	01010113          	addi	sp,sp,16
80003c48:	00008067          	ret

80003c4c <__chk_fail>:
80003c4c:	00308013          	addi	zero,ra,3
{
80003c50:	ff010113          	addi	sp,sp,-16
80003c54:	00112623          	sw	ra,12(sp)
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
80003c58:	01d00613          	li	a2,29
80003c5c:	800095b7          	lui	a1,0x80009
80003c60:	86058593          	addi	a1,a1,-1952 # 80008860 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008861>
80003c64:	00200513          	li	a0,2
80003c68:	f21ff0ef          	jal	ra,80003b88 <_write>
	return a0;
}

static inline uintptr_t arch_syscall_invoke1(uintptr_t arg1, uintptr_t call_id)
{
	register unsigned long a0 __asm__ ("a0") = arg1;
80003c6c:	00300513          	li	a0,3
	register unsigned long t0 __asm__ ("t0") = call_id;
80003c70:	00000293          	li	t0,0

	__asm__ volatile ("ecall"
80003c74:	00000073          	ecall

80003c78 <plic_init>:
80003c78:	00308013          	addi	zero,ra,3
{
80003c7c:	ff010113          	addi	sp,sp,-16
80003c80:	00112623          	sw	ra,12(sp)
	for (i = 0; i < PLIC_EN_SIZE; i++) {
80003c84:	00000793          	li	a5,0
	volatile uint32_t *en = (volatile uint32_t *)PLIC_IRQ_EN;
80003c88:	0c002737          	lui	a4,0xc002
	for (i = 0; i < PLIC_EN_SIZE; i++) {
80003c8c:	0100006f          	j	80003c9c <plic_init+0x24>
		*en = 0U;
80003c90:	00072023          	sw	zero,0(a4) # c002000 <CONFIG_SRAM_SIZE+0xbf02000>
		en++;
80003c94:	00470713          	addi	a4,a4,4
	for (i = 0; i < PLIC_EN_SIZE; i++) {
80003c98:	00178793          	addi	a5,a5,1
80003c9c:	00100693          	li	a3,1
80003ca0:	fef6d8e3          	bge	a3,a5,80003c90 <plic_init+0x18>
	for (i = 0; i < PLIC_IRQS; i++) {
80003ca4:	00000793          	li	a5,0
	volatile uint32_t *prio = (volatile uint32_t *)PLIC_PRIO;
80003ca8:	0c000737          	lui	a4,0xc000
80003cac:	0100006f          	j	80003cbc <plic_init+0x44>
		*prio = 0U;
80003cb0:	00072023          	sw	zero,0(a4) # c000000 <CONFIG_SRAM_SIZE+0xbf00000>
		prio++;
80003cb4:	00470713          	addi	a4,a4,4
	for (i = 0; i < PLIC_IRQS; i++) {
80003cb8:	00178793          	addi	a5,a5,1
80003cbc:	03300693          	li	a3,51
80003cc0:	fef6d8e3          	bge	a3,a5,80003cb0 <plic_init+0x38>
	regs->threshold_prio = 0U;
80003cc4:	0c2007b7          	lui	a5,0xc200
80003cc8:	0007a023          	sw	zero,0(a5) # c200000 <CONFIG_SRAM_SIZE+0xc100000>
	IRQ_CONNECT(RISCV_MACHINE_EXT_IRQ,
80003ccc:	00000613          	li	a2,0
80003cd0:	00000593          	li	a1,0
80003cd4:	00b00513          	li	a0,11
80003cd8:	bcdff0ef          	jal	ra,800038a4 <z_riscv_irq_priority_set>
	irq_enable(RISCV_MACHINE_EXT_IRQ);
80003cdc:	00b00513          	li	a0,11
80003ce0:	b89ff0ef          	jal	ra,80003868 <arch_irq_enable>
}
80003ce4:	00000513          	li	a0,0
80003ce8:	00c12083          	lw	ra,12(sp)
80003cec:	01010113          	addi	sp,sp,16
80003cf0:	00008067          	ret

80003cf4 <plic_irq_handler>:
80003cf4:	00308013          	addi	zero,ra,3
{
80003cf8:	ff010113          	addi	sp,sp,-16
80003cfc:	00112623          	sw	ra,12(sp)
80003d00:	00812423          	sw	s0,8(sp)
	irq = regs->claim_complete;
80003d04:	0c2007b7          	lui	a5,0xc200
80003d08:	0047a403          	lw	s0,4(a5) # c200004 <CONFIG_SRAM_SIZE+0xc100004>
	save_irq = irq;
80003d0c:	800097b7          	lui	a5,0x80009
80003d10:	ae87a623          	sw	s0,-1300(a5) # 80008aec <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008aed>
	if (irq == 0U || irq >= PLIC_IRQS)
80003d14:	fff40713          	addi	a4,s0,-1
80003d18:	03200793          	li	a5,50
80003d1c:	04e7e263          	bltu	a5,a4,80003d60 <plic_irq_handler+0x6c>
	irq += CONFIG_2ND_LVL_ISR_TBL_OFFSET;
80003d20:	00c40413          	addi	s0,s0,12
	ite->isr(ite->arg);
80003d24:	800077b7          	lui	a5,0x80007
80003d28:	00341413          	slli	s0,s0,0x3
80003d2c:	78c78793          	addi	a5,a5,1932 # 8000778c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000778d>
80003d30:	008787b3          	add	a5,a5,s0
80003d34:	0047a703          	lw	a4,4(a5)
80003d38:	0007a503          	lw	a0,0(a5)
80003d3c:	000700e7          	jalr	a4
	regs->claim_complete = save_irq;
80003d40:	800097b7          	lui	a5,0x80009
80003d44:	aec7a703          	lw	a4,-1300(a5) # 80008aec <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008aed>
80003d48:	0c2007b7          	lui	a5,0xc200
80003d4c:	00e7a223          	sw	a4,4(a5) # c200004 <CONFIG_SRAM_SIZE+0xc100004>
}
80003d50:	00c12083          	lw	ra,12(sp)
80003d54:	00812403          	lw	s0,8(sp)
80003d58:	01010113          	addi	sp,sp,16
80003d5c:	00008067          	ret
		z_irq_spurious(NULL);
80003d60:	00000513          	li	a0,0
80003d64:	bd9ff0ef          	jal	ra,8000393c <z_irq_spurious>
80003d68:	fb9ff06f          	j	80003d20 <plic_irq_handler+0x2c>

80003d6c <riscv_plic_irq_enable>:
80003d6c:	00308013          	addi	zero,ra,3
80003d70:	30047773          	csrrci	a4,mstatus,8
	en += (irq >> 5);
80003d74:	00555693          	srli	a3,a0,0x5
80003d78:	00269693          	slli	a3,a3,0x2
80003d7c:	0c0027b7          	lui	a5,0xc002
80003d80:	00d787b3          	add	a5,a5,a3
	*en |= (1 << (irq & 31));
80003d84:	0007a683          	lw	a3,0(a5) # c002000 <CONFIG_SRAM_SIZE+0xbf02000>
80003d88:	00100613          	li	a2,1
80003d8c:	00a61633          	sll	a2,a2,a0
80003d90:	00c6e6b3          	or	a3,a3,a2
80003d94:	00d7a023          	sw	a3,0(a5)
			  :
			  : "r" (key & MSTATUS_IEN)
80003d98:	00877793          	andi	a5,a4,8
	__asm__ volatile ("csrs mstatus, %0"
80003d9c:	3007a073          	csrs	mstatus,a5
}
80003da0:	00008067          	ret

80003da4 <riscv_plic_set_priority>:
80003da4:	00308013          	addi	zero,ra,3
	if (priority > PLIC_MAX_PRIO)
80003da8:	00700793          	li	a5,7
80003dac:	00b7f463          	bgeu	a5,a1,80003db4 <riscv_plic_set_priority+0x10>
		priority = PLIC_MAX_PRIO;
80003db0:	00700593          	li	a1,7
	prio += irq;
80003db4:	00251513          	slli	a0,a0,0x2
80003db8:	0c0007b7          	lui	a5,0xc000
80003dbc:	00a787b3          	add	a5,a5,a0
	*prio = priority;
80003dc0:	00b7a023          	sw	a1,0(a5) # c000000 <CONFIG_SRAM_SIZE+0xbf00000>
}
80003dc4:	00008067          	ret

80003dc8 <console_out>:
80003dc8:	00308013          	addi	zero,ra,3
{
80003dcc:	ff010113          	addi	sp,sp,-16
80003dd0:	00112623          	sw	ra,12(sp)
80003dd4:	00812423          	sw	s0,8(sp)
80003dd8:	00050413          	mv	s0,a0
	if ('\n' == c) {
80003ddc:	00a00793          	li	a5,10
80003de0:	02f50a63          	beq	a0,a5,80003e14 <console_out+0x4c>
	uart_poll_out(uart_console_dev, c);
80003de4:	0ff47593          	zext.b	a1,s0
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
80003de8:	80007537          	lui	a0,0x80007
80003dec:	77450793          	addi	a5,a0,1908 # 80007774 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007775>
80003df0:	0087a783          	lw	a5,8(a5)
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
80003df4:	0047a783          	lw	a5,4(a5)
80003df8:	77450513          	addi	a0,a0,1908
80003dfc:	000780e7          	jalr	a5
}
80003e00:	00040513          	mv	a0,s0
80003e04:	00c12083          	lw	ra,12(sp)
80003e08:	00812403          	lw	s0,8(sp)
80003e0c:	01010113          	addi	sp,sp,16
80003e10:	00008067          	ret
	const struct uart_driver_api *api =
80003e14:	80007537          	lui	a0,0x80007
80003e18:	77450793          	addi	a5,a0,1908 # 80007774 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007775>
80003e1c:	0087a783          	lw	a5,8(a5)
	api->poll_out(dev, out_char);
80003e20:	0047a783          	lw	a5,4(a5)
80003e24:	00d00593          	li	a1,13
80003e28:	77450513          	addi	a0,a0,1908
80003e2c:	000780e7          	jalr	a5
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
80003e30:	fb5ff06f          	j	80003de4 <console_out+0x1c>

80003e34 <uart_console_hook_install>:
80003e34:	00308013          	addi	zero,ra,3
{
80003e38:	ff010113          	addi	sp,sp,-16
80003e3c:	00112623          	sw	ra,12(sp)
80003e40:	00812423          	sw	s0,8(sp)
	__stdout_hook_install(console_out);
80003e44:	80004437          	lui	s0,0x80004
80003e48:	dc840513          	addi	a0,s0,-568 # 80003dc8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003dc9>
80003e4c:	cb1ff0ef          	jal	ra,80003afc <__stdout_hook_install>
	__printk_hook_install(console_out);
80003e50:	dc840513          	addi	a0,s0,-568
80003e54:	fe4fe0ef          	jal	ra,80002638 <__printk_hook_install>
}
80003e58:	00c12083          	lw	ra,12(sp)
80003e5c:	00812403          	lw	s0,8(sp)
80003e60:	01010113          	addi	sp,sp,16
80003e64:	00008067          	ret

80003e68 <uart_console_init>:
80003e68:	00308013          	addi	zero,ra,3
{
80003e6c:	ff010113          	addi	sp,sp,-16
80003e70:	00112623          	sw	ra,12(sp)
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
80003e74:	80007537          	lui	a0,0x80007
80003e78:	77450513          	addi	a0,a0,1908 # 80007774 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007775>
80003e7c:	75c000ef          	jal	ra,800045d8 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
80003e80:	00050c63          	beqz	a0,80003e98 <uart_console_init+0x30>
	uart_console_hook_install();
80003e84:	fb1ff0ef          	jal	ra,80003e34 <uart_console_hook_install>
	return 0;
80003e88:	00000513          	li	a0,0
}
80003e8c:	00c12083          	lw	ra,12(sp)
80003e90:	01010113          	addi	sp,sp,16
80003e94:	00008067          	ret
		return -ENODEV;
80003e98:	fed00513          	li	a0,-19
80003e9c:	ff1ff06f          	j	80003e8c <uart_console_init+0x24>

80003ea0 <clock_control_get_rate>:
80003ea0:	00308013          	addi	zero,ra,3
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
80003ea4:	00852783          	lw	a5,8(a0)
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
80003ea8:	00c7a783          	lw	a5,12(a5)
80003eac:	00078e63          	beqz	a5,80003ec8 <clock_control_get_rate+0x28>
{
80003eb0:	ff010113          	addi	sp,sp,-16
80003eb4:	00112623          	sw	ra,12(sp)
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
80003eb8:	000780e7          	jalr	a5
}
80003ebc:	00c12083          	lw	ra,12(sp)
80003ec0:	01010113          	addi	sp,sp,16
80003ec4:	00008067          	ret
		return -ENOSYS;
80003ec8:	fa800513          	li	a0,-88
}
80003ecc:	00008067          	ret

80003ed0 <set_baud_rate>:
80003ed0:	00308013          	addi	zero,ra,3
	struct uart_ns16550_dev_data * const dev_data = dev->data;
80003ed4:	01052703          	lw	a4,16(a0)
	if ((baud_rate != 0U) && (pclk != 0U)) {
80003ed8:	08058263          	beqz	a1,80003f5c <set_baud_rate+0x8c>
80003edc:	08060063          	beqz	a2,80003f5c <set_baud_rate+0x8c>
		divisor = (pclk / (baud_rate << 4));
80003ee0:	00459793          	slli	a5,a1,0x4
80003ee4:	02f65633          	divu	a2,a2,a5
	return DEVICE_MMIO_GET(dev);
80003ee8:	00452783          	lw	a5,4(a0)
80003eec:	0007a803          	lw	a6,0(a5)
	return config->reg_interval;
80003ef0:	0107c683          	lbu	a3,16(a5)
		lcr_cache = INBYTE(LCR(dev));
80003ef4:	00169793          	slli	a5,a3,0x1
80003ef8:	00d787b3          	add	a5,a5,a3
80003efc:	010787b3          	add	a5,a5,a6
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
80003f00:	0007c683          	lbu	a3,0(a5)
80003f04:	0ff6f813          	zext.b	a6,a3
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
80003f08:	0806e693          	ori	a3,a3,128
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
80003f0c:	00d78023          	sb	a3,0(a5)
		OUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));
80003f10:	0ff67693          	zext.b	a3,a2
	const struct uart_ns16550_device_config *config = dev->config;
80003f14:	00452783          	lw	a5,4(a0)
	return DEVICE_MMIO_GET(dev);
80003f18:	0007a783          	lw	a5,0(a5)
80003f1c:	00d78023          	sb	a3,0(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
80003f20:	00865613          	srli	a2,a2,0x8
80003f24:	0ff67613          	zext.b	a2,a2
	return DEVICE_MMIO_GET(dev);
80003f28:	00452783          	lw	a5,4(a0)
80003f2c:	0007a683          	lw	a3,0(a5)
	return config->reg_interval;
80003f30:	0107c783          	lbu	a5,16(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
80003f34:	00d787b3          	add	a5,a5,a3
80003f38:	00c78023          	sb	a2,0(a5)
	return DEVICE_MMIO_GET(dev);
80003f3c:	00452783          	lw	a5,4(a0)
80003f40:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
80003f44:	0107c683          	lbu	a3,16(a5)
		OUTBYTE(LCR(dev), lcr_cache);
80003f48:	00169793          	slli	a5,a3,0x1
80003f4c:	00d787b3          	add	a5,a5,a3
80003f50:	00c787b3          	add	a5,a5,a2
80003f54:	01078023          	sb	a6,0(a5)
		dev_data->uart_config.baudrate = baud_rate;
80003f58:	00b72023          	sw	a1,0(a4)
}
80003f5c:	00008067          	ret

80003f60 <uart_ns16550_config_get>:
80003f60:	00308013          	addi	zero,ra,3
	struct uart_ns16550_dev_data *data = dev->data;
80003f64:	01052783          	lw	a5,16(a0)
	cfg->baudrate = data->uart_config.baudrate;
80003f68:	0007a703          	lw	a4,0(a5)
80003f6c:	00e5a023          	sw	a4,0(a1)
	cfg->parity = data->uart_config.parity;
80003f70:	0047c703          	lbu	a4,4(a5)
80003f74:	00e58223          	sb	a4,4(a1)
	cfg->stop_bits = data->uart_config.stop_bits;
80003f78:	0057c703          	lbu	a4,5(a5)
80003f7c:	00e582a3          	sb	a4,5(a1)
	cfg->data_bits = data->uart_config.data_bits;
80003f80:	0067c703          	lbu	a4,6(a5)
80003f84:	00e58323          	sb	a4,6(a1)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
80003f88:	0077c783          	lbu	a5,7(a5)
80003f8c:	00f583a3          	sb	a5,7(a1)
}
80003f90:	00000513          	li	a0,0
80003f94:	00008067          	ret

80003f98 <uart_ns16550_poll_in>:
80003f98:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003f9c:	30047773          	csrrci	a4,mstatus,8
	return DEVICE_MMIO_GET(dev);
80003fa0:	00452783          	lw	a5,4(a0)
80003fa4:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
80003fa8:	0107c683          	lbu	a3,16(a5)
	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
80003fac:	00269793          	slli	a5,a3,0x2
80003fb0:	00d787b3          	add	a5,a5,a3
80003fb4:	00c787b3          	add	a5,a5,a2
	return *(volatile uint8_t *)addr;
80003fb8:	0007c783          	lbu	a5,0(a5)
80003fbc:	0017f793          	andi	a5,a5,1
80003fc0:	00078e63          	beqz	a5,80003fdc <uart_ns16550_poll_in+0x44>
80003fc4:	00064783          	lbu	a5,0(a2)
		*c = INBYTE(RDR(dev));
80003fc8:	00f58023          	sb	a5,0(a1)
		ret = 0;
80003fcc:	00000513          	li	a0,0
	__asm__ volatile ("csrs mstatus, %0"
80003fd0:	00877793          	andi	a5,a4,8
80003fd4:	3007a073          	csrs	mstatus,a5
}
80003fd8:	00008067          	ret
	int ret = -1;
80003fdc:	fff00513          	li	a0,-1
80003fe0:	ff1ff06f          	j	80003fd0 <uart_ns16550_poll_in+0x38>

80003fe4 <uart_ns16550_poll_out>:
80003fe4:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003fe8:	30047673          	csrrci	a2,mstatus,8
	return DEVICE_MMIO_GET(dev);
80003fec:	00452783          	lw	a5,4(a0)
80003ff0:	0007a683          	lw	a3,0(a5)
	return config->reg_interval;
80003ff4:	0107c703          	lbu	a4,16(a5)
	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0) {
80003ff8:	00271793          	slli	a5,a4,0x2
80003ffc:	00e787b3          	add	a5,a5,a4
80004000:	00d787b3          	add	a5,a5,a3
80004004:	0007c783          	lbu	a5,0(a5)
80004008:	0207f793          	andi	a5,a5,32
8000400c:	fe0780e3          	beqz	a5,80003fec <uart_ns16550_poll_out+0x8>
	*(volatile uint8_t *)addr = data;
80004010:	00b68023          	sb	a1,0(a3) # c0000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xc0000001>
	__asm__ volatile ("csrs mstatus, %0"
80004014:	00867793          	andi	a5,a2,8
80004018:	3007a073          	csrs	mstatus,a5
}
8000401c:	00008067          	ret

80004020 <uart_ns16550_err_check>:
80004020:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004024:	30047773          	csrrci	a4,mstatus,8
	return DEVICE_MMIO_GET(dev);
80004028:	00452783          	lw	a5,4(a0)
8000402c:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
80004030:	0107c683          	lbu	a3,16(a5)
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
80004034:	00269793          	slli	a5,a3,0x2
80004038:	00d787b3          	add	a5,a5,a3
8000403c:	00c787b3          	add	a5,a5,a2
	return *(volatile uint8_t *)addr;
80004040:	0007c503          	lbu	a0,0(a5)
80004044:	01e57513          	andi	a0,a0,30
	__asm__ volatile ("csrs mstatus, %0"
80004048:	00877793          	andi	a5,a4,8
8000404c:	3007a073          	csrs	mstatus,a5
}
80004050:	40155513          	srai	a0,a0,0x1
80004054:	00008067          	ret

80004058 <uart_ns16550_configure>:
80004058:	00308013          	addi	zero,ra,3
{
8000405c:	fd010113          	addi	sp,sp,-48
80004060:	02112623          	sw	ra,44(sp)
80004064:	02812423          	sw	s0,40(sp)
80004068:	02912223          	sw	s1,36(sp)
8000406c:	03212023          	sw	s2,32(sp)
80004070:	01312e23          	sw	s3,28(sp)
80004074:	01412c23          	sw	s4,24(sp)
80004078:	00050413          	mv	s0,a0
8000407c:	00058493          	mv	s1,a1
	struct uart_ns16550_dev_data * const dev_data = dev->data;
80004080:	01052a03          	lw	s4,16(a0)
	const struct uart_ns16550_device_config * const dev_cfg = dev->config;
80004084:	00452983          	lw	s3,4(a0)
	uint32_t pclk = 0U;
80004088:	00012623          	sw	zero,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000408c:	30047973          	csrrci	s2,mstatus,8
	if (dev_cfg->sys_clk_freq != 0U) {
80004090:	0049a783          	lw	a5,4(s3)
80004094:	04078063          	beqz	a5,800040d4 <uart_ns16550_configure+0x7c>
		pclk = dev_cfg->sys_clk_freq;
80004098:	00f12623          	sw	a5,12(sp)
	set_baud_rate(dev, cfg->baudrate, pclk);
8000409c:	00c12603          	lw	a2,12(sp)
800040a0:	0004a583          	lw	a1,0(s1)
800040a4:	00040513          	mv	a0,s0
800040a8:	e29ff0ef          	jal	ra,80003ed0 <set_baud_rate>
	switch (cfg->data_bits) {
800040ac:	0064c783          	lbu	a5,6(s1)
800040b0:	00200713          	li	a4,2
800040b4:	0ae78463          	beq	a5,a4,8000415c <uart_ns16550_configure+0x104>
800040b8:	04f76263          	bltu	a4,a5,800040fc <uart_ns16550_configure+0xa4>
800040bc:	04078e63          	beqz	a5,80004118 <uart_ns16550_configure+0xc0>
800040c0:	00100713          	li	a4,1
800040c4:	02e79863          	bne	a5,a4,800040f4 <uart_ns16550_configure+0x9c>
		uart_cfg.data_bits = LCR_CS6;
800040c8:	00100793          	li	a5,1
800040cc:	00f10523          	sb	a5,10(sp)
		break;
800040d0:	04c0006f          	j	8000411c <uart_ns16550_configure+0xc4>
		if (!device_is_ready(dev_cfg->clock_dev)) {
800040d4:	0089a503          	lw	a0,8(s3)
800040d8:	500000ef          	jal	ra,800045d8 <z_device_is_ready>
800040dc:	18050a63          	beqz	a0,80004270 <uart_ns16550_configure+0x218>
		clock_control_get_rate(dev_cfg->clock_dev, dev_cfg->clock_subsys,
800040e0:	00c10613          	addi	a2,sp,12
800040e4:	00c9a583          	lw	a1,12(s3)
800040e8:	0089a503          	lw	a0,8(s3)
800040ec:	db5ff0ef          	jal	ra,80003ea0 <clock_control_get_rate>
800040f0:	fadff06f          	j	8000409c <uart_ns16550_configure+0x44>
	switch (cfg->data_bits) {
800040f4:	f7a00513          	li	a0,-134
800040f8:	03c0006f          	j	80004134 <uart_ns16550_configure+0xdc>
800040fc:	00300713          	li	a4,3
80004100:	00e79863          	bne	a5,a4,80004110 <uart_ns16550_configure+0xb8>
		uart_cfg.data_bits = LCR_CS8;
80004104:	00300793          	li	a5,3
80004108:	00f10523          	sb	a5,10(sp)
		break;
8000410c:	0100006f          	j	8000411c <uart_ns16550_configure+0xc4>
	switch (cfg->data_bits) {
80004110:	f7a00513          	li	a0,-134
80004114:	0200006f          	j	80004134 <uart_ns16550_configure+0xdc>
		uart_cfg.data_bits = LCR_CS5;
80004118:	00010523          	sb	zero,10(sp)
	switch (cfg->stop_bits) {
8000411c:	0054c783          	lbu	a5,5(s1)
80004120:	00100713          	li	a4,1
80004124:	04e78263          	beq	a5,a4,80004168 <uart_ns16550_configure+0x110>
80004128:	00300713          	li	a4,3
8000412c:	04e78c63          	beq	a5,a4,80004184 <uart_ns16550_configure+0x12c>
80004130:	f7a00513          	li	a0,-134
			  : "r" (key & MSTATUS_IEN)
80004134:	00897913          	andi	s2,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80004138:	30092073          	csrs	mstatus,s2
};
8000413c:	02c12083          	lw	ra,44(sp)
80004140:	02812403          	lw	s0,40(sp)
80004144:	02412483          	lw	s1,36(sp)
80004148:	02012903          	lw	s2,32(sp)
8000414c:	01c12983          	lw	s3,28(sp)
80004150:	01812a03          	lw	s4,24(sp)
80004154:	03010113          	addi	sp,sp,48
80004158:	00008067          	ret
		uart_cfg.data_bits = LCR_CS7;
8000415c:	00200793          	li	a5,2
80004160:	00f10523          	sb	a5,10(sp)
		break;
80004164:	fb9ff06f          	j	8000411c <uart_ns16550_configure+0xc4>
		uart_cfg.stop_bits = LCR_1_STB;
80004168:	000104a3          	sb	zero,9(sp)
	switch (cfg->parity) {
8000416c:	0044c783          	lbu	a5,4(s1)
80004170:	02078063          	beqz	a5,80004190 <uart_ns16550_configure+0x138>
80004174:	00200713          	li	a4,2
80004178:	0ee78063          	beq	a5,a4,80004258 <uart_ns16550_configure+0x200>
8000417c:	f7a00513          	li	a0,-134
80004180:	fb5ff06f          	j	80004134 <uart_ns16550_configure+0xdc>
		uart_cfg.stop_bits = LCR_2_STB;
80004184:	00400793          	li	a5,4
80004188:	00f104a3          	sb	a5,9(sp)
		break;
8000418c:	fe1ff06f          	j	8000416c <uart_ns16550_configure+0x114>
		uart_cfg.parity = LCR_PDIS;
80004190:	00010423          	sb	zero,8(sp)
	dev_data->uart_config = *cfg;
80004194:	0004a783          	lw	a5,0(s1)
80004198:	00fa2023          	sw	a5,0(s4)
8000419c:	0044a783          	lw	a5,4(s1)
800041a0:	00fa2223          	sw	a5,4(s4)
	OUTBYTE(LCR(dev),
800041a4:	00a14783          	lbu	a5,10(sp)
800041a8:	00914683          	lbu	a3,9(sp)
800041ac:	00814703          	lbu	a4,8(sp)
800041b0:	00d7e7b3          	or	a5,a5,a3
800041b4:	00f76733          	or	a4,a4,a5
	return DEVICE_MMIO_GET(dev);
800041b8:	00442783          	lw	a5,4(s0)
800041bc:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
800041c0:	0107c683          	lbu	a3,16(a5)
	OUTBYTE(LCR(dev),
800041c4:	00169793          	slli	a5,a3,0x1
800041c8:	00d787b3          	add	a5,a5,a3
800041cc:	00c787b3          	add	a5,a5,a2
	*(volatile uint8_t *)addr = data;
800041d0:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
800041d4:	00442783          	lw	a5,4(s0)
800041d8:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
800041dc:	0107c783          	lbu	a5,16(a5)
	OUTBYTE(MDC(dev), mdc);
800041e0:	00279793          	slli	a5,a5,0x2
800041e4:	00e787b3          	add	a5,a5,a4
800041e8:	00b00713          	li	a4,11
800041ec:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
800041f0:	00442783          	lw	a5,4(s0)
800041f4:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
800041f8:	0107c783          	lbu	a5,16(a5)
	OUTBYTE(FCR(dev),
800041fc:	00179793          	slli	a5,a5,0x1
80004200:	00e787b3          	add	a5,a5,a4
80004204:	f8700713          	li	a4,-121
80004208:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
8000420c:	00442783          	lw	a5,4(s0)
80004210:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
80004214:	0107c783          	lbu	a5,16(a5)
	if ((INBYTE(IIR(dev)) & IIR_FE) == IIR_FE) {
80004218:	00179793          	slli	a5,a5,0x1
8000421c:	00e787b3          	add	a5,a5,a4
	return *(volatile uint8_t *)addr;
80004220:	0007c783          	lbu	a5,0(a5)
80004224:	0c07f793          	andi	a5,a5,192
80004228:	0c000713          	li	a4,192
8000422c:	02e78c63          	beq	a5,a4,80004264 <uart_ns16550_configure+0x20c>
		dev_data->fifo_size = 1;
80004230:	00100793          	li	a5,1
80004234:	00fa0423          	sb	a5,8(s4)
	const struct uart_ns16550_device_config *config = dev->config;
80004238:	00442703          	lw	a4,4(s0)
	return config->reg_interval;
8000423c:	01074783          	lbu	a5,16(a4)
	return DEVICE_MMIO_GET(dev);
80004240:	00072703          	lw	a4,0(a4)
80004244:	00074683          	lbu	a3,0(a4)
	OUTBYTE(IER(dev), 0x00);
80004248:	00e787b3          	add	a5,a5,a4
	*(volatile uint8_t *)addr = data;
8000424c:	00078023          	sb	zero,0(a5)
	int ret = 0;
80004250:	00000513          	li	a0,0
}
80004254:	ee1ff06f          	j	80004134 <uart_ns16550_configure+0xdc>
		uart_cfg.parity = LCR_EPS;
80004258:	01000793          	li	a5,16
8000425c:	00f10423          	sb	a5,8(sp)
		break;
80004260:	f35ff06f          	j	80004194 <uart_ns16550_configure+0x13c>
		dev_data->fifo_size = 16;
80004264:	01000793          	li	a5,16
80004268:	00fa0423          	sb	a5,8(s4)
8000426c:	fcdff06f          	j	80004238 <uart_ns16550_configure+0x1e0>
			ret = -EINVAL;
80004270:	fea00513          	li	a0,-22
80004274:	ec1ff06f          	j	80004134 <uart_ns16550_configure+0xdc>

80004278 <uart_ns16550_init>:
80004278:	00308013          	addi	zero,ra,3
{
8000427c:	ff010113          	addi	sp,sp,-16
80004280:	00112623          	sw	ra,12(sp)
	ret = uart_ns16550_configure(dev, &data->uart_config);
80004284:	01052583          	lw	a1,16(a0)
80004288:	dd1ff0ef          	jal	ra,80004058 <uart_ns16550_configure>
}
8000428c:	00c12083          	lw	ra,12(sp)
80004290:	01010113          	addi	sp,sp,16
80004294:	00008067          	ret

80004298 <get_hart_mtimecmp>:
80004298:	00308013          	addi	zero,ra,3
	return MTIMECMP_REG + (_current_cpu->id * 8);
8000429c:	800097b7          	lui	a5,0x80009
800042a0:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800042a4:	0147c783          	lbu	a5,20(a5)
800042a8:	00379793          	slli	a5,a5,0x3
}
800042ac:	02004537          	lui	a0,0x2004
800042b0:	00a78533          	add	a0,a5,a0
800042b4:	00000593          	li	a1,0
800042b8:	00008067          	ret

800042bc <set_mtimecmp>:
800042bc:	00308013          	addi	zero,ra,3
{
800042c0:	ff010113          	addi	sp,sp,-16
800042c4:	00112623          	sw	ra,12(sp)
800042c8:	00812423          	sw	s0,8(sp)
800042cc:	00912223          	sw	s1,4(sp)
800042d0:	00050493          	mv	s1,a0
800042d4:	00058413          	mv	s0,a1
	volatile uint32_t *r = (uint32_t *)(uint32_t)get_hart_mtimecmp();
800042d8:	fc1ff0ef          	jal	ra,80004298 <get_hart_mtimecmp>
	r[1] = 0xffffffff;
800042dc:	fff00793          	li	a5,-1
800042e0:	00f52223          	sw	a5,4(a0) # 2004004 <CONFIG_SRAM_SIZE+0x1f04004>
	r[0] = (uint32_t)time;
800042e4:	00952023          	sw	s1,0(a0)
	r[1] = (uint32_t)(time >> 32);
800042e8:	00852223          	sw	s0,4(a0)
}
800042ec:	00c12083          	lw	ra,12(sp)
800042f0:	00812403          	lw	s0,8(sp)
800042f4:	00412483          	lw	s1,4(sp)
800042f8:	01010113          	addi	sp,sp,16
800042fc:	00008067          	ret

80004300 <mtime>:
{
80004300:	00308013          	addi	zero,ra,3
		hi = r[1];
80004304:	0200c7b7          	lui	a5,0x200c
80004308:	ffc7a583          	lw	a1,-4(a5) # 200bffc <CONFIG_SRAM_SIZE+0x1f0bffc>
		lo = r[0];
8000430c:	ff87a503          	lw	a0,-8(a5)
	} while (r[1] != hi);
80004310:	ffc7a783          	lw	a5,-4(a5)
80004314:	feb796e3          	bne	a5,a1,80004300 <mtime>
}
80004318:	00008067          	ret

8000431c <sys_clock_driver_init>:
8000431c:	00308013          	addi	zero,ra,3
{
80004320:	ff010113          	addi	sp,sp,-16
80004324:	00112623          	sw	ra,12(sp)
	IRQ_CONNECT(TIMER_IRQN, 0, timer_isr, NULL, 0);
80004328:	00000613          	li	a2,0
8000432c:	00000593          	li	a1,0
80004330:	00700513          	li	a0,7
80004334:	d70ff0ef          	jal	ra,800038a4 <z_riscv_irq_priority_set>
	last_count = mtime();
80004338:	fc9ff0ef          	jal	ra,80004300 <mtime>
8000433c:	00050793          	mv	a5,a0
80004340:	80009737          	lui	a4,0x80009
80004344:	aaa72c23          	sw	a0,-1352(a4) # 80008ab8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ab9>
80004348:	aab72e23          	sw	a1,-1348(a4)
	set_mtimecmp(last_count + CYC_PER_TICK);
8000434c:	10050513          	addi	a0,a0,256
80004350:	00f537b3          	sltu	a5,a0,a5
80004354:	00b785b3          	add	a1,a5,a1
80004358:	f65ff0ef          	jal	ra,800042bc <set_mtimecmp>
	irq_enable(TIMER_IRQN);
8000435c:	00700513          	li	a0,7
80004360:	d08ff0ef          	jal	ra,80003868 <arch_irq_enable>
}
80004364:	00000513          	li	a0,0
80004368:	00c12083          	lw	ra,12(sp)
8000436c:	01010113          	addi	sp,sp,16
80004370:	00008067          	ret

80004374 <timer_isr>:
80004374:	00308013          	addi	zero,ra,3
{
80004378:	ff010113          	addi	sp,sp,-16
8000437c:	00112623          	sw	ra,12(sp)
80004380:	00812423          	sw	s0,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004384:	30047473          	csrrci	s0,mstatus,8
	uint64_t now = mtime();
80004388:	f79ff0ef          	jal	ra,80004300 <mtime>
8000438c:	00050693          	mv	a3,a0
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
80004390:	80009637          	lui	a2,0x80009
80004394:	ab862783          	lw	a5,-1352(a2) # 80008ab8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ab9>
80004398:	abc62703          	lw	a4,-1348(a2)
8000439c:	40f507b3          	sub	a5,a0,a5
800043a0:	00f53533          	sltu	a0,a0,a5
800043a4:	40e58733          	sub	a4,a1,a4
800043a8:	40a70733          	sub	a4,a4,a0
800043ac:	01871713          	slli	a4,a4,0x18
800043b0:	0087d513          	srli	a0,a5,0x8
800043b4:	00a76533          	or	a0,a4,a0
	last_count = now;
800043b8:	aad62c23          	sw	a3,-1352(a2)
800043bc:	aab62e23          	sw	a1,-1348(a2)
	__asm__ volatile ("csrs mstatus, %0"
800043c0:	00847413          	andi	s0,s0,8
800043c4:	30042073          	csrs	mstatus,s0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
800043c8:	75d010ef          	jal	ra,80006324 <sys_clock_announce>
}
800043cc:	00c12083          	lw	ra,12(sp)
800043d0:	00812403          	lw	s0,8(sp)
800043d4:	01010113          	addi	sp,sp,16
800043d8:	00008067          	ret

800043dc <sys_clock_set_timeout>:
800043dc:	00308013          	addi	zero,ra,3
	if (idle) {
800043e0:	0c059c63          	bnez	a1,800044b8 <sys_clock_set_timeout+0xdc>
{
800043e4:	ff010113          	addi	sp,sp,-16
800043e8:	00112623          	sw	ra,12(sp)
800043ec:	00812423          	sw	s0,8(sp)
800043f0:	00912223          	sw	s1,4(sp)
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
800043f4:	fff00793          	li	a5,-1
800043f8:	04f50a63          	beq	a0,a5,8000444c <sys_clock_set_timeout+0x70>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
800043fc:	00100793          	li	a5,1
80004400:	04a7dc63          	bge	a5,a0,80004458 <sys_clock_set_timeout+0x7c>
80004404:	008007b7          	lui	a5,0x800
80004408:	ffe78793          	addi	a5,a5,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
8000440c:	04a7ca63          	blt	a5,a0,80004460 <sys_clock_set_timeout+0x84>
80004410:	fff50413          	addi	s0,a0,-1
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004414:	300474f3          	csrrci	s1,mstatus,8
	uint64_t now = mtime();
80004418:	ee9ff0ef          	jal	ra,80004300 <mtime>
	uint32_t adj, cyc = ticks * CYC_PER_TICK;
8000441c:	00841793          	slli	a5,s0,0x8
	adj = (uint32_t)(now - last_count) + (CYC_PER_TICK - 1);
80004420:	800096b7          	lui	a3,0x80009
80004424:	ab86a703          	lw	a4,-1352(a3) # 80008ab8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ab9>
80004428:	abc6a583          	lw	a1,-1348(a3)
8000442c:	40e50633          	sub	a2,a0,a4
80004430:	0ff60613          	addi	a2,a2,255
	if (cyc <= MAX_CYC - adj) {
80004434:	800006b7          	lui	a3,0x80000
80004438:	fff6c693          	not	a3,a3
8000443c:	40c686b3          	sub	a3,a3,a2
80004440:	02f6e663          	bltu	a3,a5,8000446c <sys_clock_set_timeout+0x90>
		cyc += adj;
80004444:	00c787b3          	add	a5,a5,a2
80004448:	02c0006f          	j	80004474 <sys_clock_set_timeout+0x98>
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
8000444c:	00800537          	lui	a0,0x800
80004450:	ffe50513          	addi	a0,a0,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
80004454:	fb1ff06f          	j	80004404 <sys_clock_set_timeout+0x28>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
80004458:	00000413          	li	s0,0
8000445c:	fb9ff06f          	j	80004414 <sys_clock_set_timeout+0x38>
80004460:	00800537          	lui	a0,0x800
80004464:	ffe50413          	addi	s0,a0,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
80004468:	fadff06f          	j	80004414 <sys_clock_set_timeout+0x38>
		cyc = MAX_CYC;
8000446c:	800007b7          	lui	a5,0x80000
80004470:	fff7c793          	not	a5,a5
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
80004474:	f007f793          	andi	a5,a5,-256
	if ((int32_t)(cyc + last_count - now) < MIN_DELAY) {
80004478:	00f706b3          	add	a3,a4,a5
8000447c:	40a686b3          	sub	a3,a3,a0
80004480:	06300613          	li	a2,99
80004484:	00d64463          	blt	a2,a3,8000448c <sys_clock_set_timeout+0xb0>
		cyc += CYC_PER_TICK;
80004488:	10078793          	addi	a5,a5,256 # 80000100 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000101>
	set_mtimecmp(cyc + last_count);
8000448c:	00e78533          	add	a0,a5,a4
80004490:	00f537b3          	sltu	a5,a0,a5
80004494:	00b785b3          	add	a1,a5,a1
80004498:	e25ff0ef          	jal	ra,800042bc <set_mtimecmp>
	__asm__ volatile ("csrs mstatus, %0"
8000449c:	0084f493          	andi	s1,s1,8
800044a0:	3004a073          	csrs	mstatus,s1
}
800044a4:	00c12083          	lw	ra,12(sp)
800044a8:	00812403          	lw	s0,8(sp)
800044ac:	00412483          	lw	s1,4(sp)
800044b0:	01010113          	addi	sp,sp,16
800044b4:	00008067          	ret
800044b8:	00008067          	ret

800044bc <sys_clock_elapsed>:
800044bc:	00308013          	addi	zero,ra,3
{
800044c0:	ff010113          	addi	sp,sp,-16
800044c4:	00112623          	sw	ra,12(sp)
800044c8:	00812423          	sw	s0,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
800044cc:	30047473          	csrrci	s0,mstatus,8
	uint32_t ret = ((uint32_t)mtime() - (uint32_t)last_count) / CYC_PER_TICK;
800044d0:	e31ff0ef          	jal	ra,80004300 <mtime>
800044d4:	800097b7          	lui	a5,0x80009
800044d8:	ab87a783          	lw	a5,-1352(a5) # 80008ab8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ab9>
800044dc:	40f50533          	sub	a0,a0,a5
800044e0:	00855513          	srli	a0,a0,0x8
	__asm__ volatile ("csrs mstatus, %0"
800044e4:	00847413          	andi	s0,s0,8
800044e8:	30042073          	csrs	mstatus,s0
}
800044ec:	00c12083          	lw	ra,12(sp)
800044f0:	00812403          	lw	s0,8(sp)
800044f4:	01010113          	addi	sp,sp,16
800044f8:	00008067          	ret

800044fc <z_device_state_init>:
800044fc:	00308013          	addi	zero,ra,3
	const struct device *dev = __device_start;
80004500:	80007737          	lui	a4,0x80007
80004504:	77470713          	addi	a4,a4,1908 # 80007774 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007775>
	while (dev < __device_end) {
80004508:	0080006f          	j	80004510 <z_device_state_init+0x14>
		++dev;
8000450c:	01870713          	addi	a4,a4,24
	while (dev < __device_end) {
80004510:	800077b7          	lui	a5,0x80007
80004514:	78c78793          	addi	a5,a5,1932 # 8000778c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000778d>
80004518:	fef76ae3          	bltu	a4,a5,8000450c <z_device_state_init+0x10>
}
8000451c:	00008067          	ret

80004520 <z_sys_init_run_level>:
80004520:	00308013          	addi	zero,ra,3
{
80004524:	ff010113          	addi	sp,sp,-16
80004528:	00112623          	sw	ra,12(sp)
8000452c:	00812423          	sw	s0,8(sp)
80004530:	00912223          	sw	s1,4(sp)
80004534:	01212023          	sw	s2,0(sp)
80004538:	00050913          	mv	s2,a0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
8000453c:	800097b7          	lui	a5,0x80009
80004540:	00251713          	slli	a4,a0,0x2
80004544:	8b878793          	addi	a5,a5,-1864 # 800088b8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800088b9>
80004548:	00e787b3          	add	a5,a5,a4
8000454c:	0007a403          	lw	s0,0(a5)
80004550:	0280006f          	j	80004578 <z_sys_init_run_level+0x58>
					rc = -rc;
80004554:	40a00533          	neg	a0,a0
80004558:	0580006f          	j	800045b0 <z_sys_init_run_level+0x90>
				dev->state->init_res = rc;
8000455c:	00c4a783          	lw	a5,12(s1)
80004560:	00a78023          	sb	a0,0(a5)
			dev->state->initialized = true;
80004564:	00c4a703          	lw	a4,12(s1)
80004568:	00075783          	lhu	a5,0(a4)
8000456c:	1007e793          	ori	a5,a5,256
80004570:	00f71023          	sh	a5,0(a4)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
80004574:	00840413          	addi	s0,s0,8
80004578:	00190713          	addi	a4,s2,1
8000457c:	800097b7          	lui	a5,0x80009
80004580:	00271713          	slli	a4,a4,0x2
80004584:	8b878793          	addi	a5,a5,-1864 # 800088b8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800088b9>
80004588:	00e787b3          	add	a5,a5,a4
8000458c:	0007a783          	lw	a5,0(a5)
80004590:	02f47863          	bgeu	s0,a5,800045c0 <z_sys_init_run_level+0xa0>
		const struct device *dev = entry->dev;
80004594:	00442483          	lw	s1,4(s0)
		int rc = entry->init(dev);
80004598:	00042783          	lw	a5,0(s0)
8000459c:	00048513          	mv	a0,s1
800045a0:	000780e7          	jalr	a5
		if (dev != NULL) {
800045a4:	fc0488e3          	beqz	s1,80004574 <z_sys_init_run_level+0x54>
			if (rc != 0) {
800045a8:	fa050ee3          	beqz	a0,80004564 <z_sys_init_run_level+0x44>
				if (rc < 0) {
800045ac:	fa0544e3          	bltz	a0,80004554 <z_sys_init_run_level+0x34>
				if (rc > UINT8_MAX) {
800045b0:	0ff00793          	li	a5,255
800045b4:	faa7d4e3          	bge	a5,a0,8000455c <z_sys_init_run_level+0x3c>
					rc = UINT8_MAX;
800045b8:	0ff00513          	li	a0,255
800045bc:	fa1ff06f          	j	8000455c <z_sys_init_run_level+0x3c>
}
800045c0:	00c12083          	lw	ra,12(sp)
800045c4:	00812403          	lw	s0,8(sp)
800045c8:	00412483          	lw	s1,4(sp)
800045cc:	00012903          	lw	s2,0(sp)
800045d0:	01010113          	addi	sp,sp,16
800045d4:	00008067          	ret

800045d8 <z_device_is_ready>:
800045d8:	00308013          	addi	zero,ra,3
	if (dev == NULL) {
800045dc:	00050e63          	beqz	a0,800045f8 <z_device_is_ready+0x20>
	return dev->state->initialized && (dev->state->init_res == 0U);
800045e0:	00c52783          	lw	a5,12(a0)
800045e4:	0007a503          	lw	a0,0(a5)
800045e8:	1ff57513          	andi	a0,a0,511
800045ec:	f0050513          	addi	a0,a0,-256
800045f0:	00153513          	seqz	a0,a0
800045f4:	00008067          	ret
		return false;
800045f8:	00000513          	li	a0,0
}
800045fc:	00008067          	ret

80004600 <arch_system_halt>:
80004600:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004604:	300477f3          	csrrci	a5,mstatus,8
	for (;;) {
80004608:	0000006f          	j	80004608 <arch_system_halt+0x8>

8000460c <k_sys_fatal_error_handler>:
8000460c:	00308013          	addi	zero,ra,3
{
80004610:	ff010113          	addi	sp,sp,-16
80004614:	00112623          	sw	ra,12(sp)
	arch_system_halt(reason);
80004618:	fe9ff0ef          	jal	ra,80004600 <arch_system_halt>

8000461c <z_fatal_error>:
8000461c:	00308013          	addi	zero,ra,3
{
80004620:	fe010113          	addi	sp,sp,-32
80004624:	00112e23          	sw	ra,28(sp)
80004628:	00812c23          	sw	s0,24(sp)
8000462c:	00912a23          	sw	s1,20(sp)
80004630:	01212823          	sw	s2,16(sp)
80004634:	01312623          	sw	s3,12(sp)
80004638:	00050913          	mv	s2,a0
8000463c:	00058993          	mv	s3,a1
80004640:	300474f3          	csrrci	s1,mstatus,8
	return z_impl_z_current_get();
80004644:	7c4010ef          	jal	ra,80005e08 <z_impl_z_current_get>
80004648:	00050413          	mv	s0,a0
	k_sys_fatal_error_handler(reason, esf);
8000464c:	00098593          	mv	a1,s3
80004650:	00090513          	mv	a0,s2
80004654:	fb9ff0ef          	jal	ra,8000460c <k_sys_fatal_error_handler>
			  : "r" (key & MSTATUS_IEN)
80004658:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
8000465c:	3004a073          	csrs	mstatus,s1
	z_impl_k_thread_abort(thread);
80004660:	00040513          	mv	a0,s0
80004664:	061010ef          	jal	ra,80005ec4 <z_impl_k_thread_abort>
}
80004668:	01c12083          	lw	ra,28(sp)
8000466c:	01812403          	lw	s0,24(sp)
80004670:	01412483          	lw	s1,20(sp)
80004674:	01012903          	lw	s2,16(sp)
80004678:	00c12983          	lw	s3,12(sp)
8000467c:	02010113          	addi	sp,sp,32
80004680:	00008067          	ret

80004684 <init_idle_thread>:
80004684:	00308013          	addi	zero,ra,3
{
80004688:	fd010113          	addi	sp,sp,-48
8000468c:	02112623          	sw	ra,44(sp)
80004690:	02812423          	sw	s0,40(sp)
80004694:	02912223          	sw	s1,36(sp)
80004698:	03212023          	sw	s2,32(sp)
8000469c:	01312e23          	sw	s3,28(sp)
800046a0:	00050413          	mv	s0,a0
	struct k_thread *thread = &z_idle_threads[i];
800046a4:	00451913          	slli	s2,a0,0x4
800046a8:	00a909b3          	add	s3,s2,a0
800046ac:	00399993          	slli	s3,s3,0x3
800046b0:	800094b7          	lui	s1,0x80009
800046b4:	c4048493          	addi	s1,s1,-960 # 80008c40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008c41>
800046b8:	009989b3          	add	s3,s3,s1
	k_thread_stack_t *stack = z_idle_stacks[i];
800046bc:	00a51513          	slli	a0,a0,0xa
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
800046c0:	00141693          	slli	a3,s0,0x1
800046c4:	008686b3          	add	a3,a3,s0
800046c8:	00369693          	slli	a3,a3,0x3
	z_setup_new_thread(thread, stack,
800046cc:	00012223          	sw	zero,4(sp)
800046d0:	00100793          	li	a5,1
800046d4:	00f12023          	sw	a5,0(sp)
800046d8:	00f00893          	li	a7,15
800046dc:	00000813          	li	a6,0
800046e0:	00000793          	li	a5,0
800046e4:	80009737          	lui	a4,0x80009
800046e8:	fb870713          	addi	a4,a4,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800046ec:	00d70733          	add	a4,a4,a3
800046f0:	800056b7          	lui	a3,0x80005
800046f4:	c7868693          	addi	a3,a3,-904 # 80004c78 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80004c79>
800046f8:	40000613          	li	a2,1024
800046fc:	8000a5b7          	lui	a1,0x8000a
80004700:	fe058593          	addi	a1,a1,-32 # 80009fe0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009fe1>
80004704:	00a585b3          	add	a1,a1,a0
80004708:	00098513          	mv	a0,s3
8000470c:	398000ef          	jal	ra,80004aa4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
80004710:	00d9c783          	lbu	a5,13(s3)
80004714:	ffb7f793          	andi	a5,a5,-5
80004718:	00f986a3          	sb	a5,13(s3)
}
8000471c:	02c12083          	lw	ra,44(sp)
80004720:	02812403          	lw	s0,40(sp)
80004724:	02412483          	lw	s1,36(sp)
80004728:	02012903          	lw	s2,32(sp)
8000472c:	01c12983          	lw	s3,28(sp)
80004730:	03010113          	addi	sp,sp,48
80004734:	00008067          	ret

80004738 <bg_thread_main>:
80004738:	00308013          	addi	zero,ra,3
{
8000473c:	ff010113          	addi	sp,sp,-16
80004740:	00112623          	sw	ra,12(sp)
	z_sys_post_kernel = true;
80004744:	800097b7          	lui	a5,0x80009
80004748:	00100713          	li	a4,1
8000474c:	b0e78423          	sb	a4,-1272(a5) # 80008b08 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008b09>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
80004750:	00200513          	li	a0,2
80004754:	dcdff0ef          	jal	ra,80004520 <z_sys_init_run_level>
	boot_banner();
80004758:	521010ef          	jal	ra,80006478 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
8000475c:	00300513          	li	a0,3
80004760:	dc1ff0ef          	jal	ra,80004520 <z_sys_init_run_level>
	z_init_static_threads();
80004764:	418000ef          	jal	ra,80004b7c <z_init_static_threads>
	main();
80004768:	e35fd0ef          	jal	ra,8000259c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
8000476c:	800097b7          	lui	a5,0x80009
80004770:	cc878793          	addi	a5,a5,-824 # 80008cc8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008cc9>
80004774:	00c7c703          	lbu	a4,12(a5)
80004778:	ffe77713          	andi	a4,a4,-2
8000477c:	00e78623          	sb	a4,12(a5)
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
80004780:	00c12083          	lw	ra,12(sp)
80004784:	01010113          	addi	sp,sp,16
80004788:	00008067          	ret

8000478c <z_swap_unlocked>:
8000478c:	00308013          	addi	zero,ra,3
{
	return do_swap(key.key, lock, true);
}

static inline void z_swap_unlocked(void)
{
80004790:	ff010113          	addi	sp,sp,-16
80004794:	00112623          	sw	ra,12(sp)
80004798:	00812423          	sw	s0,8(sp)
8000479c:	00912223          	sw	s1,4(sp)
800047a0:	01212023          	sw	s2,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
800047a4:	300474f3          	csrrci	s1,mstatus,8
	old_thread = _current;
800047a8:	800097b7          	lui	a5,0x80009
800047ac:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800047b0:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
800047b4:	ff500793          	li	a5,-11
800047b8:	06f92c23          	sw	a5,120(s2)
800047bc:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
800047c0:	18d000ef          	jal	ra,8000514c <z_swap_next_thread>
	if (new_thread != old_thread) {
800047c4:	02a90263          	beq	s2,a0,800047e8 <z_swap_unlocked+0x5c>
800047c8:	00050413          	mv	s0,a0
		_current_cpu->current = new_thread;
800047cc:	800097b7          	lui	a5,0x80009
800047d0:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800047d4:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
800047d8:	029000ef          	jal	ra,80005000 <z_reset_time_slice>
	struct k_thread *old = CONTAINER_OF(switched_from, struct k_thread,
					    switch_handle);
#ifdef CONFIG_RISCV_ALWAYS_SWITCH_THROUGH_ECALL
	arch_syscall_invoke2((uintptr_t)new, (uintptr_t)old, RV_ECALL_SCHEDULE);
#else
	z_riscv_switch(new, old);
800047dc:	00090593          	mv	a1,s2
800047e0:	07c42503          	lw	a0,124(s0)
800047e4:	a08ff0ef          	jal	ra,800039ec <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
800047e8:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
800047ec:	3004a073          	csrs	mstatus,s1
	(void) do_swap(arch_irq_lock(), NULL, true);
}
800047f0:	00c12083          	lw	ra,12(sp)
800047f4:	00812403          	lw	s0,8(sp)
800047f8:	00412483          	lw	s1,4(sp)
800047fc:	00012903          	lw	s2,0(sp)
80004800:	01010113          	addi	sp,sp,16
80004804:	00008067          	ret

80004808 <switch_to_main_thread>:
80004808:	00308013          	addi	zero,ra,3
{
8000480c:	ff010113          	addi	sp,sp,-16
80004810:	00112623          	sw	ra,12(sp)
	z_swap_unlocked();
80004814:	f79ff0ef          	jal	ra,8000478c <z_swap_unlocked>

80004818 <z_early_memset>:
80004818:	00308013          	addi	zero,ra,3
{
8000481c:	ff010113          	addi	sp,sp,-16
80004820:	00112623          	sw	ra,12(sp)
__ssp_bos_icheck3(memset, void *, int)
80004824:	9f8fc0ef          	jal	ra,80000a1c <memset>
}
80004828:	00c12083          	lw	ra,12(sp)
8000482c:	01010113          	addi	sp,sp,16
80004830:	00008067          	ret

80004834 <z_bss_zero>:
80004834:	00308013          	addi	zero,ra,3
{
80004838:	ff010113          	addi	sp,sp,-16
8000483c:	00112623          	sw	ra,12(sp)
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
80004840:	80009537          	lui	a0,0x80009
80004844:	ab850613          	addi	a2,a0,-1352 # 80008ab8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ab9>
80004848:	800097b7          	lui	a5,0x80009
8000484c:	fdc78793          	addi	a5,a5,-36 # 80008fdc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fdd>
80004850:	40c78633          	sub	a2,a5,a2
80004854:	00000593          	li	a1,0
80004858:	ab850513          	addi	a0,a0,-1352
8000485c:	fbdff0ef          	jal	ra,80004818 <z_early_memset>
}
80004860:	00c12083          	lw	ra,12(sp)
80004864:	01010113          	addi	sp,sp,16
80004868:	00008067          	ret

8000486c <z_init_cpu>:
8000486c:	00308013          	addi	zero,ra,3
{
80004870:	ff010113          	addi	sp,sp,-16
80004874:	00112623          	sw	ra,12(sp)
80004878:	00812423          	sw	s0,8(sp)
8000487c:	00050413          	mv	s0,a0
	init_idle_thread(id);
80004880:	e05ff0ef          	jal	ra,80004684 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
80004884:	00441793          	slli	a5,s0,0x4
80004888:	008787b3          	add	a5,a5,s0
8000488c:	00379793          	slli	a5,a5,0x3
80004890:	80009737          	lui	a4,0x80009
80004894:	c4070713          	addi	a4,a4,-960 # 80008c40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008c41>
80004898:	00e787b3          	add	a5,a5,a4
8000489c:	80009737          	lui	a4,0x80009
800048a0:	fb870713          	addi	a4,a4,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800048a4:	00141693          	slli	a3,s0,0x1
800048a8:	00868633          	add	a2,a3,s0
800048ac:	00361613          	slli	a2,a2,0x3
800048b0:	00c70633          	add	a2,a4,a2
800048b4:	00f62623          	sw	a5,12(a2)
	_kernel.cpus[id].id = id;
800048b8:	00860a23          	sb	s0,20(a2)
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
800048bc:	00c41793          	slli	a5,s0,0xc
800048c0:	80009637          	lui	a2,0x80009
800048c4:	fe060613          	addi	a2,a2,-32 # 80008fe0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fe1>
800048c8:	00c787b3          	add	a5,a5,a2
800048cc:	00001637          	lui	a2,0x1
800048d0:	00c787b3          	add	a5,a5,a2
	_kernel.cpus[id].irq_stack =
800048d4:	008686b3          	add	a3,a3,s0
800048d8:	00369693          	slli	a3,a3,0x3
800048dc:	00d70733          	add	a4,a4,a3
800048e0:	00f72223          	sw	a5,4(a4)
}
800048e4:	00c12083          	lw	ra,12(sp)
800048e8:	00812403          	lw	s0,8(sp)
800048ec:	01010113          	addi	sp,sp,16
800048f0:	00008067          	ret

800048f4 <prepare_multithreading>:
800048f4:	00308013          	addi	zero,ra,3
{
800048f8:	fe010113          	addi	sp,sp,-32
800048fc:	00112e23          	sw	ra,28(sp)
80004900:	00812c23          	sw	s0,24(sp)
80004904:	00912a23          	sw	s1,20(sp)
80004908:	01212823          	sw	s2,16(sp)
	z_sched_init();
8000490c:	4cc010ef          	jal	ra,80005dd8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
80004910:	800097b7          	lui	a5,0x80009
80004914:	800094b7          	lui	s1,0x80009
80004918:	cc848913          	addi	s2,s1,-824 # 80008cc8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008cc9>
8000491c:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80004920:	0127ac23          	sw	s2,24(a5)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
80004924:	800097b7          	lui	a5,0x80009
80004928:	8cc78793          	addi	a5,a5,-1844 # 800088cc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800088cd>
8000492c:	00f12223          	sw	a5,4(sp)
80004930:	00100793          	li	a5,1
80004934:	00f12023          	sw	a5,0(sp)
80004938:	00000893          	li	a7,0
8000493c:	00000813          	li	a6,0
80004940:	00000793          	li	a5,0
80004944:	00000713          	li	a4,0
80004948:	800046b7          	lui	a3,0x80004
8000494c:	73868693          	addi	a3,a3,1848 # 80004738 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80004739>
80004950:	00001637          	lui	a2,0x1
80004954:	8000a5b7          	lui	a1,0x8000a
80004958:	3e058593          	addi	a1,a1,992 # 8000a3e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a3e1>
8000495c:	cc848513          	addi	a0,s1,-824
80004960:	144000ef          	jal	ra,80004aa4 <z_setup_new_thread>
80004964:	00050413          	mv	s0,a0
80004968:	00d94783          	lbu	a5,13(s2)
8000496c:	ffb7f793          	andi	a5,a5,-5
80004970:	00f906a3          	sb	a5,13(s2)
	z_ready_thread(&z_main_thread);
80004974:	cc848513          	addi	a0,s1,-824
80004978:	5e5000ef          	jal	ra,8000575c <z_ready_thread>
	z_init_cpu(0);
8000497c:	00000513          	li	a0,0
80004980:	eedff0ef          	jal	ra,8000486c <z_init_cpu>
}
80004984:	00040513          	mv	a0,s0
80004988:	01c12083          	lw	ra,28(sp)
8000498c:	01812403          	lw	s0,24(sp)
80004990:	01412483          	lw	s1,20(sp)
80004994:	01012903          	lw	s2,16(sp)
80004998:	02010113          	addi	sp,sp,32
8000499c:	00008067          	ret

800049a0 <z_cstart>:
800049a0:	00308013          	addi	zero,ra,3
{
800049a4:	f6010113          	addi	sp,sp,-160
800049a8:	08112e23          	sw	ra,156(sp)
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
800049ac:	00100793          	li	a5,1
800049b0:	00f10aa3          	sb	a5,21(sp)
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
800049b4:	00f10a23          	sb	a5,20(sp)
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
800049b8:	08012423          	sw	zero,136(sp)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
800049bc:	800097b7          	lui	a5,0x80009
800049c0:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800049c4:	00810713          	addi	a4,sp,8
800049c8:	00e7a423          	sw	a4,8(a5)
	z_device_state_init();
800049cc:	b31ff0ef          	jal	ra,800044fc <z_device_state_init>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
800049d0:	00000513          	li	a0,0
800049d4:	b4dff0ef          	jal	ra,80004520 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
800049d8:	00100513          	li	a0,1
800049dc:	b45ff0ef          	jal	ra,80004520 <z_sys_init_run_level>
	switch_to_main_thread(prepare_multithreading());
800049e0:	f15ff0ef          	jal	ra,800048f4 <prepare_multithreading>
800049e4:	e25ff0ef          	jal	ra,80004808 <switch_to_main_thread>

800049e8 <setup_thread_stack>:
800049e8:	00308013          	addi	zero,ra,3
{
800049ec:	ff010113          	addi	sp,sp,-16
800049f0:	00112623          	sw	ra,12(sp)
800049f4:	00812423          	sw	s0,8(sp)
800049f8:	00058513          	mv	a0,a1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
800049fc:	00f60613          	addi	a2,a2,15 # 100f <CONFIG_ISR_STACK_SIZE+0xf>
80004a00:	ff067613          	andi	a2,a2,-16
	stack_ptr = (char *)stack + stack_obj_size;
80004a04:	00c58433          	add	s0,a1,a2
80004a08:	0aa00593          	li	a1,170
80004a0c:	810fc0ef          	jal	ra,80000a1c <memset>
}
80004a10:	00040513          	mv	a0,s0
80004a14:	00c12083          	lw	ra,12(sp)
80004a18:	00812403          	lw	s0,8(sp)
80004a1c:	01010113          	addi	sp,sp,16
80004a20:	00008067          	ret

80004a24 <z_impl_k_thread_start>:
80004a24:	00308013          	addi	zero,ra,3
{
80004a28:	ff010113          	addi	sp,sp,-16
80004a2c:	00112623          	sw	ra,12(sp)
	z_sched_start(thread);
80004a30:	58d000ef          	jal	ra,800057bc <z_sched_start>
}
80004a34:	00c12083          	lw	ra,12(sp)
80004a38:	01010113          	addi	sp,sp,16
80004a3c:	00008067          	ret

80004a40 <schedule_new_thread>:
80004a40:	00308013          	addi	zero,ra,3
{
80004a44:	ff010113          	addi	sp,sp,-16
80004a48:	00112623          	sw	ra,12(sp)
80004a4c:	00060693          	mv	a3,a2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
80004a50:	00b667b3          	or	a5,a2,a1
80004a54:	00079a63          	bnez	a5,80004a68 <schedule_new_thread+0x28>
	z_impl_k_thread_start(thread);
80004a58:	fcdff0ef          	jal	ra,80004a24 <z_impl_k_thread_start>
}
80004a5c:	00c12083          	lw	ra,12(sp)
80004a60:	01010113          	addi	sp,sp,16
80004a64:	00008067          	ret
80004a68:	00058613          	mv	a2,a1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
80004a6c:	800065b7          	lui	a1,0x80006
80004a70:	81458593          	addi	a1,a1,-2028 # 80005814 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80005815>
80004a74:	01850513          	addi	a0,a0,24
80004a78:	5d4010ef          	jal	ra,8000604c <z_add_timeout>
80004a7c:	fe1ff06f          	j	80004a5c <schedule_new_thread+0x1c>

80004a80 <z_init_thread_base>:
80004a80:	00308013          	addi	zero,ra,3
	thread_base->pended_on = NULL;
80004a84:	00052423          	sw	zero,8(a0)
	thread_base->user_options = (uint8_t)options;
80004a88:	00d50623          	sb	a3,12(a0)
	thread_base->thread_state = (uint8_t)initial_state;
80004a8c:	00c506a3          	sb	a2,13(a0)
	thread_base->prio = priority;
80004a90:	00b50723          	sb	a1,14(a0)
	thread_base->sched_locked = 0U;
80004a94:	000507a3          	sb	zero,15(a0)
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
80004a98:	00052c23          	sw	zero,24(a0)
	node->prev = NULL;
80004a9c:	00052e23          	sw	zero,28(a0)
}
80004aa0:	00008067          	ret

80004aa4 <z_setup_new_thread>:
80004aa4:	00308013          	addi	zero,ra,3
{
80004aa8:	fe010113          	addi	sp,sp,-32
80004aac:	00112e23          	sw	ra,28(sp)
80004ab0:	00812c23          	sw	s0,24(sp)
80004ab4:	00912a23          	sw	s1,20(sp)
80004ab8:	01212823          	sw	s2,16(sp)
80004abc:	01312623          	sw	s3,12(sp)
80004ac0:	01412423          	sw	s4,8(sp)
80004ac4:	01512223          	sw	s5,4(sp)
80004ac8:	01612023          	sw	s6,0(sp)
80004acc:	00050413          	mv	s0,a0
80004ad0:	00058913          	mv	s2,a1
80004ad4:	00060493          	mv	s1,a2
80004ad8:	00068993          	mv	s3,a3
80004adc:	00070a13          	mv	s4,a4
80004ae0:	00078a93          	mv	s5,a5
80004ae4:	00080b13          	mv	s6,a6
80004ae8:	00088593          	mv	a1,a7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
80004aec:	06c50793          	addi	a5,a0,108
	list->head = (sys_dnode_t *)list;
80004af0:	06f52623          	sw	a5,108(a0)
	list->tail = (sys_dnode_t *)list;
80004af4:	06f52823          	sw	a5,112(a0)
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
80004af8:	02012683          	lw	a3,32(sp)
80004afc:	00400613          	li	a2,4
80004b00:	f81ff0ef          	jal	ra,80004a80 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
80004b04:	00048613          	mv	a2,s1
80004b08:	00090593          	mv	a1,s2
80004b0c:	00040513          	mv	a0,s0
80004b10:	ed9ff0ef          	jal	ra,800049e8 <setup_thread_stack>
80004b14:	00050493          	mv	s1,a0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
80004b18:	000b0813          	mv	a6,s6
80004b1c:	000a8793          	mv	a5,s5
80004b20:	000a0713          	mv	a4,s4
80004b24:	00098693          	mv	a3,s3
80004b28:	00050613          	mv	a2,a0
80004b2c:	00090593          	mv	a1,s2
80004b30:	00040513          	mv	a0,s0
80004b34:	f65fe0ef          	jal	ra,80003a98 <arch_new_thread>
	new_thread->init_data = NULL;
80004b38:	06042423          	sw	zero,104(s0)
	new_thread->resource_pool = _current->resource_pool;
80004b3c:	800097b7          	lui	a5,0x80009
80004b40:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80004b44:	0087a783          	lw	a5,8(a5)
80004b48:	0807a783          	lw	a5,128(a5)
80004b4c:	08f42023          	sw	a5,128(s0)
}
80004b50:	00048513          	mv	a0,s1
80004b54:	01c12083          	lw	ra,28(sp)
80004b58:	01812403          	lw	s0,24(sp)
80004b5c:	01412483          	lw	s1,20(sp)
80004b60:	01012903          	lw	s2,16(sp)
80004b64:	00c12983          	lw	s3,12(sp)
80004b68:	00812a03          	lw	s4,8(sp)
80004b6c:	00412a83          	lw	s5,4(sp)
80004b70:	00012b03          	lw	s6,0(sp)
80004b74:	02010113          	addi	sp,sp,32
80004b78:	00008067          	ret

80004b7c <z_init_static_threads>:
80004b7c:	00308013          	addi	zero,ra,3
{
80004b80:	fe010113          	addi	sp,sp,-32
80004b84:	00112e23          	sw	ra,28(sp)
80004b88:	00812c23          	sw	s0,24(sp)
80004b8c:	00912a23          	sw	s1,20(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
80004b90:	80008437          	lui	s0,0x80008
80004b94:	98c40413          	addi	s0,s0,-1652 # 8000798c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000798d>
80004b98:	0440006f          	j	80004bdc <z_init_static_threads+0x60>
		z_setup_new_thread(
80004b9c:	02c42783          	lw	a5,44(s0)
80004ba0:	00f12223          	sw	a5,4(sp)
80004ba4:	02042783          	lw	a5,32(s0)
80004ba8:	00f12023          	sw	a5,0(sp)
80004bac:	01c42883          	lw	a7,28(s0)
80004bb0:	01842803          	lw	a6,24(s0)
80004bb4:	01442783          	lw	a5,20(s0)
80004bb8:	01042703          	lw	a4,16(s0)
80004bbc:	00c42683          	lw	a3,12(s0)
80004bc0:	00842603          	lw	a2,8(s0)
80004bc4:	00442583          	lw	a1,4(s0)
80004bc8:	00042503          	lw	a0,0(s0)
80004bcc:	ed9ff0ef          	jal	ra,80004aa4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
80004bd0:	00042783          	lw	a5,0(s0)
80004bd4:	0687a423          	sw	s0,104(a5)
	_FOREACH_STATIC_THREAD(thread_data) {
80004bd8:	03040413          	addi	s0,s0,48
80004bdc:	800087b7          	lui	a5,0x80008
80004be0:	98c78793          	addi	a5,a5,-1652 # 8000798c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000798d>
80004be4:	faf46ce3          	bltu	s0,a5,80004b9c <z_init_static_threads+0x20>
	k_sched_lock();
80004be8:	528000ef          	jal	ra,80005110 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
80004bec:	80008437          	lui	s0,0x80008
80004bf0:	98c40413          	addi	s0,s0,-1652 # 8000798c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000798d>
80004bf4:	0440006f          	j	80004c38 <z_init_static_threads+0xbc>
					    K_MSEC(thread_data->init_delay));
80004bf8:	41f7d593          	srai	a1,a5,0x1f
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
80004bfc:	0197d713          	srli	a4,a5,0x19
80004c00:	00759593          	slli	a1,a1,0x7
80004c04:	00b765b3          	or	a1,a4,a1
80004c08:	00779793          	slli	a5,a5,0x7
80004c0c:	3e778513          	addi	a0,a5,999
80004c10:	00f537b3          	sltu	a5,a0,a5
80004c14:	3e800613          	li	a2,1000
80004c18:	00000693          	li	a3,0
80004c1c:	00b785b3          	add	a1,a5,a1
80004c20:	dc4fb0ef          	jal	ra,800001e4 <__udivdi3>
			schedule_new_thread(thread_data->init_thread,
80004c24:	00058613          	mv	a2,a1
80004c28:	00050593          	mv	a1,a0
80004c2c:	00048513          	mv	a0,s1
80004c30:	e11ff0ef          	jal	ra,80004a40 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
80004c34:	03040413          	addi	s0,s0,48
80004c38:	800087b7          	lui	a5,0x80008
80004c3c:	98c78793          	addi	a5,a5,-1652 # 8000798c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000798d>
80004c40:	02f47063          	bgeu	s0,a5,80004c60 <z_init_static_threads+0xe4>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
80004c44:	02442783          	lw	a5,36(s0)
80004c48:	fff00713          	li	a4,-1
80004c4c:	fee784e3          	beq	a5,a4,80004c34 <z_init_static_threads+0xb8>
			schedule_new_thread(thread_data->init_thread,
80004c50:	00042483          	lw	s1,0(s0)
					    K_MSEC(thread_data->init_delay));
80004c54:	fa07d2e3          	bgez	a5,80004bf8 <z_init_static_threads+0x7c>
80004c58:	00000793          	li	a5,0
80004c5c:	f9dff06f          	j	80004bf8 <z_init_static_threads+0x7c>
	k_sched_unlock();
80004c60:	7ed000ef          	jal	ra,80005c4c <k_sched_unlock>
}
80004c64:	01c12083          	lw	ra,28(sp)
80004c68:	01812403          	lw	s0,24(sp)
80004c6c:	01412483          	lw	s1,20(sp)
80004c70:	02010113          	addi	sp,sp,32
80004c74:	00008067          	ret

80004c78 <idle>:
80004c78:	00308013          	addi	zero,ra,3
{
80004c7c:	ff010113          	addi	sp,sp,-16
80004c80:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004c84:	300477f3          	csrrci	a5,mstatus,8
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
80004c88:	bb9fe0ef          	jal	ra,80003840 <arch_cpu_idle>
80004c8c:	ff9ff06f          	j	80004c84 <idle+0xc>

80004c90 <new_prio_for_inheritance>:
80004c90:	00308013          	addi	zero,ra,3
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
80004c94:	00b55463          	bge	a0,a1,80004c9c <new_prio_for_inheritance+0xc>
80004c98:	00050593          	mv	a1,a0
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
80004c9c:	f8100793          	li	a5,-127
80004ca0:	00f5c663          	blt	a1,a5,80004cac <new_prio_for_inheritance+0x1c>
80004ca4:	00058513          	mv	a0,a1
80004ca8:	00008067          	ret
80004cac:	f8100513          	li	a0,-127
}
80004cb0:	00008067          	ret

80004cb4 <adjust_owner_prio>:
80004cb4:	00308013          	addi	zero,ra,3
	if (mutex->owner->base.prio != new_prio) {
80004cb8:	00852503          	lw	a0,8(a0)
80004cbc:	00e50783          	lb	a5,14(a0)
80004cc0:	00b79663          	bne	a5,a1,80004ccc <adjust_owner_prio+0x18>
	return false;
80004cc4:	00000513          	li	a0,0
}
80004cc8:	00008067          	ret
{
80004ccc:	ff010113          	addi	sp,sp,-16
80004cd0:	00112623          	sw	ra,12(sp)
		return z_set_prio(mutex->owner, new_prio);
80004cd4:	629000ef          	jal	ra,80005afc <z_set_prio>
}
80004cd8:	00c12083          	lw	ra,12(sp)
80004cdc:	01010113          	addi	sp,sp,16
80004ce0:	00008067          	ret

80004ce4 <z_impl_k_mutex_lock>:
80004ce4:	00308013          	addi	zero,ra,3
{
80004ce8:	fe010113          	addi	sp,sp,-32
80004cec:	00112e23          	sw	ra,28(sp)
80004cf0:	00812c23          	sw	s0,24(sp)
80004cf4:	00912a23          	sw	s1,20(sp)
80004cf8:	01212823          	sw	s2,16(sp)
80004cfc:	01312623          	sw	s3,12(sp)
80004d00:	01412423          	sw	s4,8(sp)
80004d04:	00050413          	mv	s0,a0
80004d08:	300474f3          	csrrci	s1,mstatus,8
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
80004d0c:	00c52783          	lw	a5,12(a0)
80004d10:	06079063          	bnez	a5,80004d70 <z_impl_k_mutex_lock+0x8c>
					_current->base.prio :
80004d14:	10079063          	bnez	a5,80004e14 <z_impl_k_mutex_lock+0x130>
80004d18:	80009737          	lui	a4,0x80009
80004d1c:	fb870713          	addi	a4,a4,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80004d20:	00872703          	lw	a4,8(a4)
80004d24:	00e70703          	lb	a4,14(a4)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
80004d28:	00e42823          	sw	a4,16(s0)
		mutex->lock_count++;
80004d2c:	00178793          	addi	a5,a5,1
80004d30:	00f42623          	sw	a5,12(s0)
		mutex->owner = _current;
80004d34:	800097b7          	lui	a5,0x80009
80004d38:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80004d3c:	0087a783          	lw	a5,8(a5)
80004d40:	00f42423          	sw	a5,8(s0)
	__asm__ volatile ("csrs mstatus, %0"
80004d44:	0084f493          	andi	s1,s1,8
80004d48:	3004a073          	csrs	mstatus,s1
		return 0;
80004d4c:	00000513          	li	a0,0
}
80004d50:	01c12083          	lw	ra,28(sp)
80004d54:	01812403          	lw	s0,24(sp)
80004d58:	01412483          	lw	s1,20(sp)
80004d5c:	01012903          	lw	s2,16(sp)
80004d60:	00c12983          	lw	s3,12(sp)
80004d64:	00812a03          	lw	s4,8(sp)
80004d68:	02010113          	addi	sp,sp,32
80004d6c:	00008067          	ret
80004d70:	00058993          	mv	s3,a1
80004d74:	00060913          	mv	s2,a2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
80004d78:	00852683          	lw	a3,8(a0)
80004d7c:	80009737          	lui	a4,0x80009
80004d80:	fb870713          	addi	a4,a4,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80004d84:	00872703          	lw	a4,8(a4)
80004d88:	f8e686e3          	beq	a3,a4,80004d14 <z_impl_k_mutex_lock+0x30>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
80004d8c:	00b667b3          	or	a5,a2,a1
80004d90:	08078663          	beqz	a5,80004e1c <z_impl_k_mutex_lock+0x138>
					    mutex->owner->base.prio);
80004d94:	00e68a03          	lb	s4,14(a3)
	new_prio = new_prio_for_inheritance(_current->base.prio,
80004d98:	000a0593          	mv	a1,s4
80004d9c:	00e70503          	lb	a0,14(a4)
80004da0:	ef1ff0ef          	jal	ra,80004c90 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
80004da4:	09454463          	blt	a0,s4,80004e2c <z_impl_k_mutex_lock+0x148>
	bool resched = false;
80004da8:	00000a13          	li	s4,0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
80004dac:	00098693          	mv	a3,s3
80004db0:	00090713          	mv	a4,s2
80004db4:	00040613          	mv	a2,s0
80004db8:	00048593          	mv	a1,s1
80004dbc:	80009537          	lui	a0,0x80009
80004dc0:	fdc50513          	addi	a0,a0,-36 # 80008fdc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fdd>
80004dc4:	4e1000ef          	jal	ra,80005aa4 <z_pend_curr>
	if (got_mutex == 0) {
80004dc8:	f80504e3          	beqz	a0,80004d50 <z_impl_k_mutex_lock+0x6c>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004dcc:	300474f3          	csrrci	s1,mstatus,8
	if (likely(mutex->owner != NULL)) {
80004dd0:	00842783          	lw	a5,8(s0)
80004dd4:	06078a63          	beqz	a5,80004e48 <z_impl_k_mutex_lock+0x164>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
80004dd8:	00042783          	lw	a5,0(s0)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
80004ddc:	06878263          	beq	a5,s0,80004e40 <z_impl_k_mutex_lock+0x15c>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
80004de0:	06078063          	beqz	a5,80004e40 <z_impl_k_mutex_lock+0x15c>
80004de4:	01042583          	lw	a1,16(s0)
80004de8:	00e78503          	lb	a0,14(a5)
80004dec:	ea5ff0ef          	jal	ra,80004c90 <new_prio_for_inheritance>
80004df0:	00050593          	mv	a1,a0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
80004df4:	00040513          	mv	a0,s0
80004df8:	ebdff0ef          	jal	ra,80004cb4 <adjust_owner_prio>
80004dfc:	04051863          	bnez	a0,80004e4c <z_impl_k_mutex_lock+0x168>
80004e00:	040a1663          	bnez	s4,80004e4c <z_impl_k_mutex_lock+0x168>
	__asm__ volatile ("csrs mstatus, %0"
80004e04:	0084f493          	andi	s1,s1,8
80004e08:	3004a073          	csrs	mstatus,s1
	return -EAGAIN;
80004e0c:	ff500513          	li	a0,-11
80004e10:	f41ff06f          	j	80004d50 <z_impl_k_mutex_lock+0x6c>
					_current->base.prio :
80004e14:	01042703          	lw	a4,16(s0)
80004e18:	f11ff06f          	j	80004d28 <z_impl_k_mutex_lock+0x44>
80004e1c:	0084f493          	andi	s1,s1,8
80004e20:	3004a073          	csrs	mstatus,s1
		return -EBUSY;
80004e24:	ff000513          	li	a0,-16
80004e28:	f29ff06f          	j	80004d50 <z_impl_k_mutex_lock+0x6c>
		resched = adjust_owner_prio(mutex, new_prio);
80004e2c:	00050593          	mv	a1,a0
80004e30:	00040513          	mv	a0,s0
80004e34:	e81ff0ef          	jal	ra,80004cb4 <adjust_owner_prio>
80004e38:	00050a13          	mv	s4,a0
80004e3c:	f71ff06f          	j	80004dac <z_impl_k_mutex_lock+0xc8>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
80004e40:	01042583          	lw	a1,16(s0)
80004e44:	fb1ff06f          	j	80004df4 <z_impl_k_mutex_lock+0x110>
	if (resched) {
80004e48:	fa0a0ee3          	beqz	s4,80004e04 <z_impl_k_mutex_lock+0x120>
		z_reschedule(&lock, key);
80004e4c:	00048593          	mv	a1,s1
80004e50:	80009537          	lui	a0,0x80009
80004e54:	fdc50513          	addi	a0,a0,-36 # 80008fdc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fdd>
80004e58:	464000ef          	jal	ra,800052bc <z_reschedule>
	return -EAGAIN;
80004e5c:	ff500513          	li	a0,-11
80004e60:	ef1ff06f          	j	80004d50 <z_impl_k_mutex_lock+0x6c>

80004e64 <z_impl_k_mutex_unlock>:
80004e64:	00308013          	addi	zero,ra,3
	CHECKIF(mutex->owner == NULL) {
80004e68:	00852703          	lw	a4,8(a0)
80004e6c:	0a070663          	beqz	a4,80004f18 <z_impl_k_mutex_unlock+0xb4>
{
80004e70:	ff010113          	addi	sp,sp,-16
80004e74:	00112623          	sw	ra,12(sp)
80004e78:	00812423          	sw	s0,8(sp)
80004e7c:	00912223          	sw	s1,4(sp)
80004e80:	00050413          	mv	s0,a0
	CHECKIF(mutex->owner != _current) {
80004e84:	800097b7          	lui	a5,0x80009
80004e88:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80004e8c:	0087a783          	lw	a5,8(a5)
80004e90:	08f71863          	bne	a4,a5,80004f20 <z_impl_k_mutex_unlock+0xbc>
	if (mutex->lock_count > 1U) {
80004e94:	00c52783          	lw	a5,12(a0)
80004e98:	00100713          	li	a4,1
80004e9c:	02f77263          	bgeu	a4,a5,80004ec0 <z_impl_k_mutex_unlock+0x5c>
		mutex->lock_count--;
80004ea0:	fff78793          	addi	a5,a5,-1
80004ea4:	00f52623          	sw	a5,12(a0)
	return 0;
80004ea8:	00000513          	li	a0,0
}
80004eac:	00c12083          	lw	ra,12(sp)
80004eb0:	00812403          	lw	s0,8(sp)
80004eb4:	00412483          	lw	s1,4(sp)
80004eb8:	01010113          	addi	sp,sp,16
80004ebc:	00008067          	ret
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004ec0:	300474f3          	csrrci	s1,mstatus,8
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
80004ec4:	01052583          	lw	a1,16(a0)
80004ec8:	dedff0ef          	jal	ra,80004cb4 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
80004ecc:	00040513          	mv	a0,s0
80004ed0:	67d000ef          	jal	ra,80005d4c <z_unpend_first_thread>
	mutex->owner = new_owner;
80004ed4:	00a42423          	sw	a0,8(s0)
	if (new_owner != NULL) {
80004ed8:	02050663          	beqz	a0,80004f04 <z_impl_k_mutex_unlock+0xa0>
		mutex->owner_orig_prio = new_owner->base.prio;
80004edc:	00e50783          	lb	a5,14(a0)
80004ee0:	00f42823          	sw	a5,16(s0)
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
80004ee4:	06052c23          	sw	zero,120(a0)
		z_ready_thread(new_owner);
80004ee8:	075000ef          	jal	ra,8000575c <z_ready_thread>
		z_reschedule(&lock, key);
80004eec:	00048593          	mv	a1,s1
80004ef0:	80009537          	lui	a0,0x80009
80004ef4:	fdc50513          	addi	a0,a0,-36 # 80008fdc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fdd>
80004ef8:	3c4000ef          	jal	ra,800052bc <z_reschedule>
	return 0;
80004efc:	00000513          	li	a0,0
80004f00:	fadff06f          	j	80004eac <z_impl_k_mutex_unlock+0x48>
		mutex->lock_count = 0U;
80004f04:	00042623          	sw	zero,12(s0)
	__asm__ volatile ("csrs mstatus, %0"
80004f08:	0084f493          	andi	s1,s1,8
80004f0c:	3004a073          	csrs	mstatus,s1
	return 0;
80004f10:	00000513          	li	a0,0
80004f14:	f99ff06f          	j	80004eac <z_impl_k_mutex_unlock+0x48>
		return -EINVAL;
80004f18:	fea00513          	li	a0,-22
}
80004f1c:	00008067          	ret
		return -EPERM;
80004f20:	fff00513          	li	a0,-1
80004f24:	f89ff06f          	j	80004eac <z_impl_k_mutex_unlock+0x48>

80004f28 <sliceable>:
80004f28:	00308013          	addi	zero,ra,3
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
80004f2c:	00e55703          	lhu	a4,14(a0)
		&& !z_is_idle_thread_object(thread);
80004f30:	07f00793          	li	a5,127
80004f34:	02e7ea63          	bltu	a5,a4,80004f68 <sliceable+0x40>
	uint8_t state = thread->base.thread_state;
80004f38:	00d54783          	lbu	a5,13(a0)
		&& !z_is_thread_prevented_from_running(thread)
80004f3c:	01f7f793          	andi	a5,a5,31
80004f40:	02079863          	bnez	a5,80004f70 <sliceable+0x48>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
80004f44:	00e50703          	lb	a4,14(a0)
80004f48:	800097b7          	lui	a5,0x80009
80004f4c:	af07a783          	lw	a5,-1296(a5) # 80008af0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008af1>
80004f50:	02f74463          	blt	a4,a5,80004f78 <sliceable+0x50>
		&& !z_is_idle_thread_object(thread);
80004f54:	800097b7          	lui	a5,0x80009
80004f58:	c4078793          	addi	a5,a5,-960 # 80008c40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008c41>
80004f5c:	02f50263          	beq	a0,a5,80004f80 <sliceable+0x58>
80004f60:	00100513          	li	a0,1
80004f64:	00008067          	ret
80004f68:	00000513          	li	a0,0
80004f6c:	00008067          	ret
80004f70:	00000513          	li	a0,0
80004f74:	00008067          	ret
80004f78:	00000513          	li	a0,0
80004f7c:	00008067          	ret
80004f80:	00000513          	li	a0,0
}
80004f84:	00008067          	ret

80004f88 <thread_active_elsewhere>:
80004f88:	00308013          	addi	zero,ra,3
}
80004f8c:	00000513          	li	a0,0
80004f90:	00008067          	ret

80004f94 <pended_on_thread>:
80004f94:	00308013          	addi	zero,ra,3
}
80004f98:	00852503          	lw	a0,8(a0)
80004f9c:	00008067          	ret

80004fa0 <add_thread_timeout>:
80004fa0:	00308013          	addi	zero,ra,3
{
80004fa4:	00060693          	mv	a3,a2
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
80004fa8:	fff00793          	li	a5,-1
80004fac:	00b79663          	bne	a5,a1,80004fb8 <add_thread_timeout+0x18>
80004fb0:	00f61463          	bne	a2,a5,80004fb8 <add_thread_timeout+0x18>
80004fb4:	00008067          	ret
{
80004fb8:	ff010113          	addi	sp,sp,-16
80004fbc:	00112623          	sw	ra,12(sp)
80004fc0:	00058613          	mv	a2,a1
80004fc4:	800065b7          	lui	a1,0x80006
80004fc8:	81458593          	addi	a1,a1,-2028 # 80005814 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80005815>
80004fcc:	01850513          	addi	a0,a0,24
80004fd0:	07c010ef          	jal	ra,8000604c <z_add_timeout>
}
80004fd4:	00c12083          	lw	ra,12(sp)
80004fd8:	01010113          	addi	sp,sp,16
80004fdc:	00008067          	ret

80004fe0 <z_sched_prio_cmp>:
80004fe0:	00308013          	addi	zero,ra,3
	int32_t b1 = thread_1->base.prio;
80004fe4:	00e50783          	lb	a5,14(a0)
	int32_t b2 = thread_2->base.prio;
80004fe8:	00e58503          	lb	a0,14(a1)
	if (b1 != b2) {
80004fec:	00a78663          	beq	a5,a0,80004ff8 <z_sched_prio_cmp+0x18>
		return b2 - b1;
80004ff0:	40f50533          	sub	a0,a0,a5
80004ff4:	00008067          	ret
	return 0;
80004ff8:	00000513          	li	a0,0
}
80004ffc:	00008067          	ret

80005000 <z_reset_time_slice>:
80005000:	00308013          	addi	zero,ra,3
{
80005004:	ff010113          	addi	sp,sp,-16
80005008:	00112623          	sw	ra,12(sp)
8000500c:	00812423          	sw	s0,8(sp)
	int ret = slice_ticks;
80005010:	800097b7          	lui	a5,0x80009
80005014:	af47a403          	lw	s0,-1292(a5) # 80008af4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008af5>
	if (slice_time(curr) != 0) {
80005018:	00041a63          	bnez	s0,8000502c <z_reset_time_slice+0x2c>
}
8000501c:	00c12083          	lw	ra,12(sp)
80005020:	00812403          	lw	s0,8(sp)
80005024:	01010113          	addi	sp,sp,16
80005028:	00008067          	ret
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
8000502c:	c90ff0ef          	jal	ra,800044bc <sys_clock_elapsed>
80005030:	00a40433          	add	s0,s0,a0
80005034:	800097b7          	lui	a5,0x80009
80005038:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
8000503c:	0087a823          	sw	s0,16(a5)
		z_set_timeout_expiry(slice_time(curr), false);
80005040:	00000593          	li	a1,0
80005044:	800097b7          	lui	a5,0x80009
80005048:	af47a503          	lw	a0,-1292(a5) # 80008af4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008af5>
8000504c:	23c010ef          	jal	ra,80006288 <z_set_timeout_expiry>
}
80005050:	fcdff06f          	j	8000501c <z_reset_time_slice+0x1c>

80005054 <k_sched_time_slice_set>:
80005054:	00308013          	addi	zero,ra,3
{
80005058:	ff010113          	addi	sp,sp,-16
8000505c:	00112623          	sw	ra,12(sp)
80005060:	00812423          	sw	s0,8(sp)
80005064:	00912223          	sw	s1,4(sp)
80005068:	01212023          	sw	s2,0(sp)
8000506c:	00050413          	mv	s0,a0
80005070:	00058493          	mv	s1,a1
	LOCKED(&sched_spinlock) {
80005074:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005078:	30047973          	csrrci	s2,mstatus,8
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
8000507c:	0300006f          	j	800050ac <k_sched_time_slice_set+0x58>
			slice_ticks = MAX(2, slice_ticks);
80005080:	800097b7          	lui	a5,0x80009
80005084:	aea7aa23          	sw	a0,-1292(a5) # 80008af4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008af5>
		slice_max_prio = prio;
80005088:	800097b7          	lui	a5,0x80009
8000508c:	ae97a823          	sw	s1,-1296(a5) # 80008af0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008af1>
		z_reset_time_slice(_current);
80005090:	800097b7          	lui	a5,0x80009
80005094:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005098:	0087a503          	lw	a0,8(a5)
8000509c:	f65ff0ef          	jal	ra,80005000 <z_reset_time_slice>
			  : "r" (key & MSTATUS_IEN)
800050a0:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
800050a4:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
800050a8:	00100793          	li	a5,1
800050ac:	04079663          	bnez	a5,800050f8 <k_sched_time_slice_set+0xa4>
		_current_cpu->slice_ticks = 0;
800050b0:	800097b7          	lui	a5,0x80009
800050b4:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800050b8:	0007a823          	sw	zero,16(a5)
			return (uint32_t)((t * to_hz + off) / from_hz);
800050bc:	01945593          	srli	a1,s0,0x19
800050c0:	00741793          	slli	a5,s0,0x7
800050c4:	3e778513          	addi	a0,a5,999
800050c8:	00f537b3          	sltu	a5,a0,a5
800050cc:	3e800613          	li	a2,1000
800050d0:	00000693          	li	a3,0
800050d4:	00b785b3          	add	a1,a5,a1
800050d8:	90cfb0ef          	jal	ra,800001e4 <__udivdi3>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
800050dc:	800097b7          	lui	a5,0x80009
800050e0:	aea7aa23          	sw	a0,-1292(a5) # 80008af4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008af5>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
800050e4:	fa8052e3          	blez	s0,80005088 <k_sched_time_slice_set+0x34>
			slice_ticks = MAX(2, slice_ticks);
800050e8:	00200793          	li	a5,2
800050ec:	f8f55ae3          	bge	a0,a5,80005080 <k_sched_time_slice_set+0x2c>
800050f0:	00200513          	li	a0,2
800050f4:	f8dff06f          	j	80005080 <k_sched_time_slice_set+0x2c>
}
800050f8:	00c12083          	lw	ra,12(sp)
800050fc:	00812403          	lw	s0,8(sp)
80005100:	00412483          	lw	s1,4(sp)
80005104:	00012903          	lw	s2,0(sp)
80005108:	01010113          	addi	sp,sp,16
8000510c:	00008067          	ret

80005110 <k_sched_lock>:
80005110:	00308013          	addi	zero,ra,3
	LOCKED(&sched_spinlock) {
80005114:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005118:	300476f3          	csrrci	a3,mstatus,8
8000511c:	0280006f          	j	80005144 <k_sched_lock+0x34>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
80005120:	800097b7          	lui	a5,0x80009
80005124:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005128:	0087a703          	lw	a4,8(a5)
8000512c:	00f74783          	lbu	a5,15(a4)
80005130:	fff78793          	addi	a5,a5,-1
80005134:	00f707a3          	sb	a5,15(a4)
			  : "r" (key & MSTATUS_IEN)
80005138:	0086f793          	andi	a5,a3,8
	__asm__ volatile ("csrs mstatus, %0"
8000513c:	3007a073          	csrs	mstatus,a5
80005140:	00100793          	li	a5,1
80005144:	fc078ee3          	beqz	a5,80005120 <k_sched_lock+0x10>
}
80005148:	00008067          	ret

8000514c <z_swap_next_thread>:
8000514c:	00308013          	addi	zero,ra,3
	return _kernel.ready_q.cache;
80005150:	800097b7          	lui	a5,0x80009
}
80005154:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005158:	0187a503          	lw	a0,24(a5)
8000515c:	00008067          	ret

80005160 <z_swap_irqlock>:
80005160:	00308013          	addi	zero,ra,3
{
80005164:	ff010113          	addi	sp,sp,-16
80005168:	00112623          	sw	ra,12(sp)
8000516c:	00812423          	sw	s0,8(sp)
80005170:	00912223          	sw	s1,4(sp)
80005174:	01212023          	sw	s2,0(sp)
80005178:	00050413          	mv	s0,a0
	old_thread = _current;
8000517c:	800097b7          	lui	a5,0x80009
80005180:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005184:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
80005188:	ff500793          	li	a5,-11
8000518c:	06f92c23          	sw	a5,120(s2)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005190:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80005194:	fb9ff0ef          	jal	ra,8000514c <z_swap_next_thread>
	if (new_thread != old_thread) {
80005198:	02a90263          	beq	s2,a0,800051bc <z_swap_irqlock+0x5c>
8000519c:	00050493          	mv	s1,a0
		_current_cpu->current = new_thread;
800051a0:	800097b7          	lui	a5,0x80009
800051a4:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800051a8:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
800051ac:	e55ff0ef          	jal	ra,80005000 <z_reset_time_slice>
800051b0:	00090593          	mv	a1,s2
800051b4:	07c4a503          	lw	a0,124(s1)
800051b8:	835fe0ef          	jal	ra,800039ec <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
800051bc:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
800051c0:	30042073          	csrs	mstatus,s0
	return _current->swap_retval;
800051c4:	800097b7          	lui	a5,0x80009
800051c8:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800051cc:	0087a783          	lw	a5,8(a5)
}
800051d0:	0787a503          	lw	a0,120(a5)
800051d4:	00c12083          	lw	ra,12(sp)
800051d8:	00812403          	lw	s0,8(sp)
800051dc:	00412483          	lw	s1,4(sp)
800051e0:	00012903          	lw	s2,0(sp)
800051e4:	01010113          	addi	sp,sp,16
800051e8:	00008067          	ret

800051ec <z_reschedule_irqlock>:
800051ec:	00308013          	addi	zero,ra,3
			  : "memory");
}

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	return (key & MSTATUS_IEN) != 0;
800051f0:	00857793          	andi	a5,a0,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
800051f4:	02078463          	beqz	a5,8000521c <z_reschedule_irqlock+0x30>
	bool ret = arch_curr_cpu()->nested != 0U;

	arch_irq_unlock(key);
	return ret;
#else
	return _kernel.cpus[0].nested != 0U;
800051f8:	80009737          	lui	a4,0x80009
800051fc:	fb872703          	lw	a4,-72(a4) # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005200:	00071e63          	bnez	a4,8000521c <z_reschedule_irqlock+0x30>
{
80005204:	ff010113          	addi	sp,sp,-16
80005208:	00112623          	sw	ra,12(sp)
		z_swap_irqlock(key);
8000520c:	f55ff0ef          	jal	ra,80005160 <z_swap_irqlock>
}
80005210:	00c12083          	lw	ra,12(sp)
80005214:	01010113          	addi	sp,sp,16
80005218:	00008067          	ret
	__asm__ volatile ("csrs mstatus, %0"
8000521c:	3007a073          	csrs	mstatus,a5
		signal_pending_ipi();
80005220:	00008067          	ret

80005224 <z_swap>:
80005224:	00308013          	addi	zero,ra,3
{
80005228:	ff010113          	addi	sp,sp,-16
8000522c:	00112623          	sw	ra,12(sp)
80005230:	00812423          	sw	s0,8(sp)
80005234:	00912223          	sw	s1,4(sp)
80005238:	01212023          	sw	s2,0(sp)
8000523c:	00058413          	mv	s0,a1
	old_thread = _current;
80005240:	800097b7          	lui	a5,0x80009
80005244:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005248:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
8000524c:	ff500793          	li	a5,-11
80005250:	06f92c23          	sw	a5,120(s2)
	if (!is_spinlock || lock != &sched_spinlock) {
80005254:	800097b7          	lui	a5,0x80009
80005258:	fdc78793          	addi	a5,a5,-36 # 80008fdc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fdd>
8000525c:	00a78463          	beq	a5,a0,80005264 <z_swap+0x40>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005260:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80005264:	ee9ff0ef          	jal	ra,8000514c <z_swap_next_thread>
80005268:	00050493          	mv	s1,a0
	if (new_thread != old_thread) {
8000526c:	02a90063          	beq	s2,a0,8000528c <z_swap+0x68>
		_current_cpu->current = new_thread;
80005270:	800097b7          	lui	a5,0x80009
80005274:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005278:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
8000527c:	d85ff0ef          	jal	ra,80005000 <z_reset_time_slice>
	z_riscv_switch(new, old);
80005280:	00090593          	mv	a1,s2
80005284:	07c4a503          	lw	a0,124(s1)
80005288:	f64fe0ef          	jal	ra,800039ec <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
8000528c:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80005290:	30042073          	csrs	mstatus,s0
	return _current->swap_retval;
80005294:	800097b7          	lui	a5,0x80009
80005298:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
8000529c:	0087a783          	lw	a5,8(a5)
}
800052a0:	0787a503          	lw	a0,120(a5)
800052a4:	00c12083          	lw	ra,12(sp)
800052a8:	00812403          	lw	s0,8(sp)
800052ac:	00412483          	lw	s1,4(sp)
800052b0:	00012903          	lw	s2,0(sp)
800052b4:	01010113          	addi	sp,sp,16
800052b8:	00008067          	ret

800052bc <z_reschedule>:
800052bc:	00308013          	addi	zero,ra,3
	return (key & MSTATUS_IEN) != 0;
800052c0:	0085f793          	andi	a5,a1,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
800052c4:	02078e63          	beqz	a5,80005300 <z_reschedule+0x44>
	return _kernel.cpus[0].nested != 0U;
800052c8:	80009737          	lui	a4,0x80009
800052cc:	fb872703          	lw	a4,-72(a4) # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800052d0:	02071863          	bnez	a4,80005300 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
800052d4:	80009737          	lui	a4,0x80009
800052d8:	fb870713          	addi	a4,a4,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800052dc:	01872683          	lw	a3,24(a4)
	return new_thread != _current;
800052e0:	00872703          	lw	a4,8(a4)
	if (resched(key.key) && need_swap()) {
800052e4:	00e68e63          	beq	a3,a4,80005300 <z_reschedule+0x44>
{
800052e8:	ff010113          	addi	sp,sp,-16
800052ec:	00112623          	sw	ra,12(sp)
		z_swap(lock, key);
800052f0:	f35ff0ef          	jal	ra,80005224 <z_swap>
}
800052f4:	00c12083          	lw	ra,12(sp)
800052f8:	01010113          	addi	sp,sp,16
800052fc:	00008067          	ret
	__asm__ volatile ("csrs mstatus, %0"
80005300:	3007a073          	csrs	mstatus,a5
		signal_pending_ipi();
80005304:	00008067          	ret

80005308 <z_get_next_switch_handle>:
80005308:	00308013          	addi	zero,ra,3
	z_sched_usage_switch(_kernel.ready_q.cache);
8000530c:	800097b7          	lui	a5,0x80009
80005310:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005314:	0187a703          	lw	a4,24(a5)
	_current->switch_handle = interrupted;
80005318:	0087a683          	lw	a3,8(a5)
8000531c:	06a6ae23          	sw	a0,124(a3)
	_current_cpu->current = new_thread;
80005320:	00e7a423          	sw	a4,8(a5)
}
80005324:	07c72503          	lw	a0,124(a4)
80005328:	00008067          	ret

8000532c <z_priq_dumb_remove>:
8000532c:	00308013          	addi	zero,ra,3
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
80005330:	0045a703          	lw	a4,4(a1)
	sys_dnode_t *const next = node->next;
80005334:	0005a783          	lw	a5,0(a1)

	prev->next = next;
80005338:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
8000533c:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
80005340:	0005a023          	sw	zero,0(a1)
	node->prev = NULL;
80005344:	0005a223          	sw	zero,4(a1)
}
80005348:	00008067          	ret

8000534c <unpend_thread_no_timeout>:
8000534c:	00308013          	addi	zero,ra,3
{
80005350:	ff010113          	addi	sp,sp,-16
80005354:	00112623          	sw	ra,12(sp)
80005358:	00812423          	sw	s0,8(sp)
8000535c:	00050413          	mv	s0,a0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
80005360:	c35ff0ef          	jal	ra,80004f94 <pended_on_thread>
80005364:	00040593          	mv	a1,s0
80005368:	fc5ff0ef          	jal	ra,8000532c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
8000536c:	00d44783          	lbu	a5,13(s0)
80005370:	ffd7f793          	andi	a5,a5,-3
80005374:	00f406a3          	sb	a5,13(s0)
	thread->base.pended_on = NULL;
80005378:	00042423          	sw	zero,8(s0)
}
8000537c:	00c12083          	lw	ra,12(sp)
80005380:	00812403          	lw	s0,8(sp)
80005384:	01010113          	addi	sp,sp,16
80005388:	00008067          	ret

8000538c <z_priq_dumb_best>:
8000538c:	00308013          	addi	zero,ra,3
{
80005390:	00050793          	mv	a5,a0
	return list->head == list;
80005394:	00052503          	lw	a0,0(a0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80005398:	00a78463          	beq	a5,a0,800053a0 <z_priq_dumb_best+0x14>
}
8000539c:	00008067          	ret
	struct k_thread *thread = NULL;
800053a0:	00000513          	li	a0,0
	return thread;
800053a4:	ff9ff06f          	j	8000539c <z_priq_dumb_best+0x10>

800053a8 <update_cache>:
800053a8:	00308013          	addi	zero,ra,3
{
800053ac:	ff010113          	addi	sp,sp,-16
800053b0:	00112623          	sw	ra,12(sp)
800053b4:	00812423          	sw	s0,8(sp)
800053b8:	00912223          	sw	s1,4(sp)
800053bc:	00050493          	mv	s1,a0
	return _priq_run_best(curr_cpu_runq());
800053c0:	80009537          	lui	a0,0x80009
800053c4:	fd450513          	addi	a0,a0,-44 # 80008fd4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fd5>
800053c8:	fc5ff0ef          	jal	ra,8000538c <z_priq_dumb_best>
800053cc:	00050413          	mv	s0,a0
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
800053d0:	02050e63          	beqz	a0,8000540c <update_cache+0x64>
	if (preempt_ok != 0) {
800053d4:	04049463          	bnez	s1,8000541c <update_cache+0x74>
	if (z_is_thread_prevented_from_running(_current)) {
800053d8:	800097b7          	lui	a5,0x80009
800053dc:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800053e0:	0087a703          	lw	a4,8(a5)
	uint8_t state = thread->base.thread_state;
800053e4:	00d74783          	lbu	a5,13(a4)
800053e8:	01f7f793          	andi	a5,a5,31
800053ec:	02079863          	bnez	a5,8000541c <update_cache+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
800053f0:	00e75683          	lhu	a3,14(a4)
	if (is_preempt(_current) || is_metairq(thread)) {
800053f4:	07f00793          	li	a5,127
800053f8:	02d7f263          	bgeu	a5,a3,8000541c <update_cache+0x74>
		_kernel.ready_q.cache = _current;
800053fc:	800097b7          	lui	a5,0x80009
80005400:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005404:	00e7ac23          	sw	a4,24(a5)
80005408:	0380006f          	j	80005440 <update_cache+0x98>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
8000540c:	800097b7          	lui	a5,0x80009
80005410:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005414:	00c7a403          	lw	s0,12(a5)
80005418:	fbdff06f          	j	800053d4 <update_cache+0x2c>
		if (thread != _current) {
8000541c:	800097b7          	lui	a5,0x80009
80005420:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005424:	0087a783          	lw	a5,8(a5)
80005428:	00878663          	beq	a5,s0,80005434 <update_cache+0x8c>
			z_reset_time_slice(thread);
8000542c:	00040513          	mv	a0,s0
80005430:	bd1ff0ef          	jal	ra,80005000 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
80005434:	800097b7          	lui	a5,0x80009
80005438:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
8000543c:	0087ac23          	sw	s0,24(a5)
}
80005440:	00c12083          	lw	ra,12(sp)
80005444:	00812403          	lw	s0,8(sp)
80005448:	00412483          	lw	s1,4(sp)
8000544c:	01010113          	addi	sp,sp,16
80005450:	00008067          	ret

80005454 <move_thread_to_end_of_prio_q>:
80005454:	00308013          	addi	zero,ra,3
{
80005458:	ff010113          	addi	sp,sp,-16
8000545c:	00112623          	sw	ra,12(sp)
80005460:	00812423          	sw	s0,8(sp)
80005464:	00912223          	sw	s1,4(sp)
80005468:	00050493          	mv	s1,a0
	return (thread->base.thread_state & state) != 0U;
8000546c:	00d54783          	lbu	a5,13(a0)
	if (z_is_thread_queued(thread)) {
80005470:	01879713          	slli	a4,a5,0x18
80005474:	41875713          	srai	a4,a4,0x18
80005478:	02074863          	bltz	a4,800054a8 <move_thread_to_end_of_prio_q+0x54>
	thread->base.thread_state |= _THREAD_QUEUED;
8000547c:	00d4c783          	lbu	a5,13(s1)
80005480:	f807e793          	ori	a5,a5,-128
80005484:	00f486a3          	sb	a5,13(s1)
	return list->head == list;
80005488:	800097b7          	lui	a5,0x80009
8000548c:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005490:	01c7a403          	lw	s0,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80005494:	800097b7          	lui	a5,0x80009
80005498:	fd478793          	addi	a5,a5,-44 # 80008fd4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fd5>
8000549c:	04f41263          	bne	s0,a5,800054e0 <move_thread_to_end_of_prio_q+0x8c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800054a0:	00000413          	li	s0,0
800054a4:	03c0006f          	j	800054e0 <move_thread_to_end_of_prio_q+0x8c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
800054a8:	07f7f793          	andi	a5,a5,127
800054ac:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
800054b0:	00050593          	mv	a1,a0
800054b4:	80009537          	lui	a0,0x80009
800054b8:	fd450513          	addi	a0,a0,-44 # 80008fd4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fd5>
800054bc:	e71ff0ef          	jal	ra,8000532c <z_priq_dumb_remove>
}
800054c0:	fbdff06f          	j	8000547c <move_thread_to_end_of_prio_q+0x28>
	sys_dnode_t *const prev = successor->prev;
800054c4:	00442783          	lw	a5,4(s0)
	node->prev = prev;
800054c8:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
800054cc:	0084a023          	sw	s0,0(s1)
	prev->next = node;
800054d0:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
800054d4:	00942223          	sw	s1,4(s0)
}
800054d8:	05c0006f          	j	80005534 <move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800054dc:	00000413          	li	s0,0
800054e0:	02040863          	beqz	s0,80005510 <move_thread_to_end_of_prio_q+0xbc>
		if (z_sched_prio_cmp(thread, t) > 0) {
800054e4:	00040593          	mv	a1,s0
800054e8:	00048513          	mv	a0,s1
800054ec:	af5ff0ef          	jal	ra,80004fe0 <z_sched_prio_cmp>
800054f0:	fca04ae3          	bgtz	a0,800054c4 <move_thread_to_end_of_prio_q+0x70>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
800054f4:	fe0406e3          	beqz	s0,800054e0 <move_thread_to_end_of_prio_q+0x8c>
	return (node == list->tail) ? NULL : node->next;
800054f8:	800097b7          	lui	a5,0x80009
800054fc:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005500:	0207a783          	lw	a5,32(a5)
80005504:	fcf40ce3          	beq	s0,a5,800054dc <move_thread_to_end_of_prio_q+0x88>
80005508:	00042403          	lw	s0,0(s0)
8000550c:	fd5ff06f          	j	800054e0 <move_thread_to_end_of_prio_q+0x8c>
	sys_dnode_t *const tail = list->tail;
80005510:	800097b7          	lui	a5,0x80009
80005514:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005518:	0207a683          	lw	a3,32(a5)
	node->next = list;
8000551c:	80009737          	lui	a4,0x80009
80005520:	fd470713          	addi	a4,a4,-44 # 80008fd4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fd5>
80005524:	00e4a023          	sw	a4,0(s1)
	node->prev = tail;
80005528:	00d4a223          	sw	a3,4(s1)
	tail->next = node;
8000552c:	0096a023          	sw	s1,0(a3)
	list->tail = node;
80005530:	0297a023          	sw	s1,32(a5)
	update_cache(thread == _current);
80005534:	800097b7          	lui	a5,0x80009
80005538:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
8000553c:	0087a503          	lw	a0,8(a5)
80005540:	40950533          	sub	a0,a0,s1
80005544:	00153513          	seqz	a0,a0
80005548:	e61ff0ef          	jal	ra,800053a8 <update_cache>
}
8000554c:	00c12083          	lw	ra,12(sp)
80005550:	00812403          	lw	s0,8(sp)
80005554:	00412483          	lw	s1,4(sp)
80005558:	01010113          	addi	sp,sp,16
8000555c:	00008067          	ret

80005560 <slice_expired_locked>:
80005560:	00308013          	addi	zero,ra,3
{
80005564:	ff010113          	addi	sp,sp,-16
80005568:	00112623          	sw	ra,12(sp)
8000556c:	00812423          	sw	s0,8(sp)
80005570:	00912223          	sw	s1,4(sp)
80005574:	00050413          	mv	s0,a0
	struct k_thread *curr = _current;
80005578:	800097b7          	lui	a5,0x80009
8000557c:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005580:	0087a483          	lw	s1,8(a5)
	uint8_t state = thread->base.thread_state;
80005584:	00d4c783          	lbu	a5,13(s1)
	if (!z_is_thread_prevented_from_running(curr)) {
80005588:	01f7f793          	andi	a5,a5,31
8000558c:	02078263          	beqz	a5,800055b0 <slice_expired_locked+0x50>
	z_reset_time_slice(curr);
80005590:	00048513          	mv	a0,s1
80005594:	a6dff0ef          	jal	ra,80005000 <z_reset_time_slice>
}
80005598:	00040513          	mv	a0,s0
8000559c:	00c12083          	lw	ra,12(sp)
800055a0:	00812403          	lw	s0,8(sp)
800055a4:	00412483          	lw	s1,4(sp)
800055a8:	01010113          	addi	sp,sp,16
800055ac:	00008067          	ret
		move_thread_to_end_of_prio_q(curr);
800055b0:	00048513          	mv	a0,s1
800055b4:	ea1ff0ef          	jal	ra,80005454 <move_thread_to_end_of_prio_q>
800055b8:	fd9ff06f          	j	80005590 <slice_expired_locked+0x30>

800055bc <z_time_slice>:
800055bc:	00308013          	addi	zero,ra,3
{
800055c0:	ff010113          	addi	sp,sp,-16
800055c4:	00112623          	sw	ra,12(sp)
800055c8:	00812423          	sw	s0,8(sp)
800055cc:	00912223          	sw	s1,4(sp)
800055d0:	01212023          	sw	s2,0(sp)
800055d4:	00050913          	mv	s2,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800055d8:	300474f3          	csrrci	s1,mstatus,8
800055dc:	00048413          	mv	s0,s1
	if (slice_time(_current) && sliceable(_current)) {
800055e0:	800097b7          	lui	a5,0x80009
800055e4:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800055e8:	0087a503          	lw	a0,8(a5)
	int ret = slice_ticks;
800055ec:	800097b7          	lui	a5,0x80009
800055f0:	af47a783          	lw	a5,-1292(a5) # 80008af4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008af5>
	if (slice_time(_current) && sliceable(_current)) {
800055f4:	04078063          	beqz	a5,80005634 <z_time_slice+0x78>
800055f8:	931ff0ef          	jal	ra,80004f28 <sliceable>
800055fc:	02050c63          	beqz	a0,80005634 <z_time_slice+0x78>
		if (ticks >= _current_cpu->slice_ticks) {
80005600:	800097b7          	lui	a5,0x80009
80005604:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005608:	0107a783          	lw	a5,16(a5)
8000560c:	00f95c63          	bge	s2,a5,80005624 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
80005610:	80009737          	lui	a4,0x80009
80005614:	412787b3          	sub	a5,a5,s2
80005618:	fb870713          	addi	a4,a4,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
8000561c:	00f72823          	sw	a5,16(a4)
80005620:	0200006f          	j	80005640 <z_time_slice+0x84>
			key = slice_expired_locked(key);
80005624:	00048513          	mv	a0,s1
80005628:	f39ff0ef          	jal	ra,80005560 <slice_expired_locked>
8000562c:	00050413          	mv	s0,a0
80005630:	0100006f          	j	80005640 <z_time_slice+0x84>
		_current_cpu->slice_ticks = 0;
80005634:	800097b7          	lui	a5,0x80009
80005638:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
8000563c:	0007a823          	sw	zero,16(a5)
			  : "r" (key & MSTATUS_IEN)
80005640:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80005644:	30042073          	csrs	mstatus,s0
}
80005648:	00c12083          	lw	ra,12(sp)
8000564c:	00812403          	lw	s0,8(sp)
80005650:	00412483          	lw	s1,4(sp)
80005654:	00012903          	lw	s2,0(sp)
80005658:	01010113          	addi	sp,sp,16
8000565c:	00008067          	ret

80005660 <ready_thread>:
80005660:	00308013          	addi	zero,ra,3
	return (thread->base.thread_state & state) != 0U;
80005664:	00d54783          	lbu	a5,13(a0)
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
80005668:	01879713          	slli	a4,a5,0x18
8000566c:	41875713          	srai	a4,a4,0x18
80005670:	0e074463          	bltz	a4,80005758 <ready_thread+0xf8>
{
80005674:	ff010113          	addi	sp,sp,-16
80005678:	00112623          	sw	ra,12(sp)
8000567c:	00812423          	sw	s0,8(sp)
80005680:	00912223          	sw	s1,4(sp)
80005684:	01212023          	sw	s2,0(sp)
80005688:	00050413          	mv	s0,a0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
8000568c:	01f7f713          	andi	a4,a5,31
80005690:	00071663          	bnez	a4,8000569c <ready_thread+0x3c>
	return node->next != NULL;
80005694:	01852903          	lw	s2,24(a0)
80005698:	00090e63          	beqz	s2,800056b4 <ready_thread+0x54>
}
8000569c:	00c12083          	lw	ra,12(sp)
800056a0:	00812403          	lw	s0,8(sp)
800056a4:	00412483          	lw	s1,4(sp)
800056a8:	00012903          	lw	s2,0(sp)
800056ac:	01010113          	addi	sp,sp,16
800056b0:	00008067          	ret
	thread->base.thread_state |= _THREAD_QUEUED;
800056b4:	f807e793          	ori	a5,a5,-128
800056b8:	00f506a3          	sb	a5,13(a0)
	return list->head == list;
800056bc:	800097b7          	lui	a5,0x80009
800056c0:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
800056c4:	01c7a483          	lw	s1,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
800056c8:	800097b7          	lui	a5,0x80009
800056cc:	fd478793          	addi	a5,a5,-44 # 80008fd4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fd5>
800056d0:	02f49463          	bne	s1,a5,800056f8 <ready_thread+0x98>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800056d4:	00090493          	mv	s1,s2
800056d8:	0200006f          	j	800056f8 <ready_thread+0x98>
	sys_dnode_t *const prev = successor->prev;
800056dc:	0044a783          	lw	a5,4(s1)
	node->prev = prev;
800056e0:	00f42223          	sw	a5,4(s0)
	node->next = successor;
800056e4:	00942023          	sw	s1,0(s0)
	prev->next = node;
800056e8:	0087a023          	sw	s0,0(a5)
	successor->prev = node;
800056ec:	0084a223          	sw	s0,4(s1)
}
800056f0:	05c0006f          	j	8000574c <ready_thread+0xec>
800056f4:	00090493          	mv	s1,s2
800056f8:	02048863          	beqz	s1,80005728 <ready_thread+0xc8>
		if (z_sched_prio_cmp(thread, t) > 0) {
800056fc:	00048593          	mv	a1,s1
80005700:	00040513          	mv	a0,s0
80005704:	8ddff0ef          	jal	ra,80004fe0 <z_sched_prio_cmp>
80005708:	fca04ae3          	bgtz	a0,800056dc <ready_thread+0x7c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
8000570c:	fe0486e3          	beqz	s1,800056f8 <ready_thread+0x98>
	return (node == list->tail) ? NULL : node->next;
80005710:	800097b7          	lui	a5,0x80009
80005714:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005718:	0207a783          	lw	a5,32(a5)
8000571c:	fcf48ce3          	beq	s1,a5,800056f4 <ready_thread+0x94>
80005720:	0004a483          	lw	s1,0(s1)
80005724:	fd5ff06f          	j	800056f8 <ready_thread+0x98>
	sys_dnode_t *const tail = list->tail;
80005728:	800097b7          	lui	a5,0x80009
8000572c:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005730:	0207a683          	lw	a3,32(a5)
	node->next = list;
80005734:	80009737          	lui	a4,0x80009
80005738:	fd470713          	addi	a4,a4,-44 # 80008fd4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fd5>
8000573c:	00e42023          	sw	a4,0(s0)
	node->prev = tail;
80005740:	00d42223          	sw	a3,4(s0)
	tail->next = node;
80005744:	0086a023          	sw	s0,0(a3)
	list->tail = node;
80005748:	0287a023          	sw	s0,32(a5)
		update_cache(0);
8000574c:	00000513          	li	a0,0
80005750:	c59ff0ef          	jal	ra,800053a8 <update_cache>
}
80005754:	f49ff06f          	j	8000569c <ready_thread+0x3c>
80005758:	00008067          	ret

8000575c <z_ready_thread>:
8000575c:	00308013          	addi	zero,ra,3
{
80005760:	ff010113          	addi	sp,sp,-16
80005764:	00112623          	sw	ra,12(sp)
80005768:	00812423          	sw	s0,8(sp)
8000576c:	00912223          	sw	s1,4(sp)
80005770:	00050413          	mv	s0,a0
	LOCKED(&sched_spinlock) {
80005774:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005778:	300474f3          	csrrci	s1,mstatus,8
8000577c:	0100006f          	j	8000578c <z_ready_thread+0x30>
			  : "r" (key & MSTATUS_IEN)
80005780:	0084f793          	andi	a5,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80005784:	3007a073          	csrs	mstatus,a5
80005788:	00100793          	li	a5,1
8000578c:	00079e63          	bnez	a5,800057a8 <z_ready_thread+0x4c>
		if (!thread_active_elsewhere(thread)) {
80005790:	00040513          	mv	a0,s0
80005794:	ff4ff0ef          	jal	ra,80004f88 <thread_active_elsewhere>
80005798:	fe0514e3          	bnez	a0,80005780 <z_ready_thread+0x24>
			ready_thread(thread);
8000579c:	00040513          	mv	a0,s0
800057a0:	ec1ff0ef          	jal	ra,80005660 <ready_thread>
800057a4:	fddff06f          	j	80005780 <z_ready_thread+0x24>
}
800057a8:	00c12083          	lw	ra,12(sp)
800057ac:	00812403          	lw	s0,8(sp)
800057b0:	00412483          	lw	s1,4(sp)
800057b4:	01010113          	addi	sp,sp,16
800057b8:	00008067          	ret

800057bc <z_sched_start>:
800057bc:	00308013          	addi	zero,ra,3
{
800057c0:	ff010113          	addi	sp,sp,-16
800057c4:	00112623          	sw	ra,12(sp)
800057c8:	00812423          	sw	s0,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
800057cc:	30047473          	csrrci	s0,mstatus,8
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
800057d0:	00d54783          	lbu	a5,13(a0)
	if (z_has_thread_started(thread)) {
800057d4:	0047f713          	andi	a4,a5,4
800057d8:	00071e63          	bnez	a4,800057f4 <z_sched_start+0x38>
	__asm__ volatile ("csrs mstatus, %0"
800057dc:	00847413          	andi	s0,s0,8
800057e0:	30042073          	csrs	mstatus,s0
}
800057e4:	00c12083          	lw	ra,12(sp)
800057e8:	00812403          	lw	s0,8(sp)
800057ec:	01010113          	addi	sp,sp,16
800057f0:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_PRESTART;
800057f4:	ffb7f793          	andi	a5,a5,-5
800057f8:	00f506a3          	sb	a5,13(a0)
	ready_thread(thread);
800057fc:	e65ff0ef          	jal	ra,80005660 <ready_thread>
	z_reschedule(&sched_spinlock, key);
80005800:	00040593          	mv	a1,s0
80005804:	80009537          	lui	a0,0x80009
80005808:	fdc50513          	addi	a0,a0,-36 # 80008fdc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fdd>
8000580c:	ab1ff0ef          	jal	ra,800052bc <z_reschedule>
80005810:	fd5ff06f          	j	800057e4 <z_sched_start+0x28>

80005814 <z_thread_timeout>:
80005814:	00308013          	addi	zero,ra,3
{
80005818:	ff010113          	addi	sp,sp,-16
8000581c:	00112623          	sw	ra,12(sp)
80005820:	00812423          	sw	s0,8(sp)
80005824:	00912223          	sw	s1,4(sp)
80005828:	01212023          	sw	s2,0(sp)
8000582c:	00050413          	mv	s0,a0
	struct k_thread *thread = CONTAINER_OF(timeout,
80005830:	fe850913          	addi	s2,a0,-24
	LOCKED(&sched_spinlock) {
80005834:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005838:	300474f3          	csrrci	s1,mstatus,8
8000583c:	02c0006f          	j	80005868 <z_thread_timeout+0x54>
80005840:	ff544783          	lbu	a5,-11(s0)
80005844:	ffb7f713          	andi	a4,a5,-5
80005848:	fee40aa3          	sb	a4,-11(s0)
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
8000584c:	feb7f793          	andi	a5,a5,-21
80005850:	fef40aa3          	sb	a5,-11(s0)
			ready_thread(thread);
80005854:	00090513          	mv	a0,s2
80005858:	e09ff0ef          	jal	ra,80005660 <ready_thread>
			  : "r" (key & MSTATUS_IEN)
8000585c:	0084f793          	andi	a5,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80005860:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80005864:	00100793          	li	a5,1
80005868:	02079263          	bnez	a5,8000588c <z_thread_timeout+0x78>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
8000586c:	ff544783          	lbu	a5,-11(s0)
		if (!killed) {
80005870:	0287f793          	andi	a5,a5,40
80005874:	fe0794e3          	bnez	a5,8000585c <z_thread_timeout+0x48>
			if (thread->base.pended_on != NULL) {
80005878:	ff042783          	lw	a5,-16(s0)
8000587c:	fc0782e3          	beqz	a5,80005840 <z_thread_timeout+0x2c>
				unpend_thread_no_timeout(thread);
80005880:	00090513          	mv	a0,s2
80005884:	ac9ff0ef          	jal	ra,8000534c <unpend_thread_no_timeout>
80005888:	fb9ff06f          	j	80005840 <z_thread_timeout+0x2c>
}
8000588c:	00c12083          	lw	ra,12(sp)
80005890:	00812403          	lw	s0,8(sp)
80005894:	00412483          	lw	s1,4(sp)
80005898:	00012903          	lw	s2,0(sp)
8000589c:	01010113          	addi	sp,sp,16
800058a0:	00008067          	ret

800058a4 <unpend_all>:
800058a4:	00308013          	addi	zero,ra,3
{
800058a8:	ff010113          	addi	sp,sp,-16
800058ac:	00112623          	sw	ra,12(sp)
800058b0:	00812423          	sw	s0,8(sp)
800058b4:	00912223          	sw	s1,4(sp)
800058b8:	00050493          	mv	s1,a0
	return list->head == list;
800058bc:	0004a403          	lw	s0,0(s1)
	return sys_dlist_is_empty(list) ? NULL : list->head;
800058c0:	02848463          	beq	s1,s0,800058e8 <unpend_all+0x44>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
800058c4:	02040263          	beqz	s0,800058e8 <unpend_all+0x44>
		unpend_thread_no_timeout(thread);
800058c8:	00040513          	mv	a0,s0
800058cc:	a81ff0ef          	jal	ra,8000534c <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
800058d0:	01840513          	addi	a0,s0,24
800058d4:	149000ef          	jal	ra,8000621c <z_abort_timeout>
800058d8:	06042c23          	sw	zero,120(s0)
		ready_thread(thread);
800058dc:	00040513          	mv	a0,s0
800058e0:	d81ff0ef          	jal	ra,80005660 <ready_thread>
800058e4:	fd9ff06f          	j	800058bc <unpend_all+0x18>
}
800058e8:	00c12083          	lw	ra,12(sp)
800058ec:	00812403          	lw	s0,8(sp)
800058f0:	00412483          	lw	s1,4(sp)
800058f4:	01010113          	addi	sp,sp,16
800058f8:	00008067          	ret

800058fc <unready_thread>:
800058fc:	00308013          	addi	zero,ra,3
{
80005900:	ff010113          	addi	sp,sp,-16
80005904:	00112623          	sw	ra,12(sp)
80005908:	00812423          	sw	s0,8(sp)
8000590c:	00050413          	mv	s0,a0
	return (thread->base.thread_state & state) != 0U;
80005910:	00d54783          	lbu	a5,13(a0)
	if (z_is_thread_queued(thread)) {
80005914:	01879713          	slli	a4,a5,0x18
80005918:	41875713          	srai	a4,a4,0x18
8000591c:	02074663          	bltz	a4,80005948 <unready_thread+0x4c>
	update_cache(thread == _current);
80005920:	800097b7          	lui	a5,0x80009
80005924:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005928:	0087a503          	lw	a0,8(a5)
8000592c:	40850533          	sub	a0,a0,s0
80005930:	00153513          	seqz	a0,a0
80005934:	a75ff0ef          	jal	ra,800053a8 <update_cache>
}
80005938:	00c12083          	lw	ra,12(sp)
8000593c:	00812403          	lw	s0,8(sp)
80005940:	01010113          	addi	sp,sp,16
80005944:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_QUEUED;
80005948:	07f7f793          	andi	a5,a5,127
8000594c:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
80005950:	00050593          	mv	a1,a0
80005954:	80009537          	lui	a0,0x80009
80005958:	fd450513          	addi	a0,a0,-44 # 80008fd4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fd5>
8000595c:	9d1ff0ef          	jal	ra,8000532c <z_priq_dumb_remove>
}
80005960:	fc1ff06f          	j	80005920 <unready_thread+0x24>

80005964 <add_to_waitq_locked>:
80005964:	00308013          	addi	zero,ra,3
{
80005968:	ff010113          	addi	sp,sp,-16
8000596c:	00112623          	sw	ra,12(sp)
80005970:	00812423          	sw	s0,8(sp)
80005974:	00912223          	sw	s1,4(sp)
80005978:	01212023          	sw	s2,0(sp)
8000597c:	00050493          	mv	s1,a0
80005980:	00058913          	mv	s2,a1
	unready_thread(thread);
80005984:	f79ff0ef          	jal	ra,800058fc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
80005988:	00d4c783          	lbu	a5,13(s1)
8000598c:	0027e793          	ori	a5,a5,2
80005990:	00f486a3          	sb	a5,13(s1)
	if (wait_q != NULL) {
80005994:	06090863          	beqz	s2,80005a04 <add_to_waitq_locked+0xa0>
		thread->base.pended_on = wait_q;
80005998:	0124a423          	sw	s2,8(s1)
	return list->head == list;
8000599c:	00092403          	lw	s0,0(s2)
	return sys_dlist_is_empty(list) ? NULL : list->head;
800059a0:	02891463          	bne	s2,s0,800059c8 <add_to_waitq_locked+0x64>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800059a4:	00000413          	li	s0,0
800059a8:	0200006f          	j	800059c8 <add_to_waitq_locked+0x64>
	sys_dnode_t *const prev = successor->prev;
800059ac:	00442783          	lw	a5,4(s0)
	node->prev = prev;
800059b0:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
800059b4:	0084a023          	sw	s0,0(s1)
	prev->next = node;
800059b8:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
800059bc:	00942223          	sw	s1,4(s0)
}
800059c0:	0440006f          	j	80005a04 <add_to_waitq_locked+0xa0>
800059c4:	00000413          	li	s0,0
800059c8:	02040463          	beqz	s0,800059f0 <add_to_waitq_locked+0x8c>
		if (z_sched_prio_cmp(thread, t) > 0) {
800059cc:	00040593          	mv	a1,s0
800059d0:	00048513          	mv	a0,s1
800059d4:	e0cff0ef          	jal	ra,80004fe0 <z_sched_prio_cmp>
800059d8:	fca04ae3          	bgtz	a0,800059ac <add_to_waitq_locked+0x48>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
800059dc:	fe0406e3          	beqz	s0,800059c8 <add_to_waitq_locked+0x64>
	return (node == list->tail) ? NULL : node->next;
800059e0:	00492703          	lw	a4,4(s2)
800059e4:	fee400e3          	beq	s0,a4,800059c4 <add_to_waitq_locked+0x60>
800059e8:	00042403          	lw	s0,0(s0)
800059ec:	fddff06f          	j	800059c8 <add_to_waitq_locked+0x64>
	sys_dnode_t *const tail = list->tail;
800059f0:	00492783          	lw	a5,4(s2)
	node->next = list;
800059f4:	0124a023          	sw	s2,0(s1)
	node->prev = tail;
800059f8:	00f4a223          	sw	a5,4(s1)
	tail->next = node;
800059fc:	0097a023          	sw	s1,0(a5)
	list->tail = node;
80005a00:	00992223          	sw	s1,4(s2)
}
80005a04:	00c12083          	lw	ra,12(sp)
80005a08:	00812403          	lw	s0,8(sp)
80005a0c:	00412483          	lw	s1,4(sp)
80005a10:	00012903          	lw	s2,0(sp)
80005a14:	01010113          	addi	sp,sp,16
80005a18:	00008067          	ret

80005a1c <pend>:
80005a1c:	00308013          	addi	zero,ra,3
{
80005a20:	fe010113          	addi	sp,sp,-32
80005a24:	00112e23          	sw	ra,28(sp)
80005a28:	00812c23          	sw	s0,24(sp)
80005a2c:	00912a23          	sw	s1,20(sp)
80005a30:	01212823          	sw	s2,16(sp)
80005a34:	01312623          	sw	s3,12(sp)
80005a38:	01412423          	sw	s4,8(sp)
80005a3c:	00050413          	mv	s0,a0
80005a40:	00058493          	mv	s1,a1
80005a44:	00060a13          	mv	s4,a2
80005a48:	00068993          	mv	s3,a3
	LOCKED(&sched_spinlock) {
80005a4c:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005a50:	30047973          	csrrci	s2,mstatus,8
80005a54:	01c0006f          	j	80005a70 <pend+0x54>
		add_to_waitq_locked(thread, wait_q);
80005a58:	00048593          	mv	a1,s1
80005a5c:	00040513          	mv	a0,s0
80005a60:	f05ff0ef          	jal	ra,80005964 <add_to_waitq_locked>
			  : "r" (key & MSTATUS_IEN)
80005a64:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80005a68:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80005a6c:	00100793          	li	a5,1
80005a70:	fe0784e3          	beqz	a5,80005a58 <pend+0x3c>
	add_thread_timeout(thread, timeout);
80005a74:	000a0593          	mv	a1,s4
80005a78:	00098613          	mv	a2,s3
80005a7c:	00040513          	mv	a0,s0
80005a80:	d20ff0ef          	jal	ra,80004fa0 <add_thread_timeout>
}
80005a84:	01c12083          	lw	ra,28(sp)
80005a88:	01812403          	lw	s0,24(sp)
80005a8c:	01412483          	lw	s1,20(sp)
80005a90:	01012903          	lw	s2,16(sp)
80005a94:	00c12983          	lw	s3,12(sp)
80005a98:	00812a03          	lw	s4,8(sp)
80005a9c:	02010113          	addi	sp,sp,32
80005aa0:	00008067          	ret

80005aa4 <z_pend_curr>:
80005aa4:	00308013          	addi	zero,ra,3
{
80005aa8:	ff010113          	addi	sp,sp,-16
80005aac:	00112623          	sw	ra,12(sp)
80005ab0:	00812423          	sw	s0,8(sp)
80005ab4:	00912223          	sw	s1,4(sp)
80005ab8:	00050413          	mv	s0,a0
80005abc:	00058493          	mv	s1,a1
80005ac0:	00060593          	mv	a1,a2
80005ac4:	00068613          	mv	a2,a3
80005ac8:	00070693          	mv	a3,a4
	pend(_current, wait_q, timeout);
80005acc:	800097b7          	lui	a5,0x80009
80005ad0:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005ad4:	0087a503          	lw	a0,8(a5)
80005ad8:	f45ff0ef          	jal	ra,80005a1c <pend>
	return z_swap(lock, key);
80005adc:	00048593          	mv	a1,s1
80005ae0:	00040513          	mv	a0,s0
80005ae4:	f40ff0ef          	jal	ra,80005224 <z_swap>
}
80005ae8:	00c12083          	lw	ra,12(sp)
80005aec:	00812403          	lw	s0,8(sp)
80005af0:	00412483          	lw	s1,4(sp)
80005af4:	01010113          	addi	sp,sp,16
80005af8:	00008067          	ret

80005afc <z_set_prio>:
80005afc:	00308013          	addi	zero,ra,3
{
80005b00:	fe010113          	addi	sp,sp,-32
80005b04:	00112e23          	sw	ra,28(sp)
80005b08:	00812c23          	sw	s0,24(sp)
80005b0c:	00912a23          	sw	s1,20(sp)
80005b10:	01212823          	sw	s2,16(sp)
80005b14:	01312623          	sw	s3,12(sp)
80005b18:	01412423          	sw	s4,8(sp)
80005b1c:	01512223          	sw	s5,4(sp)
80005b20:	00050493          	mv	s1,a0
80005b24:	00058913          	mv	s2,a1
	LOCKED(&sched_spinlock) {
80005b28:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005b2c:	300479f3          	csrrci	s3,mstatus,8
	bool need_sched = 0;
80005b30:	00000513          	li	a0,0
80005b34:	0980006f          	j	80005bcc <z_set_prio+0xd0>
	sys_dnode_t *const prev = successor->prev;
80005b38:	00442783          	lw	a5,4(s0)
	node->prev = prev;
80005b3c:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
80005b40:	0084a023          	sw	s0,0(s1)
	prev->next = node;
80005b44:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
80005b48:	00942223          	sw	s1,4(s0)
}
80005b4c:	05c0006f          	j	80005ba8 <z_set_prio+0xac>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80005b50:	000a0413          	mv	s0,s4
80005b54:	02040863          	beqz	s0,80005b84 <z_set_prio+0x88>
		if (z_sched_prio_cmp(thread, t) > 0) {
80005b58:	00040593          	mv	a1,s0
80005b5c:	00048513          	mv	a0,s1
80005b60:	c80ff0ef          	jal	ra,80004fe0 <z_sched_prio_cmp>
80005b64:	fca04ae3          	bgtz	a0,80005b38 <z_set_prio+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80005b68:	fe0406e3          	beqz	s0,80005b54 <z_set_prio+0x58>
	return (node == list->tail) ? NULL : node->next;
80005b6c:	800097b7          	lui	a5,0x80009
80005b70:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005b74:	0207a783          	lw	a5,32(a5)
80005b78:	fcf40ce3          	beq	s0,a5,80005b50 <z_set_prio+0x54>
80005b7c:	00042403          	lw	s0,0(s0)
80005b80:	fd5ff06f          	j	80005b54 <z_set_prio+0x58>
	sys_dnode_t *const tail = list->tail;
80005b84:	800097b7          	lui	a5,0x80009
80005b88:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005b8c:	0207a683          	lw	a3,32(a5)
	node->next = list;
80005b90:	80009737          	lui	a4,0x80009
80005b94:	fd470713          	addi	a4,a4,-44 # 80008fd4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fd5>
80005b98:	00e4a023          	sw	a4,0(s1)
	node->prev = tail;
80005b9c:	00d4a223          	sw	a3,4(s1)
	tail->next = node;
80005ba0:	0096a023          	sw	s1,0(a3)
	list->tail = node;
80005ba4:	0297a023          	sw	s1,32(a5)
			update_cache(1);
80005ba8:	00100513          	li	a0,1
80005bac:	ffcff0ef          	jal	ra,800053a8 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
80005bb0:	00100513          	li	a0,1
80005bb4:	00c0006f          	j	80005bc0 <z_set_prio+0xc4>
			thread->base.prio = prio;
80005bb8:	01248723          	sb	s2,14(s1)
80005bbc:	00000513          	li	a0,0
			  : "r" (key & MSTATUS_IEN)
80005bc0:	0089f793          	andi	a5,s3,8
	__asm__ volatile ("csrs mstatus, %0"
80005bc4:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80005bc8:	00100793          	li	a5,1
80005bcc:	04079e63          	bnez	a5,80005c28 <z_set_prio+0x12c>
	uint8_t state = thread->base.thread_state;
80005bd0:	00d4c783          	lbu	a5,13(s1)
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
80005bd4:	01f7f713          	andi	a4,a5,31
80005bd8:	fe0710e3          	bnez	a4,80005bb8 <z_set_prio+0xbc>
	return node->next != NULL;
80005bdc:	0184aa03          	lw	s4,24(s1)
80005be0:	fc0a1ce3          	bnez	s4,80005bb8 <z_set_prio+0xbc>
	thread->base.thread_state &= ~_THREAD_QUEUED;
80005be4:	07f7f793          	andi	a5,a5,127
80005be8:	00f486a3          	sb	a5,13(s1)
	_priq_run_remove(thread_runq(thread), thread);
80005bec:	00048593          	mv	a1,s1
80005bf0:	80009ab7          	lui	s5,0x80009
80005bf4:	fd4a8513          	addi	a0,s5,-44 # 80008fd4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fd5>
80005bf8:	f34ff0ef          	jal	ra,8000532c <z_priq_dumb_remove>
				thread->base.prio = prio;
80005bfc:	01248723          	sb	s2,14(s1)
	thread->base.thread_state |= _THREAD_QUEUED;
80005c00:	00d4c783          	lbu	a5,13(s1)
80005c04:	f807e793          	ori	a5,a5,-128
80005c08:	00f486a3          	sb	a5,13(s1)
	return list->head == list;
80005c0c:	800097b7          	lui	a5,0x80009
80005c10:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005c14:	01c7a403          	lw	s0,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80005c18:	fd4a8a93          	addi	s5,s5,-44
80005c1c:	f3541ce3          	bne	s0,s5,80005b54 <z_set_prio+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80005c20:	000a0413          	mv	s0,s4
80005c24:	f31ff06f          	j	80005b54 <z_set_prio+0x58>
}
80005c28:	01c12083          	lw	ra,28(sp)
80005c2c:	01812403          	lw	s0,24(sp)
80005c30:	01412483          	lw	s1,20(sp)
80005c34:	01012903          	lw	s2,16(sp)
80005c38:	00c12983          	lw	s3,12(sp)
80005c3c:	00812a03          	lw	s4,8(sp)
80005c40:	00412a83          	lw	s5,4(sp)
80005c44:	02010113          	addi	sp,sp,32
80005c48:	00008067          	ret

80005c4c <k_sched_unlock>:
80005c4c:	00308013          	addi	zero,ra,3
{
80005c50:	ff010113          	addi	sp,sp,-16
80005c54:	00112623          	sw	ra,12(sp)
80005c58:	00812423          	sw	s0,8(sp)
	LOCKED(&sched_spinlock) {
80005c5c:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005c60:	30047473          	csrrci	s0,mstatus,8
80005c64:	0300006f          	j	80005c94 <k_sched_unlock+0x48>
		++_current->base.sched_locked;
80005c68:	800097b7          	lui	a5,0x80009
80005c6c:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005c70:	0087a703          	lw	a4,8(a5)
80005c74:	00f74783          	lbu	a5,15(a4)
80005c78:	00178793          	addi	a5,a5,1
80005c7c:	00f707a3          	sb	a5,15(a4)
		update_cache(0);
80005c80:	00000513          	li	a0,0
80005c84:	f24ff0ef          	jal	ra,800053a8 <update_cache>
			  : "r" (key & MSTATUS_IEN)
80005c88:	00847793          	andi	a5,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80005c8c:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80005c90:	00100793          	li	a5,1
80005c94:	fc078ae3          	beqz	a5,80005c68 <k_sched_unlock+0x1c>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005c98:	30047573          	csrrci	a0,mstatus,8
	(void) z_reschedule_irqlock(arch_irq_lock());
80005c9c:	d50ff0ef          	jal	ra,800051ec <z_reschedule_irqlock>
}
80005ca0:	00c12083          	lw	ra,12(sp)
80005ca4:	00812403          	lw	s0,8(sp)
80005ca8:	01010113          	addi	sp,sp,16
80005cac:	00008067          	ret

80005cb0 <end_thread>:
80005cb0:	00308013          	addi	zero,ra,3
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
80005cb4:	00d54783          	lbu	a5,13(a0)
80005cb8:	0087f713          	andi	a4,a5,8
80005cbc:	08071663          	bnez	a4,80005d48 <end_thread+0x98>
{
80005cc0:	ff010113          	addi	sp,sp,-16
80005cc4:	00112623          	sw	ra,12(sp)
80005cc8:	00812423          	sw	s0,8(sp)
80005ccc:	00050413          	mv	s0,a0
		thread->base.thread_state |= _THREAD_DEAD;
80005cd0:	0087e713          	ori	a4,a5,8
80005cd4:	00e506a3          	sb	a4,13(a0)
		thread->base.thread_state &= ~_THREAD_ABORTING;
80005cd8:	fdf7f713          	andi	a4,a5,-33
80005cdc:	00876713          	ori	a4,a4,8
80005ce0:	00e506a3          	sb	a4,13(a0)
		if (z_is_thread_queued(thread)) {
80005ce4:	01871713          	slli	a4,a4,0x18
80005ce8:	41875713          	srai	a4,a4,0x18
80005cec:	02074e63          	bltz	a4,80005d28 <end_thread+0x78>
		if (thread->base.pended_on != NULL) {
80005cf0:	00842783          	lw	a5,8(s0)
80005cf4:	00078663          	beqz	a5,80005d00 <end_thread+0x50>
			unpend_thread_no_timeout(thread);
80005cf8:	00040513          	mv	a0,s0
80005cfc:	e50ff0ef          	jal	ra,8000534c <unpend_thread_no_timeout>
80005d00:	01840513          	addi	a0,s0,24
80005d04:	518000ef          	jal	ra,8000621c <z_abort_timeout>
		unpend_all(&thread->join_queue);
80005d08:	06c40513          	addi	a0,s0,108
80005d0c:	b99ff0ef          	jal	ra,800058a4 <unpend_all>
		update_cache(1);
80005d10:	00100513          	li	a0,1
80005d14:	e94ff0ef          	jal	ra,800053a8 <update_cache>
}
80005d18:	00c12083          	lw	ra,12(sp)
80005d1c:	00812403          	lw	s0,8(sp)
80005d20:	01010113          	addi	sp,sp,16
80005d24:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_QUEUED;
80005d28:	05f7f793          	andi	a5,a5,95
80005d2c:	0087e793          	ori	a5,a5,8
80005d30:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
80005d34:	00050593          	mv	a1,a0
80005d38:	80009537          	lui	a0,0x80009
80005d3c:	fd450513          	addi	a0,a0,-44 # 80008fd4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fd5>
80005d40:	decff0ef          	jal	ra,8000532c <z_priq_dumb_remove>
}
80005d44:	fadff06f          	j	80005cf0 <end_thread+0x40>
80005d48:	00008067          	ret

80005d4c <z_unpend_first_thread>:
80005d4c:	00308013          	addi	zero,ra,3
{
80005d50:	ff010113          	addi	sp,sp,-16
80005d54:	00112623          	sw	ra,12(sp)
80005d58:	00812423          	sw	s0,8(sp)
80005d5c:	00912223          	sw	s1,4(sp)
80005d60:	01212023          	sw	s2,0(sp)
80005d64:	00050493          	mv	s1,a0
	LOCKED(&sched_spinlock) {
80005d68:	00000793          	li	a5,0
80005d6c:	30047973          	csrrci	s2,mstatus,8
	struct k_thread *thread = NULL;
80005d70:	00000413          	li	s0,0
80005d74:	0100006f          	j	80005d84 <z_unpend_first_thread+0x38>
			  : "r" (key & MSTATUS_IEN)
80005d78:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80005d7c:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80005d80:	00100793          	li	a5,1
80005d84:	02079263          	bnez	a5,80005da8 <z_unpend_first_thread+0x5c>
		thread = _priq_wait_best(&wait_q->waitq);
80005d88:	00048513          	mv	a0,s1
80005d8c:	e00ff0ef          	jal	ra,8000538c <z_priq_dumb_best>
80005d90:	00050413          	mv	s0,a0
		if (thread != NULL) {
80005d94:	fe0502e3          	beqz	a0,80005d78 <z_unpend_first_thread+0x2c>
			unpend_thread_no_timeout(thread);
80005d98:	db4ff0ef          	jal	ra,8000534c <unpend_thread_no_timeout>
80005d9c:	01840513          	addi	a0,s0,24
80005da0:	47c000ef          	jal	ra,8000621c <z_abort_timeout>
80005da4:	fd5ff06f          	j	80005d78 <z_unpend_first_thread+0x2c>
}
80005da8:	00040513          	mv	a0,s0
80005dac:	00c12083          	lw	ra,12(sp)
80005db0:	00812403          	lw	s0,8(sp)
80005db4:	00412483          	lw	s1,4(sp)
80005db8:	00012903          	lw	s2,0(sp)
80005dbc:	01010113          	addi	sp,sp,16
80005dc0:	00008067          	ret

80005dc4 <init_ready_q>:
80005dc4:	00308013          	addi	zero,ra,3
	sys_dlist_init(&rq->runq);
80005dc8:	00450793          	addi	a5,a0,4
	list->head = (sys_dnode_t *)list;
80005dcc:	00f52223          	sw	a5,4(a0)
	list->tail = (sys_dnode_t *)list;
80005dd0:	00f52423          	sw	a5,8(a0)
}
80005dd4:	00008067          	ret

80005dd8 <z_sched_init>:
80005dd8:	00308013          	addi	zero,ra,3
{
80005ddc:	ff010113          	addi	sp,sp,-16
80005de0:	00112623          	sw	ra,12(sp)
	init_ready_q(&_kernel.ready_q);
80005de4:	80009537          	lui	a0,0x80009
80005de8:	fd050513          	addi	a0,a0,-48 # 80008fd0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fd1>
80005dec:	fd9ff0ef          	jal	ra,80005dc4 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
80005df0:	00000593          	li	a1,0
80005df4:	00000513          	li	a0,0
80005df8:	a5cff0ef          	jal	ra,80005054 <k_sched_time_slice_set>
}
80005dfc:	00c12083          	lw	ra,12(sp)
80005e00:	01010113          	addi	sp,sp,16
80005e04:	00008067          	ret

80005e08 <z_impl_z_current_get>:
80005e08:	00308013          	addi	zero,ra,3
	k_tid_t ret = _current_cpu->current;
80005e0c:	800097b7          	lui	a5,0x80009
}
80005e10:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005e14:	0087a503          	lw	a0,8(a5)
80005e18:	00008067          	ret

80005e1c <z_thread_abort>:
80005e1c:	00308013          	addi	zero,ra,3
{
80005e20:	ff010113          	addi	sp,sp,-16
80005e24:	00112623          	sw	ra,12(sp)
80005e28:	00812423          	sw	s0,8(sp)
80005e2c:	00912223          	sw	s1,4(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005e30:	300474f3          	csrrci	s1,mstatus,8
	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
80005e34:	00c54783          	lbu	a5,12(a0)
80005e38:	0017f793          	andi	a5,a5,1
80005e3c:	02079063          	bnez	a5,80005e5c <z_thread_abort+0x40>
80005e40:	00050413          	mv	s0,a0
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
80005e44:	00d54783          	lbu	a5,13(a0)
80005e48:	0087f793          	andi	a5,a5,8
80005e4c:	02078c63          	beqz	a5,80005e84 <z_thread_abort+0x68>
	__asm__ volatile ("csrs mstatus, %0"
80005e50:	0084f493          	andi	s1,s1,8
80005e54:	3004a073          	csrs	mstatus,s1
		return;
80005e58:	0180006f          	j	80005e70 <z_thread_abort+0x54>
80005e5c:	0084f493          	andi	s1,s1,8
80005e60:	3004a073          	csrs	mstatus,s1
	register unsigned long a0 __asm__ ("a0") = arg1;
80005e64:	00400513          	li	a0,4
	register unsigned long t0 __asm__ ("t0") = call_id;
80005e68:	00000293          	li	t0,0
	__asm__ volatile ("ecall"
80005e6c:	00000073          	ecall
}
80005e70:	00c12083          	lw	ra,12(sp)
80005e74:	00812403          	lw	s0,8(sp)
80005e78:	00412483          	lw	s1,4(sp)
80005e7c:	01010113          	addi	sp,sp,16
80005e80:	00008067          	ret
	end_thread(thread);
80005e84:	e2dff0ef          	jal	ra,80005cb0 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
80005e88:	800097b7          	lui	a5,0x80009
80005e8c:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005e90:	0087a783          	lw	a5,8(a5)
80005e94:	00878863          	beq	a5,s0,80005ea4 <z_thread_abort+0x88>
80005e98:	0084f493          	andi	s1,s1,8
80005e9c:	3004a073          	csrs	mstatus,s1
80005ea0:	fd1ff06f          	j	80005e70 <z_thread_abort+0x54>
80005ea4:	800097b7          	lui	a5,0x80009
80005ea8:	fb87a783          	lw	a5,-72(a5) # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80005eac:	fe0796e3          	bnez	a5,80005e98 <z_thread_abort+0x7c>
		z_swap(&sched_spinlock, key);
80005eb0:	00048593          	mv	a1,s1
80005eb4:	80009537          	lui	a0,0x80009
80005eb8:	fdc50513          	addi	a0,a0,-36 # 80008fdc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fdd>
80005ebc:	b68ff0ef          	jal	ra,80005224 <z_swap>
80005ec0:	fd9ff06f          	j	80005e98 <z_thread_abort+0x7c>

80005ec4 <z_impl_k_thread_abort>:
80005ec4:	00308013          	addi	zero,ra,3
{
80005ec8:	ff010113          	addi	sp,sp,-16
80005ecc:	00112623          	sw	ra,12(sp)
	z_thread_abort(thread);
80005ed0:	f4dff0ef          	jal	ra,80005e1c <z_thread_abort>
}
80005ed4:	00c12083          	lw	ra,12(sp)
80005ed8:	01010113          	addi	sp,sp,16
80005edc:	00008067          	ret

80005ee0 <first>:
80005ee0:	00308013          	addi	zero,ra,3
	return list->head == list;
80005ee4:	82418793          	addi	a5,gp,-2012 # 8000ba94 <timeout_list>
80005ee8:	0007a503          	lw	a0,0(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80005eec:	00f50463          	beq	a0,a5,80005ef4 <first+0x14>
}
80005ef0:	00008067          	ret
80005ef4:	00000513          	li	a0,0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
80005ef8:	ff9ff06f          	j	80005ef0 <first+0x10>

80005efc <next>:
80005efc:	00308013          	addi	zero,ra,3
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80005f00:	00050e63          	beqz	a0,80005f1c <next+0x20>
	return (node == list->tail) ? NULL : node->next;
80005f04:	82418713          	addi	a4,gp,-2012 # 8000ba94 <timeout_list>
80005f08:	00472703          	lw	a4,4(a4)
80005f0c:	00e50663          	beq	a0,a4,80005f18 <next+0x1c>
80005f10:	00052503          	lw	a0,0(a0)
80005f14:	00008067          	ret
80005f18:	00000513          	li	a0,0
}
80005f1c:	00008067          	ret

80005f20 <remove_timeout>:
80005f20:	00308013          	addi	zero,ra,3
{
80005f24:	ff010113          	addi	sp,sp,-16
80005f28:	00112623          	sw	ra,12(sp)
80005f2c:	00812423          	sw	s0,8(sp)
80005f30:	00050413          	mv	s0,a0
	if (next(t) != NULL) {
80005f34:	fc9ff0ef          	jal	ra,80005efc <next>
80005f38:	02050663          	beqz	a0,80005f64 <remove_timeout+0x44>
		next(t)->dticks += t->dticks;
80005f3c:	01052783          	lw	a5,16(a0)
80005f40:	01452683          	lw	a3,20(a0)
80005f44:	01042703          	lw	a4,16(s0)
80005f48:	01442603          	lw	a2,20(s0)
80005f4c:	00e78733          	add	a4,a5,a4
80005f50:	00f737b3          	sltu	a5,a4,a5
80005f54:	00c686b3          	add	a3,a3,a2
80005f58:	00d787b3          	add	a5,a5,a3
80005f5c:	00e52823          	sw	a4,16(a0)
80005f60:	00f52a23          	sw	a5,20(a0)
	sys_dnode_t *const prev = node->prev;
80005f64:	00442703          	lw	a4,4(s0)
	sys_dnode_t *const next = node->next;
80005f68:	00042783          	lw	a5,0(s0)
	prev->next = next;
80005f6c:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
80005f70:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
80005f74:	00042023          	sw	zero,0(s0)
	node->prev = NULL;
80005f78:	00042223          	sw	zero,4(s0)
}
80005f7c:	00c12083          	lw	ra,12(sp)
80005f80:	00812403          	lw	s0,8(sp)
80005f84:	01010113          	addi	sp,sp,16
80005f88:	00008067          	ret

80005f8c <elapsed>:
80005f8c:	00308013          	addi	zero,ra,3
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
80005f90:	800097b7          	lui	a5,0x80009
80005f94:	af87a783          	lw	a5,-1288(a5) # 80008af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008af9>
80005f98:	00078663          	beqz	a5,80005fa4 <elapsed+0x18>
80005f9c:	00000513          	li	a0,0
}
80005fa0:	00008067          	ret
{
80005fa4:	ff010113          	addi	sp,sp,-16
80005fa8:	00112623          	sw	ra,12(sp)
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
80005fac:	d10fe0ef          	jal	ra,800044bc <sys_clock_elapsed>
}
80005fb0:	00c12083          	lw	ra,12(sp)
80005fb4:	01010113          	addi	sp,sp,16
80005fb8:	00008067          	ret

80005fbc <next_timeout>:
80005fbc:	00308013          	addi	zero,ra,3
{
80005fc0:	ff010113          	addi	sp,sp,-16
80005fc4:	00112623          	sw	ra,12(sp)
80005fc8:	00812423          	sw	s0,8(sp)
	struct _timeout *to = first();
80005fcc:	f15ff0ef          	jal	ra,80005ee0 <first>
80005fd0:	00050413          	mv	s0,a0
	int32_t ticks_elapsed = elapsed();
80005fd4:	fb9ff0ef          	jal	ra,80005f8c <elapsed>
	if ((to == NULL) ||
80005fd8:	02040c63          	beqz	s0,80006010 <next_timeout+0x54>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
80005fdc:	01042703          	lw	a4,16(s0)
80005fe0:	01442783          	lw	a5,20(s0)
80005fe4:	41f55693          	srai	a3,a0,0x1f
80005fe8:	40a70533          	sub	a0,a4,a0
80005fec:	00a73733          	sltu	a4,a4,a0
80005ff0:	40d787b3          	sub	a5,a5,a3
80005ff4:	40e787b3          	sub	a5,a5,a4
	if ((to == NULL) ||
80005ff8:	02f04263          	bgtz	a5,8000601c <next_timeout+0x60>
80005ffc:	00079463          	bnez	a5,80006004 <next_timeout+0x48>
80006000:	00054e63          	bltz	a0,8000601c <next_timeout+0x60>
		ret = MAX(0, to->dticks - ticks_elapsed);
80006004:	0207d063          	bgez	a5,80006024 <next_timeout+0x68>
80006008:	00000513          	li	a0,0
8000600c:	0180006f          	j	80006024 <next_timeout+0x68>
		ret = MAX_WAIT;
80006010:	80000537          	lui	a0,0x80000
80006014:	fff54513          	not	a0,a0
80006018:	00c0006f          	j	80006024 <next_timeout+0x68>
8000601c:	80000537          	lui	a0,0x80000
80006020:	fff54513          	not	a0,a0
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
80006024:	800097b7          	lui	a5,0x80009
80006028:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
8000602c:	0107a783          	lw	a5,16(a5)
80006030:	00078663          	beqz	a5,8000603c <next_timeout+0x80>
80006034:	00a7d463          	bge	a5,a0,8000603c <next_timeout+0x80>
		ret = _current_cpu->slice_ticks;
80006038:	00078513          	mv	a0,a5
}
8000603c:	00c12083          	lw	ra,12(sp)
80006040:	00812403          	lw	s0,8(sp)
80006044:	01010113          	addi	sp,sp,16
80006048:	00008067          	ret

8000604c <z_add_timeout>:
8000604c:	00308013          	addi	zero,ra,3
{
80006050:	fe010113          	addi	sp,sp,-32
80006054:	00112e23          	sw	ra,28(sp)
80006058:	00812c23          	sw	s0,24(sp)
8000605c:	00912a23          	sw	s1,20(sp)
80006060:	01212823          	sw	s2,16(sp)
80006064:	01312623          	sw	s3,12(sp)
80006068:	01412423          	sw	s4,8(sp)
8000606c:	01512223          	sw	s5,4(sp)
80006070:	00050413          	mv	s0,a0
80006074:	00060493          	mv	s1,a2
80006078:	00068913          	mv	s2,a3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
8000607c:	fff00793          	li	a5,-1
80006080:	00c78a63          	beq	a5,a2,80006094 <z_add_timeout+0x48>
	to->fn = fn;
80006084:	00b42423          	sw	a1,8(s0)
	LOCKED(&timeout_lock) {
80006088:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000608c:	300479f3          	csrrci	s3,mstatus,8
80006090:	1080006f          	j	80006198 <z_add_timeout+0x14c>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
80006094:	fef698e3          	bne	a3,a5,80006084 <z_add_timeout+0x38>
}
80006098:	01c12083          	lw	ra,28(sp)
8000609c:	01812403          	lw	s0,24(sp)
800060a0:	01412483          	lw	s1,20(sp)
800060a4:	01012903          	lw	s2,16(sp)
800060a8:	00c12983          	lw	s3,12(sp)
800060ac:	00812a03          	lw	s4,8(sp)
800060b0:	00412a83          	lw	s5,4(sp)
800060b4:	02010113          	addi	sp,sp,32
800060b8:	00008067          	ret
			to->dticks = MAX(1, ticks);
800060bc:	00071463          	bnez	a4,800060c4 <z_add_timeout+0x78>
800060c0:	12079463          	bnez	a5,800061e8 <z_add_timeout+0x19c>
800060c4:	00100793          	li	a5,1
800060c8:	00000713          	li	a4,0
800060cc:	11c0006f          	j	800061e8 <z_add_timeout+0x19c>
			to->dticks = timeout.ticks + 1 + elapsed();
800060d0:	00148a13          	addi	s4,s1,1
800060d4:	009a3ab3          	sltu	s5,s4,s1
800060d8:	012a8ab3          	add	s5,s5,s2
800060dc:	eb1ff0ef          	jal	ra,80005f8c <elapsed>
800060e0:	41f55713          	srai	a4,a0,0x1f
800060e4:	00aa07b3          	add	a5,s4,a0
800060e8:	0147ba33          	sltu	s4,a5,s4
800060ec:	00ea8ab3          	add	s5,s5,a4
800060f0:	015a0a33          	add	s4,s4,s5
800060f4:	00f42823          	sw	a5,16(s0)
800060f8:	01442a23          	sw	s4,20(s0)
800060fc:	0f40006f          	j	800061f0 <z_add_timeout+0x1a4>
			to->dticks -= t->dticks;
80006100:	40d706b3          	sub	a3,a4,a3
80006104:	00d73733          	sltu	a4,a4,a3
80006108:	40c787b3          	sub	a5,a5,a2
8000610c:	40e787b3          	sub	a5,a5,a4
80006110:	00d42823          	sw	a3,16(s0)
80006114:	00f42a23          	sw	a5,20(s0)
		for (t = first(); t != NULL; t = next(t)) {
80006118:	de5ff0ef          	jal	ra,80005efc <next>
8000611c:	04050863          	beqz	a0,8000616c <z_add_timeout+0x120>
			if (t->dticks > to->dticks) {
80006120:	01052683          	lw	a3,16(a0) # 80000010 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000011>
80006124:	01452603          	lw	a2,20(a0)
80006128:	01042703          	lw	a4,16(s0)
8000612c:	01442783          	lw	a5,20(s0)
80006130:	00c7c663          	blt	a5,a2,8000613c <z_add_timeout+0xf0>
80006134:	fcf616e3          	bne	a2,a5,80006100 <z_add_timeout+0xb4>
80006138:	fcd774e3          	bgeu	a4,a3,80006100 <z_add_timeout+0xb4>
				t->dticks -= to->dticks;
8000613c:	40e68733          	sub	a4,a3,a4
80006140:	00e6b6b3          	sltu	a3,a3,a4
80006144:	40f60633          	sub	a2,a2,a5
80006148:	40d60633          	sub	a2,a2,a3
8000614c:	00e52823          	sw	a4,16(a0)
80006150:	00c52a23          	sw	a2,20(a0)
	sys_dnode_t *const prev = successor->prev;
80006154:	00452783          	lw	a5,4(a0)
	node->prev = prev;
80006158:	00f42223          	sw	a5,4(s0)
	node->next = successor;
8000615c:	00a42023          	sw	a0,0(s0)
	prev->next = node;
80006160:	0087a023          	sw	s0,0(a5)
	successor->prev = node;
80006164:	00852223          	sw	s0,4(a0)
		if (t == NULL) {
80006168:	01c0006f          	j	80006184 <z_add_timeout+0x138>
	sys_dnode_t *const tail = list->tail;
8000616c:	82418793          	addi	a5,gp,-2012 # 8000ba94 <timeout_list>
80006170:	0047a703          	lw	a4,4(a5)
	node->next = list;
80006174:	00f42023          	sw	a5,0(s0)
	node->prev = tail;
80006178:	00e42223          	sw	a4,4(s0)
	tail->next = node;
8000617c:	00872023          	sw	s0,0(a4)
	list->tail = node;
80006180:	0087a223          	sw	s0,4(a5)
		if (to == first()) {
80006184:	d5dff0ef          	jal	ra,80005ee0 <first>
80006188:	06a40863          	beq	s0,a0,800061f8 <z_add_timeout+0x1ac>
			  : "r" (key & MSTATUS_IEN)
8000618c:	0089f793          	andi	a5,s3,8
	__asm__ volatile ("csrs mstatus, %0"
80006190:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
80006194:	00100793          	li	a5,1
80006198:	f00790e3          	bnez	a5,80006098 <z_add_timeout+0x4c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
8000619c:	ffe00793          	li	a5,-2
800061a0:	40978733          	sub	a4,a5,s1
800061a4:	00e7b733          	sltu	a4,a5,a4
800061a8:	fff94793          	not	a5,s2
800061ac:	40e787b3          	sub	a5,a5,a4
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
800061b0:	f207c0e3          	bltz	a5,800060d0 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
800061b4:	80009737          	lui	a4,0x80009
800061b8:	ac072783          	lw	a5,-1344(a4) # 80008ac0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ac1>
800061bc:	ac472683          	lw	a3,-1340(a4)
800061c0:	009787b3          	add	a5,a5,s1
800061c4:	0097b733          	sltu	a4,a5,s1
800061c8:	012686b3          	add	a3,a3,s2
800061cc:	00d70733          	add	a4,a4,a3
800061d0:	ffe00693          	li	a3,-2
800061d4:	40f687b3          	sub	a5,a3,a5
800061d8:	00f6b6b3          	sltu	a3,a3,a5
800061dc:	fff74713          	not	a4,a4
			to->dticks = MAX(1, ticks);
800061e0:	40d70733          	sub	a4,a4,a3
800061e4:	ece05ce3          	blez	a4,800060bc <z_add_timeout+0x70>
800061e8:	00f42823          	sw	a5,16(s0)
800061ec:	00e42a23          	sw	a4,20(s0)
		for (t = first(); t != NULL; t = next(t)) {
800061f0:	cf1ff0ef          	jal	ra,80005ee0 <first>
800061f4:	f29ff06f          	j	8000611c <z_add_timeout+0xd0>
			int32_t next_time = next_timeout();
800061f8:	dc5ff0ef          	jal	ra,80005fbc <next_timeout>
			if (next_time == 0 ||
800061fc:	00050a63          	beqz	a0,80006210 <z_add_timeout+0x1c4>
			    _current_cpu->slice_ticks != next_time) {
80006200:	800097b7          	lui	a5,0x80009
80006204:	fb878793          	addi	a5,a5,-72 # 80008fb8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb9>
80006208:	0107a783          	lw	a5,16(a5)
			if (next_time == 0 ||
8000620c:	f8a780e3          	beq	a5,a0,8000618c <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
80006210:	00000593          	li	a1,0
80006214:	9c8fe0ef          	jal	ra,800043dc <sys_clock_set_timeout>
80006218:	f75ff06f          	j	8000618c <z_add_timeout+0x140>

8000621c <z_abort_timeout>:
8000621c:	00308013          	addi	zero,ra,3
{
80006220:	ff010113          	addi	sp,sp,-16
80006224:	00112623          	sw	ra,12(sp)
80006228:	00812423          	sw	s0,8(sp)
8000622c:	00912223          	sw	s1,4(sp)
80006230:	01212023          	sw	s2,0(sp)
80006234:	00050493          	mv	s1,a0
	LOCKED(&timeout_lock) {
80006238:	00000413          	li	s0,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000623c:	30047973          	csrrci	s2,mstatus,8
	int ret = -EINVAL;
80006240:	fea00513          	li	a0,-22
80006244:	0100006f          	j	80006254 <z_abort_timeout+0x38>
			  : "r" (key & MSTATUS_IEN)
80006248:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
8000624c:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
80006250:	00100413          	li	s0,1
80006254:	00041e63          	bnez	s0,80006270 <z_abort_timeout+0x54>
	return node->next != NULL;
80006258:	0004a783          	lw	a5,0(s1)
		if (sys_dnode_is_linked(&to->node)) {
8000625c:	fe0786e3          	beqz	a5,80006248 <z_abort_timeout+0x2c>
			remove_timeout(to);
80006260:	00048513          	mv	a0,s1
80006264:	cbdff0ef          	jal	ra,80005f20 <remove_timeout>
			ret = 0;
80006268:	00040513          	mv	a0,s0
8000626c:	fddff06f          	j	80006248 <z_abort_timeout+0x2c>
}
80006270:	00c12083          	lw	ra,12(sp)
80006274:	00812403          	lw	s0,8(sp)
80006278:	00412483          	lw	s1,4(sp)
8000627c:	00012903          	lw	s2,0(sp)
80006280:	01010113          	addi	sp,sp,16
80006284:	00008067          	ret

80006288 <z_set_timeout_expiry>:
80006288:	00308013          	addi	zero,ra,3
{
8000628c:	fe010113          	addi	sp,sp,-32
80006290:	00112e23          	sw	ra,28(sp)
80006294:	00812c23          	sw	s0,24(sp)
80006298:	00912a23          	sw	s1,20(sp)
8000629c:	01212823          	sw	s2,16(sp)
800062a0:	01312623          	sw	s3,12(sp)
800062a4:	00050493          	mv	s1,a0
800062a8:	00058993          	mv	s3,a1
	LOCKED(&timeout_lock) {
800062ac:	00000413          	li	s0,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800062b0:	30047973          	csrrci	s2,mstatus,8
800062b4:	0240006f          	j	800062d8 <z_set_timeout_expiry+0x50>
			      || (ticks <= next_to);
800062b8:	00100413          	li	s0,1
		bool sooner = (next_to == K_TICKS_FOREVER)
800062bc:	00147413          	andi	s0,s0,1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
800062c0:	00100793          	li	a5,1
800062c4:	00a7d463          	bge	a5,a0,800062cc <z_set_timeout_expiry+0x44>
800062c8:	02041663          	bnez	s0,800062f4 <z_set_timeout_expiry+0x6c>
			  : "r" (key & MSTATUS_IEN)
800062cc:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
800062d0:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
800062d4:	00100413          	li	s0,1
800062d8:	02041863          	bnez	s0,80006308 <z_set_timeout_expiry+0x80>
		int next_to = next_timeout();
800062dc:	ce1ff0ef          	jal	ra,80005fbc <next_timeout>
			      || (ticks <= next_to);
800062e0:	fff00793          	li	a5,-1
800062e4:	fcf50ae3          	beq	a0,a5,800062b8 <z_set_timeout_expiry+0x30>
800062e8:	fc954ae3          	blt	a0,s1,800062bc <z_set_timeout_expiry+0x34>
800062ec:	00100413          	li	s0,1
800062f0:	fcdff06f          	j	800062bc <z_set_timeout_expiry+0x34>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
800062f4:	00a4d463          	bge	s1,a0,800062fc <z_set_timeout_expiry+0x74>
800062f8:	00048513          	mv	a0,s1
800062fc:	00098593          	mv	a1,s3
80006300:	8dcfe0ef          	jal	ra,800043dc <sys_clock_set_timeout>
80006304:	fc9ff06f          	j	800062cc <z_set_timeout_expiry+0x44>
}
80006308:	01c12083          	lw	ra,28(sp)
8000630c:	01812403          	lw	s0,24(sp)
80006310:	01412483          	lw	s1,20(sp)
80006314:	01012903          	lw	s2,16(sp)
80006318:	00c12983          	lw	s3,12(sp)
8000631c:	02010113          	addi	sp,sp,32
80006320:	00008067          	ret

80006324 <sys_clock_announce>:
80006324:	00308013          	addi	zero,ra,3
{
80006328:	ff010113          	addi	sp,sp,-16
8000632c:	00112623          	sw	ra,12(sp)
80006330:	00812423          	sw	s0,8(sp)
80006334:	00912223          	sw	s1,4(sp)
80006338:	01212023          	sw	s2,0(sp)
8000633c:	00050413          	mv	s0,a0
	z_time_slice(ticks);
80006340:	a7cff0ef          	jal	ra,800055bc <z_time_slice>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006344:	300474f3          	csrrci	s1,mstatus,8
	announce_remaining = ticks;
80006348:	800097b7          	lui	a5,0x80009
8000634c:	ae87ac23          	sw	s0,-1288(a5) # 80008af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008af9>
	while (first() != NULL && first()->dticks <= announce_remaining) {
80006350:	06c0006f          	j	800063bc <sys_clock_announce+0x98>
		curr_tick += dt;
80006354:	80009737          	lui	a4,0x80009
80006358:	41f95593          	srai	a1,s2,0x1f
8000635c:	ac072783          	lw	a5,-1344(a4) # 80008ac0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ac1>
80006360:	ac472683          	lw	a3,-1340(a4)
80006364:	01278633          	add	a2,a5,s2
80006368:	00f637b3          	sltu	a5,a2,a5
8000636c:	00b686b3          	add	a3,a3,a1
80006370:	00d787b3          	add	a5,a5,a3
80006374:	acc72023          	sw	a2,-1344(a4)
80006378:	acf72223          	sw	a5,-1340(a4)
		t->dticks = 0;
8000637c:	00000793          	li	a5,0
80006380:	00000813          	li	a6,0
80006384:	00f42823          	sw	a5,16(s0)
80006388:	01042a23          	sw	a6,20(s0)
		remove_timeout(t);
8000638c:	00040513          	mv	a0,s0
80006390:	b91ff0ef          	jal	ra,80005f20 <remove_timeout>
			  : "r" (key & MSTATUS_IEN)
80006394:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80006398:	3004a073          	csrs	mstatus,s1
		t->fn(t);
8000639c:	00842783          	lw	a5,8(s0)
800063a0:	00040513          	mv	a0,s0
800063a4:	000780e7          	jalr	a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
800063a8:	300474f3          	csrrci	s1,mstatus,8
		announce_remaining -= dt;
800063ac:	80009737          	lui	a4,0x80009
800063b0:	af872783          	lw	a5,-1288(a4) # 80008af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008af9>
800063b4:	412787b3          	sub	a5,a5,s2
800063b8:	aef72c23          	sw	a5,-1288(a4)
	while (first() != NULL && first()->dticks <= announce_remaining) {
800063bc:	b25ff0ef          	jal	ra,80005ee0 <first>
800063c0:	00050413          	mv	s0,a0
800063c4:	02050263          	beqz	a0,800063e8 <sys_clock_announce+0xc4>
800063c8:	01052903          	lw	s2,16(a0)
800063cc:	01452703          	lw	a4,20(a0)
800063d0:	800097b7          	lui	a5,0x80009
800063d4:	af87a683          	lw	a3,-1288(a5) # 80008af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008af9>
800063d8:	41f6d793          	srai	a5,a3,0x1f
800063dc:	00e7c663          	blt	a5,a4,800063e8 <sys_clock_announce+0xc4>
800063e0:	f6f71ae3          	bne	a4,a5,80006354 <sys_clock_announce+0x30>
800063e4:	f726f8e3          	bgeu	a3,s2,80006354 <sys_clock_announce+0x30>
	if (first() != NULL) {
800063e8:	02040863          	beqz	s0,80006418 <sys_clock_announce+0xf4>
		first()->dticks -= announce_remaining;
800063ec:	01042683          	lw	a3,16(s0)
800063f0:	01442783          	lw	a5,20(s0)
800063f4:	80009737          	lui	a4,0x80009
800063f8:	af872703          	lw	a4,-1288(a4) # 80008af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008af9>
800063fc:	41f75613          	srai	a2,a4,0x1f
80006400:	40e68733          	sub	a4,a3,a4
80006404:	00e6b6b3          	sltu	a3,a3,a4
80006408:	40c787b3          	sub	a5,a5,a2
8000640c:	40d787b3          	sub	a5,a5,a3
80006410:	00e42823          	sw	a4,16(s0)
80006414:	00f42a23          	sw	a5,20(s0)
	curr_tick += announce_remaining;
80006418:	800096b7          	lui	a3,0x80009
8000641c:	800095b7          	lui	a1,0x80009
80006420:	af85a703          	lw	a4,-1288(a1) # 80008af8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008af9>
80006424:	41f75513          	srai	a0,a4,0x1f
80006428:	ac06a783          	lw	a5,-1344(a3) # 80008ac0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ac1>
8000642c:	ac46a603          	lw	a2,-1340(a3)
80006430:	00e78733          	add	a4,a5,a4
80006434:	00f737b3          	sltu	a5,a4,a5
80006438:	00a60633          	add	a2,a2,a0
8000643c:	00c787b3          	add	a5,a5,a2
80006440:	ace6a023          	sw	a4,-1344(a3)
80006444:	acf6a223          	sw	a5,-1340(a3)
	announce_remaining = 0;
80006448:	ae05ac23          	sw	zero,-1288(a1)
	sys_clock_set_timeout(next_timeout(), false);
8000644c:	b71ff0ef          	jal	ra,80005fbc <next_timeout>
80006450:	00000593          	li	a1,0
80006454:	f89fd0ef          	jal	ra,800043dc <sys_clock_set_timeout>
			  : "r" (key & MSTATUS_IEN)
80006458:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
8000645c:	3004a073          	csrs	mstatus,s1
}
80006460:	00c12083          	lw	ra,12(sp)
80006464:	00812403          	lw	s0,8(sp)
80006468:	00412483          	lw	s1,4(sp)
8000646c:	00012903          	lw	s2,0(sp)
80006470:	01010113          	addi	sp,sp,16
80006474:	00008067          	ret

80006478 <boot_banner>:
80006478:	00308013          	addi	zero,ra,3
{
8000647c:	ff010113          	addi	sp,sp,-16
80006480:	00112623          	sw	ra,12(sp)
	printk("*** Booting Zephyr OS build %s %s ***\n",
80006484:	80008637          	lui	a2,0x80008
80006488:	cf860613          	addi	a2,a2,-776 # 80007cf8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007cf9>
8000648c:	800095b7          	lui	a1,0x80009
80006490:	8d458593          	addi	a1,a1,-1836 # 800088d4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800088d5>
80006494:	80009537          	lui	a0,0x80009
80006498:	8f450513          	addi	a0,a0,-1804 # 800088f4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800088f5>
8000649c:	9dcfc0ef          	jal	ra,80002678 <printk>
}
800064a0:	00c12083          	lw	ra,12(sp)
800064a4:	01010113          	addi	sp,sp,16
800064a8:	00008067          	ret

800064ac <_OffsetAbsSyms>:
800064ac:	00308013          	addi	zero,ra,3
GEN_ABS_SYM_END
800064b0:	00008067          	ret

800064b4 <exit>:
800064b4:	ff010113          	addi	sp,sp,-16
800064b8:	00812423          	sw	s0,8(sp)
800064bc:	00112623          	sw	ra,12(sp)
800064c0:	00000793          	li	a5,0
800064c4:	00050413          	mv	s0,a0
800064c8:	00078863          	beqz	a5,800064d8 <exit+0x24>
800064cc:	00000593          	li	a1,0
800064d0:	00000097          	auipc	ra,0x0
800064d4:	000000e7          	jalr	zero # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
800064d8:	800087b7          	lui	a5,0x80008
800064dc:	9947a503          	lw	a0,-1644(a5) # 80007994 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007995>
800064e0:	02852783          	lw	a5,40(a0)
800064e4:	00078463          	beqz	a5,800064ec <exit+0x38>
800064e8:	000780e7          	jalr	a5
800064ec:	00040513          	mv	a0,s0
800064f0:	ebcfd0ef          	jal	ra,80003bac <_exit>

800064f4 <malloc>:
800064f4:	00050593          	mv	a1,a0
800064f8:	82c1a503          	lw	a0,-2004(gp) # 8000ba9c <_impure_ptr>
800064fc:	1000006f          	j	800065fc <_malloc_r>

80006500 <_free_r>:
80006500:	0e058c63          	beqz	a1,800065f8 <_free_r+0xf8>
80006504:	ffc5a783          	lw	a5,-4(a1)
80006508:	fe010113          	addi	sp,sp,-32
8000650c:	00812c23          	sw	s0,24(sp)
80006510:	00112e23          	sw	ra,28(sp)
80006514:	ffc58413          	addi	s0,a1,-4
80006518:	0007d463          	bgez	a5,80006520 <_free_r+0x20>
8000651c:	00f40433          	add	s0,s0,a5
80006520:	00a12623          	sw	a0,12(sp)
80006524:	6bc000ef          	jal	ra,80006be0 <__malloc_lock>
80006528:	80009737          	lui	a4,0x80009
8000652c:	b0072783          	lw	a5,-1280(a4) # 80008b00 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008b01>
80006530:	00c12503          	lw	a0,12(sp)
80006534:	00079e63          	bnez	a5,80006550 <_free_r+0x50>
80006538:	00042223          	sw	zero,4(s0)
8000653c:	b0872023          	sw	s0,-1280(a4)
80006540:	01812403          	lw	s0,24(sp)
80006544:	01c12083          	lw	ra,28(sp)
80006548:	02010113          	addi	sp,sp,32
8000654c:	69c0006f          	j	80006be8 <__malloc_unlock>
80006550:	02f47463          	bgeu	s0,a5,80006578 <_free_r+0x78>
80006554:	00042603          	lw	a2,0(s0)
80006558:	00c406b3          	add	a3,s0,a2
8000655c:	00d79a63          	bne	a5,a3,80006570 <_free_r+0x70>
80006560:	0007a683          	lw	a3,0(a5)
80006564:	0047a783          	lw	a5,4(a5)
80006568:	00c686b3          	add	a3,a3,a2
8000656c:	00d42023          	sw	a3,0(s0)
80006570:	00f42223          	sw	a5,4(s0)
80006574:	fc9ff06f          	j	8000653c <_free_r+0x3c>
80006578:	00078713          	mv	a4,a5
8000657c:	0047a783          	lw	a5,4(a5)
80006580:	00078463          	beqz	a5,80006588 <_free_r+0x88>
80006584:	fef47ae3          	bgeu	s0,a5,80006578 <_free_r+0x78>
80006588:	00072683          	lw	a3,0(a4)
8000658c:	00d70633          	add	a2,a4,a3
80006590:	02861863          	bne	a2,s0,800065c0 <_free_r+0xc0>
80006594:	00042603          	lw	a2,0(s0)
80006598:	00c686b3          	add	a3,a3,a2
8000659c:	00d72023          	sw	a3,0(a4)
800065a0:	00d70633          	add	a2,a4,a3
800065a4:	f8c79ee3          	bne	a5,a2,80006540 <_free_r+0x40>
800065a8:	0007a603          	lw	a2,0(a5)
800065ac:	0047a783          	lw	a5,4(a5)
800065b0:	00d606b3          	add	a3,a2,a3
800065b4:	00d72023          	sw	a3,0(a4)
800065b8:	00f72223          	sw	a5,4(a4)
800065bc:	f85ff06f          	j	80006540 <_free_r+0x40>
800065c0:	00c47863          	bgeu	s0,a2,800065d0 <_free_r+0xd0>
800065c4:	00c00793          	li	a5,12
800065c8:	00f52023          	sw	a5,0(a0)
800065cc:	f75ff06f          	j	80006540 <_free_r+0x40>
800065d0:	00042603          	lw	a2,0(s0)
800065d4:	00c406b3          	add	a3,s0,a2
800065d8:	00d79a63          	bne	a5,a3,800065ec <_free_r+0xec>
800065dc:	0007a683          	lw	a3,0(a5)
800065e0:	0047a783          	lw	a5,4(a5)
800065e4:	00c686b3          	add	a3,a3,a2
800065e8:	00d42023          	sw	a3,0(s0)
800065ec:	00f42223          	sw	a5,4(s0)
800065f0:	00872223          	sw	s0,4(a4)
800065f4:	f4dff06f          	j	80006540 <_free_r+0x40>
800065f8:	00008067          	ret

800065fc <_malloc_r>:
800065fc:	fe010113          	addi	sp,sp,-32
80006600:	00912a23          	sw	s1,20(sp)
80006604:	00358493          	addi	s1,a1,3
80006608:	ffc4f493          	andi	s1,s1,-4
8000660c:	01212823          	sw	s2,16(sp)
80006610:	00112e23          	sw	ra,28(sp)
80006614:	00812c23          	sw	s0,24(sp)
80006618:	01312623          	sw	s3,12(sp)
8000661c:	00848493          	addi	s1,s1,8
80006620:	00c00793          	li	a5,12
80006624:	00050913          	mv	s2,a0
80006628:	06f4f463          	bgeu	s1,a5,80006690 <_malloc_r+0x94>
8000662c:	00c00493          	li	s1,12
80006630:	06b4e263          	bltu	s1,a1,80006694 <_malloc_r+0x98>
80006634:	00090513          	mv	a0,s2
80006638:	5a8000ef          	jal	ra,80006be0 <__malloc_lock>
8000663c:	800096b7          	lui	a3,0x80009
80006640:	b006a703          	lw	a4,-1280(a3) # 80008b00 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008b01>
80006644:	00070413          	mv	s0,a4
80006648:	06041a63          	bnez	s0,800066bc <_malloc_r+0xc0>
8000664c:	80009437          	lui	s0,0x80009
80006650:	afc42783          	lw	a5,-1284(s0) # 80008afc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008afd>
80006654:	00079a63          	bnez	a5,80006668 <_malloc_r+0x6c>
80006658:	00000593          	li	a1,0
8000665c:	00090513          	mv	a0,s2
80006660:	0ec000ef          	jal	ra,8000674c <_sbrk_r>
80006664:	aea42e23          	sw	a0,-1284(s0)
80006668:	00048593          	mv	a1,s1
8000666c:	00090513          	mv	a0,s2
80006670:	0dc000ef          	jal	ra,8000674c <_sbrk_r>
80006674:	fff00993          	li	s3,-1
80006678:	0b351a63          	bne	a0,s3,8000672c <_malloc_r+0x130>
8000667c:	00c00793          	li	a5,12
80006680:	00f92023          	sw	a5,0(s2)
80006684:	00090513          	mv	a0,s2
80006688:	560000ef          	jal	ra,80006be8 <__malloc_unlock>
8000668c:	0100006f          	j	8000669c <_malloc_r+0xa0>
80006690:	fa04d0e3          	bgez	s1,80006630 <_malloc_r+0x34>
80006694:	00c00793          	li	a5,12
80006698:	00f92023          	sw	a5,0(s2)
8000669c:	00000513          	li	a0,0
800066a0:	01c12083          	lw	ra,28(sp)
800066a4:	01812403          	lw	s0,24(sp)
800066a8:	01412483          	lw	s1,20(sp)
800066ac:	01012903          	lw	s2,16(sp)
800066b0:	00c12983          	lw	s3,12(sp)
800066b4:	02010113          	addi	sp,sp,32
800066b8:	00008067          	ret
800066bc:	00042783          	lw	a5,0(s0)
800066c0:	409787b3          	sub	a5,a5,s1
800066c4:	0407ce63          	bltz	a5,80006720 <_malloc_r+0x124>
800066c8:	00b00613          	li	a2,11
800066cc:	00f67a63          	bgeu	a2,a5,800066e0 <_malloc_r+0xe4>
800066d0:	00f42023          	sw	a5,0(s0)
800066d4:	00f40433          	add	s0,s0,a5
800066d8:	00942023          	sw	s1,0(s0)
800066dc:	0100006f          	j	800066ec <_malloc_r+0xf0>
800066e0:	00442783          	lw	a5,4(s0)
800066e4:	02871a63          	bne	a4,s0,80006718 <_malloc_r+0x11c>
800066e8:	b0f6a023          	sw	a5,-1280(a3)
800066ec:	00090513          	mv	a0,s2
800066f0:	4f8000ef          	jal	ra,80006be8 <__malloc_unlock>
800066f4:	00b40513          	addi	a0,s0,11
800066f8:	00440793          	addi	a5,s0,4
800066fc:	ff857513          	andi	a0,a0,-8
80006700:	40f50733          	sub	a4,a0,a5
80006704:	f8f50ee3          	beq	a0,a5,800066a0 <_malloc_r+0xa4>
80006708:	00e40433          	add	s0,s0,a4
8000670c:	40a787b3          	sub	a5,a5,a0
80006710:	00f42023          	sw	a5,0(s0)
80006714:	f8dff06f          	j	800066a0 <_malloc_r+0xa4>
80006718:	00f72223          	sw	a5,4(a4)
8000671c:	fd1ff06f          	j	800066ec <_malloc_r+0xf0>
80006720:	00040713          	mv	a4,s0
80006724:	00442403          	lw	s0,4(s0)
80006728:	f21ff06f          	j	80006648 <_malloc_r+0x4c>
8000672c:	00350413          	addi	s0,a0,3
80006730:	ffc47413          	andi	s0,s0,-4
80006734:	fa8502e3          	beq	a0,s0,800066d8 <_malloc_r+0xdc>
80006738:	40a405b3          	sub	a1,s0,a0
8000673c:	00090513          	mv	a0,s2
80006740:	00c000ef          	jal	ra,8000674c <_sbrk_r>
80006744:	f9351ae3          	bne	a0,s3,800066d8 <_malloc_r+0xdc>
80006748:	f35ff06f          	j	8000667c <_malloc_r+0x80>

8000674c <_sbrk_r>:
8000674c:	ff010113          	addi	sp,sp,-16
80006750:	00812423          	sw	s0,8(sp)
80006754:	00912223          	sw	s1,4(sp)
80006758:	00050413          	mv	s0,a0
8000675c:	800094b7          	lui	s1,0x80009
80006760:	00058513          	mv	a0,a1
80006764:	00112623          	sw	ra,12(sp)
80006768:	b004a223          	sw	zero,-1276(s1) # 80008b04 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008b05>
8000676c:	c64fd0ef          	jal	ra,80003bd0 <_sbrk>
80006770:	fff00793          	li	a5,-1
80006774:	00f51863          	bne	a0,a5,80006784 <_sbrk_r+0x38>
80006778:	b044a783          	lw	a5,-1276(s1)
8000677c:	00078463          	beqz	a5,80006784 <_sbrk_r+0x38>
80006780:	00f42023          	sw	a5,0(s0)
80006784:	00c12083          	lw	ra,12(sp)
80006788:	00812403          	lw	s0,8(sp)
8000678c:	00412483          	lw	s1,4(sp)
80006790:	01010113          	addi	sp,sp,16
80006794:	00008067          	ret

80006798 <sniprintf>:
80006798:	f6010113          	addi	sp,sp,-160
8000679c:	06912a23          	sw	s1,116(sp)
800067a0:	08f12a23          	sw	a5,148(sp)
800067a4:	06112e23          	sw	ra,124(sp)
800067a8:	06812c23          	sw	s0,120(sp)
800067ac:	07212823          	sw	s2,112(sp)
800067b0:	08d12623          	sw	a3,140(sp)
800067b4:	08e12823          	sw	a4,144(sp)
800067b8:	09012c23          	sw	a6,152(sp)
800067bc:	09112e23          	sw	a7,156(sp)
800067c0:	82c1a483          	lw	s1,-2004(gp) # 8000ba9c <_impure_ptr>
800067c4:	0205d463          	bgez	a1,800067ec <sniprintf+0x54>
800067c8:	08b00793          	li	a5,139
800067cc:	00f4a023          	sw	a5,0(s1)
800067d0:	fff00513          	li	a0,-1
800067d4:	07c12083          	lw	ra,124(sp)
800067d8:	07812403          	lw	s0,120(sp)
800067dc:	07412483          	lw	s1,116(sp)
800067e0:	07012903          	lw	s2,112(sp)
800067e4:	0a010113          	addi	sp,sp,160
800067e8:	00008067          	ret
800067ec:	20800793          	li	a5,520
800067f0:	00f11a23          	sh	a5,20(sp)
800067f4:	00a12423          	sw	a0,8(sp)
800067f8:	00a12c23          	sw	a0,24(sp)
800067fc:	00058413          	mv	s0,a1
80006800:	00000793          	li	a5,0
80006804:	00058463          	beqz	a1,8000680c <sniprintf+0x74>
80006808:	fff58793          	addi	a5,a1,-1
8000680c:	fff00913          	li	s2,-1
80006810:	08c10693          	addi	a3,sp,140
80006814:	00810593          	addi	a1,sp,8
80006818:	00048513          	mv	a0,s1
8000681c:	00f12823          	sw	a5,16(sp)
80006820:	00f12e23          	sw	a5,28(sp)
80006824:	01211b23          	sh	s2,22(sp)
80006828:	00d12223          	sw	a3,4(sp)
8000682c:	528000ef          	jal	ra,80006d54 <_svfiprintf_r>
80006830:	01255663          	bge	a0,s2,8000683c <sniprintf+0xa4>
80006834:	08b00793          	li	a5,139
80006838:	00f4a023          	sw	a5,0(s1)
8000683c:	f8040ce3          	beqz	s0,800067d4 <sniprintf+0x3c>
80006840:	00812783          	lw	a5,8(sp)
80006844:	00078023          	sb	zero,0(a5)
80006848:	f8dff06f          	j	800067d4 <sniprintf+0x3c>

8000684c <strcat>:
8000684c:	00050793          	mv	a5,a0
80006850:	0007c683          	lbu	a3,0(a5)
80006854:	00078713          	mv	a4,a5
80006858:	00178793          	addi	a5,a5,1
8000685c:	fe069ae3          	bnez	a3,80006850 <strcat+0x4>
80006860:	0005c783          	lbu	a5,0(a1)
80006864:	00158593          	addi	a1,a1,1
80006868:	00170713          	addi	a4,a4,1
8000686c:	fef70fa3          	sb	a5,-1(a4)
80006870:	fe0798e3          	bnez	a5,80006860 <strcat+0x14>
80006874:	00008067          	ret

80006878 <__strcat_chk>:
80006878:	00050713          	mv	a4,a0
8000687c:	00074783          	lbu	a5,0(a4)
80006880:	02079063          	bnez	a5,800068a0 <__strcat_chk+0x28>
80006884:	00f586b3          	add	a3,a1,a5
80006888:	0006c803          	lbu	a6,0(a3)
8000688c:	00f706b3          	add	a3,a4,a5
80006890:	02081663          	bnez	a6,800068bc <__strcat_chk+0x44>
80006894:	00f60863          	beq	a2,a5,800068a4 <__strcat_chk+0x2c>
80006898:	00068023          	sb	zero,0(a3)
8000689c:	00008067          	ret
800068a0:	00061863          	bnez	a2,800068b0 <__strcat_chk+0x38>
800068a4:	ff010113          	addi	sp,sp,-16
800068a8:	00112623          	sw	ra,12(sp)
800068ac:	ba0fd0ef          	jal	ra,80003c4c <__chk_fail>
800068b0:	00170713          	addi	a4,a4,1
800068b4:	fff60613          	addi	a2,a2,-1
800068b8:	fc5ff06f          	j	8000687c <__strcat_chk+0x4>
800068bc:	fec784e3          	beq	a5,a2,800068a4 <__strcat_chk+0x2c>
800068c0:	01068023          	sb	a6,0(a3)
800068c4:	00178793          	addi	a5,a5,1
800068c8:	fbdff06f          	j	80006884 <__strcat_chk+0xc>

800068cc <strcpy>:
800068cc:	00050793          	mv	a5,a0
800068d0:	0005c703          	lbu	a4,0(a1)
800068d4:	00178793          	addi	a5,a5,1
800068d8:	00158593          	addi	a1,a1,1
800068dc:	fee78fa3          	sb	a4,-1(a5)
800068e0:	fe0718e3          	bnez	a4,800068d0 <strcpy+0x4>
800068e4:	00008067          	ret

800068e8 <__strcpy_chk>:
800068e8:	fe010113          	addi	sp,sp,-32
800068ec:	00812c23          	sw	s0,24(sp)
800068f0:	00050413          	mv	s0,a0
800068f4:	00058513          	mv	a0,a1
800068f8:	00912a23          	sw	s1,20(sp)
800068fc:	00b12623          	sw	a1,12(sp)
80006900:	00060493          	mv	s1,a2
80006904:	00112e23          	sw	ra,28(sp)
80006908:	044000ef          	jal	ra,8000694c <strlen>
8000690c:	00150613          	addi	a2,a0,1
80006910:	00c12583          	lw	a1,12(sp)
80006914:	00c4f463          	bgeu	s1,a2,8000691c <__strcpy_chk+0x34>
80006918:	b34fd0ef          	jal	ra,80003c4c <__chk_fail>
8000691c:	00b46863          	bltu	s0,a1,8000692c <__strcpy_chk+0x44>
80006920:	00c587b3          	add	a5,a1,a2
80006924:	fef46ae3          	bltu	s0,a5,80006918 <__strcpy_chk+0x30>
80006928:	00859663          	bne	a1,s0,80006934 <__strcpy_chk+0x4c>
8000692c:	00c407b3          	add	a5,s0,a2
80006930:	fef5e4e3          	bltu	a1,a5,80006918 <__strcpy_chk+0x30>
80006934:	00040513          	mv	a0,s0
80006938:	01812403          	lw	s0,24(sp)
8000693c:	01c12083          	lw	ra,28(sp)
80006940:	01412483          	lw	s1,20(sp)
80006944:	02010113          	addi	sp,sp,32
80006948:	8b0fa06f          	j	800009f8 <memcpy>

8000694c <strlen>:
8000694c:	00050793          	mv	a5,a0
80006950:	0007c703          	lbu	a4,0(a5)
80006954:	00178793          	addi	a5,a5,1
80006958:	fe071ce3          	bnez	a4,80006950 <strlen+0x4>
8000695c:	40a78533          	sub	a0,a5,a0
80006960:	fff50513          	addi	a0,a0,-1
80006964:	00008067          	ret

80006968 <strncat>:
80006968:	00050793          	mv	a5,a0
8000696c:	0007c703          	lbu	a4,0(a5)
80006970:	00071863          	bnez	a4,80006980 <strncat+0x18>
80006974:	fff60713          	addi	a4,a2,-1
80006978:	00061c63          	bnez	a2,80006990 <strncat+0x28>
8000697c:	00008067          	ret
80006980:	00178793          	addi	a5,a5,1
80006984:	fe9ff06f          	j	8000696c <strncat+0x4>
80006988:	02070063          	beqz	a4,800069a8 <strncat+0x40>
8000698c:	fff70713          	addi	a4,a4,-1
80006990:	0005c683          	lbu	a3,0(a1)
80006994:	00158593          	addi	a1,a1,1
80006998:	00178793          	addi	a5,a5,1
8000699c:	fed78fa3          	sb	a3,-1(a5)
800069a0:	fe0694e3          	bnez	a3,80006988 <strncat+0x20>
800069a4:	00008067          	ret
800069a8:	00078023          	sb	zero,0(a5)
800069ac:	00008067          	ret

800069b0 <__strncat_chk>:
800069b0:	04060e63          	beqz	a2,80006a0c <__strncat_chk+0x5c>
800069b4:	00050793          	mv	a5,a0
800069b8:	00c6fe63          	bgeu	a3,a2,800069d4 <__strncat_chk+0x24>
800069bc:	ff010113          	addi	sp,sp,-16
800069c0:	00112623          	sw	ra,12(sp)
800069c4:	a88fd0ef          	jal	ra,80003c4c <__chk_fail>
800069c8:	fe068ae3          	beqz	a3,800069bc <__strncat_chk+0xc>
800069cc:	00178793          	addi	a5,a5,1
800069d0:	fff68693          	addi	a3,a3,-1
800069d4:	0007c703          	lbu	a4,0(a5)
800069d8:	fe0718e3          	bnez	a4,800069c8 <__strncat_chk+0x18>
800069dc:	00068813          	mv	a6,a3
800069e0:	00e588b3          	add	a7,a1,a4
800069e4:	0008c883          	lbu	a7,0(a7) # 1000000 <CONFIG_SRAM_SIZE+0xf00000>
800069e8:	01178023          	sb	a7,0(a5)
800069ec:	00088c63          	beqz	a7,80006a04 <__strncat_chk+0x54>
800069f0:	fff80813          	addi	a6,a6,-1 # ffff <__rom_region_size+0x754b>
800069f4:	fcd704e3          	beq	a4,a3,800069bc <__strncat_chk+0xc>
800069f8:	00170713          	addi	a4,a4,1
800069fc:	00178793          	addi	a5,a5,1
80006a00:	fee610e3          	bne	a2,a4,800069e0 <__strncat_chk+0x30>
80006a04:	fa080ce3          	beqz	a6,800069bc <__strncat_chk+0xc>
80006a08:	00078023          	sb	zero,0(a5)
80006a0c:	00008067          	ret

80006a10 <strncpy>:
80006a10:	00050793          	mv	a5,a0
80006a14:	00060e63          	beqz	a2,80006a30 <strncpy+0x20>
80006a18:	0005c703          	lbu	a4,0(a1)
80006a1c:	00158593          	addi	a1,a1,1
80006a20:	00178793          	addi	a5,a5,1
80006a24:	fee78fa3          	sb	a4,-1(a5)
80006a28:	fff60613          	addi	a2,a2,-1
80006a2c:	fe0714e3          	bnez	a4,80006a14 <strncpy+0x4>
80006a30:	00c78633          	add	a2,a5,a2
80006a34:	00c79463          	bne	a5,a2,80006a3c <strncpy+0x2c>
80006a38:	00008067          	ret
80006a3c:	00178793          	addi	a5,a5,1
80006a40:	fe078fa3          	sb	zero,-1(a5)
80006a44:	ff1ff06f          	j	80006a34 <strncpy+0x24>

80006a48 <strnlen>:
80006a48:	00b505b3          	add	a1,a0,a1
80006a4c:	00050793          	mv	a5,a0
80006a50:	00b78663          	beq	a5,a1,80006a5c <strnlen+0x14>
80006a54:	0007c703          	lbu	a4,0(a5)
80006a58:	00071663          	bnez	a4,80006a64 <strnlen+0x1c>
80006a5c:	40a78533          	sub	a0,a5,a0
80006a60:	00008067          	ret
80006a64:	00178793          	addi	a5,a5,1
80006a68:	fe9ff06f          	j	80006a50 <strnlen+0x8>

80006a6c <_strtoul_l.constprop.0>:
80006a6c:	800098b7          	lui	a7,0x80009
80006a70:	00050f13          	mv	t5,a0
80006a74:	00058793          	mv	a5,a1
80006a78:	91d88893          	addi	a7,a7,-1763 # 8000891d <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000891e>
80006a7c:	00078313          	mv	t1,a5
80006a80:	0007c703          	lbu	a4,0(a5)
80006a84:	00178793          	addi	a5,a5,1
80006a88:	01170533          	add	a0,a4,a7
80006a8c:	00054803          	lbu	a6,0(a0)
80006a90:	00887813          	andi	a6,a6,8
80006a94:	fe0814e3          	bnez	a6,80006a7c <_strtoul_l.constprop.0+0x10>
80006a98:	02d00513          	li	a0,45
80006a9c:	06a71e63          	bne	a4,a0,80006b18 <_strtoul_l.constprop.0+0xac>
80006aa0:	0007c703          	lbu	a4,0(a5)
80006aa4:	00100f93          	li	t6,1
80006aa8:	00230793          	addi	a5,t1,2 # 1002 <CONFIG_ISR_STACK_SIZE+0x2>
80006aac:	08069263          	bnez	a3,80006b30 <_strtoul_l.constprop.0+0xc4>
80006ab0:	03000693          	li	a3,48
80006ab4:	0ad70663          	beq	a4,a3,80006b60 <_strtoul_l.constprop.0+0xf4>
80006ab8:	00a00693          	li	a3,10
80006abc:	fff00813          	li	a6,-1
80006ac0:	02d85e33          	divu	t3,a6,a3
80006ac4:	00000893          	li	a7,0
80006ac8:	00000513          	li	a0,0
80006acc:	00900293          	li	t0,9
80006ad0:	01900e93          	li	t4,25
80006ad4:	fff00393          	li	t2,-1
80006ad8:	02d87333          	remu	t1,a6,a3
80006adc:	fd070813          	addi	a6,a4,-48
80006ae0:	0902ea63          	bltu	t0,a6,80006b74 <_strtoul_l.constprop.0+0x108>
80006ae4:	00080713          	mv	a4,a6
80006ae8:	0ad75663          	bge	a4,a3,80006b94 <_strtoul_l.constprop.0+0x128>
80006aec:	02788063          	beq	a7,t2,80006b0c <_strtoul_l.constprop.0+0xa0>
80006af0:	fff00893          	li	a7,-1
80006af4:	00ae6c63          	bltu	t3,a0,80006b0c <_strtoul_l.constprop.0+0xa0>
80006af8:	00ae1463          	bne	t3,a0,80006b00 <_strtoul_l.constprop.0+0x94>
80006afc:	00e34863          	blt	t1,a4,80006b0c <_strtoul_l.constprop.0+0xa0>
80006b00:	00100893          	li	a7,1
80006b04:	02a68533          	mul	a0,a3,a0
80006b08:	00a70533          	add	a0,a4,a0
80006b0c:	00178793          	addi	a5,a5,1
80006b10:	fff7c703          	lbu	a4,-1(a5)
80006b14:	fc9ff06f          	j	80006adc <_strtoul_l.constprop.0+0x70>
80006b18:	02b00513          	li	a0,43
80006b1c:	00000f93          	li	t6,0
80006b20:	f8a716e3          	bne	a4,a0,80006aac <_strtoul_l.constprop.0+0x40>
80006b24:	0007c703          	lbu	a4,0(a5)
80006b28:	00230793          	addi	a5,t1,2
80006b2c:	f81ff06f          	j	80006aac <_strtoul_l.constprop.0+0x40>
80006b30:	01000513          	li	a0,16
80006b34:	f8a694e3          	bne	a3,a0,80006abc <_strtoul_l.constprop.0+0x50>
80006b38:	03000513          	li	a0,48
80006b3c:	f8a710e3          	bne	a4,a0,80006abc <_strtoul_l.constprop.0+0x50>
80006b40:	0007c803          	lbu	a6,0(a5)
80006b44:	05800513          	li	a0,88
80006b48:	0df87813          	andi	a6,a6,223
80006b4c:	f6a818e3          	bne	a6,a0,80006abc <_strtoul_l.constprop.0+0x50>
80006b50:	0017c703          	lbu	a4,1(a5)
80006b54:	01000693          	li	a3,16
80006b58:	00278793          	addi	a5,a5,2
80006b5c:	f61ff06f          	j	80006abc <_strtoul_l.constprop.0+0x50>
80006b60:	0007c803          	lbu	a6,0(a5)
80006b64:	05800513          	li	a0,88
80006b68:	00800693          	li	a3,8
80006b6c:	0df87813          	andi	a6,a6,223
80006b70:	fddff06f          	j	80006b4c <_strtoul_l.constprop.0+0xe0>
80006b74:	fbf70813          	addi	a6,a4,-65
80006b78:	010ee663          	bltu	t4,a6,80006b84 <_strtoul_l.constprop.0+0x118>
80006b7c:	fc970713          	addi	a4,a4,-55
80006b80:	f69ff06f          	j	80006ae8 <_strtoul_l.constprop.0+0x7c>
80006b84:	f9f70813          	addi	a6,a4,-97
80006b88:	010ee663          	bltu	t4,a6,80006b94 <_strtoul_l.constprop.0+0x128>
80006b8c:	fa970713          	addi	a4,a4,-87
80006b90:	f59ff06f          	j	80006ae8 <_strtoul_l.constprop.0+0x7c>
80006b94:	fff00713          	li	a4,-1
80006b98:	00e89c63          	bne	a7,a4,80006bb0 <_strtoul_l.constprop.0+0x144>
80006b9c:	02200713          	li	a4,34
80006ba0:	00ef2023          	sw	a4,0(t5)
80006ba4:	fff00513          	li	a0,-1
80006ba8:	00061c63          	bnez	a2,80006bc0 <_strtoul_l.constprop.0+0x154>
80006bac:	00008067          	ret
80006bb0:	000f8463          	beqz	t6,80006bb8 <_strtoul_l.constprop.0+0x14c>
80006bb4:	40a00533          	neg	a0,a0
80006bb8:	00060863          	beqz	a2,80006bc8 <_strtoul_l.constprop.0+0x15c>
80006bbc:	00088463          	beqz	a7,80006bc4 <_strtoul_l.constprop.0+0x158>
80006bc0:	fff78593          	addi	a1,a5,-1
80006bc4:	00b62023          	sw	a1,0(a2)
80006bc8:	00008067          	ret

80006bcc <strtoul>:
80006bcc:	00060693          	mv	a3,a2
80006bd0:	00058613          	mv	a2,a1
80006bd4:	00050593          	mv	a1,a0
80006bd8:	82c1a503          	lw	a0,-2004(gp) # 8000ba9c <_impure_ptr>
80006bdc:	e91ff06f          	j	80006a6c <_strtoul_l.constprop.0>

80006be0 <__malloc_lock>:
80006be0:	83418513          	addi	a0,gp,-1996 # 8000baa4 <__lock___malloc_recursive_mutex>
80006be4:	828fd06f          	j	80003c0c <__retarget_lock_acquire_recursive>

80006be8 <__malloc_unlock>:
80006be8:	83418513          	addi	a0,gp,-1996 # 8000baa4 <__lock___malloc_recursive_mutex>
80006bec:	844fd06f          	j	80003c30 <__retarget_lock_release_recursive>

80006bf0 <__ssputs_r>:
80006bf0:	fe010113          	addi	sp,sp,-32
80006bf4:	01212823          	sw	s2,16(sp)
80006bf8:	0085a903          	lw	s2,8(a1)
80006bfc:	00812c23          	sw	s0,24(sp)
80006c00:	01312623          	sw	s3,12(sp)
80006c04:	01512223          	sw	s5,4(sp)
80006c08:	01612023          	sw	s6,0(sp)
80006c0c:	00112e23          	sw	ra,28(sp)
80006c10:	00912a23          	sw	s1,20(sp)
80006c14:	01412423          	sw	s4,8(sp)
80006c18:	0005aa83          	lw	s5,0(a1)
80006c1c:	00058413          	mv	s0,a1
80006c20:	00060b13          	mv	s6,a2
80006c24:	00068993          	mv	s3,a3
80006c28:	0926ec63          	bltu	a3,s2,80006cc0 <__ssputs_r+0xd0>
80006c2c:	00c59783          	lh	a5,12(a1)
80006c30:	4807f713          	andi	a4,a5,1152
80006c34:	08070463          	beqz	a4,80006cbc <__ssputs_r+0xcc>
80006c38:	01442703          	lw	a4,20(s0)
80006c3c:	00300493          	li	s1,3
80006c40:	0105a583          	lw	a1,16(a1)
80006c44:	02e484b3          	mul	s1,s1,a4
80006c48:	00200713          	li	a4,2
80006c4c:	40ba8ab3          	sub	s5,s5,a1
80006c50:	00050a13          	mv	s4,a0
80006c54:	02e4c4b3          	div	s1,s1,a4
80006c58:	00168713          	addi	a4,a3,1
80006c5c:	01570733          	add	a4,a4,s5
80006c60:	00e4f463          	bgeu	s1,a4,80006c68 <__ssputs_r+0x78>
80006c64:	00070493          	mv	s1,a4
80006c68:	4007f793          	andi	a5,a5,1024
80006c6c:	0a078663          	beqz	a5,80006d18 <__ssputs_r+0x128>
80006c70:	00048593          	mv	a1,s1
80006c74:	000a0513          	mv	a0,s4
80006c78:	985ff0ef          	jal	ra,800065fc <_malloc_r>
80006c7c:	00050913          	mv	s2,a0
80006c80:	0a050c63          	beqz	a0,80006d38 <__ssputs_r+0x148>
80006c84:	01042583          	lw	a1,16(s0)
80006c88:	000a8613          	mv	a2,s5
80006c8c:	d6df90ef          	jal	ra,800009f8 <memcpy>
80006c90:	00c45783          	lhu	a5,12(s0)
80006c94:	b7f7f793          	andi	a5,a5,-1153
80006c98:	0807e793          	ori	a5,a5,128
80006c9c:	00f41623          	sh	a5,12(s0)
80006ca0:	01242823          	sw	s2,16(s0)
80006ca4:	00942a23          	sw	s1,20(s0)
80006ca8:	01590933          	add	s2,s2,s5
80006cac:	415484b3          	sub	s1,s1,s5
80006cb0:	01242023          	sw	s2,0(s0)
80006cb4:	00942423          	sw	s1,8(s0)
80006cb8:	00098913          	mv	s2,s3
80006cbc:	0129f463          	bgeu	s3,s2,80006cc4 <__ssputs_r+0xd4>
80006cc0:	00098913          	mv	s2,s3
80006cc4:	00042503          	lw	a0,0(s0)
80006cc8:	00090613          	mv	a2,s2
80006ccc:	000b0593          	mv	a1,s6
80006cd0:	dedf90ef          	jal	ra,80000abc <memmove>
80006cd4:	00842783          	lw	a5,8(s0)
80006cd8:	00000513          	li	a0,0
80006cdc:	412787b3          	sub	a5,a5,s2
80006ce0:	00f42423          	sw	a5,8(s0)
80006ce4:	00042783          	lw	a5,0(s0)
80006ce8:	012787b3          	add	a5,a5,s2
80006cec:	00f42023          	sw	a5,0(s0)
80006cf0:	01c12083          	lw	ra,28(sp)
80006cf4:	01812403          	lw	s0,24(sp)
80006cf8:	01412483          	lw	s1,20(sp)
80006cfc:	01012903          	lw	s2,16(sp)
80006d00:	00c12983          	lw	s3,12(sp)
80006d04:	00812a03          	lw	s4,8(sp)
80006d08:	00412a83          	lw	s5,4(sp)
80006d0c:	00012b03          	lw	s6,0(sp)
80006d10:	02010113          	addi	sp,sp,32
80006d14:	00008067          	ret
80006d18:	00048613          	mv	a2,s1
80006d1c:	000a0513          	mv	a0,s4
80006d20:	161000ef          	jal	ra,80007680 <_realloc_r>
80006d24:	00050913          	mv	s2,a0
80006d28:	f6051ce3          	bnez	a0,80006ca0 <__ssputs_r+0xb0>
80006d2c:	01042583          	lw	a1,16(s0)
80006d30:	000a0513          	mv	a0,s4
80006d34:	fccff0ef          	jal	ra,80006500 <_free_r>
80006d38:	00c00793          	li	a5,12
80006d3c:	00fa2023          	sw	a5,0(s4)
80006d40:	00c45783          	lhu	a5,12(s0)
80006d44:	fff00513          	li	a0,-1
80006d48:	0407e793          	ori	a5,a5,64
80006d4c:	00f41623          	sh	a5,12(s0)
80006d50:	fa1ff06f          	j	80006cf0 <__ssputs_r+0x100>

80006d54 <_svfiprintf_r>:
80006d54:	00c5d783          	lhu	a5,12(a1)
80006d58:	f5010113          	addi	sp,sp,-176
80006d5c:	0a812423          	sw	s0,168(sp)
80006d60:	0a912223          	sw	s1,164(sp)
80006d64:	0b212023          	sw	s2,160(sp)
80006d68:	09412c23          	sw	s4,152(sp)
80006d6c:	0a112623          	sw	ra,172(sp)
80006d70:	09312e23          	sw	s3,156(sp)
80006d74:	09512a23          	sw	s5,148(sp)
80006d78:	09612823          	sw	s6,144(sp)
80006d7c:	09712623          	sw	s7,140(sp)
80006d80:	09812423          	sw	s8,136(sp)
80006d84:	09912223          	sw	s9,132(sp)
80006d88:	09a12023          	sw	s10,128(sp)
80006d8c:	07b12e23          	sw	s11,124(sp)
80006d90:	0807f793          	andi	a5,a5,128
80006d94:	00050a13          	mv	s4,a0
80006d98:	00058913          	mv	s2,a1
80006d9c:	00060493          	mv	s1,a2
80006da0:	00068413          	mv	s0,a3
80006da4:	06078863          	beqz	a5,80006e14 <_svfiprintf_r+0xc0>
80006da8:	0105a783          	lw	a5,16(a1)
80006dac:	06079463          	bnez	a5,80006e14 <_svfiprintf_r+0xc0>
80006db0:	04000593          	li	a1,64
80006db4:	849ff0ef          	jal	ra,800065fc <_malloc_r>
80006db8:	00a92023          	sw	a0,0(s2)
80006dbc:	00a92823          	sw	a0,16(s2)
80006dc0:	04051663          	bnez	a0,80006e0c <_svfiprintf_r+0xb8>
80006dc4:	00c00793          	li	a5,12
80006dc8:	00fa2023          	sw	a5,0(s4)
80006dcc:	fff00513          	li	a0,-1
80006dd0:	0ac12083          	lw	ra,172(sp)
80006dd4:	0a812403          	lw	s0,168(sp)
80006dd8:	0a412483          	lw	s1,164(sp)
80006ddc:	0a012903          	lw	s2,160(sp)
80006de0:	09c12983          	lw	s3,156(sp)
80006de4:	09812a03          	lw	s4,152(sp)
80006de8:	09412a83          	lw	s5,148(sp)
80006dec:	09012b03          	lw	s6,144(sp)
80006df0:	08c12b83          	lw	s7,140(sp)
80006df4:	08812c03          	lw	s8,136(sp)
80006df8:	08412c83          	lw	s9,132(sp)
80006dfc:	08012d03          	lw	s10,128(sp)
80006e00:	07c12d83          	lw	s11,124(sp)
80006e04:	0b010113          	addi	sp,sp,176
80006e08:	00008067          	ret
80006e0c:	04000793          	li	a5,64
80006e10:	00f92a23          	sw	a5,20(s2)
80006e14:	02000793          	li	a5,32
80006e18:	02f104a3          	sb	a5,41(sp)
80006e1c:	03000793          	li	a5,48
80006e20:	02012223          	sw	zero,36(sp)
80006e24:	02f10523          	sb	a5,42(sp)
80006e28:	00812623          	sw	s0,12(sp)
80006e2c:	02500c93          	li	s9,37
80006e30:	80009b37          	lui	s6,0x80009
80006e34:	80009bb7          	lui	s7,0x80009
80006e38:	80009d37          	lui	s10,0x80009
80006e3c:	80007c37          	lui	s8,0x80007
80006e40:	00000a93          	li	s5,0
80006e44:	00048413          	mv	s0,s1
80006e48:	00044783          	lbu	a5,0(s0)
80006e4c:	00078463          	beqz	a5,80006e54 <_svfiprintf_r+0x100>
80006e50:	0d979c63          	bne	a5,s9,80006f28 <_svfiprintf_r+0x1d4>
80006e54:	40940db3          	sub	s11,s0,s1
80006e58:	02940663          	beq	s0,s1,80006e84 <_svfiprintf_r+0x130>
80006e5c:	000d8693          	mv	a3,s11
80006e60:	00048613          	mv	a2,s1
80006e64:	00090593          	mv	a1,s2
80006e68:	000a0513          	mv	a0,s4
80006e6c:	d85ff0ef          	jal	ra,80006bf0 <__ssputs_r>
80006e70:	fff00793          	li	a5,-1
80006e74:	24f50463          	beq	a0,a5,800070bc <_svfiprintf_r+0x368>
80006e78:	02412783          	lw	a5,36(sp)
80006e7c:	01b787b3          	add	a5,a5,s11
80006e80:	02f12223          	sw	a5,36(sp)
80006e84:	00044783          	lbu	a5,0(s0)
80006e88:	22078a63          	beqz	a5,800070bc <_svfiprintf_r+0x368>
80006e8c:	fff00793          	li	a5,-1
80006e90:	00140493          	addi	s1,s0,1
80006e94:	00012823          	sw	zero,16(sp)
80006e98:	00012e23          	sw	zero,28(sp)
80006e9c:	00f12a23          	sw	a5,20(sp)
80006ea0:	00012c23          	sw	zero,24(sp)
80006ea4:	040109a3          	sb	zero,83(sp)
80006ea8:	06012423          	sw	zero,104(sp)
80006eac:	00100d93          	li	s11,1
80006eb0:	0004c583          	lbu	a1,0(s1)
80006eb4:	00500613          	li	a2,5
80006eb8:	a20b0513          	addi	a0,s6,-1504 # 80008a20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008a21>
80006ebc:	7a0000ef          	jal	ra,8000765c <memchr>
80006ec0:	01012783          	lw	a5,16(sp)
80006ec4:	00148413          	addi	s0,s1,1
80006ec8:	06051463          	bnez	a0,80006f30 <_svfiprintf_r+0x1dc>
80006ecc:	0107f713          	andi	a4,a5,16
80006ed0:	00070663          	beqz	a4,80006edc <_svfiprintf_r+0x188>
80006ed4:	02000713          	li	a4,32
80006ed8:	04e109a3          	sb	a4,83(sp)
80006edc:	0087f713          	andi	a4,a5,8
80006ee0:	00070663          	beqz	a4,80006eec <_svfiprintf_r+0x198>
80006ee4:	02b00713          	li	a4,43
80006ee8:	04e109a3          	sb	a4,83(sp)
80006eec:	0004c683          	lbu	a3,0(s1)
80006ef0:	02a00713          	li	a4,42
80006ef4:	04e68c63          	beq	a3,a4,80006f4c <_svfiprintf_r+0x1f8>
80006ef8:	01c12783          	lw	a5,28(sp)
80006efc:	00048413          	mv	s0,s1
80006f00:	00000693          	li	a3,0
80006f04:	00900613          	li	a2,9
80006f08:	00a00513          	li	a0,10
80006f0c:	00044703          	lbu	a4,0(s0)
80006f10:	00140593          	addi	a1,s0,1
80006f14:	fd070713          	addi	a4,a4,-48
80006f18:	08e67e63          	bgeu	a2,a4,80006fb4 <_svfiprintf_r+0x260>
80006f1c:	04068463          	beqz	a3,80006f64 <_svfiprintf_r+0x210>
80006f20:	00f12e23          	sw	a5,28(sp)
80006f24:	0400006f          	j	80006f64 <_svfiprintf_r+0x210>
80006f28:	00140413          	addi	s0,s0,1
80006f2c:	f1dff06f          	j	80006e48 <_svfiprintf_r+0xf4>
80006f30:	a20b0713          	addi	a4,s6,-1504
80006f34:	40e50533          	sub	a0,a0,a4
80006f38:	00ad9533          	sll	a0,s11,a0
80006f3c:	00a7e7b3          	or	a5,a5,a0
80006f40:	00f12823          	sw	a5,16(sp)
80006f44:	00040493          	mv	s1,s0
80006f48:	f69ff06f          	j	80006eb0 <_svfiprintf_r+0x15c>
80006f4c:	00c12703          	lw	a4,12(sp)
80006f50:	00470693          	addi	a3,a4,4
80006f54:	00072703          	lw	a4,0(a4)
80006f58:	00d12623          	sw	a3,12(sp)
80006f5c:	04074263          	bltz	a4,80006fa0 <_svfiprintf_r+0x24c>
80006f60:	00e12e23          	sw	a4,28(sp)
80006f64:	00044703          	lbu	a4,0(s0)
80006f68:	02e00793          	li	a5,46
80006f6c:	08f71463          	bne	a4,a5,80006ff4 <_svfiprintf_r+0x2a0>
80006f70:	00144703          	lbu	a4,1(s0)
80006f74:	02a00793          	li	a5,42
80006f78:	04f71863          	bne	a4,a5,80006fc8 <_svfiprintf_r+0x274>
80006f7c:	00c12783          	lw	a5,12(sp)
80006f80:	00240413          	addi	s0,s0,2
80006f84:	00478713          	addi	a4,a5,4
80006f88:	0007a783          	lw	a5,0(a5)
80006f8c:	00e12623          	sw	a4,12(sp)
80006f90:	0007d463          	bgez	a5,80006f98 <_svfiprintf_r+0x244>
80006f94:	fff00793          	li	a5,-1
80006f98:	00f12a23          	sw	a5,20(sp)
80006f9c:	0580006f          	j	80006ff4 <_svfiprintf_r+0x2a0>
80006fa0:	40e00733          	neg	a4,a4
80006fa4:	0027e793          	ori	a5,a5,2
80006fa8:	00e12e23          	sw	a4,28(sp)
80006fac:	00f12823          	sw	a5,16(sp)
80006fb0:	fb5ff06f          	j	80006f64 <_svfiprintf_r+0x210>
80006fb4:	02a787b3          	mul	a5,a5,a0
80006fb8:	00058413          	mv	s0,a1
80006fbc:	00100693          	li	a3,1
80006fc0:	00e787b3          	add	a5,a5,a4
80006fc4:	f49ff06f          	j	80006f0c <_svfiprintf_r+0x1b8>
80006fc8:	00140413          	addi	s0,s0,1
80006fcc:	00012a23          	sw	zero,20(sp)
80006fd0:	00000693          	li	a3,0
80006fd4:	00000793          	li	a5,0
80006fd8:	00900613          	li	a2,9
80006fdc:	00a00513          	li	a0,10
80006fe0:	00044703          	lbu	a4,0(s0)
80006fe4:	00140593          	addi	a1,s0,1
80006fe8:	fd070713          	addi	a4,a4,-48
80006fec:	08e67263          	bgeu	a2,a4,80007070 <_svfiprintf_r+0x31c>
80006ff0:	fa0694e3          	bnez	a3,80006f98 <_svfiprintf_r+0x244>
80006ff4:	00044583          	lbu	a1,0(s0)
80006ff8:	00300613          	li	a2,3
80006ffc:	a28b8513          	addi	a0,s7,-1496 # 80008a28 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008a29>
80007000:	65c000ef          	jal	ra,8000765c <memchr>
80007004:	02050263          	beqz	a0,80007028 <_svfiprintf_r+0x2d4>
80007008:	a28b8793          	addi	a5,s7,-1496
8000700c:	40f50533          	sub	a0,a0,a5
80007010:	01012783          	lw	a5,16(sp)
80007014:	04000713          	li	a4,64
80007018:	00a71733          	sll	a4,a4,a0
8000701c:	00e7e7b3          	or	a5,a5,a4
80007020:	00140413          	addi	s0,s0,1
80007024:	00f12823          	sw	a5,16(sp)
80007028:	00044583          	lbu	a1,0(s0)
8000702c:	00600613          	li	a2,6
80007030:	a2cd0513          	addi	a0,s10,-1492 # 80008a2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008a2d>
80007034:	00140493          	addi	s1,s0,1
80007038:	02b10423          	sb	a1,40(sp)
8000703c:	620000ef          	jal	ra,8000765c <memchr>
80007040:	08050863          	beqz	a0,800070d0 <_svfiprintf_r+0x37c>
80007044:	040a9863          	bnez	s5,80007094 <_svfiprintf_r+0x340>
80007048:	01012703          	lw	a4,16(sp)
8000704c:	00c12783          	lw	a5,12(sp)
80007050:	10077713          	andi	a4,a4,256
80007054:	02070863          	beqz	a4,80007084 <_svfiprintf_r+0x330>
80007058:	00478793          	addi	a5,a5,4
8000705c:	00f12623          	sw	a5,12(sp)
80007060:	02412783          	lw	a5,36(sp)
80007064:	013787b3          	add	a5,a5,s3
80007068:	02f12223          	sw	a5,36(sp)
8000706c:	dd9ff06f          	j	80006e44 <_svfiprintf_r+0xf0>
80007070:	02a787b3          	mul	a5,a5,a0
80007074:	00058413          	mv	s0,a1
80007078:	00100693          	li	a3,1
8000707c:	00e787b3          	add	a5,a5,a4
80007080:	f61ff06f          	j	80006fe0 <_svfiprintf_r+0x28c>
80007084:	00778793          	addi	a5,a5,7
80007088:	ff87f793          	andi	a5,a5,-8
8000708c:	00878793          	addi	a5,a5,8
80007090:	fcdff06f          	j	8000705c <_svfiprintf_r+0x308>
80007094:	00c10713          	addi	a4,sp,12
80007098:	bf0c0693          	addi	a3,s8,-1040 # 80006bf0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006bf1>
8000709c:	00090613          	mv	a2,s2
800070a0:	01010593          	addi	a1,sp,16
800070a4:	000a0513          	mv	a0,s4
800070a8:	00000097          	auipc	ra,0x0
800070ac:	000000e7          	jalr	zero # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
800070b0:	fff00793          	li	a5,-1
800070b4:	00050993          	mv	s3,a0
800070b8:	faf514e3          	bne	a0,a5,80007060 <_svfiprintf_r+0x30c>
800070bc:	00c95783          	lhu	a5,12(s2)
800070c0:	0407f793          	andi	a5,a5,64
800070c4:	d00794e3          	bnez	a5,80006dcc <_svfiprintf_r+0x78>
800070c8:	02412503          	lw	a0,36(sp)
800070cc:	d05ff06f          	j	80006dd0 <_svfiprintf_r+0x7c>
800070d0:	00c10713          	addi	a4,sp,12
800070d4:	bf0c0693          	addi	a3,s8,-1040
800070d8:	00090613          	mv	a2,s2
800070dc:	01010593          	addi	a1,sp,16
800070e0:	000a0513          	mv	a0,s4
800070e4:	1b8000ef          	jal	ra,8000729c <_printf_i>
800070e8:	fc9ff06f          	j	800070b0 <_svfiprintf_r+0x35c>

800070ec <_printf_common>:
800070ec:	fd010113          	addi	sp,sp,-48
800070f0:	01512a23          	sw	s5,20(sp)
800070f4:	0105a783          	lw	a5,16(a1)
800070f8:	00070a93          	mv	s5,a4
800070fc:	0085a703          	lw	a4,8(a1)
80007100:	02812423          	sw	s0,40(sp)
80007104:	03212023          	sw	s2,32(sp)
80007108:	01312e23          	sw	s3,28(sp)
8000710c:	01412c23          	sw	s4,24(sp)
80007110:	02112623          	sw	ra,44(sp)
80007114:	02912223          	sw	s1,36(sp)
80007118:	01612823          	sw	s6,16(sp)
8000711c:	01712623          	sw	s7,12(sp)
80007120:	00050993          	mv	s3,a0
80007124:	00058413          	mv	s0,a1
80007128:	00060913          	mv	s2,a2
8000712c:	00068a13          	mv	s4,a3
80007130:	00e7d463          	bge	a5,a4,80007138 <_printf_common+0x4c>
80007134:	00070793          	mv	a5,a4
80007138:	00f92023          	sw	a5,0(s2)
8000713c:	04344703          	lbu	a4,67(s0)
80007140:	00070663          	beqz	a4,8000714c <_printf_common+0x60>
80007144:	00178793          	addi	a5,a5,1
80007148:	00f92023          	sw	a5,0(s2)
8000714c:	00042783          	lw	a5,0(s0)
80007150:	0207f793          	andi	a5,a5,32
80007154:	00078863          	beqz	a5,80007164 <_printf_common+0x78>
80007158:	00092783          	lw	a5,0(s2)
8000715c:	00278793          	addi	a5,a5,2
80007160:	00f92023          	sw	a5,0(s2)
80007164:	00042483          	lw	s1,0(s0)
80007168:	0064f493          	andi	s1,s1,6
8000716c:	00049e63          	bnez	s1,80007188 <_printf_common+0x9c>
80007170:	01940b13          	addi	s6,s0,25
80007174:	fff00b93          	li	s7,-1
80007178:	00c42783          	lw	a5,12(s0)
8000717c:	00092703          	lw	a4,0(s2)
80007180:	40e787b3          	sub	a5,a5,a4
80007184:	08f4c263          	blt	s1,a5,80007208 <_printf_common+0x11c>
80007188:	04344783          	lbu	a5,67(s0)
8000718c:	00f036b3          	snez	a3,a5
80007190:	00042783          	lw	a5,0(s0)
80007194:	0207f793          	andi	a5,a5,32
80007198:	0c079063          	bnez	a5,80007258 <_printf_common+0x16c>
8000719c:	04340613          	addi	a2,s0,67
800071a0:	000a0593          	mv	a1,s4
800071a4:	00098513          	mv	a0,s3
800071a8:	000a80e7          	jalr	s5
800071ac:	fff00793          	li	a5,-1
800071b0:	06f50863          	beq	a0,a5,80007220 <_printf_common+0x134>
800071b4:	00042783          	lw	a5,0(s0)
800071b8:	00400713          	li	a4,4
800071bc:	00000493          	li	s1,0
800071c0:	0067f793          	andi	a5,a5,6
800071c4:	00e79c63          	bne	a5,a4,800071dc <_printf_common+0xf0>
800071c8:	00c42483          	lw	s1,12(s0)
800071cc:	00092783          	lw	a5,0(s2)
800071d0:	40f484b3          	sub	s1,s1,a5
800071d4:	0004d463          	bgez	s1,800071dc <_printf_common+0xf0>
800071d8:	00000493          	li	s1,0
800071dc:	00842783          	lw	a5,8(s0)
800071e0:	01042703          	lw	a4,16(s0)
800071e4:	00f75663          	bge	a4,a5,800071f0 <_printf_common+0x104>
800071e8:	40e787b3          	sub	a5,a5,a4
800071ec:	00f484b3          	add	s1,s1,a5
800071f0:	00000913          	li	s2,0
800071f4:	01a40413          	addi	s0,s0,26
800071f8:	fff00b13          	li	s6,-1
800071fc:	09249063          	bne	s1,s2,8000727c <_printf_common+0x190>
80007200:	00000513          	li	a0,0
80007204:	0200006f          	j	80007224 <_printf_common+0x138>
80007208:	00100693          	li	a3,1
8000720c:	000b0613          	mv	a2,s6
80007210:	000a0593          	mv	a1,s4
80007214:	00098513          	mv	a0,s3
80007218:	000a80e7          	jalr	s5
8000721c:	03751a63          	bne	a0,s7,80007250 <_printf_common+0x164>
80007220:	fff00513          	li	a0,-1
80007224:	02c12083          	lw	ra,44(sp)
80007228:	02812403          	lw	s0,40(sp)
8000722c:	02412483          	lw	s1,36(sp)
80007230:	02012903          	lw	s2,32(sp)
80007234:	01c12983          	lw	s3,28(sp)
80007238:	01812a03          	lw	s4,24(sp)
8000723c:	01412a83          	lw	s5,20(sp)
80007240:	01012b03          	lw	s6,16(sp)
80007244:	00c12b83          	lw	s7,12(sp)
80007248:	03010113          	addi	sp,sp,48
8000724c:	00008067          	ret
80007250:	00148493          	addi	s1,s1,1
80007254:	f25ff06f          	j	80007178 <_printf_common+0x8c>
80007258:	00d40733          	add	a4,s0,a3
8000725c:	03000613          	li	a2,48
80007260:	04c701a3          	sb	a2,67(a4)
80007264:	04544703          	lbu	a4,69(s0)
80007268:	00168793          	addi	a5,a3,1
8000726c:	00f407b3          	add	a5,s0,a5
80007270:	00268693          	addi	a3,a3,2
80007274:	04e781a3          	sb	a4,67(a5)
80007278:	f25ff06f          	j	8000719c <_printf_common+0xb0>
8000727c:	00100693          	li	a3,1
80007280:	00040613          	mv	a2,s0
80007284:	000a0593          	mv	a1,s4
80007288:	00098513          	mv	a0,s3
8000728c:	000a80e7          	jalr	s5
80007290:	f96508e3          	beq	a0,s6,80007220 <_printf_common+0x134>
80007294:	00190913          	addi	s2,s2,1
80007298:	f65ff06f          	j	800071fc <_printf_common+0x110>

8000729c <_printf_i>:
8000729c:	fd010113          	addi	sp,sp,-48
800072a0:	02812423          	sw	s0,40(sp)
800072a4:	02912223          	sw	s1,36(sp)
800072a8:	03212023          	sw	s2,32(sp)
800072ac:	01312e23          	sw	s3,28(sp)
800072b0:	02112623          	sw	ra,44(sp)
800072b4:	01412c23          	sw	s4,24(sp)
800072b8:	01512a23          	sw	s5,20(sp)
800072bc:	01612823          	sw	s6,16(sp)
800072c0:	0185c883          	lbu	a7,24(a1)
800072c4:	07800793          	li	a5,120
800072c8:	00050493          	mv	s1,a0
800072cc:	00058413          	mv	s0,a1
800072d0:	00060913          	mv	s2,a2
800072d4:	00068993          	mv	s3,a3
800072d8:	0117ee63          	bltu	a5,a7,800072f4 <_printf_i+0x58>
800072dc:	06200793          	li	a5,98
800072e0:	04358693          	addi	a3,a1,67
800072e4:	0117ee63          	bltu	a5,a7,80007300 <_printf_i+0x64>
800072e8:	2a088a63          	beqz	a7,8000759c <_printf_i+0x300>
800072ec:	05800793          	li	a5,88
800072f0:	20f88a63          	beq	a7,a5,80007504 <_printf_i+0x268>
800072f4:	04240a93          	addi	s5,s0,66
800072f8:	05140123          	sb	a7,66(s0)
800072fc:	0440006f          	j	80007340 <_printf_i+0xa4>
80007300:	f9d88793          	addi	a5,a7,-99
80007304:	0ff7f793          	zext.b	a5,a5
80007308:	01500613          	li	a2,21
8000730c:	fef664e3          	bltu	a2,a5,800072f4 <_printf_i+0x58>
80007310:	80009637          	lui	a2,0x80009
80007314:	00279793          	slli	a5,a5,0x2
80007318:	a5c60613          	addi	a2,a2,-1444 # 80008a5c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008a5d>
8000731c:	00c787b3          	add	a5,a5,a2
80007320:	0007a783          	lw	a5,0(a5)
80007324:	00078067          	jr	a5
80007328:	00072783          	lw	a5,0(a4)
8000732c:	04258a93          	addi	s5,a1,66
80007330:	00478693          	addi	a3,a5,4
80007334:	0007a783          	lw	a5,0(a5)
80007338:	00d72023          	sw	a3,0(a4)
8000733c:	04f58123          	sb	a5,66(a1)
80007340:	00100793          	li	a5,1
80007344:	2940006f          	j	800075d8 <_printf_i+0x33c>
80007348:	0005a603          	lw	a2,0(a1)
8000734c:	00072783          	lw	a5,0(a4)
80007350:	08067513          	andi	a0,a2,128
80007354:	00478593          	addi	a1,a5,4
80007358:	04050e63          	beqz	a0,800073b4 <_printf_i+0x118>
8000735c:	0007a783          	lw	a5,0(a5)
80007360:	00b72023          	sw	a1,0(a4)
80007364:	80009737          	lui	a4,0x80009
80007368:	00442583          	lw	a1,4(s0)
8000736c:	a3470813          	addi	a6,a4,-1484 # 80008a34 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008a35>
80007370:	1e07d263          	bgez	a5,80007554 <_printf_i+0x2b8>
80007374:	02d00713          	li	a4,45
80007378:	04e401a3          	sb	a4,67(s0)
8000737c:	00b42423          	sw	a1,8(s0)
80007380:	0405d863          	bgez	a1,800073d0 <_printf_i+0x134>
80007384:	40f007b3          	neg	a5,a5
80007388:	00a00713          	li	a4,10
8000738c:	00068a93          	mv	s5,a3
80007390:	02e7f633          	remu	a2,a5,a4
80007394:	fffa8a93          	addi	s5,s5,-1
80007398:	00c80633          	add	a2,a6,a2
8000739c:	00064603          	lbu	a2,0(a2)
800073a0:	00ca8023          	sb	a2,0(s5)
800073a4:	00078613          	mv	a2,a5
800073a8:	02e7d7b3          	divu	a5,a5,a4
800073ac:	fee672e3          	bgeu	a2,a4,80007390 <_printf_i+0xf4>
800073b0:	0980006f          	j	80007448 <_printf_i+0x1ac>
800073b4:	0007a783          	lw	a5,0(a5)
800073b8:	04067513          	andi	a0,a2,64
800073bc:	00b72023          	sw	a1,0(a4)
800073c0:	fa0502e3          	beqz	a0,80007364 <_printf_i+0xc8>
800073c4:	01079793          	slli	a5,a5,0x10
800073c8:	4107d793          	srai	a5,a5,0x10
800073cc:	f99ff06f          	j	80007364 <_printf_i+0xc8>
800073d0:	ffb67613          	andi	a2,a2,-5
800073d4:	00c42023          	sw	a2,0(s0)
800073d8:	fadff06f          	j	80007384 <_printf_i+0xe8>
800073dc:	0005a603          	lw	a2,0(a1)
800073e0:	00072783          	lw	a5,0(a4)
800073e4:	08067513          	andi	a0,a2,128
800073e8:	00478593          	addi	a1,a5,4
800073ec:	00050863          	beqz	a0,800073fc <_printf_i+0x160>
800073f0:	00b72023          	sw	a1,0(a4)
800073f4:	0007a783          	lw	a5,0(a5)
800073f8:	0140006f          	j	8000740c <_printf_i+0x170>
800073fc:	04067613          	andi	a2,a2,64
80007400:	00b72023          	sw	a1,0(a4)
80007404:	fe0608e3          	beqz	a2,800073f4 <_printf_i+0x158>
80007408:	0007d783          	lhu	a5,0(a5)
8000740c:	80009837          	lui	a6,0x80009
80007410:	06f00713          	li	a4,111
80007414:	a3480813          	addi	a6,a6,-1484 # 80008a34 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008a35>
80007418:	12e89a63          	bne	a7,a4,8000754c <_printf_i+0x2b0>
8000741c:	00800713          	li	a4,8
80007420:	040401a3          	sb	zero,67(s0)
80007424:	00442603          	lw	a2,4(s0)
80007428:	00c42423          	sw	a2,8(s0)
8000742c:	f60640e3          	bltz	a2,8000738c <_printf_i+0xf0>
80007430:	00042583          	lw	a1,0(s0)
80007434:	ffb5f593          	andi	a1,a1,-5
80007438:	00b42023          	sw	a1,0(s0)
8000743c:	f40798e3          	bnez	a5,8000738c <_printf_i+0xf0>
80007440:	00068a93          	mv	s5,a3
80007444:	f40614e3          	bnez	a2,8000738c <_printf_i+0xf0>
80007448:	00800793          	li	a5,8
8000744c:	02f71463          	bne	a4,a5,80007474 <_printf_i+0x1d8>
80007450:	00042783          	lw	a5,0(s0)
80007454:	0017f793          	andi	a5,a5,1
80007458:	00078e63          	beqz	a5,80007474 <_printf_i+0x1d8>
8000745c:	00442703          	lw	a4,4(s0)
80007460:	01042783          	lw	a5,16(s0)
80007464:	00e7c863          	blt	a5,a4,80007474 <_printf_i+0x1d8>
80007468:	03000793          	li	a5,48
8000746c:	fefa8fa3          	sb	a5,-1(s5)
80007470:	fffa8a93          	addi	s5,s5,-1
80007474:	415686b3          	sub	a3,a3,s5
80007478:	00d42823          	sw	a3,16(s0)
8000747c:	00098713          	mv	a4,s3
80007480:	00090693          	mv	a3,s2
80007484:	00c10613          	addi	a2,sp,12
80007488:	00040593          	mv	a1,s0
8000748c:	00048513          	mv	a0,s1
80007490:	c5dff0ef          	jal	ra,800070ec <_printf_common>
80007494:	fff00a13          	li	s4,-1
80007498:	15451663          	bne	a0,s4,800075e4 <_printf_i+0x348>
8000749c:	fff00513          	li	a0,-1
800074a0:	02c12083          	lw	ra,44(sp)
800074a4:	02812403          	lw	s0,40(sp)
800074a8:	02412483          	lw	s1,36(sp)
800074ac:	02012903          	lw	s2,32(sp)
800074b0:	01c12983          	lw	s3,28(sp)
800074b4:	01812a03          	lw	s4,24(sp)
800074b8:	01412a83          	lw	s5,20(sp)
800074bc:	01012b03          	lw	s6,16(sp)
800074c0:	03010113          	addi	sp,sp,48
800074c4:	00008067          	ret
800074c8:	0005a783          	lw	a5,0(a1)
800074cc:	0207e793          	ori	a5,a5,32
800074d0:	00f5a023          	sw	a5,0(a1)
800074d4:	80009837          	lui	a6,0x80009
800074d8:	07800893          	li	a7,120
800074dc:	a4880813          	addi	a6,a6,-1464 # 80008a48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008a49>
800074e0:	00042603          	lw	a2,0(s0)
800074e4:	051402a3          	sb	a7,69(s0)
800074e8:	00072783          	lw	a5,0(a4)
800074ec:	08067513          	andi	a0,a2,128
800074f0:	00478593          	addi	a1,a5,4
800074f4:	00050e63          	beqz	a0,80007510 <_printf_i+0x274>
800074f8:	00b72023          	sw	a1,0(a4)
800074fc:	0007a783          	lw	a5,0(a5)
80007500:	0200006f          	j	80007520 <_printf_i+0x284>
80007504:	80009837          	lui	a6,0x80009
80007508:	a3480813          	addi	a6,a6,-1484 # 80008a34 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008a35>
8000750c:	fd5ff06f          	j	800074e0 <_printf_i+0x244>
80007510:	04067513          	andi	a0,a2,64
80007514:	00b72023          	sw	a1,0(a4)
80007518:	fe0502e3          	beqz	a0,800074fc <_printf_i+0x260>
8000751c:	0007d783          	lhu	a5,0(a5)
80007520:	00167713          	andi	a4,a2,1
80007524:	00070663          	beqz	a4,80007530 <_printf_i+0x294>
80007528:	02066613          	ori	a2,a2,32
8000752c:	00c42023          	sw	a2,0(s0)
80007530:	00078663          	beqz	a5,8000753c <_printf_i+0x2a0>
80007534:	01000713          	li	a4,16
80007538:	ee9ff06f          	j	80007420 <_printf_i+0x184>
8000753c:	00042703          	lw	a4,0(s0)
80007540:	fdf77713          	andi	a4,a4,-33
80007544:	00e42023          	sw	a4,0(s0)
80007548:	fedff06f          	j	80007534 <_printf_i+0x298>
8000754c:	00a00713          	li	a4,10
80007550:	ed1ff06f          	j	80007420 <_printf_i+0x184>
80007554:	a3470813          	addi	a6,a4,-1484
80007558:	00a00713          	li	a4,10
8000755c:	ec9ff06f          	j	80007424 <_printf_i+0x188>
80007560:	0005a603          	lw	a2,0(a1)
80007564:	00072783          	lw	a5,0(a4)
80007568:	0145a583          	lw	a1,20(a1)
8000756c:	08067813          	andi	a6,a2,128
80007570:	00478513          	addi	a0,a5,4
80007574:	00080a63          	beqz	a6,80007588 <_printf_i+0x2ec>
80007578:	00a72023          	sw	a0,0(a4)
8000757c:	0007a783          	lw	a5,0(a5)
80007580:	00b7a023          	sw	a1,0(a5)
80007584:	0180006f          	j	8000759c <_printf_i+0x300>
80007588:	00a72023          	sw	a0,0(a4)
8000758c:	04067613          	andi	a2,a2,64
80007590:	0007a783          	lw	a5,0(a5)
80007594:	fe0606e3          	beqz	a2,80007580 <_printf_i+0x2e4>
80007598:	00b79023          	sh	a1,0(a5)
8000759c:	00042823          	sw	zero,16(s0)
800075a0:	00068a93          	mv	s5,a3
800075a4:	ed9ff06f          	j	8000747c <_printf_i+0x1e0>
800075a8:	00072783          	lw	a5,0(a4)
800075ac:	0045a603          	lw	a2,4(a1)
800075b0:	00000593          	li	a1,0
800075b4:	00478693          	addi	a3,a5,4
800075b8:	00d72023          	sw	a3,0(a4)
800075bc:	0007aa83          	lw	s5,0(a5)
800075c0:	000a8513          	mv	a0,s5
800075c4:	098000ef          	jal	ra,8000765c <memchr>
800075c8:	00050663          	beqz	a0,800075d4 <_printf_i+0x338>
800075cc:	41550533          	sub	a0,a0,s5
800075d0:	00a42223          	sw	a0,4(s0)
800075d4:	00442783          	lw	a5,4(s0)
800075d8:	00f42823          	sw	a5,16(s0)
800075dc:	040401a3          	sb	zero,67(s0)
800075e0:	e9dff06f          	j	8000747c <_printf_i+0x1e0>
800075e4:	01042683          	lw	a3,16(s0)
800075e8:	000a8613          	mv	a2,s5
800075ec:	00090593          	mv	a1,s2
800075f0:	00048513          	mv	a0,s1
800075f4:	000980e7          	jalr	s3
800075f8:	eb4502e3          	beq	a0,s4,8000749c <_printf_i+0x200>
800075fc:	00042783          	lw	a5,0(s0)
80007600:	0027f793          	andi	a5,a5,2
80007604:	04079463          	bnez	a5,8000764c <_printf_i+0x3b0>
80007608:	00c12783          	lw	a5,12(sp)
8000760c:	00c42503          	lw	a0,12(s0)
80007610:	e8f558e3          	bge	a0,a5,800074a0 <_printf_i+0x204>
80007614:	00078513          	mv	a0,a5
80007618:	e89ff06f          	j	800074a0 <_printf_i+0x204>
8000761c:	00100693          	li	a3,1
80007620:	000a8613          	mv	a2,s5
80007624:	00090593          	mv	a1,s2
80007628:	00048513          	mv	a0,s1
8000762c:	000980e7          	jalr	s3
80007630:	e76506e3          	beq	a0,s6,8000749c <_printf_i+0x200>
80007634:	001a0a13          	addi	s4,s4,1
80007638:	00c42783          	lw	a5,12(s0)
8000763c:	00c12703          	lw	a4,12(sp)
80007640:	40e787b3          	sub	a5,a5,a4
80007644:	fcfa4ce3          	blt	s4,a5,8000761c <_printf_i+0x380>
80007648:	fc1ff06f          	j	80007608 <_printf_i+0x36c>
8000764c:	00000a13          	li	s4,0
80007650:	01940a93          	addi	s5,s0,25
80007654:	fff00b13          	li	s6,-1
80007658:	fe1ff06f          	j	80007638 <_printf_i+0x39c>

8000765c <memchr>:
8000765c:	0ff5f593          	zext.b	a1,a1
80007660:	00c50633          	add	a2,a0,a2
80007664:	00c51663          	bne	a0,a2,80007670 <memchr+0x14>
80007668:	00000513          	li	a0,0
8000766c:	00008067          	ret
80007670:	00054783          	lbu	a5,0(a0)
80007674:	feb78ce3          	beq	a5,a1,8000766c <memchr+0x10>
80007678:	00150513          	addi	a0,a0,1
8000767c:	fe9ff06f          	j	80007664 <memchr+0x8>

80007680 <_realloc_r>:
80007680:	fe010113          	addi	sp,sp,-32
80007684:	00912a23          	sw	s1,20(sp)
80007688:	00112e23          	sw	ra,28(sp)
8000768c:	00812c23          	sw	s0,24(sp)
80007690:	01212823          	sw	s2,16(sp)
80007694:	01312623          	sw	s3,12(sp)
80007698:	00060493          	mv	s1,a2
8000769c:	02059263          	bnez	a1,800076c0 <_realloc_r+0x40>
800076a0:	01812403          	lw	s0,24(sp)
800076a4:	01c12083          	lw	ra,28(sp)
800076a8:	01412483          	lw	s1,20(sp)
800076ac:	01012903          	lw	s2,16(sp)
800076b0:	00c12983          	lw	s3,12(sp)
800076b4:	00060593          	mv	a1,a2
800076b8:	02010113          	addi	sp,sp,32
800076bc:	f41fe06f          	j	800065fc <_malloc_r>
800076c0:	02061663          	bnez	a2,800076ec <_realloc_r+0x6c>
800076c4:	e3dfe0ef          	jal	ra,80006500 <_free_r>
800076c8:	00000413          	li	s0,0
800076cc:	01c12083          	lw	ra,28(sp)
800076d0:	00040513          	mv	a0,s0
800076d4:	01812403          	lw	s0,24(sp)
800076d8:	01412483          	lw	s1,20(sp)
800076dc:	01012903          	lw	s2,16(sp)
800076e0:	00c12983          	lw	s3,12(sp)
800076e4:	02010113          	addi	sp,sp,32
800076e8:	00008067          	ret
800076ec:	00050993          	mv	s3,a0
800076f0:	00058413          	mv	s0,a1
800076f4:	03c000ef          	jal	ra,80007730 <_malloc_usable_size_r>
800076f8:	fc957ae3          	bgeu	a0,s1,800076cc <_realloc_r+0x4c>
800076fc:	00048593          	mv	a1,s1
80007700:	00098513          	mv	a0,s3
80007704:	ef9fe0ef          	jal	ra,800065fc <_malloc_r>
80007708:	00050913          	mv	s2,a0
8000770c:	fa050ee3          	beqz	a0,800076c8 <_realloc_r+0x48>
80007710:	00040593          	mv	a1,s0
80007714:	00048613          	mv	a2,s1
80007718:	ae0f90ef          	jal	ra,800009f8 <memcpy>
8000771c:	00040593          	mv	a1,s0
80007720:	00098513          	mv	a0,s3
80007724:	dddfe0ef          	jal	ra,80006500 <_free_r>
80007728:	00090413          	mv	s0,s2
8000772c:	fa1ff06f          	j	800076cc <_realloc_r+0x4c>

80007730 <_malloc_usable_size_r>:
80007730:	ffc5a783          	lw	a5,-4(a1)
80007734:	ffc78513          	addi	a0,a5,-4
80007738:	0007d863          	bgez	a5,80007748 <_malloc_usable_size_r+0x18>
8000773c:	00a585b3          	add	a1,a1,a0
80007740:	0005a783          	lw	a5,0(a1)
80007744:	00f50533          	add	a0,a0,a5
80007748:	00008067          	ret
