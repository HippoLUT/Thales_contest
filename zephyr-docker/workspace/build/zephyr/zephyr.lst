
zephyr.elf:     file format elf32-littleriscv


Disassembly of section rom_start:

80000000 <__start>:
SECTION_FUNC(vectors, __start)
#if defined(CONFIG_RISCV_GP)
	/* Initialize global pointer */
	.option push
	.option norelax
	la gp, __global_pointer$
80000000:	0000d197          	auipc	gp,0xd
80000004:	74018193          	addi	gp,gp,1856 # 8000d740 <__global_pointer$>
#else
	/*
	 * Set mtvec (Machine Trap-Vector Base-Address Register)
	 * to _isr_wrapper.
	 */
	la t0, _isr_wrapper
80000008:	00000297          	auipc	t0,0x0
8000000c:	01428293          	addi	t0,t0,20 # 8000001c <_isr_wrapper>
#endif

	csrw mtvec, t0
80000010:	30529073          	csrw	mtvec,t0

	/* Jump to __reset */
	tail __reset
80000014:	0040006f          	j	80000018 <__reset>

Disassembly of section reset:

80000018 <__reset>:
	/*
	 * jump to __initialize
	 * use call opcode in case __initialize is far away.
	 * This will be dependent on linker.ld configuration.
	 */
	call __initialize
80000018:	665050ef          	jal	ra,80005e7c <__initialize>

Disassembly of section exceptions:

8000001c <_isr_wrapper>:
	csrrw sp, mscratch, sp
1:
#endif

	/* Save caller-saved registers on current thread stack. */
	addi sp, sp, -__z_arch_esf_t_SIZEOF
8000001c:	fb010113          	addi	sp,sp,-80
	DO_CALLER_SAVED(sr)		;
80000020:	00512223          	sw	t0,4(sp)
80000024:	00612423          	sw	t1,8(sp)
80000028:	00712623          	sw	t2,12(sp)
8000002c:	01c12823          	sw	t3,16(sp)
80000030:	01d12a23          	sw	t4,20(sp)
80000034:	01e12c23          	sw	t5,24(sp)
80000038:	01f12e23          	sw	t6,28(sp)
8000003c:	02a12023          	sw	a0,32(sp)
80000040:	02b12223          	sw	a1,36(sp)
80000044:	02c12423          	sw	a2,40(sp)
80000048:	02d12623          	sw	a3,44(sp)
8000004c:	02e12823          	sw	a4,48(sp)
80000050:	02f12a23          	sw	a5,52(sp)
80000054:	03012c23          	sw	a6,56(sp)
80000058:	03112e23          	sw	a7,60(sp)
8000005c:	00112023          	sw	ra,0(sp)

	/* Save s0 in the esf and load it with &_current_cpu. */
	sr s0, __z_arch_esf_t_s0_OFFSET(sp)
80000060:	04812423          	sw	s0,72(sp)
	GET_CURRENT_CPU(s0, t0)
80000064:	0000a417          	auipc	s0,0xa
80000068:	1f440413          	addi	s0,s0,500 # 8000a258 <_kernel>
	add t0, t0, tp, %tprel_add(is_user_mode)
	sb zero, %tprel_lo(is_user_mode)(t0)
#endif

	/* Save MEPC register */
	csrr t0, mepc
8000006c:	341022f3          	csrr	t0,mepc
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
80000070:	04512023          	sw	t0,64(sp)

	/* Save MSTATUS register */
	csrr t2, mstatus
80000074:	300023f3          	csrr	t2,mstatus
	sr t2, __z_arch_esf_t_mstatus_OFFSET(sp)
80000078:	04712223          	sw	t2,68(sp)
	 * SOCs (like pulpino or riscv-qemu), the MSB is never set to indicate
	 * interrupt. Hence, check for interrupt/exception via the __soc_is_irq
	 * function (that needs to be implemented by each SOC). The result is
	 * returned via register a0 (1: interrupt, 0 exception)
	 */
	jal ra, __soc_is_irq
8000007c:	14c000ef          	jal	ra,800001c8 <__soc_is_irq>

	/* If a0 != 0, jump to is_interrupt */
	bnez a0, is_interrupt
80000080:	04051a63          	bnez	a0,800000d4 <is_interrupt>
	/*
	 * If the exception is the result of an ECALL, check whether to
	 * perform a context-switch or an IRQ offload. Otherwise call _Fault
	 * to report the exception.
	 */
	csrr t0, mcause
80000084:	342022f3          	csrr	t0,mcause
	li t2, SOC_MCAUSE_EXP_MASK
80000088:	800003b7          	lui	t2,0x80000
8000008c:	fff38393          	addi	t2,t2,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and t0, t0, t2
80000090:	0072f2b3          	and	t0,t0,t2

	/*
	 * If mcause == SOC_MCAUSE_ECALL_EXP, handle system call from
	 * kernel thread.
	 */
	li t1, SOC_MCAUSE_ECALL_EXP
80000094:	00b00313          	li	t1,11
	beq t0, t1, is_kernel_syscall
80000098:	00628a63          	beq	t0,t1,800000ac <is_kernel_syscall>
	 * Stack pointer is pointing to a z_arch_esf_t structure, pass it
	 * to _Fault (via register a0).
	 * If _Fault shall return, set return address to
	 * no_reschedule to restore stack.
	 */
	mv a0, sp
8000009c:	00010513          	mv	a0,sp
	la ra, no_reschedule
800000a0:	00000097          	auipc	ra,0x0
800000a4:	0bc08093          	addi	ra,ra,188 # 8000015c <z_riscv_thread_start>
	tail _Fault
800000a8:	5710506f          	j	80005e18 <_Fault>

800000ac <is_kernel_syscall>:
	 * again upon exiting the ISR.
	 *
	 * It's safe to always increment by 4, even with compressed
	 * instructions, because the ecall instruction is always 4 bytes.
	 */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
800000ac:	04012283          	lw	t0,64(sp)
	addi t0, t0, 4
800000b0:	00428293          	addi	t0,t0,4
	sr t0, __z_arch_esf_t_mepc_OFFSET(sp)
800000b4:	04512023          	sw	t0,64(sp)
	li t1, MSTATUS_MPRV
	csrs mstatus, t1
#endif

	/* Determine what to do. Operation code is in t0. */
	lr t0, __z_arch_esf_t_t0_OFFSET(sp)
800000b8:	00412283          	lw	t0,4(sp)

	.if RV_ECALL_RUNTIME_EXCEPT != 0; .err; .endif
	beqz t0, do_fault
800000bc:	00028663          	beqz	t0,800000c8 <do_fault>
	j reschedule
skip_schedule:
#endif

	/* default fault code is K_ERR_KERNEL_OOPS */
	li a0, 3
800000c0:	00300513          	li	a0,3
	j 1f
800000c4:	0080006f          	j	800000cc <do_fault+0x4>

800000c8 <do_fault>:

do_fault:
	/* Handle RV_ECALL_RUNTIME_EXCEPT. Retrieve reason in a0, esf in A1. */
	lr a0, __z_arch_esf_t_a0_OFFSET(sp)
800000c8:	02012503          	lw	a0,32(sp)
1:	mv a1, sp
800000cc:	00010593          	mv	a1,sp
	tail z_riscv_fatal_error
800000d0:	5390506f          	j	80005e08 <z_riscv_fatal_error>

800000d4 <is_interrupt>:
	csrs mstatus, t1
2:
#endif

	/* Increment _current_cpu->nested */
	lw t1, ___cpu_t_nested_OFFSET(s0)
800000d4:	00042303          	lw	t1,0(s0)
	addi t2, t1, 1
800000d8:	00130393          	addi	t2,t1,1
	sw t2, ___cpu_t_nested_OFFSET(s0)
800000dc:	00742023          	sw	t2,0(s0)
	bnez t1, on_irq_stack
800000e0:	00031a63          	bnez	t1,800000f4 <on_irq_stack>

	/* Switch to interrupt stack */
	mv t0, sp
800000e4:	00010293          	mv	t0,sp
	lr sp, ___cpu_t_irq_stack_OFFSET(s0)
800000e8:	00442103          	lw	sp,4(s0)

	/*
	 * Save thread stack pointer on interrupt stack
	 * In RISC-V, stack pointer needs to be 16-byte aligned
	 */
	addi sp, sp, -16
800000ec:	ff010113          	addi	sp,sp,-16
	sr t0, 0(sp)
800000f0:	00512023          	sw	t0,0(sp)

800000f4 <on_irq_stack>:
#ifdef CONFIG_TRACING_ISR
	call sys_trace_isr_enter
#endif

	/* Get IRQ causing interrupt */
	csrr a0, mcause
800000f4:	34202573          	csrr	a0,mcause
	li t0, SOC_MCAUSE_EXP_MASK
800000f8:	800002b7          	lui	t0,0x80000
800000fc:	fff28293          	addi	t0,t0,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
	and a0, a0, t0
80000100:	00557533          	and	a0,a0,t0

	/*
	 * Clear pending IRQ generating the interrupt at SOC level
	 * Pass IRQ number to __soc_handle_irq via register a0
	 */
	jal ra, __soc_handle_irq
80000104:	0b4000ef          	jal	ra,800001b8 <__soc_handle_irq>

	/*
	 * Call corresponding registered function in _sw_isr_table.
	 * (table is 2-word wide, we should shift index accordingly)
	 */
	la t0, _sw_isr_table
80000108:	00009297          	auipc	t0,0x9
8000010c:	8f828293          	addi	t0,t0,-1800 # 80008a00 <_sw_isr_table>
	slli a0, a0, (RV_REGSHIFT + 1)
80000110:	00351513          	slli	a0,a0,0x3
	add t0, t0, a0
80000114:	00a282b3          	add	t0,t0,a0

	/* Load argument in a0 register */
	lr a0, 0(t0)
80000118:	0002a503          	lw	a0,0(t0)

	/* Load ISR function address in register t1 */
	lr t1, RV_REGSIZE(t0)
8000011c:	0042a303          	lw	t1,4(t0)

	/* Call ISR function */
	jalr ra, t1, 0
80000120:	000300e7          	jalr	t1

80000124 <irq_done>:
    call sys_trace_isr_exit
#endif

irq_done:
	/* Decrement _current_cpu->nested */
	lw t2, ___cpu_t_nested_OFFSET(s0)
80000124:	00042383          	lw	t2,0(s0)
	addi t2, t2, -1
80000128:	fff38393          	addi	t2,t2,-1
	sw t2, ___cpu_t_nested_OFFSET(s0)
8000012c:	00742023          	sw	t2,0(s0)
	bnez t2, no_reschedule
80000130:	02039663          	bnez	t2,8000015c <z_riscv_thread_start>

	/* nested count is back to 0: Return to thread stack */
	lr sp, 0(sp)
80000134:	00012103          	lw	sp,0(sp)

80000138 <check_reschedule>:
#endif

check_reschedule:

	/* Get pointer to current thread on this CPU */
	lr a1, ___cpu_t_current_OFFSET(s0)
80000138:	00842583          	lw	a1,8(s0)
	/*
	 * Get next thread to schedule with z_get_next_switch_handle().
	 * We pass it a NULL as we didn't save the whole thread context yet.
	 * If no scheduling is necessary then NULL will be returned.
	 */
	addi sp, sp, -16
8000013c:	ff010113          	addi	sp,sp,-16
	sr a1, 0(sp)
80000140:	00b12023          	sw	a1,0(sp)
	mv a0, zero
80000144:	00000513          	li	a0,0
	call z_get_next_switch_handle
80000148:	6cc070ef          	jal	ra,80007814 <z_get_next_switch_handle>
	lr a1, 0(sp)
8000014c:	00012583          	lw	a1,0(sp)
	addi sp, sp, 16
80000150:	01010113          	addi	sp,sp,16
	beqz a0, no_reschedule
80000154:	00050463          	beqz	a0,8000015c <z_riscv_thread_start>

80000158 <reschedule>:
	/*
	 * Perform context switch:
	 * a0 = new thread
	 * a1 = old thread
	 */
	call z_riscv_switch
80000158:	5a1050ef          	jal	ra,80005ef8 <z_riscv_switch>

8000015c <z_riscv_thread_start>:
	addi a0, sp, __z_arch_esf_t_soc_context_OFFSET
	jal ra, __soc_restore_context
#endif /* CONFIG_RISCV_SOC_CONTEXT_SAVE */

	/* Restore MEPC register */
	lr t0, __z_arch_esf_t_mepc_OFFSET(sp)
8000015c:	04012283          	lw	t0,64(sp)
	csrw mepc, t0
80000160:	34129073          	csrw	mepc,t0

	/* Restore MSTATUS register */
	lr t2, __z_arch_esf_t_mstatus_OFFSET(sp)
80000164:	04412383          	lw	t2,68(sp)
	csrrw t0, mstatus, t2
80000168:	300392f3          	csrrw	t0,mstatus,t2
	csrw mscratch, t0
1:
#endif

	/* Restore s0 (it is no longer ours) */
	lr s0, __z_arch_esf_t_s0_OFFSET(sp)
8000016c:	04812403          	lw	s0,72(sp)

	/* Restore caller-saved registers from thread stack */
	DO_CALLER_SAVED(lr)
80000170:	00412283          	lw	t0,4(sp)
80000174:	00812303          	lw	t1,8(sp)
80000178:	00c12383          	lw	t2,12(sp)
8000017c:	01012e03          	lw	t3,16(sp)
80000180:	01412e83          	lw	t4,20(sp)
80000184:	01812f03          	lw	t5,24(sp)
80000188:	01c12f83          	lw	t6,28(sp)
8000018c:	02012503          	lw	a0,32(sp)
80000190:	02412583          	lw	a1,36(sp)
80000194:	02812603          	lw	a2,40(sp)
80000198:	02c12683          	lw	a3,44(sp)
8000019c:	03012703          	lw	a4,48(sp)
800001a0:	03412783          	lw	a5,52(sp)
800001a4:	03812803          	lw	a6,56(sp)
800001a8:	03c12883          	lw	a7,60(sp)
800001ac:	00012083          	lw	ra,0(sp)
#ifdef CONFIG_USERSPACE
	/* retrieve saved stack pointer */
	lr sp, __z_arch_esf_t_sp_OFFSET(sp)
#else
	/* remove esf from the stack */
	addi sp, sp, __z_arch_esf_t_SIZEOF
800001b0:	05010113          	addi	sp,sp,80
#endif

	mret
800001b4:	30200073          	mret

800001b8 <__soc_handle_irq>:
 * SOC-specific function to handle pending IRQ number generating the interrupt.
 * Exception number is given as parameter via register a0.
 */
SECTION_FUNC(exception.other, __soc_handle_irq)
	/* Clear exception number from CSR mip register */
	li t1, 1
800001b8:	00100313          	li	t1,1
	sll t0, t1, a0
800001bc:	00a312b3          	sll	t0,t1,a0
	csrrc t1, mip, t0
800001c0:	3442b373          	csrrc	t1,mip,t0

	/* Return */
	ret
800001c4:	00008067          	ret

800001c8 <__soc_is_irq>:
 * return 1 (interrupt) or 0 (exception)
 *
 */
SECTION_FUNC(exception.other, __soc_is_irq)
	/* Read mcause and check if interrupt bit is set */
	csrr t0, mcause
800001c8:	342022f3          	csrr	t0,mcause
	li t1, SOC_MCAUSE_IRQ_MASK
800001cc:	80000337          	lui	t1,0x80000
	and t0, t0, t1
800001d0:	0062f2b3          	and	t0,t0,t1

	/* If interrupt bit is not set, return with 0 */
	addi a0, x0, 0
800001d4:	00000513          	li	a0,0
	beqz t0, not_interrupt
800001d8:	00028463          	beqz	t0,800001e0 <not_interrupt>
	addi a0, a0, 1
800001dc:	00150513          	addi	a0,a0,1

800001e0 <not_interrupt>:

not_interrupt:
	/* return */
	ret
800001e0:	00008067          	ret

Disassembly of section text:

800001e4 <__udivdi3>:
800001e4:	00050893          	mv	a7,a0
800001e8:	00058313          	mv	t1,a1
800001ec:	00060713          	mv	a4,a2
800001f0:	00050813          	mv	a6,a0
800001f4:	00058793          	mv	a5,a1
800001f8:	28069263          	bnez	a3,8000047c <__udivdi3+0x298>
800001fc:	800095b7          	lui	a1,0x80009
80000200:	c0c58593          	addi	a1,a1,-1012 # 80008c0c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008c0d>
80000204:	0ec37663          	bgeu	t1,a2,800002f0 <__udivdi3+0x10c>
80000208:	000106b7          	lui	a3,0x10
8000020c:	0cd67863          	bgeu	a2,a3,800002dc <__udivdi3+0xf8>
80000210:	10063693          	sltiu	a3,a2,256
80000214:	0016c693          	xori	a3,a3,1
80000218:	00369693          	slli	a3,a3,0x3
8000021c:	00d65533          	srl	a0,a2,a3
80000220:	00a585b3          	add	a1,a1,a0
80000224:	0005c583          	lbu	a1,0(a1)
80000228:	02000513          	li	a0,32
8000022c:	00d586b3          	add	a3,a1,a3
80000230:	40d505b3          	sub	a1,a0,a3
80000234:	00d50c63          	beq	a0,a3,8000024c <__udivdi3+0x68>
80000238:	00b317b3          	sll	a5,t1,a1
8000023c:	00d8d6b3          	srl	a3,a7,a3
80000240:	00b61733          	sll	a4,a2,a1
80000244:	00f6e7b3          	or	a5,a3,a5
80000248:	00b89833          	sll	a6,a7,a1
8000024c:	01075593          	srli	a1,a4,0x10
80000250:	02b7d333          	divu	t1,a5,a1
80000254:	01071613          	slli	a2,a4,0x10
80000258:	01065613          	srli	a2,a2,0x10
8000025c:	02b7f7b3          	remu	a5,a5,a1
80000260:	00030513          	mv	a0,t1
80000264:	026608b3          	mul	a7,a2,t1
80000268:	01079693          	slli	a3,a5,0x10
8000026c:	01085793          	srli	a5,a6,0x10
80000270:	00d7e7b3          	or	a5,a5,a3
80000274:	0117fe63          	bgeu	a5,a7,80000290 <__udivdi3+0xac>
80000278:	00f707b3          	add	a5,a4,a5
8000027c:	fff30513          	addi	a0,t1,-1 # 7fffffff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000000>
80000280:	00e7e863          	bltu	a5,a4,80000290 <__udivdi3+0xac>
80000284:	0117f663          	bgeu	a5,a7,80000290 <__udivdi3+0xac>
80000288:	ffe30513          	addi	a0,t1,-2
8000028c:	00e787b3          	add	a5,a5,a4
80000290:	411787b3          	sub	a5,a5,a7
80000294:	02b7d8b3          	divu	a7,a5,a1
80000298:	01081813          	slli	a6,a6,0x10
8000029c:	01085813          	srli	a6,a6,0x10
800002a0:	02b7f7b3          	remu	a5,a5,a1
800002a4:	031606b3          	mul	a3,a2,a7
800002a8:	01079793          	slli	a5,a5,0x10
800002ac:	00f86833          	or	a6,a6,a5
800002b0:	00088793          	mv	a5,a7
800002b4:	00d87c63          	bgeu	a6,a3,800002cc <__udivdi3+0xe8>
800002b8:	01070833          	add	a6,a4,a6
800002bc:	fff88793          	addi	a5,a7,-1
800002c0:	00e86663          	bltu	a6,a4,800002cc <__udivdi3+0xe8>
800002c4:	00d87463          	bgeu	a6,a3,800002cc <__udivdi3+0xe8>
800002c8:	ffe88793          	addi	a5,a7,-2
800002cc:	01051513          	slli	a0,a0,0x10
800002d0:	00f56533          	or	a0,a0,a5
800002d4:	00000593          	li	a1,0
800002d8:	00008067          	ret
800002dc:	01000537          	lui	a0,0x1000
800002e0:	01000693          	li	a3,16
800002e4:	f2a66ce3          	bltu	a2,a0,8000021c <__udivdi3+0x38>
800002e8:	01800693          	li	a3,24
800002ec:	f31ff06f          	j	8000021c <__udivdi3+0x38>
800002f0:	00000693          	li	a3,0
800002f4:	00060c63          	beqz	a2,8000030c <__udivdi3+0x128>
800002f8:	000107b7          	lui	a5,0x10
800002fc:	0cf67063          	bgeu	a2,a5,800003bc <__udivdi3+0x1d8>
80000300:	10063693          	sltiu	a3,a2,256
80000304:	0016c693          	xori	a3,a3,1
80000308:	00369693          	slli	a3,a3,0x3
8000030c:	00d657b3          	srl	a5,a2,a3
80000310:	00f585b3          	add	a1,a1,a5
80000314:	0005c783          	lbu	a5,0(a1)
80000318:	00d787b3          	add	a5,a5,a3
8000031c:	02000693          	li	a3,32
80000320:	40f685b3          	sub	a1,a3,a5
80000324:	0af69663          	bne	a3,a5,800003d0 <__udivdi3+0x1ec>
80000328:	40c307b3          	sub	a5,t1,a2
8000032c:	00100593          	li	a1,1
80000330:	01075893          	srli	a7,a4,0x10
80000334:	0317de33          	divu	t3,a5,a7
80000338:	01071613          	slli	a2,a4,0x10
8000033c:	01065613          	srli	a2,a2,0x10
80000340:	01085693          	srli	a3,a6,0x10
80000344:	0317f7b3          	remu	a5,a5,a7
80000348:	000e0513          	mv	a0,t3
8000034c:	03c60333          	mul	t1,a2,t3
80000350:	01079793          	slli	a5,a5,0x10
80000354:	00f6e7b3          	or	a5,a3,a5
80000358:	0067fe63          	bgeu	a5,t1,80000374 <__udivdi3+0x190>
8000035c:	00f707b3          	add	a5,a4,a5
80000360:	fffe0513          	addi	a0,t3,-1
80000364:	00e7e863          	bltu	a5,a4,80000374 <__udivdi3+0x190>
80000368:	0067f663          	bgeu	a5,t1,80000374 <__udivdi3+0x190>
8000036c:	ffee0513          	addi	a0,t3,-2
80000370:	00e787b3          	add	a5,a5,a4
80000374:	406787b3          	sub	a5,a5,t1
80000378:	0317d333          	divu	t1,a5,a7
8000037c:	01081813          	slli	a6,a6,0x10
80000380:	01085813          	srli	a6,a6,0x10
80000384:	0317f7b3          	remu	a5,a5,a7
80000388:	026606b3          	mul	a3,a2,t1
8000038c:	01079793          	slli	a5,a5,0x10
80000390:	00f86833          	or	a6,a6,a5
80000394:	00030793          	mv	a5,t1
80000398:	00d87c63          	bgeu	a6,a3,800003b0 <__udivdi3+0x1cc>
8000039c:	01070833          	add	a6,a4,a6
800003a0:	fff30793          	addi	a5,t1,-1
800003a4:	00e86663          	bltu	a6,a4,800003b0 <__udivdi3+0x1cc>
800003a8:	00d87463          	bgeu	a6,a3,800003b0 <__udivdi3+0x1cc>
800003ac:	ffe30793          	addi	a5,t1,-2
800003b0:	01051513          	slli	a0,a0,0x10
800003b4:	00f56533          	or	a0,a0,a5
800003b8:	00008067          	ret
800003bc:	010007b7          	lui	a5,0x1000
800003c0:	01000693          	li	a3,16
800003c4:	f4f664e3          	bltu	a2,a5,8000030c <__udivdi3+0x128>
800003c8:	01800693          	li	a3,24
800003cc:	f41ff06f          	j	8000030c <__udivdi3+0x128>
800003d0:	00b61733          	sll	a4,a2,a1
800003d4:	00f356b3          	srl	a3,t1,a5
800003d8:	01075513          	srli	a0,a4,0x10
800003dc:	00b31333          	sll	t1,t1,a1
800003e0:	00f8d7b3          	srl	a5,a7,a5
800003e4:	0067e7b3          	or	a5,a5,t1
800003e8:	02a6d333          	divu	t1,a3,a0
800003ec:	01071613          	slli	a2,a4,0x10
800003f0:	01065613          	srli	a2,a2,0x10
800003f4:	00b89833          	sll	a6,a7,a1
800003f8:	02a6f6b3          	remu	a3,a3,a0
800003fc:	026608b3          	mul	a7,a2,t1
80000400:	01069593          	slli	a1,a3,0x10
80000404:	0107d693          	srli	a3,a5,0x10
80000408:	00b6e6b3          	or	a3,a3,a1
8000040c:	00030593          	mv	a1,t1
80000410:	0116fe63          	bgeu	a3,a7,8000042c <__udivdi3+0x248>
80000414:	00d706b3          	add	a3,a4,a3
80000418:	fff30593          	addi	a1,t1,-1
8000041c:	00e6e863          	bltu	a3,a4,8000042c <__udivdi3+0x248>
80000420:	0116f663          	bgeu	a3,a7,8000042c <__udivdi3+0x248>
80000424:	ffe30593          	addi	a1,t1,-2
80000428:	00e686b3          	add	a3,a3,a4
8000042c:	411686b3          	sub	a3,a3,a7
80000430:	02a6d8b3          	divu	a7,a3,a0
80000434:	01079793          	slli	a5,a5,0x10
80000438:	0107d793          	srli	a5,a5,0x10
8000043c:	02a6f6b3          	remu	a3,a3,a0
80000440:	03160633          	mul	a2,a2,a7
80000444:	01069693          	slli	a3,a3,0x10
80000448:	00d7e7b3          	or	a5,a5,a3
8000044c:	00088693          	mv	a3,a7
80000450:	00c7fe63          	bgeu	a5,a2,8000046c <__udivdi3+0x288>
80000454:	00f707b3          	add	a5,a4,a5
80000458:	fff88693          	addi	a3,a7,-1
8000045c:	00e7e863          	bltu	a5,a4,8000046c <__udivdi3+0x288>
80000460:	00c7f663          	bgeu	a5,a2,8000046c <__udivdi3+0x288>
80000464:	ffe88693          	addi	a3,a7,-2
80000468:	00e787b3          	add	a5,a5,a4
8000046c:	01059593          	slli	a1,a1,0x10
80000470:	40c787b3          	sub	a5,a5,a2
80000474:	00d5e5b3          	or	a1,a1,a3
80000478:	eb9ff06f          	j	80000330 <__udivdi3+0x14c>
8000047c:	18d5e663          	bltu	a1,a3,80000608 <__udivdi3+0x424>
80000480:	000107b7          	lui	a5,0x10
80000484:	04f6f463          	bgeu	a3,a5,800004cc <__udivdi3+0x2e8>
80000488:	1006b713          	sltiu	a4,a3,256
8000048c:	00174713          	xori	a4,a4,1
80000490:	00371713          	slli	a4,a4,0x3
80000494:	800097b7          	lui	a5,0x80009
80000498:	00e6d5b3          	srl	a1,a3,a4
8000049c:	c0c78793          	addi	a5,a5,-1012 # 80008c0c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008c0d>
800004a0:	00b787b3          	add	a5,a5,a1
800004a4:	0007c783          	lbu	a5,0(a5)
800004a8:	00e787b3          	add	a5,a5,a4
800004ac:	02000713          	li	a4,32
800004b0:	40f705b3          	sub	a1,a4,a5
800004b4:	02f71663          	bne	a4,a5,800004e0 <__udivdi3+0x2fc>
800004b8:	00100513          	li	a0,1
800004bc:	e066eee3          	bltu	a3,t1,800002d8 <__udivdi3+0xf4>
800004c0:	00c8b533          	sltu	a0,a7,a2
800004c4:	00154513          	xori	a0,a0,1
800004c8:	00008067          	ret
800004cc:	010007b7          	lui	a5,0x1000
800004d0:	01000713          	li	a4,16
800004d4:	fcf6e0e3          	bltu	a3,a5,80000494 <__udivdi3+0x2b0>
800004d8:	01800713          	li	a4,24
800004dc:	fb9ff06f          	j	80000494 <__udivdi3+0x2b0>
800004e0:	00f65733          	srl	a4,a2,a5
800004e4:	00b696b3          	sll	a3,a3,a1
800004e8:	00d766b3          	or	a3,a4,a3
800004ec:	00f35733          	srl	a4,t1,a5
800004f0:	00b31333          	sll	t1,t1,a1
800004f4:	00f8d7b3          	srl	a5,a7,a5
800004f8:	0067e7b3          	or	a5,a5,t1
800004fc:	0106d313          	srli	t1,a3,0x10
80000500:	02675eb3          	divu	t4,a4,t1
80000504:	01069813          	slli	a6,a3,0x10
80000508:	01085813          	srli	a6,a6,0x10
8000050c:	00b61633          	sll	a2,a2,a1
80000510:	02677733          	remu	a4,a4,t1
80000514:	03d80e33          	mul	t3,a6,t4
80000518:	01071513          	slli	a0,a4,0x10
8000051c:	0107d713          	srli	a4,a5,0x10
80000520:	00a76733          	or	a4,a4,a0
80000524:	000e8513          	mv	a0,t4
80000528:	01c77e63          	bgeu	a4,t3,80000544 <__udivdi3+0x360>
8000052c:	00e68733          	add	a4,a3,a4
80000530:	fffe8513          	addi	a0,t4,-1
80000534:	00d76863          	bltu	a4,a3,80000544 <__udivdi3+0x360>
80000538:	01c77663          	bgeu	a4,t3,80000544 <__udivdi3+0x360>
8000053c:	ffee8513          	addi	a0,t4,-2
80000540:	00d70733          	add	a4,a4,a3
80000544:	41c70733          	sub	a4,a4,t3
80000548:	02675e33          	divu	t3,a4,t1
8000054c:	01079793          	slli	a5,a5,0x10
80000550:	0107d793          	srli	a5,a5,0x10
80000554:	02677733          	remu	a4,a4,t1
80000558:	03c80833          	mul	a6,a6,t3
8000055c:	01071713          	slli	a4,a4,0x10
80000560:	00e7e7b3          	or	a5,a5,a4
80000564:	000e0713          	mv	a4,t3
80000568:	0107fe63          	bgeu	a5,a6,80000584 <__udivdi3+0x3a0>
8000056c:	00f687b3          	add	a5,a3,a5
80000570:	fffe0713          	addi	a4,t3,-1
80000574:	00d7e863          	bltu	a5,a3,80000584 <__udivdi3+0x3a0>
80000578:	0107f663          	bgeu	a5,a6,80000584 <__udivdi3+0x3a0>
8000057c:	ffee0713          	addi	a4,t3,-2
80000580:	00d787b3          	add	a5,a5,a3
80000584:	01051513          	slli	a0,a0,0x10
80000588:	00010e37          	lui	t3,0x10
8000058c:	00e56533          	or	a0,a0,a4
80000590:	fffe0693          	addi	a3,t3,-1 # ffff <__rom_region_size+0x62ab>
80000594:	00d57733          	and	a4,a0,a3
80000598:	410787b3          	sub	a5,a5,a6
8000059c:	00d676b3          	and	a3,a2,a3
800005a0:	01055813          	srli	a6,a0,0x10
800005a4:	01065613          	srli	a2,a2,0x10
800005a8:	02d70333          	mul	t1,a4,a3
800005ac:	02d806b3          	mul	a3,a6,a3
800005b0:	02c70733          	mul	a4,a4,a2
800005b4:	02c80833          	mul	a6,a6,a2
800005b8:	00d70633          	add	a2,a4,a3
800005bc:	01035713          	srli	a4,t1,0x10
800005c0:	00c70733          	add	a4,a4,a2
800005c4:	00d77463          	bgeu	a4,a3,800005cc <__udivdi3+0x3e8>
800005c8:	01c80833          	add	a6,a6,t3
800005cc:	01075693          	srli	a3,a4,0x10
800005d0:	010686b3          	add	a3,a3,a6
800005d4:	02d7e663          	bltu	a5,a3,80000600 <__udivdi3+0x41c>
800005d8:	ced79ee3          	bne	a5,a3,800002d4 <__udivdi3+0xf0>
800005dc:	000107b7          	lui	a5,0x10
800005e0:	fff78793          	addi	a5,a5,-1 # ffff <__rom_region_size+0x62ab>
800005e4:	00f77733          	and	a4,a4,a5
800005e8:	01071713          	slli	a4,a4,0x10
800005ec:	00f37333          	and	t1,t1,a5
800005f0:	00b898b3          	sll	a7,a7,a1
800005f4:	00670733          	add	a4,a4,t1
800005f8:	00000593          	li	a1,0
800005fc:	cce8fee3          	bgeu	a7,a4,800002d8 <__udivdi3+0xf4>
80000600:	fff50513          	addi	a0,a0,-1 # ffffff <CONFIG_SRAM_SIZE+0xefffff>
80000604:	cd1ff06f          	j	800002d4 <__udivdi3+0xf0>
80000608:	00000593          	li	a1,0
8000060c:	00000513          	li	a0,0
80000610:	00008067          	ret

80000614 <__umoddi3>:
80000614:	00060813          	mv	a6,a2
80000618:	00050793          	mv	a5,a0
8000061c:	00058713          	mv	a4,a1
80000620:	20069663          	bnez	a3,8000082c <__umoddi3+0x218>
80000624:	800098b7          	lui	a7,0x80009
80000628:	c0c88893          	addi	a7,a7,-1012 # 80008c0c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008c0d>
8000062c:	0cc5fc63          	bgeu	a1,a2,80000704 <__umoddi3+0xf0>
80000630:	000106b7          	lui	a3,0x10
80000634:	0ad67e63          	bgeu	a2,a3,800006f0 <__umoddi3+0xdc>
80000638:	10063693          	sltiu	a3,a2,256
8000063c:	0016c693          	xori	a3,a3,1
80000640:	00369693          	slli	a3,a3,0x3
80000644:	00d65333          	srl	t1,a2,a3
80000648:	006888b3          	add	a7,a7,t1
8000064c:	0008c883          	lbu	a7,0(a7)
80000650:	02000313          	li	t1,32
80000654:	00d886b3          	add	a3,a7,a3
80000658:	40d308b3          	sub	a7,t1,a3
8000065c:	00d30c63          	beq	t1,a3,80000674 <__umoddi3+0x60>
80000660:	01159733          	sll	a4,a1,a7
80000664:	00d556b3          	srl	a3,a0,a3
80000668:	01161833          	sll	a6,a2,a7
8000066c:	00e6e733          	or	a4,a3,a4
80000670:	011517b3          	sll	a5,a0,a7
80000674:	01085613          	srli	a2,a6,0x10
80000678:	02c756b3          	divu	a3,a4,a2
8000067c:	01081513          	slli	a0,a6,0x10
80000680:	01055513          	srli	a0,a0,0x10
80000684:	02c77733          	remu	a4,a4,a2
80000688:	02a686b3          	mul	a3,a3,a0
8000068c:	01071593          	slli	a1,a4,0x10
80000690:	0107d713          	srli	a4,a5,0x10
80000694:	00b76733          	or	a4,a4,a1
80000698:	00d77a63          	bgeu	a4,a3,800006ac <__umoddi3+0x98>
8000069c:	00e80733          	add	a4,a6,a4
800006a0:	01076663          	bltu	a4,a6,800006ac <__umoddi3+0x98>
800006a4:	00d77463          	bgeu	a4,a3,800006ac <__umoddi3+0x98>
800006a8:	01070733          	add	a4,a4,a6
800006ac:	40d70733          	sub	a4,a4,a3
800006b0:	02c756b3          	divu	a3,a4,a2
800006b4:	02c77733          	remu	a4,a4,a2
800006b8:	02a686b3          	mul	a3,a3,a0
800006bc:	01079793          	slli	a5,a5,0x10
800006c0:	01071713          	slli	a4,a4,0x10
800006c4:	0107d793          	srli	a5,a5,0x10
800006c8:	00e7e7b3          	or	a5,a5,a4
800006cc:	00d7fa63          	bgeu	a5,a3,800006e0 <__umoddi3+0xcc>
800006d0:	00f807b3          	add	a5,a6,a5
800006d4:	0107e663          	bltu	a5,a6,800006e0 <__umoddi3+0xcc>
800006d8:	00d7f463          	bgeu	a5,a3,800006e0 <__umoddi3+0xcc>
800006dc:	010787b3          	add	a5,a5,a6
800006e0:	40d787b3          	sub	a5,a5,a3
800006e4:	0117d533          	srl	a0,a5,a7
800006e8:	00000593          	li	a1,0
800006ec:	00008067          	ret
800006f0:	01000337          	lui	t1,0x1000
800006f4:	01000693          	li	a3,16
800006f8:	f46666e3          	bltu	a2,t1,80000644 <__umoddi3+0x30>
800006fc:	01800693          	li	a3,24
80000700:	f45ff06f          	j	80000644 <__umoddi3+0x30>
80000704:	00000693          	li	a3,0
80000708:	00060c63          	beqz	a2,80000720 <__umoddi3+0x10c>
8000070c:	00010737          	lui	a4,0x10
80000710:	06e67e63          	bgeu	a2,a4,8000078c <__umoddi3+0x178>
80000714:	10063693          	sltiu	a3,a2,256
80000718:	0016c693          	xori	a3,a3,1
8000071c:	00369693          	slli	a3,a3,0x3
80000720:	00d65733          	srl	a4,a2,a3
80000724:	00e888b3          	add	a7,a7,a4
80000728:	0008c703          	lbu	a4,0(a7)
8000072c:	00d70733          	add	a4,a4,a3
80000730:	02000693          	li	a3,32
80000734:	40e688b3          	sub	a7,a3,a4
80000738:	06e69463          	bne	a3,a4,800007a0 <__umoddi3+0x18c>
8000073c:	40c58733          	sub	a4,a1,a2
80000740:	01085593          	srli	a1,a6,0x10
80000744:	02b75633          	divu	a2,a4,a1
80000748:	01081513          	slli	a0,a6,0x10
8000074c:	01055513          	srli	a0,a0,0x10
80000750:	0107d693          	srli	a3,a5,0x10
80000754:	02b77733          	remu	a4,a4,a1
80000758:	02a60633          	mul	a2,a2,a0
8000075c:	01071713          	slli	a4,a4,0x10
80000760:	00e6e733          	or	a4,a3,a4
80000764:	00c77a63          	bgeu	a4,a2,80000778 <__umoddi3+0x164>
80000768:	00e80733          	add	a4,a6,a4
8000076c:	01076663          	bltu	a4,a6,80000778 <__umoddi3+0x164>
80000770:	00c77463          	bgeu	a4,a2,80000778 <__umoddi3+0x164>
80000774:	01070733          	add	a4,a4,a6
80000778:	40c70733          	sub	a4,a4,a2
8000077c:	02b756b3          	divu	a3,a4,a1
80000780:	02b77733          	remu	a4,a4,a1
80000784:	02a686b3          	mul	a3,a3,a0
80000788:	f35ff06f          	j	800006bc <__umoddi3+0xa8>
8000078c:	01000737          	lui	a4,0x1000
80000790:	01000693          	li	a3,16
80000794:	f8e666e3          	bltu	a2,a4,80000720 <__umoddi3+0x10c>
80000798:	01800693          	li	a3,24
8000079c:	f85ff06f          	j	80000720 <__umoddi3+0x10c>
800007a0:	01161833          	sll	a6,a2,a7
800007a4:	00e5d6b3          	srl	a3,a1,a4
800007a8:	011517b3          	sll	a5,a0,a7
800007ac:	011595b3          	sll	a1,a1,a7
800007b0:	00e55733          	srl	a4,a0,a4
800007b4:	01085513          	srli	a0,a6,0x10
800007b8:	00b76733          	or	a4,a4,a1
800007bc:	02a6d5b3          	divu	a1,a3,a0
800007c0:	01081313          	slli	t1,a6,0x10
800007c4:	01035313          	srli	t1,t1,0x10
800007c8:	02a6f6b3          	remu	a3,a3,a0
800007cc:	026585b3          	mul	a1,a1,t1
800007d0:	01069613          	slli	a2,a3,0x10
800007d4:	01075693          	srli	a3,a4,0x10
800007d8:	00c6e6b3          	or	a3,a3,a2
800007dc:	00b6fa63          	bgeu	a3,a1,800007f0 <__umoddi3+0x1dc>
800007e0:	00d806b3          	add	a3,a6,a3
800007e4:	0106e663          	bltu	a3,a6,800007f0 <__umoddi3+0x1dc>
800007e8:	00b6f463          	bgeu	a3,a1,800007f0 <__umoddi3+0x1dc>
800007ec:	010686b3          	add	a3,a3,a6
800007f0:	40b686b3          	sub	a3,a3,a1
800007f4:	02a6d633          	divu	a2,a3,a0
800007f8:	01071713          	slli	a4,a4,0x10
800007fc:	01075713          	srli	a4,a4,0x10
80000800:	02a6f6b3          	remu	a3,a3,a0
80000804:	02660633          	mul	a2,a2,t1
80000808:	01069693          	slli	a3,a3,0x10
8000080c:	00d76733          	or	a4,a4,a3
80000810:	00c77a63          	bgeu	a4,a2,80000824 <__umoddi3+0x210>
80000814:	00e80733          	add	a4,a6,a4
80000818:	01076663          	bltu	a4,a6,80000824 <__umoddi3+0x210>
8000081c:	00c77463          	bgeu	a4,a2,80000824 <__umoddi3+0x210>
80000820:	01070733          	add	a4,a4,a6
80000824:	40c70733          	sub	a4,a4,a2
80000828:	f19ff06f          	j	80000740 <__umoddi3+0x12c>
8000082c:	1cd5e463          	bltu	a1,a3,800009f4 <__umoddi3+0x3e0>
80000830:	00010837          	lui	a6,0x10
80000834:	0506fe63          	bgeu	a3,a6,80000890 <__umoddi3+0x27c>
80000838:	1006b813          	sltiu	a6,a3,256
8000083c:	00184813          	xori	a6,a6,1
80000840:	00381813          	slli	a6,a6,0x3
80000844:	800098b7          	lui	a7,0x80009
80000848:	0106d333          	srl	t1,a3,a6
8000084c:	c0c88893          	addi	a7,a7,-1012 # 80008c0c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008c0d>
80000850:	006888b3          	add	a7,a7,t1
80000854:	0008c883          	lbu	a7,0(a7)
80000858:	02000313          	li	t1,32
8000085c:	010888b3          	add	a7,a7,a6
80000860:	41130833          	sub	a6,t1,a7
80000864:	05131063          	bne	t1,a7,800008a4 <__umoddi3+0x290>
80000868:	00b6e463          	bltu	a3,a1,80000870 <__umoddi3+0x25c>
8000086c:	00c56c63          	bltu	a0,a2,80000884 <__umoddi3+0x270>
80000870:	40c50633          	sub	a2,a0,a2
80000874:	40d586b3          	sub	a3,a1,a3
80000878:	00c53733          	sltu	a4,a0,a2
8000087c:	00060793          	mv	a5,a2
80000880:	40e68733          	sub	a4,a3,a4
80000884:	00078513          	mv	a0,a5
80000888:	00070593          	mv	a1,a4
8000088c:	00008067          	ret
80000890:	010008b7          	lui	a7,0x1000
80000894:	01000813          	li	a6,16
80000898:	fb16e6e3          	bltu	a3,a7,80000844 <__umoddi3+0x230>
8000089c:	01800813          	li	a6,24
800008a0:	fa5ff06f          	j	80000844 <__umoddi3+0x230>
800008a4:	011657b3          	srl	a5,a2,a7
800008a8:	010696b3          	sll	a3,a3,a6
800008ac:	00d7e6b3          	or	a3,a5,a3
800008b0:	0115d733          	srl	a4,a1,a7
800008b4:	0106de13          	srli	t3,a3,0x10
800008b8:	03c75f33          	divu	t5,a4,t3
800008bc:	01069313          	slli	t1,a3,0x10
800008c0:	01035313          	srli	t1,t1,0x10
800008c4:	010597b3          	sll	a5,a1,a6
800008c8:	011555b3          	srl	a1,a0,a7
800008cc:	00f5e5b3          	or	a1,a1,a5
800008d0:	0105d793          	srli	a5,a1,0x10
800008d4:	01061633          	sll	a2,a2,a6
800008d8:	01051533          	sll	a0,a0,a6
800008dc:	03c77733          	remu	a4,a4,t3
800008e0:	03e30eb3          	mul	t4,t1,t5
800008e4:	01071713          	slli	a4,a4,0x10
800008e8:	00e7e7b3          	or	a5,a5,a4
800008ec:	000f0713          	mv	a4,t5
800008f0:	01d7fe63          	bgeu	a5,t4,8000090c <__umoddi3+0x2f8>
800008f4:	00f687b3          	add	a5,a3,a5
800008f8:	ffff0713          	addi	a4,t5,-1
800008fc:	00d7e863          	bltu	a5,a3,8000090c <__umoddi3+0x2f8>
80000900:	01d7f663          	bgeu	a5,t4,8000090c <__umoddi3+0x2f8>
80000904:	ffef0713          	addi	a4,t5,-2
80000908:	00d787b3          	add	a5,a5,a3
8000090c:	41d787b3          	sub	a5,a5,t4
80000910:	03c7deb3          	divu	t4,a5,t3
80000914:	01059593          	slli	a1,a1,0x10
80000918:	0105d593          	srli	a1,a1,0x10
8000091c:	03c7f7b3          	remu	a5,a5,t3
80000920:	000e8e13          	mv	t3,t4
80000924:	03d30333          	mul	t1,t1,t4
80000928:	01079793          	slli	a5,a5,0x10
8000092c:	00f5e5b3          	or	a1,a1,a5
80000930:	0065fe63          	bgeu	a1,t1,8000094c <__umoddi3+0x338>
80000934:	00b685b3          	add	a1,a3,a1
80000938:	fffe8e13          	addi	t3,t4,-1
8000093c:	00d5e863          	bltu	a1,a3,8000094c <__umoddi3+0x338>
80000940:	0065f663          	bgeu	a1,t1,8000094c <__umoddi3+0x338>
80000944:	ffee8e13          	addi	t3,t4,-2
80000948:	00d585b3          	add	a1,a1,a3
8000094c:	01071793          	slli	a5,a4,0x10
80000950:	00010f37          	lui	t5,0x10
80000954:	01c7e7b3          	or	a5,a5,t3
80000958:	406585b3          	sub	a1,a1,t1
8000095c:	ffff0313          	addi	t1,t5,-1 # ffff <__rom_region_size+0x62ab>
80000960:	0067f733          	and	a4,a5,t1
80000964:	01065e13          	srli	t3,a2,0x10
80000968:	0107d793          	srli	a5,a5,0x10
8000096c:	00667333          	and	t1,a2,t1
80000970:	02670eb3          	mul	t4,a4,t1
80000974:	02678333          	mul	t1,a5,t1
80000978:	03c70733          	mul	a4,a4,t3
8000097c:	03c787b3          	mul	a5,a5,t3
80000980:	00670e33          	add	t3,a4,t1
80000984:	010ed713          	srli	a4,t4,0x10
80000988:	01c70733          	add	a4,a4,t3
8000098c:	00677463          	bgeu	a4,t1,80000994 <__umoddi3+0x380>
80000990:	01e787b3          	add	a5,a5,t5
80000994:	01075313          	srli	t1,a4,0x10
80000998:	00f307b3          	add	a5,t1,a5
8000099c:	00010337          	lui	t1,0x10
800009a0:	fff30313          	addi	t1,t1,-1 # ffff <__rom_region_size+0x62ab>
800009a4:	00677733          	and	a4,a4,t1
800009a8:	01071713          	slli	a4,a4,0x10
800009ac:	006efeb3          	and	t4,t4,t1
800009b0:	01d70733          	add	a4,a4,t4
800009b4:	00f5e663          	bltu	a1,a5,800009c0 <__umoddi3+0x3ac>
800009b8:	00f59e63          	bne	a1,a5,800009d4 <__umoddi3+0x3c0>
800009bc:	00e57c63          	bgeu	a0,a4,800009d4 <__umoddi3+0x3c0>
800009c0:	40c70633          	sub	a2,a4,a2
800009c4:	00c73333          	sltu	t1,a4,a2
800009c8:	00d306b3          	add	a3,t1,a3
800009cc:	00060713          	mv	a4,a2
800009d0:	40d787b3          	sub	a5,a5,a3
800009d4:	40e50733          	sub	a4,a0,a4
800009d8:	00e53533          	sltu	a0,a0,a4
800009dc:	40f585b3          	sub	a1,a1,a5
800009e0:	40a585b3          	sub	a1,a1,a0
800009e4:	011598b3          	sll	a7,a1,a7
800009e8:	01075733          	srl	a4,a4,a6
800009ec:	00e8e533          	or	a0,a7,a4
800009f0:	0105d5b3          	srl	a1,a1,a6
800009f4:	00008067          	ret

800009f8 <exit>:
800009f8:	00308013          	addi	zero,ra,3
800009fc:	ff010113          	addi	sp,sp,-16
80000a00:	00812423          	sw	s0,8(sp)
80000a04:	00112623          	sw	ra,12(sp)
80000a08:	00000793          	li	a5,0
80000a0c:	00050413          	mv	s0,a0
80000a10:	00078863          	beqz	a5,80000a20 <exit+0x28>
80000a14:	00000593          	li	a1,0
80000a18:	00000097          	auipc	ra,0x0
80000a1c:	000000e7          	jalr	zero # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
80000a20:	800097b7          	lui	a5,0x80009
80000a24:	c087a503          	lw	a0,-1016(a5) # 80008c08 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008c09>
80000a28:	03c52783          	lw	a5,60(a0)
80000a2c:	00078463          	beqz	a5,80000a34 <exit+0x3c>
80000a30:	000780e7          	jalr	a5
80000a34:	00040513          	mv	a0,s0
80000a38:	680050ef          	jal	ra,800060b8 <_exit>

80000a3c <malloc>:
80000a3c:	00308013          	addi	zero,ra,3 # 80000a1b <exit+0x23>
80000a40:	00050593          	mv	a1,a0
80000a44:	82c1a503          	lw	a0,-2004(gp) # 8000cf6c <_impure_ptr>
80000a48:	5d00006f          	j	80001018 <_malloc_r>

80000a4c <free>:
80000a4c:	00308013          	addi	zero,ra,3
80000a50:	00050593          	mv	a1,a0
80000a54:	82c1a503          	lw	a0,-2004(gp) # 8000cf6c <_impure_ptr>
80000a58:	4540006f          	j	80000eac <_free_r>

80000a5c <memcpy>:
80000a5c:	00308013          	addi	zero,ra,3
80000a60:	f9010113          	addi	sp,sp,-112
80000a64:	06812623          	sw	s0,108(sp)
80000a68:	07010413          	addi	s0,sp,112
80000a6c:	f8a42e23          	sw	a0,-100(s0)
80000a70:	f8b42c23          	sw	a1,-104(s0)
80000a74:	f8c42a23          	sw	a2,-108(s0)
80000a78:	f9c42783          	lw	a5,-100(s0)
80000a7c:	fef42623          	sw	a5,-20(s0)
80000a80:	f9842783          	lw	a5,-104(s0)
80000a84:	fef42423          	sw	a5,-24(s0)
80000a88:	fec42703          	lw	a4,-20(s0)
80000a8c:	f9442783          	lw	a5,-108(s0)
80000a90:	00f707b3          	add	a5,a4,a5
80000a94:	fcf42e23          	sw	a5,-36(s0)
80000a98:	00300793          	li	a5,3
80000a9c:	fcf42c23          	sw	a5,-40(s0)
80000aa0:	fec42703          	lw	a4,-20(s0)
80000aa4:	fe842783          	lw	a5,-24(s0)
80000aa8:	00f74733          	xor	a4,a4,a5
80000aac:	fd842783          	lw	a5,-40(s0)
80000ab0:	00f777b3          	and	a5,a4,a5
80000ab4:	00f037b3          	snez	a5,a5
80000ab8:	0ff7f793          	zext.b	a5,a5
80000abc:	00079a63          	bnez	a5,80000ad0 <memcpy+0x74>
80000ac0:	f9442783          	lw	a5,-108(s0)
80000ac4:	0047b793          	sltiu	a5,a5,4
80000ac8:	0ff7f793          	zext.b	a5,a5
80000acc:	06078863          	beqz	a5,80000b3c <memcpy+0xe0>
80000ad0:	00000013          	nop
80000ad4:	0080006f          	j	80000adc <memcpy+0x80>
80000ad8:	00000013          	nop
80000adc:	fec42703          	lw	a4,-20(s0)
80000ae0:	fdc42783          	lw	a5,-36(s0)
80000ae4:	00f737b3          	sltu	a5,a4,a5
80000ae8:	0ff7f793          	zext.b	a5,a5
80000aec:	04078463          	beqz	a5,80000b34 <memcpy+0xd8>
80000af0:	0380006f          	j	80000b28 <memcpy+0xcc>
80000af4:	fe842783          	lw	a5,-24(s0)
80000af8:	0007c783          	lbu	a5,0(a5)
80000afc:	faf403a3          	sb	a5,-89(s0)
80000b00:	fec42783          	lw	a5,-20(s0)
80000b04:	00178793          	addi	a5,a5,1
80000b08:	fef42623          	sw	a5,-20(s0)
80000b0c:	fe842783          	lw	a5,-24(s0)
80000b10:	00178793          	addi	a5,a5,1
80000b14:	fef42423          	sw	a5,-24(s0)
80000b18:	fec42783          	lw	a5,-20(s0)
80000b1c:	fff78793          	addi	a5,a5,-1
80000b20:	fa744703          	lbu	a4,-89(s0)
80000b24:	00e78023          	sb	a4,0(a5)
80000b28:	fec42703          	lw	a4,-20(s0)
80000b2c:	fdc42783          	lw	a5,-36(s0)
80000b30:	fcf762e3          	bltu	a4,a5,80000af4 <memcpy+0x98>
80000b34:	f9c42783          	lw	a5,-100(s0)
80000b38:	2880006f          	j	80000dc0 <memcpy+0x364>
80000b3c:	fec42703          	lw	a4,-20(s0)
80000b40:	fd842783          	lw	a5,-40(s0)
80000b44:	00f777b3          	and	a5,a4,a5
80000b48:	00f037b3          	snez	a5,a5
80000b4c:	0ff7f793          	zext.b	a5,a5
80000b50:	04078663          	beqz	a5,80000b9c <memcpy+0x140>
80000b54:	0380006f          	j	80000b8c <memcpy+0x130>
80000b58:	fe842783          	lw	a5,-24(s0)
80000b5c:	0007c783          	lbu	a5,0(a5)
80000b60:	fcf40ba3          	sb	a5,-41(s0)
80000b64:	fec42783          	lw	a5,-20(s0)
80000b68:	00178793          	addi	a5,a5,1
80000b6c:	fef42623          	sw	a5,-20(s0)
80000b70:	fe842783          	lw	a5,-24(s0)
80000b74:	00178793          	addi	a5,a5,1
80000b78:	fef42423          	sw	a5,-24(s0)
80000b7c:	fec42783          	lw	a5,-20(s0)
80000b80:	fff78793          	addi	a5,a5,-1
80000b84:	fd744703          	lbu	a4,-41(s0)
80000b88:	00e78023          	sb	a4,0(a5)
80000b8c:	fec42703          	lw	a4,-20(s0)
80000b90:	fd842783          	lw	a5,-40(s0)
80000b94:	00f777b3          	and	a5,a4,a5
80000b98:	fc0790e3          	bnez	a5,80000b58 <memcpy+0xfc>
80000b9c:	fec42783          	lw	a5,-20(s0)
80000ba0:	fef42223          	sw	a5,-28(s0)
80000ba4:	fe842783          	lw	a5,-24(s0)
80000ba8:	fef42023          	sw	a5,-32(s0)
80000bac:	fd842783          	lw	a5,-40(s0)
80000bb0:	fff7c713          	not	a4,a5
80000bb4:	fdc42783          	lw	a5,-36(s0)
80000bb8:	00f777b3          	and	a5,a4,a5
80000bbc:	fcf42823          	sw	a5,-48(s0)
80000bc0:	fd042783          	lw	a5,-48(s0)
80000bc4:	fe078793          	addi	a5,a5,-32
80000bc8:	fe442703          	lw	a4,-28(s0)
80000bcc:	00f737b3          	sltu	a5,a4,a5
80000bd0:	0ff7f793          	zext.b	a5,a5
80000bd4:	1a078c63          	beqz	a5,80000d8c <memcpy+0x330>
80000bd8:	16c0006f          	j	80000d44 <memcpy+0x2e8>
80000bdc:	fe042783          	lw	a5,-32(s0)
80000be0:	00478713          	addi	a4,a5,4
80000be4:	fee42023          	sw	a4,-32(s0)
80000be8:	0007a783          	lw	a5,0(a5)
80000bec:	fcf42623          	sw	a5,-52(s0)
80000bf0:	fe042783          	lw	a5,-32(s0)
80000bf4:	00478713          	addi	a4,a5,4
80000bf8:	fee42023          	sw	a4,-32(s0)
80000bfc:	0007a783          	lw	a5,0(a5)
80000c00:	fcf42423          	sw	a5,-56(s0)
80000c04:	fe042783          	lw	a5,-32(s0)
80000c08:	00478713          	addi	a4,a5,4
80000c0c:	fee42023          	sw	a4,-32(s0)
80000c10:	0007a783          	lw	a5,0(a5)
80000c14:	fcf42223          	sw	a5,-60(s0)
80000c18:	fe042783          	lw	a5,-32(s0)
80000c1c:	00478713          	addi	a4,a5,4
80000c20:	fee42023          	sw	a4,-32(s0)
80000c24:	0007a783          	lw	a5,0(a5)
80000c28:	fcf42023          	sw	a5,-64(s0)
80000c2c:	fe042783          	lw	a5,-32(s0)
80000c30:	00478713          	addi	a4,a5,4
80000c34:	fee42023          	sw	a4,-32(s0)
80000c38:	0007a783          	lw	a5,0(a5)
80000c3c:	faf42e23          	sw	a5,-68(s0)
80000c40:	fe042783          	lw	a5,-32(s0)
80000c44:	00478713          	addi	a4,a5,4
80000c48:	fee42023          	sw	a4,-32(s0)
80000c4c:	0007a783          	lw	a5,0(a5)
80000c50:	faf42c23          	sw	a5,-72(s0)
80000c54:	fe042783          	lw	a5,-32(s0)
80000c58:	00478713          	addi	a4,a5,4
80000c5c:	fee42023          	sw	a4,-32(s0)
80000c60:	0007a783          	lw	a5,0(a5)
80000c64:	faf42a23          	sw	a5,-76(s0)
80000c68:	fe042783          	lw	a5,-32(s0)
80000c6c:	00478713          	addi	a4,a5,4
80000c70:	fee42023          	sw	a4,-32(s0)
80000c74:	0007a783          	lw	a5,0(a5)
80000c78:	faf42823          	sw	a5,-80(s0)
80000c7c:	fe042783          	lw	a5,-32(s0)
80000c80:	00478713          	addi	a4,a5,4
80000c84:	fee42023          	sw	a4,-32(s0)
80000c88:	0007a783          	lw	a5,0(a5)
80000c8c:	faf42623          	sw	a5,-84(s0)
80000c90:	fe442783          	lw	a5,-28(s0)
80000c94:	00478713          	addi	a4,a5,4
80000c98:	fee42223          	sw	a4,-28(s0)
80000c9c:	fcc42703          	lw	a4,-52(s0)
80000ca0:	00e7a023          	sw	a4,0(a5)
80000ca4:	fe442783          	lw	a5,-28(s0)
80000ca8:	00478713          	addi	a4,a5,4
80000cac:	fee42223          	sw	a4,-28(s0)
80000cb0:	fc842703          	lw	a4,-56(s0)
80000cb4:	00e7a023          	sw	a4,0(a5)
80000cb8:	fe442783          	lw	a5,-28(s0)
80000cbc:	00478713          	addi	a4,a5,4
80000cc0:	fee42223          	sw	a4,-28(s0)
80000cc4:	fc442703          	lw	a4,-60(s0)
80000cc8:	00e7a023          	sw	a4,0(a5)
80000ccc:	fe442783          	lw	a5,-28(s0)
80000cd0:	00478713          	addi	a4,a5,4
80000cd4:	fee42223          	sw	a4,-28(s0)
80000cd8:	fc042703          	lw	a4,-64(s0)
80000cdc:	00e7a023          	sw	a4,0(a5)
80000ce0:	fe442783          	lw	a5,-28(s0)
80000ce4:	00478713          	addi	a4,a5,4
80000ce8:	fee42223          	sw	a4,-28(s0)
80000cec:	fbc42703          	lw	a4,-68(s0)
80000cf0:	00e7a023          	sw	a4,0(a5)
80000cf4:	fe442783          	lw	a5,-28(s0)
80000cf8:	00478713          	addi	a4,a5,4
80000cfc:	fee42223          	sw	a4,-28(s0)
80000d00:	fb842703          	lw	a4,-72(s0)
80000d04:	00e7a023          	sw	a4,0(a5)
80000d08:	fe442783          	lw	a5,-28(s0)
80000d0c:	00478713          	addi	a4,a5,4
80000d10:	fee42223          	sw	a4,-28(s0)
80000d14:	fb442703          	lw	a4,-76(s0)
80000d18:	00e7a023          	sw	a4,0(a5)
80000d1c:	fe442783          	lw	a5,-28(s0)
80000d20:	00478713          	addi	a4,a5,4
80000d24:	fee42223          	sw	a4,-28(s0)
80000d28:	fb042703          	lw	a4,-80(s0)
80000d2c:	00e7a023          	sw	a4,0(a5)
80000d30:	fe442783          	lw	a5,-28(s0)
80000d34:	00478713          	addi	a4,a5,4
80000d38:	fee42223          	sw	a4,-28(s0)
80000d3c:	fac42703          	lw	a4,-84(s0)
80000d40:	00e7a023          	sw	a4,0(a5)
80000d44:	fd042783          	lw	a5,-48(s0)
80000d48:	fe078793          	addi	a5,a5,-32
80000d4c:	fe442703          	lw	a4,-28(s0)
80000d50:	e8f766e3          	bltu	a4,a5,80000bdc <memcpy+0x180>
80000d54:	0380006f          	j	80000d8c <memcpy+0x330>
80000d58:	fe042783          	lw	a5,-32(s0)
80000d5c:	0007a783          	lw	a5,0(a5)
80000d60:	faf42423          	sw	a5,-88(s0)
80000d64:	fe442783          	lw	a5,-28(s0)
80000d68:	00478793          	addi	a5,a5,4
80000d6c:	fef42223          	sw	a5,-28(s0)
80000d70:	fe042783          	lw	a5,-32(s0)
80000d74:	00478793          	addi	a5,a5,4
80000d78:	fef42023          	sw	a5,-32(s0)
80000d7c:	fe442783          	lw	a5,-28(s0)
80000d80:	ffc78793          	addi	a5,a5,-4
80000d84:	fa842703          	lw	a4,-88(s0)
80000d88:	00e7a023          	sw	a4,0(a5)
80000d8c:	fe442703          	lw	a4,-28(s0)
80000d90:	fd042783          	lw	a5,-48(s0)
80000d94:	fcf762e3          	bltu	a4,a5,80000d58 <memcpy+0x2fc>
80000d98:	fe442783          	lw	a5,-28(s0)
80000d9c:	fef42623          	sw	a5,-20(s0)
80000da0:	fe042783          	lw	a5,-32(s0)
80000da4:	fef42423          	sw	a5,-24(s0)
80000da8:	fec42703          	lw	a4,-20(s0)
80000dac:	fdc42783          	lw	a5,-36(s0)
80000db0:	00f737b3          	sltu	a5,a4,a5
80000db4:	0ff7f793          	zext.b	a5,a5
80000db8:	d20790e3          	bnez	a5,80000ad8 <memcpy+0x7c>
80000dbc:	f9c42783          	lw	a5,-100(s0)
80000dc0:	00078513          	mv	a0,a5
80000dc4:	06c12403          	lw	s0,108(sp)
80000dc8:	07010113          	addi	sp,sp,112
80000dcc:	00008067          	ret

80000dd0 <memset>:
80000dd0:	00f00313          	li	t1,15
80000dd4:	00050713          	mv	a4,a0
80000dd8:	02c37e63          	bgeu	t1,a2,80000e14 <memset+0x44>
80000ddc:	00f77793          	andi	a5,a4,15
80000de0:	0a079063          	bnez	a5,80000e80 <memset+0xb0>
80000de4:	08059263          	bnez	a1,80000e68 <memset+0x98>
80000de8:	ff067693          	andi	a3,a2,-16
80000dec:	00f67613          	andi	a2,a2,15
80000df0:	00e686b3          	add	a3,a3,a4
80000df4:	00b72023          	sw	a1,0(a4) # 1000000 <CONFIG_SRAM_SIZE+0xf00000>
80000df8:	00b72223          	sw	a1,4(a4)
80000dfc:	00b72423          	sw	a1,8(a4)
80000e00:	00b72623          	sw	a1,12(a4)
80000e04:	01070713          	addi	a4,a4,16
80000e08:	fed766e3          	bltu	a4,a3,80000df4 <memset+0x24>
80000e0c:	00061463          	bnez	a2,80000e14 <memset+0x44>
80000e10:	00008067          	ret
80000e14:	40c306b3          	sub	a3,t1,a2
80000e18:	00269693          	slli	a3,a3,0x2
80000e1c:	00000297          	auipc	t0,0x0
80000e20:	005686b3          	add	a3,a3,t0
80000e24:	00c68067          	jr	12(a3) # 1000c <__rom_region_size+0x62b8>
80000e28:	00b70723          	sb	a1,14(a4)
80000e2c:	00b706a3          	sb	a1,13(a4)
80000e30:	00b70623          	sb	a1,12(a4)
80000e34:	00b705a3          	sb	a1,11(a4)
80000e38:	00b70523          	sb	a1,10(a4)
80000e3c:	00b704a3          	sb	a1,9(a4)
80000e40:	00b70423          	sb	a1,8(a4)
80000e44:	00b703a3          	sb	a1,7(a4)
80000e48:	00b70323          	sb	a1,6(a4)
80000e4c:	00b702a3          	sb	a1,5(a4)
80000e50:	00b70223          	sb	a1,4(a4)
80000e54:	00b701a3          	sb	a1,3(a4)
80000e58:	00b70123          	sb	a1,2(a4)
80000e5c:	00b700a3          	sb	a1,1(a4)
80000e60:	00b70023          	sb	a1,0(a4)
80000e64:	00008067          	ret
80000e68:	0ff5f593          	zext.b	a1,a1
80000e6c:	00859693          	slli	a3,a1,0x8
80000e70:	00d5e5b3          	or	a1,a1,a3
80000e74:	01059693          	slli	a3,a1,0x10
80000e78:	00d5e5b3          	or	a1,a1,a3
80000e7c:	f6dff06f          	j	80000de8 <memset+0x18>
80000e80:	00279693          	slli	a3,a5,0x2
80000e84:	00000297          	auipc	t0,0x0
80000e88:	005686b3          	add	a3,a3,t0
80000e8c:	00008293          	mv	t0,ra
80000e90:	fa0680e7          	jalr	-96(a3)
80000e94:	00028093          	mv	ra,t0
80000e98:	ff078793          	addi	a5,a5,-16
80000e9c:	40f70733          	sub	a4,a4,a5
80000ea0:	00f60633          	add	a2,a2,a5
80000ea4:	f6c378e3          	bgeu	t1,a2,80000e14 <memset+0x44>
80000ea8:	f3dff06f          	j	80000de4 <memset+0x14>

80000eac <_free_r>:
80000eac:	00308013          	addi	zero,ra,3
80000eb0:	14058263          	beqz	a1,80000ff4 <_free_r+0x148>
80000eb4:	ffc5a783          	lw	a5,-4(a1)
80000eb8:	ff010113          	addi	sp,sp,-16
80000ebc:	00812423          	sw	s0,8(sp)
80000ec0:	00912223          	sw	s1,4(sp)
80000ec4:	00112623          	sw	ra,12(sp)
80000ec8:	00050493          	mv	s1,a0
80000ecc:	ffc58413          	addi	s0,a1,-4
80000ed0:	0807c463          	bltz	a5,80000f58 <_free_r+0xac>
80000ed4:	00048513          	mv	a0,s1
80000ed8:	7e5000ef          	jal	ra,80001ebc <__malloc_lock>
80000edc:	8000a737          	lui	a4,0x8000a
80000ee0:	d5c72783          	lw	a5,-676(a4) # 80009d5c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d5d>
80000ee4:	10078a63          	beqz	a5,80000ff8 <_free_r+0x14c>
80000ee8:	02f47a63          	bgeu	s0,a5,80000f1c <_free_r+0x70>
80000eec:	00042683          	lw	a3,0(s0)
80000ef0:	00d40633          	add	a2,s0,a3
80000ef4:	0ac78e63          	beq	a5,a2,80000fb0 <_free_r+0x104>
80000ef8:	00f42223          	sw	a5,4(s0)
80000efc:	00048513          	mv	a0,s1
80000f00:	d4872e23          	sw	s0,-676(a4)
80000f04:	00812403          	lw	s0,8(sp)
80000f08:	00c12083          	lw	ra,12(sp)
80000f0c:	00412483          	lw	s1,4(sp)
80000f10:	01010113          	addi	sp,sp,16
80000f14:	7b50006f          	j	80001ec8 <__malloc_unlock>
80000f18:	04f46463          	bltu	s0,a5,80000f60 <_free_r+0xb4>
80000f1c:	00078713          	mv	a4,a5
80000f20:	0047a783          	lw	a5,4(a5)
80000f24:	fe079ae3          	bnez	a5,80000f18 <_free_r+0x6c>
80000f28:	00072603          	lw	a2,0(a4)
80000f2c:	00c706b3          	add	a3,a4,a2
80000f30:	06d40663          	beq	s0,a3,80000f9c <_free_r+0xf0>
80000f34:	0cd46a63          	bltu	s0,a3,80001008 <_free_r+0x15c>
80000f38:	00f42223          	sw	a5,4(s0)
80000f3c:	00872223          	sw	s0,4(a4)
80000f40:	00048513          	mv	a0,s1
80000f44:	00812403          	lw	s0,8(sp)
80000f48:	00c12083          	lw	ra,12(sp)
80000f4c:	00412483          	lw	s1,4(sp)
80000f50:	01010113          	addi	sp,sp,16
80000f54:	7750006f          	j	80001ec8 <__malloc_unlock>
80000f58:	00f40433          	add	s0,s0,a5
80000f5c:	f79ff06f          	j	80000ed4 <_free_r+0x28>
80000f60:	00072683          	lw	a3,0(a4)
80000f64:	00d70633          	add	a2,a4,a3
80000f68:	04860e63          	beq	a2,s0,80000fc4 <_free_r+0x118>
80000f6c:	08c46e63          	bltu	s0,a2,80001008 <_free_r+0x15c>
80000f70:	00042683          	lw	a3,0(s0)
80000f74:	00d40633          	add	a2,s0,a3
80000f78:	fcc790e3          	bne	a5,a2,80000f38 <_free_r+0x8c>
80000f7c:	0007a603          	lw	a2,0(a5)
80000f80:	0047a583          	lw	a1,4(a5)
80000f84:	00048513          	mv	a0,s1
80000f88:	00d607b3          	add	a5,a2,a3
80000f8c:	00f42023          	sw	a5,0(s0)
80000f90:	00b42223          	sw	a1,4(s0)
80000f94:	00872223          	sw	s0,4(a4)
80000f98:	fadff06f          	j	80000f44 <_free_r+0x98>
80000f9c:	00042783          	lw	a5,0(s0)
80000fa0:	00048513          	mv	a0,s1
80000fa4:	00c787b3          	add	a5,a5,a2
80000fa8:	00f72023          	sw	a5,0(a4)
80000fac:	f99ff06f          	j	80000f44 <_free_r+0x98>
80000fb0:	0007a603          	lw	a2,0(a5)
80000fb4:	0047a783          	lw	a5,4(a5)
80000fb8:	00d606b3          	add	a3,a2,a3
80000fbc:	00d42023          	sw	a3,0(s0)
80000fc0:	f39ff06f          	j	80000ef8 <_free_r+0x4c>
80000fc4:	00042603          	lw	a2,0(s0)
80000fc8:	00c686b3          	add	a3,a3,a2
80000fcc:	00d72023          	sw	a3,0(a4)
80000fd0:	00d70633          	add	a2,a4,a3
80000fd4:	f6c796e3          	bne	a5,a2,80000f40 <_free_r+0x94>
80000fd8:	0007a603          	lw	a2,0(a5)
80000fdc:	0047a583          	lw	a1,4(a5)
80000fe0:	00048513          	mv	a0,s1
80000fe4:	00d607b3          	add	a5,a2,a3
80000fe8:	00f72023          	sw	a5,0(a4)
80000fec:	00b72223          	sw	a1,4(a4)
80000ff0:	f55ff06f          	j	80000f44 <_free_r+0x98>
80000ff4:	00008067          	ret
80000ff8:	00042223          	sw	zero,4(s0)
80000ffc:	00048513          	mv	a0,s1
80001000:	d4872e23          	sw	s0,-676(a4)
80001004:	f01ff06f          	j	80000f04 <_free_r+0x58>
80001008:	00c00793          	li	a5,12
8000100c:	00f4a023          	sw	a5,0(s1)
80001010:	00048513          	mv	a0,s1
80001014:	f31ff06f          	j	80000f44 <_free_r+0x98>

80001018 <_malloc_r>:
80001018:	00308013          	addi	zero,ra,3
8000101c:	fe010113          	addi	sp,sp,-32
80001020:	00912a23          	sw	s1,20(sp)
80001024:	00358493          	addi	s1,a1,3
80001028:	ffc4f493          	andi	s1,s1,-4
8000102c:	01212823          	sw	s2,16(sp)
80001030:	00112e23          	sw	ra,28(sp)
80001034:	00812c23          	sw	s0,24(sp)
80001038:	01312623          	sw	s3,12(sp)
8000103c:	00848493          	addi	s1,s1,8
80001040:	00c00793          	li	a5,12
80001044:	00050913          	mv	s2,a0
80001048:	04f4fe63          	bgeu	s1,a5,800010a4 <_malloc_r+0x8c>
8000104c:	00c00493          	li	s1,12
80001050:	04b4ec63          	bltu	s1,a1,800010a8 <_malloc_r+0x90>
80001054:	00090513          	mv	a0,s2
80001058:	665000ef          	jal	ra,80001ebc <__malloc_lock>
8000105c:	8000a6b7          	lui	a3,0x8000a
80001060:	d5c6a703          	lw	a4,-676(a3) # 80009d5c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d5d>
80001064:	04070a63          	beqz	a4,800010b8 <_malloc_r+0xa0>
80001068:	00070413          	mv	s0,a4
8000106c:	0140006f          	j	80001080 <_malloc_r+0x68>
80001070:	00442783          	lw	a5,4(s0)
80001074:	00040713          	mv	a4,s0
80001078:	04078063          	beqz	a5,800010b8 <_malloc_r+0xa0>
8000107c:	00078413          	mv	s0,a5
80001080:	00042783          	lw	a5,0(s0)
80001084:	409787b3          	sub	a5,a5,s1
80001088:	fe07c4e3          	bltz	a5,80001070 <_malloc_r+0x58>
8000108c:	00b00613          	li	a2,11
80001090:	0af66663          	bltu	a2,a5,8000113c <_malloc_r+0x124>
80001094:	00442783          	lw	a5,4(s0)
80001098:	0ee40063          	beq	s0,a4,80001178 <_malloc_r+0x160>
8000109c:	00f72223          	sw	a5,4(a4)
800010a0:	0580006f          	j	800010f8 <_malloc_r+0xe0>
800010a4:	fa04d6e3          	bgez	s1,80001050 <_malloc_r+0x38>
800010a8:	00c00793          	li	a5,12
800010ac:	00f92023          	sw	a5,0(s2)
800010b0:	00000513          	li	a0,0
800010b4:	06c0006f          	j	80001120 <_malloc_r+0x108>
800010b8:	8000a437          	lui	s0,0x8000a
800010bc:	d5842783          	lw	a5,-680(s0) # 80009d58 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d59>
800010c0:	0a078263          	beqz	a5,80001164 <_malloc_r+0x14c>
800010c4:	00048593          	mv	a1,s1
800010c8:	00090513          	mv	a0,s2
800010cc:	0b4000ef          	jal	ra,80001180 <_sbrk_r>
800010d0:	fff00993          	li	s3,-1
800010d4:	07350c63          	beq	a0,s3,8000114c <_malloc_r+0x134>
800010d8:	00350413          	addi	s0,a0,3
800010dc:	ffc47413          	andi	s0,s0,-4
800010e0:	00850a63          	beq	a0,s0,800010f4 <_malloc_r+0xdc>
800010e4:	40a405b3          	sub	a1,s0,a0
800010e8:	00090513          	mv	a0,s2
800010ec:	094000ef          	jal	ra,80001180 <_sbrk_r>
800010f0:	05350e63          	beq	a0,s3,8000114c <_malloc_r+0x134>
800010f4:	00942023          	sw	s1,0(s0)
800010f8:	00090513          	mv	a0,s2
800010fc:	5cd000ef          	jal	ra,80001ec8 <__malloc_unlock>
80001100:	00b40513          	addi	a0,s0,11
80001104:	00440793          	addi	a5,s0,4
80001108:	ff857513          	andi	a0,a0,-8
8000110c:	40f50733          	sub	a4,a0,a5
80001110:	00f50863          	beq	a0,a5,80001120 <_malloc_r+0x108>
80001114:	00e40433          	add	s0,s0,a4
80001118:	40a787b3          	sub	a5,a5,a0
8000111c:	00f42023          	sw	a5,0(s0)
80001120:	01c12083          	lw	ra,28(sp)
80001124:	01812403          	lw	s0,24(sp)
80001128:	01412483          	lw	s1,20(sp)
8000112c:	01012903          	lw	s2,16(sp)
80001130:	00c12983          	lw	s3,12(sp)
80001134:	02010113          	addi	sp,sp,32
80001138:	00008067          	ret
8000113c:	00f42023          	sw	a5,0(s0)
80001140:	00f40433          	add	s0,s0,a5
80001144:	00942023          	sw	s1,0(s0)
80001148:	fb1ff06f          	j	800010f8 <_malloc_r+0xe0>
8000114c:	00c00793          	li	a5,12
80001150:	00090513          	mv	a0,s2
80001154:	00f92023          	sw	a5,0(s2)
80001158:	571000ef          	jal	ra,80001ec8 <__malloc_unlock>
8000115c:	00000513          	li	a0,0
80001160:	fc1ff06f          	j	80001120 <_malloc_r+0x108>
80001164:	00000593          	li	a1,0
80001168:	00090513          	mv	a0,s2
8000116c:	014000ef          	jal	ra,80001180 <_sbrk_r>
80001170:	d4a42c23          	sw	a0,-680(s0)
80001174:	f51ff06f          	j	800010c4 <_malloc_r+0xac>
80001178:	d4f6ae23          	sw	a5,-676(a3)
8000117c:	f7dff06f          	j	800010f8 <_malloc_r+0xe0>

80001180 <_sbrk_r>:
80001180:	00308013          	addi	zero,ra,3
80001184:	ff010113          	addi	sp,sp,-16
80001188:	00812423          	sw	s0,8(sp)
8000118c:	00912223          	sw	s1,4(sp)
80001190:	00050413          	mv	s0,a0
80001194:	8000a4b7          	lui	s1,0x8000a
80001198:	00058513          	mv	a0,a1
8000119c:	00112623          	sw	ra,12(sp)
800011a0:	d604a023          	sw	zero,-672(s1) # 80009d60 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d61>
800011a4:	739040ef          	jal	ra,800060dc <_sbrk>
800011a8:	fff00793          	li	a5,-1
800011ac:	00f50c63          	beq	a0,a5,800011c4 <_sbrk_r+0x44>
800011b0:	00c12083          	lw	ra,12(sp)
800011b4:	00812403          	lw	s0,8(sp)
800011b8:	00412483          	lw	s1,4(sp)
800011bc:	01010113          	addi	sp,sp,16
800011c0:	00008067          	ret
800011c4:	d604a783          	lw	a5,-672(s1)
800011c8:	fe0784e3          	beqz	a5,800011b0 <_sbrk_r+0x30>
800011cc:	00c12083          	lw	ra,12(sp)
800011d0:	00f42023          	sw	a5,0(s0)
800011d4:	00812403          	lw	s0,8(sp)
800011d8:	00412483          	lw	s1,4(sp)
800011dc:	01010113          	addi	sp,sp,16
800011e0:	00008067          	ret

800011e4 <setjmp>:
800011e4:	00152023          	sw	ra,0(a0)
800011e8:	00852223          	sw	s0,4(a0)
800011ec:	00952423          	sw	s1,8(a0)
800011f0:	01252623          	sw	s2,12(a0)
800011f4:	01352823          	sw	s3,16(a0)
800011f8:	01452a23          	sw	s4,20(a0)
800011fc:	01552c23          	sw	s5,24(a0)
80001200:	01652e23          	sw	s6,28(a0)
80001204:	03752023          	sw	s7,32(a0)
80001208:	03852223          	sw	s8,36(a0)
8000120c:	03952423          	sw	s9,40(a0)
80001210:	03a52623          	sw	s10,44(a0)
80001214:	03b52823          	sw	s11,48(a0)
80001218:	02252a23          	sw	sp,52(a0)
8000121c:	00000513          	li	a0,0
80001220:	00008067          	ret

80001224 <longjmp>:
80001224:	00052083          	lw	ra,0(a0)
80001228:	00452403          	lw	s0,4(a0)
8000122c:	00852483          	lw	s1,8(a0)
80001230:	00c52903          	lw	s2,12(a0)
80001234:	01052983          	lw	s3,16(a0)
80001238:	01452a03          	lw	s4,20(a0)
8000123c:	01852a83          	lw	s5,24(a0)
80001240:	01c52b03          	lw	s6,28(a0)
80001244:	02052b83          	lw	s7,32(a0)
80001248:	02452c03          	lw	s8,36(a0)
8000124c:	02852c83          	lw	s9,40(a0)
80001250:	02c52d03          	lw	s10,44(a0)
80001254:	03052d83          	lw	s11,48(a0)
80001258:	03452103          	lw	sp,52(a0)
8000125c:	0015b513          	seqz	a0,a1
80001260:	00b50533          	add	a0,a0,a1
80001264:	00008067          	ret

80001268 <_snprintf_r>:
80001268:	00308013          	addi	zero,ra,3
8000126c:	f7010113          	addi	sp,sp,-144
80001270:	06812c23          	sw	s0,120(sp)
80001274:	06112e23          	sw	ra,124(sp)
80001278:	06912a23          	sw	s1,116(sp)
8000127c:	08e12023          	sw	a4,128(sp)
80001280:	08f12223          	sw	a5,132(sp)
80001284:	09012423          	sw	a6,136(sp)
80001288:	09112623          	sw	a7,140(sp)
8000128c:	00060313          	mv	t1,a2
80001290:	00050413          	mv	s0,a0
80001294:	0a064263          	bltz	a2,80001338 <_snprintf_r+0xd0>
80001298:	20800793          	li	a5,520
8000129c:	00f11a23          	sh	a5,20(sp)
800012a0:	00b12423          	sw	a1,8(sp)
800012a4:	00b12c23          	sw	a1,24(sp)
800012a8:	00068613          	mv	a2,a3
800012ac:	08010693          	addi	a3,sp,128
800012b0:	04030663          	beqz	t1,800012fc <_snprintf_r+0x94>
800012b4:	fff30313          	addi	t1,t1,-1
800012b8:	fff00493          	li	s1,-1
800012bc:	00810593          	addi	a1,sp,8
800012c0:	00612823          	sw	t1,16(sp)
800012c4:	00612e23          	sw	t1,28(sp)
800012c8:	00911b23          	sh	s1,22(sp)
800012cc:	00d12223          	sw	a3,4(sp)
800012d0:	74d000ef          	jal	ra,8000221c <_svfiprintf_r>
800012d4:	00955663          	bge	a0,s1,800012e0 <_snprintf_r+0x78>
800012d8:	08b00793          	li	a5,139
800012dc:	00f42023          	sw	a5,0(s0)
800012e0:	00812783          	lw	a5,8(sp)
800012e4:	00078023          	sb	zero,0(a5)
800012e8:	07c12083          	lw	ra,124(sp)
800012ec:	07812403          	lw	s0,120(sp)
800012f0:	07412483          	lw	s1,116(sp)
800012f4:	09010113          	addi	sp,sp,144
800012f8:	00008067          	ret
800012fc:	fff00493          	li	s1,-1
80001300:	00810593          	addi	a1,sp,8
80001304:	00012823          	sw	zero,16(sp)
80001308:	00012e23          	sw	zero,28(sp)
8000130c:	00911b23          	sh	s1,22(sp)
80001310:	00d12223          	sw	a3,4(sp)
80001314:	709000ef          	jal	ra,8000221c <_svfiprintf_r>
80001318:	00955663          	bge	a0,s1,80001324 <_snprintf_r+0xbc>
8000131c:	08b00793          	li	a5,139
80001320:	00f42023          	sw	a5,0(s0)
80001324:	07c12083          	lw	ra,124(sp)
80001328:	07812403          	lw	s0,120(sp)
8000132c:	07412483          	lw	s1,116(sp)
80001330:	09010113          	addi	sp,sp,144
80001334:	00008067          	ret
80001338:	08b00793          	li	a5,139
8000133c:	00f52023          	sw	a5,0(a0)
80001340:	fff00513          	li	a0,-1
80001344:	fe1ff06f          	j	80001324 <_snprintf_r+0xbc>

80001348 <snprintf>:
80001348:	00308013          	addi	zero,ra,3
8000134c:	f6010113          	addi	sp,sp,-160
80001350:	06812c23          	sw	s0,120(sp)
80001354:	08f12a23          	sw	a5,148(sp)
80001358:	06112e23          	sw	ra,124(sp)
8000135c:	06912a23          	sw	s1,116(sp)
80001360:	08d12623          	sw	a3,140(sp)
80001364:	08e12823          	sw	a4,144(sp)
80001368:	09012c23          	sw	a6,152(sp)
8000136c:	09112e23          	sw	a7,156(sp)
80001370:	82c1a403          	lw	s0,-2004(gp) # 8000cf6c <_impure_ptr>
80001374:	0a05c463          	bltz	a1,8000141c <snprintf+0xd4>
80001378:	20800793          	li	a5,520
8000137c:	00f11a23          	sh	a5,20(sp)
80001380:	00a12423          	sw	a0,8(sp)
80001384:	00a12c23          	sw	a0,24(sp)
80001388:	08c10693          	addi	a3,sp,140
8000138c:	04058863          	beqz	a1,800013dc <snprintf+0x94>
80001390:	fff58793          	addi	a5,a1,-1
80001394:	fff00493          	li	s1,-1
80001398:	00810593          	addi	a1,sp,8
8000139c:	00040513          	mv	a0,s0
800013a0:	00f12823          	sw	a5,16(sp)
800013a4:	00f12e23          	sw	a5,28(sp)
800013a8:	00911b23          	sh	s1,22(sp)
800013ac:	00d12223          	sw	a3,4(sp)
800013b0:	66d000ef          	jal	ra,8000221c <_svfiprintf_r>
800013b4:	00955663          	bge	a0,s1,800013c0 <snprintf+0x78>
800013b8:	08b00793          	li	a5,139
800013bc:	00f42023          	sw	a5,0(s0)
800013c0:	00812783          	lw	a5,8(sp)
800013c4:	00078023          	sb	zero,0(a5)
800013c8:	07c12083          	lw	ra,124(sp)
800013cc:	07812403          	lw	s0,120(sp)
800013d0:	07412483          	lw	s1,116(sp)
800013d4:	0a010113          	addi	sp,sp,160
800013d8:	00008067          	ret
800013dc:	fff00493          	li	s1,-1
800013e0:	00810593          	addi	a1,sp,8
800013e4:	00040513          	mv	a0,s0
800013e8:	00012823          	sw	zero,16(sp)
800013ec:	00012e23          	sw	zero,28(sp)
800013f0:	00911b23          	sh	s1,22(sp)
800013f4:	00d12223          	sw	a3,4(sp)
800013f8:	625000ef          	jal	ra,8000221c <_svfiprintf_r>
800013fc:	00955663          	bge	a0,s1,80001408 <snprintf+0xc0>
80001400:	08b00793          	li	a5,139
80001404:	00f42023          	sw	a5,0(s0)
80001408:	07c12083          	lw	ra,124(sp)
8000140c:	07812403          	lw	s0,120(sp)
80001410:	07412483          	lw	s1,116(sp)
80001414:	0a010113          	addi	sp,sp,160
80001418:	00008067          	ret
8000141c:	08b00793          	li	a5,139
80001420:	00f42023          	sw	a5,0(s0)
80001424:	fff00513          	li	a0,-1
80001428:	fe1ff06f          	j	80001408 <snprintf+0xc0>

8000142c <__strcat_chk>:
8000142c:	00308013          	addi	zero,ra,3
80001430:	00054783          	lbu	a5,0(a0)
80001434:	06078663          	beqz	a5,800014a0 <__strcat_chk+0x74>
80001438:	fff60693          	addi	a3,a2,-1
8000143c:	06060c63          	beqz	a2,800014b4 <__strcat_chk+0x88>
80001440:	00050793          	mv	a5,a0
80001444:	fff00613          	li	a2,-1
80001448:	00c0006f          	j	80001454 <__strcat_chk+0x28>
8000144c:	fff68693          	addi	a3,a3,-1
80001450:	06c68263          	beq	a3,a2,800014b4 <__strcat_chk+0x88>
80001454:	0017c703          	lbu	a4,1(a5)
80001458:	00178793          	addi	a5,a5,1
8000145c:	fe0718e3          	bnez	a4,8000144c <__strcat_chk+0x20>
80001460:	0005c703          	lbu	a4,0(a1)
80001464:	04070463          	beqz	a4,800014ac <__strcat_chk+0x80>
80001468:	fff68613          	addi	a2,a3,-1
8000146c:	04068463          	beqz	a3,800014b4 <__strcat_chk+0x88>
80001470:	fff00693          	li	a3,-1
80001474:	00c0006f          	j	80001480 <__strcat_chk+0x54>
80001478:	fff60613          	addi	a2,a2,-1
8000147c:	02d60c63          	beq	a2,a3,800014b4 <__strcat_chk+0x88>
80001480:	00158593          	addi	a1,a1,1
80001484:	00e78023          	sb	a4,0(a5)
80001488:	0005c703          	lbu	a4,0(a1)
8000148c:	00178793          	addi	a5,a5,1
80001490:	fe0714e3          	bnez	a4,80001478 <__strcat_chk+0x4c>
80001494:	02060063          	beqz	a2,800014b4 <__strcat_chk+0x88>
80001498:	00078023          	sb	zero,0(a5)
8000149c:	00008067          	ret
800014a0:	00050793          	mv	a5,a0
800014a4:	00060693          	mv	a3,a2
800014a8:	fb9ff06f          	j	80001460 <__strcat_chk+0x34>
800014ac:	00068613          	mv	a2,a3
800014b0:	fe5ff06f          	j	80001494 <__strcat_chk+0x68>
800014b4:	ff010113          	addi	sp,sp,-16
800014b8:	00112623          	sw	ra,12(sp)
800014bc:	49d040ef          	jal	ra,80006158 <__chk_fail>

800014c0 <strcat>:
800014c0:	00308013          	addi	zero,ra,3
800014c4:	ff010113          	addi	sp,sp,-16
800014c8:	00812423          	sw	s0,8(sp)
800014cc:	00112623          	sw	ra,12(sp)
800014d0:	00357793          	andi	a5,a0,3
800014d4:	00050413          	mv	s0,a0
800014d8:	04079463          	bnez	a5,80001520 <strcat+0x60>
800014dc:	00052703          	lw	a4,0(a0)
800014e0:	feff0637          	lui	a2,0xfeff0
800014e4:	eff60613          	addi	a2,a2,-257 # fefefeff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfefeff00>
800014e8:	00c707b3          	add	a5,a4,a2
800014ec:	808086b7          	lui	a3,0x80808
800014f0:	fff74713          	not	a4,a4
800014f4:	00e7f7b3          	and	a5,a5,a4
800014f8:	08068693          	addi	a3,a3,128 # 80808080 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80808081>
800014fc:	00d7f7b3          	and	a5,a5,a3
80001500:	02079063          	bnez	a5,80001520 <strcat+0x60>
80001504:	00452703          	lw	a4,4(a0)
80001508:	00450513          	addi	a0,a0,4
8000150c:	00c707b3          	add	a5,a4,a2
80001510:	fff74713          	not	a4,a4
80001514:	00e7f7b3          	and	a5,a5,a4
80001518:	00d7f7b3          	and	a5,a5,a3
8000151c:	fe0784e3          	beqz	a5,80001504 <strcat+0x44>
80001520:	00054783          	lbu	a5,0(a0)
80001524:	00078863          	beqz	a5,80001534 <strcat+0x74>
80001528:	00154783          	lbu	a5,1(a0)
8000152c:	00150513          	addi	a0,a0,1
80001530:	fe079ce3          	bnez	a5,80001528 <strcat+0x68>
80001534:	0e0000ef          	jal	ra,80001614 <strcpy>
80001538:	00c12083          	lw	ra,12(sp)
8000153c:	00040513          	mv	a0,s0
80001540:	00812403          	lw	s0,8(sp)
80001544:	01010113          	addi	sp,sp,16
80001548:	00008067          	ret

8000154c <__strcpy_chk>:
8000154c:	00308013          	addi	zero,ra,3
80001550:	ff010113          	addi	sp,sp,-16
80001554:	00912223          	sw	s1,4(sp)
80001558:	00050493          	mv	s1,a0
8000155c:	00058513          	mv	a0,a1
80001560:	00812423          	sw	s0,8(sp)
80001564:	01212023          	sw	s2,0(sp)
80001568:	00112623          	sw	ra,12(sp)
8000156c:	00060913          	mv	s2,a2
80001570:	00058413          	mv	s0,a1
80001574:	2b4000ef          	jal	ra,80001828 <strlen>
80001578:	00150613          	addi	a2,a0,1
8000157c:	02c96e63          	bltu	s2,a2,800015b8 <__strcpy_chk+0x6c>
80001580:	0084e863          	bltu	s1,s0,80001590 <__strcpy_chk+0x44>
80001584:	00c407b3          	add	a5,s0,a2
80001588:	02f4e863          	bltu	s1,a5,800015b8 <__strcpy_chk+0x6c>
8000158c:	00941663          	bne	s0,s1,80001598 <__strcpy_chk+0x4c>
80001590:	00c487b3          	add	a5,s1,a2
80001594:	02f46263          	bltu	s0,a5,800015b8 <__strcpy_chk+0x6c>
80001598:	00040593          	mv	a1,s0
8000159c:	00812403          	lw	s0,8(sp)
800015a0:	00c12083          	lw	ra,12(sp)
800015a4:	00012903          	lw	s2,0(sp)
800015a8:	00048513          	mv	a0,s1
800015ac:	00412483          	lw	s1,4(sp)
800015b0:	01010113          	addi	sp,sp,16
800015b4:	ca8ff06f          	j	80000a5c <memcpy>
800015b8:	3a1040ef          	jal	ra,80006158 <__chk_fail>

800015bc <__libc_detect_null>:
800015bc:	00308013          	addi	zero,ra,3
800015c0:	fd010113          	addi	sp,sp,-48
800015c4:	02812623          	sw	s0,44(sp)
800015c8:	03010413          	addi	s0,sp,48
800015cc:	fca42e23          	sw	a0,-36(s0)
800015d0:	7f7f87b7          	lui	a5,0x7f7f8
800015d4:	f7f78793          	addi	a5,a5,-129 # 7f7f7f7f <CONFIG_SRAM_SIZE+0x7f6f7f7f>
800015d8:	fef42623          	sw	a5,-20(s0)
800015dc:	fdc42703          	lw	a4,-36(s0)
800015e0:	fec42783          	lw	a5,-20(s0)
800015e4:	00f77733          	and	a4,a4,a5
800015e8:	fec42783          	lw	a5,-20(s0)
800015ec:	00f70733          	add	a4,a4,a5
800015f0:	fdc42783          	lw	a5,-36(s0)
800015f4:	00f76733          	or	a4,a4,a5
800015f8:	fec42783          	lw	a5,-20(s0)
800015fc:	00f767b3          	or	a5,a4,a5
80001600:	fff7c793          	not	a5,a5
80001604:	00078513          	mv	a0,a5
80001608:	02c12403          	lw	s0,44(sp)
8000160c:	03010113          	addi	sp,sp,48
80001610:	00008067          	ret

80001614 <strcpy>:
80001614:	00308013          	addi	zero,ra,3
80001618:	fc010113          	addi	sp,sp,-64
8000161c:	02112e23          	sw	ra,60(sp)
80001620:	02812c23          	sw	s0,56(sp)
80001624:	04010413          	addi	s0,sp,64
80001628:	fca42623          	sw	a0,-52(s0)
8000162c:	fcb42423          	sw	a1,-56(s0)
80001630:	fcc42783          	lw	a5,-52(s0)
80001634:	fef42623          	sw	a5,-20(s0)
80001638:	fcc42703          	lw	a4,-52(s0)
8000163c:	fc842783          	lw	a5,-56(s0)
80001640:	00f767b3          	or	a5,a4,a5
80001644:	0037f793          	andi	a5,a5,3
80001648:	fef42023          	sw	a5,-32(s0)
8000164c:	fe042783          	lw	a5,-32(s0)
80001650:	0017b793          	seqz	a5,a5
80001654:	0ff7f793          	zext.b	a5,a5
80001658:	12078263          	beqz	a5,8000177c <strcpy+0x168>
8000165c:	fcc42783          	lw	a5,-52(s0)
80001660:	fef42423          	sw	a5,-24(s0)
80001664:	fc842783          	lw	a5,-56(s0)
80001668:	fef42223          	sw	a5,-28(s0)
8000166c:	0240006f          	j	80001690 <strcpy+0x7c>
80001670:	fe442703          	lw	a4,-28(s0)
80001674:	00470793          	addi	a5,a4,4
80001678:	fef42223          	sw	a5,-28(s0)
8000167c:	fe842783          	lw	a5,-24(s0)
80001680:	00478693          	addi	a3,a5,4
80001684:	fed42423          	sw	a3,-24(s0)
80001688:	00072703          	lw	a4,0(a4)
8000168c:	00e7a023          	sw	a4,0(a5)
80001690:	fe442783          	lw	a5,-28(s0)
80001694:	0007a783          	lw	a5,0(a5)
80001698:	00078513          	mv	a0,a5
8000169c:	f21ff0ef          	jal	ra,800015bc <__libc_detect_null>
800016a0:	00050793          	mv	a5,a0
800016a4:	fc0786e3          	beqz	a5,80001670 <strcpy+0x5c>
800016a8:	fe842783          	lw	a5,-24(s0)
800016ac:	fcf42623          	sw	a5,-52(s0)
800016b0:	fe442783          	lw	a5,-28(s0)
800016b4:	fcf42423          	sw	a5,-56(s0)
800016b8:	fc842783          	lw	a5,-56(s0)
800016bc:	0007c783          	lbu	a5,0(a5)
800016c0:	fcf40f23          	sb	a5,-34(s0)
800016c4:	fc842783          	lw	a5,-56(s0)
800016c8:	00178793          	addi	a5,a5,1
800016cc:	0007c783          	lbu	a5,0(a5)
800016d0:	fcf40ea3          	sb	a5,-35(s0)
800016d4:	fc842783          	lw	a5,-56(s0)
800016d8:	00278793          	addi	a5,a5,2
800016dc:	0007c783          	lbu	a5,0(a5)
800016e0:	fcf40e23          	sb	a5,-36(s0)
800016e4:	fcc42783          	lw	a5,-52(s0)
800016e8:	00178713          	addi	a4,a5,1
800016ec:	fce42623          	sw	a4,-52(s0)
800016f0:	fde44703          	lbu	a4,-34(s0)
800016f4:	00e78023          	sb	a4,0(a5)
800016f8:	0007c783          	lbu	a5,0(a5)
800016fc:	00079663          	bnez	a5,80001708 <strcpy+0xf4>
80001700:	fec42783          	lw	a5,-20(s0)
80001704:	0b80006f          	j	800017bc <strcpy+0x1a8>
80001708:	fcc42783          	lw	a5,-52(s0)
8000170c:	00178713          	addi	a4,a5,1
80001710:	fce42623          	sw	a4,-52(s0)
80001714:	fdd44703          	lbu	a4,-35(s0)
80001718:	00e78023          	sb	a4,0(a5)
8000171c:	0007c783          	lbu	a5,0(a5)
80001720:	00079663          	bnez	a5,8000172c <strcpy+0x118>
80001724:	fec42783          	lw	a5,-20(s0)
80001728:	0940006f          	j	800017bc <strcpy+0x1a8>
8000172c:	fc842783          	lw	a5,-56(s0)
80001730:	00378793          	addi	a5,a5,3
80001734:	0007c783          	lbu	a5,0(a5)
80001738:	fcf40da3          	sb	a5,-37(s0)
8000173c:	fcc42783          	lw	a5,-52(s0)
80001740:	00178713          	addi	a4,a5,1
80001744:	fce42623          	sw	a4,-52(s0)
80001748:	fdc44703          	lbu	a4,-36(s0)
8000174c:	00e78023          	sb	a4,0(a5)
80001750:	0007c783          	lbu	a5,0(a5)
80001754:	00079663          	bnez	a5,80001760 <strcpy+0x14c>
80001758:	fec42783          	lw	a5,-20(s0)
8000175c:	0600006f          	j	800017bc <strcpy+0x1a8>
80001760:	00000013          	nop
80001764:	fcc42783          	lw	a5,-52(s0)
80001768:	00178713          	addi	a4,a5,1
8000176c:	fce42623          	sw	a4,-52(s0)
80001770:	00078023          	sb	zero,0(a5)
80001774:	fec42783          	lw	a5,-20(s0)
80001778:	0440006f          	j	800017bc <strcpy+0x1a8>
8000177c:	fc842783          	lw	a5,-56(s0)
80001780:	0007c783          	lbu	a5,0(a5)
80001784:	fcf40fa3          	sb	a5,-33(s0)
80001788:	fc842783          	lw	a5,-56(s0)
8000178c:	00178793          	addi	a5,a5,1
80001790:	fcf42423          	sw	a5,-56(s0)
80001794:	fcc42783          	lw	a5,-52(s0)
80001798:	00178793          	addi	a5,a5,1
8000179c:	fcf42623          	sw	a5,-52(s0)
800017a0:	fcc42783          	lw	a5,-52(s0)
800017a4:	fff78793          	addi	a5,a5,-1
800017a8:	fdf44703          	lbu	a4,-33(s0)
800017ac:	00e78023          	sb	a4,0(a5)
800017b0:	fdf44783          	lbu	a5,-33(s0)
800017b4:	fc0794e3          	bnez	a5,8000177c <strcpy+0x168>
800017b8:	fec42783          	lw	a5,-20(s0)
800017bc:	00078513          	mv	a0,a5
800017c0:	03c12083          	lw	ra,60(sp)
800017c4:	03812403          	lw	s0,56(sp)
800017c8:	04010113          	addi	sp,sp,64
800017cc:	00008067          	ret

800017d0 <__libc_detect_null>:
800017d0:	00308013          	addi	zero,ra,3
800017d4:	fd010113          	addi	sp,sp,-48
800017d8:	02812623          	sw	s0,44(sp)
800017dc:	03010413          	addi	s0,sp,48
800017e0:	fca42e23          	sw	a0,-36(s0)
800017e4:	7f7f87b7          	lui	a5,0x7f7f8
800017e8:	f7f78793          	addi	a5,a5,-129 # 7f7f7f7f <CONFIG_SRAM_SIZE+0x7f6f7f7f>
800017ec:	fef42623          	sw	a5,-20(s0)
800017f0:	fdc42703          	lw	a4,-36(s0)
800017f4:	fec42783          	lw	a5,-20(s0)
800017f8:	00f77733          	and	a4,a4,a5
800017fc:	fec42783          	lw	a5,-20(s0)
80001800:	00f70733          	add	a4,a4,a5
80001804:	fdc42783          	lw	a5,-36(s0)
80001808:	00f76733          	or	a4,a4,a5
8000180c:	fec42783          	lw	a5,-20(s0)
80001810:	00f767b3          	or	a5,a4,a5
80001814:	fff7c793          	not	a5,a5
80001818:	00078513          	mv	a0,a5
8000181c:	02c12403          	lw	s0,44(sp)
80001820:	03010113          	addi	sp,sp,48
80001824:	00008067          	ret

80001828 <strlen>:
80001828:	00308013          	addi	zero,ra,3
8000182c:	fc010113          	addi	sp,sp,-64
80001830:	02112e23          	sw	ra,60(sp)
80001834:	02812c23          	sw	s0,56(sp)
80001838:	04010413          	addi	s0,sp,64
8000183c:	fca42623          	sw	a0,-52(s0)
80001840:	fcc42783          	lw	a5,-52(s0)
80001844:	fef42423          	sw	a5,-24(s0)
80001848:	fcc42783          	lw	a5,-52(s0)
8000184c:	0037f793          	andi	a5,a5,3
80001850:	04078263          	beqz	a5,80001894 <strlen+0x6c>
80001854:	fcc42783          	lw	a5,-52(s0)
80001858:	0007c783          	lbu	a5,0(a5)
8000185c:	fef403a3          	sb	a5,-25(s0)
80001860:	fcc42783          	lw	a5,-52(s0)
80001864:	00178793          	addi	a5,a5,1
80001868:	fcf42623          	sw	a5,-52(s0)
8000186c:	fe744783          	lbu	a5,-25(s0)
80001870:	00079c63          	bnez	a5,80001888 <strlen+0x60>
80001874:	fcc42703          	lw	a4,-52(s0)
80001878:	fe842783          	lw	a5,-24(s0)
8000187c:	40f707b3          	sub	a5,a4,a5
80001880:	fff78793          	addi	a5,a5,-1
80001884:	21c0006f          	j	80001aa0 <strlen+0x278>
80001888:	fcc42783          	lw	a5,-52(s0)
8000188c:	0037f793          	andi	a5,a5,3
80001890:	fc0792e3          	bnez	a5,80001854 <strlen+0x2c>
80001894:	fcc42783          	lw	a5,-52(s0)
80001898:	fef42623          	sw	a5,-20(s0)
8000189c:	00000013          	nop
800018a0:	fec42783          	lw	a5,-20(s0)
800018a4:	00478713          	addi	a4,a5,4
800018a8:	fee42623          	sw	a4,-20(s0)
800018ac:	0007a783          	lw	a5,0(a5)
800018b0:	00078513          	mv	a0,a5
800018b4:	f1dff0ef          	jal	ra,800017d0 <__libc_detect_null>
800018b8:	00050793          	mv	a5,a0
800018bc:	fe0782e3          	beqz	a5,800018a0 <strlen+0x78>
800018c0:	fec42783          	lw	a5,-20(s0)
800018c4:	fef42623          	sw	a5,-20(s0)
800018c8:	fec42783          	lw	a5,-20(s0)
800018cc:	fcf42623          	sw	a5,-52(s0)
800018d0:	fcc42703          	lw	a4,-52(s0)
800018d4:	fe842783          	lw	a5,-24(s0)
800018d8:	40f707b3          	sub	a5,a4,a5
800018dc:	fef42023          	sw	a5,-32(s0)
800018e0:	00400793          	li	a5,4
800018e4:	fcf42e23          	sw	a5,-36(s0)
800018e8:	fdc42783          	lw	a5,-36(s0)
800018ec:	40f007b3          	neg	a5,a5
800018f0:	fcc42703          	lw	a4,-52(s0)
800018f4:	00f707b3          	add	a5,a4,a5
800018f8:	0007c783          	lbu	a5,0(a5)
800018fc:	fcf40da3          	sb	a5,-37(s0)
80001900:	00100713          	li	a4,1
80001904:	fdc42783          	lw	a5,-36(s0)
80001908:	40f707b3          	sub	a5,a4,a5
8000190c:	fcc42703          	lw	a4,-52(s0)
80001910:	00f707b3          	add	a5,a4,a5
80001914:	0007c783          	lbu	a5,0(a5)
80001918:	fcf40d23          	sb	a5,-38(s0)
8000191c:	00200713          	li	a4,2
80001920:	fdc42783          	lw	a5,-36(s0)
80001924:	40f707b3          	sub	a5,a4,a5
80001928:	fcc42703          	lw	a4,-52(s0)
8000192c:	00f707b3          	add	a5,a4,a5
80001930:	0007c783          	lbu	a5,0(a5)
80001934:	fcf40ca3          	sb	a5,-39(s0)
80001938:	00300713          	li	a4,3
8000193c:	fdc42783          	lw	a5,-36(s0)
80001940:	40f707b3          	sub	a5,a4,a5
80001944:	fcc42703          	lw	a4,-52(s0)
80001948:	00f707b3          	add	a5,a4,a5
8000194c:	0007c783          	lbu	a5,0(a5)
80001950:	fcf40c23          	sb	a5,-40(s0)
80001954:	fdb44783          	lbu	a5,-37(s0)
80001958:	00079a63          	bnez	a5,8000196c <strlen+0x144>
8000195c:	fe042703          	lw	a4,-32(s0)
80001960:	fdc42783          	lw	a5,-36(s0)
80001964:	40f707b3          	sub	a5,a4,a5
80001968:	1380006f          	j	80001aa0 <strlen+0x278>
8000196c:	fda44783          	lbu	a5,-38(s0)
80001970:	00079c63          	bnez	a5,80001988 <strlen+0x160>
80001974:	fe042703          	lw	a4,-32(s0)
80001978:	fdc42783          	lw	a5,-36(s0)
8000197c:	40f707b3          	sub	a5,a4,a5
80001980:	00178793          	addi	a5,a5,1
80001984:	11c0006f          	j	80001aa0 <strlen+0x278>
80001988:	fd944783          	lbu	a5,-39(s0)
8000198c:	00079c63          	bnez	a5,800019a4 <strlen+0x17c>
80001990:	fe042703          	lw	a4,-32(s0)
80001994:	fdc42783          	lw	a5,-36(s0)
80001998:	40f707b3          	sub	a5,a4,a5
8000199c:	00278793          	addi	a5,a5,2
800019a0:	1000006f          	j	80001aa0 <strlen+0x278>
800019a4:	fdc42703          	lw	a4,-36(s0)
800019a8:	00400793          	li	a5,4
800019ac:	00f70663          	beq	a4,a5,800019b8 <strlen+0x190>
800019b0:	fd844783          	lbu	a5,-40(s0)
800019b4:	00079c63          	bnez	a5,800019cc <strlen+0x1a4>
800019b8:	fe042703          	lw	a4,-32(s0)
800019bc:	fdc42783          	lw	a5,-36(s0)
800019c0:	40f707b3          	sub	a5,a4,a5
800019c4:	00378793          	addi	a5,a5,3
800019c8:	0d80006f          	j	80001aa0 <strlen+0x278>
800019cc:	00400713          	li	a4,4
800019d0:	fdc42783          	lw	a5,-36(s0)
800019d4:	40f707b3          	sub	a5,a4,a5
800019d8:	fcc42703          	lw	a4,-52(s0)
800019dc:	00f707b3          	add	a5,a4,a5
800019e0:	0007c783          	lbu	a5,0(a5)
800019e4:	fcf40da3          	sb	a5,-37(s0)
800019e8:	00500713          	li	a4,5
800019ec:	fdc42783          	lw	a5,-36(s0)
800019f0:	40f707b3          	sub	a5,a4,a5
800019f4:	fcc42703          	lw	a4,-52(s0)
800019f8:	00f707b3          	add	a5,a4,a5
800019fc:	0007c783          	lbu	a5,0(a5)
80001a00:	fcf40d23          	sb	a5,-38(s0)
80001a04:	00600713          	li	a4,6
80001a08:	fdc42783          	lw	a5,-36(s0)
80001a0c:	40f707b3          	sub	a5,a4,a5
80001a10:	fcc42703          	lw	a4,-52(s0)
80001a14:	00f707b3          	add	a5,a4,a5
80001a18:	0007c783          	lbu	a5,0(a5)
80001a1c:	fcf40ca3          	sb	a5,-39(s0)
80001a20:	00700713          	li	a4,7
80001a24:	fdc42783          	lw	a5,-36(s0)
80001a28:	40f707b3          	sub	a5,a4,a5
80001a2c:	fcc42703          	lw	a4,-52(s0)
80001a30:	00f707b3          	add	a5,a4,a5
80001a34:	0007c783          	lbu	a5,0(a5)
80001a38:	fcf40c23          	sb	a5,-40(s0)
80001a3c:	fdb44783          	lbu	a5,-37(s0)
80001a40:	00079c63          	bnez	a5,80001a58 <strlen+0x230>
80001a44:	fe042703          	lw	a4,-32(s0)
80001a48:	fdc42783          	lw	a5,-36(s0)
80001a4c:	40f707b3          	sub	a5,a4,a5
80001a50:	00478793          	addi	a5,a5,4
80001a54:	04c0006f          	j	80001aa0 <strlen+0x278>
80001a58:	fda44783          	lbu	a5,-38(s0)
80001a5c:	00079c63          	bnez	a5,80001a74 <strlen+0x24c>
80001a60:	fe042703          	lw	a4,-32(s0)
80001a64:	fdc42783          	lw	a5,-36(s0)
80001a68:	40f707b3          	sub	a5,a4,a5
80001a6c:	00578793          	addi	a5,a5,5
80001a70:	0300006f          	j	80001aa0 <strlen+0x278>
80001a74:	fd944783          	lbu	a5,-39(s0)
80001a78:	00079c63          	bnez	a5,80001a90 <strlen+0x268>
80001a7c:	fe042703          	lw	a4,-32(s0)
80001a80:	fdc42783          	lw	a5,-36(s0)
80001a84:	40f707b3          	sub	a5,a4,a5
80001a88:	00678793          	addi	a5,a5,6
80001a8c:	0140006f          	j	80001aa0 <strlen+0x278>
80001a90:	fe042703          	lw	a4,-32(s0)
80001a94:	fdc42783          	lw	a5,-36(s0)
80001a98:	40f707b3          	sub	a5,a4,a5
80001a9c:	00778793          	addi	a5,a5,7
80001aa0:	00078513          	mv	a0,a5
80001aa4:	03c12083          	lw	ra,60(sp)
80001aa8:	03812403          	lw	s0,56(sp)
80001aac:	04010113          	addi	sp,sp,64
80001ab0:	00008067          	ret

80001ab4 <__strncat_chk>:
80001ab4:	00308013          	addi	zero,ra,3
80001ab8:	06060663          	beqz	a2,80001b24 <__strncat_chk+0x70>
80001abc:	06c6e663          	bltu	a3,a2,80001b28 <__strncat_chk+0x74>
80001ac0:	00054703          	lbu	a4,0(a0)
80001ac4:	00050793          	mv	a5,a0
80001ac8:	00d50833          	add	a6,a0,a3
80001acc:	00071663          	bnez	a4,80001ad8 <__strncat_chk+0x24>
80001ad0:	0200006f          	j	80001af0 <__strncat_chk+0x3c>
80001ad4:	05078a63          	beq	a5,a6,80001b28 <__strncat_chk+0x74>
80001ad8:	0017c703          	lbu	a4,1(a5)
80001adc:	00078693          	mv	a3,a5
80001ae0:	00178793          	addi	a5,a5,1
80001ae4:	fe0718e3          	bnez	a4,80001ad4 <__strncat_chk+0x20>
80001ae8:	fff80813          	addi	a6,a6,-1 # ffff <__rom_region_size+0x62ab>
80001aec:	40d806b3          	sub	a3,a6,a3
80001af0:	00c58633          	add	a2,a1,a2
80001af4:	00d78833          	add	a6,a5,a3
80001af8:	0140006f          	j	80001b0c <__strncat_chk+0x58>
80001afc:	fff68693          	addi	a3,a3,-1
80001b00:	03078463          	beq	a5,a6,80001b28 <__strncat_chk+0x74>
80001b04:	00178793          	addi	a5,a5,1
80001b08:	00c58a63          	beq	a1,a2,80001b1c <__strncat_chk+0x68>
80001b0c:	0005c703          	lbu	a4,0(a1)
80001b10:	00158593          	addi	a1,a1,1
80001b14:	00e78023          	sb	a4,0(a5)
80001b18:	fe0712e3          	bnez	a4,80001afc <__strncat_chk+0x48>
80001b1c:	00068663          	beqz	a3,80001b28 <__strncat_chk+0x74>
80001b20:	00078023          	sb	zero,0(a5)
80001b24:	00008067          	ret
80001b28:	ff010113          	addi	sp,sp,-16
80001b2c:	00112623          	sw	ra,12(sp)
80001b30:	628040ef          	jal	ra,80006158 <__chk_fail>

80001b34 <strncat>:
80001b34:	00308013          	addi	zero,ra,3
80001b38:	00357713          	andi	a4,a0,3
80001b3c:	00050793          	mv	a5,a0
80001b40:	04071463          	bnez	a4,80001b88 <strncat+0x54>
80001b44:	00052683          	lw	a3,0(a0)
80001b48:	feff08b7          	lui	a7,0xfeff0
80001b4c:	eff88893          	addi	a7,a7,-257 # fefefeff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfefeff00>
80001b50:	01168733          	add	a4,a3,a7
80001b54:	80808837          	lui	a6,0x80808
80001b58:	fff6c693          	not	a3,a3
80001b5c:	00d77733          	and	a4,a4,a3
80001b60:	08080813          	addi	a6,a6,128 # 80808080 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80808081>
80001b64:	01077733          	and	a4,a4,a6
80001b68:	02071063          	bnez	a4,80001b88 <strncat+0x54>
80001b6c:	0047a683          	lw	a3,4(a5)
80001b70:	00478793          	addi	a5,a5,4
80001b74:	01168733          	add	a4,a3,a7
80001b78:	fff6c693          	not	a3,a3
80001b7c:	00d77733          	and	a4,a4,a3
80001b80:	01077733          	and	a4,a4,a6
80001b84:	fe0704e3          	beqz	a4,80001b6c <strncat+0x38>
80001b88:	0007c703          	lbu	a4,0(a5)
80001b8c:	00070863          	beqz	a4,80001b9c <strncat+0x68>
80001b90:	0017c703          	lbu	a4,1(a5)
80001b94:	00178793          	addi	a5,a5,1
80001b98:	fe071ce3          	bnez	a4,80001b90 <strncat+0x5c>
80001b9c:	00c786b3          	add	a3,a5,a2
80001ba0:	02060463          	beqz	a2,80001bc8 <strncat+0x94>
80001ba4:	0005c703          	lbu	a4,0(a1)
80001ba8:	00178793          	addi	a5,a5,1
80001bac:	00158593          	addi	a1,a1,1
80001bb0:	fee78fa3          	sb	a4,-1(a5)
80001bb4:	00070863          	beqz	a4,80001bc4 <strncat+0x90>
80001bb8:	fef696e3          	bne	a3,a5,80001ba4 <strncat+0x70>
80001bbc:	00068023          	sb	zero,0(a3)
80001bc0:	00008067          	ret
80001bc4:	00008067          	ret
80001bc8:	00008067          	ret

80001bcc <strncpy>:
80001bcc:	00308013          	addi	zero,ra,3
80001bd0:	00b567b3          	or	a5,a0,a1
80001bd4:	0037f793          	andi	a5,a5,3
80001bd8:	00050713          	mv	a4,a0
80001bdc:	06079a63          	bnez	a5,80001c50 <strncpy+0x84>
80001be0:	00300793          	li	a5,3
80001be4:	06c7f663          	bgeu	a5,a2,80001c50 <strncpy+0x84>
80001be8:	feff0337          	lui	t1,0xfeff0
80001bec:	808088b7          	lui	a7,0x80808
80001bf0:	eff30313          	addi	t1,t1,-257 # fefefeff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfefeff00>
80001bf4:	08088893          	addi	a7,a7,128 # 80808080 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80808081>
80001bf8:	00300e13          	li	t3,3
80001bfc:	0180006f          	j	80001c14 <strncpy+0x48>
80001c00:	00d72023          	sw	a3,0(a4)
80001c04:	ffc60613          	addi	a2,a2,-4
80001c08:	00470713          	addi	a4,a4,4
80001c0c:	00458593          	addi	a1,a1,4
80001c10:	04ce7063          	bgeu	t3,a2,80001c50 <strncpy+0x84>
80001c14:	0005a683          	lw	a3,0(a1)
80001c18:	006687b3          	add	a5,a3,t1
80001c1c:	fff6c813          	not	a6,a3
80001c20:	0107f7b3          	and	a5,a5,a6
80001c24:	0117f7b3          	and	a5,a5,a7
80001c28:	fc078ce3          	beqz	a5,80001c00 <strncpy+0x34>
80001c2c:	00158593          	addi	a1,a1,1
80001c30:	00170793          	addi	a5,a4,1
80001c34:	02060463          	beqz	a2,80001c5c <strncpy+0x90>
80001c38:	fff5c683          	lbu	a3,-1(a1)
80001c3c:	fff60813          	addi	a6,a2,-1
80001c40:	fed78fa3          	sb	a3,-1(a5)
80001c44:	00068e63          	beqz	a3,80001c60 <strncpy+0x94>
80001c48:	00078713          	mv	a4,a5
80001c4c:	00080613          	mv	a2,a6
80001c50:	00158593          	addi	a1,a1,1
80001c54:	00170793          	addi	a5,a4,1
80001c58:	fe0610e3          	bnez	a2,80001c38 <strncpy+0x6c>
80001c5c:	00008067          	ret
80001c60:	00c70733          	add	a4,a4,a2
80001c64:	00080a63          	beqz	a6,80001c78 <strncpy+0xac>
80001c68:	00178793          	addi	a5,a5,1
80001c6c:	fe078fa3          	sb	zero,-1(a5)
80001c70:	fee79ce3          	bne	a5,a4,80001c68 <strncpy+0x9c>
80001c74:	00008067          	ret
80001c78:	00008067          	ret

80001c7c <strnlen>:
80001c7c:	00308013          	addi	zero,ra,3
80001c80:	00b506b3          	add	a3,a0,a1
80001c84:	00050793          	mv	a5,a0
80001c88:	00059863          	bnez	a1,80001c98 <strnlen+0x1c>
80001c8c:	0240006f          	j	80001cb0 <strnlen+0x34>
80001c90:	00178793          	addi	a5,a5,1
80001c94:	00f68a63          	beq	a3,a5,80001ca8 <strnlen+0x2c>
80001c98:	0007c703          	lbu	a4,0(a5)
80001c9c:	fe071ae3          	bnez	a4,80001c90 <strnlen+0x14>
80001ca0:	40a78533          	sub	a0,a5,a0
80001ca4:	00008067          	ret
80001ca8:	40a68533          	sub	a0,a3,a0
80001cac:	00008067          	ret
80001cb0:	00000513          	li	a0,0
80001cb4:	00008067          	ret

80001cb8 <_strtoul_l.constprop.0>:
80001cb8:	00308013          	addi	zero,ra,3
80001cbc:	ff010113          	addi	sp,sp,-16
80001cc0:	800098b7          	lui	a7,0x80009
80001cc4:	00812623          	sw	s0,12(sp)
80001cc8:	00050f93          	mv	t6,a0
80001ccc:	00058793          	mv	a5,a1
80001cd0:	d0d88893          	addi	a7,a7,-755 # 80008d0d <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008d0e>
80001cd4:	0007c803          	lbu	a6,0(a5)
80001cd8:	00078513          	mv	a0,a5
80001cdc:	00178793          	addi	a5,a5,1
80001ce0:	01088733          	add	a4,a7,a6
80001ce4:	00074703          	lbu	a4,0(a4)
80001ce8:	00877713          	andi	a4,a4,8
80001cec:	fe0714e3          	bnez	a4,80001cd4 <_strtoul_l.constprop.0+0x1c>
80001cf0:	02d00713          	li	a4,45
80001cf4:	10e80263          	beq	a6,a4,80001df8 <_strtoul_l.constprop.0+0x140>
80001cf8:	02b00713          	li	a4,43
80001cfc:	00000413          	li	s0,0
80001d00:	08e80a63          	beq	a6,a4,80001d94 <_strtoul_l.constprop.0+0xdc>
80001d04:	02069263          	bnez	a3,80001d28 <_strtoul_l.constprop.0+0x70>
80001d08:	03000713          	li	a4,48
80001d0c:	0ee80e63          	beq	a6,a4,80001e08 <_strtoul_l.constprop.0+0x150>
80001d10:	1999a337          	lui	t1,0x1999a
80001d14:	00500393          	li	t2,5
80001d18:	99930313          	addi	t1,t1,-1639 # 19999999 <CONFIG_SRAM_SIZE+0x19899999>
80001d1c:	00a00293          	li	t0,10
80001d20:	00a00693          	li	a3,10
80001d24:	01c0006f          	j	80001d40 <_strtoul_l.constprop.0+0x88>
80001d28:	01000713          	li	a4,16
80001d2c:	10e68263          	beq	a3,a4,80001e30 <_strtoul_l.constprop.0+0x178>
80001d30:	fff00393          	li	t2,-1
80001d34:	02d3d333          	divu	t1,t2,a3
80001d38:	00068293          	mv	t0,a3
80001d3c:	02d3f3b3          	remu	t2,t2,a3
80001d40:	00000893          	li	a7,0
80001d44:	00000513          	li	a0,0
80001d48:	00900e13          	li	t3,9
80001d4c:	01900f13          	li	t5,25
80001d50:	fff00e93          	li	t4,-1
80001d54:	fd080713          	addi	a4,a6,-48
80001d58:	00ee7863          	bgeu	t3,a4,80001d68 <_strtoul_l.constprop.0+0xb0>
80001d5c:	fbf80713          	addi	a4,a6,-65
80001d60:	04ef6063          	bltu	t5,a4,80001da0 <_strtoul_l.constprop.0+0xe8>
80001d64:	fc980713          	addi	a4,a6,-55
80001d68:	04d75463          	bge	a4,a3,80001db0 <_strtoul_l.constprop.0+0xf8>
80001d6c:	01d88e63          	beq	a7,t4,80001d88 <_strtoul_l.constprop.0+0xd0>
80001d70:	fff00893          	li	a7,-1
80001d74:	00a36a63          	bltu	t1,a0,80001d88 <_strtoul_l.constprop.0+0xd0>
80001d78:	06650063          	beq	a0,t1,80001dd8 <_strtoul_l.constprop.0+0x120>
80001d7c:	00100893          	li	a7,1
80001d80:	02550533          	mul	a0,a0,t0
80001d84:	00a70533          	add	a0,a4,a0
80001d88:	00178793          	addi	a5,a5,1
80001d8c:	fff7c803          	lbu	a6,-1(a5)
80001d90:	fc5ff06f          	j	80001d54 <_strtoul_l.constprop.0+0x9c>
80001d94:	0007c803          	lbu	a6,0(a5)
80001d98:	00250793          	addi	a5,a0,2
80001d9c:	f69ff06f          	j	80001d04 <_strtoul_l.constprop.0+0x4c>
80001da0:	f9f80713          	addi	a4,a6,-97
80001da4:	00ef6663          	bltu	t5,a4,80001db0 <_strtoul_l.constprop.0+0xf8>
80001da8:	fa980713          	addi	a4,a6,-87
80001dac:	fcd740e3          	blt	a4,a3,80001d6c <_strtoul_l.constprop.0+0xb4>
80001db0:	fff00713          	li	a4,-1
80001db4:	02e88663          	beq	a7,a4,80001de0 <_strtoul_l.constprop.0+0x128>
80001db8:	00040463          	beqz	s0,80001dc0 <_strtoul_l.constprop.0+0x108>
80001dbc:	40a00533          	neg	a0,a0
80001dc0:	00060663          	beqz	a2,80001dcc <_strtoul_l.constprop.0+0x114>
80001dc4:	02089663          	bnez	a7,80001df0 <_strtoul_l.constprop.0+0x138>
80001dc8:	00b62023          	sw	a1,0(a2)
80001dcc:	00c12403          	lw	s0,12(sp)
80001dd0:	01010113          	addi	sp,sp,16
80001dd4:	00008067          	ret
80001dd8:	fae3c8e3          	blt	t2,a4,80001d88 <_strtoul_l.constprop.0+0xd0>
80001ddc:	fa1ff06f          	j	80001d7c <_strtoul_l.constprop.0+0xc4>
80001de0:	02200713          	li	a4,34
80001de4:	00efa023          	sw	a4,0(t6)
80001de8:	fff00513          	li	a0,-1
80001dec:	fe0600e3          	beqz	a2,80001dcc <_strtoul_l.constprop.0+0x114>
80001df0:	fff78593          	addi	a1,a5,-1
80001df4:	fd5ff06f          	j	80001dc8 <_strtoul_l.constprop.0+0x110>
80001df8:	0007c803          	lbu	a6,0(a5)
80001dfc:	00100413          	li	s0,1
80001e00:	00250793          	addi	a5,a0,2
80001e04:	f01ff06f          	j	80001d04 <_strtoul_l.constprop.0+0x4c>
80001e08:	0007c703          	lbu	a4,0(a5)
80001e0c:	05800693          	li	a3,88
80001e10:	0df77713          	andi	a4,a4,223
80001e14:	04d70463          	beq	a4,a3,80001e5c <_strtoul_l.constprop.0+0x1a4>
80001e18:	20000337          	lui	t1,0x20000
80001e1c:	00700393          	li	t2,7
80001e20:	fff30313          	addi	t1,t1,-1 # 1fffffff <CONFIG_SRAM_SIZE+0x1fefffff>
80001e24:	00800293          	li	t0,8
80001e28:	00800693          	li	a3,8
80001e2c:	f15ff06f          	j	80001d40 <_strtoul_l.constprop.0+0x88>
80001e30:	03000713          	li	a4,48
80001e34:	00e80c63          	beq	a6,a4,80001e4c <_strtoul_l.constprop.0+0x194>
80001e38:	10000337          	lui	t1,0x10000
80001e3c:	00f00393          	li	t2,15
80001e40:	fff30313          	addi	t1,t1,-1 # fffffff <CONFIG_SRAM_SIZE+0xfefffff>
80001e44:	01000293          	li	t0,16
80001e48:	ef9ff06f          	j	80001d40 <_strtoul_l.constprop.0+0x88>
80001e4c:	0007c703          	lbu	a4,0(a5)
80001e50:	05800513          	li	a0,88
80001e54:	0df77713          	andi	a4,a4,223
80001e58:	fea710e3          	bne	a4,a0,80001e38 <_strtoul_l.constprop.0+0x180>
80001e5c:	10000337          	lui	t1,0x10000
80001e60:	0017c803          	lbu	a6,1(a5)
80001e64:	00f00393          	li	t2,15
80001e68:	00278793          	addi	a5,a5,2
80001e6c:	fff30313          	addi	t1,t1,-1 # fffffff <CONFIG_SRAM_SIZE+0xfefffff>
80001e70:	01000293          	li	t0,16
80001e74:	01000693          	li	a3,16
80001e78:	ec9ff06f          	j	80001d40 <_strtoul_l.constprop.0+0x88>

80001e7c <_strtoul_r>:
80001e7c:	00308013          	addi	zero,ra,3
80001e80:	e39ff06f          	j	80001cb8 <_strtoul_l.constprop.0>

80001e84 <strtoul_l>:
80001e84:	00308013          	addi	zero,ra,3
80001e88:	00050793          	mv	a5,a0
80001e8c:	82c1a503          	lw	a0,-2004(gp) # 8000cf6c <_impure_ptr>
80001e90:	00060693          	mv	a3,a2
80001e94:	00058613          	mv	a2,a1
80001e98:	00078593          	mv	a1,a5
80001e9c:	e1dff06f          	j	80001cb8 <_strtoul_l.constprop.0>

80001ea0 <strtoul>:
80001ea0:	00308013          	addi	zero,ra,3
80001ea4:	00050793          	mv	a5,a0
80001ea8:	82c1a503          	lw	a0,-2004(gp) # 8000cf6c <_impure_ptr>
80001eac:	00060693          	mv	a3,a2
80001eb0:	00058613          	mv	a2,a1
80001eb4:	00078593          	mv	a1,a5
80001eb8:	e01ff06f          	j	80001cb8 <_strtoul_l.constprop.0>

80001ebc <__malloc_lock>:
80001ebc:	00308013          	addi	zero,ra,3
80001ec0:	83418513          	addi	a0,gp,-1996 # 8000cf74 <__lock___malloc_recursive_mutex>
80001ec4:	2540406f          	j	80006118 <__retarget_lock_acquire_recursive>

80001ec8 <__malloc_unlock>:
80001ec8:	00308013          	addi	zero,ra,3
80001ecc:	83418513          	addi	a0,gp,-1996 # 8000cf74 <__lock___malloc_recursive_mutex>
80001ed0:	26c0406f          	j	8000613c <__retarget_lock_release_recursive>

80001ed4 <__ssputs_r>:
80001ed4:	00308013          	addi	zero,ra,3
80001ed8:	fe010113          	addi	sp,sp,-32
80001edc:	01212823          	sw	s2,16(sp)
80001ee0:	0085a903          	lw	s2,8(a1)
80001ee4:	00812c23          	sw	s0,24(sp)
80001ee8:	00912a23          	sw	s1,20(sp)
80001eec:	01312623          	sw	s3,12(sp)
80001ef0:	00112e23          	sw	ra,28(sp)
80001ef4:	01412423          	sw	s4,8(sp)
80001ef8:	01512223          	sw	s5,4(sp)
80001efc:	01612023          	sw	s6,0(sp)
80001f00:	0005a783          	lw	a5,0(a1)
80001f04:	00058413          	mv	s0,a1
80001f08:	00068493          	mv	s1,a3
80001f0c:	00060993          	mv	s3,a2
80001f10:	0f26e063          	bltu	a3,s2,80001ff0 <__ssputs_r+0x11c>
80001f14:	00c59703          	lh	a4,12(a1)
80001f18:	48077693          	andi	a3,a4,1152
80001f1c:	04069e63          	bnez	a3,80001f78 <__ssputs_r+0xa4>
80001f20:	00090493          	mv	s1,s2
80001f24:	00078513          	mv	a0,a5
80001f28:	00048613          	mv	a2,s1
80001f2c:	00098593          	mv	a1,s3
80001f30:	5b1000ef          	jal	ra,80002ce0 <memmove>
80001f34:	00842703          	lw	a4,8(s0)
80001f38:	00042783          	lw	a5,0(s0)
80001f3c:	00000513          	li	a0,0
80001f40:	41270733          	sub	a4,a4,s2
80001f44:	009787b3          	add	a5,a5,s1
80001f48:	00e42423          	sw	a4,8(s0)
80001f4c:	00f42023          	sw	a5,0(s0)
80001f50:	01c12083          	lw	ra,28(sp)
80001f54:	01812403          	lw	s0,24(sp)
80001f58:	01412483          	lw	s1,20(sp)
80001f5c:	01012903          	lw	s2,16(sp)
80001f60:	00c12983          	lw	s3,12(sp)
80001f64:	00812a03          	lw	s4,8(sp)
80001f68:	00412a83          	lw	s5,4(sp)
80001f6c:	00012b03          	lw	s6,0(sp)
80001f70:	02010113          	addi	sp,sp,32
80001f74:	00008067          	ret
80001f78:	00050a13          	mv	s4,a0
80001f7c:	0145a503          	lw	a0,20(a1)
80001f80:	0105a583          	lw	a1,16(a1)
80001f84:	00148693          	addi	a3,s1,1
80001f88:	00151613          	slli	a2,a0,0x1
80001f8c:	00a60633          	add	a2,a2,a0
80001f90:	01f65913          	srli	s2,a2,0x1f
80001f94:	00c90933          	add	s2,s2,a2
80001f98:	40b78ab3          	sub	s5,a5,a1
80001f9c:	40195913          	srai	s2,s2,0x1
80001fa0:	015687b3          	add	a5,a3,s5
80001fa4:	00090613          	mv	a2,s2
80001fa8:	00f97663          	bgeu	s2,a5,80001fb4 <__ssputs_r+0xe0>
80001fac:	00078913          	mv	s2,a5
80001fb0:	00078613          	mv	a2,a5
80001fb4:	40077713          	andi	a4,a4,1024
80001fb8:	04070063          	beqz	a4,80001ff8 <__ssputs_r+0x124>
80001fbc:	00060593          	mv	a1,a2
80001fc0:	000a0513          	mv	a0,s4
80001fc4:	854ff0ef          	jal	ra,80001018 <_malloc_r>
80001fc8:	00050b13          	mv	s6,a0
80001fcc:	06050463          	beqz	a0,80002034 <__ssputs_r+0x160>
80001fd0:	01042583          	lw	a1,16(s0)
80001fd4:	000a8613          	mv	a2,s5
80001fd8:	a85fe0ef          	jal	ra,80000a5c <memcpy>
80001fdc:	00c45783          	lhu	a5,12(s0)
80001fe0:	b7f7f793          	andi	a5,a5,-1153
80001fe4:	0807e793          	ori	a5,a5,128
80001fe8:	00f41623          	sh	a5,12(s0)
80001fec:	01c0006f          	j	80002008 <__ssputs_r+0x134>
80001ff0:	00068913          	mv	s2,a3
80001ff4:	f31ff06f          	j	80001f24 <__ssputs_r+0x50>
80001ff8:	000a0513          	mv	a0,s4
80001ffc:	6f1000ef          	jal	ra,80002eec <_realloc_r>
80002000:	00050b13          	mv	s6,a0
80002004:	02050263          	beqz	a0,80002028 <__ssputs_r+0x154>
80002008:	015b07b3          	add	a5,s6,s5
8000200c:	41590ab3          	sub	s5,s2,s5
80002010:	01242a23          	sw	s2,20(s0)
80002014:	01642823          	sw	s6,16(s0)
80002018:	00f42023          	sw	a5,0(s0)
8000201c:	00048913          	mv	s2,s1
80002020:	01542423          	sw	s5,8(s0)
80002024:	f01ff06f          	j	80001f24 <__ssputs_r+0x50>
80002028:	01042583          	lw	a1,16(s0)
8000202c:	000a0513          	mv	a0,s4
80002030:	e7dfe0ef          	jal	ra,80000eac <_free_r>
80002034:	00c45783          	lhu	a5,12(s0)
80002038:	00c00713          	li	a4,12
8000203c:	00ea2023          	sw	a4,0(s4)
80002040:	0407e793          	ori	a5,a5,64
80002044:	00f41623          	sh	a5,12(s0)
80002048:	fff00513          	li	a0,-1
8000204c:	f05ff06f          	j	80001f50 <__ssputs_r+0x7c>

80002050 <__ssprint_r>:
80002050:	00308013          	addi	zero,ra,3
80002054:	00862783          	lw	a5,8(a2)
80002058:	fd010113          	addi	sp,sp,-48
8000205c:	01312e23          	sw	s3,28(sp)
80002060:	01412c23          	sw	s4,24(sp)
80002064:	02112623          	sw	ra,44(sp)
80002068:	02812423          	sw	s0,40(sp)
8000206c:	02912223          	sw	s1,36(sp)
80002070:	03212023          	sw	s2,32(sp)
80002074:	01512a23          	sw	s5,20(sp)
80002078:	01612823          	sw	s6,16(sp)
8000207c:	01712623          	sw	s7,12(sp)
80002080:	01812423          	sw	s8,8(sp)
80002084:	00062983          	lw	s3,0(a2)
80002088:	00060a13          	mv	s4,a2
8000208c:	14078c63          	beqz	a5,800021e4 <__ssprint_r+0x194>
80002090:	0085a703          	lw	a4,8(a1)
80002094:	0005a783          	lw	a5,0(a1)
80002098:	00050a93          	mv	s5,a0
8000209c:	00058493          	mv	s1,a1
800020a0:	00000b93          	li	s7,0
800020a4:	00000913          	li	s2,0
800020a8:	0e00006f          	j	80002188 <__ssprint_r+0x138>
800020ac:	00c49703          	lh	a4,12(s1)
800020b0:	48077693          	andi	a3,a4,1152
800020b4:	08068a63          	beqz	a3,80002148 <__ssprint_r+0xf8>
800020b8:	0144a603          	lw	a2,20(s1)
800020bc:	0104a583          	lw	a1,16(s1)
800020c0:	00161693          	slli	a3,a2,0x1
800020c4:	00c686b3          	add	a3,a3,a2
800020c8:	40b78433          	sub	s0,a5,a1
800020cc:	01f6db13          	srli	s6,a3,0x1f
800020d0:	00db0b33          	add	s6,s6,a3
800020d4:	00140793          	addi	a5,s0,1
800020d8:	401b5b13          	srai	s6,s6,0x1
800020dc:	012787b3          	add	a5,a5,s2
800020e0:	000b0613          	mv	a2,s6
800020e4:	00fb7663          	bgeu	s6,a5,800020f0 <__ssprint_r+0xa0>
800020e8:	00078b13          	mv	s6,a5
800020ec:	00078613          	mv	a2,a5
800020f0:	40077713          	andi	a4,a4,1024
800020f4:	0a070a63          	beqz	a4,800021a8 <__ssprint_r+0x158>
800020f8:	00060593          	mv	a1,a2
800020fc:	000a8513          	mv	a0,s5
80002100:	f19fe0ef          	jal	ra,80001018 <_malloc_r>
80002104:	00050c13          	mv	s8,a0
80002108:	0a050e63          	beqz	a0,800021c4 <__ssprint_r+0x174>
8000210c:	0104a583          	lw	a1,16(s1)
80002110:	00040613          	mv	a2,s0
80002114:	949fe0ef          	jal	ra,80000a5c <memcpy>
80002118:	00c4d783          	lhu	a5,12(s1)
8000211c:	b7f7f793          	andi	a5,a5,-1153
80002120:	0807e793          	ori	a5,a5,128
80002124:	00f49623          	sh	a5,12(s1)
80002128:	408b07b3          	sub	a5,s6,s0
8000212c:	008c0533          	add	a0,s8,s0
80002130:	0164aa23          	sw	s6,20(s1)
80002134:	0184a823          	sw	s8,16(s1)
80002138:	00a4a023          	sw	a0,0(s1)
8000213c:	00090b13          	mv	s6,s2
80002140:	00f4a423          	sw	a5,8(s1)
80002144:	00090413          	mv	s0,s2
80002148:	00040613          	mv	a2,s0
8000214c:	000b8593          	mv	a1,s7
80002150:	391000ef          	jal	ra,80002ce0 <memmove>
80002154:	0084a703          	lw	a4,8(s1)
80002158:	0004a783          	lw	a5,0(s1)
8000215c:	008a2683          	lw	a3,8(s4)
80002160:	41670733          	sub	a4,a4,s6
80002164:	008787b3          	add	a5,a5,s0
80002168:	00e4a423          	sw	a4,8(s1)
8000216c:	00f4a023          	sw	a5,0(s1)
80002170:	412686b3          	sub	a3,a3,s2
80002174:	00da2423          	sw	a3,8(s4)
80002178:	06068663          	beqz	a3,800021e4 <__ssprint_r+0x194>
8000217c:	0009ab83          	lw	s7,0(s3)
80002180:	0049a903          	lw	s2,4(s3)
80002184:	00898993          	addi	s3,s3,8
80002188:	00070b13          	mv	s6,a4
8000218c:	00078513          	mv	a0,a5
80002190:	fe0906e3          	beqz	s2,8000217c <__ssprint_r+0x12c>
80002194:	00070413          	mv	s0,a4
80002198:	f0e97ae3          	bgeu	s2,a4,800020ac <__ssprint_r+0x5c>
8000219c:	00090b13          	mv	s6,s2
800021a0:	00090413          	mv	s0,s2
800021a4:	fa5ff06f          	j	80002148 <__ssprint_r+0xf8>
800021a8:	000a8513          	mv	a0,s5
800021ac:	541000ef          	jal	ra,80002eec <_realloc_r>
800021b0:	00050c13          	mv	s8,a0
800021b4:	f6051ae3          	bnez	a0,80002128 <__ssprint_r+0xd8>
800021b8:	0104a583          	lw	a1,16(s1)
800021bc:	000a8513          	mv	a0,s5
800021c0:	cedfe0ef          	jal	ra,80000eac <_free_r>
800021c4:	00c4d783          	lhu	a5,12(s1)
800021c8:	00c00713          	li	a4,12
800021cc:	00eaa023          	sw	a4,0(s5)
800021d0:	0407e793          	ori	a5,a5,64
800021d4:	00f49623          	sh	a5,12(s1)
800021d8:	000a2423          	sw	zero,8(s4)
800021dc:	fff00513          	li	a0,-1
800021e0:	0080006f          	j	800021e8 <__ssprint_r+0x198>
800021e4:	00000513          	li	a0,0
800021e8:	02c12083          	lw	ra,44(sp)
800021ec:	02812403          	lw	s0,40(sp)
800021f0:	000a2223          	sw	zero,4(s4)
800021f4:	02412483          	lw	s1,36(sp)
800021f8:	02012903          	lw	s2,32(sp)
800021fc:	01c12983          	lw	s3,28(sp)
80002200:	01812a03          	lw	s4,24(sp)
80002204:	01412a83          	lw	s5,20(sp)
80002208:	01012b03          	lw	s6,16(sp)
8000220c:	00c12b83          	lw	s7,12(sp)
80002210:	00812c03          	lw	s8,8(sp)
80002214:	03010113          	addi	sp,sp,48
80002218:	00008067          	ret

8000221c <_svfiprintf_r>:
8000221c:	00308013          	addi	zero,ra,3
80002220:	00c5d783          	lhu	a5,12(a1)
80002224:	f4010113          	addi	sp,sp,-192
80002228:	0b512223          	sw	s5,164(sp)
8000222c:	0b612023          	sw	s6,160(sp)
80002230:	09a12823          	sw	s10,144(sp)
80002234:	0a112e23          	sw	ra,188(sp)
80002238:	0a812c23          	sw	s0,184(sp)
8000223c:	0a912a23          	sw	s1,180(sp)
80002240:	0b212823          	sw	s2,176(sp)
80002244:	0b312623          	sw	s3,172(sp)
80002248:	0b412423          	sw	s4,168(sp)
8000224c:	09712e23          	sw	s7,156(sp)
80002250:	09812c23          	sw	s8,152(sp)
80002254:	09912a23          	sw	s9,148(sp)
80002258:	09b12623          	sw	s11,140(sp)
8000225c:	0807f793          	andi	a5,a5,128
80002260:	00058a93          	mv	s5,a1
80002264:	00050b13          	mv	s6,a0
80002268:	00060d13          	mv	s10,a2
8000226c:	00078663          	beqz	a5,80002278 <_svfiprintf_r+0x5c>
80002270:	0105a783          	lw	a5,16(a1)
80002274:	34078e63          	beqz	a5,800025d0 <_svfiprintf_r+0x3b4>
80002278:	02000793          	li	a5,32
8000227c:	02f10ca3          	sb	a5,57(sp)
80002280:	03000793          	li	a5,48
80002284:	02f10d23          	sb	a5,58(sp)
80002288:	000d4783          	lbu	a5,0(s10)
8000228c:	02012a23          	sw	zero,52(sp)
80002290:	00d12e23          	sw	a3,28(sp)
80002294:	8000a4b7          	lui	s1,0x8000a
80002298:	00100913          	li	s2,1
8000229c:	8000aa37          	lui	s4,0x8000a
800022a0:	8000abb7          	lui	s7,0x8000a
800022a4:	80002cb7          	lui	s9,0x80002
800022a8:	00000c13          	li	s8,0
800022ac:	18078863          	beqz	a5,8000243c <_svfiprintf_r+0x220>
800022b0:	000d0413          	mv	s0,s10
800022b4:	02500713          	li	a4,37
800022b8:	1ce78863          	beq	a5,a4,80002488 <_svfiprintf_r+0x26c>
800022bc:	00144783          	lbu	a5,1(s0)
800022c0:	00140413          	addi	s0,s0,1
800022c4:	fe079ae3          	bnez	a5,800022b8 <_svfiprintf_r+0x9c>
800022c8:	41a40db3          	sub	s11,s0,s10
800022cc:	17a40863          	beq	s0,s10,8000243c <_svfiprintf_r+0x220>
800022d0:	000d8693          	mv	a3,s11
800022d4:	000d0613          	mv	a2,s10
800022d8:	000a8593          	mv	a1,s5
800022dc:	000b0513          	mv	a0,s6
800022e0:	bf5ff0ef          	jal	ra,80001ed4 <__ssputs_r>
800022e4:	fff00793          	li	a5,-1
800022e8:	14f50a63          	beq	a0,a5,8000243c <_svfiprintf_r+0x220>
800022ec:	03412703          	lw	a4,52(sp)
800022f0:	00044783          	lbu	a5,0(s0)
800022f4:	01b70733          	add	a4,a4,s11
800022f8:	02e12a23          	sw	a4,52(sp)
800022fc:	14078063          	beqz	a5,8000243c <_svfiprintf_r+0x220>
80002300:	fff00793          	li	a5,-1
80002304:	00140413          	addi	s0,s0,1
80002308:	02012023          	sw	zero,32(sp)
8000230c:	02012623          	sw	zero,44(sp)
80002310:	02f12223          	sw	a5,36(sp)
80002314:	02012423          	sw	zero,40(sp)
80002318:	060101a3          	sb	zero,99(sp)
8000231c:	06012c23          	sw	zero,120(sp)
80002320:	0140006f          	j	80002334 <_svfiprintf_r+0x118>
80002324:	00070413          	mv	s0,a4
80002328:	02012703          	lw	a4,32(sp)
8000232c:	00f767b3          	or	a5,a4,a5
80002330:	02f12023          	sw	a5,32(sp)
80002334:	00044583          	lbu	a1,0(s0)
80002338:	00500613          	li	a2,5
8000233c:	d1848513          	addi	a0,s1,-744 # 80009d18 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d19>
80002340:	0d9000ef          	jal	ra,80002c18 <memchr>
80002344:	d1848793          	addi	a5,s1,-744
80002348:	00140713          	addi	a4,s0,1
8000234c:	40f507b3          	sub	a5,a0,a5
80002350:	00f917b3          	sll	a5,s2,a5
80002354:	00070d13          	mv	s10,a4
80002358:	fc0516e3          	bnez	a0,80002324 <_svfiprintf_r+0x108>
8000235c:	02012783          	lw	a5,32(sp)
80002360:	0107f693          	andi	a3,a5,16
80002364:	00068663          	beqz	a3,80002370 <_svfiprintf_r+0x154>
80002368:	02000693          	li	a3,32
8000236c:	06d101a3          	sb	a3,99(sp)
80002370:	0087f693          	andi	a3,a5,8
80002374:	00068663          	beqz	a3,80002380 <_svfiprintf_r+0x164>
80002378:	02b00693          	li	a3,43
8000237c:	06d101a3          	sb	a3,99(sp)
80002380:	00044583          	lbu	a1,0(s0)
80002384:	02a00693          	li	a3,42
80002388:	10d59863          	bne	a1,a3,80002498 <_svfiprintf_r+0x27c>
8000238c:	01c12703          	lw	a4,28(sp)
80002390:	00072683          	lw	a3,0(a4)
80002394:	00470713          	addi	a4,a4,4
80002398:	00e12e23          	sw	a4,28(sp)
8000239c:	1a06c463          	bltz	a3,80002544 <_svfiprintf_r+0x328>
800023a0:	02d12623          	sw	a3,44(sp)
800023a4:	00144583          	lbu	a1,1(s0)
800023a8:	02e00793          	li	a5,46
800023ac:	12f58c63          	beq	a1,a5,800024e4 <_svfiprintf_r+0x2c8>
800023b0:	00300613          	li	a2,3
800023b4:	d20a0513          	addi	a0,s4,-736 # 80009d20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d21>
800023b8:	061000ef          	jal	ra,80002c18 <memchr>
800023bc:	02050263          	beqz	a0,800023e0 <_svfiprintf_r+0x1c4>
800023c0:	d20a0793          	addi	a5,s4,-736
800023c4:	40f50533          	sub	a0,a0,a5
800023c8:	02012783          	lw	a5,32(sp)
800023cc:	04000713          	li	a4,64
800023d0:	00a71733          	sll	a4,a4,a0
800023d4:	00e7e7b3          	or	a5,a5,a4
800023d8:	001d0d13          	addi	s10,s10,1
800023dc:	02f12023          	sw	a5,32(sp)
800023e0:	000d4583          	lbu	a1,0(s10)
800023e4:	00600613          	li	a2,6
800023e8:	d24b8513          	addi	a0,s7,-732 # 80009d24 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d25>
800023ec:	02b10c23          	sb	a1,56(sp)
800023f0:	029000ef          	jal	ra,80002c18 <memchr>
800023f4:	001d0d13          	addi	s10,s10,1
800023f8:	16050a63          	beqz	a0,8000256c <_svfiprintf_r+0x350>
800023fc:	100c0e63          	beqz	s8,80002518 <_svfiprintf_r+0x2fc>
80002400:	01c10713          	addi	a4,sp,28
80002404:	ed4c8693          	addi	a3,s9,-300 # 80001ed4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80001ed5>
80002408:	000a8613          	mv	a2,s5
8000240c:	02010593          	addi	a1,sp,32
80002410:	000b0513          	mv	a0,s6
80002414:	00000097          	auipc	ra,0x0
80002418:	000000e7          	jalr	zero # 0 <CONFIG_2ND_LVL_INTR_01_OFFSET>
8000241c:	00050993          	mv	s3,a0
80002420:	fff00793          	li	a5,-1
80002424:	00f98c63          	beq	s3,a5,8000243c <_svfiprintf_r+0x220>
80002428:	03412783          	lw	a5,52(sp)
8000242c:	013787b3          	add	a5,a5,s3
80002430:	02f12a23          	sw	a5,52(sp)
80002434:	000d4783          	lbu	a5,0(s10)
80002438:	e6079ce3          	bnez	a5,800022b0 <_svfiprintf_r+0x94>
8000243c:	00cad783          	lhu	a5,12(s5)
80002440:	0407f793          	andi	a5,a5,64
80002444:	1a079e63          	bnez	a5,80002600 <_svfiprintf_r+0x3e4>
80002448:	03412503          	lw	a0,52(sp)
8000244c:	0bc12083          	lw	ra,188(sp)
80002450:	0b812403          	lw	s0,184(sp)
80002454:	0b412483          	lw	s1,180(sp)
80002458:	0b012903          	lw	s2,176(sp)
8000245c:	0ac12983          	lw	s3,172(sp)
80002460:	0a812a03          	lw	s4,168(sp)
80002464:	0a412a83          	lw	s5,164(sp)
80002468:	0a012b03          	lw	s6,160(sp)
8000246c:	09c12b83          	lw	s7,156(sp)
80002470:	09812c03          	lw	s8,152(sp)
80002474:	09412c83          	lw	s9,148(sp)
80002478:	09012d03          	lw	s10,144(sp)
8000247c:	08c12d83          	lw	s11,140(sp)
80002480:	0c010113          	addi	sp,sp,192
80002484:	00008067          	ret
80002488:	41a40db3          	sub	s11,s0,s10
8000248c:	e5a412e3          	bne	s0,s10,800022d0 <_svfiprintf_r+0xb4>
80002490:	00044783          	lbu	a5,0(s0)
80002494:	e69ff06f          	j	800022fc <_svfiprintf_r+0xe0>
80002498:	fd058693          	addi	a3,a1,-48
8000249c:	00900793          	li	a5,9
800024a0:	00040d13          	mv	s10,s0
800024a4:	f0d7e2e3          	bltu	a5,a3,800023a8 <_svfiprintf_r+0x18c>
800024a8:	02c12603          	lw	a2,44(sp)
800024ac:	00900513          	li	a0,9
800024b0:	0080006f          	j	800024b8 <_svfiprintf_r+0x29c>
800024b4:	00170713          	addi	a4,a4,1
800024b8:	00261793          	slli	a5,a2,0x2
800024bc:	00074583          	lbu	a1,0(a4)
800024c0:	00c787b3          	add	a5,a5,a2
800024c4:	00179793          	slli	a5,a5,0x1
800024c8:	00d78633          	add	a2,a5,a3
800024cc:	fd058693          	addi	a3,a1,-48
800024d0:	fed572e3          	bgeu	a0,a3,800024b4 <_svfiprintf_r+0x298>
800024d4:	02c12623          	sw	a2,44(sp)
800024d8:	02e00793          	li	a5,46
800024dc:	00070d13          	mv	s10,a4
800024e0:	ecf598e3          	bne	a1,a5,800023b0 <_svfiprintf_r+0x194>
800024e4:	001d4583          	lbu	a1,1(s10)
800024e8:	02a00793          	li	a5,42
800024ec:	0af59063          	bne	a1,a5,8000258c <_svfiprintf_r+0x370>
800024f0:	01c12783          	lw	a5,28(sp)
800024f4:	002d4583          	lbu	a1,2(s10)
800024f8:	002d0693          	addi	a3,s10,2
800024fc:	0007a703          	lw	a4,0(a5)
80002500:	00478793          	addi	a5,a5,4
80002504:	00f12e23          	sw	a5,28(sp)
80002508:	02e12223          	sw	a4,36(sp)
8000250c:	02074463          	bltz	a4,80002534 <_svfiprintf_r+0x318>
80002510:	00068d13          	mv	s10,a3
80002514:	e9dff06f          	j	800023b0 <_svfiprintf_r+0x194>
80002518:	02012703          	lw	a4,32(sp)
8000251c:	01c12783          	lw	a5,28(sp)
80002520:	10077713          	andi	a4,a4,256
80002524:	02070a63          	beqz	a4,80002558 <_svfiprintf_r+0x33c>
80002528:	00478793          	addi	a5,a5,4
8000252c:	00f12e23          	sw	a5,28(sp)
80002530:	ef9ff06f          	j	80002428 <_svfiprintf_r+0x20c>
80002534:	fff00793          	li	a5,-1
80002538:	02f12223          	sw	a5,36(sp)
8000253c:	00068d13          	mv	s10,a3
80002540:	e71ff06f          	j	800023b0 <_svfiprintf_r+0x194>
80002544:	40d006b3          	neg	a3,a3
80002548:	0027e793          	ori	a5,a5,2
8000254c:	02d12623          	sw	a3,44(sp)
80002550:	02f12023          	sw	a5,32(sp)
80002554:	e51ff06f          	j	800023a4 <_svfiprintf_r+0x188>
80002558:	00778793          	addi	a5,a5,7
8000255c:	ff87f793          	andi	a5,a5,-8
80002560:	00878793          	addi	a5,a5,8
80002564:	00f12e23          	sw	a5,28(sp)
80002568:	ec1ff06f          	j	80002428 <_svfiprintf_r+0x20c>
8000256c:	01c10713          	addi	a4,sp,28
80002570:	ed4c8693          	addi	a3,s9,-300
80002574:	000a8613          	mv	a2,s5
80002578:	02010593          	addi	a1,sp,32
8000257c:	000b0513          	mv	a0,s6
80002580:	298000ef          	jal	ra,80002818 <_printf_i>
80002584:	00050993          	mv	s3,a0
80002588:	e99ff06f          	j	80002420 <_svfiprintf_r+0x204>
8000258c:	02012223          	sw	zero,36(sp)
80002590:	fd058713          	addi	a4,a1,-48
80002594:	00900793          	li	a5,9
80002598:	001d0d13          	addi	s10,s10,1
8000259c:	e0e7eae3          	bltu	a5,a4,800023b0 <_svfiprintf_r+0x194>
800025a0:	00000693          	li	a3,0
800025a4:	00900613          	li	a2,9
800025a8:	001d4583          	lbu	a1,1(s10)
800025ac:	00269793          	slli	a5,a3,0x2
800025b0:	00d787b3          	add	a5,a5,a3
800025b4:	00179793          	slli	a5,a5,0x1
800025b8:	00e786b3          	add	a3,a5,a4
800025bc:	fd058713          	addi	a4,a1,-48
800025c0:	001d0d13          	addi	s10,s10,1
800025c4:	fee672e3          	bgeu	a2,a4,800025a8 <_svfiprintf_r+0x38c>
800025c8:	02d12223          	sw	a3,36(sp)
800025cc:	de5ff06f          	j	800023b0 <_svfiprintf_r+0x194>
800025d0:	04000593          	li	a1,64
800025d4:	00d12623          	sw	a3,12(sp)
800025d8:	a41fe0ef          	jal	ra,80001018 <_malloc_r>
800025dc:	00aaa023          	sw	a0,0(s5)
800025e0:	00aaa823          	sw	a0,16(s5)
800025e4:	00c12683          	lw	a3,12(sp)
800025e8:	00050863          	beqz	a0,800025f8 <_svfiprintf_r+0x3dc>
800025ec:	04000793          	li	a5,64
800025f0:	00faaa23          	sw	a5,20(s5)
800025f4:	c85ff06f          	j	80002278 <_svfiprintf_r+0x5c>
800025f8:	00c00793          	li	a5,12
800025fc:	00fb2023          	sw	a5,0(s6)
80002600:	fff00513          	li	a0,-1
80002604:	e49ff06f          	j	8000244c <_svfiprintf_r+0x230>

80002608 <_printf_common>:
80002608:	00308013          	addi	zero,ra,3 # 80002417 <_svfiprintf_r+0x1fb>
8000260c:	fd010113          	addi	sp,sp,-48
80002610:	02812423          	sw	s0,40(sp)
80002614:	00058413          	mv	s0,a1
80002618:	01042783          	lw	a5,16(s0)
8000261c:	0085a583          	lw	a1,8(a1)
80002620:	03212023          	sw	s2,32(sp)
80002624:	01312e23          	sw	s3,28(sp)
80002628:	01412c23          	sw	s4,24(sp)
8000262c:	01512a23          	sw	s5,20(sp)
80002630:	02112623          	sw	ra,44(sp)
80002634:	02912223          	sw	s1,36(sp)
80002638:	01612823          	sw	s6,16(sp)
8000263c:	01712623          	sw	s7,12(sp)
80002640:	00050913          	mv	s2,a0
80002644:	00060a93          	mv	s5,a2
80002648:	00068993          	mv	s3,a3
8000264c:	00070a13          	mv	s4,a4
80002650:	00b7d463          	bge	a5,a1,80002658 <_printf_common+0x50>
80002654:	00058793          	mv	a5,a1
80002658:	00faa023          	sw	a5,0(s5)
8000265c:	04344683          	lbu	a3,67(s0)
80002660:	00068663          	beqz	a3,8000266c <_printf_common+0x64>
80002664:	00178793          	addi	a5,a5,1
80002668:	00faa023          	sw	a5,0(s5)
8000266c:	00042783          	lw	a5,0(s0)
80002670:	0207f713          	andi	a4,a5,32
80002674:	14070063          	beqz	a4,800027b4 <_printf_common+0x1ac>
80002678:	000aa703          	lw	a4,0(s5)
8000267c:	00270713          	addi	a4,a4,2
80002680:	00eaa023          	sw	a4,0(s5)
80002684:	00042783          	lw	a5,0(s0)
80002688:	0067f693          	andi	a3,a5,6
8000268c:	00078613          	mv	a2,a5
80002690:	00069e63          	bnez	a3,800026ac <_printf_common+0xa4>
80002694:	00c42683          	lw	a3,12(s0)
80002698:	01940b93          	addi	s7,s0,25
8000269c:	00000493          	li	s1,0
800026a0:	fff00b13          	li	s6,-1
800026a4:	00078613          	mv	a2,a5
800026a8:	0ed74663          	blt	a4,a3,80002794 <_printf_common+0x18c>
800026ac:	04344683          	lbu	a3,67(s0)
800026b0:	02067613          	andi	a2,a2,32
800026b4:	00d036b3          	snez	a3,a3
800026b8:	02060263          	beqz	a2,800026dc <_printf_common+0xd4>
800026bc:	00d407b3          	add	a5,s0,a3
800026c0:	03000713          	li	a4,48
800026c4:	04e781a3          	sb	a4,67(a5)
800026c8:	04544703          	lbu	a4,69(s0)
800026cc:	00168793          	addi	a5,a3,1
800026d0:	00f407b3          	add	a5,s0,a5
800026d4:	00268693          	addi	a3,a3,2
800026d8:	04e781a3          	sb	a4,67(a5)
800026dc:	04340613          	addi	a2,s0,67
800026e0:	00098593          	mv	a1,s3
800026e4:	00090513          	mv	a0,s2
800026e8:	000a00e7          	jalr	s4
800026ec:	fff00793          	li	a5,-1
800026f0:	06f50263          	beq	a0,a5,80002754 <_printf_common+0x14c>
800026f4:	00042783          	lw	a5,0(s0)
800026f8:	00400593          	li	a1,4
800026fc:	00c42683          	lw	a3,12(s0)
80002700:	0067f793          	andi	a5,a5,6
80002704:	000aa503          	lw	a0,0(s5)
80002708:	00842703          	lw	a4,8(s0)
8000270c:	01042603          	lw	a2,16(s0)
80002710:	0cb78863          	beq	a5,a1,800027e0 <_printf_common+0x1d8>
80002714:	0ee65263          	bge	a2,a4,800027f8 <_printf_common+0x1f0>
80002718:	00000a93          	li	s5,0
8000271c:	40c70733          	sub	a4,a4,a2
80002720:	00ea8ab3          	add	s5,s5,a4
80002724:	01a40413          	addi	s0,s0,26
80002728:	00000493          	li	s1,0
8000272c:	fff00b13          	li	s6,-1
80002730:	0080006f          	j	80002738 <_printf_common+0x130>
80002734:	0d54d263          	bge	s1,s5,800027f8 <_printf_common+0x1f0>
80002738:	00100693          	li	a3,1
8000273c:	00040613          	mv	a2,s0
80002740:	00098593          	mv	a1,s3
80002744:	00090513          	mv	a0,s2
80002748:	000a00e7          	jalr	s4
8000274c:	00148493          	addi	s1,s1,1
80002750:	ff6512e3          	bne	a0,s6,80002734 <_printf_common+0x12c>
80002754:	fff00513          	li	a0,-1
80002758:	02c12083          	lw	ra,44(sp)
8000275c:	02812403          	lw	s0,40(sp)
80002760:	02412483          	lw	s1,36(sp)
80002764:	02012903          	lw	s2,32(sp)
80002768:	01c12983          	lw	s3,28(sp)
8000276c:	01812a03          	lw	s4,24(sp)
80002770:	01412a83          	lw	s5,20(sp)
80002774:	01012b03          	lw	s6,16(sp)
80002778:	00c12b83          	lw	s7,12(sp)
8000277c:	03010113          	addi	sp,sp,48
80002780:	00008067          	ret
80002784:	00c42783          	lw	a5,12(s0)
80002788:	000aa703          	lw	a4,0(s5)
8000278c:	40e787b3          	sub	a5,a5,a4
80002790:	06f4d863          	bge	s1,a5,80002800 <_printf_common+0x1f8>
80002794:	00100693          	li	a3,1
80002798:	000b8613          	mv	a2,s7
8000279c:	00098593          	mv	a1,s3
800027a0:	00090513          	mv	a0,s2
800027a4:	000a00e7          	jalr	s4
800027a8:	00148493          	addi	s1,s1,1
800027ac:	fd651ce3          	bne	a0,s6,80002784 <_printf_common+0x17c>
800027b0:	fa5ff06f          	j	80002754 <_printf_common+0x14c>
800027b4:	0067f713          	andi	a4,a5,6
800027b8:	00d036b3          	snez	a3,a3
800027bc:	f20710e3          	bnez	a4,800026dc <_printf_common+0xd4>
800027c0:	000aa703          	lw	a4,0(s5)
800027c4:	00c42683          	lw	a3,12(s0)
800027c8:	01940b93          	addi	s7,s0,25
800027cc:	00000493          	li	s1,0
800027d0:	fff00b13          	li	s6,-1
800027d4:	00078613          	mv	a2,a5
800027d8:	fad74ee3          	blt	a4,a3,80002794 <_printf_common+0x18c>
800027dc:	ed1ff06f          	j	800026ac <_printf_common+0xa4>
800027e0:	40a686b3          	sub	a3,a3,a0
800027e4:	fff6ca93          	not	s5,a3
800027e8:	41fada93          	srai	s5,s5,0x1f
800027ec:	0156fab3          	and	s5,a3,s5
800027f0:	f2e646e3          	blt	a2,a4,8000271c <_printf_common+0x114>
800027f4:	f2d048e3          	bgtz	a3,80002724 <_printf_common+0x11c>
800027f8:	00000513          	li	a0,0
800027fc:	f5dff06f          	j	80002758 <_printf_common+0x150>
80002800:	00042603          	lw	a2,0(s0)
80002804:	04344683          	lbu	a3,67(s0)
80002808:	02067613          	andi	a2,a2,32
8000280c:	00d036b3          	snez	a3,a3
80002810:	ea0616e3          	bnez	a2,800026bc <_printf_common+0xb4>
80002814:	ec9ff06f          	j	800026dc <_printf_common+0xd4>

80002818 <_printf_i>:
80002818:	00308013          	addi	zero,ra,3
8000281c:	fc010113          	addi	sp,sp,-64
80002820:	02812c23          	sw	s0,56(sp)
80002824:	03212823          	sw	s2,48(sp)
80002828:	03312623          	sw	s3,44(sp)
8000282c:	03412423          	sw	s4,40(sp)
80002830:	02112e23          	sw	ra,60(sp)
80002834:	02912a23          	sw	s1,52(sp)
80002838:	03512223          	sw	s5,36(sp)
8000283c:	03612023          	sw	s6,32(sp)
80002840:	01712e23          	sw	s7,28(sp)
80002844:	0185c803          	lbu	a6,24(a1)
80002848:	00058413          	mv	s0,a1
8000284c:	00050913          	mv	s2,a0
80002850:	00060993          	mv	s3,a2
80002854:	00068a13          	mv	s4,a3
80002858:	04358593          	addi	a1,a1,67
8000285c:	04080863          	beqz	a6,800028ac <_printf_i+0x94>
80002860:	fa880793          	addi	a5,a6,-88
80002864:	0ff7f793          	zext.b	a5,a5
80002868:	02000693          	li	a3,32
8000286c:	10f6e663          	bltu	a3,a5,80002978 <_printf_i+0x160>
80002870:	800096b7          	lui	a3,0x80009
80002874:	00279793          	slli	a5,a5,0x2
80002878:	e1068693          	addi	a3,a3,-496 # 80008e10 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008e11>
8000287c:	00d787b3          	add	a5,a5,a3
80002880:	0007a783          	lw	a5,0(a5)
80002884:	00078067          	jr	a5
80002888:	00042783          	lw	a5,0(s0)
8000288c:	00072683          	lw	a3,0(a4)
80002890:	01442503          	lw	a0,20(s0)
80002894:	0807f613          	andi	a2,a5,128
80002898:	00468813          	addi	a6,a3,4
8000289c:	2e060a63          	beqz	a2,80002b90 <_printf_i+0x378>
800028a0:	01072023          	sw	a6,0(a4)
800028a4:	0006a783          	lw	a5,0(a3)
800028a8:	00a7a023          	sw	a0,0(a5)
800028ac:	00042823          	sw	zero,16(s0)
800028b0:	00058493          	mv	s1,a1
800028b4:	000a0713          	mv	a4,s4
800028b8:	00098693          	mv	a3,s3
800028bc:	00c10613          	addi	a2,sp,12
800028c0:	00040593          	mv	a1,s0
800028c4:	00090513          	mv	a0,s2
800028c8:	d41ff0ef          	jal	ra,80002608 <_printf_common>
800028cc:	fff00a93          	li	s5,-1
800028d0:	07550663          	beq	a0,s5,8000293c <_printf_i+0x124>
800028d4:	01042683          	lw	a3,16(s0)
800028d8:	00048613          	mv	a2,s1
800028dc:	00098593          	mv	a1,s3
800028e0:	00090513          	mv	a0,s2
800028e4:	000a00e7          	jalr	s4
800028e8:	05550a63          	beq	a0,s5,8000293c <_printf_i+0x124>
800028ec:	00042783          	lw	a5,0(s0)
800028f0:	00c42503          	lw	a0,12(s0)
800028f4:	00c12a83          	lw	s5,12(sp)
800028f8:	0027f793          	andi	a5,a5,2
800028fc:	06078863          	beqz	a5,8000296c <_printf_i+0x154>
80002900:	06aad663          	bge	s5,a0,8000296c <_printf_i+0x154>
80002904:	01940b93          	addi	s7,s0,25
80002908:	00000493          	li	s1,0
8000290c:	fff00b13          	li	s6,-1
80002910:	0140006f          	j	80002924 <_printf_i+0x10c>
80002914:	00c42503          	lw	a0,12(s0)
80002918:	00148493          	addi	s1,s1,1
8000291c:	415507b3          	sub	a5,a0,s5
80002920:	04f4d663          	bge	s1,a5,8000296c <_printf_i+0x154>
80002924:	00100693          	li	a3,1
80002928:	000b8613          	mv	a2,s7
8000292c:	00098593          	mv	a1,s3
80002930:	00090513          	mv	a0,s2
80002934:	000a00e7          	jalr	s4
80002938:	fd651ee3          	bne	a0,s6,80002914 <_printf_i+0xfc>
8000293c:	fff00513          	li	a0,-1
80002940:	03c12083          	lw	ra,60(sp)
80002944:	03812403          	lw	s0,56(sp)
80002948:	03412483          	lw	s1,52(sp)
8000294c:	03012903          	lw	s2,48(sp)
80002950:	02c12983          	lw	s3,44(sp)
80002954:	02812a03          	lw	s4,40(sp)
80002958:	02412a83          	lw	s5,36(sp)
8000295c:	02012b03          	lw	s6,32(sp)
80002960:	01c12b83          	lw	s7,28(sp)
80002964:	04010113          	addi	sp,sp,64
80002968:	00008067          	ret
8000296c:	fd555ae3          	bge	a0,s5,80002940 <_printf_i+0x128>
80002970:	000a8513          	mv	a0,s5
80002974:	fcdff06f          	j	80002940 <_printf_i+0x128>
80002978:	04240493          	addi	s1,s0,66
8000297c:	05040123          	sb	a6,66(s0)
80002980:	00100793          	li	a5,1
80002984:	00f42823          	sw	a5,16(s0)
80002988:	040401a3          	sb	zero,67(s0)
8000298c:	f29ff06f          	j	800028b4 <_printf_i+0x9c>
80002990:	00042683          	lw	a3,0(s0)
80002994:	00072783          	lw	a5,0(a4)
80002998:	0806f613          	andi	a2,a3,128
8000299c:	00478513          	addi	a0,a5,4
800029a0:	00061663          	bnez	a2,800029ac <_printf_i+0x194>
800029a4:	0406f613          	andi	a2,a3,64
800029a8:	20061663          	bnez	a2,80002bb4 <_printf_i+0x39c>
800029ac:	0007a603          	lw	a2,0(a5)
800029b0:	00a72023          	sw	a0,0(a4)
800029b4:	00060793          	mv	a5,a2
800029b8:	00442703          	lw	a4,4(s0)
800029bc:	20064a63          	bltz	a2,80002bd0 <_printf_i+0x3b8>
800029c0:	8000a637          	lui	a2,0x8000a
800029c4:	d2c60613          	addi	a2,a2,-724 # 80009d2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d2d>
800029c8:	00a00513          	li	a0,10
800029cc:	0f00006f          	j	80002abc <_printf_i+0x2a4>
800029d0:	00042783          	lw	a5,0(s0)
800029d4:	00072683          	lw	a3,0(a4)
800029d8:	0807f613          	andi	a2,a5,128
800029dc:	00468513          	addi	a0,a3,4
800029e0:	00061663          	bnez	a2,800029ec <_printf_i+0x1d4>
800029e4:	0407f793          	andi	a5,a5,64
800029e8:	1c079063          	bnez	a5,80002ba8 <_printf_i+0x390>
800029ec:	0006a783          	lw	a5,0(a3)
800029f0:	00a72023          	sw	a0,0(a4)
800029f4:	8000a637          	lui	a2,0x8000a
800029f8:	06f00713          	li	a4,111
800029fc:	d2c60613          	addi	a2,a2,-724 # 80009d2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d2d>
80002a00:	00800513          	li	a0,8
80002a04:	0ae80863          	beq	a6,a4,80002ab4 <_printf_i+0x29c>
80002a08:	00a00513          	li	a0,10
80002a0c:	0a80006f          	j	80002ab4 <_printf_i+0x29c>
80002a10:	00072683          	lw	a3,0(a4)
80002a14:	04240493          	addi	s1,s0,66
80002a18:	00100793          	li	a5,1
80002a1c:	0006a603          	lw	a2,0(a3)
80002a20:	00468693          	addi	a3,a3,4
80002a24:	00d72023          	sw	a3,0(a4)
80002a28:	04c40123          	sb	a2,66(s0)
80002a2c:	f59ff06f          	j	80002984 <_printf_i+0x16c>
80002a30:	00072783          	lw	a5,0(a4)
80002a34:	00442603          	lw	a2,4(s0)
80002a38:	00000593          	li	a1,0
80002a3c:	00478693          	addi	a3,a5,4
80002a40:	00d72023          	sw	a3,0(a4)
80002a44:	0007a483          	lw	s1,0(a5)
80002a48:	00048513          	mv	a0,s1
80002a4c:	1cc000ef          	jal	ra,80002c18 <memchr>
80002a50:	1c050063          	beqz	a0,80002c10 <_printf_i+0x3f8>
80002a54:	409507b3          	sub	a5,a0,s1
80002a58:	00f42223          	sw	a5,4(s0)
80002a5c:	f29ff06f          	j	80002984 <_printf_i+0x16c>
80002a60:	00042683          	lw	a3,0(s0)
80002a64:	0206e693          	ori	a3,a3,32
80002a68:	00d42023          	sw	a3,0(s0)
80002a6c:	07800793          	li	a5,120
80002a70:	04f402a3          	sb	a5,69(s0)
80002a74:	00072503          	lw	a0,0(a4)
80002a78:	8000a637          	lui	a2,0x8000a
80002a7c:	0806f793          	andi	a5,a3,128
80002a80:	d4060613          	addi	a2,a2,-704 # 80009d40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d41>
80002a84:	00450813          	addi	a6,a0,4
80002a88:	08079e63          	bnez	a5,80002b24 <_printf_i+0x30c>
80002a8c:	0406f793          	andi	a5,a3,64
80002a90:	08078a63          	beqz	a5,80002b24 <_printf_i+0x30c>
80002a94:	00055783          	lhu	a5,0(a0)
80002a98:	01072023          	sw	a6,0(a4)
80002a9c:	0016f713          	andi	a4,a3,1
80002aa0:	00070663          	beqz	a4,80002aac <_printf_i+0x294>
80002aa4:	0206e693          	ori	a3,a3,32
80002aa8:	00d42023          	sw	a3,0(s0)
80002aac:	04078263          	beqz	a5,80002af0 <_printf_i+0x2d8>
80002ab0:	01000513          	li	a0,16
80002ab4:	00442703          	lw	a4,4(s0)
80002ab8:	040401a3          	sb	zero,67(s0)
80002abc:	00e42423          	sw	a4,8(s0)
80002ac0:	06074c63          	bltz	a4,80002b38 <_printf_i+0x320>
80002ac4:	00042683          	lw	a3,0(s0)
80002ac8:	ffb6f693          	andi	a3,a3,-5
80002acc:	00d42023          	sw	a3,0(s0)
80002ad0:	06079463          	bnez	a5,80002b38 <_printf_i+0x320>
80002ad4:	00058493          	mv	s1,a1
80002ad8:	12071463          	bnez	a4,80002c00 <_printf_i+0x3e8>
80002adc:	00800793          	li	a5,8
80002ae0:	08f50463          	beq	a0,a5,80002b68 <_printf_i+0x350>
80002ae4:	409585b3          	sub	a1,a1,s1
80002ae8:	00b42823          	sw	a1,16(s0)
80002aec:	dc9ff06f          	j	800028b4 <_printf_i+0x9c>
80002af0:	00042703          	lw	a4,0(s0)
80002af4:	fdf77713          	andi	a4,a4,-33
80002af8:	00e42023          	sw	a4,0(s0)
80002afc:	fb5ff06f          	j	80002ab0 <_printf_i+0x298>
80002b00:	05800793          	li	a5,88
80002b04:	04f402a3          	sb	a5,69(s0)
80002b08:	00042683          	lw	a3,0(s0)
80002b0c:	00072503          	lw	a0,0(a4)
80002b10:	8000a637          	lui	a2,0x8000a
80002b14:	0806f793          	andi	a5,a3,128
80002b18:	d2c60613          	addi	a2,a2,-724 # 80009d2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d2d>
80002b1c:	00450813          	addi	a6,a0,4
80002b20:	f60786e3          	beqz	a5,80002a8c <_printf_i+0x274>
80002b24:	00052783          	lw	a5,0(a0)
80002b28:	01072023          	sw	a6,0(a4)
80002b2c:	f71ff06f          	j	80002a9c <_printf_i+0x284>
80002b30:	00042683          	lw	a3,0(s0)
80002b34:	f39ff06f          	j	80002a6c <_printf_i+0x254>
80002b38:	00050893          	mv	a7,a0
80002b3c:	00058493          	mv	s1,a1
80002b40:	0317f833          	remu	a6,a5,a7
80002b44:	fff48493          	addi	s1,s1,-1
80002b48:	00078713          	mv	a4,a5
80002b4c:	01060833          	add	a6,a2,a6
80002b50:	00084683          	lbu	a3,0(a6)
80002b54:	0317d7b3          	divu	a5,a5,a7
80002b58:	00d48023          	sb	a3,0(s1)
80002b5c:	ff1772e3          	bgeu	a4,a7,80002b40 <_printf_i+0x328>
80002b60:	00800793          	li	a5,8
80002b64:	f8f510e3          	bne	a0,a5,80002ae4 <_printf_i+0x2cc>
80002b68:	00042783          	lw	a5,0(s0)
80002b6c:	0017f793          	andi	a5,a5,1
80002b70:	f6078ae3          	beqz	a5,80002ae4 <_printf_i+0x2cc>
80002b74:	00442703          	lw	a4,4(s0)
80002b78:	01042783          	lw	a5,16(s0)
80002b7c:	f6e7c4e3          	blt	a5,a4,80002ae4 <_printf_i+0x2cc>
80002b80:	03000793          	li	a5,48
80002b84:	fef48fa3          	sb	a5,-1(s1)
80002b88:	fff48493          	addi	s1,s1,-1
80002b8c:	f59ff06f          	j	80002ae4 <_printf_i+0x2cc>
80002b90:	0407f793          	andi	a5,a5,64
80002b94:	01072023          	sw	a6,0(a4)
80002b98:	02078663          	beqz	a5,80002bc4 <_printf_i+0x3ac>
80002b9c:	0006a783          	lw	a5,0(a3)
80002ba0:	00a79023          	sh	a0,0(a5)
80002ba4:	d09ff06f          	j	800028ac <_printf_i+0x94>
80002ba8:	0006d783          	lhu	a5,0(a3)
80002bac:	00a72023          	sw	a0,0(a4)
80002bb0:	e45ff06f          	j	800029f4 <_printf_i+0x1dc>
80002bb4:	00079783          	lh	a5,0(a5)
80002bb8:	00a72023          	sw	a0,0(a4)
80002bbc:	00078613          	mv	a2,a5
80002bc0:	df9ff06f          	j	800029b8 <_printf_i+0x1a0>
80002bc4:	0006a783          	lw	a5,0(a3)
80002bc8:	00a7a023          	sw	a0,0(a5)
80002bcc:	ce1ff06f          	j	800028ac <_printf_i+0x94>
80002bd0:	02d00613          	li	a2,45
80002bd4:	04c401a3          	sb	a2,67(s0)
80002bd8:	00e42423          	sw	a4,8(s0)
80002bdc:	00074663          	bltz	a4,80002be8 <_printf_i+0x3d0>
80002be0:	ffb6f693          	andi	a3,a3,-5
80002be4:	00d42023          	sw	a3,0(s0)
80002be8:	8000a637          	lui	a2,0x8000a
80002bec:	40f007b3          	neg	a5,a5
80002bf0:	00a00893          	li	a7,10
80002bf4:	d2c60613          	addi	a2,a2,-724 # 80009d2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d2d>
80002bf8:	00a00513          	li	a0,10
80002bfc:	f41ff06f          	j	80002b3c <_printf_i+0x324>
80002c00:	00064783          	lbu	a5,0(a2)
80002c04:	04240493          	addi	s1,s0,66
80002c08:	04f40123          	sb	a5,66(s0)
80002c0c:	ed1ff06f          	j	80002adc <_printf_i+0x2c4>
80002c10:	00442783          	lw	a5,4(s0)
80002c14:	d71ff06f          	j	80002984 <_printf_i+0x16c>

80002c18 <memchr>:
80002c18:	00308013          	addi	zero,ra,3
80002c1c:	00357793          	andi	a5,a0,3
80002c20:	0ff5f693          	zext.b	a3,a1
80002c24:	02078e63          	beqz	a5,80002c60 <memchr+0x48>
80002c28:	fff60793          	addi	a5,a2,-1
80002c2c:	02060663          	beqz	a2,80002c58 <memchr+0x40>
80002c30:	fff00613          	li	a2,-1
80002c34:	0180006f          	j	80002c4c <memchr+0x34>
80002c38:	00150513          	addi	a0,a0,1
80002c3c:	00357713          	andi	a4,a0,3
80002c40:	02070263          	beqz	a4,80002c64 <memchr+0x4c>
80002c44:	fff78793          	addi	a5,a5,-1
80002c48:	00c78863          	beq	a5,a2,80002c58 <memchr+0x40>
80002c4c:	00054703          	lbu	a4,0(a0)
80002c50:	fed714e3          	bne	a4,a3,80002c38 <memchr+0x20>
80002c54:	00008067          	ret
80002c58:	00000513          	li	a0,0
80002c5c:	00008067          	ret
80002c60:	00060793          	mv	a5,a2
80002c64:	00300713          	li	a4,3
80002c68:	04f77c63          	bgeu	a4,a5,80002cc0 <memchr+0xa8>
80002c6c:	0ff5f593          	zext.b	a1,a1
80002c70:	00859713          	slli	a4,a1,0x8
80002c74:	00b705b3          	add	a1,a4,a1
80002c78:	01059713          	slli	a4,a1,0x10
80002c7c:	feff08b7          	lui	a7,0xfeff0
80002c80:	80808837          	lui	a6,0x80808
80002c84:	00e585b3          	add	a1,a1,a4
80002c88:	eff88893          	addi	a7,a7,-257 # fefefeff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xfefeff00>
80002c8c:	08080813          	addi	a6,a6,128 # 80808080 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80808081>
80002c90:	00300313          	li	t1,3
80002c94:	0100006f          	j	80002ca4 <memchr+0x8c>
80002c98:	ffc78793          	addi	a5,a5,-4
80002c9c:	00450513          	addi	a0,a0,4
80002ca0:	02f37063          	bgeu	t1,a5,80002cc0 <memchr+0xa8>
80002ca4:	00052703          	lw	a4,0(a0)
80002ca8:	00e5c733          	xor	a4,a1,a4
80002cac:	01170633          	add	a2,a4,a7
80002cb0:	fff74713          	not	a4,a4
80002cb4:	00e67733          	and	a4,a2,a4
80002cb8:	01077733          	and	a4,a4,a6
80002cbc:	fc070ee3          	beqz	a4,80002c98 <memchr+0x80>
80002cc0:	00f50733          	add	a4,a0,a5
80002cc4:	00079863          	bnez	a5,80002cd4 <memchr+0xbc>
80002cc8:	f91ff06f          	j	80002c58 <memchr+0x40>
80002ccc:	00150513          	addi	a0,a0,1
80002cd0:	f8a704e3          	beq	a4,a0,80002c58 <memchr+0x40>
80002cd4:	00054783          	lbu	a5,0(a0)
80002cd8:	fed79ae3          	bne	a5,a3,80002ccc <memchr+0xb4>
80002cdc:	00008067          	ret

80002ce0 <memmove>:
80002ce0:	00308013          	addi	zero,ra,3
80002ce4:	fd010113          	addi	sp,sp,-48
80002ce8:	02812623          	sw	s0,44(sp)
80002cec:	03010413          	addi	s0,sp,48
80002cf0:	fca42e23          	sw	a0,-36(s0)
80002cf4:	fcb42c23          	sw	a1,-40(s0)
80002cf8:	fcc42a23          	sw	a2,-44(s0)
80002cfc:	fdc42783          	lw	a5,-36(s0)
80002d00:	fef42623          	sw	a5,-20(s0)
80002d04:	fd842783          	lw	a5,-40(s0)
80002d08:	fef42423          	sw	a5,-24(s0)
80002d0c:	fe842703          	lw	a4,-24(s0)
80002d10:	fec42783          	lw	a5,-20(s0)
80002d14:	06f77c63          	bgeu	a4,a5,80002d8c <memmove+0xac>
80002d18:	fe842703          	lw	a4,-24(s0)
80002d1c:	fd442783          	lw	a5,-44(s0)
80002d20:	00f707b3          	add	a5,a4,a5
80002d24:	fec42703          	lw	a4,-20(s0)
80002d28:	06f77263          	bgeu	a4,a5,80002d8c <memmove+0xac>
80002d2c:	fe842703          	lw	a4,-24(s0)
80002d30:	fd442783          	lw	a5,-44(s0)
80002d34:	00f707b3          	add	a5,a4,a5
80002d38:	fef42423          	sw	a5,-24(s0)
80002d3c:	fec42703          	lw	a4,-20(s0)
80002d40:	fd442783          	lw	a5,-44(s0)
80002d44:	00f707b3          	add	a5,a4,a5
80002d48:	fef42623          	sw	a5,-20(s0)
80002d4c:	02c0006f          	j	80002d78 <memmove+0x98>
80002d50:	fe842783          	lw	a5,-24(s0)
80002d54:	fff78793          	addi	a5,a5,-1
80002d58:	fef42423          	sw	a5,-24(s0)
80002d5c:	fec42783          	lw	a5,-20(s0)
80002d60:	fff78793          	addi	a5,a5,-1
80002d64:	fef42623          	sw	a5,-20(s0)
80002d68:	fe842783          	lw	a5,-24(s0)
80002d6c:	0007c703          	lbu	a4,0(a5)
80002d70:	fec42783          	lw	a5,-20(s0)
80002d74:	00e78023          	sb	a4,0(a5)
80002d78:	fd442783          	lw	a5,-44(s0)
80002d7c:	fff78713          	addi	a4,a5,-1
80002d80:	fce42a23          	sw	a4,-44(s0)
80002d84:	fc0796e3          	bnez	a5,80002d50 <memmove+0x70>
80002d88:	1500006f          	j	80002ed8 <memmove+0x1f8>
80002d8c:	fd442703          	lw	a4,-44(s0)
80002d90:	00f00793          	li	a5,15
80002d94:	12e7fa63          	bgeu	a5,a4,80002ec8 <memmove+0x1e8>
80002d98:	fe842703          	lw	a4,-24(s0)
80002d9c:	fec42783          	lw	a5,-20(s0)
80002da0:	00f767b3          	or	a5,a4,a5
80002da4:	0037f793          	andi	a5,a5,3
80002da8:	12079063          	bnez	a5,80002ec8 <memmove+0x1e8>
80002dac:	fec42783          	lw	a5,-20(s0)
80002db0:	fef42223          	sw	a5,-28(s0)
80002db4:	fe842783          	lw	a5,-24(s0)
80002db8:	fef42023          	sw	a5,-32(s0)
80002dbc:	0900006f          	j	80002e4c <memmove+0x16c>
80002dc0:	fe042703          	lw	a4,-32(s0)
80002dc4:	00470793          	addi	a5,a4,4
80002dc8:	fef42023          	sw	a5,-32(s0)
80002dcc:	fe442783          	lw	a5,-28(s0)
80002dd0:	00478693          	addi	a3,a5,4
80002dd4:	fed42223          	sw	a3,-28(s0)
80002dd8:	00072703          	lw	a4,0(a4)
80002ddc:	00e7a023          	sw	a4,0(a5)
80002de0:	fe042703          	lw	a4,-32(s0)
80002de4:	00470793          	addi	a5,a4,4
80002de8:	fef42023          	sw	a5,-32(s0)
80002dec:	fe442783          	lw	a5,-28(s0)
80002df0:	00478693          	addi	a3,a5,4
80002df4:	fed42223          	sw	a3,-28(s0)
80002df8:	00072703          	lw	a4,0(a4)
80002dfc:	00e7a023          	sw	a4,0(a5)
80002e00:	fe042703          	lw	a4,-32(s0)
80002e04:	00470793          	addi	a5,a4,4
80002e08:	fef42023          	sw	a5,-32(s0)
80002e0c:	fe442783          	lw	a5,-28(s0)
80002e10:	00478693          	addi	a3,a5,4
80002e14:	fed42223          	sw	a3,-28(s0)
80002e18:	00072703          	lw	a4,0(a4)
80002e1c:	00e7a023          	sw	a4,0(a5)
80002e20:	fe042703          	lw	a4,-32(s0)
80002e24:	00470793          	addi	a5,a4,4
80002e28:	fef42023          	sw	a5,-32(s0)
80002e2c:	fe442783          	lw	a5,-28(s0)
80002e30:	00478693          	addi	a3,a5,4
80002e34:	fed42223          	sw	a3,-28(s0)
80002e38:	00072703          	lw	a4,0(a4)
80002e3c:	00e7a023          	sw	a4,0(a5)
80002e40:	fd442783          	lw	a5,-44(s0)
80002e44:	ff078793          	addi	a5,a5,-16
80002e48:	fcf42a23          	sw	a5,-44(s0)
80002e4c:	fd442703          	lw	a4,-44(s0)
80002e50:	00f00793          	li	a5,15
80002e54:	f6e7e6e3          	bltu	a5,a4,80002dc0 <memmove+0xe0>
80002e58:	0300006f          	j	80002e88 <memmove+0x1a8>
80002e5c:	fe042703          	lw	a4,-32(s0)
80002e60:	00470793          	addi	a5,a4,4
80002e64:	fef42023          	sw	a5,-32(s0)
80002e68:	fe442783          	lw	a5,-28(s0)
80002e6c:	00478693          	addi	a3,a5,4
80002e70:	fed42223          	sw	a3,-28(s0)
80002e74:	00072703          	lw	a4,0(a4)
80002e78:	00e7a023          	sw	a4,0(a5)
80002e7c:	fd442783          	lw	a5,-44(s0)
80002e80:	ffc78793          	addi	a5,a5,-4
80002e84:	fcf42a23          	sw	a5,-44(s0)
80002e88:	fd442703          	lw	a4,-44(s0)
80002e8c:	00300793          	li	a5,3
80002e90:	fce7e6e3          	bltu	a5,a4,80002e5c <memmove+0x17c>
80002e94:	fe442783          	lw	a5,-28(s0)
80002e98:	fef42623          	sw	a5,-20(s0)
80002e9c:	fe042783          	lw	a5,-32(s0)
80002ea0:	fef42423          	sw	a5,-24(s0)
80002ea4:	0240006f          	j	80002ec8 <memmove+0x1e8>
80002ea8:	fe842703          	lw	a4,-24(s0)
80002eac:	00170793          	addi	a5,a4,1
80002eb0:	fef42423          	sw	a5,-24(s0)
80002eb4:	fec42783          	lw	a5,-20(s0)
80002eb8:	00178693          	addi	a3,a5,1
80002ebc:	fed42623          	sw	a3,-20(s0)
80002ec0:	00074703          	lbu	a4,0(a4)
80002ec4:	00e78023          	sb	a4,0(a5)
80002ec8:	fd442783          	lw	a5,-44(s0)
80002ecc:	fff78713          	addi	a4,a5,-1
80002ed0:	fce42a23          	sw	a4,-44(s0)
80002ed4:	fc079ae3          	bnez	a5,80002ea8 <memmove+0x1c8>
80002ed8:	fdc42783          	lw	a5,-36(s0)
80002edc:	00078513          	mv	a0,a5
80002ee0:	02c12403          	lw	s0,44(sp)
80002ee4:	03010113          	addi	sp,sp,48
80002ee8:	00008067          	ret

80002eec <_realloc_r>:
80002eec:	00308013          	addi	zero,ra,3
80002ef0:	fe010113          	addi	sp,sp,-32
80002ef4:	00812c23          	sw	s0,24(sp)
80002ef8:	00112e23          	sw	ra,28(sp)
80002efc:	00912a23          	sw	s1,20(sp)
80002f00:	01212823          	sw	s2,16(sp)
80002f04:	01312623          	sw	s3,12(sp)
80002f08:	00060413          	mv	s0,a2
80002f0c:	0a058863          	beqz	a1,80002fbc <_realloc_r+0xd0>
80002f10:	08060263          	beqz	a2,80002f94 <_realloc_r+0xa8>
80002f14:	00058493          	mv	s1,a1
80002f18:	00050913          	mv	s2,a0
80002f1c:	0c0000ef          	jal	ra,80002fdc <_malloc_usable_size_r>
80002f20:	00048993          	mv	s3,s1
80002f24:	02856263          	bltu	a0,s0,80002f48 <_realloc_r+0x5c>
80002f28:	01c12083          	lw	ra,28(sp)
80002f2c:	01812403          	lw	s0,24(sp)
80002f30:	01412483          	lw	s1,20(sp)
80002f34:	01012903          	lw	s2,16(sp)
80002f38:	00098513          	mv	a0,s3
80002f3c:	00c12983          	lw	s3,12(sp)
80002f40:	02010113          	addi	sp,sp,32
80002f44:	00008067          	ret
80002f48:	00040593          	mv	a1,s0
80002f4c:	00090513          	mv	a0,s2
80002f50:	8c8fe0ef          	jal	ra,80001018 <_malloc_r>
80002f54:	00050993          	mv	s3,a0
80002f58:	04050063          	beqz	a0,80002f98 <_realloc_r+0xac>
80002f5c:	00040613          	mv	a2,s0
80002f60:	00048593          	mv	a1,s1
80002f64:	af9fd0ef          	jal	ra,80000a5c <memcpy>
80002f68:	00090513          	mv	a0,s2
80002f6c:	00048593          	mv	a1,s1
80002f70:	f3dfd0ef          	jal	ra,80000eac <_free_r>
80002f74:	01c12083          	lw	ra,28(sp)
80002f78:	01812403          	lw	s0,24(sp)
80002f7c:	01412483          	lw	s1,20(sp)
80002f80:	01012903          	lw	s2,16(sp)
80002f84:	00098513          	mv	a0,s3
80002f88:	00c12983          	lw	s3,12(sp)
80002f8c:	02010113          	addi	sp,sp,32
80002f90:	00008067          	ret
80002f94:	f19fd0ef          	jal	ra,80000eac <_free_r>
80002f98:	01c12083          	lw	ra,28(sp)
80002f9c:	01812403          	lw	s0,24(sp)
80002fa0:	00000993          	li	s3,0
80002fa4:	01412483          	lw	s1,20(sp)
80002fa8:	01012903          	lw	s2,16(sp)
80002fac:	00098513          	mv	a0,s3
80002fb0:	00c12983          	lw	s3,12(sp)
80002fb4:	02010113          	addi	sp,sp,32
80002fb8:	00008067          	ret
80002fbc:	01812403          	lw	s0,24(sp)
80002fc0:	01c12083          	lw	ra,28(sp)
80002fc4:	01412483          	lw	s1,20(sp)
80002fc8:	01012903          	lw	s2,16(sp)
80002fcc:	00c12983          	lw	s3,12(sp)
80002fd0:	00060593          	mv	a1,a2
80002fd4:	02010113          	addi	sp,sp,32
80002fd8:	840fe06f          	j	80001018 <_malloc_r>

80002fdc <_malloc_usable_size_r>:
80002fdc:	00308013          	addi	zero,ra,3
80002fe0:	ffc5a783          	lw	a5,-4(a1)
80002fe4:	ffc78513          	addi	a0,a5,-4
80002fe8:	0007c463          	bltz	a5,80002ff0 <_malloc_usable_size_r+0x14>
80002fec:	00008067          	ret
80002ff0:	00a585b3          	add	a1,a1,a0
80002ff4:	0005a783          	lw	a5,0(a1)
80002ff8:	00f50533          	add	a0,a0,a5
80002ffc:	00008067          	ret

80003000 <dummy_function>:
80003000:	00308013          	addi	zero,ra,3
void set_inject_param(char *choice);
void set_code_ptr(char *choice);
void set_location(char *choice);
void set_function(char *choice);

int dummy_function(const char *str) {
80003004:	ff010113          	addi	sp,sp,-16
80003008:	00112623          	sw	ra,12(sp)
        printf("Dummy function\n");
8000300c:	80009537          	lui	a0,0x80009
80003010:	e9450513          	addi	a0,a0,-364 # 80008e94 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008e95>
80003014:	371010ef          	jal	ra,80004b84 <printk>
        return 0;
}
80003018:	00000513          	li	a0,0
8000301c:	00c12083          	lw	ra,12(sp)
80003020:	01010113          	addi	sp,sp,16
80003024:	00008067          	ret

80003028 <shellcode_target>:
80003028:	00308013          	addi	zero,ra,3
{
8000302c:	ff010113          	addi	sp,sp,-16
80003030:	00112623          	sw	ra,12(sp)
    printf("success.\nCode injection function reached.\n");
80003034:	80009537          	lui	a0,0x80009
80003038:	ea450513          	addi	a0,a0,-348 # 80008ea4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ea5>
8000303c:	349010ef          	jal	ra,80004b84 <printk>
    exit(0);
80003040:	00000513          	li	a0,0
80003044:	9b5fd0ef          	jal	ra,800009f8 <exit>

80003048 <ret2libc_target>:
80003048:	00308013          	addi	zero,ra,3
{
8000304c:	ff010113          	addi	sp,sp,-16
80003050:	00112623          	sw	ra,12(sp)
    printf("success.\nRet2Libc function reached.\n");
80003054:	80009537          	lui	a0,0x80009
80003058:	ed050513          	addi	a0,a0,-304 # 80008ed0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ed1>
8000305c:	329010ef          	jal	ra,80004b84 <printk>
    exit(0);
80003060:	00000513          	li	a0,0
80003064:	995fd0ef          	jal	ra,800009f8 <exit>

80003068 <rop_target>:
80003068:	00308013          	addi	zero,ra,3
{
8000306c:	ff010113          	addi	sp,sp,-16
80003070:	00112623          	sw	ra,12(sp)
    printf("success.\nROP function reached.\n");
80003074:	80009537          	lui	a0,0x80009
80003078:	ef850513          	addi	a0,a0,-264 # 80008ef8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ef9>
8000307c:	309010ef          	jal	ra,80004b84 <printk>
    exit(0);
80003080:	00000513          	li	a0,0
80003084:	975fd0ef          	jal	ra,800009f8 <exit>

80003088 <hex_to_bin>:
80003088:	00308013          	addi	zero,ra,3
void build_shellcode(char *shellcode);
void hex_to_string(char *str, size_t val);
void format_instruction(char *dest, size_t insn);

const char *hex_to_bin(char c) {
	if (c >= '0' && c <= '9') return bin4b[c - '0'];
8000308c:	fd050793          	addi	a5,a0,-48
80003090:	0ff7f793          	zext.b	a5,a5
80003094:	00900713          	li	a4,9
80003098:	02f77863          	bgeu	a4,a5,800030c8 <hex_to_bin+0x40>
	if (c >= 'a' && c <= 'f') return bin4b[10 + c - 'a'];
8000309c:	f9f50793          	addi	a5,a0,-97
800030a0:	0ff7f793          	zext.b	a5,a5
800030a4:	00500713          	li	a4,5
800030a8:	02f76e63          	bltu	a4,a5,800030e4 <hex_to_bin+0x5c>
800030ac:	fa950513          	addi	a0,a0,-87
800030b0:	8000d7b7          	lui	a5,0x8000d
800030b4:	00251513          	slli	a0,a0,0x2
800030b8:	e6478793          	addi	a5,a5,-412 # 8000ce64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ce65>
800030bc:	00a787b3          	add	a5,a5,a0
800030c0:	0007a503          	lw	a0,0(a5)
800030c4:	00008067          	ret
	if (c >= '0' && c <= '9') return bin4b[c - '0'];
800030c8:	fd050513          	addi	a0,a0,-48
800030cc:	8000d7b7          	lui	a5,0x8000d
800030d0:	00251513          	slli	a0,a0,0x2
800030d4:	e6478793          	addi	a5,a5,-412 # 8000ce64 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ce65>
800030d8:	00a787b3          	add	a5,a5,a0
800030dc:	0007a503          	lw	a0,0(a5)
800030e0:	00008067          	ret
	return NULL;
800030e4:	00000513          	li	a0,0
}
800030e8:	00008067          	ret

800030ec <print_current_test_parameters>:
800030ec:	00308013          	addi	zero,ra,3
print_current_test_parameters(void) {
800030f0:	ff010113          	addi	sp,sp,-16
800030f4:	00112623          	sw	ra,12(sp)
    printk("RIPE parameters:\n");
800030f8:	80009537          	lui	a0,0x80009
800030fc:	f1850513          	addi	a0,a0,-232 # 80008f18 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f19>
80003100:	285010ef          	jal	ra,80004b84 <printk>
        opt_techniques[attack.technique-100],
80003104:	8000a7b7          	lui	a5,0x8000a
80003108:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
8000310c:	0007a503          	lw	a0,0(a5)
80003110:	f9c50513          	addi	a0,a0,-100
        opt_inject_params[attack.inject_param-200],
80003114:	0047a583          	lw	a1,4(a5)
80003118:	f3858593          	addi	a1,a1,-200
        opt_code_ptrs[attack.code_ptr-300],
8000311c:	0087a603          	lw	a2,8(a5)
80003120:	ed460613          	addi	a2,a2,-300
        opt_locations[attack.location-400],
80003124:	00c7a683          	lw	a3,12(a5)
80003128:	e7068693          	addi	a3,a3,-400
        opt_funcs[attack.function-500]);
8000312c:	0107a703          	lw	a4,16(a5)
80003130:	e0c70713          	addi	a4,a4,-500
	printk("technique\t%s\n"
80003134:	8000d7b7          	lui	a5,0x8000d
80003138:	00271713          	slli	a4,a4,0x2
8000313c:	ea478793          	addi	a5,a5,-348 # 8000cea4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cea5>
80003140:	00e787b3          	add	a5,a5,a4
80003144:	8000d737          	lui	a4,0x8000d
80003148:	00269693          	slli	a3,a3,0x2
8000314c:	ec870713          	addi	a4,a4,-312 # 8000cec8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cec9>
80003150:	00d70733          	add	a4,a4,a3
80003154:	8000d6b7          	lui	a3,0x8000d
80003158:	00261613          	slli	a2,a2,0x2
8000315c:	ed868693          	addi	a3,a3,-296 # 8000ced8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ced9>
80003160:	00c686b3          	add	a3,a3,a2
80003164:	8000d637          	lui	a2,0x8000d
80003168:	00259593          	slli	a1,a1,0x2
8000316c:	f2060613          	addi	a2,a2,-224 # 8000cf20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cf21>
80003170:	00b60633          	add	a2,a2,a1
80003174:	00251513          	slli	a0,a0,0x2
80003178:	81418593          	addi	a1,gp,-2028 # 8000cf54 <opt_techniques>
8000317c:	00a585b3          	add	a1,a1,a0
80003180:	0007a783          	lw	a5,0(a5)
80003184:	00072703          	lw	a4,0(a4)
80003188:	0006a683          	lw	a3,0(a3)
8000318c:	00062603          	lw	a2,0(a2)
80003190:	0005a583          	lw	a1,0(a1)
80003194:	80009537          	lui	a0,0x80009
80003198:	f2c50513          	addi	a0,a0,-212 # 80008f2c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f2d>
8000319c:	1e9010ef          	jal	ra,80004b84 <printk>
}
800031a0:	00c12083          	lw	ra,12(sp)
800031a4:	01010113          	addi	sp,sp,16
800031a8:	00008067          	ret

800031ac <build_payload>:
800031ac:	00308013          	addi	zero,ra,3
{
800031b0:	ff010113          	addi	sp,sp,-16
800031b4:	00112623          	sw	ra,12(sp)
800031b8:	00812423          	sw	s0,8(sp)
800031bc:	00912223          	sw	s1,4(sp)
800031c0:	01212023          	sw	s2,0(sp)
800031c4:	00050413          	mv	s0,a0
	switch (attack.inject_param) {
800031c8:	8000a7b7          	lui	a5,0x8000a
800031cc:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800031d0:	0047a783          	lw	a5,4(a5)
800031d4:	0ca00713          	li	a4,202
800031d8:	02f76863          	bltu	a4,a5,80003208 <build_payload+0x5c>
800031dc:	0c900713          	li	a4,201
800031e0:	04e7f663          	bgeu	a5,a4,8000322c <build_payload+0x80>
800031e4:	0c800713          	li	a4,200
800031e8:	04e79e63          	bne	a5,a4,80003244 <build_payload+0x98>
            if (payload->size < (size_shellcode_nonop + sizeof(long))) {
800031ec:	00452703          	lw	a4,4(a0)
800031f0:	00f00793          	li	a5,15
800031f4:	18e7fa63          	bgeu	a5,a4,80003388 <build_payload+0x1dc>
            shellcode      = shellcode_nonop;
800031f8:	8000a4b7          	lui	s1,0x8000a
800031fc:	22848493          	addi	s1,s1,552 # 8000a228 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a229>
            size_shellcode = size_shellcode_nonop;
80003200:	00c00913          	li	s2,12
80003204:	0400006f          	j	80003244 <build_payload+0x98>
	switch (attack.inject_param) {
80003208:	0cb00713          	li	a4,203
8000320c:	02e79c63          	bne	a5,a4,80003244 <build_payload+0x98>
            if (attack.code_ptr == VAR_IOF)
80003210:	8000a7b7          	lui	a5,0x8000a
80003214:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003218:	0087a783          	lw	a5,8(a5)
8000321c:	13c00713          	li	a4,316
80003220:	10e78063          	beq	a5,a4,80003320 <build_payload+0x174>
			if (attack.code_ptr == VAR_LEAK) {
80003224:	13d00713          	li	a4,317
80003228:	10e78263          	beq	a5,a4,8000332c <build_payload+0x180>
            if (payload->size < sizeof(long))
8000322c:	00442703          	lw	a4,4(s0)
80003230:	00300793          	li	a5,3
80003234:	14e7fe63          	bgeu	a5,a4,80003390 <build_payload+0x1e4>
            shellcode      = "dummy";
80003238:	800094b7          	lui	s1,0x80009
8000323c:	f7448493          	addi	s1,s1,-140 # 80008f74 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f75>
            size_shellcode = 0;
80003240:	00000913          	li	s2,0
    payload->buffer = (char *) malloc(payload->size);
80003244:	00442503          	lw	a0,4(s0)
80003248:	ff4fd0ef          	jal	ra,80000a3c <malloc>
8000324c:	00a42623          	sw	a0,12(s0)
    if (payload->buffer == NULL) {
80003250:	12050263          	beqz	a0,80003374 <build_payload+0x1c8>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
80003254:	00090613          	mv	a2,s2
80003258:	00048593          	mv	a1,s1
8000325c:	801fd0ef          	jal	ra,80000a5c <memcpy>
      (payload->size - size_shellcode - sizeof(long) - sizeof(char));
80003260:	00442483          	lw	s1,4(s0)
80003264:	412484b3          	sub	s1,s1,s2
    bytes_to_pad =
80003268:	ffb48493          	addi	s1,s1,-5
    memset((payload->buffer + size_shellcode), 'A', bytes_to_pad);
8000326c:	00c42503          	lw	a0,12(s0)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
80003270:	00048613          	mv	a2,s1
80003274:	04100593          	li	a1,65
80003278:	01250533          	add	a0,a0,s2
8000327c:	b55fd0ef          	jal	ra,80000dd0 <memset>
        fprintf(stderr, "bytes to pad: %d\n", bytes_to_pad);
80003280:	00048593          	mv	a1,s1
80003284:	80009537          	lui	a0,0x80009
80003288:	fa050513          	addi	a0,a0,-96 # 80008fa0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fa1>
8000328c:	0f9010ef          	jal	ra,80004b84 <printk>
        fprintf(stderr, "\noverflow_ptr: %p\n", payload->overflow_ptr);
80003290:	00842583          	lw	a1,8(s0)
80003294:	80009537          	lui	a0,0x80009
80003298:	fb450513          	addi	a0,a0,-76 # 80008fb4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fb5>
8000329c:	0e9010ef          	jal	ra,80004b84 <printk>
    if (attack.code_ptr != VAR_IOF) {
800032a0:	8000a7b7          	lui	a5,0x8000a
800032a4:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800032a8:	0087a703          	lw	a4,8(a5)
800032ac:	13c00793          	li	a5,316
800032b0:	02f70863          	beq	a4,a5,800032e0 <build_payload+0x134>
        memcpy(&(payload->buffer[size_shellcode + bytes_to_pad]),
800032b4:	00c42783          	lw	a5,12(s0)
800032b8:	00990933          	add	s2,s2,s1
800032bc:	012787b3          	add	a5,a5,s2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
800032c0:	00844583          	lbu	a1,8(s0)
800032c4:	00944603          	lbu	a2,9(s0)
800032c8:	00a44683          	lbu	a3,10(s0)
800032cc:	00b44703          	lbu	a4,11(s0)
800032d0:	00b78023          	sb	a1,0(a5)
800032d4:	00c780a3          	sb	a2,1(a5)
800032d8:	00d78123          	sb	a3,2(a5)
800032dc:	00e781a3          	sb	a4,3(a5)
    memset((payload->buffer + payload->size - 1), '\0', 1);
800032e0:	00c42783          	lw	a5,12(s0)
800032e4:	00442703          	lw	a4,4(s0)
800032e8:	fff70713          	addi	a4,a4,-1
800032ec:	00e787b3          	add	a5,a5,a4
__ssp_bos_icheck3(memset, void *, int)
800032f0:	00078023          	sb	zero,0(a5)
        fprintf(stderr, "payload: %s\n", payload->buffer);
800032f4:	00c42583          	lw	a1,12(s0)
800032f8:	80009537          	lui	a0,0x80009
800032fc:	fc850513          	addi	a0,a0,-56 # 80008fc8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fc9>
80003300:	085010ef          	jal	ra,80004b84 <printk>
    return TRUE;
80003304:	00100513          	li	a0,1
} /* build_payload */
80003308:	00c12083          	lw	ra,12(sp)
8000330c:	00812403          	lw	s0,8(sp)
80003310:	00412483          	lw	s1,4(sp)
80003314:	00012903          	lw	s2,0(sp)
80003318:	01010113          	addi	sp,sp,16
8000331c:	00008067          	ret
                payload->size = 256 + sizeof(long) + sizeof(char);
80003320:	10500713          	li	a4,261
80003324:	00e52223          	sw	a4,4(a0)
80003328:	efdff06f          	j	80003224 <build_payload+0x78>
				payload->size += 32 - sizeof(long);
8000332c:	00442783          	lw	a5,4(s0)
80003330:	01c78793          	addi	a5,a5,28
80003334:	00f42223          	sw	a5,4(s0)
				payload->buffer[0] = payload->size & 0xFF;
80003338:	00c42703          	lw	a4,12(s0)
8000333c:	00f70023          	sb	a5,0(a4)
				payload->buffer[1] = payload->size / 0x100;
80003340:	00442783          	lw	a5,4(s0)
80003344:	0087d793          	srli	a5,a5,0x8
80003348:	00c42703          	lw	a4,12(s0)
8000334c:	00f700a3          	sb	a5,1(a4)
				payload->buffer[2] = 'A';
80003350:	00c42783          	lw	a5,12(s0)
80003354:	04100713          	li	a4,65
80003358:	00e78123          	sb	a4,2(a5)
				payload->buffer[3] = '\0';
8000335c:	00c42783          	lw	a5,12(s0)
80003360:	000781a3          	sb	zero,3(a5)
				payload->size = 4;
80003364:	00400793          	li	a5,4
80003368:	00f42223          	sw	a5,4(s0)
				return TRUE;
8000336c:	00100513          	li	a0,1
80003370:	f99ff06f          	j	80003308 <build_payload+0x15c>
            printk("Unable to allocate payload buffer.");
80003374:	80009537          	lui	a0,0x80009
80003378:	f7c50513          	addi	a0,a0,-132 # 80008f7c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008f7d>
8000337c:	009010ef          	jal	ra,80004b84 <printk>
        return FALSE;
80003380:	00000513          	li	a0,0
80003384:	f85ff06f          	j	80003308 <build_payload+0x15c>
                return FALSE;
80003388:	00000513          	li	a0,0
8000338c:	f7dff06f          	j	80003308 <build_payload+0x15c>
                return FALSE;
80003390:	00000513          	li	a0,0
80003394:	f75ff06f          	j	80003308 <build_payload+0x15c>

80003398 <lj_func>:
80003398:	00308013          	addi	zero,ra,3
{
8000339c:	ff010113          	addi	sp,sp,-16
800033a0:	00112623          	sw	ra,12(sp)
    longjmp(lj_buf, 1111);
800033a4:	45700593          	li	a1,1111
800033a8:	e7dfd0ef          	jal	ra,80001224 <longjmp>

800033ac <homebrew_memcpy>:
800033ac:	00308013          	addi	zero,ra,3
    while (length--) {
800033b0:	0180006f          	j	800033c8 <homebrew_memcpy+0x1c>
        *d++ = *s++;
800033b4:	0005c703          	lbu	a4,0(a1)
800033b8:	00e50023          	sb	a4,0(a0)
800033bc:	00158593          	addi	a1,a1,1
800033c0:	00150513          	addi	a0,a0,1
    while (length--) {
800033c4:	00078613          	mv	a2,a5
800033c8:	fff60793          	addi	a5,a2,-1
800033cc:	fe0614e3          	bnez	a2,800033b4 <homebrew_memcpy+0x8>
}
800033d0:	00008067          	ret

800033d4 <set_low_buf>:
800033d4:	00308013          	addi	zero,ra,3
{
800033d8:	bf010113          	addi	sp,sp,-1040
800033dc:	40112623          	sw	ra,1036(sp)
800033e0:	40812423          	sw	s0,1032(sp)
800033e4:	00050413          	mv	s0,a0
        fprintf(stderr, "Inside set_low_buf()\n");
800033e8:	80009537          	lui	a0,0x80009
800033ec:	fd850513          	addi	a0,a0,-40 # 80008fd8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fd9>
800033f0:	794010ef          	jal	ra,80004b84 <printk>
    *buf = &low_buf;
800033f4:	00242023          	sw	sp,0(s0)
}
800033f8:	40c12083          	lw	ra,1036(sp)
800033fc:	40812403          	lw	s0,1032(sp)
80003400:	41010113          	addi	sp,sp,1040
80003404:	00008067          	ret

80003408 <iof>:
80003408:	00308013          	addi	zero,ra,3
{
8000340c:	ff010113          	addi	sp,sp,-16
80003410:	00112623          	sw	ra,12(sp)
80003414:	00812423          	sw	s0,8(sp)
80003418:	00912223          	sw	s1,4(sp)
8000341c:	00058493          	mv	s1,a1
    uint8_t len  = strlen(buf);
80003420:	c08fe0ef          	jal	ra,80001828 <strlen>
    map      = (char *) malloc(len * sizeof(char));
80003424:	0ff57413          	zext.b	s0,a0
80003428:	00040513          	mv	a0,s0
8000342c:	e10fd0ef          	jal	ra,80000a3c <malloc>
    key     -= (uint32_t) map;
80003430:	40a484b3          	sub	s1,s1,a0
    key     &= (uint16_t) len - 1;
80003434:	fff40413          	addi	s0,s0,-1
80003438:	00947433          	and	s0,s0,s1
    map[key] = 0xa1;
8000343c:	00850533          	add	a0,a0,s0
80003440:	fa100793          	li	a5,-95
80003444:	00f50023          	sb	a5,0(a0)
}
80003448:	00c12083          	lw	ra,12(sp)
8000344c:	00812403          	lw	s0,8(sp)
80003450:	00412483          	lw	s1,4(sp)
80003454:	01010113          	addi	sp,sp,16
80003458:	00008067          	ret

8000345c <dop_target>:
8000345c:	00308013          	addi	zero,ra,3
{
80003460:	fe010113          	addi	sp,sp,-32
80003464:	00112e23          	sw	ra,28(sp)
    size_t auth_loc = auth;
80003468:	00b12623          	sw	a1,12(sp)
    if (attack.code_ptr == VAR_IOF) {
8000346c:	8000a7b7          	lui	a5,0x8000a
80003470:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003474:	0087a703          	lw	a4,8(a5)
80003478:	13c00793          	li	a5,316
8000347c:	02f70263          	beq	a4,a5,800034a0 <dop_target+0x44>
    if (!auth_loc) {
80003480:	00c12783          	lw	a5,12(sp)
80003484:	02079463          	bnez	a5,800034ac <dop_target+0x50>
        printf("DOP attack failed\n");
80003488:	80009537          	lui	a0,0x80009
8000348c:	ff050513          	addi	a0,a0,-16 # 80008ff0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008ff1>
80003490:	6f4010ef          	jal	ra,80004b84 <printk>
}
80003494:	01c12083          	lw	ra,28(sp)
80003498:	02010113          	addi	sp,sp,32
8000349c:	00008067          	ret
        iof(buf, &auth_loc);
800034a0:	00c10593          	addi	a1,sp,12
800034a4:	f65ff0ef          	jal	ra,80003408 <iof>
800034a8:	fd9ff06f          	j	80003480 <dop_target+0x24>
        printf("success.\nDOP memory corruption reached.\n");
800034ac:	80009537          	lui	a0,0x80009
800034b0:	00450513          	addi	a0,a0,4 # 80009004 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009005>
800034b4:	6d0010ef          	jal	ra,80004b84 <printk>
        exit(0);
800034b8:	00000513          	li	a0,0
800034bc:	d3cfd0ef          	jal	ra,800009f8 <exit>

800034c0 <data_leak>:
800034c0:	00308013          	addi	zero,ra,3
data_leak(char *buf) {
800034c4:	ff010113          	addi	sp,sp,-16
800034c8:	00112623          	sw	ra,12(sp)
800034cc:	00812423          	sw	s0,8(sp)
800034d0:	00912223          	sw	s1,4(sp)
800034d4:	01212023          	sw	s2,0(sp)
800034d8:	00050413          	mv	s0,a0
	uint16_t size = buf[0] + (buf[1] * 0x100), i;
800034dc:	00054483          	lbu	s1,0(a0)
800034e0:	00154783          	lbu	a5,1(a0)
800034e4:	00879793          	slli	a5,a5,0x8
800034e8:	00f484b3          	add	s1,s1,a5
800034ec:	01049493          	slli	s1,s1,0x10
800034f0:	0104d493          	srli	s1,s1,0x10
	char *msg = (char *)malloc(size);
800034f4:	00048513          	mv	a0,s1
800034f8:	d44fd0ef          	jal	ra,80000a3c <malloc>
800034fc:	00050913          	mv	s2,a0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
80003500:	00048613          	mv	a2,s1
80003504:	00240593          	addi	a1,s0,2
80003508:	d54fd0ef          	jal	ra,80000a5c <memcpy>
8000350c:	00000413          	li	s0,0
80003510:	0100006f          	j	80003520 <data_leak+0x60>
	for (i = 0; i < size; i++) {
80003514:	00140413          	addi	s0,s0,1
80003518:	01041413          	slli	s0,s0,0x10
8000351c:	01045413          	srli	s0,s0,0x10
80003520:	02947263          	bgeu	s0,s1,80003544 <data_leak+0x84>
		if (msg[i] >= 0x20) printf("%c",msg[i]);
80003524:	008907b3          	add	a5,s2,s0
80003528:	0007c583          	lbu	a1,0(a5)
8000352c:	01f00793          	li	a5,31
80003530:	feb7f2e3          	bgeu	a5,a1,80003514 <data_leak+0x54>
80003534:	80009537          	lui	a0,0x80009
80003538:	03050513          	addi	a0,a0,48 # 80009030 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009031>
8000353c:	648010ef          	jal	ra,80004b84 <printk>
80003540:	fd5ff06f          	j	80003514 <data_leak+0x54>
	printf("\n");
80003544:	80009537          	lui	a0,0x80009
80003548:	fec50513          	addi	a0,a0,-20 # 80008fec <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008fed>
8000354c:	638010ef          	jal	ra,80004b84 <printk>
}			
80003550:	00c12083          	lw	ra,12(sp)
80003554:	00812403          	lw	s0,8(sp)
80003558:	00412483          	lw	s1,4(sp)
8000355c:	00012903          	lw	s2,0(sp)
80003560:	01010113          	addi	sp,sp,16
80003564:	00008067          	ret

80003568 <hex_to_string>:
80003568:	00308013          	addi	zero,ra,3
{
8000356c:	ff010113          	addi	sp,sp,-16
80003570:	00112623          	sw	ra,12(sp)
80003574:	00812423          	sw	s0,8(sp)
80003578:	00050413          	mv	s0,a0
8000357c:	00058693          	mv	a3,a1
    snprintf(str, 9, "%8x", val);
80003580:	80009637          	lui	a2,0x80009
80003584:	03460613          	addi	a2,a2,52 # 80009034 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009035>
80003588:	00900593          	li	a1,9
8000358c:	dbdfd0ef          	jal	ra,80001348 <snprintf>
    for (int i = 0; i < 9; i++) {
80003590:	00000793          	li	a5,0
80003594:	0080006f          	j	8000359c <hex_to_string+0x34>
80003598:	00178793          	addi	a5,a5,1
8000359c:	00800713          	li	a4,8
800035a0:	02f74063          	blt	a4,a5,800035c0 <hex_to_string+0x58>
        if (str[i] == ' ') str[i] = '0';
800035a4:	00f40733          	add	a4,s0,a5
800035a8:	00074603          	lbu	a2,0(a4)
800035ac:	02000693          	li	a3,32
800035b0:	fed614e3          	bne	a2,a3,80003598 <hex_to_string+0x30>
800035b4:	03000693          	li	a3,48
800035b8:	00d70023          	sb	a3,0(a4)
800035bc:	fddff06f          	j	80003598 <hex_to_string+0x30>
}
800035c0:	00c12083          	lw	ra,12(sp)
800035c4:	00812403          	lw	s0,8(sp)
800035c8:	01010113          	addi	sp,sp,16
800035cc:	00008067          	ret

800035d0 <format_instruction>:
800035d0:	00308013          	addi	zero,ra,3
{
800035d4:	ff010113          	addi	sp,sp,-16
    insn_bytes[0] = (insn >> 24) & 0xff;
800035d8:	0185d793          	srli	a5,a1,0x18
800035dc:	00f10623          	sb	a5,12(sp)
    insn_bytes[1] = (insn >> 16) & 0xff;
800035e0:	0105d793          	srli	a5,a1,0x10
800035e4:	00f106a3          	sb	a5,13(sp)
    insn_bytes[2] = (insn >> 8) & 0xff;
800035e8:	0085d793          	srli	a5,a1,0x8
800035ec:	00f10723          	sb	a5,14(sp)
    insn_bytes[3] = insn & 0xff;
800035f0:	00b107a3          	sb	a1,15(sp)
    for (int i = 3; i >= 0; i--) {
800035f4:	00300713          	li	a4,3
800035f8:	0240006f          	j	8000361c <format_instruction+0x4c>
        dest[3 - i] = insn_bytes[i];
800035fc:	00300793          	li	a5,3
80003600:	40e787b3          	sub	a5,a5,a4
80003604:	00f507b3          	add	a5,a0,a5
80003608:	01070693          	addi	a3,a4,16
8000360c:	002686b3          	add	a3,a3,sp
80003610:	ffc6c683          	lbu	a3,-4(a3)
80003614:	00d78023          	sb	a3,0(a5)
    for (int i = 3; i >= 0; i--) {
80003618:	fff70713          	addi	a4,a4,-1
8000361c:	fe0750e3          	bgez	a4,800035fc <format_instruction+0x2c>
}
80003620:	01010113          	addi	sp,sp,16
80003624:	00008067          	ret

80003628 <build_shellcode>:
80003628:	00308013          	addi	zero,ra,3
{
8000362c:	f6010113          	addi	sp,sp,-160
80003630:	08112e23          	sw	ra,156(sp)
80003634:	08812c23          	sw	s0,152(sp)
80003638:	08912a23          	sw	s1,148(sp)
8000363c:	09212823          	sw	s2,144(sp)
80003640:	09312623          	sw	s3,140(sp)
80003644:	00050493          	mv	s1,a0
    memset(attack_addr, 0, sizeof(attack_addr) );
80003648:	06012a23          	sw	zero,116(sp)
8000364c:	06012c23          	sw	zero,120(sp)
80003650:	06010e23          	sb	zero,124(sp)
    memset(low_bits,    0, sizeof(low_bits) );
80003654:	06012823          	sw	zero,112(sp)
    memset(high_bits,   0, sizeof(high_bits) );
80003658:	06012423          	sw	zero,104(sp)
8000365c:	06011623          	sh	zero,108(sp)
    memset(lui_bin,     0, sizeof(lui_bin) );
80003660:	04012223          	sw	zero,68(sp)
80003664:	04012423          	sw	zero,72(sp)
80003668:	04012623          	sw	zero,76(sp)
8000366c:	04012823          	sw	zero,80(sp)
80003670:	04012a23          	sw	zero,84(sp)
80003674:	04012c23          	sw	zero,88(sp)
80003678:	04012e23          	sw	zero,92(sp)
8000367c:	06012023          	sw	zero,96(sp)
80003680:	06010223          	sb	zero,100(sp)
    memset(addi_bin,    0, sizeof(addi_bin) );
80003684:	02012023          	sw	zero,32(sp)
80003688:	02012223          	sw	zero,36(sp)
8000368c:	02012423          	sw	zero,40(sp)
80003690:	02012623          	sw	zero,44(sp)
80003694:	02012823          	sw	zero,48(sp)
80003698:	02012a23          	sw	zero,52(sp)
8000369c:	02012c23          	sw	zero,56(sp)
800036a0:	02012e23          	sw	zero,60(sp)
800036a4:	04010023          	sb	zero,64(sp)
    memset(lui_s,       0, sizeof(lui_s) );
800036a8:	00012a23          	sw	zero,20(sp)
800036ac:	00012c23          	sw	zero,24(sp)
800036b0:	00010e23          	sb	zero,28(sp)
    memset(addi_s,      0, sizeof(addi_s) );
800036b4:	00012423          	sw	zero,8(sp)
800036b8:	00012623          	sw	zero,12(sp)
800036bc:	00010823          	sb	zero,16(sp)
	if (((unsigned long)&shellcode_target & 0x00000fff) >= 0x800)
800036c0:	800035b7          	lui	a1,0x80003
800036c4:	02858593          	addi	a1,a1,40 # 80003028 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003029>
800036c8:	000017b7          	lui	a5,0x1
800036cc:	80078793          	addi	a5,a5,-2048 # 800 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE>
800036d0:	00f5f7b3          	and	a5,a1,a5
800036d4:	04078a63          	beqz	a5,80003728 <build_shellcode+0x100>
		hex_to_string(attack_addr, &shellcode_target + 0x1000);
800036d8:	800045b7          	lui	a1,0x80004
800036dc:	02858593          	addi	a1,a1,40 # 80004028 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80004029>
800036e0:	07410513          	addi	a0,sp,116
800036e4:	e85ff0ef          	jal	ra,80003568 <hex_to_string>
    strncpy(low_bits, &attack_addr[5], 3);
800036e8:	00300613          	li	a2,3
800036ec:	07910593          	addi	a1,sp,121
800036f0:	07010513          	addi	a0,sp,112
800036f4:	cd8fe0ef          	jal	ra,80001bcc <strncpy>
    strncpy(high_bits, attack_addr, 5);
800036f8:	00500613          	li	a2,5
800036fc:	07410593          	addi	a1,sp,116
80003700:	06810513          	addi	a0,sp,104
80003704:	cc8fe0ef          	jal	ra,80001bcc <strncpy>
    jalr_val = strtoul(jalr_s, 0, 16);
80003708:	01000613          	li	a2,16
8000370c:	00000593          	li	a1,0
80003710:	80009537          	lui	a0,0x80009
80003714:	03850513          	addi	a0,a0,56 # 80009038 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009039>
80003718:	f88fe0ef          	jal	ra,80001ea0 <strtoul>
8000371c:	00050913          	mv	s2,a0
    for (int i = 0; i < 5; i++) {
80003720:	00000413          	li	s0,0
80003724:	0380006f          	j	8000375c <build_shellcode+0x134>
		hex_to_string(attack_addr, &shellcode_target);
80003728:	07410513          	addi	a0,sp,116
8000372c:	e3dff0ef          	jal	ra,80003568 <hex_to_string>
80003730:	fb9ff06f          	j	800036e8 <build_shellcode+0xc0>
        strncat(lui_bin, hex_to_bin(high_bits[i]), 4);
80003734:	08040793          	addi	a5,s0,128
80003738:	002787b3          	add	a5,a5,sp
8000373c:	fe87c503          	lbu	a0,-24(a5)
80003740:	949ff0ef          	jal	ra,80003088 <hex_to_bin>
80003744:	00050593          	mv	a1,a0
80003748:	02100693          	li	a3,33
8000374c:	00400613          	li	a2,4
80003750:	04410513          	addi	a0,sp,68
80003754:	b60fe0ef          	jal	ra,80001ab4 <__strncat_chk>
    for (int i = 0; i < 5; i++) {
80003758:	00140413          	addi	s0,s0,1
8000375c:	00400793          	li	a5,4
80003760:	fc87dae3          	bge	a5,s0,80003734 <build_shellcode+0x10c>
    strncat(lui_bin, "001100110111", 12);
80003764:	02100613          	li	a2,33
80003768:	800095b7          	lui	a1,0x80009
8000376c:	04458593          	addi	a1,a1,68 # 80009044 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009045>
80003770:	04410513          	addi	a0,sp,68
80003774:	cb9fd0ef          	jal	ra,8000142c <__strcat_chk>
    lui_val = strtoul(lui_bin, 0, 2);
80003778:	00200613          	li	a2,2
8000377c:	00000593          	li	a1,0
80003780:	04410513          	addi	a0,sp,68
80003784:	f1cfe0ef          	jal	ra,80001ea0 <strtoul>
80003788:	00050993          	mv	s3,a0
    hex_to_string(lui_s, lui_val);
8000378c:	00050593          	mv	a1,a0
80003790:	01410513          	addi	a0,sp,20
80003794:	dd5ff0ef          	jal	ra,80003568 <hex_to_string>
    for (int i = 0; i < 3; i++) {
80003798:	00000413          	li	s0,0
8000379c:	02c0006f          	j	800037c8 <build_shellcode+0x1a0>
        strncat(addi_bin, hex_to_bin(low_bits[i]), 4);
800037a0:	08040793          	addi	a5,s0,128
800037a4:	002787b3          	add	a5,a5,sp
800037a8:	ff07c503          	lbu	a0,-16(a5)
800037ac:	8ddff0ef          	jal	ra,80003088 <hex_to_bin>
800037b0:	00050593          	mv	a1,a0
800037b4:	02100693          	li	a3,33
800037b8:	00400613          	li	a2,4
800037bc:	02010513          	addi	a0,sp,32
800037c0:	af4fe0ef          	jal	ra,80001ab4 <__strncat_chk>
    for (int i = 0; i < 3; i++) {
800037c4:	00140413          	addi	s0,s0,1
800037c8:	00200793          	li	a5,2
800037cc:	fc87dae3          	bge	a5,s0,800037a0 <build_shellcode+0x178>
    strncat(addi_bin, "00110000001100010011", 20);
800037d0:	02100613          	li	a2,33
800037d4:	800095b7          	lui	a1,0x80009
800037d8:	05458593          	addi	a1,a1,84 # 80009054 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009055>
800037dc:	02010513          	addi	a0,sp,32
800037e0:	c4dfd0ef          	jal	ra,8000142c <__strcat_chk>
    addi_val = strtoul(addi_bin, 0, 2);
800037e4:	00200613          	li	a2,2
800037e8:	00000593          	li	a1,0
800037ec:	02010513          	addi	a0,sp,32
800037f0:	eb0fe0ef          	jal	ra,80001ea0 <strtoul>
800037f4:	00050413          	mv	s0,a0
    hex_to_string(addi_s, addi_val);
800037f8:	00050593          	mv	a1,a0
800037fc:	00810513          	addi	a0,sp,8
80003800:	d69ff0ef          	jal	ra,80003568 <hex_to_string>
    format_instruction(shellcode, lui_val);
80003804:	00098593          	mv	a1,s3
80003808:	00048513          	mv	a0,s1
8000380c:	dc5ff0ef          	jal	ra,800035d0 <format_instruction>
    format_instruction(shellcode + 4, addi_val);
80003810:	00040593          	mv	a1,s0
80003814:	00448513          	addi	a0,s1,4
80003818:	db9ff0ef          	jal	ra,800035d0 <format_instruction>
    format_instruction(shellcode + 8, jalr_val);
8000381c:	00090593          	mv	a1,s2
80003820:	00848513          	addi	a0,s1,8
80003824:	dadff0ef          	jal	ra,800035d0 <format_instruction>
    hex_to_string(lui_s, lui_val);
80003828:	00098593          	mv	a1,s3
8000382c:	01410513          	addi	a0,sp,20
80003830:	d39ff0ef          	jal	ra,80003568 <hex_to_string>
    hex_to_string(addi_s, addi_val);
80003834:	00040593          	mv	a1,s0
80003838:	00810513          	addi	a0,sp,8
8000383c:	d2dff0ef          	jal	ra,80003568 <hex_to_string>
        printf("----------------\nShellcode instructions:\n");
80003840:	80009537          	lui	a0,0x80009
80003844:	06c50513          	addi	a0,a0,108 # 8000906c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000906d>
80003848:	33c010ef          	jal	ra,80004b84 <printk>
        printf("%s0x%-20s%14s\n", "lui t1,  ", high_bits, lui_s);
8000384c:	01410693          	addi	a3,sp,20
80003850:	06810613          	addi	a2,sp,104
80003854:	800095b7          	lui	a1,0x80009
80003858:	09858593          	addi	a1,a1,152 # 80009098 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009099>
8000385c:	80009537          	lui	a0,0x80009
80003860:	0a450513          	addi	a0,a0,164 # 800090a4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800090a5>
80003864:	320010ef          	jal	ra,80004b84 <printk>
        printf("%s0x%-20s%10s\n", "addi t1, t1, ", low_bits, addi_s);
80003868:	00810693          	addi	a3,sp,8
8000386c:	07010613          	addi	a2,sp,112
80003870:	800095b7          	lui	a1,0x80009
80003874:	0b458593          	addi	a1,a1,180 # 800090b4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800090b5>
80003878:	80009537          	lui	a0,0x80009
8000387c:	0c450513          	addi	a0,a0,196 # 800090c4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800090c5>
80003880:	304010ef          	jal	ra,80004b84 <printk>
        printf("%s%38s\n----------------\n", "jalr t1", jalr_s);
80003884:	80009637          	lui	a2,0x80009
80003888:	03860613          	addi	a2,a2,56 # 80009038 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009039>
8000388c:	800095b7          	lui	a1,0x80009
80003890:	0d458593          	addi	a1,a1,212 # 800090d4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800090d5>
80003894:	80009537          	lui	a0,0x80009
80003898:	0dc50513          	addi	a0,a0,220 # 800090dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800090dd>
8000389c:	2e8010ef          	jal	ra,80004b84 <printk>
} /* build_shellcode */
800038a0:	09c12083          	lw	ra,156(sp)
800038a4:	09812403          	lw	s0,152(sp)
800038a8:	09412483          	lw	s1,148(sp)
800038ac:	09012903          	lw	s2,144(sp)
800038b0:	08c12983          	lw	s3,140(sp)
800038b4:	0a010113          	addi	sp,sp,160
800038b8:	00008067          	ret

800038bc <perform_attack>:
800038bc:	00308013          	addi	zero,ra,3
{
800038c0:	91010113          	addi	sp,sp,-1776
800038c4:	6e112623          	sw	ra,1772(sp)
800038c8:	6e812423          	sw	s0,1768(sp)
800038cc:	6e912223          	sw	s1,1764(sp)
800038d0:	6f212023          	sw	s2,1760(sp)
800038d4:	6d312e23          	sw	s3,1756(sp)
800038d8:	6d412c23          	sw	s4,1752(sp)
800038dc:	6f010413          	addi	s0,sp,1776
800038e0:	92a42e23          	sw	a0,-1732(s0)
800038e4:	92b42c23          	sw	a1,-1736(s0)
	strcpy(stack_secret, data_secret);
800038e8:	02000613          	li	a2,32
800038ec:	8000d5b7          	lui	a1,0x8000d
800038f0:	c4058593          	addi	a1,a1,-960 # 8000cc40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cc41>
800038f4:	e8040513          	addi	a0,s0,-384
800038f8:	c55fd0ef          	jal	ra,8000154c <__strcpy_chk>
    stack_struct.func_ptr = &dummy_function;
800038fc:	800034b7          	lui	s1,0x80003
80003900:	00048493          	mv	s1,s1
80003904:	a6942e23          	sw	s1,-1412(s0)
      (struct attackme *) malloc(sizeof(struct attackme));
80003908:	10400513          	li	a0,260
8000390c:	930fd0ef          	jal	ra,80000a3c <malloc>
80003910:	92a42623          	sw	a0,-1748(s0)
    heap_struct->func_ptr = dummy_function;
80003914:	10952023          	sw	s1,256(a0)
    char * heap_buffer1 = (char *) malloc(256 + sizeof(long));
80003918:	10400513          	li	a0,260
8000391c:	920fd0ef          	jal	ra,80000a3c <malloc>
80003920:	00050493          	mv	s1,a0
    char * heap_buffer2 = (char *) malloc(256 + sizeof(long));
80003924:	10400513          	li	a0,260
80003928:	914fd0ef          	jal	ra,80000a3c <malloc>
8000392c:	00050913          	mv	s2,a0
    char * heap_buffer3 = (char *) malloc(256 + sizeof(long));
80003930:	10400513          	li	a0,260
80003934:	908fd0ef          	jal	ra,80000a3c <malloc>
80003938:	00050a13          	mv	s4,a0
    int * heap_flag = (int *) malloc(sizeof(int *));
8000393c:	00400513          	li	a0,4
80003940:	8fcfd0ef          	jal	ra,80000a3c <malloc>
    int(**heap_func_ptr)(const char *) = 0;
80003944:	92042a23          	sw	zero,-1740(s0)
    if (heap_buffer1 == NULL || heap_buffer2 == NULL) {
80003948:	08048863          	beqz	s1,800039d8 <perform_attack+0x11c>
8000394c:	00050993          	mv	s3,a0
80003950:	08090463          	beqz	s2,800039d8 <perform_attack+0x11c>
    bss_buffer[0]  = 'a';
80003954:	8000a7b7          	lui	a5,0x8000a
80003958:	06100713          	li	a4,97
8000395c:	10e78a23          	sb	a4,276(a5) # 8000a114 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a115>
  	strcpy(bss_secret, data_secret);
80003960:	02000613          	li	a2,32
80003964:	8000d5b7          	lui	a1,0x8000d
80003968:	c4058593          	addi	a1,a1,-960 # 8000cc40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cc41>
8000396c:	8000a537          	lui	a0,0x8000a
80003970:	0f450513          	addi	a0,a0,244 # 8000a0f4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a0f5>
80003974:	bd9fd0ef          	jal	ra,8000154c <__strcpy_chk>
    build_shellcode(shellcode_nonop);
80003978:	8000a537          	lui	a0,0x8000a
8000397c:	22850513          	addi	a0,a0,552 # 8000a228 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a229>
80003980:	ca9ff0ef          	jal	ra,80003628 <build_shellcode>
    switch (attack.location) {
80003984:	8000a7b7          	lui	a5,0x8000a
80003988:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
8000398c:	00c7a783          	lw	a5,12(a5)
80003990:	19200713          	li	a4,402
80003994:	26e78663          	beq	a5,a4,80003c00 <perform_attack+0x344>
80003998:	04f76a63          	bltu	a4,a5,800039ec <perform_attack+0x130>
8000399c:	19000713          	li	a4,400
800039a0:	0ae78263          	beq	a5,a4,80003a44 <perform_attack+0x188>
800039a4:	19100713          	li	a4,401
800039a8:	0ce79e63          	bne	a5,a4,80003a84 <perform_attack+0x1c8>
            if (attack.code_ptr == STRUCT_FUNC_PTR_HEAP &&
800039ac:	8000a7b7          	lui	a5,0x8000a
800039b0:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800039b4:	0087a783          	lw	a5,8(a5)
800039b8:	13800713          	li	a4,312
800039bc:	16e78863          	beq	a5,a4,80003b2c <perform_attack+0x270>
            if (((unsigned long) heap_buffer1 < (unsigned long) heap_buffer2) &&
800039c0:	1924e463          	bltu	s1,s2,80003b48 <perform_attack+0x28c>
                    fprintf(stderr,
800039c4:	80009537          	lui	a0,0x80009
800039c8:	11850513          	addi	a0,a0,280 # 80009118 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009119>
800039cc:	1b8010ef          	jal	ra,80004b84 <printk>
                exit(1);
800039d0:	00100513          	li	a0,1
800039d4:	824fd0ef          	jal	ra,800009f8 <exit>
        printk("Unable to allocate heap memory.");
800039d8:	80009537          	lui	a0,0x80009
800039dc:	0f850513          	addi	a0,a0,248 # 800090f8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800090f9>
800039e0:	1a4010ef          	jal	ra,80004b84 <printk>
        exit(1);
800039e4:	00100513          	li	a0,1
800039e8:	810fd0ef          	jal	ra,800009f8 <exit>
    switch (attack.location) {
800039ec:	19300713          	li	a4,403
800039f0:	08e79a63          	bne	a5,a4,80003a84 <perform_attack+0x1c8>
            if (attack.code_ptr == STRUCT_FUNC_PTR_DATA) {
800039f4:	8000a7b7          	lui	a5,0x8000a
800039f8:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800039fc:	0087a783          	lw	a5,8(a5)
80003a00:	13900713          	li	a4,313
80003a04:	1ae78663          	beq	a5,a4,80003bb0 <perform_attack+0x2f4>
            if ((attack.code_ptr == FUNC_PTR_DATA ||
80003a08:	13100713          	li	a4,305
80003a0c:	1ae78a63          	beq	a5,a4,80003bc0 <perform_attack+0x304>
80003a10:	13b00713          	li	a4,315
80003a14:	1ae78663          	beq	a5,a4,80003bc0 <perform_attack+0x304>
                buffer = data_buffer1;
80003a18:	8000d7b7          	lui	a5,0x8000d
80003a1c:	c6078793          	addi	a5,a5,-928 # 8000cc60 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cc61>
80003a20:	96f42c23          	sw	a5,-1672(s0)
            if (attack.inject_param == DATA_ONLY) {
80003a24:	8000a7b7          	lui	a5,0x8000a
80003a28:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003a2c:	0047a703          	lw	a4,4(a5)
80003a30:	0cb00793          	li	a5,203
80003a34:	1af70663          	beq	a4,a5,80003be0 <perform_attack+0x324>
            heap_jmp_buffer = heap_buffer1;
80003a38:	92942423          	sw	s1,-1752(s0)
            heap_func_ptr   = (void *) heap_buffer1;
80003a3c:	92942a23          	sw	s1,-1740(s0)
80003a40:	0440006f          	j	80003a84 <perform_attack+0x1c8>
            if (attack.code_ptr == STRUCT_FUNC_PTR_STACK &&
80003a44:	8000a7b7          	lui	a5,0x8000a
80003a48:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003a4c:	0087a783          	lw	a5,8(a5)
80003a50:	13700713          	li	a4,311
80003a54:	08e78663          	beq	a5,a4,80003ae0 <perform_attack+0x224>
            } else if (attack.code_ptr == FUNC_PTR_STACK_PARAM &&
80003a58:	12e00713          	li	a4,302
80003a5c:	0ae78063          	beq	a5,a4,80003afc <perform_attack+0x240>
                buffer = stack_buffer;
80003a60:	a8040793          	addi	a5,s0,-1408
80003a64:	96f42c23          	sw	a5,-1672(s0)
            if (attack.inject_param == DATA_ONLY) {
80003a68:	8000a7b7          	lui	a5,0x8000a
80003a6c:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003a70:	0047a703          	lw	a4,4(a5)
80003a74:	0cb00793          	li	a5,203
80003a78:	0af70063          	beq	a4,a5,80003b18 <perform_attack+0x25c>
            heap_jmp_buffer = (void *) heap_buffer1;
80003a7c:	92942423          	sw	s1,-1752(s0)
            heap_func_ptr   = (void *) heap_buffer1;
80003a80:	92942a23          	sw	s1,-1740(s0)
    if (heap_func_ptr)
80003a84:	93442703          	lw	a4,-1740(s0)
80003a88:	00070863          	beqz	a4,80003a98 <perform_attack+0x1dc>
        *heap_func_ptr = dummy_function;
80003a8c:	800037b7          	lui	a5,0x80003
80003a90:	00078793          	mv	a5,a5
80003a94:	00f72023          	sw	a5,0(a4)
    switch (attack.technique) {
80003a98:	8000a7b7          	lui	a5,0x8000a
80003a9c:	2147a783          	lw	a5,532(a5) # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003aa0:	06400713          	li	a4,100
80003aa4:	1ee78863          	beq	a5,a4,80003c94 <perform_attack+0x3d8>
80003aa8:	06500713          	li	a4,101
80003aac:	36e78463          	beq	a5,a4,80003e14 <perform_attack+0x558>
    switch (attack.code_ptr) {
80003ab0:	8000a7b7          	lui	a5,0x8000a
80003ab4:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003ab8:	0087a783          	lw	a5,8(a5)
80003abc:	ece78793          	addi	a5,a5,-306
80003ac0:	00400713          	li	a4,4
80003ac4:	44f76a63          	bltu	a4,a5,80003f18 <perform_attack+0x65c>
80003ac8:	00279793          	slli	a5,a5,0x2
80003acc:	80009737          	lui	a4,0x80009
80003ad0:	2cc70713          	addi	a4,a4,716 # 800092cc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800092cd>
80003ad4:	00e787b3          	add	a5,a5,a4
80003ad8:	0007a783          	lw	a5,0(a5)
80003adc:	00078067          	jr	a5
              attack.technique == DIRECT)
80003ae0:	8000a737          	lui	a4,0x8000a
80003ae4:	21472683          	lw	a3,532(a4) # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
            if (attack.code_ptr == STRUCT_FUNC_PTR_STACK &&
80003ae8:	06400713          	li	a4,100
80003aec:	f6e696e3          	bne	a3,a4,80003a58 <perform_attack+0x19c>
                buffer = stack_struct.buffer;
80003af0:	97c40793          	addi	a5,s0,-1668
80003af4:	96f42c23          	sw	a5,-1672(s0)
80003af8:	f71ff06f          	j	80003a68 <perform_attack+0x1ac>
              attack.technique == DIRECT)
80003afc:	8000a7b7          	lui	a5,0x8000a
80003b00:	2147a703          	lw	a4,532(a5) # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
            } else if (attack.code_ptr == FUNC_PTR_STACK_PARAM &&
80003b04:	06400793          	li	a5,100
80003b08:	f4f71ce3          	bne	a4,a5,80003a60 <perform_attack+0x1a4>
                set_low_buf(&buffer);
80003b0c:	97840513          	addi	a0,s0,-1672
80003b10:	8c5ff0ef          	jal	ra,800033d4 <set_low_buf>
80003b14:	f55ff06f          	j	80003a68 <perform_attack+0x1ac>
                stack_mem_ptr = &stack_flag;
80003b18:	ea040793          	addi	a5,s0,-352
80003b1c:	eaf42423          	sw	a5,-344(s0)
            heap_jmp_buffer = (void *) heap_buffer1;
80003b20:	92942423          	sw	s1,-1752(s0)
            heap_func_ptr   = (void *) heap_buffer1;
80003b24:	92942a23          	sw	s1,-1740(s0)
80003b28:	f5dff06f          	j	80003a84 <perform_attack+0x1c8>
              attack.technique == DIRECT)
80003b2c:	8000a737          	lui	a4,0x8000a
80003b30:	21472683          	lw	a3,532(a4) # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
            if (attack.code_ptr == STRUCT_FUNC_PTR_HEAP &&
80003b34:	06400713          	li	a4,100
80003b38:	e8e694e3          	bne	a3,a4,800039c0 <perform_attack+0x104>
                buffer = heap_struct->buffer;
80003b3c:	92c42783          	lw	a5,-1748(s0)
80003b40:	96f42c23          	sw	a5,-1672(s0)
                break;
80003b44:	f41ff06f          	j	80003a84 <perform_attack+0x1c8>
            if (((unsigned long) heap_buffer1 < (unsigned long) heap_buffer2) &&
80003b48:	e7497ee3          	bgeu	s2,s4,800039c4 <perform_attack+0x108>
                buffer = heap_buffer1;
80003b4c:	96942c23          	sw	s1,-1672(s0)
                heap_mem_ptr_aux = (long *) heap_buffer2;
80003b50:	93242023          	sw	s2,-1760(s0)
                heap_mem_ptr     = (long *) heap_buffer3;
80003b54:	91442e23          	sw	s4,-1764(s0)
				if (attack.code_ptr == VAR_LEAK) {
80003b58:	13d00713          	li	a4,317
80003b5c:	02e78e63          	beq	a5,a4,80003b98 <perform_attack+0x2dc>
80003b60:	00000913          	li	s2,0
                heap_func_ptr = malloc(sizeof(void *));
80003b64:	00400513          	li	a0,4
80003b68:	ed5fc0ef          	jal	ra,80000a3c <malloc>
80003b6c:	92a42a23          	sw	a0,-1740(s0)
                heap_jmp_buffer = (int *) malloc(sizeof(jmp_buf));
80003b70:	13000513          	li	a0,304
80003b74:	ec9fc0ef          	jal	ra,80000a3c <malloc>
            if (attack.inject_param == DATA_ONLY) {
80003b78:	8000a737          	lui	a4,0x8000a
80003b7c:	21470713          	addi	a4,a4,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003b80:	00472683          	lw	a3,4(a4)
80003b84:	0cb00713          	li	a4,203
80003b88:	0ee68e63          	beq	a3,a4,80003c84 <perform_attack+0x3c8>
                heap_jmp_buffer = (int *) malloc(sizeof(jmp_buf));
80003b8c:	92a42423          	sw	a0,-1752(s0)
            if (attack.inject_param == DATA_ONLY) {
80003b90:	93242823          	sw	s2,-1744(s0)
80003b94:	ef1ff06f          	j	80003a84 <perform_attack+0x1c8>
					strcpy(heap_secret, data_secret);
80003b98:	10400613          	li	a2,260
80003b9c:	8000d5b7          	lui	a1,0x8000d
80003ba0:	c4058593          	addi	a1,a1,-960 # 8000cc40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cc41>
80003ba4:	00090513          	mv	a0,s2
80003ba8:	9a5fd0ef          	jal	ra,8000154c <__strcpy_chk>
80003bac:	fb9ff06f          	j	80003b64 <perform_attack+0x2a8>
                buffer = data_struct.buffer;
80003bb0:	8000d7b7          	lui	a5,0x8000d
80003bb4:	d6078793          	addi	a5,a5,-672 # 8000cd60 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cd61>
80003bb8:	96f42c23          	sw	a5,-1672(s0)
                break;
80003bbc:	ec9ff06f          	j	80003a84 <perform_attack+0x1c8>
              attack.technique == DIRECT)
80003bc0:	8000a7b7          	lui	a5,0x8000a
80003bc4:	2147a703          	lw	a4,532(a5) # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
              attack.code_ptr == VAR_BOF) &&
80003bc8:	06400793          	li	a5,100
80003bcc:	e4f716e3          	bne	a4,a5,80003a18 <perform_attack+0x15c>
                buffer = data_buffer2;
80003bd0:	8000d7b7          	lui	a5,0x8000d
80003bd4:	f4878793          	addi	a5,a5,-184 # 8000cf48 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cf49>
80003bd8:	96f42c23          	sw	a5,-1672(s0)
80003bdc:	e49ff06f          	j	80003a24 <perform_attack+0x168>
                data_flag     = 0;
80003be0:	8000d7b7          	lui	a5,0x8000d
80003be4:	f407a223          	sw	zero,-188(a5) # 8000cf44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cf45>
                *data_mem_ptr = &data_flag;
80003be8:	f4478793          	addi	a5,a5,-188
80003bec:	8000d737          	lui	a4,0x8000d
80003bf0:	a4f72023          	sw	a5,-1472(a4) # 8000ca40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ca41>
            heap_jmp_buffer = heap_buffer1;
80003bf4:	92942423          	sw	s1,-1752(s0)
            heap_func_ptr   = (void *) heap_buffer1;
80003bf8:	92942a23          	sw	s1,-1740(s0)
80003bfc:	e89ff06f          	j	80003a84 <perform_attack+0x1c8>
            if (attack.code_ptr == STRUCT_FUNC_PTR_BSS) {
80003c00:	8000a7b7          	lui	a5,0x8000a
80003c04:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003c08:	0087a703          	lw	a4,8(a5)
80003c0c:	13a00793          	li	a5,314
80003c10:	04f70663          	beq	a4,a5,80003c5c <perform_attack+0x3a0>
            buffer = bss_buffer;
80003c14:	8000a7b7          	lui	a5,0x8000a
80003c18:	11478793          	addi	a5,a5,276 # 8000a114 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a115>
80003c1c:	96f42c23          	sw	a5,-1672(s0)
            bss_flag = 0;
80003c20:	8000a7b7          	lui	a5,0x8000a
80003c24:	d807a223          	sw	zero,-636(a5) # 80009d84 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d85>
            bss_mem_ptr_aux = &dummy_function;
80003c28:	800037b7          	lui	a5,0x80003
80003c2c:	00078793          	mv	a5,a5
80003c30:	8000a737          	lui	a4,0x8000a
80003c34:	d8f72023          	sw	a5,-640(a4) # 80009d80 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d81>
            bss_mem_ptr     = &dummy_function;
80003c38:	8000a737          	lui	a4,0x8000a
80003c3c:	d6f72e23          	sw	a5,-644(a4) # 80009d7c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d7d>
            if (attack.inject_param == DATA_ONLY) {
80003c40:	8000a7b7          	lui	a5,0x8000a
80003c44:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003c48:	0047a703          	lw	a4,4(a5)
80003c4c:	0cb00793          	li	a5,203
80003c50:	00f70e63          	beq	a4,a5,80003c6c <perform_attack+0x3b0>
            heap_func_ptr = (void *) heap_buffer1;
80003c54:	92942a23          	sw	s1,-1740(s0)
80003c58:	e2dff06f          	j	80003a84 <perform_attack+0x1c8>
                buffer = bss_struct.buffer;
80003c5c:	8000a7b7          	lui	a5,0x8000a
80003c60:	ff078793          	addi	a5,a5,-16 # 80009ff0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009ff1>
80003c64:	96f42c23          	sw	a5,-1672(s0)
                break;
80003c68:	e1dff06f          	j	80003a84 <perform_attack+0x1c8>
                bss_mem_ptr = &bss_flag;
80003c6c:	8000a737          	lui	a4,0x8000a
80003c70:	8000a7b7          	lui	a5,0x8000a
80003c74:	d8478793          	addi	a5,a5,-636 # 80009d84 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d85>
80003c78:	d6f72e23          	sw	a5,-644(a4) # 80009d7c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d7d>
            heap_func_ptr = (void *) heap_buffer1;
80003c7c:	92942a23          	sw	s1,-1740(s0)
80003c80:	e05ff06f          	j	80003a84 <perform_attack+0x1c8>
                heap_jmp_buffer = (int *) malloc(sizeof(jmp_buf));
80003c84:	92a42423          	sw	a0,-1752(s0)
80003c88:	93242823          	sw	s2,-1744(s0)
                heap_mem_ptr = heap_flag;
80003c8c:	91342e23          	sw	s3,-1764(s0)
80003c90:	df5ff06f          	j	80003a84 <perform_attack+0x1c8>
            switch (attack.code_ptr) {
80003c94:	8000a7b7          	lui	a5,0x8000a
80003c98:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003c9c:	0087a783          	lw	a5,8(a5)
80003ca0:	ed478793          	addi	a5,a5,-300
80003ca4:	01100713          	li	a4,17
80003ca8:	e0f764e3          	bltu	a4,a5,80003ab0 <perform_attack+0x1f4>
80003cac:	00279793          	slli	a5,a5,0x2
80003cb0:	80009737          	lui	a4,0x80009
80003cb4:	2e070713          	addi	a4,a4,736 # 800092e0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800092e1>
80003cb8:	00e787b3          	add	a5,a5,a4
80003cbc:	0007a783          	lw	a5,0(a5)
80003cc0:	00078067          	jr	a5
                    target_addr = RET_ADDR_PTR;
80003cc4:	ffc40793          	addi	a5,s0,-4
80003cc8:	92f42823          	sw	a5,-1744(s0)
                    break;
80003ccc:	de5ff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = &stack_func_ptr_param;
80003cd0:	93c40793          	addi	a5,s0,-1732
80003cd4:	92f42823          	sw	a5,-1744(s0)
                    break;
80003cd8:	dd9ff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = heap_func_ptr;
80003cdc:	93442783          	lw	a5,-1740(s0)
80003ce0:	92f42823          	sw	a5,-1744(s0)
                    break;
80003ce4:	dcdff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = &bss_func_ptr;
80003ce8:	8000a7b7          	lui	a5,0x8000a
80003cec:	d7878793          	addi	a5,a5,-648 # 80009d78 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d79>
80003cf0:	92f42823          	sw	a5,-1744(s0)
                    break;
80003cf4:	dbdff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = &data_func_ptr;
80003cf8:	8000d7b7          	lui	a5,0x8000d
80003cfc:	f4078793          	addi	a5,a5,-192 # 8000cf40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cf41>
80003d00:	92f42823          	sw	a5,-1744(s0)
                    break;
80003d04:	dadff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = stack_jmp_buffer;
80003d08:	eb040793          	addi	a5,s0,-336
80003d0c:	92f42823          	sw	a5,-1744(s0)
                    break;
80003d10:	da1ff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = stack_jmp_buffer_param;
80003d14:	93842783          	lw	a5,-1736(s0)
80003d18:	92f42823          	sw	a5,-1744(s0)
                    break;
80003d1c:	d95ff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = (void *) heap_jmp_buffer;
80003d20:	92842783          	lw	a5,-1752(s0)
80003d24:	92f42823          	sw	a5,-1744(s0)
                    break;
80003d28:	d89ff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = data_jmp_buffer;
80003d2c:	8000d7b7          	lui	a5,0x8000d
80003d30:	91078793          	addi	a5,a5,-1776 # 8000c910 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000c911>
80003d34:	92f42823          	sw	a5,-1744(s0)
                    break;
80003d38:	d79ff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = bss_jmp_buffer;
80003d3c:	8000a7b7          	lui	a5,0x8000a
80003d40:	db078793          	addi	a5,a5,-592 # 80009db0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009db1>
80003d44:	92f42823          	sw	a5,-1744(s0)
                    break;
80003d48:	d69ff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = &stack_struct.func_ptr;
80003d4c:	a7c40793          	addi	a5,s0,-1412
80003d50:	92f42823          	sw	a5,-1744(s0)
                    break;
80003d54:	d5dff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = (void *) heap_struct + 256;
80003d58:	92c42783          	lw	a5,-1748(s0)
80003d5c:	10078793          	addi	a5,a5,256
80003d60:	92f42823          	sw	a5,-1744(s0)
                    break;
80003d64:	d4dff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = &data_struct.func_ptr;
80003d68:	8000d7b7          	lui	a5,0x8000d
80003d6c:	e6078793          	addi	a5,a5,-416 # 8000ce60 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ce61>
80003d70:	92f42823          	sw	a5,-1744(s0)
                    break;
80003d74:	d3dff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = &bss_struct.func_ptr;
80003d78:	8000a7b7          	lui	a5,0x8000a
80003d7c:	0f078793          	addi	a5,a5,240 # 8000a0f0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a0f1>
80003d80:	92f42823          	sw	a5,-1744(s0)
                    break;
80003d84:	d2dff06f          	j	80003ab0 <perform_attack+0x1f4>
                    switch (attack.location) {
80003d88:	8000a7b7          	lui	a5,0x8000a
80003d8c:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003d90:	00c7a783          	lw	a5,12(a5)
80003d94:	19200713          	li	a4,402
80003d98:	0ee78463          	beq	a5,a4,80003e80 <perform_attack+0x5c4>
80003d9c:	00f76e63          	bltu	a4,a5,80003db8 <perform_attack+0x4fc>
80003da0:	19000713          	li	a4,400
80003da4:	0ee78663          	beq	a5,a4,80003e90 <perform_attack+0x5d4>
80003da8:	19100713          	li	a4,401
80003dac:	d0e792e3          	bne	a5,a4,80003ab0 <perform_attack+0x1f4>
                            target_addr = heap_flag;
80003db0:	93342823          	sw	s3,-1744(s0)
80003db4:	cfdff06f          	j	80003ab0 <perform_attack+0x1f4>
80003db8:	19300713          	li	a4,403
80003dbc:	cee79ae3          	bne	a5,a4,80003ab0 <perform_attack+0x1f4>
                            target_addr = &data_flag;
80003dc0:	8000d7b7          	lui	a5,0x8000d
80003dc4:	f4478793          	addi	a5,a5,-188 # 8000cf44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cf45>
80003dc8:	92f42823          	sw	a5,-1744(s0)
80003dcc:	ce5ff06f          	j	80003ab0 <perform_attack+0x1f4>
                    switch (attack.location) {
80003dd0:	8000a7b7          	lui	a5,0x8000a
80003dd4:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003dd8:	00c7a783          	lw	a5,12(a5)
80003ddc:	19200713          	li	a4,402
80003de0:	0ae78e63          	beq	a5,a4,80003e9c <perform_attack+0x5e0>
80003de4:	00f76c63          	bltu	a4,a5,80003dfc <perform_attack+0x540>
80003de8:	19000713          	li	a4,400
80003dec:	cce792e3          	bne	a5,a4,80003ab0 <perform_attack+0x1f4>
                            target_addr = &stack_secret;
80003df0:	e8040793          	addi	a5,s0,-384
80003df4:	92f42823          	sw	a5,-1744(s0)
80003df8:	cb9ff06f          	j	80003ab0 <perform_attack+0x1f4>
80003dfc:	19300713          	li	a4,403
80003e00:	cae798e3          	bne	a5,a4,80003ab0 <perform_attack+0x1f4>
                            target_addr = &data_secret;
80003e04:	8000d7b7          	lui	a5,0x8000d
80003e08:	c4078793          	addi	a5,a5,-960 # 8000cc40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cc41>
80003e0c:	92f42823          	sw	a5,-1744(s0)
80003e10:	ca1ff06f          	j	80003ab0 <perform_attack+0x1f4>
            switch (attack.location) {
80003e14:	8000a7b7          	lui	a5,0x8000a
80003e18:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003e1c:	00c7a783          	lw	a5,12(a5)
80003e20:	19200713          	li	a4,402
80003e24:	08e78463          	beq	a5,a4,80003eac <perform_attack+0x5f0>
80003e28:	02f76463          	bltu	a4,a5,80003e50 <perform_attack+0x594>
80003e2c:	19000713          	li	a4,400
80003e30:	08e78c63          	beq	a5,a4,80003ec8 <perform_attack+0x60c>
80003e34:	19100713          	li	a4,401
80003e38:	c6e79ce3          	bne	a5,a4,80003ab0 <perform_attack+0x1f4>
                    target_addr_aux = heap_mem_ptr_aux;
80003e3c:	92042783          	lw	a5,-1760(s0)
80003e40:	92f42223          	sw	a5,-1756(s0)
                    target_addr     = heap_mem_ptr;
80003e44:	91c42783          	lw	a5,-1764(s0)
80003e48:	92f42823          	sw	a5,-1744(s0)
                    break;
80003e4c:	c65ff06f          	j	80003ab0 <perform_attack+0x1f4>
80003e50:	19300713          	li	a4,403
80003e54:	c4e79ee3          	bne	a5,a4,80003ab0 <perform_attack+0x1f4>
                    target_addr_aux = &data_mem_ptr_aux;
80003e58:	8000d7b7          	lui	a5,0x8000d
80003e5c:	b4078793          	addi	a5,a5,-1216 # 8000cb40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cb41>
80003e60:	92f42223          	sw	a5,-1756(s0)
                    target_addr     = &data_mem_ptr;
80003e64:	8000d7b7          	lui	a5,0x8000d
80003e68:	a4078793          	addi	a5,a5,-1472 # 8000ca40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ca41>
80003e6c:	92f42823          	sw	a5,-1744(s0)
80003e70:	c41ff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr = &stack_func_ptr;
80003e74:	eac40793          	addi	a5,s0,-340
80003e78:	92f42823          	sw	a5,-1744(s0)
80003e7c:	c35ff06f          	j	80003ab0 <perform_attack+0x1f4>
                            target_addr = &bss_flag;
80003e80:	8000a7b7          	lui	a5,0x8000a
80003e84:	d8478793          	addi	a5,a5,-636 # 80009d84 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d85>
80003e88:	92f42823          	sw	a5,-1744(s0)
80003e8c:	c25ff06f          	j	80003ab0 <perform_attack+0x1f4>
                            target_addr = &stack_flag;
80003e90:	ea040793          	addi	a5,s0,-352
80003e94:	92f42823          	sw	a5,-1744(s0)
80003e98:	c19ff06f          	j	80003ab0 <perform_attack+0x1f4>
                            target_addr = &bss_secret;
80003e9c:	8000a7b7          	lui	a5,0x8000a
80003ea0:	0f478793          	addi	a5,a5,244 # 8000a0f4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a0f5>
80003ea4:	92f42823          	sw	a5,-1744(s0)
80003ea8:	c09ff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr_aux = &bss_mem_ptr_aux;
80003eac:	8000a7b7          	lui	a5,0x8000a
80003eb0:	d8078793          	addi	a5,a5,-640 # 80009d80 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d81>
80003eb4:	92f42223          	sw	a5,-1756(s0)
                    target_addr     = &bss_mem_ptr;
80003eb8:	8000a7b7          	lui	a5,0x8000a
80003ebc:	d7c78793          	addi	a5,a5,-644 # 80009d7c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d7d>
80003ec0:	92f42823          	sw	a5,-1744(s0)
80003ec4:	bedff06f          	j	80003ab0 <perform_attack+0x1f4>
                    target_addr_aux = &stack_mem_ptr_aux;
80003ec8:	ea440793          	addi	a5,s0,-348
80003ecc:	92f42223          	sw	a5,-1756(s0)
                    target_addr     = &stack_mem_ptr;
80003ed0:	ea840793          	addi	a5,s0,-344
80003ed4:	92f42823          	sw	a5,-1744(s0)
80003ed8:	bd9ff06f          	j	80003ab0 <perform_attack+0x1f4>
            if (setjmp(stack_jmp_buffer) != 0) {
80003edc:	eb040513          	addi	a0,s0,-336
80003ee0:	b04fd0ef          	jal	ra,800011e4 <setjmp>
80003ee4:	00051863          	bnez	a0,80003ef4 <perform_attack+0x638>
            payload.jmp_buffer = &stack_jmp_buffer;
80003ee8:	eb040793          	addi	a5,s0,-336
80003eec:	94f42823          	sw	a5,-1712(s0)
            break;
80003ef0:	0280006f          	j	80003f18 <perform_attack+0x65c>
                printf("Longjmp attack failed. Returning normally...\n");
80003ef4:	80009537          	lui	a0,0x80009
80003ef8:	14c50513          	addi	a0,a0,332 # 8000914c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000914d>
80003efc:	489000ef          	jal	ra,80004b84 <printk>
80003f00:	5bc0006f          	j	800044bc <perform_attack+0xc00>
            if (setjmp(stack_jmp_buffer_param) != 0) {
80003f04:	93842503          	lw	a0,-1736(s0)
80003f08:	adcfd0ef          	jal	ra,800011e4 <setjmp>
80003f0c:	0c051063          	bnez	a0,80003fcc <perform_attack+0x710>
            payload.jmp_buffer = &stack_jmp_buffer_param;
80003f10:	93840793          	addi	a5,s0,-1736
80003f14:	94f42823          	sw	a5,-1712(s0)
    payload.ptr_to_correct_return_addr = RET_ADDR_PTR;
80003f18:	ffc40793          	addi	a5,s0,-4
80003f1c:	96f42223          	sw	a5,-1692(s0)
    payload.inject_param = attack.inject_param;
80003f20:	8000a7b7          	lui	a5,0x8000a
80003f24:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003f28:	0047a703          	lw	a4,4(a5)
80003f2c:	94e42023          	sw	a4,-1728(s0)
    switch (attack.technique) {
80003f30:	0007a783          	lw	a5,0(a5)
80003f34:	06400693          	li	a3,100
80003f38:	12d78c63          	beq	a5,a3,80004070 <perform_attack+0x7b4>
80003f3c:	06500713          	li	a4,101
80003f40:	1ae78263          	beq	a5,a4,800040e4 <perform_attack+0x828>
        fprintf(stderr, "target_addr == %p\n", target_addr);
80003f44:	93042483          	lw	s1,-1744(s0)
80003f48:	00048593          	mv	a1,s1
80003f4c:	80009537          	lui	a0,0x80009
80003f50:	1c450513          	addi	a0,a0,452 # 800091c4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800091c5>
80003f54:	431000ef          	jal	ra,80004b84 <printk>
        fprintf(stderr, "buffer == %p\n", buffer);
80003f58:	97842583          	lw	a1,-1672(s0)
80003f5c:	80009537          	lui	a0,0x80009
80003f60:	1d850513          	addi	a0,a0,472 # 800091d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800091d9>
80003f64:	421000ef          	jal	ra,80004b84 <printk>
    if ((unsigned long) target_addr > (unsigned long) buffer) {
80003f68:	97842583          	lw	a1,-1672(s0)
80003f6c:	2895fc63          	bgeu	a1,s1,80004204 <perform_attack+0x948>
          - (unsigned long) buffer
80003f70:	40b485b3          	sub	a1,s1,a1
          + 1); /* For null termination so that buffer can be     */
80003f74:	00558593          	addi	a1,a1,5
        payload.size =
80003f78:	94b42223          	sw	a1,-1724(s0)
            fprintf(stderr, "payload size == %d\n", payload.size);
80003f7c:	80009537          	lui	a0,0x80009
80003f80:	1e850513          	addi	a0,a0,488 # 800091e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800091e9>
80003f84:	401000ef          	jal	ra,80004b84 <printk>
    buffer[0] = '\0';
80003f88:	97842783          	lw	a5,-1672(s0)
80003f8c:	00078023          	sb	zero,0(a5)
    if (!build_payload(&payload)) {
80003f90:	94040513          	addi	a0,s0,-1728
80003f94:	a18ff0ef          	jal	ra,800031ac <build_payload>
80003f98:	28050063          	beqz	a0,80004218 <perform_attack+0x95c>
    switch (attack.function) {
80003f9c:	8000a7b7          	lui	a5,0x8000a
80003fa0:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80003fa4:	0107a783          	lw	a5,16(a5)
80003fa8:	e0c78793          	addi	a5,a5,-500
80003fac:	00800713          	li	a4,8
80003fb0:	3cf76463          	bltu	a4,a5,80004378 <perform_attack+0xabc>
80003fb4:	00279793          	slli	a5,a5,0x2
80003fb8:	80009737          	lui	a4,0x80009
80003fbc:	32870713          	addi	a4,a4,808 # 80009328 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009329>
80003fc0:	00e787b3          	add	a5,a5,a4
80003fc4:	0007a783          	lw	a5,0(a5)
80003fc8:	00078067          	jr	a5
                printf("Longjmp attack failed. Returning normally...\n");
80003fcc:	80009537          	lui	a0,0x80009
80003fd0:	14c50513          	addi	a0,a0,332 # 8000914c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000914d>
80003fd4:	3b1000ef          	jal	ra,80004b84 <printk>
80003fd8:	f39ff06f          	j	80003f10 <perform_attack+0x654>
            if (setjmp(*heap_jmp_buffer) != 0) {
80003fdc:	92842503          	lw	a0,-1752(s0)
80003fe0:	a04fd0ef          	jal	ra,800011e4 <setjmp>
80003fe4:	00051a63          	bnez	a0,80003ff8 <perform_attack+0x73c>
            payload.jmp_buffer = (void *) heap_jmp_buffer;
80003fe8:	92842783          	lw	a5,-1752(s0)
80003fec:	94f42823          	sw	a5,-1712(s0)
            payload.stack_jmp_buffer_param = NULL;
80003ff0:	94042a23          	sw	zero,-1708(s0)
            break;
80003ff4:	f25ff06f          	j	80003f18 <perform_attack+0x65c>
                printf("Longjmp attack failed. Returning normally...\n");
80003ff8:	80009537          	lui	a0,0x80009
80003ffc:	14c50513          	addi	a0,a0,332 # 8000914c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000914d>
80004000:	385000ef          	jal	ra,80004b84 <printk>
80004004:	4b80006f          	j	800044bc <perform_attack+0xc00>
            if (setjmp(data_jmp_buffer) != 0) {
80004008:	8000d537          	lui	a0,0x8000d
8000400c:	91050513          	addi	a0,a0,-1776 # 8000c910 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000c911>
80004010:	9d4fd0ef          	jal	ra,800011e4 <setjmp>
80004014:	00051c63          	bnez	a0,8000402c <perform_attack+0x770>
            payload.jmp_buffer = (void *) data_jmp_buffer;
80004018:	8000d7b7          	lui	a5,0x8000d
8000401c:	91078793          	addi	a5,a5,-1776 # 8000c910 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000c911>
80004020:	94f42823          	sw	a5,-1712(s0)
            payload.stack_jmp_buffer_param = NULL;
80004024:	94042a23          	sw	zero,-1708(s0)
            break;
80004028:	ef1ff06f          	j	80003f18 <perform_attack+0x65c>
                printf("Longjmp attack failed. Returning normally...\n");
8000402c:	80009537          	lui	a0,0x80009
80004030:	14c50513          	addi	a0,a0,332 # 8000914c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000914d>
80004034:	351000ef          	jal	ra,80004b84 <printk>
80004038:	4840006f          	j	800044bc <perform_attack+0xc00>
            if (setjmp(bss_jmp_buffer) != 0) {
8000403c:	8000a537          	lui	a0,0x8000a
80004040:	db050513          	addi	a0,a0,-592 # 80009db0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009db1>
80004044:	9a0fd0ef          	jal	ra,800011e4 <setjmp>
80004048:	00051c63          	bnez	a0,80004060 <perform_attack+0x7a4>
            payload.jmp_buffer = (void *) bss_jmp_buffer;
8000404c:	8000a7b7          	lui	a5,0x8000a
80004050:	db078793          	addi	a5,a5,-592 # 80009db0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009db1>
80004054:	94f42823          	sw	a5,-1712(s0)
            payload.stack_jmp_buffer_param = NULL;
80004058:	94042a23          	sw	zero,-1708(s0)
            break;
8000405c:	ebdff06f          	j	80003f18 <perform_attack+0x65c>
                printf("Longjmp attack failed. Returning normally...\n");
80004060:	80009537          	lui	a0,0x80009
80004064:	14c50513          	addi	a0,a0,332 # 8000914c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000914d>
80004068:	31d000ef          	jal	ra,80004b84 <printk>
8000406c:	4500006f          	j	800044bc <perform_attack+0xc00>
            switch (attack.inject_param) {
80004070:	0ca00793          	li	a5,202
80004074:	04f70063          	beq	a4,a5,800040b4 <perform_attack+0x7f8>
80004078:	02e7e263          	bltu	a5,a4,8000409c <perform_attack+0x7e0>
8000407c:	0c800793          	li	a5,200
80004080:	04f70263          	beq	a4,a5,800040c4 <perform_attack+0x808>
80004084:	0c900793          	li	a5,201
80004088:	04f71463          	bne	a4,a5,800040d0 <perform_attack+0x814>
                    payload.overflow_ptr = &ret2libc_target;
8000408c:	800037b7          	lui	a5,0x80003
80004090:	04878793          	addi	a5,a5,72 # 80003048 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003049>
80004094:	94f42423          	sw	a5,-1720(s0)
                    break;
80004098:	eadff06f          	j	80003f44 <perform_attack+0x688>
8000409c:	0cb00793          	li	a5,203
800040a0:	02f71863          	bne	a4,a5,800040d0 <perform_attack+0x814>
                    payload.overflow_ptr = 0xdeadbeef;
800040a4:	deadc7b7          	lui	a5,0xdeadc
800040a8:	eef78793          	addi	a5,a5,-273 # deadbeef <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xdeadbef0>
800040ac:	94f42423          	sw	a5,-1720(s0)
                    break;
800040b0:	e95ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = (uintptr_t) &rop_target;
800040b4:	800037b7          	lui	a5,0x80003
800040b8:	06878793          	addi	a5,a5,104 # 80003068 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003069>
800040bc:	94f42423          	sw	a5,-1720(s0)
                    break;
800040c0:	e85ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = buffer;
800040c4:	97842783          	lw	a5,-1672(s0)
800040c8:	94f42423          	sw	a5,-1720(s0)
                    break;
800040cc:	e79ff06f          	j	80003f44 <perform_attack+0x688>
                        fprintf(stderr, "Unknown choice of attack code");
800040d0:	80009537          	lui	a0,0x80009
800040d4:	17c50513          	addi	a0,a0,380 # 8000917c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000917d>
800040d8:	2ad000ef          	jal	ra,80004b84 <printk>
                        exit(1);
800040dc:	00100513          	li	a0,1
800040e0:	919fc0ef          	jal	ra,800009f8 <exit>
            switch (attack.code_ptr) {
800040e4:	8000a7b7          	lui	a5,0x8000a
800040e8:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800040ec:	0087a783          	lw	a5,8(a5)
800040f0:	ed478793          	addi	a5,a5,-300
800040f4:	01100713          	li	a4,17
800040f8:	0ef76c63          	bltu	a4,a5,800041f0 <perform_attack+0x934>
800040fc:	00279793          	slli	a5,a5,0x2
80004100:	80009737          	lui	a4,0x80009
80004104:	34c70713          	addi	a4,a4,844 # 8000934c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000934d>
80004108:	00e787b3          	add	a5,a5,a4
8000410c:	0007a783          	lw	a5,0(a5)
80004110:	00078067          	jr	a5
                    payload.overflow_ptr = RET_ADDR_PTR;
80004114:	ffc40793          	addi	a5,s0,-4
80004118:	94f42423          	sw	a5,-1720(s0)
                    break;
8000411c:	e29ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = &stack_func_ptr;
80004120:	eac40793          	addi	a5,s0,-340
80004124:	94f42423          	sw	a5,-1720(s0)
                    break;
80004128:	e1dff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = &stack_func_ptr_param;
8000412c:	93c40793          	addi	a5,s0,-1732
80004130:	94f42423          	sw	a5,-1720(s0)
                    break;
80004134:	e11ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = heap_func_ptr;
80004138:	93442783          	lw	a5,-1740(s0)
8000413c:	94f42423          	sw	a5,-1720(s0)
                    break;
80004140:	e05ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = &bss_func_ptr;
80004144:	8000a7b7          	lui	a5,0x8000a
80004148:	d7878793          	addi	a5,a5,-648 # 80009d78 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d79>
8000414c:	94f42423          	sw	a5,-1720(s0)
                    break;
80004150:	df5ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = &data_func_ptr;
80004154:	8000d7b7          	lui	a5,0x8000d
80004158:	f4078793          	addi	a5,a5,-192 # 8000cf40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cf41>
8000415c:	94f42423          	sw	a5,-1720(s0)
                    break;
80004160:	de5ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = &stack_struct.func_ptr;
80004164:	a7c40793          	addi	a5,s0,-1412
80004168:	94f42423          	sw	a5,-1720(s0)
                    break;
8000416c:	dd9ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = (void *) heap_struct + 256;
80004170:	92c42783          	lw	a5,-1748(s0)
80004174:	10078793          	addi	a5,a5,256
80004178:	94f42423          	sw	a5,-1720(s0)
                    break;
8000417c:	dc9ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = &data_struct.func_ptr;
80004180:	8000d7b7          	lui	a5,0x8000d
80004184:	e6078793          	addi	a5,a5,-416 # 8000ce60 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ce61>
80004188:	94f42423          	sw	a5,-1720(s0)
                    break;
8000418c:	db9ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = &bss_struct.func_ptr;
80004190:	8000a7b7          	lui	a5,0x8000a
80004194:	0f078793          	addi	a5,a5,240 # 8000a0f0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a0f1>
80004198:	94f42423          	sw	a5,-1720(s0)
                    break;
8000419c:	da9ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = stack_jmp_buffer;
800041a0:	eb040793          	addi	a5,s0,-336
800041a4:	94f42423          	sw	a5,-1720(s0)
                    break;
800041a8:	d9dff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = stack_jmp_buffer_param;
800041ac:	93842783          	lw	a5,-1736(s0)
800041b0:	94f42423          	sw	a5,-1720(s0)
                    break;
800041b4:	d91ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = *heap_jmp_buffer;
800041b8:	92842783          	lw	a5,-1752(s0)
800041bc:	94f42423          	sw	a5,-1720(s0)
                    break;
800041c0:	d85ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = data_jmp_buffer;
800041c4:	8000d7b7          	lui	a5,0x8000d
800041c8:	91078793          	addi	a5,a5,-1776 # 8000c910 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000c911>
800041cc:	94f42423          	sw	a5,-1720(s0)
                    break;
800041d0:	d75ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = bss_jmp_buffer;
800041d4:	8000a7b7          	lui	a5,0x8000a
800041d8:	db078793          	addi	a5,a5,-592 # 80009db0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009db1>
800041dc:	94f42423          	sw	a5,-1720(s0)
                    break;
800041e0:	d65ff06f          	j	80003f44 <perform_attack+0x688>
                    payload.overflow_ptr = &dop_dest;
800041e4:	81018793          	addi	a5,gp,-2032 # 8000cf50 <dop_dest>
800041e8:	94f42423          	sw	a5,-1720(s0)
                    break;
800041ec:	d59ff06f          	j	80003f44 <perform_attack+0x688>
                        fprintf(stderr,
800041f0:	80009537          	lui	a0,0x80009
800041f4:	19c50513          	addi	a0,a0,412 # 8000919c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000919d>
800041f8:	18d000ef          	jal	ra,80004b84 <printk>
                    exit(1);
800041fc:	00100513          	li	a0,1
80004200:	ff8fc0ef          	jal	ra,800009f8 <exit>
            fprintf(stderr, "Error calculating size of payload\n");
80004204:	80009537          	lui	a0,0x80009
80004208:	1fc50513          	addi	a0,a0,508 # 800091fc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800091fd>
8000420c:	179000ef          	jal	ra,80004b84 <printk>
        exit(1);
80004210:	00100513          	li	a0,1
80004214:	fe4fc0ef          	jal	ra,800009f8 <exit>
            fprintf(stderr, "Error: Could not build payload\n");
80004218:	80009537          	lui	a0,0x80009
8000421c:	22050513          	addi	a0,a0,544 # 80009220 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009221>
80004220:	165000ef          	jal	ra,80004b84 <printk>
        exit(1);
80004224:	00100513          	li	a0,1
80004228:	fd0fc0ef          	jal	ra,800009f8 <exit>
8000422c:	94442603          	lw	a2,-1724(s0)
80004230:	fff60613          	addi	a2,a2,-1
80004234:	94c42583          	lw	a1,-1716(s0)
80004238:	97842503          	lw	a0,-1672(s0)
8000423c:	821fc0ef          	jal	ra,80000a5c <memcpy>
    switch (attack.technique) {
80004240:	8000a7b7          	lui	a5,0x8000a
80004244:	2147a783          	lw	a5,532(a5) # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80004248:	06400713          	li	a4,100
8000424c:	02e78e63          	beq	a5,a4,80004288 <perform_attack+0x9cc>
80004250:	06500713          	li	a4,101
80004254:	24e79463          	bne	a5,a4,8000449c <perform_attack+0xbe0>
            if (attack.function == SSCANF) {
80004258:	8000a7b7          	lui	a5,0x8000a
8000425c:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80004260:	0107a703          	lw	a4,16(a5)
80004264:	1fb00793          	li	a5,507
80004268:	12f70263          	beq	a4,a5,8000438c <perform_attack+0xad0>
            if (attack.inject_param == RETURN_INTO_LIBC) {
8000426c:	8000a7b7          	lui	a5,0x8000a
80004270:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80004274:	0047a783          	lw	a5,4(a5)
80004278:	0c900713          	li	a4,201
8000427c:	12e78a63          	beq	a5,a4,800043b0 <perform_attack+0xaf4>
            } else if (attack.inject_param == INJECTED_CODE_NO_NOP) {
80004280:	0c800713          	li	a4,200
80004284:	20e78263          	beq	a5,a4,80004488 <perform_attack+0xbcc>
    printf("");
80004288:	80009537          	lui	a0,0x80009
8000428c:	0f450513          	addi	a0,a0,244 # 800090f4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800090f5>
80004290:	0f5000ef          	jal	ra,80004b84 <printk>
    printf("\nExecuting attack... ");
80004294:	80009537          	lui	a0,0x80009
80004298:	2b450513          	addi	a0,a0,692 # 800092b4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800092b5>
8000429c:	0e9000ef          	jal	ra,80004b84 <printk>
    switch (attack.code_ptr) {
800042a0:	8000a7b7          	lui	a5,0x8000a
800042a4:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800042a8:	0087a783          	lw	a5,8(a5)
800042ac:	ed378793          	addi	a5,a5,-301
800042b0:	01000713          	li	a4,16
800042b4:	20f76463          	bltu	a4,a5,800044bc <perform_attack+0xc00>
800042b8:	00279793          	slli	a5,a5,0x2
800042bc:	80009737          	lui	a4,0x80009
800042c0:	39470713          	addi	a4,a4,916 # 80009394 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009395>
800042c4:	00e787b3          	add	a5,a5,a4
800042c8:	0007a783          	lw	a5,0(a5)
800042cc:	00078067          	jr	a5
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
800042d0:	94c42583          	lw	a1,-1716(s0)
800042d4:	97842503          	lw	a0,-1672(s0)
800042d8:	b3cfd0ef          	jal	ra,80001614 <strcpy>
800042dc:	f65ff06f          	j	80004240 <perform_attack+0x984>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
800042e0:	94442603          	lw	a2,-1724(s0)
800042e4:	94c42583          	lw	a1,-1716(s0)
800042e8:	97842503          	lw	a0,-1672(s0)
800042ec:	8e1fd0ef          	jal	ra,80001bcc <strncpy>
800042f0:	f51ff06f          	j	80004240 <perform_attack+0x984>
            sprintf(buffer, "%s", payload.buffer);
800042f4:	94c42583          	lw	a1,-1716(s0)
800042f8:	97842503          	lw	a0,-1672(s0)
800042fc:	b18fd0ef          	jal	ra,80001614 <strcpy>
80004300:	f41ff06f          	j	80004240 <perform_attack+0x984>
            snprintf(buffer, payload.size, "%s", payload.buffer);
80004304:	94c42683          	lw	a3,-1716(s0)
80004308:	80009637          	lui	a2,0x80009
8000430c:	24060613          	addi	a2,a2,576 # 80009240 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009241>
80004310:	94442583          	lw	a1,-1724(s0)
80004314:	97842503          	lw	a0,-1672(s0)
80004318:	830fd0ef          	jal	ra,80001348 <snprintf>
8000431c:	f25ff06f          	j	80004240 <perform_attack+0x984>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
80004320:	94c42583          	lw	a1,-1716(s0)
80004324:	97842503          	lw	a0,-1672(s0)
80004328:	998fd0ef          	jal	ra,800014c0 <strcat>
8000432c:	f15ff06f          	j	80004240 <perform_attack+0x984>
__ssp_bos_icheck3_restrict(strncat, char *, const char *)
80004330:	94442603          	lw	a2,-1724(s0)
80004334:	94c42583          	lw	a1,-1716(s0)
80004338:	97842503          	lw	a0,-1672(s0)
8000433c:	ff8fd0ef          	jal	ra,80001b34 <strncat>
80004340:	f01ff06f          	j	80004240 <perform_attack+0x984>
            snprintf(format_string_buf, 15, "%%%ic", payload.size);
80004344:	94442683          	lw	a3,-1724(s0)
80004348:	80009637          	lui	a2,0x80009
8000434c:	24460613          	addi	a2,a2,580 # 80009244 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009245>
80004350:	00f00593          	li	a1,15
80004354:	96840513          	addi	a0,s0,-1688
80004358:	ff1fc0ef          	jal	ra,80001348 <snprintf>
8000435c:	ee5ff06f          	j	80004240 <perform_attack+0x984>
            homebrew_memcpy(buffer, payload.buffer, payload.size - 1);
80004360:	94442603          	lw	a2,-1724(s0)
80004364:	fff60613          	addi	a2,a2,-1
80004368:	94c42583          	lw	a1,-1716(s0)
8000436c:	97842503          	lw	a0,-1672(s0)
80004370:	83cff0ef          	jal	ra,800033ac <homebrew_memcpy>
80004374:	ecdff06f          	j	80004240 <perform_attack+0x984>
                fprintf(stderr, "Error: Unknown choice of function\n");
80004378:	80009537          	lui	a0,0x80009
8000437c:	24c50513          	addi	a0,a0,588 # 8000924c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000924d>
80004380:	005000ef          	jal	ra,80004b84 <printk>
            exit(1);
80004384:	00100513          	li	a0,1
80004388:	e70fc0ef          	jal	ra,800009f8 <exit>
                *(uint32_t *) target_addr <<= 8;
8000438c:	93042683          	lw	a3,-1744(s0)
80004390:	0006a783          	lw	a5,0(a3)
80004394:	00879713          	slli	a4,a5,0x8
80004398:	00e6a023          	sw	a4,0(a3)
                *(uint32_t *) target_addr >>= 8;
8000439c:	01000737          	lui	a4,0x1000
800043a0:	fff70713          	addi	a4,a4,-1 # ffffff <CONFIG_SRAM_SIZE+0xefffff>
800043a4:	00e7f7b3          	and	a5,a5,a4
800043a8:	00f6a023          	sw	a5,0(a3)
800043ac:	ec1ff06f          	j	8000426c <perform_attack+0x9b0>
                payload.overflow_ptr = &ret2libc_target;
800043b0:	800037b7          	lui	a5,0x80003
800043b4:	04878793          	addi	a5,a5,72 # 80003048 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003049>
800043b8:	94f42423          	sw	a5,-1720(s0)
                  - (uintptr_t) buffer + sizeof(long) + 1;
800043bc:	97842783          	lw	a5,-1672(s0)
800043c0:	92442483          	lw	s1,-1756(s0)
800043c4:	40f487b3          	sub	a5,s1,a5
800043c8:	00578793          	addi	a5,a5,5
                payload.size         = (uintptr_t) target_addr_aux
800043cc:	94f42223          	sw	a5,-1724(s0)
                build_payload(&payload);
800043d0:	94040513          	addi	a0,s0,-1728
800043d4:	dd9fe0ef          	jal	ra,800031ac <build_payload>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
800043d8:	94442603          	lw	a2,-1724(s0)
800043dc:	fff60613          	addi	a2,a2,-1
800043e0:	94c42583          	lw	a1,-1716(s0)
800043e4:	97842503          	lw	a0,-1672(s0)
800043e8:	e74fc0ef          	jal	ra,80000a5c <memcpy>
                printf("target_addr_aux: %p\n", target_addr_aux);
800043ec:	00048593          	mv	a1,s1
800043f0:	80009537          	lui	a0,0x80009
800043f4:	27050513          	addi	a0,a0,624 # 80009270 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009271>
800043f8:	78c000ef          	jal	ra,80004b84 <printk>
                switch (attack.location) {
800043fc:	8000a7b7          	lui	a5,0x8000a
80004400:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80004404:	00c7a783          	lw	a5,12(a5)
80004408:	19200713          	li	a4,402
8000440c:	06e78263          	beq	a5,a4,80004470 <perform_attack+0xbb4>
80004410:	02f76663          	bltu	a4,a5,8000443c <perform_attack+0xb80>
80004414:	19000713          	li	a4,400
80004418:	04e78263          	beq	a5,a4,8000445c <perform_attack+0xba0>
8000441c:	19100713          	li	a4,401
80004420:	e6e794e3          	bne	a5,a4,80004288 <perform_attack+0x9cc>
                          (uintptr_t) *heap_mem_ptr_aux;
80004424:	92042783          	lw	a5,-1760(s0)
80004428:	0007a703          	lw	a4,0(a5)
                        *(uint32_t *) (*(uint32_t *) target_addr) =
8000442c:	93042783          	lw	a5,-1744(s0)
80004430:	0007a783          	lw	a5,0(a5)
80004434:	00e7a023          	sw	a4,0(a5)
                        break;
80004438:	e51ff06f          	j	80004288 <perform_attack+0x9cc>
8000443c:	19300713          	li	a4,403
80004440:	e4e794e3          	bne	a5,a4,80004288 <perform_attack+0x9cc>
                          (uintptr_t) *data_mem_ptr_aux;
80004444:	8000d7b7          	lui	a5,0x8000d
80004448:	b407a703          	lw	a4,-1216(a5) # 8000cb40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cb41>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
8000444c:	93042783          	lw	a5,-1744(s0)
80004450:	0007a783          	lw	a5,0(a5)
80004454:	00e7a023          	sw	a4,0(a5)
                        break;
80004458:	e31ff06f          	j	80004288 <perform_attack+0x9cc>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
8000445c:	93042783          	lw	a5,-1744(s0)
80004460:	0007a783          	lw	a5,0(a5)
                          (uintptr_t) stack_mem_ptr_aux;
80004464:	ea442703          	lw	a4,-348(s0)
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80004468:	00e7a023          	sw	a4,0(a5)
                        break;
8000446c:	e1dff06f          	j	80004288 <perform_attack+0x9cc>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80004470:	93042783          	lw	a5,-1744(s0)
80004474:	0007a783          	lw	a5,0(a5)
                          (uintptr_t) bss_mem_ptr_aux;
80004478:	8000a737          	lui	a4,0x8000a
8000447c:	d8072703          	lw	a4,-640(a4) # 80009d80 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d81>
                        *(uint32_t *) (*(uint32_t *) target_addr) =
80004480:	00e7a023          	sw	a4,0(a5)
                        break;
80004484:	e05ff06f          	j	80004288 <perform_attack+0x9cc>
                *(uintptr_t *) (*(uintptr_t *) target_addr) =
80004488:	93042783          	lw	a5,-1744(s0)
8000448c:	0007a783          	lw	a5,0(a5)
                  (uintptr_t) buffer;
80004490:	97842703          	lw	a4,-1672(s0)
                *(uintptr_t *) (*(uintptr_t *) target_addr) =
80004494:	00e7a023          	sw	a4,0(a5)
80004498:	df1ff06f          	j	80004288 <perform_attack+0x9cc>
                fprintf(stderr, "Error: Unknown choice of attack parameterB\n");
8000449c:	80009537          	lui	a0,0x80009
800044a0:	28850513          	addi	a0,a0,648 # 80009288 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009289>
800044a4:	6e0000ef          	jal	ra,80004b84 <printk>
            exit(1);
800044a8:	00100513          	li	a0,1
800044ac:	d4cfc0ef          	jal	ra,800009f8 <exit>
            stack_func_ptr(NULL);
800044b0:	00000513          	li	a0,0
800044b4:	eac42783          	lw	a5,-340(s0)
800044b8:	000780e7          	jalr	a5
} /* perform_attack */
800044bc:	6ec12083          	lw	ra,1772(sp)
800044c0:	6e812403          	lw	s0,1768(sp)
800044c4:	6e412483          	lw	s1,1764(sp)
800044c8:	6e012903          	lw	s2,1760(sp)
800044cc:	6dc12983          	lw	s3,1756(sp)
800044d0:	6d812a03          	lw	s4,1752(sp)
800044d4:	6f010113          	addi	sp,sp,1776
800044d8:	00008067          	ret
            ((int (*)(char *, int))(*stack_func_ptr_param))(NULL, 0);
800044dc:	00000593          	li	a1,0
800044e0:	00000513          	li	a0,0
800044e4:	93c42783          	lw	a5,-1732(s0)
800044e8:	000780e7          	jalr	a5
800044ec:	fd1ff06f          	j	800044bc <perform_attack+0xc00>
            ((int (*)(char *, int)) * heap_func_ptr)(NULL, 0);
800044f0:	93442783          	lw	a5,-1740(s0)
800044f4:	0007a783          	lw	a5,0(a5)
800044f8:	00000593          	li	a1,0
800044fc:	00000513          	li	a0,0
80004500:	000780e7          	jalr	a5
80004504:	fb9ff06f          	j	800044bc <perform_attack+0xc00>
            ((int (*)(char *, int))(*bss_func_ptr))(NULL, 0);
80004508:	8000a7b7          	lui	a5,0x8000a
8000450c:	d787a783          	lw	a5,-648(a5) # 80009d78 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d79>
80004510:	00000593          	li	a1,0
80004514:	00000513          	li	a0,0
80004518:	000780e7          	jalr	a5
8000451c:	fa1ff06f          	j	800044bc <perform_attack+0xc00>
            ((int (*)(char *, int))(*data_func_ptr))(NULL, 0);
80004520:	8000d7b7          	lui	a5,0x8000d
80004524:	f407a783          	lw	a5,-192(a5) # 8000cf40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cf41>
80004528:	00000593          	li	a1,0
8000452c:	00000513          	li	a0,0
80004530:	000780e7          	jalr	a5
80004534:	f89ff06f          	j	800044bc <perform_attack+0xc00>
            lj_func(stack_jmp_buffer);
80004538:	eb040513          	addi	a0,s0,-336
8000453c:	e5dfe0ef          	jal	ra,80003398 <lj_func>
            lj_func(stack_jmp_buffer_param);
80004540:	93842503          	lw	a0,-1736(s0)
80004544:	e55fe0ef          	jal	ra,80003398 <lj_func>
            lj_func(*heap_jmp_buffer);
80004548:	92842503          	lw	a0,-1752(s0)
8000454c:	e4dfe0ef          	jal	ra,80003398 <lj_func>
            lj_func(data_jmp_buffer);
80004550:	8000d537          	lui	a0,0x8000d
80004554:	91050513          	addi	a0,a0,-1776 # 8000c910 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000c911>
80004558:	e41fe0ef          	jal	ra,80003398 <lj_func>
            lj_func(bss_jmp_buffer);
8000455c:	8000a537          	lui	a0,0x8000a
80004560:	db050513          	addi	a0,a0,-592 # 80009db0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009db1>
80004564:	e35fe0ef          	jal	ra,80003398 <lj_func>
            ((int (*)(char *, int)) * (stack_struct.func_ptr))(NULL, 0);
80004568:	00000593          	li	a1,0
8000456c:	00000513          	li	a0,0
80004570:	a7c42783          	lw	a5,-1412(s0)
80004574:	000780e7          	jalr	a5
80004578:	f45ff06f          	j	800044bc <perform_attack+0xc00>
            (*heap_struct->func_ptr)(NULL, 0);
8000457c:	92c42783          	lw	a5,-1748(s0)
80004580:	1007a783          	lw	a5,256(a5)
80004584:	00000593          	li	a1,0
80004588:	00000513          	li	a0,0
8000458c:	000780e7          	jalr	a5
80004590:	f2dff06f          	j	800044bc <perform_attack+0xc00>
            (*data_struct.func_ptr)(NULL, 0);
80004594:	8000d7b7          	lui	a5,0x8000d
80004598:	d6078793          	addi	a5,a5,-672 # 8000cd60 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000cd61>
8000459c:	1007a783          	lw	a5,256(a5)
800045a0:	00000593          	li	a1,0
800045a4:	00000513          	li	a0,0
800045a8:	000780e7          	jalr	a5
800045ac:	f11ff06f          	j	800044bc <perform_attack+0xc00>
            (*bss_struct.func_ptr)(NULL, 0);
800045b0:	8000a7b7          	lui	a5,0x8000a
800045b4:	ff078793          	addi	a5,a5,-16 # 80009ff0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009ff1>
800045b8:	1007a783          	lw	a5,256(a5)
800045bc:	00000593          	li	a1,0
800045c0:	00000513          	li	a0,0
800045c4:	000780e7          	jalr	a5
800045c8:	ef5ff06f          	j	800044bc <perform_attack+0xc00>
            switch (attack.location) {
800045cc:	8000a7b7          	lui	a5,0x8000a
800045d0:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800045d4:	00c7a783          	lw	a5,12(a5)
800045d8:	19200713          	li	a4,402
800045dc:	06e78063          	beq	a5,a4,8000463c <perform_attack+0xd80>
800045e0:	02f76463          	bltu	a4,a5,80004608 <perform_attack+0xd4c>
800045e4:	19000713          	li	a4,400
800045e8:	04e78063          	beq	a5,a4,80004628 <perform_attack+0xd6c>
800045ec:	19100713          	li	a4,401
800045f0:	ece796e3          	bne	a5,a4,800044bc <perform_attack+0xc00>
                    dop_target(buffer, *heap_mem_ptr);
800045f4:	91c42783          	lw	a5,-1764(s0)
800045f8:	0007a583          	lw	a1,0(a5)
800045fc:	97842503          	lw	a0,-1672(s0)
80004600:	e5dfe0ef          	jal	ra,8000345c <dop_target>
80004604:	eb9ff06f          	j	800044bc <perform_attack+0xc00>
80004608:	19300713          	li	a4,403
8000460c:	eae798e3          	bne	a5,a4,800044bc <perform_attack+0xc00>
                    dop_target(buffer, **data_mem_ptr);
80004610:	8000d7b7          	lui	a5,0x8000d
80004614:	a407a783          	lw	a5,-1472(a5) # 8000ca40 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000ca41>
80004618:	0007a583          	lw	a1,0(a5)
8000461c:	97842503          	lw	a0,-1672(s0)
80004620:	e3dfe0ef          	jal	ra,8000345c <dop_target>
80004624:	e99ff06f          	j	800044bc <perform_attack+0xc00>
                    dop_target(buffer, *stack_mem_ptr);
80004628:	ea842783          	lw	a5,-344(s0)
8000462c:	0007a583          	lw	a1,0(a5)
80004630:	97842503          	lw	a0,-1672(s0)
80004634:	e29fe0ef          	jal	ra,8000345c <dop_target>
80004638:	e85ff06f          	j	800044bc <perform_attack+0xc00>
                    dop_target(buffer, *bss_mem_ptr);
8000463c:	8000a7b7          	lui	a5,0x8000a
80004640:	d7c7a783          	lw	a5,-644(a5) # 80009d7c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d7d>
80004644:	0007a583          	lw	a1,0(a5)
80004648:	97842503          	lw	a0,-1672(s0)
8000464c:	e11fe0ef          	jal	ra,8000345c <dop_target>
80004650:	e6dff06f          	j	800044bc <perform_attack+0xc00>
			data_leak(buffer);
80004654:	97842503          	lw	a0,-1672(s0)
80004658:	e69fe0ef          	jal	ra,800034c0 <data_leak>
8000465c:	e61ff06f          	j	800044bc <perform_attack+0xc00>

80004660 <is_attack_possible>:
80004660:	00308013          	addi	zero,ra,3
{
80004664:	ff010113          	addi	sp,sp,-16
80004668:	00112623          	sw	ra,12(sp)
    if ((attack.inject_param == INJECTED_CODE_NO_NOP) &&
8000466c:	8000a7b7          	lui	a5,0x8000a
80004670:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80004674:	0047a783          	lw	a5,4(a5)
80004678:	0c800713          	li	a4,200
8000467c:	06e78663          	beq	a5,a4,800046e8 <is_attack_possible+0x88>
    if (attack.inject_param == RETURN_ORIENTED_PROGRAMMING &&
80004680:	0ca00713          	li	a4,202
80004684:	08e78a63          	beq	a5,a4,80004718 <is_attack_possible+0xb8>
    if (attack.inject_param == DATA_ONLY) {
80004688:	0cb00713          	li	a4,203
8000468c:	0ae78863          	beq	a5,a4,8000473c <is_attack_possible+0xdc>
    } else if (attack.code_ptr == VAR_BOF ||
80004690:	8000a7b7          	lui	a5,0x8000a
80004694:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80004698:	0087a783          	lw	a5,8(a5)
			   attack.code_ptr == VAR_IOF ||
8000469c:	ec578793          	addi	a5,a5,-315
    } else if (attack.code_ptr == VAR_BOF ||
800046a0:	00200713          	li	a4,2
800046a4:	12f77663          	bgeu	a4,a5,800047d0 <is_attack_possible+0x170>
    switch (attack.location) {
800046a8:	8000a7b7          	lui	a5,0x8000a
800046ac:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800046b0:	00c7a783          	lw	a5,12(a5)
800046b4:	19200713          	li	a4,402
800046b8:	2ce78063          	beq	a5,a4,80004978 <is_attack_possible+0x318>
800046bc:	12f76863          	bltu	a4,a5,800047ec <is_attack_possible+0x18c>
800046c0:	19000713          	li	a4,400
800046c4:	14e78c63          	beq	a5,a4,8000481c <is_attack_possible+0x1bc>
800046c8:	19100713          	li	a4,401
800046cc:	10e79c63          	bne	a5,a4,800047e4 <is_attack_possible+0x184>
            if ((attack.technique == DIRECT) &&
800046d0:	8000a7b7          	lui	a5,0x8000a
800046d4:	2147a703          	lw	a4,532(a5) # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800046d8:	06400793          	li	a5,100
800046dc:	20f70463          	beq	a4,a5,800048e4 <is_attack_possible+0x284>
    return TRUE;
800046e0:	00100513          	li	a0,1
800046e4:	12c0006f          	j	80004810 <is_attack_possible+0x1b0>
      (!(attack.function == MEMCPY) && !(attack.function == HOMEBREW)))
800046e8:	8000a737          	lui	a4,0x8000a
800046ec:	21470713          	addi	a4,a4,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800046f0:	01072703          	lw	a4,16(a4)
    if ((attack.inject_param == INJECTED_CODE_NO_NOP) &&
800046f4:	1f400693          	li	a3,500
800046f8:	f8d704e3          	beq	a4,a3,80004680 <is_attack_possible+0x20>
      (!(attack.function == MEMCPY) && !(attack.function == HOMEBREW)))
800046fc:	1fc00693          	li	a3,508
80004700:	f8d700e3          	beq	a4,a3,80004680 <is_attack_possible+0x20>
        fprintf(stderr,
80004704:	80009537          	lui	a0,0x80009
80004708:	3d850513          	addi	a0,a0,984 # 800093d8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800093d9>
8000470c:	478000ef          	jal	ra,80004b84 <printk>
        return FALSE;
80004710:	00000513          	li	a0,0
80004714:	0fc0006f          	j	80004810 <is_attack_possible+0x1b0>
      attack.technique != DIRECT)
80004718:	8000a737          	lui	a4,0x8000a
8000471c:	21472683          	lw	a3,532(a4) # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
    if (attack.inject_param == RETURN_ORIENTED_PROGRAMMING &&
80004720:	06400713          	li	a4,100
80004724:	f6e682e3          	beq	a3,a4,80004688 <is_attack_possible+0x28>
        fprintf(stderr,
80004728:	80009537          	lui	a0,0x80009
8000472c:	42050513          	addi	a0,a0,1056 # 80009420 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009421>
80004730:	454000ef          	jal	ra,80004b84 <printk>
        return FALSE;
80004734:	00000513          	li	a0,0
80004738:	0d80006f          	j	80004810 <is_attack_possible+0x1b0>
        if (attack.code_ptr != VAR_BOF &&
8000473c:	8000a7b7          	lui	a5,0x8000a
80004740:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80004744:	0087a783          	lw	a5,8(a5)
          	attack.code_ptr != VAR_IOF &&
80004748:	ec578693          	addi	a3,a5,-315
        if (attack.code_ptr != VAR_BOF &&
8000474c:	00200713          	li	a4,2
80004750:	04d76463          	bltu	a4,a3,80004798 <is_attack_possible+0x138>
        if ((attack.code_ptr == VAR_LEAK || attack.code_ptr == VAR_IOF) && attack.technique == INDIRECT) {
80004754:	ec478793          	addi	a5,a5,-316
80004758:	00100713          	li	a4,1
8000475c:	04f77863          	bgeu	a4,a5,800047ac <is_attack_possible+0x14c>
        if (attack.location == HEAP && attack.technique == INDIRECT) {
80004760:	8000a7b7          	lui	a5,0x8000a
80004764:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80004768:	00c7a703          	lw	a4,12(a5)
8000476c:	19100793          	li	a5,401
80004770:	f2f71ce3          	bne	a4,a5,800046a8 <is_attack_possible+0x48>
80004774:	8000a7b7          	lui	a5,0x8000a
80004778:	2147a703          	lw	a4,532(a5) # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
8000477c:	06500793          	li	a5,101
80004780:	f2f714e3          	bne	a4,a5,800046a8 <is_attack_possible+0x48>
            fprintf(stderr,
80004784:	80009537          	lui	a0,0x80009
80004788:	4d050513          	addi	a0,a0,1232 # 800094d0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800094d1>
8000478c:	3f8000ef          	jal	ra,80004b84 <printk>
        	return FALSE;
80004790:	00000513          	li	a0,0
80004794:	07c0006f          	j	80004810 <is_attack_possible+0x1b0>
            fprintf(stderr, "Error: Misused DOP code pointer parameters.\n");
80004798:	80009537          	lui	a0,0x80009
8000479c:	46450513          	addi	a0,a0,1124 # 80009464 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009465>
800047a0:	3e4000ef          	jal	ra,80004b84 <printk>
			return FALSE;
800047a4:	00000513          	li	a0,0
800047a8:	0680006f          	j	80004810 <is_attack_possible+0x1b0>
        if ((attack.code_ptr == VAR_LEAK || attack.code_ptr == VAR_IOF) && attack.technique == INDIRECT) {
800047ac:	8000a7b7          	lui	a5,0x8000a
800047b0:	2147a703          	lw	a4,532(a5) # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800047b4:	06500793          	li	a5,101
800047b8:	faf714e3          	bne	a4,a5,80004760 <is_attack_possible+0x100>
            fprintf(stderr,
800047bc:	80009537          	lui	a0,0x80009
800047c0:	49450513          	addi	a0,a0,1172 # 80009494 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009495>
800047c4:	3c0000ef          	jal	ra,80004b84 <printk>
			return FALSE;
800047c8:	00000513          	li	a0,0
800047cc:	0440006f          	j	80004810 <is_attack_possible+0x1b0>
        fprintf(stderr,
800047d0:	80009537          	lui	a0,0x80009
800047d4:	50850513          	addi	a0,a0,1288 # 80009508 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009509>
800047d8:	3ac000ef          	jal	ra,80004b84 <printk>
    	return FALSE;
800047dc:	00000513          	li	a0,0
800047e0:	0300006f          	j	80004810 <is_attack_possible+0x1b0>
    switch (attack.location) {
800047e4:	00100513          	li	a0,1
800047e8:	0280006f          	j	80004810 <is_attack_possible+0x1b0>
800047ec:	19300713          	li	a4,403
800047f0:	00e79e63          	bne	a5,a4,8000480c <is_attack_possible+0x1ac>
            if ((attack.technique == DIRECT) &&
800047f4:	8000a7b7          	lui	a5,0x8000a
800047f8:	2147a703          	lw	a4,532(a5) # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800047fc:	06400793          	li	a5,100
80004800:	12f70663          	beq	a4,a5,8000492c <is_attack_possible+0x2cc>
    return TRUE;
80004804:	00100513          	li	a0,1
80004808:	0080006f          	j	80004810 <is_attack_possible+0x1b0>
    switch (attack.location) {
8000480c:	00100513          	li	a0,1
} /* is_attack_possible */
80004810:	00c12083          	lw	ra,12(sp)
80004814:	01010113          	addi	sp,sp,16
80004818:	00008067          	ret
            if ((attack.technique == DIRECT)) {
8000481c:	8000a7b7          	lui	a5,0x8000a
80004820:	2147a703          	lw	a4,532(a5) # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80004824:	06400793          	li	a5,100
80004828:	00f70663          	beq	a4,a5,80004834 <is_attack_possible+0x1d4>
    return TRUE;
8000482c:	00100513          	li	a0,1
80004830:	fe1ff06f          	j	80004810 <is_attack_possible+0x1b0>
                if ((attack.code_ptr == FUNC_PTR_HEAP) ||
80004834:	8000a7b7          	lui	a5,0x8000a
80004838:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
8000483c:	0087a783          	lw	a5,8(a5)
                  (attack.code_ptr == FUNC_PTR_BSS) ||
80004840:	ed178693          	addi	a3,a5,-303
                if ((attack.code_ptr == FUNC_PTR_HEAP) ||
80004844:	00200713          	li	a4,2
80004848:	04d77263          	bgeu	a4,a3,8000488c <is_attack_possible+0x22c>
                  (attack.code_ptr == FUNC_PTR_DATA) ||
8000484c:	13400713          	li	a4,308
80004850:	02e78e63          	beq	a5,a4,8000488c <is_attack_possible+0x22c>
                  (attack.code_ptr == LONGJMP_BUF_HEAP) ||
80004854:	13600713          	li	a4,310
80004858:	02e78a63          	beq	a5,a4,8000488c <is_attack_possible+0x22c>
                  (attack.code_ptr == LONGJMP_BUF_DATA) ||
8000485c:	13500713          	li	a4,309
80004860:	02e78663          	beq	a5,a4,8000488c <is_attack_possible+0x22c>
                  (attack.code_ptr == LONGJMP_BUF_BSS) ||
80004864:	13800713          	li	a4,312
80004868:	02e78263          	beq	a5,a4,8000488c <is_attack_possible+0x22c>
                  (attack.code_ptr == STRUCT_FUNC_PTR_HEAP) ||
8000486c:	13900713          	li	a4,313
80004870:	00e78e63          	beq	a5,a4,8000488c <is_attack_possible+0x22c>
                  (attack.code_ptr == STRUCT_FUNC_PTR_DATA) ||
80004874:	13a00713          	li	a4,314
80004878:	00e78a63          	beq	a5,a4,8000488c <is_attack_possible+0x22c>
                } else if ((attack.code_ptr == FUNC_PTR_STACK_PARAM) &&
8000487c:	12e00713          	li	a4,302
80004880:	02e78063          	beq	a5,a4,800048a0 <is_attack_possible+0x240>
    return TRUE;
80004884:	00100513          	li	a0,1
80004888:	f89ff06f          	j	80004810 <is_attack_possible+0x1b0>
                    fprintf(stderr,
8000488c:	80009537          	lui	a0,0x80009
80004890:	54c50513          	addi	a0,a0,1356 # 8000954c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000954d>
80004894:	2f0000ef          	jal	ra,80004b84 <printk>
                    return FALSE;
80004898:	00000513          	li	a0,0
8000489c:	f75ff06f          	j	80004810 <is_attack_possible+0x1b0>
                  ((attack.function == STRCAT) ||
800048a0:	8000a7b7          	lui	a5,0x8000a
800048a4:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800048a8:	0107a783          	lw	a5,16(a5)
800048ac:	e0878693          	addi	a3,a5,-504
                } else if ((attack.code_ptr == FUNC_PTR_STACK_PARAM) &&
800048b0:	00100713          	li	a4,1
800048b4:	00d77e63          	bgeu	a4,a3,800048d0 <is_attack_possible+0x270>
                  (attack.function == SNPRINTF) ||
800048b8:	1fb00713          	li	a4,507
800048bc:	00e78a63          	beq	a5,a4,800048d0 <is_attack_possible+0x270>
                  (attack.function == SSCANF) ||
800048c0:	1fc00713          	li	a4,508
800048c4:	00e78663          	beq	a5,a4,800048d0 <is_attack_possible+0x270>
    return TRUE;
800048c8:	00100513          	li	a0,1
800048cc:	f45ff06f          	j	80004810 <is_attack_possible+0x1b0>
                    fprintf(stderr,
800048d0:	80009537          	lui	a0,0x80009
800048d4:	5a450513          	addi	a0,a0,1444 # 800095a4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800095a5>
800048d8:	2ac000ef          	jal	ra,80004b84 <printk>
                    return FALSE;
800048dc:	00000513          	li	a0,0
800048e0:	f31ff06f          	j	80004810 <is_attack_possible+0x1b0>
              ((attack.code_ptr == RET_ADDR) ||
800048e4:	8000a7b7          	lui	a5,0x8000a
800048e8:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800048ec:	0087a783          	lw	a5,8(a5)
              (attack.code_ptr == FUNC_PTR_STACK_VAR) ||
800048f0:	ed478693          	addi	a3,a5,-300
            if ((attack.technique == DIRECT) &&
800048f4:	00200713          	li	a4,2
800048f8:	02d77063          	bgeu	a4,a3,80004918 <is_attack_possible+0x2b8>
800048fc:	ed078793          	addi	a5,a5,-304
80004900:	00a00713          	li	a4,10
80004904:	12f76c63          	bltu	a4,a5,80004a3c <is_attack_possible+0x3dc>
80004908:	6ef00713          	li	a4,1775
8000490c:	00f757b3          	srl	a5,a4,a5
80004910:	0017f793          	andi	a5,a5,1
80004914:	12078863          	beqz	a5,80004a44 <is_attack_possible+0x3e4>
                fprintf(stderr,
80004918:	80009537          	lui	a0,0x80009
8000491c:	63050513          	addi	a0,a0,1584 # 80009630 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009631>
80004920:	264000ef          	jal	ra,80004b84 <printk>
                return FALSE;
80004924:	00000513          	li	a0,0
80004928:	ee9ff06f          	j	80004810 <is_attack_possible+0x1b0>
              ((attack.code_ptr == RET_ADDR) ||
8000492c:	8000a7b7          	lui	a5,0x8000a
80004930:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80004934:	0087a783          	lw	a5,8(a5)
              (attack.code_ptr == FUNC_PTR_STACK_VAR) ||
80004938:	ed478693          	addi	a3,a5,-300
            if ((attack.technique == DIRECT) &&
8000493c:	00200713          	li	a4,2
80004940:	02d77263          	bgeu	a4,a3,80004964 <is_attack_possible+0x304>
80004944:	ed178713          	addi	a4,a5,-303
80004948:	00b00793          	li	a5,11
8000494c:	10e7e063          	bltu	a5,a4,80004a4c <is_attack_possible+0x3ec>
80004950:	000017b7          	lui	a5,0x1
80004954:	b7b78793          	addi	a5,a5,-1157 # b7b <__data_size+0x28b>
80004958:	00e7d7b3          	srl	a5,a5,a4
8000495c:	0017f793          	andi	a5,a5,1
80004960:	0e078a63          	beqz	a5,80004a54 <is_attack_possible+0x3f4>
                fprintf(stderr,
80004964:	80009537          	lui	a0,0x80009
80004968:	68850513          	addi	a0,a0,1672 # 80009688 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009689>
8000496c:	218000ef          	jal	ra,80004b84 <printk>
                return FALSE;
80004970:	00000513          	li	a0,0
80004974:	e9dff06f          	j	80004810 <is_attack_possible+0x1b0>
            if ((attack.technique == DIRECT) &&
80004978:	8000a7b7          	lui	a5,0x8000a
8000497c:	2147a783          	lw	a5,532(a5) # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80004980:	06400713          	li	a4,100
80004984:	00e78a63          	beq	a5,a4,80004998 <is_attack_possible+0x338>
            } else if ((attack.technique == INDIRECT) &&
80004988:	06500713          	li	a4,101
8000498c:	04e78a63          	beq	a5,a4,800049e0 <is_attack_possible+0x380>
    return TRUE;
80004990:	00100513          	li	a0,1
80004994:	e7dff06f          	j	80004810 <is_attack_possible+0x1b0>
              ((attack.code_ptr == RET_ADDR) ||
80004998:	8000a737          	lui	a4,0x8000a
8000499c:	21470713          	addi	a4,a4,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800049a0:	00872703          	lw	a4,8(a4)
              (attack.code_ptr == FUNC_PTR_STACK_VAR) ||
800049a4:	ed470613          	addi	a2,a4,-300
            if ((attack.technique == DIRECT) &&
800049a8:	00200693          	li	a3,2
800049ac:	02c6f063          	bgeu	a3,a2,800049cc <is_attack_possible+0x36c>
800049b0:	ed170713          	addi	a4,a4,-303
800049b4:	00a00693          	li	a3,10
800049b8:	fce6e8e3          	bltu	a3,a4,80004988 <is_attack_possible+0x328>
800049bc:	7bd00693          	li	a3,1981
800049c0:	00e6d733          	srl	a4,a3,a4
800049c4:	00177713          	andi	a4,a4,1
800049c8:	fc0700e3          	beqz	a4,80004988 <is_attack_possible+0x328>
                fprintf(stderr,
800049cc:	80009537          	lui	a0,0x80009
800049d0:	6e850513          	addi	a0,a0,1768 # 800096e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800096e9>
800049d4:	1b0000ef          	jal	ra,80004b84 <printk>
                return FALSE;
800049d8:	00000513          	li	a0,0
800049dc:	e35ff06f          	j	80004810 <is_attack_possible+0x1b0>
              (attack.code_ptr == LONGJMP_BUF_HEAP) &&
800049e0:	8000a7b7          	lui	a5,0x8000a
800049e4:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
800049e8:	0087a703          	lw	a4,8(a5)
            } else if ((attack.technique == INDIRECT) &&
800049ec:	13400793          	li	a5,308
800049f0:	00f70663          	beq	a4,a5,800049fc <is_attack_possible+0x39c>
    return TRUE;
800049f4:	00100513          	li	a0,1
800049f8:	e19ff06f          	j	80004810 <is_attack_possible+0x1b0>
              (!(attack.function == MEMCPY) &&
800049fc:	8000a7b7          	lui	a5,0x8000a
80004a00:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80004a04:	0107a783          	lw	a5,16(a5)
              (attack.code_ptr == LONGJMP_BUF_HEAP) &&
80004a08:	1f400713          	li	a4,500
80004a0c:	04e78863          	beq	a5,a4,80004a5c <is_attack_possible+0x3fc>
              (!(attack.function == MEMCPY) &&
80004a10:	1f600713          	li	a4,502
80004a14:	04e78863          	beq	a5,a4,80004a64 <is_attack_possible+0x404>
              !(attack.function == STRNCPY) &&
80004a18:	1fc00713          	li	a4,508
80004a1c:	00e79663          	bne	a5,a4,80004a28 <is_attack_possible+0x3c8>
    return TRUE;
80004a20:	00100513          	li	a0,1
80004a24:	dedff06f          	j	80004810 <is_attack_possible+0x1b0>
                fprintf(stderr,
80004a28:	80009537          	lui	a0,0x80009
80004a2c:	74050513          	addi	a0,a0,1856 # 80009740 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009741>
80004a30:	154000ef          	jal	ra,80004b84 <printk>
                return FALSE;
80004a34:	00000513          	li	a0,0
80004a38:	dd9ff06f          	j	80004810 <is_attack_possible+0x1b0>
            if ((attack.technique == DIRECT) &&
80004a3c:	00100513          	li	a0,1
80004a40:	dd1ff06f          	j	80004810 <is_attack_possible+0x1b0>
80004a44:	00100513          	li	a0,1
80004a48:	dc9ff06f          	j	80004810 <is_attack_possible+0x1b0>
            if ((attack.technique == DIRECT) &&
80004a4c:	00100513          	li	a0,1
80004a50:	dc1ff06f          	j	80004810 <is_attack_possible+0x1b0>
80004a54:	00100513          	li	a0,1
80004a58:	db9ff06f          	j	80004810 <is_attack_possible+0x1b0>
    return TRUE;
80004a5c:	00100513          	li	a0,1
80004a60:	db1ff06f          	j	80004810 <is_attack_possible+0x1b0>
80004a64:	00100513          	li	a0,1
80004a68:	da9ff06f          	j	80004810 <is_attack_possible+0x1b0>

80004a6c <try_attack>:
80004a6c:	00308013          	addi	zero,ra,3
{
80004a70:	ec010113          	addi	sp,sp,-320
80004a74:	12112e23          	sw	ra,316(sp)
    if (is_attack_possible()) {
80004a78:	be9ff0ef          	jal	ra,80004660 <is_attack_possible>
80004a7c:	02050063          	beqz	a0,80004a9c <try_attack+0x30>
        perform_attack(&dummy_function, stack_jmp_buffer_param);
80004a80:	00010593          	mv	a1,sp
80004a84:	80003537          	lui	a0,0x80003
80004a88:	00050513          	mv	a0,a0
80004a8c:	e31fe0ef          	jal	ra,800038bc <perform_attack>
}
80004a90:	13c12083          	lw	ra,316(sp)
80004a94:	14010113          	addi	sp,sp,320
80004a98:	00008067          	ret
        exit(ATTACK_IMPOSSIBLE);
80004a9c:	c7c00513          	li	a0,-900
80004aa0:	f59fb0ef          	jal	ra,800009f8 <exit>

80004aa4 <main>:
80004aa4:	00308013          	addi	zero,ra,3
80004aa8:	00208013          	addi	zero,ra,2
{
80004aac:	ff010113          	addi	sp,sp,-16
80004ab0:	00112623          	sw	ra,12(sp)
    attack.technique = DIRECT;
80004ab4:	8000a7b7          	lui	a5,0x8000a
80004ab8:	21478793          	addi	a5,a5,532 # 8000a214 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a215>
80004abc:	06400713          	li	a4,100
80004ac0:	00e7a023          	sw	a4,0(a5)
    attack.inject_param = RETURN_ORIENTED_PROGRAMMING;
80004ac4:	0ca00713          	li	a4,202
80004ac8:	00e7a223          	sw	a4,4(a5)
    attack.code_ptr= RET_ADDR;
80004acc:	12c00713          	li	a4,300
80004ad0:	00e7a423          	sw	a4,8(a5)
    attack.location = STACK;
80004ad4:	19000713          	li	a4,400
80004ad8:	00e7a623          	sw	a4,12(a5)
    attack.function = MEMCPY;
80004adc:	1f400713          	li	a4,500
80004ae0:	00e7a823          	sw	a4,16(a5)
    printk("RIPE is alive! %s\n", CONFIG_BOARD);
80004ae4:	800095b7          	lui	a1,0x80009
80004ae8:	79058593          	addi	a1,a1,1936 # 80009790 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009791>
80004aec:	80009537          	lui	a0,0x80009
80004af0:	79c50513          	addi	a0,a0,1948 # 8000979c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000979d>
80004af4:	090000ef          	jal	ra,80004b84 <printk>
    print_current_test_parameters();
80004af8:	df4fe0ef          	jal	ra,800030ec <print_current_test_parameters>
    try_attack();
80004afc:	f71ff0ef          	jal	ra,80004a6c <try_attack>
    printf("Unexpected back in main\n");
80004b00:	80009537          	lui	a0,0x80009
80004b04:	7b050513          	addi	a0,a0,1968 # 800097b0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800097b1>
80004b08:	07c000ef          	jal	ra,80004b84 <printk>
}
80004b0c:	00c12083          	lw	ra,12(sp)
80004b10:	01010113          	addi	sp,sp,16
80004b14:	00008067          	ret

80004b18 <arch_printk_char_out>:
80004b18:	00308013          	addi	zero,ra,3
}
80004b1c:	00000513          	li	a0,0
80004b20:	00008067          	ret

80004b24 <char_out>:
80004b24:	00308013          	addi	zero,ra,3
{
80004b28:	ff010113          	addi	sp,sp,-16
80004b2c:	00112623          	sw	ra,12(sp)
	return _char_out(c);
80004b30:	81c1a783          	lw	a5,-2020(gp) # 8000cf5c <_char_out>
80004b34:	000780e7          	jalr	a5
}
80004b38:	00c12083          	lw	ra,12(sp)
80004b3c:	01010113          	addi	sp,sp,16
80004b40:	00008067          	ret

80004b44 <__printk_hook_install>:
80004b44:	00308013          	addi	zero,ra,3
	_char_out = fn;
80004b48:	80a1ae23          	sw	a0,-2020(gp) # 8000cf5c <_char_out>
}
80004b4c:	00008067          	ret

80004b50 <vprintk>:
80004b50:	00308013          	addi	zero,ra,3
{
80004b54:	ff010113          	addi	sp,sp,-16
80004b58:	00112623          	sw	ra,12(sp)
80004b5c:	00050613          	mv	a2,a0
80004b60:	00058693          	mv	a3,a1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
80004b64:	00000713          	li	a4,0
80004b68:	00000593          	li	a1,0
80004b6c:	80005537          	lui	a0,0x80005
80004b70:	b2450513          	addi	a0,a0,-1244 # 80004b24 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80004b25>
80004b74:	1d5000ef          	jal	ra,80005548 <z_cbvprintf_impl>
}
80004b78:	00c12083          	lw	ra,12(sp)
80004b7c:	01010113          	addi	sp,sp,16
80004b80:	00008067          	ret

80004b84 <printk>:
80004b84:	00308013          	addi	zero,ra,3
{
80004b88:	fc010113          	addi	sp,sp,-64
80004b8c:	00112e23          	sw	ra,28(sp)
80004b90:	02b12223          	sw	a1,36(sp)
80004b94:	02c12423          	sw	a2,40(sp)
80004b98:	02d12623          	sw	a3,44(sp)
80004b9c:	02e12823          	sw	a4,48(sp)
80004ba0:	02f12a23          	sw	a5,52(sp)
80004ba4:	03012c23          	sw	a6,56(sp)
80004ba8:	03112e23          	sw	a7,60(sp)
	va_start(ap, fmt);
80004bac:	02410593          	addi	a1,sp,36
80004bb0:	00b12623          	sw	a1,12(sp)
	vprintk(fmt, ap);
80004bb4:	f9dff0ef          	jal	ra,80004b50 <vprintk>
}
80004bb8:	01c12083          	lw	ra,28(sp)
80004bbc:	04010113          	addi	sp,sp,64
80004bc0:	00008067          	ret

80004bc4 <z_thread_entry>:
80004bc4:	00308013          	addi	zero,ra,3
{
80004bc8:	ff010113          	addi	sp,sp,-16
80004bcc:	00112623          	sw	ra,12(sp)
80004bd0:	00050793          	mv	a5,a0
80004bd4:	00058513          	mv	a0,a1
80004bd8:	00060593          	mv	a1,a2
	entry(p1, p2, p3);
80004bdc:	00068613          	mv	a2,a3
80004be0:	000780e7          	jalr	a5
	if (z_syscall_trap()) {
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_Z_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_z_current_get();
80004be4:	730030ef          	jal	ra,80008314 <z_impl_z_current_get>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
80004be8:	7e8030ef          	jal	ra,800083d0 <z_impl_k_thread_abort>

80004bec <extract_decimal>:
80004bec:	00308013          	addi	zero,ra,3
{
80004bf0:	00050613          	mv	a2,a0
	const char *sp = *str;
80004bf4:	00052703          	lw	a4,0(a0)
	size_t val = 0;
80004bf8:	00000513          	li	a0,0
	while (isdigit((int)(unsigned char)*sp)) {
80004bfc:	01c0006f          	j	80004c18 <extract_decimal+0x2c>
		val = 10U * val + *sp++ - '0';
80004c00:	00251793          	slli	a5,a0,0x2
80004c04:	00a787b3          	add	a5,a5,a0
80004c08:	00179793          	slli	a5,a5,0x1
80004c0c:	00170713          	addi	a4,a4,1
80004c10:	00d787b3          	add	a5,a5,a3
80004c14:	fd078513          	addi	a0,a5,-48
	while (isdigit((int)(unsigned char)*sp)) {
80004c18:	00074683          	lbu	a3,0(a4)
80004c1c:	800097b7          	lui	a5,0x80009
80004c20:	d0d78793          	addi	a5,a5,-755 # 80008d0d <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008d0e>
80004c24:	00f687b3          	add	a5,a3,a5
80004c28:	0007c783          	lbu	a5,0(a5)
80004c2c:	0047f793          	andi	a5,a5,4
80004c30:	fc0798e3          	bnez	a5,80004c00 <extract_decimal+0x14>
	*str = sp;
80004c34:	00e62023          	sw	a4,0(a2)
}
80004c38:	00008067          	ret

80004c3c <extract_flags>:
80004c3c:	00308013          	addi	zero,ra,3
{
80004c40:	00050613          	mv	a2,a0
80004c44:	00058513          	mv	a0,a1
	bool loop = true;
80004c48:	00100693          	li	a3,1
80004c4c:	0640006f          	j	80004cb0 <extract_flags+0x74>
			conv->flag_dash = true;
80004c50:	00065783          	lhu	a5,0(a2)
80004c54:	0047e793          	ori	a5,a5,4
80004c58:	00f61023          	sh	a5,0(a2)
		if (loop) {
80004c5c:	04068863          	beqz	a3,80004cac <extract_flags+0x70>
			++sp;
80004c60:	00150513          	addi	a0,a0,1
80004c64:	0480006f          	j	80004cac <extract_flags+0x70>
			conv->flag_plus = true;
80004c68:	00065783          	lhu	a5,0(a2)
80004c6c:	0087e793          	ori	a5,a5,8
80004c70:	00f61023          	sh	a5,0(a2)
			break;
80004c74:	fe9ff06f          	j	80004c5c <extract_flags+0x20>
			conv->flag_space = true;
80004c78:	00065783          	lhu	a5,0(a2)
80004c7c:	0107e793          	ori	a5,a5,16
80004c80:	00f61023          	sh	a5,0(a2)
			break;
80004c84:	fd9ff06f          	j	80004c5c <extract_flags+0x20>
			conv->flag_hash = true;
80004c88:	00065783          	lhu	a5,0(a2)
80004c8c:	0207e793          	ori	a5,a5,32
80004c90:	00f61023          	sh	a5,0(a2)
			break;
80004c94:	fc9ff06f          	j	80004c5c <extract_flags+0x20>
			conv->flag_zero = true;
80004c98:	00065783          	lhu	a5,0(a2)
80004c9c:	0407e793          	ori	a5,a5,64
80004ca0:	00f61023          	sh	a5,0(a2)
			break;
80004ca4:	fb9ff06f          	j	80004c5c <extract_flags+0x20>
		switch (*sp) {
80004ca8:	00000693          	li	a3,0
	} while (loop);
80004cac:	02068863          	beqz	a3,80004cdc <extract_flags+0xa0>
		switch (*sp) {
80004cb0:	00054783          	lbu	a5,0(a0)
80004cb4:	fe078793          	addi	a5,a5,-32
80004cb8:	0ff7f593          	zext.b	a1,a5
80004cbc:	01000713          	li	a4,16
80004cc0:	feb764e3          	bltu	a4,a1,80004ca8 <extract_flags+0x6c>
80004cc4:	00259793          	slli	a5,a1,0x2
80004cc8:	8000a737          	lui	a4,0x8000a
80004ccc:	9dc70713          	addi	a4,a4,-1572 # 800099dc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800099dd>
80004cd0:	00e787b3          	add	a5,a5,a4
80004cd4:	0007a783          	lw	a5,0(a5)
80004cd8:	00078067          	jr	a5
	if (conv->flag_zero && conv->flag_dash) {
80004cdc:	00062783          	lw	a5,0(a2)
80004ce0:	0447f793          	andi	a5,a5,68
80004ce4:	04400713          	li	a4,68
80004ce8:	00e78463          	beq	a5,a4,80004cf0 <extract_flags+0xb4>
}
80004cec:	00008067          	ret
		conv->flag_zero = false;
80004cf0:	00065783          	lhu	a5,0(a2)
80004cf4:	fbf7f793          	andi	a5,a5,-65
80004cf8:	00f61023          	sh	a5,0(a2)
80004cfc:	ff1ff06f          	j	80004cec <extract_flags+0xb0>

80004d00 <extract_width>:
80004d00:	00308013          	addi	zero,ra,3
{
80004d04:	fe010113          	addi	sp,sp,-32
80004d08:	00112e23          	sw	ra,28(sp)
80004d0c:	00812c23          	sw	s0,24(sp)
80004d10:	00912a23          	sw	s1,20(sp)
80004d14:	00050413          	mv	s0,a0
80004d18:	00b12623          	sw	a1,12(sp)
	conv->width_present = true;
80004d1c:	00055783          	lhu	a5,0(a0)
80004d20:	0807e793          	ori	a5,a5,128
80004d24:	00f51023          	sh	a5,0(a0)
	if (*sp == '*') {
80004d28:	00058493          	mv	s1,a1
80004d2c:	0005c703          	lbu	a4,0(a1)
80004d30:	02a00793          	li	a5,42
80004d34:	06f70463          	beq	a4,a5,80004d9c <extract_width+0x9c>
	size_t width = extract_decimal(&sp);
80004d38:	00c10513          	addi	a0,sp,12
80004d3c:	eb1ff0ef          	jal	ra,80004bec <extract_decimal>
	if (sp != wp) {
80004d40:	00c12783          	lw	a5,12(sp)
80004d44:	04f48063          	beq	s1,a5,80004d84 <extract_width+0x84>
		conv->width_present = true;
80004d48:	00045783          	lhu	a5,0(s0)
80004d4c:	0807e793          	ori	a5,a5,128
80004d50:	00f41023          	sh	a5,0(s0)
		conv->width_value = width;
80004d54:	00a42223          	sw	a0,4(s0)
		conv->unsupported |= ((conv->width_value < 0)
80004d58:	00042783          	lw	a5,0(s0)
80004d5c:	0017d793          	srli	a5,a5,0x1
80004d60:	0017f793          	andi	a5,a5,1
				      || (width != (size_t)conv->width_value));
80004d64:	04054863          	bltz	a0,80004db4 <extract_width+0xb4>
80004d68:	00000713          	li	a4,0
		conv->unsupported |= ((conv->width_value < 0)
80004d6c:	00e7e7b3          	or	a5,a5,a4
80004d70:	00179793          	slli	a5,a5,0x1
80004d74:	00045703          	lhu	a4,0(s0)
80004d78:	ffd77713          	andi	a4,a4,-3
80004d7c:	00f767b3          	or	a5,a4,a5
80004d80:	00f41023          	sh	a5,0(s0)
	return sp;
80004d84:	00c12503          	lw	a0,12(sp)
}
80004d88:	01c12083          	lw	ra,28(sp)
80004d8c:	01812403          	lw	s0,24(sp)
80004d90:	01412483          	lw	s1,20(sp)
80004d94:	02010113          	addi	sp,sp,32
80004d98:	00008067          	ret
		conv->width_star = true;
80004d9c:	00055783          	lhu	a5,0(a0)
80004da0:	1007e793          	ori	a5,a5,256
80004da4:	00f51023          	sh	a5,0(a0)
		return ++sp;
80004da8:	00158513          	addi	a0,a1,1
80004dac:	00a12623          	sw	a0,12(sp)
80004db0:	fd9ff06f          	j	80004d88 <extract_width+0x88>
				      || (width != (size_t)conv->width_value));
80004db4:	00100713          	li	a4,1
80004db8:	fb5ff06f          	j	80004d6c <extract_width+0x6c>

80004dbc <extract_prec>:
80004dbc:	00308013          	addi	zero,ra,3
{
80004dc0:	fe010113          	addi	sp,sp,-32
80004dc4:	00112e23          	sw	ra,28(sp)
80004dc8:	00812c23          	sw	s0,24(sp)
80004dcc:	00b12623          	sw	a1,12(sp)
	conv->prec_present = (*sp == '.');
80004dd0:	0005c703          	lbu	a4,0(a1)
80004dd4:	fd270713          	addi	a4,a4,-46
80004dd8:	00173693          	seqz	a3,a4
80004ddc:	00969693          	slli	a3,a3,0x9
80004de0:	00055783          	lhu	a5,0(a0)
80004de4:	dff7f793          	andi	a5,a5,-513
80004de8:	00d7e7b3          	or	a5,a5,a3
80004dec:	00f51023          	sh	a5,0(a0)
	if (!conv->prec_present) {
80004df0:	06071663          	bnez	a4,80004e5c <extract_prec+0xa0>
80004df4:	00050413          	mv	s0,a0
	++sp;
80004df8:	00c12783          	lw	a5,12(sp)
80004dfc:	00178713          	addi	a4,a5,1
80004e00:	00e12623          	sw	a4,12(sp)
	if (*sp == '*') {
80004e04:	0017c703          	lbu	a4,1(a5)
80004e08:	02a00793          	li	a5,42
80004e0c:	04f70c63          	beq	a4,a5,80004e64 <extract_prec+0xa8>
	size_t prec = extract_decimal(&sp);
80004e10:	00c10513          	addi	a0,sp,12
80004e14:	dd9ff0ef          	jal	ra,80004bec <extract_decimal>
	conv->prec_value = prec;
80004e18:	00a42423          	sw	a0,8(s0)
	conv->unsupported |= ((conv->prec_value < 0)
80004e1c:	00042783          	lw	a5,0(s0)
80004e20:	0017d793          	srli	a5,a5,0x1
80004e24:	0017f793          	andi	a5,a5,1
			      || (prec != (size_t)conv->prec_value));
80004e28:	04054c63          	bltz	a0,80004e80 <extract_prec+0xc4>
80004e2c:	00000713          	li	a4,0
	conv->unsupported |= ((conv->prec_value < 0)
80004e30:	00e7e7b3          	or	a5,a5,a4
80004e34:	00179793          	slli	a5,a5,0x1
80004e38:	00045703          	lhu	a4,0(s0)
80004e3c:	ffd77713          	andi	a4,a4,-3
80004e40:	00f767b3          	or	a5,a4,a5
80004e44:	00f41023          	sh	a5,0(s0)
	return sp;
80004e48:	00c12503          	lw	a0,12(sp)
}
80004e4c:	01c12083          	lw	ra,28(sp)
80004e50:	01812403          	lw	s0,24(sp)
80004e54:	02010113          	addi	sp,sp,32
80004e58:	00008067          	ret
		return sp;
80004e5c:	00058513          	mv	a0,a1
80004e60:	fedff06f          	j	80004e4c <extract_prec+0x90>
		conv->prec_star = true;
80004e64:	00055783          	lhu	a5,0(a0)
80004e68:	4007e793          	ori	a5,a5,1024
80004e6c:	00f51023          	sh	a5,0(a0)
		return ++sp;
80004e70:	00c12503          	lw	a0,12(sp)
80004e74:	00150513          	addi	a0,a0,1
80004e78:	00a12623          	sw	a0,12(sp)
80004e7c:	fd1ff06f          	j	80004e4c <extract_prec+0x90>
			      || (prec != (size_t)conv->prec_value));
80004e80:	00100713          	li	a4,1
80004e84:	fadff06f          	j	80004e30 <extract_prec+0x74>

80004e88 <extract_length>:
80004e88:	00308013          	addi	zero,ra,3
{
80004e8c:	00050613          	mv	a2,a0
	switch (*sp) {
80004e90:	0005c783          	lbu	a5,0(a1)
80004e94:	fb478793          	addi	a5,a5,-76
80004e98:	0ff7f693          	zext.b	a3,a5
80004e9c:	02e00713          	li	a4,46
80004ea0:	16d76a63          	bltu	a4,a3,80005014 <extract_length+0x18c>
80004ea4:	00269793          	slli	a5,a3,0x2
80004ea8:	8000a737          	lui	a4,0x8000a
80004eac:	a2070713          	addi	a4,a4,-1504 # 80009a20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009a21>
80004eb0:	00e787b3          	add	a5,a5,a4
80004eb4:	0007a783          	lw	a5,0(a5)
80004eb8:	00078067          	jr	a5
		if (*++sp == 'h') {
80004ebc:	00158513          	addi	a0,a1,1
80004ec0:	0015c703          	lbu	a4,1(a1)
80004ec4:	06800793          	li	a5,104
80004ec8:	02f70263          	beq	a4,a5,80004eec <extract_length+0x64>
			conv->length_mod = LENGTH_H;
80004ecc:	00065783          	lhu	a5,0(a2)
80004ed0:	ffff8737          	lui	a4,0xffff8
80004ed4:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80004ed8:	00e7f7b3          	and	a5,a5,a4
80004edc:	00001737          	lui	a4,0x1
80004ee0:	00e7e7b3          	or	a5,a5,a4
80004ee4:	00f61023          	sh	a5,0(a2)
80004ee8:	00008067          	ret
			conv->length_mod = LENGTH_HH;
80004eec:	00065783          	lhu	a5,0(a2)
80004ef0:	ffff8737          	lui	a4,0xffff8
80004ef4:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80004ef8:	00e7f7b3          	and	a5,a5,a4
80004efc:	00001737          	lui	a4,0x1
80004f00:	80070713          	addi	a4,a4,-2048 # 800 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE>
80004f04:	00e7e7b3          	or	a5,a5,a4
80004f08:	00f61023          	sh	a5,0(a2)
			++sp;
80004f0c:	00258513          	addi	a0,a1,2
80004f10:	00008067          	ret
		if (*++sp == 'l') {
80004f14:	00158513          	addi	a0,a1,1
80004f18:	0015c703          	lbu	a4,1(a1)
80004f1c:	06c00793          	li	a5,108
80004f20:	02f70463          	beq	a4,a5,80004f48 <extract_length+0xc0>
			conv->length_mod = LENGTH_L;
80004f24:	00065783          	lhu	a5,0(a2)
80004f28:	ffff8737          	lui	a4,0xffff8
80004f2c:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80004f30:	00e7f7b3          	and	a5,a5,a4
80004f34:	00002737          	lui	a4,0x2
80004f38:	80070713          	addi	a4,a4,-2048 # 1800 <CONFIG_ISR_STACK_SIZE+0x800>
80004f3c:	00e7e7b3          	or	a5,a5,a4
80004f40:	00f61023          	sh	a5,0(a2)
80004f44:	00008067          	ret
			conv->length_mod = LENGTH_LL;
80004f48:	00065783          	lhu	a5,0(a2)
80004f4c:	ffff8737          	lui	a4,0xffff8
80004f50:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80004f54:	00e7f7b3          	and	a5,a5,a4
80004f58:	00002737          	lui	a4,0x2
80004f5c:	00e7e7b3          	or	a5,a5,a4
80004f60:	00f61023          	sh	a5,0(a2)
			++sp;
80004f64:	00258513          	addi	a0,a1,2
80004f68:	00008067          	ret
		conv->length_mod = LENGTH_J;
80004f6c:	00055783          	lhu	a5,0(a0)
80004f70:	ffff8737          	lui	a4,0xffff8
80004f74:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80004f78:	00e7f7b3          	and	a5,a5,a4
80004f7c:	00003737          	lui	a4,0x3
80004f80:	80070713          	addi	a4,a4,-2048 # 2800 <CONFIG_ISR_STACK_SIZE+0x1800>
80004f84:	00e7e7b3          	or	a5,a5,a4
80004f88:	00f51023          	sh	a5,0(a0)
		++sp;
80004f8c:	00158513          	addi	a0,a1,1
		break;
80004f90:	00008067          	ret
		conv->length_mod = LENGTH_Z;
80004f94:	00055783          	lhu	a5,0(a0)
80004f98:	ffff8737          	lui	a4,0xffff8
80004f9c:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80004fa0:	00e7f7b3          	and	a5,a5,a4
80004fa4:	00003737          	lui	a4,0x3
80004fa8:	00e7e7b3          	or	a5,a5,a4
80004fac:	00f51023          	sh	a5,0(a0)
		++sp;
80004fb0:	00158513          	addi	a0,a1,1
		break;
80004fb4:	00008067          	ret
		conv->length_mod = LENGTH_T;
80004fb8:	00055783          	lhu	a5,0(a0)
80004fbc:	ffff8737          	lui	a4,0xffff8
80004fc0:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80004fc4:	00e7f7b3          	and	a5,a5,a4
80004fc8:	00004737          	lui	a4,0x4
80004fcc:	80070713          	addi	a4,a4,-2048 # 3800 <__kernel_ram_size+0x5d0>
80004fd0:	00e7e7b3          	or	a5,a5,a4
80004fd4:	00f51023          	sh	a5,0(a0)
		++sp;
80004fd8:	00158513          	addi	a0,a1,1
		break;
80004fdc:	00008067          	ret
		conv->length_mod = LENGTH_UPPER_L;
80004fe0:	00055783          	lhu	a5,0(a0)
80004fe4:	ffff8737          	lui	a4,0xffff8
80004fe8:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80004fec:	00e7f7b3          	and	a5,a5,a4
80004ff0:	00004737          	lui	a4,0x4
80004ff4:	00e7e7b3          	or	a5,a5,a4
80004ff8:	00f51023          	sh	a5,0(a0)
		++sp;
80004ffc:	00158513          	addi	a0,a1,1
		conv->unsupported = true;
80005000:	01079793          	slli	a5,a5,0x10
80005004:	0107d793          	srli	a5,a5,0x10
80005008:	0027e793          	ori	a5,a5,2
8000500c:	00f61023          	sh	a5,0(a2)
		break;
80005010:	00008067          	ret
		conv->length_mod = LENGTH_NONE;
80005014:	00065783          	lhu	a5,0(a2)
80005018:	ffff8737          	lui	a4,0xffff8
8000501c:	7ff70713          	addi	a4,a4,2047 # ffff87ff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xffff8800>
80005020:	00e7f7b3          	and	a5,a5,a4
80005024:	00f61023          	sh	a5,0(a2)
		break;
80005028:	00058513          	mv	a0,a1
}
8000502c:	00008067          	ret

80005030 <extract_specifier>:
80005030:	00308013          	addi	zero,ra,3
{
80005034:	00050713          	mv	a4,a0
	conv->specifier = *sp++;
80005038:	00158513          	addi	a0,a1,1
8000503c:	0005c783          	lbu	a5,0(a1)
80005040:	00f701a3          	sb	a5,3(a4)
	switch (conv->specifier) {
80005044:	07800693          	li	a3,120
80005048:	04f6ea63          	bltu	a3,a5,8000509c <extract_specifier+0x6c>
8000504c:	06e00693          	li	a3,110
80005050:	08d7fa63          	bgeu	a5,a3,800050e4 <extract_specifier+0xb4>
80005054:	06900693          	li	a3,105
80005058:	04f6e263          	bltu	a3,a5,8000509c <extract_specifier+0x6c>
8000505c:	05800693          	li	a3,88
80005060:	04d7e863          	bltu	a5,a3,800050b0 <extract_specifier+0x80>
80005064:	fa878613          	addi	a2,a5,-88
80005068:	00100693          	li	a3,1
8000506c:	00c696b3          	sll	a3,a3,a2
80005070:	0000e637          	lui	a2,0xe
80005074:	20060613          	addi	a2,a2,512 # e200 <__rom_region_size+0x44ac>
80005078:	00c6f633          	and	a2,a3,a2
8000507c:	04061863          	bnez	a2,800050cc <extract_specifier+0x9c>
80005080:	00001637          	lui	a2,0x1
80005084:	80160613          	addi	a2,a2,-2047 # 801 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1>
80005088:	00c6f633          	and	a2,a3,a2
8000508c:	10061863          	bnez	a2,8000519c <extract_specifier+0x16c>
80005090:	00021637          	lui	a2,0x21
80005094:	00c6f6b3          	and	a3,a3,a2
80005098:	0a069463          	bnez	a3,80005140 <extract_specifier+0x110>
		conv->invalid = true;
8000509c:	00075783          	lhu	a5,0(a4)
800050a0:	0017e793          	ori	a5,a5,1
800050a4:	00f71023          	sh	a5,0(a4)
	bool unsupported = false;
800050a8:	00000793          	li	a5,0
		break;
800050ac:	0c80006f          	j	80005174 <extract_specifier+0x144>
	switch (conv->specifier) {
800050b0:	04100693          	li	a3,65
800050b4:	00d78c63          	beq	a5,a3,800050cc <extract_specifier+0x9c>
800050b8:	fed7e2e3          	bltu	a5,a3,8000509c <extract_specifier+0x6c>
800050bc:	fbb78793          	addi	a5,a5,-69
800050c0:	0ff7f793          	zext.b	a5,a5
800050c4:	00200693          	li	a3,2
800050c8:	fcf6eae3          	bltu	a3,a5,8000509c <extract_specifier+0x6c>
		conv->specifier_cat = SPECIFIER_FP;
800050cc:	00274783          	lbu	a5,2(a4)
800050d0:	ff87f793          	andi	a5,a5,-8
800050d4:	0047e793          	ori	a5,a5,4
800050d8:	00f70123          	sb	a5,2(a4)
			unsupported = true;
800050dc:	00100793          	li	a5,1
			break;
800050e0:	0940006f          	j	80005174 <extract_specifier+0x144>
	switch (conv->specifier) {
800050e4:	f9278613          	addi	a2,a5,-110
800050e8:	00100693          	li	a3,1
800050ec:	00c696b3          	sll	a3,a3,a2
800050f0:	4826f613          	andi	a2,a3,1154
800050f4:	00c035b3          	snez	a1,a2
800050f8:	0a061263          	bnez	a2,8000519c <extract_specifier+0x16c>
800050fc:	0246f613          	andi	a2,a3,36
80005100:	00c037b3          	snez	a5,a2
80005104:	0c061a63          	bnez	a2,800051d8 <extract_specifier+0x1a8>
80005108:	0016f693          	andi	a3,a3,1
8000510c:	f80688e3          	beqz	a3,8000509c <extract_specifier+0x6c>
		conv->specifier_cat = SPECIFIER_PTR;
80005110:	00274603          	lbu	a2,2(a4)
80005114:	ff867613          	andi	a2,a2,-8
80005118:	00366613          	ori	a2,a2,3
8000511c:	00c70123          	sb	a2,2(a4)
		if (conv->length_mod == LENGTH_UPPER_L) {
80005120:	00075603          	lhu	a2,0(a4)
80005124:	000085b7          	lui	a1,0x8
80005128:	80058593          	addi	a1,a1,-2048 # 7800 <__kernel_ram_size+0x45d0>
8000512c:	00b67633          	and	a2,a2,a1
80005130:	000045b7          	lui	a1,0x4
80005134:	04b61063          	bne	a2,a1,80005174 <extract_specifier+0x144>
			unsupported = true;
80005138:	00068793          	mv	a5,a3
8000513c:	0380006f          	j	80005174 <extract_specifier+0x144>
		conv->specifier_cat = SPECIFIER_SINT;
80005140:	00274683          	lbu	a3,2(a4)
80005144:	ff86f693          	andi	a3,a3,-8
80005148:	0016e693          	ori	a3,a3,1
8000514c:	00d70123          	sb	a3,2(a4)
		if (conv->length_mod == LENGTH_UPPER_L) {
80005150:	00075683          	lhu	a3,0(a4)
80005154:	00008637          	lui	a2,0x8
80005158:	80060613          	addi	a2,a2,-2048 # 7800 <__kernel_ram_size+0x45d0>
8000515c:	00c6f6b3          	and	a3,a3,a2
80005160:	00004637          	lui	a2,0x4
80005164:	04c68663          	beq	a3,a2,800051b0 <extract_specifier+0x180>
		if (conv->specifier == 'c') {
80005168:	06300693          	li	a3,99
8000516c:	04d78a63          	beq	a5,a3,800051c0 <extract_specifier+0x190>
	bool unsupported = false;
80005170:	00000793          	li	a5,0
	conv->unsupported |= unsupported;
80005174:	00072683          	lw	a3,0(a4)
80005178:	0016d693          	srli	a3,a3,0x1
8000517c:	0016f693          	andi	a3,a3,1
80005180:	00d7e7b3          	or	a5,a5,a3
80005184:	00179793          	slli	a5,a5,0x1
80005188:	00075683          	lhu	a3,0(a4)
8000518c:	ffd6f693          	andi	a3,a3,-3
80005190:	00f6e7b3          	or	a5,a3,a5
80005194:	00f71023          	sh	a5,0(a4)
}
80005198:	00008067          	ret
		conv->specifier_cat = SPECIFIER_UINT;
8000519c:	00274683          	lbu	a3,2(a4)
800051a0:	ff86f693          	andi	a3,a3,-8
800051a4:	0026e693          	ori	a3,a3,2
800051a8:	00d70123          	sb	a3,2(a4)
800051ac:	fa5ff06f          	j	80005150 <extract_specifier+0x120>
			conv->invalid = true;
800051b0:	00075683          	lhu	a3,0(a4)
800051b4:	0016e693          	ori	a3,a3,1
800051b8:	00d71023          	sh	a3,0(a4)
800051bc:	fadff06f          	j	80005168 <extract_specifier+0x138>
			unsupported = (conv->length_mod != LENGTH_NONE);
800051c0:	00075783          	lhu	a5,0(a4)
800051c4:	000086b7          	lui	a3,0x8
800051c8:	80068693          	addi	a3,a3,-2048 # 7800 <__kernel_ram_size+0x45d0>
800051cc:	00d7f7b3          	and	a5,a5,a3
800051d0:	00f037b3          	snez	a5,a5
800051d4:	fa1ff06f          	j	80005174 <extract_specifier+0x144>
		conv->specifier_cat = SPECIFIER_PTR;
800051d8:	00274683          	lbu	a3,2(a4)
800051dc:	ff86f693          	andi	a3,a3,-8
800051e0:	0036e693          	ori	a3,a3,3
800051e4:	00d70123          	sb	a3,2(a4)
		if (conv->length_mod != LENGTH_NONE) {
800051e8:	00075683          	lhu	a3,0(a4)
800051ec:	00008637          	lui	a2,0x8
800051f0:	80060613          	addi	a2,a2,-2048 # 7800 <__kernel_ram_size+0x45d0>
800051f4:	00c6f6b3          	and	a3,a3,a2
800051f8:	f6069ee3          	bnez	a3,80005174 <extract_specifier+0x144>
	bool unsupported = false;
800051fc:	00058793          	mv	a5,a1
80005200:	f75ff06f          	j	80005174 <extract_specifier+0x144>

80005204 <extract_conversion>:
80005204:	00308013          	addi	zero,ra,3
{
80005208:	ff010113          	addi	sp,sp,-16
8000520c:	00112623          	sw	ra,12(sp)
80005210:	00812423          	sw	s0,8(sp)
80005214:	00050413          	mv	s0,a0
	*conv = (struct conversion) {
80005218:	00052023          	sw	zero,0(a0)
8000521c:	00052223          	sw	zero,4(a0)
80005220:	00052423          	sw	zero,8(a0)
	if (*sp == '%') {
80005224:	0015c783          	lbu	a5,1(a1) # 4001 <__kernel_ram_size+0xdd1>
80005228:	02500713          	li	a4,37
8000522c:	04e78863          	beq	a5,a4,8000527c <extract_conversion+0x78>
80005230:	00158593          	addi	a1,a1,1
	sp = extract_flags(conv, sp);
80005234:	00040513          	mv	a0,s0
80005238:	a05ff0ef          	jal	ra,80004c3c <extract_flags>
8000523c:	00050593          	mv	a1,a0
	sp = extract_width(conv, sp);
80005240:	00040513          	mv	a0,s0
80005244:	abdff0ef          	jal	ra,80004d00 <extract_width>
80005248:	00050593          	mv	a1,a0
	sp = extract_prec(conv, sp);
8000524c:	00040513          	mv	a0,s0
80005250:	b6dff0ef          	jal	ra,80004dbc <extract_prec>
80005254:	00050593          	mv	a1,a0
	sp = extract_length(conv, sp);
80005258:	00040513          	mv	a0,s0
8000525c:	c2dff0ef          	jal	ra,80004e88 <extract_length>
80005260:	00050593          	mv	a1,a0
	sp = extract_specifier(conv, sp);
80005264:	00040513          	mv	a0,s0
80005268:	dc9ff0ef          	jal	ra,80005030 <extract_specifier>
}
8000526c:	00c12083          	lw	ra,12(sp)
80005270:	00812403          	lw	s0,8(sp)
80005274:	01010113          	addi	sp,sp,16
80005278:	00008067          	ret
		conv->specifier = *sp++;
8000527c:	00258513          	addi	a0,a1,2
80005280:	00f401a3          	sb	a5,3(s0)
		return sp;
80005284:	fe9ff06f          	j	8000526c <extract_conversion+0x68>

80005288 <conversion_radix>:
80005288:	00308013          	addi	zero,ra,3
	switch (specifier) {
8000528c:	06f00793          	li	a5,111
80005290:	02f50c63          	beq	a0,a5,800052c8 <conversion_radix+0x40>
80005294:	00a7fe63          	bgeu	a5,a0,800052b0 <conversion_radix+0x28>
80005298:	07000793          	li	a5,112
8000529c:	02f50a63          	beq	a0,a5,800052d0 <conversion_radix+0x48>
800052a0:	07800793          	li	a5,120
800052a4:	02f51a63          	bne	a0,a5,800052d8 <conversion_radix+0x50>
		return 16;
800052a8:	01000513          	li	a0,16
800052ac:	00008067          	ret
	switch (specifier) {
800052b0:	05800793          	li	a5,88
800052b4:	00f50663          	beq	a0,a5,800052c0 <conversion_radix+0x38>
800052b8:	00a00513          	li	a0,10
800052bc:	00008067          	ret
		return 16;
800052c0:	01000513          	li	a0,16
800052c4:	00008067          	ret
		return 8;
800052c8:	00800513          	li	a0,8
800052cc:	00008067          	ret
		return 16;
800052d0:	01000513          	li	a0,16
800052d4:	00008067          	ret
	switch (specifier) {
800052d8:	00a00513          	li	a0,10
}
800052dc:	00008067          	ret

800052e0 <encode_uint>:
800052e0:	00308013          	addi	zero,ra,3
{
800052e4:	fd010113          	addi	sp,sp,-48
800052e8:	02112623          	sw	ra,44(sp)
800052ec:	02812423          	sw	s0,40(sp)
800052f0:	02912223          	sw	s1,36(sp)
800052f4:	03212023          	sw	s2,32(sp)
800052f8:	01312e23          	sw	s3,28(sp)
800052fc:	01412c23          	sw	s4,24(sp)
80005300:	01512a23          	sw	s5,20(sp)
80005304:	01612823          	sw	s6,16(sp)
80005308:	01712623          	sw	s7,12(sp)
8000530c:	01812423          	sw	s8,8(sp)
80005310:	00050993          	mv	s3,a0
80005314:	00058413          	mv	s0,a1
80005318:	00060c13          	mv	s8,a2
8000531c:	00068a93          	mv	s5,a3
80005320:	00070493          	mv	s1,a4
	bool upcase = isupper((int)conv->specifier);
80005324:	00364503          	lbu	a0,3(a2)
80005328:	800097b7          	lui	a5,0x80009
8000532c:	d0d78793          	addi	a5,a5,-755 # 80008d0d <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008d0e>
80005330:	00f507b3          	add	a5,a0,a5
80005334:	0007cb83          	lbu	s7,0(a5)
80005338:	003bfb93          	andi	s7,s7,3
	const unsigned int radix = conversion_radix(conv->specifier);
8000533c:	f4dff0ef          	jal	ra,80005288 <conversion_radix>
80005340:	00050913          	mv	s2,a0
	char *bp = bps + (bpe - bps);
80005344:	0480006f          	j	8000538c <encode_uint+0xac>
		*--bp = (lsv <= 9) ? ('0' + lsv)
80005348:	00100793          	li	a5,1
8000534c:	06fb8a63          	beq	s7,a5,800053c0 <encode_uint+0xe0>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
80005350:	0ff57793          	zext.b	a5,a0
		*--bp = (lsv <= 9) ? ('0' + lsv)
80005354:	05778793          	addi	a5,a5,87
80005358:	0ff7f793          	zext.b	a5,a5
8000535c:	fff48493          	addi	s1,s1,-1 # 80002fff <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80003000>
80005360:	00f48023          	sb	a5,0(s1)
		value /= radix;
80005364:	00090613          	mv	a2,s2
80005368:	00000693          	li	a3,0
8000536c:	00098513          	mv	a0,s3
80005370:	00040593          	mv	a1,s0
80005374:	e71fa0ef          	jal	ra,800001e4 <__udivdi3>
	} while ((value != 0) && (bps < bp));
80005378:	05446e63          	bltu	s0,s4,800053d4 <encode_uint+0xf4>
8000537c:	048a0a63          	beq	s4,s0,800053d0 <encode_uint+0xf0>
80005380:	049afa63          	bgeu	s5,s1,800053d4 <encode_uint+0xf4>
		value /= radix;
80005384:	00050993          	mv	s3,a0
80005388:	00058413          	mv	s0,a1
		unsigned int lsv = (unsigned int)(value % radix);
8000538c:	00090b13          	mv	s6,s2
80005390:	00000a13          	li	s4,0
80005394:	00090613          	mv	a2,s2
80005398:	00000693          	li	a3,0
8000539c:	00098513          	mv	a0,s3
800053a0:	00040593          	mv	a1,s0
800053a4:	a70fb0ef          	jal	ra,80000614 <__umoddi3>
		*--bp = (lsv <= 9) ? ('0' + lsv)
800053a8:	00900793          	li	a5,9
800053ac:	f8a7eee3          	bltu	a5,a0,80005348 <encode_uint+0x68>
800053b0:	0ff57793          	zext.b	a5,a0
800053b4:	03078793          	addi	a5,a5,48
800053b8:	0ff7f793          	zext.b	a5,a5
800053bc:	fa1ff06f          	j	8000535c <encode_uint+0x7c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
800053c0:	0ff57793          	zext.b	a5,a0
		*--bp = (lsv <= 9) ? ('0' + lsv)
800053c4:	03778793          	addi	a5,a5,55
800053c8:	0ff7f793          	zext.b	a5,a5
800053cc:	f91ff06f          	j	8000535c <encode_uint+0x7c>
	} while ((value != 0) && (bps < bp));
800053d0:	fb69f8e3          	bgeu	s3,s6,80005380 <encode_uint+0xa0>
	if (conv->flag_hash) {
800053d4:	000c5783          	lhu	a5,0(s8)
800053d8:	0207f793          	andi	a5,a5,32
800053dc:	00078a63          	beqz	a5,800053f0 <encode_uint+0x110>
		if (radix == 8) {
800053e0:	00800793          	li	a5,8
800053e4:	04f90063          	beq	s2,a5,80005424 <encode_uint+0x144>
		} else if (radix == 16) {
800053e8:	01000793          	li	a5,16
800053ec:	04f90463          	beq	s2,a5,80005434 <encode_uint+0x154>
}
800053f0:	00048513          	mv	a0,s1
800053f4:	02c12083          	lw	ra,44(sp)
800053f8:	02812403          	lw	s0,40(sp)
800053fc:	02412483          	lw	s1,36(sp)
80005400:	02012903          	lw	s2,32(sp)
80005404:	01c12983          	lw	s3,28(sp)
80005408:	01812a03          	lw	s4,24(sp)
8000540c:	01412a83          	lw	s5,20(sp)
80005410:	01012b03          	lw	s6,16(sp)
80005414:	00c12b83          	lw	s7,12(sp)
80005418:	00812c03          	lw	s8,8(sp)
8000541c:	03010113          	addi	sp,sp,48
80005420:	00008067          	ret
			conv->altform_0 = true;
80005424:	002c4783          	lbu	a5,2(s8)
80005428:	0087e793          	ori	a5,a5,8
8000542c:	00fc0123          	sb	a5,2(s8)
80005430:	fc1ff06f          	j	800053f0 <encode_uint+0x110>
			conv->altform_0c = true;
80005434:	002c4783          	lbu	a5,2(s8)
80005438:	0107e793          	ori	a5,a5,16
8000543c:	00fc0123          	sb	a5,2(s8)
80005440:	fb1ff06f          	j	800053f0 <encode_uint+0x110>

80005444 <store_count>:
80005444:	00308013          	addi	zero,ra,3
	switch ((enum length_mod_enum)conv->length_mod) {
80005448:	00052783          	lw	a5,0(a0)
8000544c:	00b7d793          	srli	a5,a5,0xb
80005450:	00f7f793          	andi	a5,a5,15
80005454:	00700713          	li	a4,7
80005458:	06f76463          	bltu	a4,a5,800054c0 <store_count+0x7c>
8000545c:	00279793          	slli	a5,a5,0x2
80005460:	8000a737          	lui	a4,0x8000a
80005464:	adc70713          	addi	a4,a4,-1316 # 80009adc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009add>
80005468:	00e787b3          	add	a5,a5,a4
8000546c:	0007a783          	lw	a5,0(a5)
80005470:	00078067          	jr	a5
		*(int *)dp = count;
80005474:	00c5a023          	sw	a2,0(a1)
		break;
80005478:	00008067          	ret
		*(signed char *)dp = (signed char)count;
8000547c:	00c58023          	sb	a2,0(a1)
		break;
80005480:	00008067          	ret
		*(short *)dp = (short)count;
80005484:	00c59023          	sh	a2,0(a1)
		break;
80005488:	00008067          	ret
		*(long *)dp = (long)count;
8000548c:	00c5a023          	sw	a2,0(a1)
		break;
80005490:	00008067          	ret
		*(long long *)dp = (long long)count;
80005494:	41f65793          	srai	a5,a2,0x1f
80005498:	00c5a023          	sw	a2,0(a1)
8000549c:	00f5a223          	sw	a5,4(a1)
		break;
800054a0:	00008067          	ret
		*(intmax_t *)dp = (intmax_t)count;
800054a4:	41f65793          	srai	a5,a2,0x1f
800054a8:	00c5a023          	sw	a2,0(a1)
800054ac:	00f5a223          	sw	a5,4(a1)
		break;
800054b0:	00008067          	ret
		*(size_t *)dp = (size_t)count;
800054b4:	00c5a023          	sw	a2,0(a1)
		break;
800054b8:	00008067          	ret
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
800054bc:	00c5a023          	sw	a2,0(a1)
}
800054c0:	00008067          	ret

800054c4 <outs>:
800054c4:	00308013          	addi	zero,ra,3
{
800054c8:	fe010113          	addi	sp,sp,-32
800054cc:	00112e23          	sw	ra,28(sp)
800054d0:	00812c23          	sw	s0,24(sp)
800054d4:	00912a23          	sw	s1,20(sp)
800054d8:	01212823          	sw	s2,16(sp)
800054dc:	01312623          	sw	s3,12(sp)
800054e0:	01412423          	sw	s4,8(sp)
800054e4:	00050a13          	mv	s4,a0
800054e8:	00058993          	mv	s3,a1
800054ec:	00068913          	mv	s2,a3
	size_t count = 0;
800054f0:	00000413          	li	s0,0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
800054f4:	0200006f          	j	80005514 <outs+0x50>
		int rc = out((int)*sp++, ctx);
800054f8:	00160493          	addi	s1,a2,1
800054fc:	00098593          	mv	a1,s3
80005500:	00064503          	lbu	a0,0(a2)
80005504:	000a00e7          	jalr	s4
		if (rc < 0) {
80005508:	02054063          	bltz	a0,80005528 <outs+0x64>
		++count;
8000550c:	00140413          	addi	s0,s0,1
		int rc = out((int)*sp++, ctx);
80005510:	00048613          	mv	a2,s1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
80005514:	ff2662e3          	bltu	a2,s2,800054f8 <outs+0x34>
80005518:	00091663          	bnez	s2,80005524 <outs+0x60>
8000551c:	00064783          	lbu	a5,0(a2)
80005520:	fc079ce3          	bnez	a5,800054f8 <outs+0x34>
	return (int)count;
80005524:	00040513          	mv	a0,s0
}
80005528:	01c12083          	lw	ra,28(sp)
8000552c:	01812403          	lw	s0,24(sp)
80005530:	01412483          	lw	s1,20(sp)
80005534:	01012903          	lw	s2,16(sp)
80005538:	00c12983          	lw	s3,12(sp)
8000553c:	00812a03          	lw	s4,8(sp)
80005540:	02010113          	addi	sp,sp,32
80005544:	00008067          	ret

80005548 <z_cbvprintf_impl>:
80005548:	00308013          	addi	zero,ra,3
{
8000554c:	f8010113          	addi	sp,sp,-128
80005550:	06112e23          	sw	ra,124(sp)
80005554:	06812c23          	sw	s0,120(sp)
80005558:	06912a23          	sw	s1,116(sp)
8000555c:	07212823          	sw	s2,112(sp)
80005560:	07312623          	sw	s3,108(sp)
80005564:	07412423          	sw	s4,104(sp)
80005568:	07512223          	sw	s5,100(sp)
8000556c:	07612023          	sw	s6,96(sp)
80005570:	05712e23          	sw	s7,92(sp)
80005574:	05812c23          	sw	s8,88(sp)
80005578:	00050913          	mv	s2,a0
8000557c:	00058493          	mv	s1,a1
80005580:	00060a93          	mv	s5,a2
80005584:	00d12623          	sw	a3,12(sp)
	size_t count = 0;
80005588:	00000413          	li	s0,0
	while (*fp != 0) {
8000558c:	000ac503          	lbu	a0,0(s5)
80005590:	78050063          	beqz	a0,80005d10 <z_cbvprintf_impl+0x7c8>
		if (*fp != '%') {
80005594:	02500793          	li	a5,37
80005598:	00f50e63          	beq	a0,a5,800055b4 <z_cbvprintf_impl+0x6c>
			OUTC(*fp++);
8000559c:	001a8a93          	addi	s5,s5,1
800055a0:	00048593          	mv	a1,s1
800055a4:	000900e7          	jalr	s2
800055a8:	76054663          	bltz	a0,80005d14 <z_cbvprintf_impl+0x7cc>
800055ac:	00140413          	addi	s0,s0,1
			continue;
800055b0:	fddff06f          	j	8000558c <z_cbvprintf_impl+0x44>
		} state = {
800055b4:	00012823          	sw	zero,16(sp)
800055b8:	00012a23          	sw	zero,20(sp)
800055bc:	00012c23          	sw	zero,24(sp)
800055c0:	00012e23          	sw	zero,28(sp)
800055c4:	02012023          	sw	zero,32(sp)
800055c8:	02012223          	sw	zero,36(sp)
800055cc:	02012423          	sw	zero,40(sp)
800055d0:	02012623          	sw	zero,44(sp)
		fp = extract_conversion(conv, sp);
800055d4:	000a8593          	mv	a1,s5
800055d8:	02010513          	addi	a0,sp,32
800055dc:	c29ff0ef          	jal	ra,80005204 <extract_conversion>
800055e0:	00050993          	mv	s3,a0
		if (conv->width_star) {
800055e4:	02015783          	lhu	a5,32(sp)
800055e8:	1007f713          	andi	a4,a5,256
800055ec:	0c070263          	beqz	a4,800056b0 <z_cbvprintf_impl+0x168>
			width = va_arg(ap, int);
800055f0:	00c12783          	lw	a5,12(sp)
800055f4:	00478713          	addi	a4,a5,4
800055f8:	00e12623          	sw	a4,12(sp)
800055fc:	0007aa03          	lw	s4,0(a5)
			if (width < 0) {
80005600:	080a4e63          	bltz	s4,8000569c <z_cbvprintf_impl+0x154>
		if (conv->prec_star) {
80005604:	02015783          	lhu	a5,32(sp)
80005608:	4007f713          	andi	a4,a5,1024
8000560c:	0c070863          	beqz	a4,800056dc <z_cbvprintf_impl+0x194>
			int arg = va_arg(ap, int);
80005610:	00c12783          	lw	a5,12(sp)
80005614:	00478713          	addi	a4,a5,4
80005618:	00e12623          	sw	a4,12(sp)
8000561c:	0007ab03          	lw	s6,0(a5)
			if (arg < 0) {
80005620:	0a0b4463          	bltz	s6,800056c8 <z_cbvprintf_impl+0x180>
		conv->pad0_value = 0;
80005624:	02012223          	sw	zero,36(sp)
		conv->pad0_pre_exp = 0;
80005628:	02012423          	sw	zero,40(sp)
			= (enum specifier_cat_enum)conv->specifier_cat;
8000562c:	02012783          	lw	a5,32(sp)
80005630:	0107d713          	srli	a4,a5,0x10
80005634:	00777713          	andi	a4,a4,7
			= (enum length_mod_enum)conv->length_mod;
80005638:	00b7d793          	srli	a5,a5,0xb
8000563c:	00f7f793          	andi	a5,a5,15
		enum length_mod_enum length_mod
80005640:	00078693          	mv	a3,a5
		if (specifier_cat == SPECIFIER_SINT) {
80005644:	00100613          	li	a2,1
80005648:	0ac70663          	beq	a4,a2,800056f4 <z_cbvprintf_impl+0x1ac>
		} else if (specifier_cat == SPECIFIER_UINT) {
8000564c:	00200613          	li	a2,2
80005650:	1ec70063          	beq	a4,a2,80005830 <z_cbvprintf_impl+0x2e8>
		} else if (specifier_cat == SPECIFIER_FP) {
80005654:	00400793          	li	a5,4
80005658:	2cf70a63          	beq	a4,a5,8000592c <z_cbvprintf_impl+0x3e4>
		} else if (specifier_cat == SPECIFIER_PTR) {
8000565c:	00300793          	li	a5,3
80005660:	32f70863          	beq	a4,a5,80005990 <z_cbvprintf_impl+0x448>
		if (conv->invalid || conv->unsupported) {
80005664:	02012783          	lw	a5,32(sp)
80005668:	0037f793          	andi	a5,a5,3
8000566c:	32079e63          	bnez	a5,800059a8 <z_cbvprintf_impl+0x460>
		switch (conv->specifier) {
80005670:	02314783          	lbu	a5,35(sp)
80005674:	fdb78793          	addi	a5,a5,-37
80005678:	0ff7f693          	zext.b	a3,a5
8000567c:	05300713          	li	a4,83
80005680:	4cd76a63          	bltu	a4,a3,80005b54 <z_cbvprintf_impl+0x60c>
80005684:	00269793          	slli	a5,a3,0x2
80005688:	8000a737          	lui	a4,0x8000a
8000568c:	b0470713          	addi	a4,a4,-1276 # 80009b04 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009b05>
80005690:	00e787b3          	add	a5,a5,a4
80005694:	0007a783          	lw	a5,0(a5)
80005698:	00078067          	jr	a5
				conv->flag_dash = true;
8000569c:	02015783          	lhu	a5,32(sp)
800056a0:	0047e793          	ori	a5,a5,4
800056a4:	02f11023          	sh	a5,32(sp)
				width = -width;
800056a8:	41400a33          	neg	s4,s4
800056ac:	f59ff06f          	j	80005604 <z_cbvprintf_impl+0xbc>
		} else if (conv->width_present) {
800056b0:	0807f793          	andi	a5,a5,128
800056b4:	00078663          	beqz	a5,800056c0 <z_cbvprintf_impl+0x178>
			width = conv->width_value;
800056b8:	02412a03          	lw	s4,36(sp)
800056bc:	f49ff06f          	j	80005604 <z_cbvprintf_impl+0xbc>
		int width = -1;
800056c0:	fff00a13          	li	s4,-1
800056c4:	f41ff06f          	j	80005604 <z_cbvprintf_impl+0xbc>
				conv->prec_present = false;
800056c8:	02015783          	lhu	a5,32(sp)
800056cc:	dff7f793          	andi	a5,a5,-513
800056d0:	02f11023          	sh	a5,32(sp)
		int precision = -1;
800056d4:	fff00b13          	li	s6,-1
800056d8:	f4dff06f          	j	80005624 <z_cbvprintf_impl+0xdc>
		} else if (conv->prec_present) {
800056dc:	2007f793          	andi	a5,a5,512
800056e0:	00078663          	beqz	a5,800056ec <z_cbvprintf_impl+0x1a4>
			precision = conv->prec_value;
800056e4:	02812b03          	lw	s6,40(sp)
800056e8:	f3dff06f          	j	80005624 <z_cbvprintf_impl+0xdc>
		int precision = -1;
800056ec:	fff00b13          	li	s6,-1
800056f0:	f35ff06f          	j	80005624 <z_cbvprintf_impl+0xdc>
			switch (length_mod) {
800056f4:	00500713          	li	a4,5
800056f8:	0ee78e63          	beq	a5,a4,800057f4 <z_cbvprintf_impl+0x2ac>
800056fc:	02f76e63          	bltu	a4,a5,80005738 <z_cbvprintf_impl+0x1f0>
80005700:	00300713          	li	a4,3
80005704:	0ae78263          	beq	a5,a4,800057a8 <z_cbvprintf_impl+0x260>
80005708:	00400713          	li	a4,4
8000570c:	04e79e63          	bne	a5,a4,80005768 <z_cbvprintf_impl+0x220>
					(sint_value_type)va_arg(ap, long long);
80005710:	00c12783          	lw	a5,12(sp)
80005714:	00778793          	addi	a5,a5,7
80005718:	ff87f793          	andi	a5,a5,-8
8000571c:	00878713          	addi	a4,a5,8
80005720:	00e12623          	sw	a4,12(sp)
80005724:	0007a703          	lw	a4,0(a5)
80005728:	0047a783          	lw	a5,4(a5)
				value->sint =
8000572c:	00e12823          	sw	a4,16(sp)
80005730:	00f12a23          	sw	a5,20(sp)
				break;
80005734:	0500006f          	j	80005784 <z_cbvprintf_impl+0x23c>
			switch (length_mod) {
80005738:	00a78793          	addi	a5,a5,10
8000573c:	00f7f793          	andi	a5,a5,15
80005740:	00100713          	li	a4,1
80005744:	02f76263          	bltu	a4,a5,80005768 <z_cbvprintf_impl+0x220>
					(sint_value_type)va_arg(ap, ptrdiff_t);
80005748:	00c12783          	lw	a5,12(sp)
8000574c:	00478713          	addi	a4,a5,4
80005750:	00e12623          	sw	a4,12(sp)
80005754:	0007a783          	lw	a5,0(a5)
80005758:	41f7d713          	srai	a4,a5,0x1f
				value->sint =
8000575c:	00f12823          	sw	a5,16(sp)
80005760:	00e12a23          	sw	a4,20(sp)
				break;
80005764:	0200006f          	j	80005784 <z_cbvprintf_impl+0x23c>
				value->sint = va_arg(ap, int);
80005768:	00c12783          	lw	a5,12(sp)
8000576c:	00478713          	addi	a4,a5,4
80005770:	00e12623          	sw	a4,12(sp)
80005774:	0007a783          	lw	a5,0(a5)
80005778:	41f7d713          	srai	a4,a5,0x1f
8000577c:	00f12823          	sw	a5,16(sp)
80005780:	00e12a23          	sw	a4,20(sp)
			if (length_mod == LENGTH_HH) {
80005784:	00100793          	li	a5,1
80005788:	08f68a63          	beq	a3,a5,8000581c <z_cbvprintf_impl+0x2d4>
			} else if (length_mod == LENGTH_H) {
8000578c:	00200793          	li	a5,2
80005790:	ecf69ae3          	bne	a3,a5,80005664 <z_cbvprintf_impl+0x11c>
				value->sint = (short)value->sint;
80005794:	01011783          	lh	a5,16(sp)
80005798:	41f7d713          	srai	a4,a5,0x1f
8000579c:	00f12823          	sw	a5,16(sp)
800057a0:	00e12a23          	sw	a4,20(sp)
800057a4:	ec1ff06f          	j	80005664 <z_cbvprintf_impl+0x11c>
				    && (conv->specifier == 'c')) {
800057a8:	02314703          	lbu	a4,35(sp)
				if (WCHAR_IS_SIGNED
800057ac:	06300793          	li	a5,99
800057b0:	02f70263          	beq	a4,a5,800057d4 <z_cbvprintf_impl+0x28c>
					value->sint = va_arg(ap, long);
800057b4:	00c12783          	lw	a5,12(sp)
800057b8:	00478713          	addi	a4,a5,4
800057bc:	00e12623          	sw	a4,12(sp)
800057c0:	0007a783          	lw	a5,0(a5)
800057c4:	41f7d713          	srai	a4,a5,0x1f
800057c8:	00f12823          	sw	a5,16(sp)
800057cc:	00e12a23          	sw	a4,20(sp)
800057d0:	fb5ff06f          	j	80005784 <z_cbvprintf_impl+0x23c>
					value->sint = (wchar_t)va_arg(ap,
800057d4:	00c12783          	lw	a5,12(sp)
800057d8:	00478713          	addi	a4,a5,4
800057dc:	00e12623          	sw	a4,12(sp)
800057e0:	0007a783          	lw	a5,0(a5)
800057e4:	41f7d713          	srai	a4,a5,0x1f
800057e8:	00f12823          	sw	a5,16(sp)
800057ec:	00e12a23          	sw	a4,20(sp)
800057f0:	f95ff06f          	j	80005784 <z_cbvprintf_impl+0x23c>
					(sint_value_type)va_arg(ap, intmax_t);
800057f4:	00c12783          	lw	a5,12(sp)
800057f8:	00778793          	addi	a5,a5,7
800057fc:	ff87f793          	andi	a5,a5,-8
80005800:	00878713          	addi	a4,a5,8
80005804:	00e12623          	sw	a4,12(sp)
80005808:	0007a703          	lw	a4,0(a5)
8000580c:	0047a783          	lw	a5,4(a5)
				value->sint =
80005810:	00e12823          	sw	a4,16(sp)
80005814:	00f12a23          	sw	a5,20(sp)
				break;
80005818:	f6dff06f          	j	80005784 <z_cbvprintf_impl+0x23c>
				value->sint = (signed char)value->sint;
8000581c:	01010783          	lb	a5,16(sp)
80005820:	41f7d713          	srai	a4,a5,0x1f
80005824:	00f12823          	sw	a5,16(sp)
80005828:	00e12a23          	sw	a4,20(sp)
8000582c:	e39ff06f          	j	80005664 <z_cbvprintf_impl+0x11c>
			switch (length_mod) {
80005830:	00500713          	li	a4,5
80005834:	0ce78063          	beq	a5,a4,800058f4 <z_cbvprintf_impl+0x3ac>
80005838:	02f76e63          	bltu	a4,a5,80005874 <z_cbvprintf_impl+0x32c>
8000583c:	00300713          	li	a4,3
80005840:	08e78c63          	beq	a5,a4,800058d8 <z_cbvprintf_impl+0x390>
80005844:	00400713          	li	a4,4
80005848:	04e79c63          	bne	a5,a4,800058a0 <z_cbvprintf_impl+0x358>
					(uint_value_type)va_arg(ap,
8000584c:	00c12783          	lw	a5,12(sp)
80005850:	00778793          	addi	a5,a5,7
80005854:	ff87f793          	andi	a5,a5,-8
80005858:	00878713          	addi	a4,a5,8
8000585c:	00e12623          	sw	a4,12(sp)
80005860:	0007a703          	lw	a4,0(a5)
80005864:	0047a783          	lw	a5,4(a5)
				value->uint =
80005868:	00e12823          	sw	a4,16(sp)
8000586c:	00f12a23          	sw	a5,20(sp)
				break;
80005870:	0480006f          	j	800058b8 <z_cbvprintf_impl+0x370>
			switch (length_mod) {
80005874:	00a78793          	addi	a5,a5,10
80005878:	00f7f793          	andi	a5,a5,15
8000587c:	00100713          	li	a4,1
80005880:	02f76063          	bltu	a4,a5,800058a0 <z_cbvprintf_impl+0x358>
					(uint_value_type)va_arg(ap, size_t);
80005884:	00c12783          	lw	a5,12(sp)
80005888:	00478713          	addi	a4,a5,4
8000588c:	00e12623          	sw	a4,12(sp)
80005890:	0007a783          	lw	a5,0(a5)
				value->uint =
80005894:	00f12823          	sw	a5,16(sp)
80005898:	00012a23          	sw	zero,20(sp)
				break;
8000589c:	01c0006f          	j	800058b8 <z_cbvprintf_impl+0x370>
				value->uint = va_arg(ap, unsigned int);
800058a0:	00c12783          	lw	a5,12(sp)
800058a4:	00478713          	addi	a4,a5,4
800058a8:	00e12623          	sw	a4,12(sp)
800058ac:	0007a783          	lw	a5,0(a5)
800058b0:	00f12823          	sw	a5,16(sp)
800058b4:	00012a23          	sw	zero,20(sp)
			if (length_mod == LENGTH_HH) {
800058b8:	00100793          	li	a5,1
800058bc:	06f68063          	beq	a3,a5,8000591c <z_cbvprintf_impl+0x3d4>
			} else if (length_mod == LENGTH_H) {
800058c0:	00200793          	li	a5,2
800058c4:	daf690e3          	bne	a3,a5,80005664 <z_cbvprintf_impl+0x11c>
				value->uint = (unsigned short)value->uint;
800058c8:	01015783          	lhu	a5,16(sp)
800058cc:	00f12823          	sw	a5,16(sp)
800058d0:	00012a23          	sw	zero,20(sp)
800058d4:	d91ff06f          	j	80005664 <z_cbvprintf_impl+0x11c>
					value->uint = va_arg(ap, unsigned long);
800058d8:	00c12783          	lw	a5,12(sp)
800058dc:	00478713          	addi	a4,a5,4
800058e0:	00e12623          	sw	a4,12(sp)
800058e4:	0007a783          	lw	a5,0(a5)
800058e8:	00f12823          	sw	a5,16(sp)
800058ec:	00012a23          	sw	zero,20(sp)
				break;
800058f0:	fc9ff06f          	j	800058b8 <z_cbvprintf_impl+0x370>
					(uint_value_type)va_arg(ap,
800058f4:	00c12783          	lw	a5,12(sp)
800058f8:	00778793          	addi	a5,a5,7
800058fc:	ff87f793          	andi	a5,a5,-8
80005900:	00878713          	addi	a4,a5,8
80005904:	00e12623          	sw	a4,12(sp)
80005908:	0007a703          	lw	a4,0(a5)
8000590c:	0047a783          	lw	a5,4(a5)
				value->uint =
80005910:	00e12823          	sw	a4,16(sp)
80005914:	00f12a23          	sw	a5,20(sp)
				break;
80005918:	fa1ff06f          	j	800058b8 <z_cbvprintf_impl+0x370>
				value->uint = (unsigned char)value->uint;
8000591c:	01014783          	lbu	a5,16(sp)
80005920:	00f12823          	sw	a5,16(sp)
80005924:	00012a23          	sw	zero,20(sp)
80005928:	d3dff06f          	j	80005664 <z_cbvprintf_impl+0x11c>
			if (length_mod == LENGTH_UPPER_L) {
8000592c:	00800793          	li	a5,8
80005930:	02f68663          	beq	a3,a5,8000595c <z_cbvprintf_impl+0x414>
				value->dbl = va_arg(ap, double);
80005934:	00c12783          	lw	a5,12(sp)
80005938:	00778793          	addi	a5,a5,7
8000593c:	ff87f793          	andi	a5,a5,-8
80005940:	00878713          	addi	a4,a5,8
80005944:	00e12623          	sw	a4,12(sp)
80005948:	0007a703          	lw	a4,0(a5)
8000594c:	0047a783          	lw	a5,4(a5)
80005950:	00e12823          	sw	a4,16(sp)
80005954:	00f12a23          	sw	a5,20(sp)
80005958:	d0dff06f          	j	80005664 <z_cbvprintf_impl+0x11c>
				value->ldbl = va_arg(ap, long double);
8000595c:	00c12783          	lw	a5,12(sp)
80005960:	00478713          	addi	a4,a5,4
80005964:	00e12623          	sw	a4,12(sp)
80005968:	0007a783          	lw	a5,0(a5)
8000596c:	0007a603          	lw	a2,0(a5)
80005970:	0047a683          	lw	a3,4(a5)
80005974:	0087a703          	lw	a4,8(a5)
80005978:	00c7a783          	lw	a5,12(a5)
8000597c:	00c12823          	sw	a2,16(sp)
80005980:	00d12a23          	sw	a3,20(sp)
80005984:	00e12c23          	sw	a4,24(sp)
80005988:	00f12e23          	sw	a5,28(sp)
8000598c:	cd9ff06f          	j	80005664 <z_cbvprintf_impl+0x11c>
			value->ptr = va_arg(ap, void *);
80005990:	00c12783          	lw	a5,12(sp)
80005994:	00478713          	addi	a4,a5,4
80005998:	00e12623          	sw	a4,12(sp)
8000599c:	0007a783          	lw	a5,0(a5)
800059a0:	00f12823          	sw	a5,16(sp)
800059a4:	cc1ff06f          	j	80005664 <z_cbvprintf_impl+0x11c>
			OUTS(sp, fp);
800059a8:	00098693          	mv	a3,s3
800059ac:	000a8613          	mv	a2,s5
800059b0:	00048593          	mv	a1,s1
800059b4:	00090513          	mv	a0,s2
800059b8:	b0dff0ef          	jal	ra,800054c4 <outs>
800059bc:	34054c63          	bltz	a0,80005d14 <z_cbvprintf_impl+0x7cc>
800059c0:	00a40433          	add	s0,s0,a0
		fp = extract_conversion(conv, sp);
800059c4:	00098a93          	mv	s5,s3
			continue;
800059c8:	bc5ff06f          	j	8000558c <z_cbvprintf_impl+0x44>
			OUTC('%');
800059cc:	00048593          	mv	a1,s1
800059d0:	02500513          	li	a0,37
800059d4:	000900e7          	jalr	s2
800059d8:	32054e63          	bltz	a0,80005d14 <z_cbvprintf_impl+0x7cc>
800059dc:	00140413          	addi	s0,s0,1
		char sign = 0;
800059e0:	00000b93          	li	s7,0
		const char *bpe = buf + sizeof(buf);
800059e4:	04e10b13          	addi	s6,sp,78
		const char *bps = NULL;
800059e8:	00000a93          	li	s5,0
			break;
800059ec:	1740006f          	j	80005b60 <z_cbvprintf_impl+0x618>
			bps = (const char *)value->ptr;
800059f0:	01012a83          	lw	s5,16(sp)
			if (precision >= 0) {
800059f4:	000b4e63          	bltz	s6,80005a10 <z_cbvprintf_impl+0x4c8>
				len = strnlen(bps, precision);
800059f8:	000b0593          	mv	a1,s6
800059fc:	000a8513          	mv	a0,s5
80005a00:	a7cfc0ef          	jal	ra,80001c7c <strnlen>
			bpe = bps + len;
80005a04:	00aa8b33          	add	s6,s5,a0
		char sign = 0;
80005a08:	00000b93          	li	s7,0
			break;
80005a0c:	1540006f          	j	80005b60 <z_cbvprintf_impl+0x618>
				len = strlen(bps);
80005a10:	000a8513          	mv	a0,s5
80005a14:	e15fb0ef          	jal	ra,80001828 <strlen>
80005a18:	fedff06f          	j	80005a04 <z_cbvprintf_impl+0x4bc>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
80005a1c:	01012783          	lw	a5,16(sp)
80005a20:	02f10c23          	sb	a5,56(sp)
		char sign = 0;
80005a24:	00000b93          	li	s7,0
			bpe = buf + 1;
80005a28:	03910b13          	addi	s6,sp,57
			bps = buf;
80005a2c:	03810a93          	addi	s5,sp,56
			break;
80005a30:	1300006f          	j	80005b60 <z_cbvprintf_impl+0x618>
			if (conv->flag_plus) {
80005a34:	02015783          	lhu	a5,32(sp)
80005a38:	0087f713          	andi	a4,a5,8
80005a3c:	00071a63          	bnez	a4,80005a50 <z_cbvprintf_impl+0x508>
			} else if (conv->flag_space) {
80005a40:	0107f793          	andi	a5,a5,16
80005a44:	02079463          	bnez	a5,80005a6c <z_cbvprintf_impl+0x524>
		char sign = 0;
80005a48:	00000b93          	li	s7,0
80005a4c:	0080006f          	j	80005a54 <z_cbvprintf_impl+0x50c>
				sign = '+';
80005a50:	02b00b93          	li	s7,43
			sint = value->sint;
80005a54:	01012703          	lw	a4,16(sp)
80005a58:	01412783          	lw	a5,20(sp)
			if (sint < 0) {
80005a5c:	0007cc63          	bltz	a5,80005a74 <z_cbvprintf_impl+0x52c>
				value->uint = (uint_value_type)sint;
80005a60:	00e12823          	sw	a4,16(sp)
80005a64:	00f12a23          	sw	a5,20(sp)
80005a68:	0300006f          	j	80005a98 <z_cbvprintf_impl+0x550>
				sign = ' ';
80005a6c:	02000b93          	li	s7,32
80005a70:	fe5ff06f          	j	80005a54 <z_cbvprintf_impl+0x50c>
				value->uint = (uint_value_type)-sint;
80005a74:	40e006b3          	neg	a3,a4
80005a78:	00e03733          	snez	a4,a4
80005a7c:	40f007b3          	neg	a5,a5
80005a80:	40e787b3          	sub	a5,a5,a4
80005a84:	00d12823          	sw	a3,16(sp)
80005a88:	00f12a23          	sw	a5,20(sp)
				sign = '-';
80005a8c:	02d00b93          	li	s7,45
80005a90:	0080006f          	j	80005a98 <z_cbvprintf_impl+0x550>
		switch (conv->specifier) {
80005a94:	00000b93          	li	s7,0
			bps = encode_uint(value->uint, conv, buf, bpe);
80005a98:	04e10713          	addi	a4,sp,78
80005a9c:	03810693          	addi	a3,sp,56
80005aa0:	02010613          	addi	a2,sp,32
80005aa4:	01012503          	lw	a0,16(sp)
80005aa8:	01412583          	lw	a1,20(sp)
80005aac:	835ff0ef          	jal	ra,800052e0 <encode_uint>
80005ab0:	00050a93          	mv	s5,a0
			if (precision >= 0) {
80005ab4:	120b4663          	bltz	s6,80005be0 <z_cbvprintf_impl+0x698>
				size_t len = bpe - bps;
80005ab8:	04e10793          	addi	a5,sp,78
80005abc:	415787b3          	sub	a5,a5,s5
				conv->flag_zero = false;
80005ac0:	02015703          	lhu	a4,32(sp)
80005ac4:	fbf77713          	andi	a4,a4,-65
80005ac8:	02e11023          	sh	a4,32(sp)
				if (len < (size_t)precision) {
80005acc:	1167fe63          	bgeu	a5,s6,80005be8 <z_cbvprintf_impl+0x6a0>
					conv->pad0_value = precision - (int)len;
80005ad0:	40fb07b3          	sub	a5,s6,a5
80005ad4:	02f12223          	sw	a5,36(sp)
		const char *bpe = buf + sizeof(buf);
80005ad8:	04e10b13          	addi	s6,sp,78
80005adc:	0840006f          	j	80005b60 <z_cbvprintf_impl+0x618>
			if (value->ptr != NULL) {
80005ae0:	01012503          	lw	a0,16(sp)
80005ae4:	00051e63          	bnez	a0,80005b00 <z_cbvprintf_impl+0x5b8>
		char sign = 0;
80005ae8:	00000b93          	li	s7,0
			bpe = bps + 5;
80005aec:	8000ab37          	lui	s6,0x8000a
80005af0:	b01b0b13          	addi	s6,s6,-1279 # 80009b01 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009b02>
			bps = "(nil)";
80005af4:	8000aab7          	lui	s5,0x8000a
80005af8:	afca8a93          	addi	s5,s5,-1284 # 80009afc <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009afd>
80005afc:	0640006f          	j	80005b60 <z_cbvprintf_impl+0x618>
				bps = encode_uint((uintptr_t)value->ptr, conv,
80005b00:	04e10713          	addi	a4,sp,78
80005b04:	03810693          	addi	a3,sp,56
80005b08:	02010613          	addi	a2,sp,32
80005b0c:	00000593          	li	a1,0
80005b10:	fd0ff0ef          	jal	ra,800052e0 <encode_uint>
80005b14:	00050a93          	mv	s5,a0
				conv->altform_0c = true;
80005b18:	02214783          	lbu	a5,34(sp)
80005b1c:	0107e793          	ori	a5,a5,16
80005b20:	02f10123          	sb	a5,34(sp)
				conv->specifier = 'x';
80005b24:	07800793          	li	a5,120
80005b28:	02f101a3          	sb	a5,35(sp)
		char sign = 0;
80005b2c:	00000b93          	li	s7,0
				goto prec_int_pad0;
80005b30:	f85ff06f          	j	80005ab4 <z_cbvprintf_impl+0x56c>
				store_count(conv, value->ptr, count);
80005b34:	00040613          	mv	a2,s0
80005b38:	01012583          	lw	a1,16(sp)
80005b3c:	02010513          	addi	a0,sp,32
80005b40:	905ff0ef          	jal	ra,80005444 <store_count>
		char sign = 0;
80005b44:	00000b93          	li	s7,0
		const char *bpe = buf + sizeof(buf);
80005b48:	04e10b13          	addi	s6,sp,78
		const char *bps = NULL;
80005b4c:	00000a93          	li	s5,0
			break;
80005b50:	0100006f          	j	80005b60 <z_cbvprintf_impl+0x618>
		switch (conv->specifier) {
80005b54:	00000b93          	li	s7,0
80005b58:	04e10b13          	addi	s6,sp,78
80005b5c:	00000a93          	li	s5,0
		if (bps == NULL) {
80005b60:	1a0a8463          	beqz	s5,80005d08 <z_cbvprintf_impl+0x7c0>
		size_t nj_len = (bpe - bps);
80005b64:	415b06b3          	sub	a3,s6,s5
		if (sign != 0) {
80005b68:	000b8463          	beqz	s7,80005b70 <z_cbvprintf_impl+0x628>
			nj_len += 1U;
80005b6c:	00168693          	addi	a3,a3,1
		if (conv->altform_0c) {
80005b70:	02214783          	lbu	a5,34(sp)
80005b74:	0107f713          	andi	a4,a5,16
80005b78:	06070c63          	beqz	a4,80005bf0 <z_cbvprintf_impl+0x6a8>
			nj_len += 2U;
80005b7c:	00268693          	addi	a3,a3,2
		nj_len += conv->pad0_value;
80005b80:	02412703          	lw	a4,36(sp)
80005b84:	00d70733          	add	a4,a4,a3
		if (conv->pad_fp) {
80005b88:	0407f793          	andi	a5,a5,64
80005b8c:	00078663          	beqz	a5,80005b98 <z_cbvprintf_impl+0x650>
			nj_len += conv->pad0_pre_exp;
80005b90:	02812783          	lw	a5,40(sp)
80005b94:	00f70733          	add	a4,a4,a5
		if (width > 0) {
80005b98:	09405e63          	blez	s4,80005c34 <z_cbvprintf_impl+0x6ec>
			width -= (int)nj_len;
80005b9c:	40ea0a33          	sub	s4,s4,a4
			if (!conv->flag_dash) {
80005ba0:	02012783          	lw	a5,32(sp)
80005ba4:	0027d793          	srli	a5,a5,0x2
80005ba8:	0017f793          	andi	a5,a5,1
80005bac:	08079463          	bnez	a5,80005c34 <z_cbvprintf_impl+0x6ec>
				if (conv->flag_zero) {
80005bb0:	02015783          	lhu	a5,32(sp)
80005bb4:	0407f793          	andi	a5,a5,64
80005bb8:	04078463          	beqz	a5,80005c00 <z_cbvprintf_impl+0x6b8>
					if (sign != 0) {
80005bbc:	040b8663          	beqz	s7,80005c08 <z_cbvprintf_impl+0x6c0>
						OUTC(sign);
80005bc0:	00048593          	mv	a1,s1
80005bc4:	000b8513          	mv	a0,s7
80005bc8:	000900e7          	jalr	s2
80005bcc:	14054463          	bltz	a0,80005d14 <z_cbvprintf_impl+0x7cc>
80005bd0:	00140413          	addi	s0,s0,1
					pad = '0';
80005bd4:	03000c13          	li	s8,48
						sign = 0;
80005bd8:	00000b93          	li	s7,0
80005bdc:	0300006f          	j	80005c0c <z_cbvprintf_impl+0x6c4>
		const char *bpe = buf + sizeof(buf);
80005be0:	04e10b13          	addi	s6,sp,78
80005be4:	f7dff06f          	j	80005b60 <z_cbvprintf_impl+0x618>
80005be8:	04e10b13          	addi	s6,sp,78
80005bec:	f75ff06f          	j	80005b60 <z_cbvprintf_impl+0x618>
		} else if (conv->altform_0) {
80005bf0:	0087f713          	andi	a4,a5,8
80005bf4:	f80706e3          	beqz	a4,80005b80 <z_cbvprintf_impl+0x638>
			nj_len += 1U;
80005bf8:	00168693          	addi	a3,a3,1
80005bfc:	f85ff06f          	j	80005b80 <z_cbvprintf_impl+0x638>
				char pad = ' ';
80005c00:	02000c13          	li	s8,32
80005c04:	0080006f          	j	80005c0c <z_cbvprintf_impl+0x6c4>
					pad = '0';
80005c08:	03000c13          	li	s8,48
80005c0c:	000a0793          	mv	a5,s4
				while (width-- > 0) {
80005c10:	fff78a13          	addi	s4,a5,-1
80005c14:	02f05063          	blez	a5,80005c34 <z_cbvprintf_impl+0x6ec>
					OUTC(pad);
80005c18:	00048593          	mv	a1,s1
80005c1c:	000c0513          	mv	a0,s8
80005c20:	000900e7          	jalr	s2
80005c24:	0e054863          	bltz	a0,80005d14 <z_cbvprintf_impl+0x7cc>
80005c28:	00140413          	addi	s0,s0,1
				while (width-- > 0) {
80005c2c:	000a0793          	mv	a5,s4
80005c30:	fe1ff06f          	j	80005c10 <z_cbvprintf_impl+0x6c8>
		if (sign != 0) {
80005c34:	000b8c63          	beqz	s7,80005c4c <z_cbvprintf_impl+0x704>
			OUTC(sign);
80005c38:	00048593          	mv	a1,s1
80005c3c:	000b8513          	mv	a0,s7
80005c40:	000900e7          	jalr	s2
80005c44:	0c054863          	bltz	a0,80005d14 <z_cbvprintf_impl+0x7cc>
80005c48:	00140413          	addi	s0,s0,1
			if (conv->altform_0c | conv->altform_0) {
80005c4c:	02012783          	lw	a5,32(sp)
80005c50:	0147d713          	srli	a4,a5,0x14
80005c54:	00177713          	andi	a4,a4,1
80005c58:	0137d793          	srli	a5,a5,0x13
80005c5c:	0017f793          	andi	a5,a5,1
80005c60:	00f767b3          	or	a5,a4,a5
80005c64:	00078c63          	beqz	a5,80005c7c <z_cbvprintf_impl+0x734>
				OUTC('0');
80005c68:	00048593          	mv	a1,s1
80005c6c:	03000513          	li	a0,48
80005c70:	000900e7          	jalr	s2
80005c74:	0a054063          	bltz	a0,80005d14 <z_cbvprintf_impl+0x7cc>
80005c78:	00140413          	addi	s0,s0,1
			if (conv->altform_0c) {
80005c7c:	02214783          	lbu	a5,34(sp)
80005c80:	0107f793          	andi	a5,a5,16
80005c84:	00078c63          	beqz	a5,80005c9c <z_cbvprintf_impl+0x754>
				OUTC(conv->specifier);
80005c88:	00048593          	mv	a1,s1
80005c8c:	02314503          	lbu	a0,35(sp)
80005c90:	000900e7          	jalr	s2
80005c94:	08054063          	bltz	a0,80005d14 <z_cbvprintf_impl+0x7cc>
80005c98:	00140413          	addi	s0,s0,1
			pad_len = conv->pad0_value;
80005c9c:	02412783          	lw	a5,36(sp)
			while (pad_len-- > 0) {
80005ca0:	fff78b93          	addi	s7,a5,-1
80005ca4:	02f05063          	blez	a5,80005cc4 <z_cbvprintf_impl+0x77c>
				OUTC('0');
80005ca8:	00048593          	mv	a1,s1
80005cac:	03000513          	li	a0,48
80005cb0:	000900e7          	jalr	s2
80005cb4:	06054063          	bltz	a0,80005d14 <z_cbvprintf_impl+0x7cc>
80005cb8:	00140413          	addi	s0,s0,1
			while (pad_len-- > 0) {
80005cbc:	000b8793          	mv	a5,s7
80005cc0:	fe1ff06f          	j	80005ca0 <z_cbvprintf_impl+0x758>
			OUTS(bps, bpe);
80005cc4:	000b0693          	mv	a3,s6
80005cc8:	000a8613          	mv	a2,s5
80005ccc:	00048593          	mv	a1,s1
80005cd0:	00090513          	mv	a0,s2
80005cd4:	ff0ff0ef          	jal	ra,800054c4 <outs>
80005cd8:	02054e63          	bltz	a0,80005d14 <z_cbvprintf_impl+0x7cc>
80005cdc:	00a40433          	add	s0,s0,a0
		while (width > 0) {
80005ce0:	03405063          	blez	s4,80005d00 <z_cbvprintf_impl+0x7b8>
			OUTC(' ');
80005ce4:	00048593          	mv	a1,s1
80005ce8:	02000513          	li	a0,32
80005cec:	000900e7          	jalr	s2
80005cf0:	02054263          	bltz	a0,80005d14 <z_cbvprintf_impl+0x7cc>
80005cf4:	00140413          	addi	s0,s0,1
			--width;
80005cf8:	fffa0a13          	addi	s4,s4,-1
80005cfc:	fe5ff06f          	j	80005ce0 <z_cbvprintf_impl+0x798>
		fp = extract_conversion(conv, sp);
80005d00:	00098a93          	mv	s5,s3
80005d04:	889ff06f          	j	8000558c <z_cbvprintf_impl+0x44>
80005d08:	00098a93          	mv	s5,s3
80005d0c:	881ff06f          	j	8000558c <z_cbvprintf_impl+0x44>
	return count;
80005d10:	00040513          	mv	a0,s0
}
80005d14:	07c12083          	lw	ra,124(sp)
80005d18:	07812403          	lw	s0,120(sp)
80005d1c:	07412483          	lw	s1,116(sp)
80005d20:	07012903          	lw	s2,112(sp)
80005d24:	06c12983          	lw	s3,108(sp)
80005d28:	06812a03          	lw	s4,104(sp)
80005d2c:	06412a83          	lw	s5,100(sp)
80005d30:	06012b03          	lw	s6,96(sp)
80005d34:	05c12b83          	lw	s7,92(sp)
80005d38:	05812c03          	lw	s8,88(sp)
80005d3c:	08010113          	addi	sp,sp,128
80005d40:	00008067          	ret

80005d44 <_ConfigAbsSyms>:
80005d44:	00308013          	addi	zero,ra,3
GEN_ABS_SYM_END
80005d48:	00008067          	ret

80005d4c <arch_cpu_idle>:
80005d4c:	00308013          	addi	zero,ra,3
{
80005d50:	ff010113          	addi	sp,sp,-16
80005d54:	00112623          	sw	ra,12(sp)
	sys_trace_idle();
80005d58:	09c000ef          	jal	ra,80005df4 <sys_trace_idle>
 * use atomic instruction csrs to unlock global irq
 * csrs: atomic set bits in CSR register
 */
static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	__asm__ volatile ("csrs mstatus, %0"
80005d5c:	00800793          	li	a5,8
80005d60:	3007a073          	csrs	mstatus,a5
	__asm__ volatile("wfi");
80005d64:	10500073          	wfi
}
80005d68:	00c12083          	lw	ra,12(sp)
80005d6c:	01010113          	addi	sp,sp,16
80005d70:	00008067          	ret

80005d74 <arch_irq_enable>:
80005d74:	00308013          	addi	zero,ra,3
{
#if defined(CONFIG_3RD_LEVEL_INTERRUPTS)
	return ((irq >> 16) & 0xFF) != 0 ? 3 :
		(((irq >> 8) & 0xFF) == 0 ? 1 : 2);
#elif defined(CONFIG_2ND_LEVEL_INTERRUPTS)
	return ((irq >> 8) & 0xFF) == 0 ? 1 : 2;
80005d78:	00855793          	srli	a5,a0,0x8
80005d7c:	0ff7f713          	zext.b	a4,a5
80005d80:	00071a63          	bnez	a4,80005d94 <arch_irq_enable+0x20>
			  : "r" (1 << irq));
80005d84:	00100793          	li	a5,1
80005d88:	00a797b3          	sll	a5,a5,a0
	__asm__ volatile ("csrrs %0, mie, %1\n"
80005d8c:	3047a7f3          	csrrs	a5,mie,a5
80005d90:	00008067          	ret
{
80005d94:	ff010113          	addi	sp,sp,-16
80005d98:	00112623          	sw	ra,12(sp)
		riscv_plic_irq_enable(irq);
80005d9c:	fff78513          	addi	a0,a5,-1
80005da0:	4d8000ef          	jal	ra,80006278 <riscv_plic_irq_enable>
}
80005da4:	00c12083          	lw	ra,12(sp)
80005da8:	01010113          	addi	sp,sp,16
80005dac:	00008067          	ret

80005db0 <z_riscv_irq_priority_set>:
80005db0:	00308013          	addi	zero,ra,3
80005db4:	00855513          	srli	a0,a0,0x8
80005db8:	0ff57793          	zext.b	a5,a0
80005dbc:	00079463          	bnez	a5,80005dc4 <z_riscv_irq_priority_set+0x14>
80005dc0:	00008067          	ret
{
80005dc4:	ff010113          	addi	sp,sp,-16
80005dc8:	00112623          	sw	ra,12(sp)
		riscv_plic_set_priority(irq, prio);
80005dcc:	fff50513          	addi	a0,a0,-1
80005dd0:	4e0000ef          	jal	ra,800062b0 <riscv_plic_set_priority>
}
80005dd4:	00c12083          	lw	ra,12(sp)
80005dd8:	01010113          	addi	sp,sp,16
80005ddc:	00008067          	ret

80005de0 <soc_interrupt_init>:
80005de0:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
80005de4:	300477f3          	csrrci	a5,mstatus,8
	__asm__ volatile ("csrwi mie, 0\n"
80005de8:	30405073          	csrwi	mie,0
80005dec:	34405073          	csrwi	mip,0
}
80005df0:	00008067          	ret

80005df4 <sys_trace_idle>:
80005df4:	00308013          	addi	zero,ra,3
void sys_trace_idle(void) {}
80005df8:	00008067          	ret

80005dfc <bad_stack_pointer>:
80005dfc:	00308013          	addi	zero,ra,3
}
80005e00:	00000513          	li	a0,0
80005e04:	00008067          	ret

80005e08 <z_riscv_fatal_error>:
80005e08:	00308013          	addi	zero,ra,3
{
80005e0c:	ff010113          	addi	sp,sp,-16
80005e10:	00112623          	sw	ra,12(sp)
	z_fatal_error(reason, esf);
80005e14:	515000ef          	jal	ra,80006b28 <z_fatal_error>

80005e18 <_Fault>:
80005e18:	00308013          	addi	zero,ra,3
{
80005e1c:	ff010113          	addi	sp,sp,-16
80005e20:	00112623          	sw	ra,12(sp)
80005e24:	00812423          	sw	s0,8(sp)
80005e28:	00050413          	mv	s0,a0
	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
80005e2c:	342027f3          	csrr	a5,mcause
	__asm__ volatile("csrr %0, mtval" : "=r" (mtval));
80005e30:	343027f3          	csrr	a5,mtval
	if (bad_stack_pointer(esf)) {
80005e34:	fc9ff0ef          	jal	ra,80005dfc <bad_stack_pointer>
80005e38:	00050463          	beqz	a0,80005e40 <_Fault+0x28>
		reason = K_ERR_STACK_CHK_FAIL;
80005e3c:	00200513          	li	a0,2
	z_riscv_fatal_error(reason, esf);
80005e40:	00040593          	mv	a1,s0
80005e44:	fc5ff0ef          	jal	ra,80005e08 <z_riscv_fatal_error>

80005e48 <z_irq_spurious>:
80005e48:	00308013          	addi	zero,ra,3
{
80005e4c:	ff010113          	addi	sp,sp,-16
80005e50:	00112623          	sw	ra,12(sp)
	__asm__ volatile("csrr %0, mcause" : "=r" (mcause));
80005e54:	342027f3          	csrr	a5,mcause
	z_riscv_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
80005e58:	00000593          	li	a1,0
80005e5c:	00100513          	li	a0,1
80005e60:	fa9ff0ef          	jal	ra,80005e08 <z_riscv_fatal_error>

80005e64 <_PrepC>:
80005e64:	00308013          	addi	zero,ra,3
{
80005e68:	ff010113          	addi	sp,sp,-16
80005e6c:	00112623          	sw	ra,12(sp)
	z_bss_zero();
80005e70:	6d1000ef          	jal	ra,80006d40 <z_bss_zero>
	soc_interrupt_init();
80005e74:	f6dff0ef          	jal	ra,80005de0 <soc_interrupt_init>
	z_cstart();
80005e78:	034010ef          	jal	ra,80006eac <z_cstart>

80005e7c <__initialize>:
/*
 * Remainder of asm-land initialization code before we can jump into
 * the C domain
 */
SECTION_FUNC(TEXT, __initialize)
	csrr a0, mhartid
80005e7c:	f1402573          	csrr	a0,mhartid
	beqz a0, boot_first_core
80005e80:	00050a63          	beqz	a0,80005e94 <boot_first_core>

	li t0, CONFIG_MP_NUM_CPUS
80005e84:	00100293          	li	t0,1
	blt a0, t0, boot_secondary_core
80005e88:	04554263          	blt	a0,t0,80005ecc <boot_secondary_core>

80005e8c <loop_unconfigured_cores>:

loop_unconfigured_cores:
	wfi
80005e8c:	10500073          	wfi
	j loop_unconfigured_cores
80005e90:	ffdff06f          	j	80005e8c <loop_unconfigured_cores>

80005e94 <boot_first_core>:
	fscsr zero
#endif

#ifdef CONFIG_INIT_STACKS
	/* Pre-populate all bytes in z_interrupt_stacks with 0xAA */
	la t0, z_interrupt_stacks
80005e94:	00004297          	auipc	t0,0x4
80005e98:	3ec28293          	addi	t0,t0,1004 # 8000a280 <z_interrupt_stacks>
	li t1, __z_interrupt_stack_SIZEOF
80005e9c:	00001337          	lui	t1,0x1
	add t1, t1, t0
80005ea0:	00530333          	add	t1,t1,t0

	/* Populate z_interrupt_stacks with 0xaaaaaaaa */
	li t2, 0xaaaaaaaa
80005ea4:	aaaab3b7          	lui	t2,0xaaaab
80005ea8:	aaa38393          	addi	t2,t2,-1366 # aaaaaaaa <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xaaaaaaab>

80005eac <aa_loop>:
aa_loop:
	sw t2, 0x00(t0)
80005eac:	0072a023          	sw	t2,0(t0)
	addi t0, t0, 4
80005eb0:	00428293          	addi	t0,t0,4
	blt t0, t1, aa_loop
80005eb4:	fe62cce3          	blt	t0,t1,80005eac <aa_loop>

	/*
	 * Initially, setup stack pointer to
	 * z_interrupt_stacks + __z_interrupt_stack_SIZEOF
	 */
	la sp, z_interrupt_stacks
80005eb8:	00004117          	auipc	sp,0x4
80005ebc:	3c810113          	addi	sp,sp,968 # 8000a280 <z_interrupt_stacks>
	li t0, __z_interrupt_stack_SIZEOF
80005ec0:	000012b7          	lui	t0,0x1
	add sp, sp, t0
80005ec4:	00510133          	add	sp,sp,t0

	/*
	 * Jump into C domain. _PrepC zeroes BSS, copies rw data into RAM,
	 * and then enters kernel z_cstart
	 */
	call _PrepC
80005ec8:	f9dff0ef          	jal	ra,80005e64 <_PrepC>

80005ecc <boot_secondary_core>:

boot_secondary_core:
	la t0, riscv_cpu_wake_flag
80005ecc:	00004297          	auipc	t0,0x4
80005ed0:	ec028293          	addi	t0,t0,-320 # 80009d8c <riscv_cpu_wake_flag>
	lr t0, 0(t0)
80005ed4:	0002a283          	lw	t0,0(t0)
	bne a0, t0, boot_secondary_core
80005ed8:	fe551ae3          	bne	a0,t0,80005ecc <boot_secondary_core>

	/* Set up stack */
	la t0, riscv_cpu_sp
80005edc:	00004297          	auipc	t0,0x4
80005ee0:	eac28293          	addi	t0,t0,-340 # 80009d88 <riscv_cpu_sp>
	lr sp, 0(t0)
80005ee4:	0002a103          	lw	sp,0(t0)

	la t0, riscv_cpu_wake_flag
80005ee8:	00004297          	auipc	t0,0x4
80005eec:	ea428293          	addi	t0,t0,-348 # 80009d8c <riscv_cpu_wake_flag>
	sr zero, 0(t0)
80005ef0:	0002a023          	sw	zero,0(t0)
	j z_riscv_secondary_cpu_init
80005ef4:	07c0006f          	j	80005f70 <z_riscv_secondary_cpu_init>

80005ef8 <z_riscv_switch>:

/* void z_riscv_switch(k_thread_t *switch_to, k_thread_t *switch_from) */
SECTION_FUNC(TEXT, z_riscv_switch)

	/* Save the old thread's callee-saved registers */
	DO_CALLEE_SAVED(sr, a1)
80005ef8:	0215aa23          	sw	ra,52(a1)
80005efc:	0285ac23          	sw	s0,56(a1)
80005f00:	0295ae23          	sw	s1,60(a1)
80005f04:	0525a023          	sw	s2,64(a1)
80005f08:	0535a223          	sw	s3,68(a1)
80005f0c:	0545a423          	sw	s4,72(a1)
80005f10:	0555a623          	sw	s5,76(a1)
80005f14:	0565a823          	sw	s6,80(a1)
80005f18:	0575aa23          	sw	s7,84(a1)
80005f1c:	0585ac23          	sw	s8,88(a1)
80005f20:	0595ae23          	sw	s9,92(a1)
80005f24:	07a5a023          	sw	s10,96(a1)
80005f28:	07b5a223          	sw	s11,100(a1)
	DO_FP_CALLEE_SAVED(fsr, a1)
skip_store_fp_callee_saved:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Save the old thread's stack pointer */
	sr sp, _thread_offset_to_sp(a1)
80005f2c:	0225a823          	sw	sp,48(a1)

	/* Set thread->switch_handle = thread to mark completion */
	sr a1, ___thread_t_switch_handle_OFFSET(a1)
80005f30:	06b5ae23          	sw	a1,124(a1)

	/* Get the new thread's stack pointer */
	lr sp, _thread_offset_to_sp(a0)
80005f34:	03052103          	lw	sp,48(a0)
	call z_thread_mark_switched_in
	mv a0, s0
#endif

	/* Restore the new thread's callee-saved registers */
	DO_CALLEE_SAVED(lr, a0)
80005f38:	03452083          	lw	ra,52(a0)
80005f3c:	03852403          	lw	s0,56(a0)
80005f40:	03c52483          	lw	s1,60(a0)
80005f44:	04052903          	lw	s2,64(a0)
80005f48:	04452983          	lw	s3,68(a0)
80005f4c:	04852a03          	lw	s4,72(a0)
80005f50:	04c52a83          	lw	s5,76(a0)
80005f54:	05052b03          	lw	s6,80(a0)
80005f58:	05452b83          	lw	s7,84(a0)
80005f5c:	05852c03          	lw	s8,88(a0)
80005f60:	05c52c83          	lw	s9,92(a0)
80005f64:	06052d03          	lw	s10,96(a0)
80005f68:	06452d83          	lw	s11,100(a0)
	csrc mstatus, t1
1:
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

	/* Return to arch_switch() or _irq_wrapper() */
	ret
80005f6c:	00008067          	ret

80005f70 <z_riscv_secondary_cpu_init>:
80005f70:	00308013          	addi	zero,ra,3
{
80005f74:	ff010113          	addi	sp,sp,-16
80005f78:	00112623          	sw	ra,12(sp)
80005f7c:	00812423          	sw	s0,8(sp)
80005f80:	00050413          	mv	s0,a0
	soc_interrupt_init();
80005f84:	e5dff0ef          	jal	ra,80005de0 <soc_interrupt_init>
	riscv_cpu_init[cpu_num].fn(riscv_cpu_init[cpu_num].arg);
80005f88:	8000a7b7          	lui	a5,0x8000a
80005f8c:	00341413          	slli	s0,s0,0x3
80005f90:	d9078793          	addi	a5,a5,-624 # 80009d90 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d91>
80005f94:	008787b3          	add	a5,a5,s0
80005f98:	0007a703          	lw	a4,0(a5)
80005f9c:	0047a503          	lw	a0,4(a5)
80005fa0:	000700e7          	jalr	a4

80005fa4 <arch_new_thread>:
80005fa4:	00308013          	addi	zero,ra,3
	stack_init = (struct __esf *)Z_STACK_PTR_ALIGN(
80005fa8:	fb060613          	addi	a2,a2,-80
 * @param ptr Proposed stack pointer address
 * @return Properly aligned stack pointer address
 */
static inline char *z_stack_ptr_align(char *ptr)
{
	return (char *)ROUND_DOWN(ptr, ARCH_STACK_PTR_ALIGN);
80005fac:	ff067613          	andi	a2,a2,-16
	stack_init->a0 = (unsigned long)entry;
80005fb0:	02d62023          	sw	a3,32(a2)
	stack_init->a1 = (unsigned long)p1;
80005fb4:	02e62223          	sw	a4,36(a2)
	stack_init->a2 = (unsigned long)p2;
80005fb8:	02f62423          	sw	a5,40(a2)
	stack_init->a3 = (unsigned long)p3;
80005fbc:	03062623          	sw	a6,44(a2)
	stack_init->mstatus = MSTATUS_DEF_RESTORE;
80005fc0:	000027b7          	lui	a5,0x2
80005fc4:	88078793          	addi	a5,a5,-1920 # 1880 <CONFIG_ISR_STACK_SIZE+0x880>
80005fc8:	04f62223          	sw	a5,68(a2)
		stack_init->mepc = (unsigned long)z_thread_entry;
80005fcc:	800057b7          	lui	a5,0x80005
80005fd0:	bc478793          	addi	a5,a5,-1084 # 80004bc4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80004bc5>
80005fd4:	04f62023          	sw	a5,64(a2)
	thread->callee_saved.sp = (unsigned long)stack_init;
80005fd8:	02c52823          	sw	a2,48(a0)
	thread->callee_saved.ra = (unsigned long)z_riscv_thread_start;
80005fdc:	800007b7          	lui	a5,0x80000
80005fe0:	15c78793          	addi	a5,a5,348 # 8000015c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000015d>
80005fe4:	02f52a23          	sw	a5,52(a0)
	thread->switch_handle = thread;
80005fe8:	06a52e23          	sw	a0,124(a0)
}
80005fec:	00008067          	ret

80005ff0 <malloc_prepare>:
80005ff0:	00308013          	addi	zero,ra,3
}
80005ff4:	00000513          	li	a0,0
80005ff8:	00008067          	ret

80005ffc <_stdout_hook_default>:
80005ffc:	00308013          	addi	zero,ra,3
}
80006000:	fff00513          	li	a0,-1
80006004:	00008067          	ret

80006008 <__stdout_hook_install>:
80006008:	00308013          	addi	zero,ra,3
	_stdout_hook = hook;
8000600c:	82a1a023          	sw	a0,-2016(gp) # 8000cf60 <_stdout_hook>
}
80006010:	00008067          	ret

80006014 <z_impl_zephyr_write_stdout>:
80006014:	00308013          	addi	zero,ra,3
{
80006018:	fe010113          	addi	sp,sp,-32
8000601c:	00112e23          	sw	ra,28(sp)
80006020:	00812c23          	sw	s0,24(sp)
80006024:	00912a23          	sw	s1,20(sp)
80006028:	01212823          	sw	s2,16(sp)
8000602c:	01312623          	sw	s3,12(sp)
80006030:	00050993          	mv	s3,a0
80006034:	00058913          	mv	s2,a1
	for (i = 0; i < nbytes; i++) {
80006038:	00000413          	li	s0,0
8000603c:	0140006f          	j	80006050 <z_impl_zephyr_write_stdout+0x3c>
		_stdout_hook(*(buf + i));
80006040:	8201a783          	lw	a5,-2016(gp) # 8000cf60 <_stdout_hook>
80006044:	0004c503          	lbu	a0,0(s1)
80006048:	000780e7          	jalr	a5
	for (i = 0; i < nbytes; i++) {
8000604c:	00140413          	addi	s0,s0,1
80006050:	03245263          	bge	s0,s2,80006074 <z_impl_zephyr_write_stdout+0x60>
		if (*(buf + i) == '\n') {
80006054:	008984b3          	add	s1,s3,s0
80006058:	0004c703          	lbu	a4,0(s1)
8000605c:	00a00793          	li	a5,10
80006060:	fef710e3          	bne	a4,a5,80006040 <z_impl_zephyr_write_stdout+0x2c>
			_stdout_hook('\r');
80006064:	8201a783          	lw	a5,-2016(gp) # 8000cf60 <_stdout_hook>
80006068:	00d00513          	li	a0,13
8000606c:	000780e7          	jalr	a5
80006070:	fd1ff06f          	j	80006040 <z_impl_zephyr_write_stdout+0x2c>
}
80006074:	00090513          	mv	a0,s2
80006078:	01c12083          	lw	ra,28(sp)
8000607c:	01812403          	lw	s0,24(sp)
80006080:	01412483          	lw	s1,20(sp)
80006084:	01012903          	lw	s2,16(sp)
80006088:	00c12983          	lw	s3,12(sp)
8000608c:	02010113          	addi	sp,sp,32
80006090:	00008067          	ret

80006094 <_write>:
80006094:	00308013          	addi	zero,ra,3
{
80006098:	ff010113          	addi	sp,sp,-16
8000609c:	00112623          	sw	ra,12(sp)
800060a0:	00058513          	mv	a0,a1
800060a4:	00060593          	mv	a1,a2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
800060a8:	f6dff0ef          	jal	ra,80006014 <z_impl_zephyr_write_stdout>
}
800060ac:	00c12083          	lw	ra,12(sp)
800060b0:	01010113          	addi	sp,sp,16
800060b4:	00008067          	ret

800060b8 <_exit>:
800060b8:	00308013          	addi	zero,ra,3
{
800060bc:	ff010113          	addi	sp,sp,-16
800060c0:	00112623          	sw	ra,12(sp)
	_write(1, "exit\n", 5);
800060c4:	00500613          	li	a2,5
800060c8:	8000a5b7          	lui	a1,0x8000a
800060cc:	c5458593          	addi	a1,a1,-940 # 80009c54 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009c55>
800060d0:	00100513          	li	a0,1
800060d4:	fc1ff0ef          	jal	ra,80006094 <_write>
	while (1) {
800060d8:	0000006f          	j	800060d8 <_exit+0x20>

800060dc <_sbrk>:
800060dc:	00308013          	addi	zero,ra,3
{
800060e0:	00050713          	mv	a4,a0
	ptr = ((char *)HEAP_BASE) + heap_sz;
800060e4:	8000a7b7          	lui	a5,0x8000a
800060e8:	d987a683          	lw	a3,-616(a5) # 80009d98 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d99>
800060ec:	84818793          	addi	a5,gp,-1976 # 8000cf88 <__data_region_end>
800060f0:	00f68533          	add	a0,a3,a5
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
800060f4:	00d70733          	add	a4,a4,a3
800060f8:	c00006b7          	lui	a3,0xc0000
800060fc:	40f687b3          	sub	a5,a3,a5
80006100:	00f77863          	bgeu	a4,a5,80006110 <_sbrk+0x34>
		heap_sz += count;
80006104:	8000a7b7          	lui	a5,0x8000a
80006108:	d8e7ac23          	sw	a4,-616(a5) # 80009d98 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d99>
		ret = ptr;
8000610c:	00008067          	ret
		ret = (void *)-1;
80006110:	fff00513          	li	a0,-1
}
80006114:	00008067          	ret

80006118 <__retarget_lock_acquire_recursive>:
80006118:	00308013          	addi	zero,ra,3
{
8000611c:	ff010113          	addi	sp,sp,-16
80006120:	00112623          	sw	ra,12(sp)
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
80006124:	fff00593          	li	a1,-1
80006128:	fff00613          	li	a2,-1
8000612c:	0c4010ef          	jal	ra,800071f0 <z_impl_k_mutex_lock>
}
80006130:	00c12083          	lw	ra,12(sp)
80006134:	01010113          	addi	sp,sp,16
80006138:	00008067          	ret

8000613c <__retarget_lock_release_recursive>:
8000613c:	00308013          	addi	zero,ra,3
{
80006140:	ff010113          	addi	sp,sp,-16
80006144:	00112623          	sw	ra,12(sp)
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
80006148:	228010ef          	jal	ra,80007370 <z_impl_k_mutex_unlock>
}
8000614c:	00c12083          	lw	ra,12(sp)
80006150:	01010113          	addi	sp,sp,16
80006154:	00008067          	ret

80006158 <__chk_fail>:
80006158:	00308013          	addi	zero,ra,3
{
8000615c:	ff010113          	addi	sp,sp,-16
80006160:	00112623          	sw	ra,12(sp)
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
80006164:	01d00613          	li	a2,29
80006168:	8000a5b7          	lui	a1,0x8000a
8000616c:	c5c58593          	addi	a1,a1,-932 # 80009c5c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009c5d>
80006170:	00200513          	li	a0,2
80006174:	f21ff0ef          	jal	ra,80006094 <_write>
	return a0;
}

static inline uintptr_t arch_syscall_invoke1(uintptr_t arg1, uintptr_t call_id)
{
	register unsigned long a0 __asm__ ("a0") = arg1;
80006178:	00300513          	li	a0,3
	register unsigned long t0 __asm__ ("t0") = call_id;
8000617c:	00000293          	li	t0,0

	__asm__ volatile ("ecall"
80006180:	00000073          	ecall

80006184 <plic_init>:
80006184:	00308013          	addi	zero,ra,3
{
80006188:	ff010113          	addi	sp,sp,-16
8000618c:	00112623          	sw	ra,12(sp)
	for (i = 0; i < PLIC_EN_SIZE; i++) {
80006190:	00000793          	li	a5,0
	volatile uint32_t *en = (volatile uint32_t *)PLIC_IRQ_EN;
80006194:	0c002737          	lui	a4,0xc002
	for (i = 0; i < PLIC_EN_SIZE; i++) {
80006198:	0100006f          	j	800061a8 <plic_init+0x24>
		*en = 0U;
8000619c:	00072023          	sw	zero,0(a4) # c002000 <CONFIG_SRAM_SIZE+0xbf02000>
		en++;
800061a0:	00470713          	addi	a4,a4,4
	for (i = 0; i < PLIC_EN_SIZE; i++) {
800061a4:	00178793          	addi	a5,a5,1
800061a8:	00100693          	li	a3,1
800061ac:	fef6d8e3          	bge	a3,a5,8000619c <plic_init+0x18>
	for (i = 0; i < PLIC_IRQS; i++) {
800061b0:	00000793          	li	a5,0
	volatile uint32_t *prio = (volatile uint32_t *)PLIC_PRIO;
800061b4:	0c000737          	lui	a4,0xc000
800061b8:	0100006f          	j	800061c8 <plic_init+0x44>
		*prio = 0U;
800061bc:	00072023          	sw	zero,0(a4) # c000000 <CONFIG_SRAM_SIZE+0xbf00000>
		prio++;
800061c0:	00470713          	addi	a4,a4,4
	for (i = 0; i < PLIC_IRQS; i++) {
800061c4:	00178793          	addi	a5,a5,1
800061c8:	03300693          	li	a3,51
800061cc:	fef6d8e3          	bge	a3,a5,800061bc <plic_init+0x38>
	regs->threshold_prio = 0U;
800061d0:	0c2007b7          	lui	a5,0xc200
800061d4:	0007a023          	sw	zero,0(a5) # c200000 <CONFIG_SRAM_SIZE+0xc100000>
	IRQ_CONNECT(RISCV_MACHINE_EXT_IRQ,
800061d8:	00000613          	li	a2,0
800061dc:	00000593          	li	a1,0
800061e0:	00b00513          	li	a0,11
800061e4:	bcdff0ef          	jal	ra,80005db0 <z_riscv_irq_priority_set>
	irq_enable(RISCV_MACHINE_EXT_IRQ);
800061e8:	00b00513          	li	a0,11
800061ec:	b89ff0ef          	jal	ra,80005d74 <arch_irq_enable>
}
800061f0:	00000513          	li	a0,0
800061f4:	00c12083          	lw	ra,12(sp)
800061f8:	01010113          	addi	sp,sp,16
800061fc:	00008067          	ret

80006200 <plic_irq_handler>:
80006200:	00308013          	addi	zero,ra,3
{
80006204:	ff010113          	addi	sp,sp,-16
80006208:	00112623          	sw	ra,12(sp)
8000620c:	00812423          	sw	s0,8(sp)
	irq = regs->claim_complete;
80006210:	0c2007b7          	lui	a5,0xc200
80006214:	0047a403          	lw	s0,4(a5) # c200004 <CONFIG_SRAM_SIZE+0xc100004>
	save_irq = irq;
80006218:	8000a7b7          	lui	a5,0x8000a
8000621c:	d887ae23          	sw	s0,-612(a5) # 80009d9c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d9d>
	if (irq == 0U || irq >= PLIC_IRQS)
80006220:	fff40713          	addi	a4,s0,-1
80006224:	03200793          	li	a5,50
80006228:	04e7e263          	bltu	a5,a4,8000626c <plic_irq_handler+0x6c>
	irq += CONFIG_2ND_LVL_ISR_TBL_OFFSET;
8000622c:	00c40413          	addi	s0,s0,12
	ite->isr(ite->arg);
80006230:	800097b7          	lui	a5,0x80009
80006234:	00341413          	slli	s0,s0,0x3
80006238:	a0078793          	addi	a5,a5,-1536 # 80008a00 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008a01>
8000623c:	008787b3          	add	a5,a5,s0
80006240:	0047a703          	lw	a4,4(a5)
80006244:	0007a503          	lw	a0,0(a5)
80006248:	000700e7          	jalr	a4
	regs->claim_complete = save_irq;
8000624c:	8000a7b7          	lui	a5,0x8000a
80006250:	d9c7a703          	lw	a4,-612(a5) # 80009d9c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d9d>
80006254:	0c2007b7          	lui	a5,0xc200
80006258:	00e7a223          	sw	a4,4(a5) # c200004 <CONFIG_SRAM_SIZE+0xc100004>
}
8000625c:	00c12083          	lw	ra,12(sp)
80006260:	00812403          	lw	s0,8(sp)
80006264:	01010113          	addi	sp,sp,16
80006268:	00008067          	ret
		z_irq_spurious(NULL);
8000626c:	00000513          	li	a0,0
80006270:	bd9ff0ef          	jal	ra,80005e48 <z_irq_spurious>
80006274:	fb9ff06f          	j	8000622c <plic_irq_handler+0x2c>

80006278 <riscv_plic_irq_enable>:
80006278:	00308013          	addi	zero,ra,3
8000627c:	30047773          	csrrci	a4,mstatus,8
	en += (irq >> 5);
80006280:	00555693          	srli	a3,a0,0x5
80006284:	00269693          	slli	a3,a3,0x2
80006288:	0c0027b7          	lui	a5,0xc002
8000628c:	00d787b3          	add	a5,a5,a3
	*en |= (1 << (irq & 31));
80006290:	0007a683          	lw	a3,0(a5) # c002000 <CONFIG_SRAM_SIZE+0xbf02000>
80006294:	00100613          	li	a2,1
80006298:	00a61633          	sll	a2,a2,a0
8000629c:	00c6e6b3          	or	a3,a3,a2
800062a0:	00d7a023          	sw	a3,0(a5)
			  :
			  : "r" (key & MSTATUS_IEN)
800062a4:	00877793          	andi	a5,a4,8
	__asm__ volatile ("csrs mstatus, %0"
800062a8:	3007a073          	csrs	mstatus,a5
}
800062ac:	00008067          	ret

800062b0 <riscv_plic_set_priority>:
800062b0:	00308013          	addi	zero,ra,3
	if (priority > PLIC_MAX_PRIO)
800062b4:	00700793          	li	a5,7
800062b8:	00b7f463          	bgeu	a5,a1,800062c0 <riscv_plic_set_priority+0x10>
		priority = PLIC_MAX_PRIO;
800062bc:	00700593          	li	a1,7
	prio += irq;
800062c0:	00251513          	slli	a0,a0,0x2
800062c4:	0c0007b7          	lui	a5,0xc000
800062c8:	00a787b3          	add	a5,a5,a0
	*prio = priority;
800062cc:	00b7a023          	sw	a1,0(a5) # c000000 <CONFIG_SRAM_SIZE+0xbf00000>
}
800062d0:	00008067          	ret

800062d4 <console_out>:
800062d4:	00308013          	addi	zero,ra,3
{
800062d8:	ff010113          	addi	sp,sp,-16
800062dc:	00112623          	sw	ra,12(sp)
800062e0:	00812423          	sw	s0,8(sp)
800062e4:	00050413          	mv	s0,a0
	if ('\n' == c) {
800062e8:	00a00793          	li	a5,10
800062ec:	02f50a63          	beq	a0,a5,80006320 <console_out+0x4c>
	uart_poll_out(uart_console_dev, c);
800062f0:	0ff47593          	zext.b	a1,s0
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
800062f4:	80009537          	lui	a0,0x80009
800062f8:	9e850793          	addi	a5,a0,-1560 # 800089e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800089e9>
800062fc:	0087a783          	lw	a5,8(a5)
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
80006300:	0047a783          	lw	a5,4(a5)
80006304:	9e850513          	addi	a0,a0,-1560
80006308:	000780e7          	jalr	a5
}
8000630c:	00040513          	mv	a0,s0
80006310:	00c12083          	lw	ra,12(sp)
80006314:	00812403          	lw	s0,8(sp)
80006318:	01010113          	addi	sp,sp,16
8000631c:	00008067          	ret
	const struct uart_driver_api *api =
80006320:	80009537          	lui	a0,0x80009
80006324:	9e850793          	addi	a5,a0,-1560 # 800089e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800089e9>
80006328:	0087a783          	lw	a5,8(a5)
	api->poll_out(dev, out_char);
8000632c:	0047a783          	lw	a5,4(a5)
80006330:	00d00593          	li	a1,13
80006334:	9e850513          	addi	a0,a0,-1560
80006338:	000780e7          	jalr	a5
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
8000633c:	fb5ff06f          	j	800062f0 <console_out+0x1c>

80006340 <uart_console_hook_install>:
80006340:	00308013          	addi	zero,ra,3
{
80006344:	ff010113          	addi	sp,sp,-16
80006348:	00112623          	sw	ra,12(sp)
8000634c:	00812423          	sw	s0,8(sp)
	__stdout_hook_install(console_out);
80006350:	80006437          	lui	s0,0x80006
80006354:	2d440513          	addi	a0,s0,724 # 800062d4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800062d5>
80006358:	cb1ff0ef          	jal	ra,80006008 <__stdout_hook_install>
	__printk_hook_install(console_out);
8000635c:	2d440513          	addi	a0,s0,724
80006360:	fe4fe0ef          	jal	ra,80004b44 <__printk_hook_install>
}
80006364:	00c12083          	lw	ra,12(sp)
80006368:	00812403          	lw	s0,8(sp)
8000636c:	01010113          	addi	sp,sp,16
80006370:	00008067          	ret

80006374 <uart_console_init>:
80006374:	00308013          	addi	zero,ra,3
{
80006378:	ff010113          	addi	sp,sp,-16
8000637c:	00112623          	sw	ra,12(sp)
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
80006380:	80009537          	lui	a0,0x80009
80006384:	9e850513          	addi	a0,a0,-1560 # 800089e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800089e9>
80006388:	75c000ef          	jal	ra,80006ae4 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
8000638c:	00050c63          	beqz	a0,800063a4 <uart_console_init+0x30>
	uart_console_hook_install();
80006390:	fb1ff0ef          	jal	ra,80006340 <uart_console_hook_install>
	return 0;
80006394:	00000513          	li	a0,0
}
80006398:	00c12083          	lw	ra,12(sp)
8000639c:	01010113          	addi	sp,sp,16
800063a0:	00008067          	ret
		return -ENODEV;
800063a4:	fed00513          	li	a0,-19
800063a8:	ff1ff06f          	j	80006398 <uart_console_init+0x24>

800063ac <clock_control_get_rate>:
800063ac:	00308013          	addi	zero,ra,3
 */
static inline int clock_control_get_rate(const struct device *dev,
					 clock_control_subsys_t sys,
					 uint32_t *rate)
{
	const struct clock_control_driver_api *api =
800063b0:	00852783          	lw	a5,8(a0)
		(const struct clock_control_driver_api *)dev->api;

	if (api->get_rate == NULL) {
800063b4:	00c7a783          	lw	a5,12(a5)
800063b8:	00078e63          	beqz	a5,800063d4 <clock_control_get_rate+0x28>
{
800063bc:	ff010113          	addi	sp,sp,-16
800063c0:	00112623          	sw	ra,12(sp)
		return -ENOSYS;
	}

	return api->get_rate(dev, sys, rate);
800063c4:	000780e7          	jalr	a5
}
800063c8:	00c12083          	lw	ra,12(sp)
800063cc:	01010113          	addi	sp,sp,16
800063d0:	00008067          	ret
		return -ENOSYS;
800063d4:	fa800513          	li	a0,-88
}
800063d8:	00008067          	ret

800063dc <set_baud_rate>:
800063dc:	00308013          	addi	zero,ra,3
	struct uart_ns16550_dev_data * const dev_data = dev->data;
800063e0:	01052703          	lw	a4,16(a0)
	if ((baud_rate != 0U) && (pclk != 0U)) {
800063e4:	08058263          	beqz	a1,80006468 <set_baud_rate+0x8c>
800063e8:	08060063          	beqz	a2,80006468 <set_baud_rate+0x8c>
		divisor = (pclk / (baud_rate << 4));
800063ec:	00459793          	slli	a5,a1,0x4
800063f0:	02f65633          	divu	a2,a2,a5
	return DEVICE_MMIO_GET(dev);
800063f4:	00452783          	lw	a5,4(a0)
800063f8:	0007a803          	lw	a6,0(a5)
	return config->reg_interval;
800063fc:	0107c683          	lbu	a3,16(a5)
		lcr_cache = INBYTE(LCR(dev));
80006400:	00169793          	slli	a5,a3,0x1
80006404:	00d787b3          	add	a5,a5,a3
80006408:	010787b3          	add	a5,a5,a6
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
8000640c:	0007c683          	lbu	a3,0(a5)
80006410:	0ff6f813          	zext.b	a6,a3
		OUTBYTE(LCR(dev), LCR_DLAB | lcr_cache);
80006414:	0806e693          	ori	a3,a3,128
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
80006418:	00d78023          	sb	a3,0(a5)
		OUTBYTE(BRDL(dev), (unsigned char)(divisor & 0xff));
8000641c:	0ff67693          	zext.b	a3,a2
	const struct uart_ns16550_device_config *config = dev->config;
80006420:	00452783          	lw	a5,4(a0)
	return DEVICE_MMIO_GET(dev);
80006424:	0007a783          	lw	a5,0(a5)
80006428:	00d78023          	sb	a3,0(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
8000642c:	00865613          	srli	a2,a2,0x8
80006430:	0ff67613          	zext.b	a2,a2
	return DEVICE_MMIO_GET(dev);
80006434:	00452783          	lw	a5,4(a0)
80006438:	0007a683          	lw	a3,0(a5)
	return config->reg_interval;
8000643c:	0107c783          	lbu	a5,16(a5)
		OUTBYTE(BRDH(dev), (unsigned char)((divisor >> 8) & 0xff));
80006440:	00d787b3          	add	a5,a5,a3
80006444:	00c78023          	sb	a2,0(a5)
	return DEVICE_MMIO_GET(dev);
80006448:	00452783          	lw	a5,4(a0)
8000644c:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
80006450:	0107c683          	lbu	a3,16(a5)
		OUTBYTE(LCR(dev), lcr_cache);
80006454:	00169793          	slli	a5,a3,0x1
80006458:	00d787b3          	add	a5,a5,a3
8000645c:	00c787b3          	add	a5,a5,a2
80006460:	01078023          	sb	a6,0(a5)
		dev_data->uart_config.baudrate = baud_rate;
80006464:	00b72023          	sw	a1,0(a4)
}
80006468:	00008067          	ret

8000646c <uart_ns16550_config_get>:
8000646c:	00308013          	addi	zero,ra,3
	struct uart_ns16550_dev_data *data = dev->data;
80006470:	01052783          	lw	a5,16(a0)
	cfg->baudrate = data->uart_config.baudrate;
80006474:	0007a703          	lw	a4,0(a5)
80006478:	00e5a023          	sw	a4,0(a1)
	cfg->parity = data->uart_config.parity;
8000647c:	0047c703          	lbu	a4,4(a5)
80006480:	00e58223          	sb	a4,4(a1)
	cfg->stop_bits = data->uart_config.stop_bits;
80006484:	0057c703          	lbu	a4,5(a5)
80006488:	00e582a3          	sb	a4,5(a1)
	cfg->data_bits = data->uart_config.data_bits;
8000648c:	0067c703          	lbu	a4,6(a5)
80006490:	00e58323          	sb	a4,6(a1)
	cfg->flow_ctrl = data->uart_config.flow_ctrl;
80006494:	0077c783          	lbu	a5,7(a5)
80006498:	00f583a3          	sb	a5,7(a1)
}
8000649c:	00000513          	li	a0,0
800064a0:	00008067          	ret

800064a4 <uart_ns16550_poll_in>:
800064a4:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
800064a8:	30047773          	csrrci	a4,mstatus,8
	return DEVICE_MMIO_GET(dev);
800064ac:	00452783          	lw	a5,4(a0)
800064b0:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
800064b4:	0107c683          	lbu	a3,16(a5)
	if ((INBYTE(LSR(dev)) & LSR_RXRDY) != 0) {
800064b8:	00269793          	slli	a5,a3,0x2
800064bc:	00d787b3          	add	a5,a5,a3
800064c0:	00c787b3          	add	a5,a5,a2
	return *(volatile uint8_t *)addr;
800064c4:	0007c783          	lbu	a5,0(a5)
800064c8:	0017f793          	andi	a5,a5,1
800064cc:	00078e63          	beqz	a5,800064e8 <uart_ns16550_poll_in+0x44>
800064d0:	00064783          	lbu	a5,0(a2)
		*c = INBYTE(RDR(dev));
800064d4:	00f58023          	sb	a5,0(a1)
		ret = 0;
800064d8:	00000513          	li	a0,0
	__asm__ volatile ("csrs mstatus, %0"
800064dc:	00877793          	andi	a5,a4,8
800064e0:	3007a073          	csrs	mstatus,a5
}
800064e4:	00008067          	ret
	int ret = -1;
800064e8:	fff00513          	li	a0,-1
800064ec:	ff1ff06f          	j	800064dc <uart_ns16550_poll_in+0x38>

800064f0 <uart_ns16550_poll_out>:
800064f0:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
800064f4:	30047673          	csrrci	a2,mstatus,8
	return DEVICE_MMIO_GET(dev);
800064f8:	00452783          	lw	a5,4(a0)
800064fc:	0007a683          	lw	a3,0(a5)
	return config->reg_interval;
80006500:	0107c703          	lbu	a4,16(a5)
	while ((INBYTE(LSR(dev)) & LSR_THRE) == 0) {
80006504:	00271793          	slli	a5,a4,0x2
80006508:	00e787b3          	add	a5,a5,a4
8000650c:	00d787b3          	add	a5,a5,a3
80006510:	0007c783          	lbu	a5,0(a5)
80006514:	0207f793          	andi	a5,a5,32
80006518:	fe0780e3          	beqz	a5,800064f8 <uart_ns16550_poll_out+0x8>
	*(volatile uint8_t *)addr = data;
8000651c:	00b68023          	sb	a1,0(a3) # c0000000 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0xc0000001>
	__asm__ volatile ("csrs mstatus, %0"
80006520:	00867793          	andi	a5,a2,8
80006524:	3007a073          	csrs	mstatus,a5
}
80006528:	00008067          	ret

8000652c <uart_ns16550_err_check>:
8000652c:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006530:	30047773          	csrrci	a4,mstatus,8
	return DEVICE_MMIO_GET(dev);
80006534:	00452783          	lw	a5,4(a0)
80006538:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
8000653c:	0107c683          	lbu	a3,16(a5)
	int check = (INBYTE(LSR(dev)) & LSR_EOB_MASK);
80006540:	00269793          	slli	a5,a3,0x2
80006544:	00d787b3          	add	a5,a5,a3
80006548:	00c787b3          	add	a5,a5,a2
	return *(volatile uint8_t *)addr;
8000654c:	0007c503          	lbu	a0,0(a5)
80006550:	01e57513          	andi	a0,a0,30
	__asm__ volatile ("csrs mstatus, %0"
80006554:	00877793          	andi	a5,a4,8
80006558:	3007a073          	csrs	mstatus,a5
}
8000655c:	40155513          	srai	a0,a0,0x1
80006560:	00008067          	ret

80006564 <uart_ns16550_configure>:
80006564:	00308013          	addi	zero,ra,3
{
80006568:	fd010113          	addi	sp,sp,-48
8000656c:	02112623          	sw	ra,44(sp)
80006570:	02812423          	sw	s0,40(sp)
80006574:	02912223          	sw	s1,36(sp)
80006578:	03212023          	sw	s2,32(sp)
8000657c:	01312e23          	sw	s3,28(sp)
80006580:	01412c23          	sw	s4,24(sp)
80006584:	00050413          	mv	s0,a0
80006588:	00058493          	mv	s1,a1
	struct uart_ns16550_dev_data * const dev_data = dev->data;
8000658c:	01052a03          	lw	s4,16(a0)
	const struct uart_ns16550_device_config * const dev_cfg = dev->config;
80006590:	00452983          	lw	s3,4(a0)
	uint32_t pclk = 0U;
80006594:	00012623          	sw	zero,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006598:	30047973          	csrrci	s2,mstatus,8
	if (dev_cfg->sys_clk_freq != 0U) {
8000659c:	0049a783          	lw	a5,4(s3)
800065a0:	04078063          	beqz	a5,800065e0 <uart_ns16550_configure+0x7c>
		pclk = dev_cfg->sys_clk_freq;
800065a4:	00f12623          	sw	a5,12(sp)
	set_baud_rate(dev, cfg->baudrate, pclk);
800065a8:	00c12603          	lw	a2,12(sp)
800065ac:	0004a583          	lw	a1,0(s1)
800065b0:	00040513          	mv	a0,s0
800065b4:	e29ff0ef          	jal	ra,800063dc <set_baud_rate>
	switch (cfg->data_bits) {
800065b8:	0064c783          	lbu	a5,6(s1)
800065bc:	00200713          	li	a4,2
800065c0:	0ae78463          	beq	a5,a4,80006668 <uart_ns16550_configure+0x104>
800065c4:	04f76263          	bltu	a4,a5,80006608 <uart_ns16550_configure+0xa4>
800065c8:	04078e63          	beqz	a5,80006624 <uart_ns16550_configure+0xc0>
800065cc:	00100713          	li	a4,1
800065d0:	02e79863          	bne	a5,a4,80006600 <uart_ns16550_configure+0x9c>
		uart_cfg.data_bits = LCR_CS6;
800065d4:	00100793          	li	a5,1
800065d8:	00f10523          	sb	a5,10(sp)
		break;
800065dc:	04c0006f          	j	80006628 <uart_ns16550_configure+0xc4>
		if (!device_is_ready(dev_cfg->clock_dev)) {
800065e0:	0089a503          	lw	a0,8(s3)
800065e4:	500000ef          	jal	ra,80006ae4 <z_device_is_ready>
800065e8:	18050a63          	beqz	a0,8000677c <uart_ns16550_configure+0x218>
		clock_control_get_rate(dev_cfg->clock_dev, dev_cfg->clock_subsys,
800065ec:	00c10613          	addi	a2,sp,12
800065f0:	00c9a583          	lw	a1,12(s3)
800065f4:	0089a503          	lw	a0,8(s3)
800065f8:	db5ff0ef          	jal	ra,800063ac <clock_control_get_rate>
800065fc:	fadff06f          	j	800065a8 <uart_ns16550_configure+0x44>
	switch (cfg->data_bits) {
80006600:	f7a00513          	li	a0,-134
80006604:	03c0006f          	j	80006640 <uart_ns16550_configure+0xdc>
80006608:	00300713          	li	a4,3
8000660c:	00e79863          	bne	a5,a4,8000661c <uart_ns16550_configure+0xb8>
		uart_cfg.data_bits = LCR_CS8;
80006610:	00300793          	li	a5,3
80006614:	00f10523          	sb	a5,10(sp)
		break;
80006618:	0100006f          	j	80006628 <uart_ns16550_configure+0xc4>
	switch (cfg->data_bits) {
8000661c:	f7a00513          	li	a0,-134
80006620:	0200006f          	j	80006640 <uart_ns16550_configure+0xdc>
		uart_cfg.data_bits = LCR_CS5;
80006624:	00010523          	sb	zero,10(sp)
	switch (cfg->stop_bits) {
80006628:	0054c783          	lbu	a5,5(s1)
8000662c:	00100713          	li	a4,1
80006630:	04e78263          	beq	a5,a4,80006674 <uart_ns16550_configure+0x110>
80006634:	00300713          	li	a4,3
80006638:	04e78c63          	beq	a5,a4,80006690 <uart_ns16550_configure+0x12c>
8000663c:	f7a00513          	li	a0,-134
			  : "r" (key & MSTATUS_IEN)
80006640:	00897913          	andi	s2,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80006644:	30092073          	csrs	mstatus,s2
};
80006648:	02c12083          	lw	ra,44(sp)
8000664c:	02812403          	lw	s0,40(sp)
80006650:	02412483          	lw	s1,36(sp)
80006654:	02012903          	lw	s2,32(sp)
80006658:	01c12983          	lw	s3,28(sp)
8000665c:	01812a03          	lw	s4,24(sp)
80006660:	03010113          	addi	sp,sp,48
80006664:	00008067          	ret
		uart_cfg.data_bits = LCR_CS7;
80006668:	00200793          	li	a5,2
8000666c:	00f10523          	sb	a5,10(sp)
		break;
80006670:	fb9ff06f          	j	80006628 <uart_ns16550_configure+0xc4>
		uart_cfg.stop_bits = LCR_1_STB;
80006674:	000104a3          	sb	zero,9(sp)
	switch (cfg->parity) {
80006678:	0044c783          	lbu	a5,4(s1)
8000667c:	02078063          	beqz	a5,8000669c <uart_ns16550_configure+0x138>
80006680:	00200713          	li	a4,2
80006684:	0ee78063          	beq	a5,a4,80006764 <uart_ns16550_configure+0x200>
80006688:	f7a00513          	li	a0,-134
8000668c:	fb5ff06f          	j	80006640 <uart_ns16550_configure+0xdc>
		uart_cfg.stop_bits = LCR_2_STB;
80006690:	00400793          	li	a5,4
80006694:	00f104a3          	sb	a5,9(sp)
		break;
80006698:	fe1ff06f          	j	80006678 <uart_ns16550_configure+0x114>
		uart_cfg.parity = LCR_PDIS;
8000669c:	00010423          	sb	zero,8(sp)
	dev_data->uart_config = *cfg;
800066a0:	0004a783          	lw	a5,0(s1)
800066a4:	00fa2023          	sw	a5,0(s4)
800066a8:	0044a783          	lw	a5,4(s1)
800066ac:	00fa2223          	sw	a5,4(s4)
	OUTBYTE(LCR(dev),
800066b0:	00a14783          	lbu	a5,10(sp)
800066b4:	00914683          	lbu	a3,9(sp)
800066b8:	00814703          	lbu	a4,8(sp)
800066bc:	00d7e7b3          	or	a5,a5,a3
800066c0:	00f76733          	or	a4,a4,a5
	return DEVICE_MMIO_GET(dev);
800066c4:	00442783          	lw	a5,4(s0)
800066c8:	0007a603          	lw	a2,0(a5)
	return config->reg_interval;
800066cc:	0107c683          	lbu	a3,16(a5)
	OUTBYTE(LCR(dev),
800066d0:	00169793          	slli	a5,a3,0x1
800066d4:	00d787b3          	add	a5,a5,a3
800066d8:	00c787b3          	add	a5,a5,a2
	*(volatile uint8_t *)addr = data;
800066dc:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
800066e0:	00442783          	lw	a5,4(s0)
800066e4:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
800066e8:	0107c783          	lbu	a5,16(a5)
	OUTBYTE(MDC(dev), mdc);
800066ec:	00279793          	slli	a5,a5,0x2
800066f0:	00e787b3          	add	a5,a5,a4
800066f4:	00b00713          	li	a4,11
800066f8:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
800066fc:	00442783          	lw	a5,4(s0)
80006700:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
80006704:	0107c783          	lbu	a5,16(a5)
	OUTBYTE(FCR(dev),
80006708:	00179793          	slli	a5,a5,0x1
8000670c:	00e787b3          	add	a5,a5,a4
80006710:	f8700713          	li	a4,-121
80006714:	00e78023          	sb	a4,0(a5)
	return DEVICE_MMIO_GET(dev);
80006718:	00442783          	lw	a5,4(s0)
8000671c:	0007a703          	lw	a4,0(a5)
	return config->reg_interval;
80006720:	0107c783          	lbu	a5,16(a5)
	if ((INBYTE(IIR(dev)) & IIR_FE) == IIR_FE) {
80006724:	00179793          	slli	a5,a5,0x1
80006728:	00e787b3          	add	a5,a5,a4
	return *(volatile uint8_t *)addr;
8000672c:	0007c783          	lbu	a5,0(a5)
80006730:	0c07f793          	andi	a5,a5,192
80006734:	0c000713          	li	a4,192
80006738:	02e78c63          	beq	a5,a4,80006770 <uart_ns16550_configure+0x20c>
		dev_data->fifo_size = 1;
8000673c:	00100793          	li	a5,1
80006740:	00fa0423          	sb	a5,8(s4)
	const struct uart_ns16550_device_config *config = dev->config;
80006744:	00442703          	lw	a4,4(s0)
	return config->reg_interval;
80006748:	01074783          	lbu	a5,16(a4)
	return DEVICE_MMIO_GET(dev);
8000674c:	00072703          	lw	a4,0(a4)
80006750:	00074683          	lbu	a3,0(a4)
	OUTBYTE(IER(dev), 0x00);
80006754:	00e787b3          	add	a5,a5,a4
	*(volatile uint8_t *)addr = data;
80006758:	00078023          	sb	zero,0(a5)
	int ret = 0;
8000675c:	00000513          	li	a0,0
}
80006760:	ee1ff06f          	j	80006640 <uart_ns16550_configure+0xdc>
		uart_cfg.parity = LCR_EPS;
80006764:	01000793          	li	a5,16
80006768:	00f10423          	sb	a5,8(sp)
		break;
8000676c:	f35ff06f          	j	800066a0 <uart_ns16550_configure+0x13c>
		dev_data->fifo_size = 16;
80006770:	01000793          	li	a5,16
80006774:	00fa0423          	sb	a5,8(s4)
80006778:	fcdff06f          	j	80006744 <uart_ns16550_configure+0x1e0>
			ret = -EINVAL;
8000677c:	fea00513          	li	a0,-22
80006780:	ec1ff06f          	j	80006640 <uart_ns16550_configure+0xdc>

80006784 <uart_ns16550_init>:
80006784:	00308013          	addi	zero,ra,3
{
80006788:	ff010113          	addi	sp,sp,-16
8000678c:	00112623          	sw	ra,12(sp)
	ret = uart_ns16550_configure(dev, &data->uart_config);
80006790:	01052583          	lw	a1,16(a0)
80006794:	dd1ff0ef          	jal	ra,80006564 <uart_ns16550_configure>
}
80006798:	00c12083          	lw	ra,12(sp)
8000679c:	01010113          	addi	sp,sp,16
800067a0:	00008067          	ret

800067a4 <get_hart_mtimecmp>:
800067a4:	00308013          	addi	zero,ra,3
	return MTIMECMP_REG + (_current_cpu->id * 8);
800067a8:	8000a7b7          	lui	a5,0x8000a
800067ac:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
800067b0:	0147c783          	lbu	a5,20(a5)
800067b4:	00379793          	slli	a5,a5,0x3
}
800067b8:	02004537          	lui	a0,0x2004
800067bc:	00a78533          	add	a0,a5,a0
800067c0:	00000593          	li	a1,0
800067c4:	00008067          	ret

800067c8 <set_mtimecmp>:
800067c8:	00308013          	addi	zero,ra,3
{
800067cc:	ff010113          	addi	sp,sp,-16
800067d0:	00112623          	sw	ra,12(sp)
800067d4:	00812423          	sw	s0,8(sp)
800067d8:	00912223          	sw	s1,4(sp)
800067dc:	00050493          	mv	s1,a0
800067e0:	00058413          	mv	s0,a1
	volatile uint32_t *r = (uint32_t *)(uint32_t)get_hart_mtimecmp();
800067e4:	fc1ff0ef          	jal	ra,800067a4 <get_hart_mtimecmp>
	r[1] = 0xffffffff;
800067e8:	fff00793          	li	a5,-1
800067ec:	00f52223          	sw	a5,4(a0) # 2004004 <CONFIG_SRAM_SIZE+0x1f04004>
	r[0] = (uint32_t)time;
800067f0:	00952023          	sw	s1,0(a0)
	r[1] = (uint32_t)(time >> 32);
800067f4:	00852223          	sw	s0,4(a0)
}
800067f8:	00c12083          	lw	ra,12(sp)
800067fc:	00812403          	lw	s0,8(sp)
80006800:	00412483          	lw	s1,4(sp)
80006804:	01010113          	addi	sp,sp,16
80006808:	00008067          	ret

8000680c <mtime>:
{
8000680c:	00308013          	addi	zero,ra,3
		hi = r[1];
80006810:	0200c7b7          	lui	a5,0x200c
80006814:	ffc7a583          	lw	a1,-4(a5) # 200bffc <CONFIG_SRAM_SIZE+0x1f0bffc>
		lo = r[0];
80006818:	ff87a503          	lw	a0,-8(a5)
	} while (r[1] != hi);
8000681c:	ffc7a783          	lw	a5,-4(a5)
80006820:	feb796e3          	bne	a5,a1,8000680c <mtime>
}
80006824:	00008067          	ret

80006828 <sys_clock_driver_init>:
80006828:	00308013          	addi	zero,ra,3
{
8000682c:	ff010113          	addi	sp,sp,-16
80006830:	00112623          	sw	ra,12(sp)
	IRQ_CONNECT(TIMER_IRQN, 0, timer_isr, NULL, 0);
80006834:	00000613          	li	a2,0
80006838:	00000593          	li	a1,0
8000683c:	00700513          	li	a0,7
80006840:	d70ff0ef          	jal	ra,80005db0 <z_riscv_irq_priority_set>
	last_count = mtime();
80006844:	fc9ff0ef          	jal	ra,8000680c <mtime>
80006848:	00050793          	mv	a5,a0
8000684c:	8000a737          	lui	a4,0x8000a
80006850:	d6a72423          	sw	a0,-664(a4) # 80009d68 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d69>
80006854:	d6b72623          	sw	a1,-660(a4)
	set_mtimecmp(last_count + CYC_PER_TICK);
80006858:	10050513          	addi	a0,a0,256
8000685c:	00f537b3          	sltu	a5,a0,a5
80006860:	00b785b3          	add	a1,a5,a1
80006864:	f65ff0ef          	jal	ra,800067c8 <set_mtimecmp>
	irq_enable(TIMER_IRQN);
80006868:	00700513          	li	a0,7
8000686c:	d08ff0ef          	jal	ra,80005d74 <arch_irq_enable>
}
80006870:	00000513          	li	a0,0
80006874:	00c12083          	lw	ra,12(sp)
80006878:	01010113          	addi	sp,sp,16
8000687c:	00008067          	ret

80006880 <timer_isr>:
80006880:	00308013          	addi	zero,ra,3
{
80006884:	ff010113          	addi	sp,sp,-16
80006888:	00112623          	sw	ra,12(sp)
8000688c:	00812423          	sw	s0,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006890:	30047473          	csrrci	s0,mstatus,8
	uint64_t now = mtime();
80006894:	f79ff0ef          	jal	ra,8000680c <mtime>
80006898:	00050693          	mv	a3,a0
	uint32_t dticks = (uint32_t)((now - last_count) / CYC_PER_TICK);
8000689c:	8000a637          	lui	a2,0x8000a
800068a0:	d6862783          	lw	a5,-664(a2) # 80009d68 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d69>
800068a4:	d6c62703          	lw	a4,-660(a2)
800068a8:	40f507b3          	sub	a5,a0,a5
800068ac:	00f53533          	sltu	a0,a0,a5
800068b0:	40e58733          	sub	a4,a1,a4
800068b4:	40a70733          	sub	a4,a4,a0
800068b8:	01871713          	slli	a4,a4,0x18
800068bc:	0087d513          	srli	a0,a5,0x8
800068c0:	00a76533          	or	a0,a4,a0
	last_count = now;
800068c4:	d6d62423          	sw	a3,-664(a2)
800068c8:	d6b62623          	sw	a1,-660(a2)
	__asm__ volatile ("csrs mstatus, %0"
800068cc:	00847413          	andi	s0,s0,8
800068d0:	30042073          	csrs	mstatus,s0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
800068d4:	75d010ef          	jal	ra,80008830 <sys_clock_announce>
}
800068d8:	00c12083          	lw	ra,12(sp)
800068dc:	00812403          	lw	s0,8(sp)
800068e0:	01010113          	addi	sp,sp,16
800068e4:	00008067          	ret

800068e8 <sys_clock_set_timeout>:
800068e8:	00308013          	addi	zero,ra,3
	if (idle) {
800068ec:	0c059c63          	bnez	a1,800069c4 <sys_clock_set_timeout+0xdc>
{
800068f0:	ff010113          	addi	sp,sp,-16
800068f4:	00112623          	sw	ra,12(sp)
800068f8:	00812423          	sw	s0,8(sp)
800068fc:	00912223          	sw	s1,4(sp)
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
80006900:	fff00793          	li	a5,-1
80006904:	04f50a63          	beq	a0,a5,80006958 <sys_clock_set_timeout+0x70>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
80006908:	00100793          	li	a5,1
8000690c:	04a7dc63          	bge	a5,a0,80006964 <sys_clock_set_timeout+0x7c>
80006910:	008007b7          	lui	a5,0x800
80006914:	ffe78793          	addi	a5,a5,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
80006918:	04a7ca63          	blt	a5,a0,8000696c <sys_clock_set_timeout+0x84>
8000691c:	fff50413          	addi	s0,a0,-1
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006920:	300474f3          	csrrci	s1,mstatus,8
	uint64_t now = mtime();
80006924:	ee9ff0ef          	jal	ra,8000680c <mtime>
	uint32_t adj, cyc = ticks * CYC_PER_TICK;
80006928:	00841793          	slli	a5,s0,0x8
	adj = (uint32_t)(now - last_count) + (CYC_PER_TICK - 1);
8000692c:	8000a6b7          	lui	a3,0x8000a
80006930:	d686a703          	lw	a4,-664(a3) # 80009d68 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d69>
80006934:	d6c6a583          	lw	a1,-660(a3)
80006938:	40e50633          	sub	a2,a0,a4
8000693c:	0ff60613          	addi	a2,a2,255
	if (cyc <= MAX_CYC - adj) {
80006940:	800006b7          	lui	a3,0x80000
80006944:	fff6c693          	not	a3,a3
80006948:	40c686b3          	sub	a3,a3,a2
8000694c:	02f6e663          	bltu	a3,a5,80006978 <sys_clock_set_timeout+0x90>
		cyc += adj;
80006950:	00c787b3          	add	a5,a5,a2
80006954:	02c0006f          	j	80006980 <sys_clock_set_timeout+0x98>
	ticks = ticks == K_TICKS_FOREVER ? MAX_TICKS : ticks;
80006958:	00800537          	lui	a0,0x800
8000695c:	ffe50513          	addi	a0,a0,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
80006960:	fb1ff06f          	j	80006910 <sys_clock_set_timeout+0x28>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
80006964:	00000413          	li	s0,0
80006968:	fb9ff06f          	j	80006920 <sys_clock_set_timeout+0x38>
8000696c:	00800537          	lui	a0,0x800
80006970:	ffe50413          	addi	s0,a0,-2 # 7ffffe <CONFIG_SRAM_SIZE+0x6ffffe>
80006974:	fadff06f          	j	80006920 <sys_clock_set_timeout+0x38>
		cyc = MAX_CYC;
80006978:	800007b7          	lui	a5,0x80000
8000697c:	fff7c793          	not	a5,a5
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
80006980:	f007f793          	andi	a5,a5,-256
	if ((int32_t)(cyc + last_count - now) < MIN_DELAY) {
80006984:	00f706b3          	add	a3,a4,a5
80006988:	40a686b3          	sub	a3,a3,a0
8000698c:	06300613          	li	a2,99
80006990:	00d64463          	blt	a2,a3,80006998 <sys_clock_set_timeout+0xb0>
		cyc += CYC_PER_TICK;
80006994:	10078793          	addi	a5,a5,256 # 80000100 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000101>
	set_mtimecmp(cyc + last_count);
80006998:	00e78533          	add	a0,a5,a4
8000699c:	00f537b3          	sltu	a5,a0,a5
800069a0:	00b785b3          	add	a1,a5,a1
800069a4:	e25ff0ef          	jal	ra,800067c8 <set_mtimecmp>
	__asm__ volatile ("csrs mstatus, %0"
800069a8:	0084f493          	andi	s1,s1,8
800069ac:	3004a073          	csrs	mstatus,s1
}
800069b0:	00c12083          	lw	ra,12(sp)
800069b4:	00812403          	lw	s0,8(sp)
800069b8:	00412483          	lw	s1,4(sp)
800069bc:	01010113          	addi	sp,sp,16
800069c0:	00008067          	ret
800069c4:	00008067          	ret

800069c8 <sys_clock_elapsed>:
800069c8:	00308013          	addi	zero,ra,3
{
800069cc:	ff010113          	addi	sp,sp,-16
800069d0:	00112623          	sw	ra,12(sp)
800069d4:	00812423          	sw	s0,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
800069d8:	30047473          	csrrci	s0,mstatus,8
	uint32_t ret = ((uint32_t)mtime() - (uint32_t)last_count) / CYC_PER_TICK;
800069dc:	e31ff0ef          	jal	ra,8000680c <mtime>
800069e0:	8000a7b7          	lui	a5,0x8000a
800069e4:	d687a783          	lw	a5,-664(a5) # 80009d68 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d69>
800069e8:	40f50533          	sub	a0,a0,a5
800069ec:	00855513          	srli	a0,a0,0x8
	__asm__ volatile ("csrs mstatus, %0"
800069f0:	00847413          	andi	s0,s0,8
800069f4:	30042073          	csrs	mstatus,s0
}
800069f8:	00c12083          	lw	ra,12(sp)
800069fc:	00812403          	lw	s0,8(sp)
80006a00:	01010113          	addi	sp,sp,16
80006a04:	00008067          	ret

80006a08 <z_device_state_init>:
80006a08:	00308013          	addi	zero,ra,3
	const struct device *dev = __device_start;
80006a0c:	80009737          	lui	a4,0x80009
80006a10:	9e870713          	addi	a4,a4,-1560 # 800089e8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800089e9>
	while (dev < __device_end) {
80006a14:	0080006f          	j	80006a1c <z_device_state_init+0x14>
		++dev;
80006a18:	01870713          	addi	a4,a4,24
	while (dev < __device_end) {
80006a1c:	800097b7          	lui	a5,0x80009
80006a20:	a0078793          	addi	a5,a5,-1536 # 80008a00 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008a01>
80006a24:	fef76ae3          	bltu	a4,a5,80006a18 <z_device_state_init+0x10>
}
80006a28:	00008067          	ret

80006a2c <z_sys_init_run_level>:
80006a2c:	00308013          	addi	zero,ra,3
{
80006a30:	ff010113          	addi	sp,sp,-16
80006a34:	00112623          	sw	ra,12(sp)
80006a38:	00812423          	sw	s0,8(sp)
80006a3c:	00912223          	sw	s1,4(sp)
80006a40:	01212023          	sw	s2,0(sp)
80006a44:	00050913          	mv	s2,a0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
80006a48:	8000a7b7          	lui	a5,0x8000a
80006a4c:	00251713          	slli	a4,a0,0x2
80006a50:	cb478793          	addi	a5,a5,-844 # 80009cb4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009cb5>
80006a54:	00e787b3          	add	a5,a5,a4
80006a58:	0007a403          	lw	s0,0(a5)
80006a5c:	0280006f          	j	80006a84 <z_sys_init_run_level+0x58>
					rc = -rc;
80006a60:	40a00533          	neg	a0,a0
80006a64:	0580006f          	j	80006abc <z_sys_init_run_level+0x90>
				dev->state->init_res = rc;
80006a68:	00c4a783          	lw	a5,12(s1)
80006a6c:	00a78023          	sb	a0,0(a5)
			dev->state->initialized = true;
80006a70:	00c4a703          	lw	a4,12(s1)
80006a74:	00075783          	lhu	a5,0(a4)
80006a78:	1007e793          	ori	a5,a5,256
80006a7c:	00f71023          	sh	a5,0(a4)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
80006a80:	00840413          	addi	s0,s0,8
80006a84:	00190713          	addi	a4,s2,1
80006a88:	8000a7b7          	lui	a5,0x8000a
80006a8c:	00271713          	slli	a4,a4,0x2
80006a90:	cb478793          	addi	a5,a5,-844 # 80009cb4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009cb5>
80006a94:	00e787b3          	add	a5,a5,a4
80006a98:	0007a783          	lw	a5,0(a5)
80006a9c:	02f47863          	bgeu	s0,a5,80006acc <z_sys_init_run_level+0xa0>
		const struct device *dev = entry->dev;
80006aa0:	00442483          	lw	s1,4(s0)
		int rc = entry->init(dev);
80006aa4:	00042783          	lw	a5,0(s0)
80006aa8:	00048513          	mv	a0,s1
80006aac:	000780e7          	jalr	a5
		if (dev != NULL) {
80006ab0:	fc0488e3          	beqz	s1,80006a80 <z_sys_init_run_level+0x54>
			if (rc != 0) {
80006ab4:	fa050ee3          	beqz	a0,80006a70 <z_sys_init_run_level+0x44>
				if (rc < 0) {
80006ab8:	fa0544e3          	bltz	a0,80006a60 <z_sys_init_run_level+0x34>
				if (rc > UINT8_MAX) {
80006abc:	0ff00793          	li	a5,255
80006ac0:	faa7d4e3          	bge	a5,a0,80006a68 <z_sys_init_run_level+0x3c>
					rc = UINT8_MAX;
80006ac4:	0ff00513          	li	a0,255
80006ac8:	fa1ff06f          	j	80006a68 <z_sys_init_run_level+0x3c>
}
80006acc:	00c12083          	lw	ra,12(sp)
80006ad0:	00812403          	lw	s0,8(sp)
80006ad4:	00412483          	lw	s1,4(sp)
80006ad8:	00012903          	lw	s2,0(sp)
80006adc:	01010113          	addi	sp,sp,16
80006ae0:	00008067          	ret

80006ae4 <z_device_is_ready>:
80006ae4:	00308013          	addi	zero,ra,3
	if (dev == NULL) {
80006ae8:	00050e63          	beqz	a0,80006b04 <z_device_is_ready+0x20>
	return dev->state->initialized && (dev->state->init_res == 0U);
80006aec:	00c52783          	lw	a5,12(a0)
80006af0:	0007a503          	lw	a0,0(a5)
80006af4:	1ff57513          	andi	a0,a0,511
80006af8:	f0050513          	addi	a0,a0,-256
80006afc:	00153513          	seqz	a0,a0
80006b00:	00008067          	ret
		return false;
80006b04:	00000513          	li	a0,0
}
80006b08:	00008067          	ret

80006b0c <arch_system_halt>:
80006b0c:	00308013          	addi	zero,ra,3
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006b10:	300477f3          	csrrci	a5,mstatus,8
	for (;;) {
80006b14:	0000006f          	j	80006b14 <arch_system_halt+0x8>

80006b18 <k_sys_fatal_error_handler>:
80006b18:	00308013          	addi	zero,ra,3
{
80006b1c:	ff010113          	addi	sp,sp,-16
80006b20:	00112623          	sw	ra,12(sp)
	arch_system_halt(reason);
80006b24:	fe9ff0ef          	jal	ra,80006b0c <arch_system_halt>

80006b28 <z_fatal_error>:
80006b28:	00308013          	addi	zero,ra,3
{
80006b2c:	fe010113          	addi	sp,sp,-32
80006b30:	00112e23          	sw	ra,28(sp)
80006b34:	00812c23          	sw	s0,24(sp)
80006b38:	00912a23          	sw	s1,20(sp)
80006b3c:	01212823          	sw	s2,16(sp)
80006b40:	01312623          	sw	s3,12(sp)
80006b44:	00050913          	mv	s2,a0
80006b48:	00058993          	mv	s3,a1
80006b4c:	300474f3          	csrrci	s1,mstatus,8
	return z_impl_z_current_get();
80006b50:	7c4010ef          	jal	ra,80008314 <z_impl_z_current_get>
80006b54:	00050413          	mv	s0,a0
	k_sys_fatal_error_handler(reason, esf);
80006b58:	00098593          	mv	a1,s3
80006b5c:	00090513          	mv	a0,s2
80006b60:	fb9ff0ef          	jal	ra,80006b18 <k_sys_fatal_error_handler>
			  : "r" (key & MSTATUS_IEN)
80006b64:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80006b68:	3004a073          	csrs	mstatus,s1
	z_impl_k_thread_abort(thread);
80006b6c:	00040513          	mv	a0,s0
80006b70:	061010ef          	jal	ra,800083d0 <z_impl_k_thread_abort>
}
80006b74:	01c12083          	lw	ra,28(sp)
80006b78:	01812403          	lw	s0,24(sp)
80006b7c:	01412483          	lw	s1,20(sp)
80006b80:	01012903          	lw	s2,16(sp)
80006b84:	00c12983          	lw	s3,12(sp)
80006b88:	02010113          	addi	sp,sp,32
80006b8c:	00008067          	ret

80006b90 <init_idle_thread>:
80006b90:	00308013          	addi	zero,ra,3
{
80006b94:	fd010113          	addi	sp,sp,-48
80006b98:	02112623          	sw	ra,44(sp)
80006b9c:	02812423          	sw	s0,40(sp)
80006ba0:	02912223          	sw	s1,36(sp)
80006ba4:	03212023          	sw	s2,32(sp)
80006ba8:	01312e23          	sw	s3,28(sp)
80006bac:	00050413          	mv	s0,a0
	struct k_thread *thread = &z_idle_threads[i];
80006bb0:	00451913          	slli	s2,a0,0x4
80006bb4:	00a909b3          	add	s3,s2,a0
80006bb8:	00399993          	slli	s3,s3,0x3
80006bbc:	8000a4b7          	lui	s1,0x8000a
80006bc0:	ee048493          	addi	s1,s1,-288 # 80009ee0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009ee1>
80006bc4:	009989b3          	add	s3,s3,s1
	k_thread_stack_t *stack = z_idle_stacks[i];
80006bc8:	00a51513          	slli	a0,a0,0xa
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
80006bcc:	00141693          	slli	a3,s0,0x1
80006bd0:	008686b3          	add	a3,a3,s0
80006bd4:	00369693          	slli	a3,a3,0x3
	z_setup_new_thread(thread, stack,
80006bd8:	00012223          	sw	zero,4(sp)
80006bdc:	00100793          	li	a5,1
80006be0:	00f12023          	sw	a5,0(sp)
80006be4:	00f00893          	li	a7,15
80006be8:	00000813          	li	a6,0
80006bec:	00000793          	li	a5,0
80006bf0:	8000a737          	lui	a4,0x8000a
80006bf4:	25870713          	addi	a4,a4,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80006bf8:	00d70733          	add	a4,a4,a3
80006bfc:	800076b7          	lui	a3,0x80007
80006c00:	18468693          	addi	a3,a3,388 # 80007184 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007185>
80006c04:	40000613          	li	a2,1024
80006c08:	8000b5b7          	lui	a1,0x8000b
80006c0c:	28058593          	addi	a1,a1,640 # 8000b280 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b281>
80006c10:	00a585b3          	add	a1,a1,a0
80006c14:	00098513          	mv	a0,s3
80006c18:	398000ef          	jal	ra,80006fb0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
80006c1c:	00d9c783          	lbu	a5,13(s3)
80006c20:	ffb7f793          	andi	a5,a5,-5
80006c24:	00f986a3          	sb	a5,13(s3)
}
80006c28:	02c12083          	lw	ra,44(sp)
80006c2c:	02812403          	lw	s0,40(sp)
80006c30:	02412483          	lw	s1,36(sp)
80006c34:	02012903          	lw	s2,32(sp)
80006c38:	01c12983          	lw	s3,28(sp)
80006c3c:	03010113          	addi	sp,sp,48
80006c40:	00008067          	ret

80006c44 <bg_thread_main>:
80006c44:	00308013          	addi	zero,ra,3
{
80006c48:	ff010113          	addi	sp,sp,-16
80006c4c:	00112623          	sw	ra,12(sp)
	z_sys_post_kernel = true;
80006c50:	8000a7b7          	lui	a5,0x8000a
80006c54:	00100713          	li	a4,1
80006c58:	dae78623          	sb	a4,-596(a5) # 80009dac <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009dad>
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
80006c5c:	00200513          	li	a0,2
80006c60:	dcdff0ef          	jal	ra,80006a2c <z_sys_init_run_level>
	boot_banner();
80006c64:	521010ef          	jal	ra,80008984 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
80006c68:	00300513          	li	a0,3
80006c6c:	dc1ff0ef          	jal	ra,80006a2c <z_sys_init_run_level>
	z_init_static_threads();
80006c70:	418000ef          	jal	ra,80007088 <z_init_static_threads>
	main();
80006c74:	e31fd0ef          	jal	ra,80004aa4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
80006c78:	8000a7b7          	lui	a5,0x8000a
80006c7c:	f6878793          	addi	a5,a5,-152 # 80009f68 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009f69>
80006c80:	00c7c703          	lbu	a4,12(a5)
80006c84:	ffe77713          	andi	a4,a4,-2
80006c88:	00e78623          	sb	a4,12(a5)
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
80006c8c:	00c12083          	lw	ra,12(sp)
80006c90:	01010113          	addi	sp,sp,16
80006c94:	00008067          	ret

80006c98 <z_swap_unlocked>:
80006c98:	00308013          	addi	zero,ra,3
{
	return do_swap(key.key, lock, true);
}

static inline void z_swap_unlocked(void)
{
80006c9c:	ff010113          	addi	sp,sp,-16
80006ca0:	00112623          	sw	ra,12(sp)
80006ca4:	00812423          	sw	s0,8(sp)
80006ca8:	00912223          	sw	s1,4(sp)
80006cac:	01212023          	sw	s2,0(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80006cb0:	300474f3          	csrrci	s1,mstatus,8
	old_thread = _current;
80006cb4:	8000a7b7          	lui	a5,0x8000a
80006cb8:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80006cbc:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
80006cc0:	ff500793          	li	a5,-11
80006cc4:	06f92c23          	sw	a5,120(s2)
80006cc8:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80006ccc:	18d000ef          	jal	ra,80007658 <z_swap_next_thread>
	if (new_thread != old_thread) {
80006cd0:	02a90263          	beq	s2,a0,80006cf4 <z_swap_unlocked+0x5c>
80006cd4:	00050413          	mv	s0,a0
		_current_cpu->current = new_thread;
80006cd8:	8000a7b7          	lui	a5,0x8000a
80006cdc:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80006ce0:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
80006ce4:	029000ef          	jal	ra,8000750c <z_reset_time_slice>
	struct k_thread *old = CONTAINER_OF(switched_from, struct k_thread,
					    switch_handle);
#ifdef CONFIG_RISCV_ALWAYS_SWITCH_THROUGH_ECALL
	arch_syscall_invoke2((uintptr_t)new, (uintptr_t)old, RV_ECALL_SCHEDULE);
#else
	z_riscv_switch(new, old);
80006ce8:	00090593          	mv	a1,s2
80006cec:	07c42503          	lw	a0,124(s0)
80006cf0:	a08ff0ef          	jal	ra,80005ef8 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
80006cf4:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80006cf8:	3004a073          	csrs	mstatus,s1
	(void) do_swap(arch_irq_lock(), NULL, true);
}
80006cfc:	00c12083          	lw	ra,12(sp)
80006d00:	00812403          	lw	s0,8(sp)
80006d04:	00412483          	lw	s1,4(sp)
80006d08:	00012903          	lw	s2,0(sp)
80006d0c:	01010113          	addi	sp,sp,16
80006d10:	00008067          	ret

80006d14 <switch_to_main_thread>:
80006d14:	00308013          	addi	zero,ra,3
{
80006d18:	ff010113          	addi	sp,sp,-16
80006d1c:	00112623          	sw	ra,12(sp)
	z_swap_unlocked();
80006d20:	f79ff0ef          	jal	ra,80006c98 <z_swap_unlocked>

80006d24 <z_early_memset>:
80006d24:	00308013          	addi	zero,ra,3
{
80006d28:	ff010113          	addi	sp,sp,-16
80006d2c:	00112623          	sw	ra,12(sp)
__ssp_bos_icheck3(memset, void *, int)
80006d30:	8a0fa0ef          	jal	ra,80000dd0 <memset>
}
80006d34:	00c12083          	lw	ra,12(sp)
80006d38:	01010113          	addi	sp,sp,16
80006d3c:	00008067          	ret

80006d40 <z_bss_zero>:
80006d40:	00308013          	addi	zero,ra,3
{
80006d44:	ff010113          	addi	sp,sp,-16
80006d48:	00112623          	sw	ra,12(sp)
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
80006d4c:	8000a537          	lui	a0,0x8000a
80006d50:	d5850613          	addi	a2,a0,-680 # 80009d58 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d59>
80006d54:	8000a7b7          	lui	a5,0x8000a
80006d58:	27c78793          	addi	a5,a5,636 # 8000a27c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a27d>
80006d5c:	40c78633          	sub	a2,a5,a2
80006d60:	00000593          	li	a1,0
80006d64:	d5850513          	addi	a0,a0,-680
80006d68:	fbdff0ef          	jal	ra,80006d24 <z_early_memset>
}
80006d6c:	00c12083          	lw	ra,12(sp)
80006d70:	01010113          	addi	sp,sp,16
80006d74:	00008067          	ret

80006d78 <z_init_cpu>:
80006d78:	00308013          	addi	zero,ra,3
{
80006d7c:	ff010113          	addi	sp,sp,-16
80006d80:	00112623          	sw	ra,12(sp)
80006d84:	00812423          	sw	s0,8(sp)
80006d88:	00050413          	mv	s0,a0
	init_idle_thread(id);
80006d8c:	e05ff0ef          	jal	ra,80006b90 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
80006d90:	00441793          	slli	a5,s0,0x4
80006d94:	008787b3          	add	a5,a5,s0
80006d98:	00379793          	slli	a5,a5,0x3
80006d9c:	8000a737          	lui	a4,0x8000a
80006da0:	ee070713          	addi	a4,a4,-288 # 80009ee0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009ee1>
80006da4:	00e787b3          	add	a5,a5,a4
80006da8:	8000a737          	lui	a4,0x8000a
80006dac:	25870713          	addi	a4,a4,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80006db0:	00141693          	slli	a3,s0,0x1
80006db4:	00868633          	add	a2,a3,s0
80006db8:	00361613          	slli	a2,a2,0x3
80006dbc:	00c70633          	add	a2,a4,a2
80006dc0:	00f62623          	sw	a5,12(a2)
	_kernel.cpus[id].id = id;
80006dc4:	00860a23          	sb	s0,20(a2)
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
80006dc8:	00c41793          	slli	a5,s0,0xc
80006dcc:	8000a637          	lui	a2,0x8000a
80006dd0:	28060613          	addi	a2,a2,640 # 8000a280 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a281>
80006dd4:	00c787b3          	add	a5,a5,a2
80006dd8:	00001637          	lui	a2,0x1
80006ddc:	00c787b3          	add	a5,a5,a2
	_kernel.cpus[id].irq_stack =
80006de0:	008686b3          	add	a3,a3,s0
80006de4:	00369693          	slli	a3,a3,0x3
80006de8:	00d70733          	add	a4,a4,a3
80006dec:	00f72223          	sw	a5,4(a4)
}
80006df0:	00c12083          	lw	ra,12(sp)
80006df4:	00812403          	lw	s0,8(sp)
80006df8:	01010113          	addi	sp,sp,16
80006dfc:	00008067          	ret

80006e00 <prepare_multithreading>:
80006e00:	00308013          	addi	zero,ra,3
{
80006e04:	fe010113          	addi	sp,sp,-32
80006e08:	00112e23          	sw	ra,28(sp)
80006e0c:	00812c23          	sw	s0,24(sp)
80006e10:	00912a23          	sw	s1,20(sp)
80006e14:	01212823          	sw	s2,16(sp)
	z_sched_init();
80006e18:	4cc010ef          	jal	ra,800082e4 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
80006e1c:	8000a7b7          	lui	a5,0x8000a
80006e20:	8000a4b7          	lui	s1,0x8000a
80006e24:	f6848913          	addi	s2,s1,-152 # 80009f68 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009f69>
80006e28:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80006e2c:	0127ac23          	sw	s2,24(a5)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
80006e30:	8000a7b7          	lui	a5,0x8000a
80006e34:	cc878793          	addi	a5,a5,-824 # 80009cc8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009cc9>
80006e38:	00f12223          	sw	a5,4(sp)
80006e3c:	00100793          	li	a5,1
80006e40:	00f12023          	sw	a5,0(sp)
80006e44:	00000893          	li	a7,0
80006e48:	00000813          	li	a6,0
80006e4c:	00000793          	li	a5,0
80006e50:	00000713          	li	a4,0
80006e54:	800076b7          	lui	a3,0x80007
80006e58:	c4468693          	addi	a3,a3,-956 # 80006c44 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80006c45>
80006e5c:	00001637          	lui	a2,0x1
80006e60:	8000b5b7          	lui	a1,0x8000b
80006e64:	68058593          	addi	a1,a1,1664 # 8000b680 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000b681>
80006e68:	f6848513          	addi	a0,s1,-152
80006e6c:	144000ef          	jal	ra,80006fb0 <z_setup_new_thread>
80006e70:	00050413          	mv	s0,a0
80006e74:	00d94783          	lbu	a5,13(s2)
80006e78:	ffb7f793          	andi	a5,a5,-5
80006e7c:	00f906a3          	sb	a5,13(s2)
	z_ready_thread(&z_main_thread);
80006e80:	f6848513          	addi	a0,s1,-152
80006e84:	5e5000ef          	jal	ra,80007c68 <z_ready_thread>
	z_init_cpu(0);
80006e88:	00000513          	li	a0,0
80006e8c:	eedff0ef          	jal	ra,80006d78 <z_init_cpu>
}
80006e90:	00040513          	mv	a0,s0
80006e94:	01c12083          	lw	ra,28(sp)
80006e98:	01812403          	lw	s0,24(sp)
80006e9c:	01412483          	lw	s1,20(sp)
80006ea0:	01012903          	lw	s2,16(sp)
80006ea4:	02010113          	addi	sp,sp,32
80006ea8:	00008067          	ret

80006eac <z_cstart>:
80006eac:	00308013          	addi	zero,ra,3
{
80006eb0:	f6010113          	addi	sp,sp,-160
80006eb4:	08112e23          	sw	ra,156(sp)
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
80006eb8:	00100793          	li	a5,1
80006ebc:	00f10aa3          	sb	a5,21(sp)
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
80006ec0:	00f10a23          	sb	a5,20(sp)
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
80006ec4:	08012423          	sw	zero,136(sp)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
80006ec8:	8000a7b7          	lui	a5,0x8000a
80006ecc:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80006ed0:	00810713          	addi	a4,sp,8
80006ed4:	00e7a423          	sw	a4,8(a5)
	z_device_state_init();
80006ed8:	b31ff0ef          	jal	ra,80006a08 <z_device_state_init>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
80006edc:	00000513          	li	a0,0
80006ee0:	b4dff0ef          	jal	ra,80006a2c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
80006ee4:	00100513          	li	a0,1
80006ee8:	b45ff0ef          	jal	ra,80006a2c <z_sys_init_run_level>
	switch_to_main_thread(prepare_multithreading());
80006eec:	f15ff0ef          	jal	ra,80006e00 <prepare_multithreading>
80006ef0:	e25ff0ef          	jal	ra,80006d14 <switch_to_main_thread>

80006ef4 <setup_thread_stack>:
80006ef4:	00308013          	addi	zero,ra,3
{
80006ef8:	ff010113          	addi	sp,sp,-16
80006efc:	00112623          	sw	ra,12(sp)
80006f00:	00812423          	sw	s0,8(sp)
80006f04:	00058513          	mv	a0,a1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
80006f08:	00f60613          	addi	a2,a2,15 # 100f <CONFIG_ISR_STACK_SIZE+0xf>
80006f0c:	ff067613          	andi	a2,a2,-16
	stack_ptr = (char *)stack + stack_obj_size;
80006f10:	00c58433          	add	s0,a1,a2
80006f14:	0aa00593          	li	a1,170
80006f18:	eb9f90ef          	jal	ra,80000dd0 <memset>
}
80006f1c:	00040513          	mv	a0,s0
80006f20:	00c12083          	lw	ra,12(sp)
80006f24:	00812403          	lw	s0,8(sp)
80006f28:	01010113          	addi	sp,sp,16
80006f2c:	00008067          	ret

80006f30 <z_impl_k_thread_start>:
80006f30:	00308013          	addi	zero,ra,3
{
80006f34:	ff010113          	addi	sp,sp,-16
80006f38:	00112623          	sw	ra,12(sp)
	z_sched_start(thread);
80006f3c:	58d000ef          	jal	ra,80007cc8 <z_sched_start>
}
80006f40:	00c12083          	lw	ra,12(sp)
80006f44:	01010113          	addi	sp,sp,16
80006f48:	00008067          	ret

80006f4c <schedule_new_thread>:
80006f4c:	00308013          	addi	zero,ra,3
{
80006f50:	ff010113          	addi	sp,sp,-16
80006f54:	00112623          	sw	ra,12(sp)
80006f58:	00060693          	mv	a3,a2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
80006f5c:	00b667b3          	or	a5,a2,a1
80006f60:	00079a63          	bnez	a5,80006f74 <schedule_new_thread+0x28>
	z_impl_k_thread_start(thread);
80006f64:	fcdff0ef          	jal	ra,80006f30 <z_impl_k_thread_start>
}
80006f68:	00c12083          	lw	ra,12(sp)
80006f6c:	01010113          	addi	sp,sp,16
80006f70:	00008067          	ret
80006f74:	00058613          	mv	a2,a1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
80006f78:	800085b7          	lui	a1,0x80008
80006f7c:	d2058593          	addi	a1,a1,-736 # 80007d20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d21>
80006f80:	01850513          	addi	a0,a0,24
80006f84:	5d4010ef          	jal	ra,80008558 <z_add_timeout>
80006f88:	fe1ff06f          	j	80006f68 <schedule_new_thread+0x1c>

80006f8c <z_init_thread_base>:
80006f8c:	00308013          	addi	zero,ra,3
	thread_base->pended_on = NULL;
80006f90:	00052423          	sw	zero,8(a0)
	thread_base->user_options = (uint8_t)options;
80006f94:	00d50623          	sb	a3,12(a0)
	thread_base->thread_state = (uint8_t)initial_state;
80006f98:	00c506a3          	sb	a2,13(a0)
	thread_base->prio = priority;
80006f9c:	00b50723          	sb	a1,14(a0)
	thread_base->sched_locked = 0U;
80006fa0:	000507a3          	sb	zero,15(a0)
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
80006fa4:	00052c23          	sw	zero,24(a0)
	node->prev = NULL;
80006fa8:	00052e23          	sw	zero,28(a0)
}
80006fac:	00008067          	ret

80006fb0 <z_setup_new_thread>:
80006fb0:	00308013          	addi	zero,ra,3
{
80006fb4:	fe010113          	addi	sp,sp,-32
80006fb8:	00112e23          	sw	ra,28(sp)
80006fbc:	00812c23          	sw	s0,24(sp)
80006fc0:	00912a23          	sw	s1,20(sp)
80006fc4:	01212823          	sw	s2,16(sp)
80006fc8:	01312623          	sw	s3,12(sp)
80006fcc:	01412423          	sw	s4,8(sp)
80006fd0:	01512223          	sw	s5,4(sp)
80006fd4:	01612023          	sw	s6,0(sp)
80006fd8:	00050413          	mv	s0,a0
80006fdc:	00058913          	mv	s2,a1
80006fe0:	00060493          	mv	s1,a2
80006fe4:	00068993          	mv	s3,a3
80006fe8:	00070a13          	mv	s4,a4
80006fec:	00078a93          	mv	s5,a5
80006ff0:	00080b13          	mv	s6,a6
80006ff4:	00088593          	mv	a1,a7
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
80006ff8:	06c50793          	addi	a5,a0,108
	list->head = (sys_dnode_t *)list;
80006ffc:	06f52623          	sw	a5,108(a0)
	list->tail = (sys_dnode_t *)list;
80007000:	06f52823          	sw	a5,112(a0)
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
80007004:	02012683          	lw	a3,32(sp)
80007008:	00400613          	li	a2,4
8000700c:	f81ff0ef          	jal	ra,80006f8c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
80007010:	00048613          	mv	a2,s1
80007014:	00090593          	mv	a1,s2
80007018:	00040513          	mv	a0,s0
8000701c:	ed9ff0ef          	jal	ra,80006ef4 <setup_thread_stack>
80007020:	00050493          	mv	s1,a0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
80007024:	000b0813          	mv	a6,s6
80007028:	000a8793          	mv	a5,s5
8000702c:	000a0713          	mv	a4,s4
80007030:	00098693          	mv	a3,s3
80007034:	00050613          	mv	a2,a0
80007038:	00090593          	mv	a1,s2
8000703c:	00040513          	mv	a0,s0
80007040:	f65fe0ef          	jal	ra,80005fa4 <arch_new_thread>
	new_thread->init_data = NULL;
80007044:	06042423          	sw	zero,104(s0)
	new_thread->resource_pool = _current->resource_pool;
80007048:	8000a7b7          	lui	a5,0x8000a
8000704c:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007050:	0087a783          	lw	a5,8(a5)
80007054:	0807a783          	lw	a5,128(a5)
80007058:	08f42023          	sw	a5,128(s0)
}
8000705c:	00048513          	mv	a0,s1
80007060:	01c12083          	lw	ra,28(sp)
80007064:	01812403          	lw	s0,24(sp)
80007068:	01412483          	lw	s1,20(sp)
8000706c:	01012903          	lw	s2,16(sp)
80007070:	00c12983          	lw	s3,12(sp)
80007074:	00812a03          	lw	s4,8(sp)
80007078:	00412a83          	lw	s5,4(sp)
8000707c:	00012b03          	lw	s6,0(sp)
80007080:	02010113          	addi	sp,sp,32
80007084:	00008067          	ret

80007088 <z_init_static_threads>:
80007088:	00308013          	addi	zero,ra,3
{
8000708c:	fe010113          	addi	sp,sp,-32
80007090:	00112e23          	sw	ra,28(sp)
80007094:	00812c23          	sw	s0,24(sp)
80007098:	00912a23          	sw	s1,20(sp)
	_FOREACH_STATIC_THREAD(thread_data) {
8000709c:	80009437          	lui	s0,0x80009
800070a0:	c0040413          	addi	s0,s0,-1024 # 80008c00 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008c01>
800070a4:	0440006f          	j	800070e8 <z_init_static_threads+0x60>
		z_setup_new_thread(
800070a8:	02c42783          	lw	a5,44(s0)
800070ac:	00f12223          	sw	a5,4(sp)
800070b0:	02042783          	lw	a5,32(s0)
800070b4:	00f12023          	sw	a5,0(sp)
800070b8:	01c42883          	lw	a7,28(s0)
800070bc:	01842803          	lw	a6,24(s0)
800070c0:	01442783          	lw	a5,20(s0)
800070c4:	01042703          	lw	a4,16(s0)
800070c8:	00c42683          	lw	a3,12(s0)
800070cc:	00842603          	lw	a2,8(s0)
800070d0:	00442583          	lw	a1,4(s0)
800070d4:	00042503          	lw	a0,0(s0)
800070d8:	ed9ff0ef          	jal	ra,80006fb0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
800070dc:	00042783          	lw	a5,0(s0)
800070e0:	0687a423          	sw	s0,104(a5)
	_FOREACH_STATIC_THREAD(thread_data) {
800070e4:	03040413          	addi	s0,s0,48
800070e8:	800097b7          	lui	a5,0x80009
800070ec:	c0078793          	addi	a5,a5,-1024 # 80008c00 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008c01>
800070f0:	faf46ce3          	bltu	s0,a5,800070a8 <z_init_static_threads+0x20>
	k_sched_lock();
800070f4:	528000ef          	jal	ra,8000761c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
800070f8:	80009437          	lui	s0,0x80009
800070fc:	c0040413          	addi	s0,s0,-1024 # 80008c00 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008c01>
80007100:	0440006f          	j	80007144 <z_init_static_threads+0xbc>
					    K_MSEC(thread_data->init_delay));
80007104:	41f7d593          	srai	a1,a5,0x1f
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
80007108:	0197d713          	srli	a4,a5,0x19
8000710c:	00759593          	slli	a1,a1,0x7
80007110:	00b765b3          	or	a1,a4,a1
80007114:	00779793          	slli	a5,a5,0x7
80007118:	3e778513          	addi	a0,a5,999
8000711c:	00f537b3          	sltu	a5,a0,a5
80007120:	3e800613          	li	a2,1000
80007124:	00000693          	li	a3,0
80007128:	00b785b3          	add	a1,a5,a1
8000712c:	8b8f90ef          	jal	ra,800001e4 <__udivdi3>
			schedule_new_thread(thread_data->init_thread,
80007130:	00058613          	mv	a2,a1
80007134:	00050593          	mv	a1,a0
80007138:	00048513          	mv	a0,s1
8000713c:	e11ff0ef          	jal	ra,80006f4c <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
80007140:	03040413          	addi	s0,s0,48
80007144:	800097b7          	lui	a5,0x80009
80007148:	c0078793          	addi	a5,a5,-1024 # 80008c00 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80008c01>
8000714c:	02f47063          	bgeu	s0,a5,8000716c <z_init_static_threads+0xe4>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
80007150:	02442783          	lw	a5,36(s0)
80007154:	fff00713          	li	a4,-1
80007158:	fee784e3          	beq	a5,a4,80007140 <z_init_static_threads+0xb8>
			schedule_new_thread(thread_data->init_thread,
8000715c:	00042483          	lw	s1,0(s0)
					    K_MSEC(thread_data->init_delay));
80007160:	fa07d2e3          	bgez	a5,80007104 <z_init_static_threads+0x7c>
80007164:	00000793          	li	a5,0
80007168:	f9dff06f          	j	80007104 <z_init_static_threads+0x7c>
	k_sched_unlock();
8000716c:	7ed000ef          	jal	ra,80008158 <k_sched_unlock>
}
80007170:	01c12083          	lw	ra,28(sp)
80007174:	01812403          	lw	s0,24(sp)
80007178:	01412483          	lw	s1,20(sp)
8000717c:	02010113          	addi	sp,sp,32
80007180:	00008067          	ret

80007184 <idle>:
80007184:	00308013          	addi	zero,ra,3
{
80007188:	ff010113          	addi	sp,sp,-16
8000718c:	00112623          	sw	ra,12(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007190:	300477f3          	csrrci	a5,mstatus,8
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
80007194:	bb9fe0ef          	jal	ra,80005d4c <arch_cpu_idle>
80007198:	ff9ff06f          	j	80007190 <idle+0xc>

8000719c <new_prio_for_inheritance>:
8000719c:	00308013          	addi	zero,ra,3
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
800071a0:	00b55463          	bge	a0,a1,800071a8 <new_prio_for_inheritance+0xc>
800071a4:	00050593          	mv	a1,a0
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
800071a8:	f8100793          	li	a5,-127
800071ac:	00f5c663          	blt	a1,a5,800071b8 <new_prio_for_inheritance+0x1c>
800071b0:	00058513          	mv	a0,a1
800071b4:	00008067          	ret
800071b8:	f8100513          	li	a0,-127
}
800071bc:	00008067          	ret

800071c0 <adjust_owner_prio>:
800071c0:	00308013          	addi	zero,ra,3
	if (mutex->owner->base.prio != new_prio) {
800071c4:	00852503          	lw	a0,8(a0)
800071c8:	00e50783          	lb	a5,14(a0)
800071cc:	00b79663          	bne	a5,a1,800071d8 <adjust_owner_prio+0x18>
	return false;
800071d0:	00000513          	li	a0,0
}
800071d4:	00008067          	ret
{
800071d8:	ff010113          	addi	sp,sp,-16
800071dc:	00112623          	sw	ra,12(sp)
		return z_set_prio(mutex->owner, new_prio);
800071e0:	629000ef          	jal	ra,80008008 <z_set_prio>
}
800071e4:	00c12083          	lw	ra,12(sp)
800071e8:	01010113          	addi	sp,sp,16
800071ec:	00008067          	ret

800071f0 <z_impl_k_mutex_lock>:
800071f0:	00308013          	addi	zero,ra,3
{
800071f4:	fe010113          	addi	sp,sp,-32
800071f8:	00112e23          	sw	ra,28(sp)
800071fc:	00812c23          	sw	s0,24(sp)
80007200:	00912a23          	sw	s1,20(sp)
80007204:	01212823          	sw	s2,16(sp)
80007208:	01312623          	sw	s3,12(sp)
8000720c:	01412423          	sw	s4,8(sp)
80007210:	00050413          	mv	s0,a0
80007214:	300474f3          	csrrci	s1,mstatus,8
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
80007218:	00c52783          	lw	a5,12(a0)
8000721c:	06079063          	bnez	a5,8000727c <z_impl_k_mutex_lock+0x8c>
					_current->base.prio :
80007220:	10079063          	bnez	a5,80007320 <z_impl_k_mutex_lock+0x130>
80007224:	8000a737          	lui	a4,0x8000a
80007228:	25870713          	addi	a4,a4,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
8000722c:	00872703          	lw	a4,8(a4)
80007230:	00e70703          	lb	a4,14(a4)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
80007234:	00e42823          	sw	a4,16(s0)
		mutex->lock_count++;
80007238:	00178793          	addi	a5,a5,1
8000723c:	00f42623          	sw	a5,12(s0)
		mutex->owner = _current;
80007240:	8000a7b7          	lui	a5,0x8000a
80007244:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007248:	0087a783          	lw	a5,8(a5)
8000724c:	00f42423          	sw	a5,8(s0)
	__asm__ volatile ("csrs mstatus, %0"
80007250:	0084f493          	andi	s1,s1,8
80007254:	3004a073          	csrs	mstatus,s1
		return 0;
80007258:	00000513          	li	a0,0
}
8000725c:	01c12083          	lw	ra,28(sp)
80007260:	01812403          	lw	s0,24(sp)
80007264:	01412483          	lw	s1,20(sp)
80007268:	01012903          	lw	s2,16(sp)
8000726c:	00c12983          	lw	s3,12(sp)
80007270:	00812a03          	lw	s4,8(sp)
80007274:	02010113          	addi	sp,sp,32
80007278:	00008067          	ret
8000727c:	00058993          	mv	s3,a1
80007280:	00060913          	mv	s2,a2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
80007284:	00852683          	lw	a3,8(a0)
80007288:	8000a737          	lui	a4,0x8000a
8000728c:	25870713          	addi	a4,a4,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007290:	00872703          	lw	a4,8(a4)
80007294:	f8e686e3          	beq	a3,a4,80007220 <z_impl_k_mutex_lock+0x30>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
80007298:	00b667b3          	or	a5,a2,a1
8000729c:	08078663          	beqz	a5,80007328 <z_impl_k_mutex_lock+0x138>
					    mutex->owner->base.prio);
800072a0:	00e68a03          	lb	s4,14(a3)
	new_prio = new_prio_for_inheritance(_current->base.prio,
800072a4:	000a0593          	mv	a1,s4
800072a8:	00e70503          	lb	a0,14(a4)
800072ac:	ef1ff0ef          	jal	ra,8000719c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
800072b0:	09454463          	blt	a0,s4,80007338 <z_impl_k_mutex_lock+0x148>
	bool resched = false;
800072b4:	00000a13          	li	s4,0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
800072b8:	00098693          	mv	a3,s3
800072bc:	00090713          	mv	a4,s2
800072c0:	00040613          	mv	a2,s0
800072c4:	00048593          	mv	a1,s1
800072c8:	8000a537          	lui	a0,0x8000a
800072cc:	27c50513          	addi	a0,a0,636 # 8000a27c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a27d>
800072d0:	4e1000ef          	jal	ra,80007fb0 <z_pend_curr>
	if (got_mutex == 0) {
800072d4:	f80504e3          	beqz	a0,8000725c <z_impl_k_mutex_lock+0x6c>
	__asm__ volatile ("csrrc %0, mstatus, %1"
800072d8:	300474f3          	csrrci	s1,mstatus,8
	if (likely(mutex->owner != NULL)) {
800072dc:	00842783          	lw	a5,8(s0)
800072e0:	06078a63          	beqz	a5,80007354 <z_impl_k_mutex_lock+0x164>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
800072e4:	00042783          	lw	a5,0(s0)
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
800072e8:	06878263          	beq	a5,s0,8000734c <z_impl_k_mutex_lock+0x15c>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
800072ec:	06078063          	beqz	a5,8000734c <z_impl_k_mutex_lock+0x15c>
800072f0:	01042583          	lw	a1,16(s0)
800072f4:	00e78503          	lb	a0,14(a5)
800072f8:	ea5ff0ef          	jal	ra,8000719c <new_prio_for_inheritance>
800072fc:	00050593          	mv	a1,a0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
80007300:	00040513          	mv	a0,s0
80007304:	ebdff0ef          	jal	ra,800071c0 <adjust_owner_prio>
80007308:	04051863          	bnez	a0,80007358 <z_impl_k_mutex_lock+0x168>
8000730c:	040a1663          	bnez	s4,80007358 <z_impl_k_mutex_lock+0x168>
	__asm__ volatile ("csrs mstatus, %0"
80007310:	0084f493          	andi	s1,s1,8
80007314:	3004a073          	csrs	mstatus,s1
	return -EAGAIN;
80007318:	ff500513          	li	a0,-11
8000731c:	f41ff06f          	j	8000725c <z_impl_k_mutex_lock+0x6c>
					_current->base.prio :
80007320:	01042703          	lw	a4,16(s0)
80007324:	f11ff06f          	j	80007234 <z_impl_k_mutex_lock+0x44>
80007328:	0084f493          	andi	s1,s1,8
8000732c:	3004a073          	csrs	mstatus,s1
		return -EBUSY;
80007330:	ff000513          	li	a0,-16
80007334:	f29ff06f          	j	8000725c <z_impl_k_mutex_lock+0x6c>
		resched = adjust_owner_prio(mutex, new_prio);
80007338:	00050593          	mv	a1,a0
8000733c:	00040513          	mv	a0,s0
80007340:	e81ff0ef          	jal	ra,800071c0 <adjust_owner_prio>
80007344:	00050a13          	mv	s4,a0
80007348:	f71ff06f          	j	800072b8 <z_impl_k_mutex_lock+0xc8>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
8000734c:	01042583          	lw	a1,16(s0)
80007350:	fb1ff06f          	j	80007300 <z_impl_k_mutex_lock+0x110>
	if (resched) {
80007354:	fa0a0ee3          	beqz	s4,80007310 <z_impl_k_mutex_lock+0x120>
		z_reschedule(&lock, key);
80007358:	00048593          	mv	a1,s1
8000735c:	8000a537          	lui	a0,0x8000a
80007360:	27c50513          	addi	a0,a0,636 # 8000a27c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a27d>
80007364:	464000ef          	jal	ra,800077c8 <z_reschedule>
	return -EAGAIN;
80007368:	ff500513          	li	a0,-11
8000736c:	ef1ff06f          	j	8000725c <z_impl_k_mutex_lock+0x6c>

80007370 <z_impl_k_mutex_unlock>:
80007370:	00308013          	addi	zero,ra,3
	CHECKIF(mutex->owner == NULL) {
80007374:	00852703          	lw	a4,8(a0)
80007378:	0a070663          	beqz	a4,80007424 <z_impl_k_mutex_unlock+0xb4>
{
8000737c:	ff010113          	addi	sp,sp,-16
80007380:	00112623          	sw	ra,12(sp)
80007384:	00812423          	sw	s0,8(sp)
80007388:	00912223          	sw	s1,4(sp)
8000738c:	00050413          	mv	s0,a0
	CHECKIF(mutex->owner != _current) {
80007390:	8000a7b7          	lui	a5,0x8000a
80007394:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007398:	0087a783          	lw	a5,8(a5)
8000739c:	08f71863          	bne	a4,a5,8000742c <z_impl_k_mutex_unlock+0xbc>
	if (mutex->lock_count > 1U) {
800073a0:	00c52783          	lw	a5,12(a0)
800073a4:	00100713          	li	a4,1
800073a8:	02f77263          	bgeu	a4,a5,800073cc <z_impl_k_mutex_unlock+0x5c>
		mutex->lock_count--;
800073ac:	fff78793          	addi	a5,a5,-1
800073b0:	00f52623          	sw	a5,12(a0)
	return 0;
800073b4:	00000513          	li	a0,0
}
800073b8:	00c12083          	lw	ra,12(sp)
800073bc:	00812403          	lw	s0,8(sp)
800073c0:	00412483          	lw	s1,4(sp)
800073c4:	01010113          	addi	sp,sp,16
800073c8:	00008067          	ret
	__asm__ volatile ("csrrc %0, mstatus, %1"
800073cc:	300474f3          	csrrci	s1,mstatus,8
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
800073d0:	01052583          	lw	a1,16(a0)
800073d4:	dedff0ef          	jal	ra,800071c0 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
800073d8:	00040513          	mv	a0,s0
800073dc:	67d000ef          	jal	ra,80008258 <z_unpend_first_thread>
	mutex->owner = new_owner;
800073e0:	00a42423          	sw	a0,8(s0)
	if (new_owner != NULL) {
800073e4:	02050663          	beqz	a0,80007410 <z_impl_k_mutex_unlock+0xa0>
		mutex->owner_orig_prio = new_owner->base.prio;
800073e8:	00e50783          	lb	a5,14(a0)
800073ec:	00f42823          	sw	a5,16(s0)
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
800073f0:	06052c23          	sw	zero,120(a0)
		z_ready_thread(new_owner);
800073f4:	075000ef          	jal	ra,80007c68 <z_ready_thread>
		z_reschedule(&lock, key);
800073f8:	00048593          	mv	a1,s1
800073fc:	8000a537          	lui	a0,0x8000a
80007400:	27c50513          	addi	a0,a0,636 # 8000a27c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a27d>
80007404:	3c4000ef          	jal	ra,800077c8 <z_reschedule>
	return 0;
80007408:	00000513          	li	a0,0
8000740c:	fadff06f          	j	800073b8 <z_impl_k_mutex_unlock+0x48>
		mutex->lock_count = 0U;
80007410:	00042623          	sw	zero,12(s0)
	__asm__ volatile ("csrs mstatus, %0"
80007414:	0084f493          	andi	s1,s1,8
80007418:	3004a073          	csrs	mstatus,s1
	return 0;
8000741c:	00000513          	li	a0,0
80007420:	f99ff06f          	j	800073b8 <z_impl_k_mutex_unlock+0x48>
		return -EINVAL;
80007424:	fea00513          	li	a0,-22
}
80007428:	00008067          	ret
		return -EPERM;
8000742c:	fff00513          	li	a0,-1
80007430:	f89ff06f          	j	800073b8 <z_impl_k_mutex_unlock+0x48>

80007434 <sliceable>:
80007434:	00308013          	addi	zero,ra,3
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
80007438:	00e55703          	lhu	a4,14(a0)
		&& !z_is_idle_thread_object(thread);
8000743c:	07f00793          	li	a5,127
80007440:	02e7ea63          	bltu	a5,a4,80007474 <sliceable+0x40>
	uint8_t state = thread->base.thread_state;
80007444:	00d54783          	lbu	a5,13(a0)
		&& !z_is_thread_prevented_from_running(thread)
80007448:	01f7f793          	andi	a5,a5,31
8000744c:	02079863          	bnez	a5,8000747c <sliceable+0x48>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
80007450:	00e50703          	lb	a4,14(a0)
80007454:	8000a7b7          	lui	a5,0x8000a
80007458:	da07a783          	lw	a5,-608(a5) # 80009da0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009da1>
8000745c:	02f74463          	blt	a4,a5,80007484 <sliceable+0x50>
		&& !z_is_idle_thread_object(thread);
80007460:	8000a7b7          	lui	a5,0x8000a
80007464:	ee078793          	addi	a5,a5,-288 # 80009ee0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009ee1>
80007468:	02f50263          	beq	a0,a5,8000748c <sliceable+0x58>
8000746c:	00100513          	li	a0,1
80007470:	00008067          	ret
80007474:	00000513          	li	a0,0
80007478:	00008067          	ret
8000747c:	00000513          	li	a0,0
80007480:	00008067          	ret
80007484:	00000513          	li	a0,0
80007488:	00008067          	ret
8000748c:	00000513          	li	a0,0
}
80007490:	00008067          	ret

80007494 <thread_active_elsewhere>:
80007494:	00308013          	addi	zero,ra,3
}
80007498:	00000513          	li	a0,0
8000749c:	00008067          	ret

800074a0 <pended_on_thread>:
800074a0:	00308013          	addi	zero,ra,3
}
800074a4:	00852503          	lw	a0,8(a0)
800074a8:	00008067          	ret

800074ac <add_thread_timeout>:
800074ac:	00308013          	addi	zero,ra,3
{
800074b0:	00060693          	mv	a3,a2
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
800074b4:	fff00793          	li	a5,-1
800074b8:	00b79663          	bne	a5,a1,800074c4 <add_thread_timeout+0x18>
800074bc:	00f61463          	bne	a2,a5,800074c4 <add_thread_timeout+0x18>
800074c0:	00008067          	ret
{
800074c4:	ff010113          	addi	sp,sp,-16
800074c8:	00112623          	sw	ra,12(sp)
800074cc:	00058613          	mv	a2,a1
800074d0:	800085b7          	lui	a1,0x80008
800074d4:	d2058593          	addi	a1,a1,-736 # 80007d20 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80007d21>
800074d8:	01850513          	addi	a0,a0,24
800074dc:	07c010ef          	jal	ra,80008558 <z_add_timeout>
}
800074e0:	00c12083          	lw	ra,12(sp)
800074e4:	01010113          	addi	sp,sp,16
800074e8:	00008067          	ret

800074ec <z_sched_prio_cmp>:
800074ec:	00308013          	addi	zero,ra,3
	int32_t b1 = thread_1->base.prio;
800074f0:	00e50783          	lb	a5,14(a0)
	int32_t b2 = thread_2->base.prio;
800074f4:	00e58503          	lb	a0,14(a1)
	if (b1 != b2) {
800074f8:	00a78663          	beq	a5,a0,80007504 <z_sched_prio_cmp+0x18>
		return b2 - b1;
800074fc:	40f50533          	sub	a0,a0,a5
80007500:	00008067          	ret
	return 0;
80007504:	00000513          	li	a0,0
}
80007508:	00008067          	ret

8000750c <z_reset_time_slice>:
8000750c:	00308013          	addi	zero,ra,3
{
80007510:	ff010113          	addi	sp,sp,-16
80007514:	00112623          	sw	ra,12(sp)
80007518:	00812423          	sw	s0,8(sp)
	int ret = slice_ticks;
8000751c:	8000a7b7          	lui	a5,0x8000a
80007520:	da47a403          	lw	s0,-604(a5) # 80009da4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009da5>
	if (slice_time(curr) != 0) {
80007524:	00041a63          	bnez	s0,80007538 <z_reset_time_slice+0x2c>
}
80007528:	00c12083          	lw	ra,12(sp)
8000752c:	00812403          	lw	s0,8(sp)
80007530:	01010113          	addi	sp,sp,16
80007534:	00008067          	ret
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
80007538:	c90ff0ef          	jal	ra,800069c8 <sys_clock_elapsed>
8000753c:	00a40433          	add	s0,s0,a0
80007540:	8000a7b7          	lui	a5,0x8000a
80007544:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007548:	0087a823          	sw	s0,16(a5)
		z_set_timeout_expiry(slice_time(curr), false);
8000754c:	00000593          	li	a1,0
80007550:	8000a7b7          	lui	a5,0x8000a
80007554:	da47a503          	lw	a0,-604(a5) # 80009da4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009da5>
80007558:	23c010ef          	jal	ra,80008794 <z_set_timeout_expiry>
}
8000755c:	fcdff06f          	j	80007528 <z_reset_time_slice+0x1c>

80007560 <k_sched_time_slice_set>:
80007560:	00308013          	addi	zero,ra,3
{
80007564:	ff010113          	addi	sp,sp,-16
80007568:	00112623          	sw	ra,12(sp)
8000756c:	00812423          	sw	s0,8(sp)
80007570:	00912223          	sw	s1,4(sp)
80007574:	01212023          	sw	s2,0(sp)
80007578:	00050413          	mv	s0,a0
8000757c:	00058493          	mv	s1,a1
	LOCKED(&sched_spinlock) {
80007580:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007584:	30047973          	csrrci	s2,mstatus,8
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
80007588:	0300006f          	j	800075b8 <k_sched_time_slice_set+0x58>
			slice_ticks = MAX(2, slice_ticks);
8000758c:	8000a7b7          	lui	a5,0x8000a
80007590:	daa7a223          	sw	a0,-604(a5) # 80009da4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009da5>
		slice_max_prio = prio;
80007594:	8000a7b7          	lui	a5,0x8000a
80007598:	da97a023          	sw	s1,-608(a5) # 80009da0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009da1>
		z_reset_time_slice(_current);
8000759c:	8000a7b7          	lui	a5,0x8000a
800075a0:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
800075a4:	0087a503          	lw	a0,8(a5)
800075a8:	f65ff0ef          	jal	ra,8000750c <z_reset_time_slice>
			  : "r" (key & MSTATUS_IEN)
800075ac:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
800075b0:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
800075b4:	00100793          	li	a5,1
800075b8:	04079663          	bnez	a5,80007604 <k_sched_time_slice_set+0xa4>
		_current_cpu->slice_ticks = 0;
800075bc:	8000a7b7          	lui	a5,0x8000a
800075c0:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
800075c4:	0007a823          	sw	zero,16(a5)
			return (uint32_t)((t * to_hz + off) / from_hz);
800075c8:	01945593          	srli	a1,s0,0x19
800075cc:	00741793          	slli	a5,s0,0x7
800075d0:	3e778513          	addi	a0,a5,999
800075d4:	00f537b3          	sltu	a5,a0,a5
800075d8:	3e800613          	li	a2,1000
800075dc:	00000693          	li	a3,0
800075e0:	00b785b3          	add	a1,a5,a1
800075e4:	c01f80ef          	jal	ra,800001e4 <__udivdi3>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
800075e8:	8000a7b7          	lui	a5,0x8000a
800075ec:	daa7a223          	sw	a0,-604(a5) # 80009da4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009da5>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
800075f0:	fa8052e3          	blez	s0,80007594 <k_sched_time_slice_set+0x34>
			slice_ticks = MAX(2, slice_ticks);
800075f4:	00200793          	li	a5,2
800075f8:	f8f55ae3          	bge	a0,a5,8000758c <k_sched_time_slice_set+0x2c>
800075fc:	00200513          	li	a0,2
80007600:	f8dff06f          	j	8000758c <k_sched_time_slice_set+0x2c>
}
80007604:	00c12083          	lw	ra,12(sp)
80007608:	00812403          	lw	s0,8(sp)
8000760c:	00412483          	lw	s1,4(sp)
80007610:	00012903          	lw	s2,0(sp)
80007614:	01010113          	addi	sp,sp,16
80007618:	00008067          	ret

8000761c <k_sched_lock>:
8000761c:	00308013          	addi	zero,ra,3
	LOCKED(&sched_spinlock) {
80007620:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007624:	300476f3          	csrrci	a3,mstatus,8
80007628:	0280006f          	j	80007650 <k_sched_lock+0x34>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
8000762c:	8000a7b7          	lui	a5,0x8000a
80007630:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007634:	0087a703          	lw	a4,8(a5)
80007638:	00f74783          	lbu	a5,15(a4)
8000763c:	fff78793          	addi	a5,a5,-1
80007640:	00f707a3          	sb	a5,15(a4)
			  : "r" (key & MSTATUS_IEN)
80007644:	0086f793          	andi	a5,a3,8
	__asm__ volatile ("csrs mstatus, %0"
80007648:	3007a073          	csrs	mstatus,a5
8000764c:	00100793          	li	a5,1
80007650:	fc078ee3          	beqz	a5,8000762c <k_sched_lock+0x10>
}
80007654:	00008067          	ret

80007658 <z_swap_next_thread>:
80007658:	00308013          	addi	zero,ra,3
	return _kernel.ready_q.cache;
8000765c:	8000a7b7          	lui	a5,0x8000a
}
80007660:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007664:	0187a503          	lw	a0,24(a5)
80007668:	00008067          	ret

8000766c <z_swap_irqlock>:
8000766c:	00308013          	addi	zero,ra,3
{
80007670:	ff010113          	addi	sp,sp,-16
80007674:	00112623          	sw	ra,12(sp)
80007678:	00812423          	sw	s0,8(sp)
8000767c:	00912223          	sw	s1,4(sp)
80007680:	01212023          	sw	s2,0(sp)
80007684:	00050413          	mv	s0,a0
	old_thread = _current;
80007688:	8000a7b7          	lui	a5,0x8000a
8000768c:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007690:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
80007694:	ff500793          	li	a5,-11
80007698:	06f92c23          	sw	a5,120(s2)
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000769c:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
800076a0:	fb9ff0ef          	jal	ra,80007658 <z_swap_next_thread>
	if (new_thread != old_thread) {
800076a4:	02a90263          	beq	s2,a0,800076c8 <z_swap_irqlock+0x5c>
800076a8:	00050493          	mv	s1,a0
		_current_cpu->current = new_thread;
800076ac:	8000a7b7          	lui	a5,0x8000a
800076b0:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
800076b4:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
800076b8:	e55ff0ef          	jal	ra,8000750c <z_reset_time_slice>
800076bc:	00090593          	mv	a1,s2
800076c0:	07c4a503          	lw	a0,124(s1)
800076c4:	835fe0ef          	jal	ra,80005ef8 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
800076c8:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
800076cc:	30042073          	csrs	mstatus,s0
	return _current->swap_retval;
800076d0:	8000a7b7          	lui	a5,0x8000a
800076d4:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
800076d8:	0087a783          	lw	a5,8(a5)
}
800076dc:	0787a503          	lw	a0,120(a5)
800076e0:	00c12083          	lw	ra,12(sp)
800076e4:	00812403          	lw	s0,8(sp)
800076e8:	00412483          	lw	s1,4(sp)
800076ec:	00012903          	lw	s2,0(sp)
800076f0:	01010113          	addi	sp,sp,16
800076f4:	00008067          	ret

800076f8 <z_reschedule_irqlock>:
800076f8:	00308013          	addi	zero,ra,3
			  : "memory");
}

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	return (key & MSTATUS_IEN) != 0;
800076fc:	00857793          	andi	a5,a0,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
80007700:	02078463          	beqz	a5,80007728 <z_reschedule_irqlock+0x30>
	bool ret = arch_curr_cpu()->nested != 0U;

	arch_irq_unlock(key);
	return ret;
#else
	return _kernel.cpus[0].nested != 0U;
80007704:	8000a737          	lui	a4,0x8000a
80007708:	25872703          	lw	a4,600(a4) # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
8000770c:	00071e63          	bnez	a4,80007728 <z_reschedule_irqlock+0x30>
{
80007710:	ff010113          	addi	sp,sp,-16
80007714:	00112623          	sw	ra,12(sp)
		z_swap_irqlock(key);
80007718:	f55ff0ef          	jal	ra,8000766c <z_swap_irqlock>
}
8000771c:	00c12083          	lw	ra,12(sp)
80007720:	01010113          	addi	sp,sp,16
80007724:	00008067          	ret
	__asm__ volatile ("csrs mstatus, %0"
80007728:	3007a073          	csrs	mstatus,a5
		signal_pending_ipi();
8000772c:	00008067          	ret

80007730 <z_swap>:
80007730:	00308013          	addi	zero,ra,3
{
80007734:	ff010113          	addi	sp,sp,-16
80007738:	00112623          	sw	ra,12(sp)
8000773c:	00812423          	sw	s0,8(sp)
80007740:	00912223          	sw	s1,4(sp)
80007744:	01212023          	sw	s2,0(sp)
80007748:	00058413          	mv	s0,a1
	old_thread = _current;
8000774c:	8000a7b7          	lui	a5,0x8000a
80007750:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007754:	0087a903          	lw	s2,8(a5)
	old_thread->swap_retval = -EAGAIN;
80007758:	ff500793          	li	a5,-11
8000775c:	06f92c23          	sw	a5,120(s2)
	if (!is_spinlock || lock != &sched_spinlock) {
80007760:	8000a7b7          	lui	a5,0x8000a
80007764:	27c78793          	addi	a5,a5,636 # 8000a27c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a27d>
80007768:	00a78463          	beq	a5,a0,80007770 <z_swap+0x40>
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000776c:	300477f3          	csrrci	a5,mstatus,8
	new_thread = z_swap_next_thread();
80007770:	ee9ff0ef          	jal	ra,80007658 <z_swap_next_thread>
80007774:	00050493          	mv	s1,a0
	if (new_thread != old_thread) {
80007778:	02a90063          	beq	s2,a0,80007798 <z_swap+0x68>
		_current_cpu->current = new_thread;
8000777c:	8000a7b7          	lui	a5,0x8000a
80007780:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007784:	00a7a423          	sw	a0,8(a5)
		z_reset_time_slice(new_thread);
80007788:	d85ff0ef          	jal	ra,8000750c <z_reset_time_slice>
	z_riscv_switch(new, old);
8000778c:	00090593          	mv	a1,s2
80007790:	07c4a503          	lw	a0,124(s1)
80007794:	f64fe0ef          	jal	ra,80005ef8 <z_riscv_switch>
			  : "r" (key & MSTATUS_IEN)
80007798:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
8000779c:	30042073          	csrs	mstatus,s0
	return _current->swap_retval;
800077a0:	8000a7b7          	lui	a5,0x8000a
800077a4:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
800077a8:	0087a783          	lw	a5,8(a5)
}
800077ac:	0787a503          	lw	a0,120(a5)
800077b0:	00c12083          	lw	ra,12(sp)
800077b4:	00812403          	lw	s0,8(sp)
800077b8:	00412483          	lw	s1,4(sp)
800077bc:	00012903          	lw	s2,0(sp)
800077c0:	01010113          	addi	sp,sp,16
800077c4:	00008067          	ret

800077c8 <z_reschedule>:
800077c8:	00308013          	addi	zero,ra,3
	return (key & MSTATUS_IEN) != 0;
800077cc:	0085f793          	andi	a5,a1,8
	return arch_irq_unlocked(key) && !arch_is_in_isr();
800077d0:	02078e63          	beqz	a5,8000780c <z_reschedule+0x44>
	return _kernel.cpus[0].nested != 0U;
800077d4:	8000a737          	lui	a4,0x8000a
800077d8:	25872703          	lw	a4,600(a4) # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
800077dc:	02071863          	bnez	a4,8000780c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
800077e0:	8000a737          	lui	a4,0x8000a
800077e4:	25870713          	addi	a4,a4,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
800077e8:	01872683          	lw	a3,24(a4)
	return new_thread != _current;
800077ec:	00872703          	lw	a4,8(a4)
	if (resched(key.key) && need_swap()) {
800077f0:	00e68e63          	beq	a3,a4,8000780c <z_reschedule+0x44>
{
800077f4:	ff010113          	addi	sp,sp,-16
800077f8:	00112623          	sw	ra,12(sp)
		z_swap(lock, key);
800077fc:	f35ff0ef          	jal	ra,80007730 <z_swap>
}
80007800:	00c12083          	lw	ra,12(sp)
80007804:	01010113          	addi	sp,sp,16
80007808:	00008067          	ret
	__asm__ volatile ("csrs mstatus, %0"
8000780c:	3007a073          	csrs	mstatus,a5
		signal_pending_ipi();
80007810:	00008067          	ret

80007814 <z_get_next_switch_handle>:
80007814:	00308013          	addi	zero,ra,3
	z_sched_usage_switch(_kernel.ready_q.cache);
80007818:	8000a7b7          	lui	a5,0x8000a
8000781c:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007820:	0187a703          	lw	a4,24(a5)
	_current->switch_handle = interrupted;
80007824:	0087a683          	lw	a3,8(a5)
80007828:	06a6ae23          	sw	a0,124(a3)
	_current_cpu->current = new_thread;
8000782c:	00e7a423          	sw	a4,8(a5)
}
80007830:	07c72503          	lw	a0,124(a4)
80007834:	00008067          	ret

80007838 <z_priq_dumb_remove>:
80007838:	00308013          	addi	zero,ra,3
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
8000783c:	0045a703          	lw	a4,4(a1)
	sys_dnode_t *const next = node->next;
80007840:	0005a783          	lw	a5,0(a1)

	prev->next = next;
80007844:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
80007848:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
8000784c:	0005a023          	sw	zero,0(a1)
	node->prev = NULL;
80007850:	0005a223          	sw	zero,4(a1)
}
80007854:	00008067          	ret

80007858 <unpend_thread_no_timeout>:
80007858:	00308013          	addi	zero,ra,3
{
8000785c:	ff010113          	addi	sp,sp,-16
80007860:	00112623          	sw	ra,12(sp)
80007864:	00812423          	sw	s0,8(sp)
80007868:	00050413          	mv	s0,a0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
8000786c:	c35ff0ef          	jal	ra,800074a0 <pended_on_thread>
80007870:	00040593          	mv	a1,s0
80007874:	fc5ff0ef          	jal	ra,80007838 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
80007878:	00d44783          	lbu	a5,13(s0)
8000787c:	ffd7f793          	andi	a5,a5,-3
80007880:	00f406a3          	sb	a5,13(s0)
	thread->base.pended_on = NULL;
80007884:	00042423          	sw	zero,8(s0)
}
80007888:	00c12083          	lw	ra,12(sp)
8000788c:	00812403          	lw	s0,8(sp)
80007890:	01010113          	addi	sp,sp,16
80007894:	00008067          	ret

80007898 <z_priq_dumb_best>:
80007898:	00308013          	addi	zero,ra,3
{
8000789c:	00050793          	mv	a5,a0
	return list->head == list;
800078a0:	00052503          	lw	a0,0(a0)
	return sys_dlist_is_empty(list) ? NULL : list->head;
800078a4:	00a78463          	beq	a5,a0,800078ac <z_priq_dumb_best+0x14>
}
800078a8:	00008067          	ret
	struct k_thread *thread = NULL;
800078ac:	00000513          	li	a0,0
	return thread;
800078b0:	ff9ff06f          	j	800078a8 <z_priq_dumb_best+0x10>

800078b4 <update_cache>:
800078b4:	00308013          	addi	zero,ra,3
{
800078b8:	ff010113          	addi	sp,sp,-16
800078bc:	00112623          	sw	ra,12(sp)
800078c0:	00812423          	sw	s0,8(sp)
800078c4:	00912223          	sw	s1,4(sp)
800078c8:	00050493          	mv	s1,a0
	return _priq_run_best(curr_cpu_runq());
800078cc:	8000a537          	lui	a0,0x8000a
800078d0:	27450513          	addi	a0,a0,628 # 8000a274 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a275>
800078d4:	fc5ff0ef          	jal	ra,80007898 <z_priq_dumb_best>
800078d8:	00050413          	mv	s0,a0
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
800078dc:	02050e63          	beqz	a0,80007918 <update_cache+0x64>
	if (preempt_ok != 0) {
800078e0:	04049463          	bnez	s1,80007928 <update_cache+0x74>
	if (z_is_thread_prevented_from_running(_current)) {
800078e4:	8000a7b7          	lui	a5,0x8000a
800078e8:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
800078ec:	0087a703          	lw	a4,8(a5)
	uint8_t state = thread->base.thread_state;
800078f0:	00d74783          	lbu	a5,13(a4)
800078f4:	01f7f793          	andi	a5,a5,31
800078f8:	02079863          	bnez	a5,80007928 <update_cache+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
800078fc:	00e75683          	lhu	a3,14(a4)
	if (is_preempt(_current) || is_metairq(thread)) {
80007900:	07f00793          	li	a5,127
80007904:	02d7f263          	bgeu	a5,a3,80007928 <update_cache+0x74>
		_kernel.ready_q.cache = _current;
80007908:	8000a7b7          	lui	a5,0x8000a
8000790c:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007910:	00e7ac23          	sw	a4,24(a5)
80007914:	0380006f          	j	8000794c <update_cache+0x98>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
80007918:	8000a7b7          	lui	a5,0x8000a
8000791c:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007920:	00c7a403          	lw	s0,12(a5)
80007924:	fbdff06f          	j	800078e0 <update_cache+0x2c>
		if (thread != _current) {
80007928:	8000a7b7          	lui	a5,0x8000a
8000792c:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007930:	0087a783          	lw	a5,8(a5)
80007934:	00878663          	beq	a5,s0,80007940 <update_cache+0x8c>
			z_reset_time_slice(thread);
80007938:	00040513          	mv	a0,s0
8000793c:	bd1ff0ef          	jal	ra,8000750c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
80007940:	8000a7b7          	lui	a5,0x8000a
80007944:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007948:	0087ac23          	sw	s0,24(a5)
}
8000794c:	00c12083          	lw	ra,12(sp)
80007950:	00812403          	lw	s0,8(sp)
80007954:	00412483          	lw	s1,4(sp)
80007958:	01010113          	addi	sp,sp,16
8000795c:	00008067          	ret

80007960 <move_thread_to_end_of_prio_q>:
80007960:	00308013          	addi	zero,ra,3
{
80007964:	ff010113          	addi	sp,sp,-16
80007968:	00112623          	sw	ra,12(sp)
8000796c:	00812423          	sw	s0,8(sp)
80007970:	00912223          	sw	s1,4(sp)
80007974:	00050493          	mv	s1,a0
	return (thread->base.thread_state & state) != 0U;
80007978:	00d54783          	lbu	a5,13(a0)
	if (z_is_thread_queued(thread)) {
8000797c:	01879713          	slli	a4,a5,0x18
80007980:	41875713          	srai	a4,a4,0x18
80007984:	02074863          	bltz	a4,800079b4 <move_thread_to_end_of_prio_q+0x54>
	thread->base.thread_state |= _THREAD_QUEUED;
80007988:	00d4c783          	lbu	a5,13(s1)
8000798c:	f807e793          	ori	a5,a5,-128
80007990:	00f486a3          	sb	a5,13(s1)
	return list->head == list;
80007994:	8000a7b7          	lui	a5,0x8000a
80007998:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
8000799c:	01c7a403          	lw	s0,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
800079a0:	8000a7b7          	lui	a5,0x8000a
800079a4:	27478793          	addi	a5,a5,628 # 8000a274 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a275>
800079a8:	04f41263          	bne	s0,a5,800079ec <move_thread_to_end_of_prio_q+0x8c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800079ac:	00000413          	li	s0,0
800079b0:	03c0006f          	j	800079ec <move_thread_to_end_of_prio_q+0x8c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
800079b4:	07f7f793          	andi	a5,a5,127
800079b8:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
800079bc:	00050593          	mv	a1,a0
800079c0:	8000a537          	lui	a0,0x8000a
800079c4:	27450513          	addi	a0,a0,628 # 8000a274 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a275>
800079c8:	e71ff0ef          	jal	ra,80007838 <z_priq_dumb_remove>
}
800079cc:	fbdff06f          	j	80007988 <move_thread_to_end_of_prio_q+0x28>
	sys_dnode_t *const prev = successor->prev;
800079d0:	00442783          	lw	a5,4(s0)
	node->prev = prev;
800079d4:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
800079d8:	0084a023          	sw	s0,0(s1)
	prev->next = node;
800079dc:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
800079e0:	00942223          	sw	s1,4(s0)
}
800079e4:	05c0006f          	j	80007a40 <move_thread_to_end_of_prio_q+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
800079e8:	00000413          	li	s0,0
800079ec:	02040863          	beqz	s0,80007a1c <move_thread_to_end_of_prio_q+0xbc>
		if (z_sched_prio_cmp(thread, t) > 0) {
800079f0:	00040593          	mv	a1,s0
800079f4:	00048513          	mv	a0,s1
800079f8:	af5ff0ef          	jal	ra,800074ec <z_sched_prio_cmp>
800079fc:	fca04ae3          	bgtz	a0,800079d0 <move_thread_to_end_of_prio_q+0x70>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80007a00:	fe0406e3          	beqz	s0,800079ec <move_thread_to_end_of_prio_q+0x8c>
	return (node == list->tail) ? NULL : node->next;
80007a04:	8000a7b7          	lui	a5,0x8000a
80007a08:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007a0c:	0207a783          	lw	a5,32(a5)
80007a10:	fcf40ce3          	beq	s0,a5,800079e8 <move_thread_to_end_of_prio_q+0x88>
80007a14:	00042403          	lw	s0,0(s0)
80007a18:	fd5ff06f          	j	800079ec <move_thread_to_end_of_prio_q+0x8c>
	sys_dnode_t *const tail = list->tail;
80007a1c:	8000a7b7          	lui	a5,0x8000a
80007a20:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007a24:	0207a683          	lw	a3,32(a5)
	node->next = list;
80007a28:	8000a737          	lui	a4,0x8000a
80007a2c:	27470713          	addi	a4,a4,628 # 8000a274 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a275>
80007a30:	00e4a023          	sw	a4,0(s1)
	node->prev = tail;
80007a34:	00d4a223          	sw	a3,4(s1)
	tail->next = node;
80007a38:	0096a023          	sw	s1,0(a3)
	list->tail = node;
80007a3c:	0297a023          	sw	s1,32(a5)
	update_cache(thread == _current);
80007a40:	8000a7b7          	lui	a5,0x8000a
80007a44:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007a48:	0087a503          	lw	a0,8(a5)
80007a4c:	40950533          	sub	a0,a0,s1
80007a50:	00153513          	seqz	a0,a0
80007a54:	e61ff0ef          	jal	ra,800078b4 <update_cache>
}
80007a58:	00c12083          	lw	ra,12(sp)
80007a5c:	00812403          	lw	s0,8(sp)
80007a60:	00412483          	lw	s1,4(sp)
80007a64:	01010113          	addi	sp,sp,16
80007a68:	00008067          	ret

80007a6c <slice_expired_locked>:
80007a6c:	00308013          	addi	zero,ra,3
{
80007a70:	ff010113          	addi	sp,sp,-16
80007a74:	00112623          	sw	ra,12(sp)
80007a78:	00812423          	sw	s0,8(sp)
80007a7c:	00912223          	sw	s1,4(sp)
80007a80:	00050413          	mv	s0,a0
	struct k_thread *curr = _current;
80007a84:	8000a7b7          	lui	a5,0x8000a
80007a88:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007a8c:	0087a483          	lw	s1,8(a5)
	uint8_t state = thread->base.thread_state;
80007a90:	00d4c783          	lbu	a5,13(s1)
	if (!z_is_thread_prevented_from_running(curr)) {
80007a94:	01f7f793          	andi	a5,a5,31
80007a98:	02078263          	beqz	a5,80007abc <slice_expired_locked+0x50>
	z_reset_time_slice(curr);
80007a9c:	00048513          	mv	a0,s1
80007aa0:	a6dff0ef          	jal	ra,8000750c <z_reset_time_slice>
}
80007aa4:	00040513          	mv	a0,s0
80007aa8:	00c12083          	lw	ra,12(sp)
80007aac:	00812403          	lw	s0,8(sp)
80007ab0:	00412483          	lw	s1,4(sp)
80007ab4:	01010113          	addi	sp,sp,16
80007ab8:	00008067          	ret
		move_thread_to_end_of_prio_q(curr);
80007abc:	00048513          	mv	a0,s1
80007ac0:	ea1ff0ef          	jal	ra,80007960 <move_thread_to_end_of_prio_q>
80007ac4:	fd9ff06f          	j	80007a9c <slice_expired_locked+0x30>

80007ac8 <z_time_slice>:
80007ac8:	00308013          	addi	zero,ra,3
{
80007acc:	ff010113          	addi	sp,sp,-16
80007ad0:	00112623          	sw	ra,12(sp)
80007ad4:	00812423          	sw	s0,8(sp)
80007ad8:	00912223          	sw	s1,4(sp)
80007adc:	01212023          	sw	s2,0(sp)
80007ae0:	00050913          	mv	s2,a0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007ae4:	300474f3          	csrrci	s1,mstatus,8
80007ae8:	00048413          	mv	s0,s1
	if (slice_time(_current) && sliceable(_current)) {
80007aec:	8000a7b7          	lui	a5,0x8000a
80007af0:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007af4:	0087a503          	lw	a0,8(a5)
	int ret = slice_ticks;
80007af8:	8000a7b7          	lui	a5,0x8000a
80007afc:	da47a783          	lw	a5,-604(a5) # 80009da4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009da5>
	if (slice_time(_current) && sliceable(_current)) {
80007b00:	04078063          	beqz	a5,80007b40 <z_time_slice+0x78>
80007b04:	931ff0ef          	jal	ra,80007434 <sliceable>
80007b08:	02050c63          	beqz	a0,80007b40 <z_time_slice+0x78>
		if (ticks >= _current_cpu->slice_ticks) {
80007b0c:	8000a7b7          	lui	a5,0x8000a
80007b10:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007b14:	0107a783          	lw	a5,16(a5)
80007b18:	00f95c63          	bge	s2,a5,80007b30 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
80007b1c:	8000a737          	lui	a4,0x8000a
80007b20:	412787b3          	sub	a5,a5,s2
80007b24:	25870713          	addi	a4,a4,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007b28:	00f72823          	sw	a5,16(a4)
80007b2c:	0200006f          	j	80007b4c <z_time_slice+0x84>
			key = slice_expired_locked(key);
80007b30:	00048513          	mv	a0,s1
80007b34:	f39ff0ef          	jal	ra,80007a6c <slice_expired_locked>
80007b38:	00050413          	mv	s0,a0
80007b3c:	0100006f          	j	80007b4c <z_time_slice+0x84>
		_current_cpu->slice_ticks = 0;
80007b40:	8000a7b7          	lui	a5,0x8000a
80007b44:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007b48:	0007a823          	sw	zero,16(a5)
			  : "r" (key & MSTATUS_IEN)
80007b4c:	00847413          	andi	s0,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80007b50:	30042073          	csrs	mstatus,s0
}
80007b54:	00c12083          	lw	ra,12(sp)
80007b58:	00812403          	lw	s0,8(sp)
80007b5c:	00412483          	lw	s1,4(sp)
80007b60:	00012903          	lw	s2,0(sp)
80007b64:	01010113          	addi	sp,sp,16
80007b68:	00008067          	ret

80007b6c <ready_thread>:
80007b6c:	00308013          	addi	zero,ra,3
	return (thread->base.thread_state & state) != 0U;
80007b70:	00d54783          	lbu	a5,13(a0)
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
80007b74:	01879713          	slli	a4,a5,0x18
80007b78:	41875713          	srai	a4,a4,0x18
80007b7c:	0e074463          	bltz	a4,80007c64 <ready_thread+0xf8>
{
80007b80:	ff010113          	addi	sp,sp,-16
80007b84:	00112623          	sw	ra,12(sp)
80007b88:	00812423          	sw	s0,8(sp)
80007b8c:	00912223          	sw	s1,4(sp)
80007b90:	01212023          	sw	s2,0(sp)
80007b94:	00050413          	mv	s0,a0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
80007b98:	01f7f713          	andi	a4,a5,31
80007b9c:	00071663          	bnez	a4,80007ba8 <ready_thread+0x3c>
	return node->next != NULL;
80007ba0:	01852903          	lw	s2,24(a0)
80007ba4:	00090e63          	beqz	s2,80007bc0 <ready_thread+0x54>
}
80007ba8:	00c12083          	lw	ra,12(sp)
80007bac:	00812403          	lw	s0,8(sp)
80007bb0:	00412483          	lw	s1,4(sp)
80007bb4:	00012903          	lw	s2,0(sp)
80007bb8:	01010113          	addi	sp,sp,16
80007bbc:	00008067          	ret
	thread->base.thread_state |= _THREAD_QUEUED;
80007bc0:	f807e793          	ori	a5,a5,-128
80007bc4:	00f506a3          	sb	a5,13(a0)
	return list->head == list;
80007bc8:	8000a7b7          	lui	a5,0x8000a
80007bcc:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007bd0:	01c7a483          	lw	s1,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80007bd4:	8000a7b7          	lui	a5,0x8000a
80007bd8:	27478793          	addi	a5,a5,628 # 8000a274 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a275>
80007bdc:	02f49463          	bne	s1,a5,80007c04 <ready_thread+0x98>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80007be0:	00090493          	mv	s1,s2
80007be4:	0200006f          	j	80007c04 <ready_thread+0x98>
	sys_dnode_t *const prev = successor->prev;
80007be8:	0044a783          	lw	a5,4(s1)
	node->prev = prev;
80007bec:	00f42223          	sw	a5,4(s0)
	node->next = successor;
80007bf0:	00942023          	sw	s1,0(s0)
	prev->next = node;
80007bf4:	0087a023          	sw	s0,0(a5)
	successor->prev = node;
80007bf8:	0084a223          	sw	s0,4(s1)
}
80007bfc:	05c0006f          	j	80007c58 <ready_thread+0xec>
80007c00:	00090493          	mv	s1,s2
80007c04:	02048863          	beqz	s1,80007c34 <ready_thread+0xc8>
		if (z_sched_prio_cmp(thread, t) > 0) {
80007c08:	00048593          	mv	a1,s1
80007c0c:	00040513          	mv	a0,s0
80007c10:	8ddff0ef          	jal	ra,800074ec <z_sched_prio_cmp>
80007c14:	fca04ae3          	bgtz	a0,80007be8 <ready_thread+0x7c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80007c18:	fe0486e3          	beqz	s1,80007c04 <ready_thread+0x98>
	return (node == list->tail) ? NULL : node->next;
80007c1c:	8000a7b7          	lui	a5,0x8000a
80007c20:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007c24:	0207a783          	lw	a5,32(a5)
80007c28:	fcf48ce3          	beq	s1,a5,80007c00 <ready_thread+0x94>
80007c2c:	0004a483          	lw	s1,0(s1)
80007c30:	fd5ff06f          	j	80007c04 <ready_thread+0x98>
	sys_dnode_t *const tail = list->tail;
80007c34:	8000a7b7          	lui	a5,0x8000a
80007c38:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007c3c:	0207a683          	lw	a3,32(a5)
	node->next = list;
80007c40:	8000a737          	lui	a4,0x8000a
80007c44:	27470713          	addi	a4,a4,628 # 8000a274 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a275>
80007c48:	00e42023          	sw	a4,0(s0)
	node->prev = tail;
80007c4c:	00d42223          	sw	a3,4(s0)
	tail->next = node;
80007c50:	0086a023          	sw	s0,0(a3)
	list->tail = node;
80007c54:	0287a023          	sw	s0,32(a5)
		update_cache(0);
80007c58:	00000513          	li	a0,0
80007c5c:	c59ff0ef          	jal	ra,800078b4 <update_cache>
}
80007c60:	f49ff06f          	j	80007ba8 <ready_thread+0x3c>
80007c64:	00008067          	ret

80007c68 <z_ready_thread>:
80007c68:	00308013          	addi	zero,ra,3
{
80007c6c:	ff010113          	addi	sp,sp,-16
80007c70:	00112623          	sw	ra,12(sp)
80007c74:	00812423          	sw	s0,8(sp)
80007c78:	00912223          	sw	s1,4(sp)
80007c7c:	00050413          	mv	s0,a0
	LOCKED(&sched_spinlock) {
80007c80:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007c84:	300474f3          	csrrci	s1,mstatus,8
80007c88:	0100006f          	j	80007c98 <z_ready_thread+0x30>
			  : "r" (key & MSTATUS_IEN)
80007c8c:	0084f793          	andi	a5,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80007c90:	3007a073          	csrs	mstatus,a5
80007c94:	00100793          	li	a5,1
80007c98:	00079e63          	bnez	a5,80007cb4 <z_ready_thread+0x4c>
		if (!thread_active_elsewhere(thread)) {
80007c9c:	00040513          	mv	a0,s0
80007ca0:	ff4ff0ef          	jal	ra,80007494 <thread_active_elsewhere>
80007ca4:	fe0514e3          	bnez	a0,80007c8c <z_ready_thread+0x24>
			ready_thread(thread);
80007ca8:	00040513          	mv	a0,s0
80007cac:	ec1ff0ef          	jal	ra,80007b6c <ready_thread>
80007cb0:	fddff06f          	j	80007c8c <z_ready_thread+0x24>
}
80007cb4:	00c12083          	lw	ra,12(sp)
80007cb8:	00812403          	lw	s0,8(sp)
80007cbc:	00412483          	lw	s1,4(sp)
80007cc0:	01010113          	addi	sp,sp,16
80007cc4:	00008067          	ret

80007cc8 <z_sched_start>:
80007cc8:	00308013          	addi	zero,ra,3
{
80007ccc:	ff010113          	addi	sp,sp,-16
80007cd0:	00112623          	sw	ra,12(sp)
80007cd4:	00812423          	sw	s0,8(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007cd8:	30047473          	csrrci	s0,mstatus,8
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
80007cdc:	00d54783          	lbu	a5,13(a0)
	if (z_has_thread_started(thread)) {
80007ce0:	0047f713          	andi	a4,a5,4
80007ce4:	00071e63          	bnez	a4,80007d00 <z_sched_start+0x38>
	__asm__ volatile ("csrs mstatus, %0"
80007ce8:	00847413          	andi	s0,s0,8
80007cec:	30042073          	csrs	mstatus,s0
}
80007cf0:	00c12083          	lw	ra,12(sp)
80007cf4:	00812403          	lw	s0,8(sp)
80007cf8:	01010113          	addi	sp,sp,16
80007cfc:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_PRESTART;
80007d00:	ffb7f793          	andi	a5,a5,-5
80007d04:	00f506a3          	sb	a5,13(a0)
	ready_thread(thread);
80007d08:	e65ff0ef          	jal	ra,80007b6c <ready_thread>
	z_reschedule(&sched_spinlock, key);
80007d0c:	00040593          	mv	a1,s0
80007d10:	8000a537          	lui	a0,0x8000a
80007d14:	27c50513          	addi	a0,a0,636 # 8000a27c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a27d>
80007d18:	ab1ff0ef          	jal	ra,800077c8 <z_reschedule>
80007d1c:	fd5ff06f          	j	80007cf0 <z_sched_start+0x28>

80007d20 <z_thread_timeout>:
80007d20:	00308013          	addi	zero,ra,3
{
80007d24:	ff010113          	addi	sp,sp,-16
80007d28:	00112623          	sw	ra,12(sp)
80007d2c:	00812423          	sw	s0,8(sp)
80007d30:	00912223          	sw	s1,4(sp)
80007d34:	01212023          	sw	s2,0(sp)
80007d38:	00050413          	mv	s0,a0
	struct k_thread *thread = CONTAINER_OF(timeout,
80007d3c:	fe850913          	addi	s2,a0,-24
	LOCKED(&sched_spinlock) {
80007d40:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007d44:	300474f3          	csrrci	s1,mstatus,8
80007d48:	02c0006f          	j	80007d74 <z_thread_timeout+0x54>
80007d4c:	ff544783          	lbu	a5,-11(s0)
80007d50:	ffb7f713          	andi	a4,a5,-5
80007d54:	fee40aa3          	sb	a4,-11(s0)
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
80007d58:	feb7f793          	andi	a5,a5,-21
80007d5c:	fef40aa3          	sb	a5,-11(s0)
			ready_thread(thread);
80007d60:	00090513          	mv	a0,s2
80007d64:	e09ff0ef          	jal	ra,80007b6c <ready_thread>
			  : "r" (key & MSTATUS_IEN)
80007d68:	0084f793          	andi	a5,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80007d6c:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80007d70:	00100793          	li	a5,1
80007d74:	02079263          	bnez	a5,80007d98 <z_thread_timeout+0x78>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
80007d78:	ff544783          	lbu	a5,-11(s0)
		if (!killed) {
80007d7c:	0287f793          	andi	a5,a5,40
80007d80:	fe0794e3          	bnez	a5,80007d68 <z_thread_timeout+0x48>
			if (thread->base.pended_on != NULL) {
80007d84:	ff042783          	lw	a5,-16(s0)
80007d88:	fc0782e3          	beqz	a5,80007d4c <z_thread_timeout+0x2c>
				unpend_thread_no_timeout(thread);
80007d8c:	00090513          	mv	a0,s2
80007d90:	ac9ff0ef          	jal	ra,80007858 <unpend_thread_no_timeout>
80007d94:	fb9ff06f          	j	80007d4c <z_thread_timeout+0x2c>
}
80007d98:	00c12083          	lw	ra,12(sp)
80007d9c:	00812403          	lw	s0,8(sp)
80007da0:	00412483          	lw	s1,4(sp)
80007da4:	00012903          	lw	s2,0(sp)
80007da8:	01010113          	addi	sp,sp,16
80007dac:	00008067          	ret

80007db0 <unpend_all>:
80007db0:	00308013          	addi	zero,ra,3
{
80007db4:	ff010113          	addi	sp,sp,-16
80007db8:	00112623          	sw	ra,12(sp)
80007dbc:	00812423          	sw	s0,8(sp)
80007dc0:	00912223          	sw	s1,4(sp)
80007dc4:	00050493          	mv	s1,a0
	return list->head == list;
80007dc8:	0004a403          	lw	s0,0(s1)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80007dcc:	02848463          	beq	s1,s0,80007df4 <unpend_all+0x44>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
80007dd0:	02040263          	beqz	s0,80007df4 <unpend_all+0x44>
		unpend_thread_no_timeout(thread);
80007dd4:	00040513          	mv	a0,s0
80007dd8:	a81ff0ef          	jal	ra,80007858 <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
80007ddc:	01840513          	addi	a0,s0,24
80007de0:	149000ef          	jal	ra,80008728 <z_abort_timeout>
80007de4:	06042c23          	sw	zero,120(s0)
		ready_thread(thread);
80007de8:	00040513          	mv	a0,s0
80007dec:	d81ff0ef          	jal	ra,80007b6c <ready_thread>
80007df0:	fd9ff06f          	j	80007dc8 <unpend_all+0x18>
}
80007df4:	00c12083          	lw	ra,12(sp)
80007df8:	00812403          	lw	s0,8(sp)
80007dfc:	00412483          	lw	s1,4(sp)
80007e00:	01010113          	addi	sp,sp,16
80007e04:	00008067          	ret

80007e08 <unready_thread>:
80007e08:	00308013          	addi	zero,ra,3
{
80007e0c:	ff010113          	addi	sp,sp,-16
80007e10:	00112623          	sw	ra,12(sp)
80007e14:	00812423          	sw	s0,8(sp)
80007e18:	00050413          	mv	s0,a0
	return (thread->base.thread_state & state) != 0U;
80007e1c:	00d54783          	lbu	a5,13(a0)
	if (z_is_thread_queued(thread)) {
80007e20:	01879713          	slli	a4,a5,0x18
80007e24:	41875713          	srai	a4,a4,0x18
80007e28:	02074663          	bltz	a4,80007e54 <unready_thread+0x4c>
	update_cache(thread == _current);
80007e2c:	8000a7b7          	lui	a5,0x8000a
80007e30:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007e34:	0087a503          	lw	a0,8(a5)
80007e38:	40850533          	sub	a0,a0,s0
80007e3c:	00153513          	seqz	a0,a0
80007e40:	a75ff0ef          	jal	ra,800078b4 <update_cache>
}
80007e44:	00c12083          	lw	ra,12(sp)
80007e48:	00812403          	lw	s0,8(sp)
80007e4c:	01010113          	addi	sp,sp,16
80007e50:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_QUEUED;
80007e54:	07f7f793          	andi	a5,a5,127
80007e58:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
80007e5c:	00050593          	mv	a1,a0
80007e60:	8000a537          	lui	a0,0x8000a
80007e64:	27450513          	addi	a0,a0,628 # 8000a274 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a275>
80007e68:	9d1ff0ef          	jal	ra,80007838 <z_priq_dumb_remove>
}
80007e6c:	fc1ff06f          	j	80007e2c <unready_thread+0x24>

80007e70 <add_to_waitq_locked>:
80007e70:	00308013          	addi	zero,ra,3
{
80007e74:	ff010113          	addi	sp,sp,-16
80007e78:	00112623          	sw	ra,12(sp)
80007e7c:	00812423          	sw	s0,8(sp)
80007e80:	00912223          	sw	s1,4(sp)
80007e84:	01212023          	sw	s2,0(sp)
80007e88:	00050493          	mv	s1,a0
80007e8c:	00058913          	mv	s2,a1
	unready_thread(thread);
80007e90:	f79ff0ef          	jal	ra,80007e08 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
80007e94:	00d4c783          	lbu	a5,13(s1)
80007e98:	0027e793          	ori	a5,a5,2
80007e9c:	00f486a3          	sb	a5,13(s1)
	if (wait_q != NULL) {
80007ea0:	06090863          	beqz	s2,80007f10 <add_to_waitq_locked+0xa0>
		thread->base.pended_on = wait_q;
80007ea4:	0124a423          	sw	s2,8(s1)
	return list->head == list;
80007ea8:	00092403          	lw	s0,0(s2)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80007eac:	02891463          	bne	s2,s0,80007ed4 <add_to_waitq_locked+0x64>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
80007eb0:	00000413          	li	s0,0
80007eb4:	0200006f          	j	80007ed4 <add_to_waitq_locked+0x64>
	sys_dnode_t *const prev = successor->prev;
80007eb8:	00442783          	lw	a5,4(s0)
	node->prev = prev;
80007ebc:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
80007ec0:	0084a023          	sw	s0,0(s1)
	prev->next = node;
80007ec4:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
80007ec8:	00942223          	sw	s1,4(s0)
}
80007ecc:	0440006f          	j	80007f10 <add_to_waitq_locked+0xa0>
80007ed0:	00000413          	li	s0,0
80007ed4:	02040463          	beqz	s0,80007efc <add_to_waitq_locked+0x8c>
		if (z_sched_prio_cmp(thread, t) > 0) {
80007ed8:	00040593          	mv	a1,s0
80007edc:	00048513          	mv	a0,s1
80007ee0:	e0cff0ef          	jal	ra,800074ec <z_sched_prio_cmp>
80007ee4:	fca04ae3          	bgtz	a0,80007eb8 <add_to_waitq_locked+0x48>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80007ee8:	fe0406e3          	beqz	s0,80007ed4 <add_to_waitq_locked+0x64>
	return (node == list->tail) ? NULL : node->next;
80007eec:	00492703          	lw	a4,4(s2)
80007ef0:	fee400e3          	beq	s0,a4,80007ed0 <add_to_waitq_locked+0x60>
80007ef4:	00042403          	lw	s0,0(s0)
80007ef8:	fddff06f          	j	80007ed4 <add_to_waitq_locked+0x64>
	sys_dnode_t *const tail = list->tail;
80007efc:	00492783          	lw	a5,4(s2)
	node->next = list;
80007f00:	0124a023          	sw	s2,0(s1)
	node->prev = tail;
80007f04:	00f4a223          	sw	a5,4(s1)
	tail->next = node;
80007f08:	0097a023          	sw	s1,0(a5)
	list->tail = node;
80007f0c:	00992223          	sw	s1,4(s2)
}
80007f10:	00c12083          	lw	ra,12(sp)
80007f14:	00812403          	lw	s0,8(sp)
80007f18:	00412483          	lw	s1,4(sp)
80007f1c:	00012903          	lw	s2,0(sp)
80007f20:	01010113          	addi	sp,sp,16
80007f24:	00008067          	ret

80007f28 <pend>:
80007f28:	00308013          	addi	zero,ra,3
{
80007f2c:	fe010113          	addi	sp,sp,-32
80007f30:	00112e23          	sw	ra,28(sp)
80007f34:	00812c23          	sw	s0,24(sp)
80007f38:	00912a23          	sw	s1,20(sp)
80007f3c:	01212823          	sw	s2,16(sp)
80007f40:	01312623          	sw	s3,12(sp)
80007f44:	01412423          	sw	s4,8(sp)
80007f48:	00050413          	mv	s0,a0
80007f4c:	00058493          	mv	s1,a1
80007f50:	00060a13          	mv	s4,a2
80007f54:	00068993          	mv	s3,a3
	LOCKED(&sched_spinlock) {
80007f58:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80007f5c:	30047973          	csrrci	s2,mstatus,8
80007f60:	01c0006f          	j	80007f7c <pend+0x54>
		add_to_waitq_locked(thread, wait_q);
80007f64:	00048593          	mv	a1,s1
80007f68:	00040513          	mv	a0,s0
80007f6c:	f05ff0ef          	jal	ra,80007e70 <add_to_waitq_locked>
			  : "r" (key & MSTATUS_IEN)
80007f70:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80007f74:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
80007f78:	00100793          	li	a5,1
80007f7c:	fe0784e3          	beqz	a5,80007f64 <pend+0x3c>
	add_thread_timeout(thread, timeout);
80007f80:	000a0593          	mv	a1,s4
80007f84:	00098613          	mv	a2,s3
80007f88:	00040513          	mv	a0,s0
80007f8c:	d20ff0ef          	jal	ra,800074ac <add_thread_timeout>
}
80007f90:	01c12083          	lw	ra,28(sp)
80007f94:	01812403          	lw	s0,24(sp)
80007f98:	01412483          	lw	s1,20(sp)
80007f9c:	01012903          	lw	s2,16(sp)
80007fa0:	00c12983          	lw	s3,12(sp)
80007fa4:	00812a03          	lw	s4,8(sp)
80007fa8:	02010113          	addi	sp,sp,32
80007fac:	00008067          	ret

80007fb0 <z_pend_curr>:
80007fb0:	00308013          	addi	zero,ra,3
{
80007fb4:	ff010113          	addi	sp,sp,-16
80007fb8:	00112623          	sw	ra,12(sp)
80007fbc:	00812423          	sw	s0,8(sp)
80007fc0:	00912223          	sw	s1,4(sp)
80007fc4:	00050413          	mv	s0,a0
80007fc8:	00058493          	mv	s1,a1
80007fcc:	00060593          	mv	a1,a2
80007fd0:	00068613          	mv	a2,a3
80007fd4:	00070693          	mv	a3,a4
	pend(_current, wait_q, timeout);
80007fd8:	8000a7b7          	lui	a5,0x8000a
80007fdc:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80007fe0:	0087a503          	lw	a0,8(a5)
80007fe4:	f45ff0ef          	jal	ra,80007f28 <pend>
	return z_swap(lock, key);
80007fe8:	00048593          	mv	a1,s1
80007fec:	00040513          	mv	a0,s0
80007ff0:	f40ff0ef          	jal	ra,80007730 <z_swap>
}
80007ff4:	00c12083          	lw	ra,12(sp)
80007ff8:	00812403          	lw	s0,8(sp)
80007ffc:	00412483          	lw	s1,4(sp)
80008000:	01010113          	addi	sp,sp,16
80008004:	00008067          	ret

80008008 <z_set_prio>:
80008008:	00308013          	addi	zero,ra,3
{
8000800c:	fe010113          	addi	sp,sp,-32
80008010:	00112e23          	sw	ra,28(sp)
80008014:	00812c23          	sw	s0,24(sp)
80008018:	00912a23          	sw	s1,20(sp)
8000801c:	01212823          	sw	s2,16(sp)
80008020:	01312623          	sw	s3,12(sp)
80008024:	01412423          	sw	s4,8(sp)
80008028:	01512223          	sw	s5,4(sp)
8000802c:	00050493          	mv	s1,a0
80008030:	00058913          	mv	s2,a1
	LOCKED(&sched_spinlock) {
80008034:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80008038:	300479f3          	csrrci	s3,mstatus,8
	bool need_sched = 0;
8000803c:	00000513          	li	a0,0
80008040:	0980006f          	j	800080d8 <z_set_prio+0xd0>
	sys_dnode_t *const prev = successor->prev;
80008044:	00442783          	lw	a5,4(s0)
	node->prev = prev;
80008048:	00f4a223          	sw	a5,4(s1)
	node->next = successor;
8000804c:	0084a023          	sw	s0,0(s1)
	prev->next = node;
80008050:	0097a023          	sw	s1,0(a5)
	successor->prev = node;
80008054:	00942223          	sw	s1,4(s0)
}
80008058:	05c0006f          	j	800080b4 <z_set_prio+0xac>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
8000805c:	000a0413          	mv	s0,s4
80008060:	02040863          	beqz	s0,80008090 <z_set_prio+0x88>
		if (z_sched_prio_cmp(thread, t) > 0) {
80008064:	00040593          	mv	a1,s0
80008068:	00048513          	mv	a0,s1
8000806c:	c80ff0ef          	jal	ra,800074ec <z_sched_prio_cmp>
80008070:	fca04ae3          	bgtz	a0,80008044 <z_set_prio+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
80008074:	fe0406e3          	beqz	s0,80008060 <z_set_prio+0x58>
	return (node == list->tail) ? NULL : node->next;
80008078:	8000a7b7          	lui	a5,0x8000a
8000807c:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80008080:	0207a783          	lw	a5,32(a5)
80008084:	fcf40ce3          	beq	s0,a5,8000805c <z_set_prio+0x54>
80008088:	00042403          	lw	s0,0(s0)
8000808c:	fd5ff06f          	j	80008060 <z_set_prio+0x58>
	sys_dnode_t *const tail = list->tail;
80008090:	8000a7b7          	lui	a5,0x8000a
80008094:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80008098:	0207a683          	lw	a3,32(a5)
	node->next = list;
8000809c:	8000a737          	lui	a4,0x8000a
800080a0:	27470713          	addi	a4,a4,628 # 8000a274 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a275>
800080a4:	00e4a023          	sw	a4,0(s1)
	node->prev = tail;
800080a8:	00d4a223          	sw	a3,4(s1)
	tail->next = node;
800080ac:	0096a023          	sw	s1,0(a3)
	list->tail = node;
800080b0:	0297a023          	sw	s1,32(a5)
			update_cache(1);
800080b4:	00100513          	li	a0,1
800080b8:	ffcff0ef          	jal	ra,800078b4 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
800080bc:	00100513          	li	a0,1
800080c0:	00c0006f          	j	800080cc <z_set_prio+0xc4>
			thread->base.prio = prio;
800080c4:	01248723          	sb	s2,14(s1)
800080c8:	00000513          	li	a0,0
			  : "r" (key & MSTATUS_IEN)
800080cc:	0089f793          	andi	a5,s3,8
	__asm__ volatile ("csrs mstatus, %0"
800080d0:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
800080d4:	00100793          	li	a5,1
800080d8:	04079e63          	bnez	a5,80008134 <z_set_prio+0x12c>
	uint8_t state = thread->base.thread_state;
800080dc:	00d4c783          	lbu	a5,13(s1)
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
800080e0:	01f7f713          	andi	a4,a5,31
800080e4:	fe0710e3          	bnez	a4,800080c4 <z_set_prio+0xbc>
	return node->next != NULL;
800080e8:	0184aa03          	lw	s4,24(s1)
800080ec:	fc0a1ce3          	bnez	s4,800080c4 <z_set_prio+0xbc>
	thread->base.thread_state &= ~_THREAD_QUEUED;
800080f0:	07f7f793          	andi	a5,a5,127
800080f4:	00f486a3          	sb	a5,13(s1)
	_priq_run_remove(thread_runq(thread), thread);
800080f8:	00048593          	mv	a1,s1
800080fc:	8000aab7          	lui	s5,0x8000a
80008100:	274a8513          	addi	a0,s5,628 # 8000a274 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a275>
80008104:	f34ff0ef          	jal	ra,80007838 <z_priq_dumb_remove>
				thread->base.prio = prio;
80008108:	01248723          	sb	s2,14(s1)
	thread->base.thread_state |= _THREAD_QUEUED;
8000810c:	00d4c783          	lbu	a5,13(s1)
80008110:	f807e793          	ori	a5,a5,-128
80008114:	00f486a3          	sb	a5,13(s1)
	return list->head == list;
80008118:	8000a7b7          	lui	a5,0x8000a
8000811c:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80008120:	01c7a403          	lw	s0,28(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
80008124:	274a8a93          	addi	s5,s5,628
80008128:	f3541ce3          	bne	s0,s5,80008060 <z_set_prio+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
8000812c:	000a0413          	mv	s0,s4
80008130:	f31ff06f          	j	80008060 <z_set_prio+0x58>
}
80008134:	01c12083          	lw	ra,28(sp)
80008138:	01812403          	lw	s0,24(sp)
8000813c:	01412483          	lw	s1,20(sp)
80008140:	01012903          	lw	s2,16(sp)
80008144:	00c12983          	lw	s3,12(sp)
80008148:	00812a03          	lw	s4,8(sp)
8000814c:	00412a83          	lw	s5,4(sp)
80008150:	02010113          	addi	sp,sp,32
80008154:	00008067          	ret

80008158 <k_sched_unlock>:
80008158:	00308013          	addi	zero,ra,3
{
8000815c:	ff010113          	addi	sp,sp,-16
80008160:	00112623          	sw	ra,12(sp)
80008164:	00812423          	sw	s0,8(sp)
	LOCKED(&sched_spinlock) {
80008168:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000816c:	30047473          	csrrci	s0,mstatus,8
80008170:	0300006f          	j	800081a0 <k_sched_unlock+0x48>
		++_current->base.sched_locked;
80008174:	8000a7b7          	lui	a5,0x8000a
80008178:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
8000817c:	0087a703          	lw	a4,8(a5)
80008180:	00f74783          	lbu	a5,15(a4)
80008184:	00178793          	addi	a5,a5,1
80008188:	00f707a3          	sb	a5,15(a4)
		update_cache(0);
8000818c:	00000513          	li	a0,0
80008190:	f24ff0ef          	jal	ra,800078b4 <update_cache>
			  : "r" (key & MSTATUS_IEN)
80008194:	00847793          	andi	a5,s0,8
	__asm__ volatile ("csrs mstatus, %0"
80008198:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
8000819c:	00100793          	li	a5,1
800081a0:	fc078ae3          	beqz	a5,80008174 <k_sched_unlock+0x1c>
	__asm__ volatile ("csrrc %0, mstatus, %1"
800081a4:	30047573          	csrrci	a0,mstatus,8
	(void) z_reschedule_irqlock(arch_irq_lock());
800081a8:	d50ff0ef          	jal	ra,800076f8 <z_reschedule_irqlock>
}
800081ac:	00c12083          	lw	ra,12(sp)
800081b0:	00812403          	lw	s0,8(sp)
800081b4:	01010113          	addi	sp,sp,16
800081b8:	00008067          	ret

800081bc <end_thread>:
800081bc:	00308013          	addi	zero,ra,3
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
800081c0:	00d54783          	lbu	a5,13(a0)
800081c4:	0087f713          	andi	a4,a5,8
800081c8:	08071663          	bnez	a4,80008254 <end_thread+0x98>
{
800081cc:	ff010113          	addi	sp,sp,-16
800081d0:	00112623          	sw	ra,12(sp)
800081d4:	00812423          	sw	s0,8(sp)
800081d8:	00050413          	mv	s0,a0
		thread->base.thread_state |= _THREAD_DEAD;
800081dc:	0087e713          	ori	a4,a5,8
800081e0:	00e506a3          	sb	a4,13(a0)
		thread->base.thread_state &= ~_THREAD_ABORTING;
800081e4:	fdf7f713          	andi	a4,a5,-33
800081e8:	00876713          	ori	a4,a4,8
800081ec:	00e506a3          	sb	a4,13(a0)
		if (z_is_thread_queued(thread)) {
800081f0:	01871713          	slli	a4,a4,0x18
800081f4:	41875713          	srai	a4,a4,0x18
800081f8:	02074e63          	bltz	a4,80008234 <end_thread+0x78>
		if (thread->base.pended_on != NULL) {
800081fc:	00842783          	lw	a5,8(s0)
80008200:	00078663          	beqz	a5,8000820c <end_thread+0x50>
			unpend_thread_no_timeout(thread);
80008204:	00040513          	mv	a0,s0
80008208:	e50ff0ef          	jal	ra,80007858 <unpend_thread_no_timeout>
8000820c:	01840513          	addi	a0,s0,24
80008210:	518000ef          	jal	ra,80008728 <z_abort_timeout>
		unpend_all(&thread->join_queue);
80008214:	06c40513          	addi	a0,s0,108
80008218:	b99ff0ef          	jal	ra,80007db0 <unpend_all>
		update_cache(1);
8000821c:	00100513          	li	a0,1
80008220:	e94ff0ef          	jal	ra,800078b4 <update_cache>
}
80008224:	00c12083          	lw	ra,12(sp)
80008228:	00812403          	lw	s0,8(sp)
8000822c:	01010113          	addi	sp,sp,16
80008230:	00008067          	ret
	thread->base.thread_state &= ~_THREAD_QUEUED;
80008234:	05f7f793          	andi	a5,a5,95
80008238:	0087e793          	ori	a5,a5,8
8000823c:	00f506a3          	sb	a5,13(a0)
	_priq_run_remove(thread_runq(thread), thread);
80008240:	00050593          	mv	a1,a0
80008244:	8000a537          	lui	a0,0x8000a
80008248:	27450513          	addi	a0,a0,628 # 8000a274 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a275>
8000824c:	decff0ef          	jal	ra,80007838 <z_priq_dumb_remove>
}
80008250:	fadff06f          	j	800081fc <end_thread+0x40>
80008254:	00008067          	ret

80008258 <z_unpend_first_thread>:
80008258:	00308013          	addi	zero,ra,3
{
8000825c:	ff010113          	addi	sp,sp,-16
80008260:	00112623          	sw	ra,12(sp)
80008264:	00812423          	sw	s0,8(sp)
80008268:	00912223          	sw	s1,4(sp)
8000826c:	01212023          	sw	s2,0(sp)
80008270:	00050493          	mv	s1,a0
	LOCKED(&sched_spinlock) {
80008274:	00000793          	li	a5,0
80008278:	30047973          	csrrci	s2,mstatus,8
	struct k_thread *thread = NULL;
8000827c:	00000413          	li	s0,0
80008280:	0100006f          	j	80008290 <z_unpend_first_thread+0x38>
			  : "r" (key & MSTATUS_IEN)
80008284:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80008288:	3007a073          	csrs	mstatus,a5
	LOCKED(&sched_spinlock) {
8000828c:	00100793          	li	a5,1
80008290:	02079263          	bnez	a5,800082b4 <z_unpend_first_thread+0x5c>
		thread = _priq_wait_best(&wait_q->waitq);
80008294:	00048513          	mv	a0,s1
80008298:	e00ff0ef          	jal	ra,80007898 <z_priq_dumb_best>
8000829c:	00050413          	mv	s0,a0
		if (thread != NULL) {
800082a0:	fe0502e3          	beqz	a0,80008284 <z_unpend_first_thread+0x2c>
			unpend_thread_no_timeout(thread);
800082a4:	db4ff0ef          	jal	ra,80007858 <unpend_thread_no_timeout>
800082a8:	01840513          	addi	a0,s0,24
800082ac:	47c000ef          	jal	ra,80008728 <z_abort_timeout>
800082b0:	fd5ff06f          	j	80008284 <z_unpend_first_thread+0x2c>
}
800082b4:	00040513          	mv	a0,s0
800082b8:	00c12083          	lw	ra,12(sp)
800082bc:	00812403          	lw	s0,8(sp)
800082c0:	00412483          	lw	s1,4(sp)
800082c4:	00012903          	lw	s2,0(sp)
800082c8:	01010113          	addi	sp,sp,16
800082cc:	00008067          	ret

800082d0 <init_ready_q>:
800082d0:	00308013          	addi	zero,ra,3
	sys_dlist_init(&rq->runq);
800082d4:	00450793          	addi	a5,a0,4
	list->head = (sys_dnode_t *)list;
800082d8:	00f52223          	sw	a5,4(a0)
	list->tail = (sys_dnode_t *)list;
800082dc:	00f52423          	sw	a5,8(a0)
}
800082e0:	00008067          	ret

800082e4 <z_sched_init>:
800082e4:	00308013          	addi	zero,ra,3
{
800082e8:	ff010113          	addi	sp,sp,-16
800082ec:	00112623          	sw	ra,12(sp)
	init_ready_q(&_kernel.ready_q);
800082f0:	8000a537          	lui	a0,0x8000a
800082f4:	27050513          	addi	a0,a0,624 # 8000a270 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a271>
800082f8:	fd9ff0ef          	jal	ra,800082d0 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
800082fc:	00000593          	li	a1,0
80008300:	00000513          	li	a0,0
80008304:	a5cff0ef          	jal	ra,80007560 <k_sched_time_slice_set>
}
80008308:	00c12083          	lw	ra,12(sp)
8000830c:	01010113          	addi	sp,sp,16
80008310:	00008067          	ret

80008314 <z_impl_z_current_get>:
80008314:	00308013          	addi	zero,ra,3
	k_tid_t ret = _current_cpu->current;
80008318:	8000a7b7          	lui	a5,0x8000a
}
8000831c:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80008320:	0087a503          	lw	a0,8(a5)
80008324:	00008067          	ret

80008328 <z_thread_abort>:
80008328:	00308013          	addi	zero,ra,3
{
8000832c:	ff010113          	addi	sp,sp,-16
80008330:	00112623          	sw	ra,12(sp)
80008334:	00812423          	sw	s0,8(sp)
80008338:	00912223          	sw	s1,4(sp)
	__asm__ volatile ("csrrc %0, mstatus, %1"
8000833c:	300474f3          	csrrci	s1,mstatus,8
	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
80008340:	00c54783          	lbu	a5,12(a0)
80008344:	0017f793          	andi	a5,a5,1
80008348:	02079063          	bnez	a5,80008368 <z_thread_abort+0x40>
8000834c:	00050413          	mv	s0,a0
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
80008350:	00d54783          	lbu	a5,13(a0)
80008354:	0087f793          	andi	a5,a5,8
80008358:	02078c63          	beqz	a5,80008390 <z_thread_abort+0x68>
	__asm__ volatile ("csrs mstatus, %0"
8000835c:	0084f493          	andi	s1,s1,8
80008360:	3004a073          	csrs	mstatus,s1
		return;
80008364:	0180006f          	j	8000837c <z_thread_abort+0x54>
80008368:	0084f493          	andi	s1,s1,8
8000836c:	3004a073          	csrs	mstatus,s1
	register unsigned long a0 __asm__ ("a0") = arg1;
80008370:	00400513          	li	a0,4
	register unsigned long t0 __asm__ ("t0") = call_id;
80008374:	00000293          	li	t0,0
	__asm__ volatile ("ecall"
80008378:	00000073          	ecall
}
8000837c:	00c12083          	lw	ra,12(sp)
80008380:	00812403          	lw	s0,8(sp)
80008384:	00412483          	lw	s1,4(sp)
80008388:	01010113          	addi	sp,sp,16
8000838c:	00008067          	ret
	end_thread(thread);
80008390:	e2dff0ef          	jal	ra,800081bc <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
80008394:	8000a7b7          	lui	a5,0x8000a
80008398:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
8000839c:	0087a783          	lw	a5,8(a5)
800083a0:	00878863          	beq	a5,s0,800083b0 <z_thread_abort+0x88>
800083a4:	0084f493          	andi	s1,s1,8
800083a8:	3004a073          	csrs	mstatus,s1
800083ac:	fd1ff06f          	j	8000837c <z_thread_abort+0x54>
800083b0:	8000a7b7          	lui	a5,0x8000a
800083b4:	2587a783          	lw	a5,600(a5) # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
800083b8:	fe0796e3          	bnez	a5,800083a4 <z_thread_abort+0x7c>
		z_swap(&sched_spinlock, key);
800083bc:	00048593          	mv	a1,s1
800083c0:	8000a537          	lui	a0,0x8000a
800083c4:	27c50513          	addi	a0,a0,636 # 8000a27c <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a27d>
800083c8:	b68ff0ef          	jal	ra,80007730 <z_swap>
800083cc:	fd9ff06f          	j	800083a4 <z_thread_abort+0x7c>

800083d0 <z_impl_k_thread_abort>:
800083d0:	00308013          	addi	zero,ra,3
{
800083d4:	ff010113          	addi	sp,sp,-16
800083d8:	00112623          	sw	ra,12(sp)
	z_thread_abort(thread);
800083dc:	f4dff0ef          	jal	ra,80008328 <z_thread_abort>
}
800083e0:	00c12083          	lw	ra,12(sp)
800083e4:	01010113          	addi	sp,sp,16
800083e8:	00008067          	ret

800083ec <first>:
800083ec:	00308013          	addi	zero,ra,3
	return list->head == list;
800083f0:	82418793          	addi	a5,gp,-2012 # 8000cf64 <timeout_list>
800083f4:	0007a503          	lw	a0,0(a5)
	return sys_dlist_is_empty(list) ? NULL : list->head;
800083f8:	00f50463          	beq	a0,a5,80008400 <first+0x14>
}
800083fc:	00008067          	ret
80008400:	00000513          	li	a0,0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
80008404:	ff9ff06f          	j	800083fc <first+0x10>

80008408 <next>:
80008408:	00308013          	addi	zero,ra,3
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
8000840c:	00050e63          	beqz	a0,80008428 <next+0x20>
	return (node == list->tail) ? NULL : node->next;
80008410:	82418713          	addi	a4,gp,-2012 # 8000cf64 <timeout_list>
80008414:	00472703          	lw	a4,4(a4)
80008418:	00e50663          	beq	a0,a4,80008424 <next+0x1c>
8000841c:	00052503          	lw	a0,0(a0)
80008420:	00008067          	ret
80008424:	00000513          	li	a0,0
}
80008428:	00008067          	ret

8000842c <remove_timeout>:
8000842c:	00308013          	addi	zero,ra,3
{
80008430:	ff010113          	addi	sp,sp,-16
80008434:	00112623          	sw	ra,12(sp)
80008438:	00812423          	sw	s0,8(sp)
8000843c:	00050413          	mv	s0,a0
	if (next(t) != NULL) {
80008440:	fc9ff0ef          	jal	ra,80008408 <next>
80008444:	02050663          	beqz	a0,80008470 <remove_timeout+0x44>
		next(t)->dticks += t->dticks;
80008448:	01052783          	lw	a5,16(a0)
8000844c:	01452683          	lw	a3,20(a0)
80008450:	01042703          	lw	a4,16(s0)
80008454:	01442603          	lw	a2,20(s0)
80008458:	00e78733          	add	a4,a5,a4
8000845c:	00f737b3          	sltu	a5,a4,a5
80008460:	00c686b3          	add	a3,a3,a2
80008464:	00d787b3          	add	a5,a5,a3
80008468:	00e52823          	sw	a4,16(a0)
8000846c:	00f52a23          	sw	a5,20(a0)
	sys_dnode_t *const prev = node->prev;
80008470:	00442703          	lw	a4,4(s0)
	sys_dnode_t *const next = node->next;
80008474:	00042783          	lw	a5,0(s0)
	prev->next = next;
80008478:	00f72023          	sw	a5,0(a4)
	next->prev = prev;
8000847c:	00e7a223          	sw	a4,4(a5)
	node->next = NULL;
80008480:	00042023          	sw	zero,0(s0)
	node->prev = NULL;
80008484:	00042223          	sw	zero,4(s0)
}
80008488:	00c12083          	lw	ra,12(sp)
8000848c:	00812403          	lw	s0,8(sp)
80008490:	01010113          	addi	sp,sp,16
80008494:	00008067          	ret

80008498 <elapsed>:
80008498:	00308013          	addi	zero,ra,3
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
8000849c:	8000a7b7          	lui	a5,0x8000a
800084a0:	da87a783          	lw	a5,-600(a5) # 80009da8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009da9>
800084a4:	00078663          	beqz	a5,800084b0 <elapsed+0x18>
800084a8:	00000513          	li	a0,0
}
800084ac:	00008067          	ret
{
800084b0:	ff010113          	addi	sp,sp,-16
800084b4:	00112623          	sw	ra,12(sp)
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
800084b8:	d10fe0ef          	jal	ra,800069c8 <sys_clock_elapsed>
}
800084bc:	00c12083          	lw	ra,12(sp)
800084c0:	01010113          	addi	sp,sp,16
800084c4:	00008067          	ret

800084c8 <next_timeout>:
800084c8:	00308013          	addi	zero,ra,3
{
800084cc:	ff010113          	addi	sp,sp,-16
800084d0:	00112623          	sw	ra,12(sp)
800084d4:	00812423          	sw	s0,8(sp)
	struct _timeout *to = first();
800084d8:	f15ff0ef          	jal	ra,800083ec <first>
800084dc:	00050413          	mv	s0,a0
	int32_t ticks_elapsed = elapsed();
800084e0:	fb9ff0ef          	jal	ra,80008498 <elapsed>
	if ((to == NULL) ||
800084e4:	02040c63          	beqz	s0,8000851c <next_timeout+0x54>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
800084e8:	01042703          	lw	a4,16(s0)
800084ec:	01442783          	lw	a5,20(s0)
800084f0:	41f55693          	srai	a3,a0,0x1f
800084f4:	40a70533          	sub	a0,a4,a0
800084f8:	00a73733          	sltu	a4,a4,a0
800084fc:	40d787b3          	sub	a5,a5,a3
80008500:	40e787b3          	sub	a5,a5,a4
	if ((to == NULL) ||
80008504:	02f04263          	bgtz	a5,80008528 <next_timeout+0x60>
80008508:	00079463          	bnez	a5,80008510 <next_timeout+0x48>
8000850c:	00054e63          	bltz	a0,80008528 <next_timeout+0x60>
		ret = MAX(0, to->dticks - ticks_elapsed);
80008510:	0207d063          	bgez	a5,80008530 <next_timeout+0x68>
80008514:	00000513          	li	a0,0
80008518:	0180006f          	j	80008530 <next_timeout+0x68>
		ret = MAX_WAIT;
8000851c:	80000537          	lui	a0,0x80000
80008520:	fff54513          	not	a0,a0
80008524:	00c0006f          	j	80008530 <next_timeout+0x68>
80008528:	80000537          	lui	a0,0x80000
8000852c:	fff54513          	not	a0,a0
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
80008530:	8000a7b7          	lui	a5,0x8000a
80008534:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80008538:	0107a783          	lw	a5,16(a5)
8000853c:	00078663          	beqz	a5,80008548 <next_timeout+0x80>
80008540:	00a7d463          	bge	a5,a0,80008548 <next_timeout+0x80>
		ret = _current_cpu->slice_ticks;
80008544:	00078513          	mv	a0,a5
}
80008548:	00c12083          	lw	ra,12(sp)
8000854c:	00812403          	lw	s0,8(sp)
80008550:	01010113          	addi	sp,sp,16
80008554:	00008067          	ret

80008558 <z_add_timeout>:
80008558:	00308013          	addi	zero,ra,3
{
8000855c:	fe010113          	addi	sp,sp,-32
80008560:	00112e23          	sw	ra,28(sp)
80008564:	00812c23          	sw	s0,24(sp)
80008568:	00912a23          	sw	s1,20(sp)
8000856c:	01212823          	sw	s2,16(sp)
80008570:	01312623          	sw	s3,12(sp)
80008574:	01412423          	sw	s4,8(sp)
80008578:	01512223          	sw	s5,4(sp)
8000857c:	00050413          	mv	s0,a0
80008580:	00060493          	mv	s1,a2
80008584:	00068913          	mv	s2,a3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
80008588:	fff00793          	li	a5,-1
8000858c:	00c78a63          	beq	a5,a2,800085a0 <z_add_timeout+0x48>
	to->fn = fn;
80008590:	00b42423          	sw	a1,8(s0)
	LOCKED(&timeout_lock) {
80008594:	00000793          	li	a5,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80008598:	300479f3          	csrrci	s3,mstatus,8
8000859c:	1080006f          	j	800086a4 <z_add_timeout+0x14c>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
800085a0:	fef698e3          	bne	a3,a5,80008590 <z_add_timeout+0x38>
}
800085a4:	01c12083          	lw	ra,28(sp)
800085a8:	01812403          	lw	s0,24(sp)
800085ac:	01412483          	lw	s1,20(sp)
800085b0:	01012903          	lw	s2,16(sp)
800085b4:	00c12983          	lw	s3,12(sp)
800085b8:	00812a03          	lw	s4,8(sp)
800085bc:	00412a83          	lw	s5,4(sp)
800085c0:	02010113          	addi	sp,sp,32
800085c4:	00008067          	ret
			to->dticks = MAX(1, ticks);
800085c8:	00071463          	bnez	a4,800085d0 <z_add_timeout+0x78>
800085cc:	12079463          	bnez	a5,800086f4 <z_add_timeout+0x19c>
800085d0:	00100793          	li	a5,1
800085d4:	00000713          	li	a4,0
800085d8:	11c0006f          	j	800086f4 <z_add_timeout+0x19c>
			to->dticks = timeout.ticks + 1 + elapsed();
800085dc:	00148a13          	addi	s4,s1,1
800085e0:	009a3ab3          	sltu	s5,s4,s1
800085e4:	012a8ab3          	add	s5,s5,s2
800085e8:	eb1ff0ef          	jal	ra,80008498 <elapsed>
800085ec:	41f55713          	srai	a4,a0,0x1f
800085f0:	00aa07b3          	add	a5,s4,a0
800085f4:	0147ba33          	sltu	s4,a5,s4
800085f8:	00ea8ab3          	add	s5,s5,a4
800085fc:	015a0a33          	add	s4,s4,s5
80008600:	00f42823          	sw	a5,16(s0)
80008604:	01442a23          	sw	s4,20(s0)
80008608:	0f40006f          	j	800086fc <z_add_timeout+0x1a4>
			to->dticks -= t->dticks;
8000860c:	40d706b3          	sub	a3,a4,a3
80008610:	00d73733          	sltu	a4,a4,a3
80008614:	40c787b3          	sub	a5,a5,a2
80008618:	40e787b3          	sub	a5,a5,a4
8000861c:	00d42823          	sw	a3,16(s0)
80008620:	00f42a23          	sw	a5,20(s0)
		for (t = first(); t != NULL; t = next(t)) {
80008624:	de5ff0ef          	jal	ra,80008408 <next>
80008628:	04050863          	beqz	a0,80008678 <z_add_timeout+0x120>
			if (t->dticks > to->dticks) {
8000862c:	01052683          	lw	a3,16(a0) # 80000010 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80000011>
80008630:	01452603          	lw	a2,20(a0)
80008634:	01042703          	lw	a4,16(s0)
80008638:	01442783          	lw	a5,20(s0)
8000863c:	00c7c663          	blt	a5,a2,80008648 <z_add_timeout+0xf0>
80008640:	fcf616e3          	bne	a2,a5,8000860c <z_add_timeout+0xb4>
80008644:	fcd774e3          	bgeu	a4,a3,8000860c <z_add_timeout+0xb4>
				t->dticks -= to->dticks;
80008648:	40e68733          	sub	a4,a3,a4
8000864c:	00e6b6b3          	sltu	a3,a3,a4
80008650:	40f60633          	sub	a2,a2,a5
80008654:	40d60633          	sub	a2,a2,a3
80008658:	00e52823          	sw	a4,16(a0)
8000865c:	00c52a23          	sw	a2,20(a0)
	sys_dnode_t *const prev = successor->prev;
80008660:	00452783          	lw	a5,4(a0)
	node->prev = prev;
80008664:	00f42223          	sw	a5,4(s0)
	node->next = successor;
80008668:	00a42023          	sw	a0,0(s0)
	prev->next = node;
8000866c:	0087a023          	sw	s0,0(a5)
	successor->prev = node;
80008670:	00852223          	sw	s0,4(a0)
		if (t == NULL) {
80008674:	01c0006f          	j	80008690 <z_add_timeout+0x138>
	sys_dnode_t *const tail = list->tail;
80008678:	82418793          	addi	a5,gp,-2012 # 8000cf64 <timeout_list>
8000867c:	0047a703          	lw	a4,4(a5)
	node->next = list;
80008680:	00f42023          	sw	a5,0(s0)
	node->prev = tail;
80008684:	00e42223          	sw	a4,4(s0)
	tail->next = node;
80008688:	00872023          	sw	s0,0(a4)
	list->tail = node;
8000868c:	0087a223          	sw	s0,4(a5)
		if (to == first()) {
80008690:	d5dff0ef          	jal	ra,800083ec <first>
80008694:	06a40863          	beq	s0,a0,80008704 <z_add_timeout+0x1ac>
			  : "r" (key & MSTATUS_IEN)
80008698:	0089f793          	andi	a5,s3,8
	__asm__ volatile ("csrs mstatus, %0"
8000869c:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
800086a0:	00100793          	li	a5,1
800086a4:	f00790e3          	bnez	a5,800085a4 <z_add_timeout+0x4c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
800086a8:	ffe00793          	li	a5,-2
800086ac:	40978733          	sub	a4,a5,s1
800086b0:	00e7b733          	sltu	a4,a5,a4
800086b4:	fff94793          	not	a5,s2
800086b8:	40e787b3          	sub	a5,a5,a4
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
800086bc:	f207c0e3          	bltz	a5,800085dc <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
800086c0:	8000a737          	lui	a4,0x8000a
800086c4:	d7072783          	lw	a5,-656(a4) # 80009d70 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d71>
800086c8:	d7472683          	lw	a3,-652(a4)
800086cc:	009787b3          	add	a5,a5,s1
800086d0:	0097b733          	sltu	a4,a5,s1
800086d4:	012686b3          	add	a3,a3,s2
800086d8:	00d70733          	add	a4,a4,a3
800086dc:	ffe00693          	li	a3,-2
800086e0:	40f687b3          	sub	a5,a3,a5
800086e4:	00f6b6b3          	sltu	a3,a3,a5
800086e8:	fff74713          	not	a4,a4
			to->dticks = MAX(1, ticks);
800086ec:	40d70733          	sub	a4,a4,a3
800086f0:	ece05ce3          	blez	a4,800085c8 <z_add_timeout+0x70>
800086f4:	00f42823          	sw	a5,16(s0)
800086f8:	00e42a23          	sw	a4,20(s0)
		for (t = first(); t != NULL; t = next(t)) {
800086fc:	cf1ff0ef          	jal	ra,800083ec <first>
80008700:	f29ff06f          	j	80008628 <z_add_timeout+0xd0>
			int32_t next_time = next_timeout();
80008704:	dc5ff0ef          	jal	ra,800084c8 <next_timeout>
			if (next_time == 0 ||
80008708:	00050a63          	beqz	a0,8000871c <z_add_timeout+0x1c4>
			    _current_cpu->slice_ticks != next_time) {
8000870c:	8000a7b7          	lui	a5,0x8000a
80008710:	25878793          	addi	a5,a5,600 # 8000a258 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x8000a259>
80008714:	0107a783          	lw	a5,16(a5)
			if (next_time == 0 ||
80008718:	f8a780e3          	beq	a5,a0,80008698 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
8000871c:	00000593          	li	a1,0
80008720:	9c8fe0ef          	jal	ra,800068e8 <sys_clock_set_timeout>
80008724:	f75ff06f          	j	80008698 <z_add_timeout+0x140>

80008728 <z_abort_timeout>:
80008728:	00308013          	addi	zero,ra,3
{
8000872c:	ff010113          	addi	sp,sp,-16
80008730:	00112623          	sw	ra,12(sp)
80008734:	00812423          	sw	s0,8(sp)
80008738:	00912223          	sw	s1,4(sp)
8000873c:	01212023          	sw	s2,0(sp)
80008740:	00050493          	mv	s1,a0
	LOCKED(&timeout_lock) {
80008744:	00000413          	li	s0,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
80008748:	30047973          	csrrci	s2,mstatus,8
	int ret = -EINVAL;
8000874c:	fea00513          	li	a0,-22
80008750:	0100006f          	j	80008760 <z_abort_timeout+0x38>
			  : "r" (key & MSTATUS_IEN)
80008754:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
80008758:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
8000875c:	00100413          	li	s0,1
80008760:	00041e63          	bnez	s0,8000877c <z_abort_timeout+0x54>
	return node->next != NULL;
80008764:	0004a783          	lw	a5,0(s1)
		if (sys_dnode_is_linked(&to->node)) {
80008768:	fe0786e3          	beqz	a5,80008754 <z_abort_timeout+0x2c>
			remove_timeout(to);
8000876c:	00048513          	mv	a0,s1
80008770:	cbdff0ef          	jal	ra,8000842c <remove_timeout>
			ret = 0;
80008774:	00040513          	mv	a0,s0
80008778:	fddff06f          	j	80008754 <z_abort_timeout+0x2c>
}
8000877c:	00c12083          	lw	ra,12(sp)
80008780:	00812403          	lw	s0,8(sp)
80008784:	00412483          	lw	s1,4(sp)
80008788:	00012903          	lw	s2,0(sp)
8000878c:	01010113          	addi	sp,sp,16
80008790:	00008067          	ret

80008794 <z_set_timeout_expiry>:
80008794:	00308013          	addi	zero,ra,3
{
80008798:	fe010113          	addi	sp,sp,-32
8000879c:	00112e23          	sw	ra,28(sp)
800087a0:	00812c23          	sw	s0,24(sp)
800087a4:	00912a23          	sw	s1,20(sp)
800087a8:	01212823          	sw	s2,16(sp)
800087ac:	01312623          	sw	s3,12(sp)
800087b0:	00050493          	mv	s1,a0
800087b4:	00058993          	mv	s3,a1
	LOCKED(&timeout_lock) {
800087b8:	00000413          	li	s0,0
	__asm__ volatile ("csrrc %0, mstatus, %1"
800087bc:	30047973          	csrrci	s2,mstatus,8
800087c0:	0240006f          	j	800087e4 <z_set_timeout_expiry+0x50>
			      || (ticks <= next_to);
800087c4:	00100413          	li	s0,1
		bool sooner = (next_to == K_TICKS_FOREVER)
800087c8:	00147413          	andi	s0,s0,1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
800087cc:	00100793          	li	a5,1
800087d0:	00a7d463          	bge	a5,a0,800087d8 <z_set_timeout_expiry+0x44>
800087d4:	02041663          	bnez	s0,80008800 <z_set_timeout_expiry+0x6c>
			  : "r" (key & MSTATUS_IEN)
800087d8:	00897793          	andi	a5,s2,8
	__asm__ volatile ("csrs mstatus, %0"
800087dc:	3007a073          	csrs	mstatus,a5
	LOCKED(&timeout_lock) {
800087e0:	00100413          	li	s0,1
800087e4:	02041863          	bnez	s0,80008814 <z_set_timeout_expiry+0x80>
		int next_to = next_timeout();
800087e8:	ce1ff0ef          	jal	ra,800084c8 <next_timeout>
			      || (ticks <= next_to);
800087ec:	fff00793          	li	a5,-1
800087f0:	fcf50ae3          	beq	a0,a5,800087c4 <z_set_timeout_expiry+0x30>
800087f4:	fc954ae3          	blt	a0,s1,800087c8 <z_set_timeout_expiry+0x34>
800087f8:	00100413          	li	s0,1
800087fc:	fcdff06f          	j	800087c8 <z_set_timeout_expiry+0x34>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
80008800:	00a4d463          	bge	s1,a0,80008808 <z_set_timeout_expiry+0x74>
80008804:	00048513          	mv	a0,s1
80008808:	00098593          	mv	a1,s3
8000880c:	8dcfe0ef          	jal	ra,800068e8 <sys_clock_set_timeout>
80008810:	fc9ff06f          	j	800087d8 <z_set_timeout_expiry+0x44>
}
80008814:	01c12083          	lw	ra,28(sp)
80008818:	01812403          	lw	s0,24(sp)
8000881c:	01412483          	lw	s1,20(sp)
80008820:	01012903          	lw	s2,16(sp)
80008824:	00c12983          	lw	s3,12(sp)
80008828:	02010113          	addi	sp,sp,32
8000882c:	00008067          	ret

80008830 <sys_clock_announce>:
80008830:	00308013          	addi	zero,ra,3
{
80008834:	ff010113          	addi	sp,sp,-16
80008838:	00112623          	sw	ra,12(sp)
8000883c:	00812423          	sw	s0,8(sp)
80008840:	00912223          	sw	s1,4(sp)
80008844:	01212023          	sw	s2,0(sp)
80008848:	00050413          	mv	s0,a0
	z_time_slice(ticks);
8000884c:	a7cff0ef          	jal	ra,80007ac8 <z_time_slice>
	__asm__ volatile ("csrrc %0, mstatus, %1"
80008850:	300474f3          	csrrci	s1,mstatus,8
	announce_remaining = ticks;
80008854:	8000a7b7          	lui	a5,0x8000a
80008858:	da87a423          	sw	s0,-600(a5) # 80009da8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009da9>
	while (first() != NULL && first()->dticks <= announce_remaining) {
8000885c:	06c0006f          	j	800088c8 <sys_clock_announce+0x98>
		curr_tick += dt;
80008860:	8000a737          	lui	a4,0x8000a
80008864:	41f95593          	srai	a1,s2,0x1f
80008868:	d7072783          	lw	a5,-656(a4) # 80009d70 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d71>
8000886c:	d7472683          	lw	a3,-652(a4)
80008870:	01278633          	add	a2,a5,s2
80008874:	00f637b3          	sltu	a5,a2,a5
80008878:	00b686b3          	add	a3,a3,a1
8000887c:	00d787b3          	add	a5,a5,a3
80008880:	d6c72823          	sw	a2,-656(a4)
80008884:	d6f72a23          	sw	a5,-652(a4)
		t->dticks = 0;
80008888:	00000793          	li	a5,0
8000888c:	00000813          	li	a6,0
80008890:	00f42823          	sw	a5,16(s0)
80008894:	01042a23          	sw	a6,20(s0)
		remove_timeout(t);
80008898:	00040513          	mv	a0,s0
8000889c:	b91ff0ef          	jal	ra,8000842c <remove_timeout>
			  : "r" (key & MSTATUS_IEN)
800088a0:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
800088a4:	3004a073          	csrs	mstatus,s1
		t->fn(t);
800088a8:	00842783          	lw	a5,8(s0)
800088ac:	00040513          	mv	a0,s0
800088b0:	000780e7          	jalr	a5
	__asm__ volatile ("csrrc %0, mstatus, %1"
800088b4:	300474f3          	csrrci	s1,mstatus,8
		announce_remaining -= dt;
800088b8:	8000a737          	lui	a4,0x8000a
800088bc:	da872783          	lw	a5,-600(a4) # 80009da8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009da9>
800088c0:	412787b3          	sub	a5,a5,s2
800088c4:	daf72423          	sw	a5,-600(a4)
	while (first() != NULL && first()->dticks <= announce_remaining) {
800088c8:	b25ff0ef          	jal	ra,800083ec <first>
800088cc:	00050413          	mv	s0,a0
800088d0:	02050263          	beqz	a0,800088f4 <sys_clock_announce+0xc4>
800088d4:	01052903          	lw	s2,16(a0)
800088d8:	01452703          	lw	a4,20(a0)
800088dc:	8000a7b7          	lui	a5,0x8000a
800088e0:	da87a683          	lw	a3,-600(a5) # 80009da8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009da9>
800088e4:	41f6d793          	srai	a5,a3,0x1f
800088e8:	00e7c663          	blt	a5,a4,800088f4 <sys_clock_announce+0xc4>
800088ec:	f6f71ae3          	bne	a4,a5,80008860 <sys_clock_announce+0x30>
800088f0:	f726f8e3          	bgeu	a3,s2,80008860 <sys_clock_announce+0x30>
	if (first() != NULL) {
800088f4:	02040863          	beqz	s0,80008924 <sys_clock_announce+0xf4>
		first()->dticks -= announce_remaining;
800088f8:	01042683          	lw	a3,16(s0)
800088fc:	01442783          	lw	a5,20(s0)
80008900:	8000a737          	lui	a4,0x8000a
80008904:	da872703          	lw	a4,-600(a4) # 80009da8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009da9>
80008908:	41f75613          	srai	a2,a4,0x1f
8000890c:	40e68733          	sub	a4,a3,a4
80008910:	00e6b6b3          	sltu	a3,a3,a4
80008914:	40c787b3          	sub	a5,a5,a2
80008918:	40d787b3          	sub	a5,a5,a3
8000891c:	00e42823          	sw	a4,16(s0)
80008920:	00f42a23          	sw	a5,20(s0)
	curr_tick += announce_remaining;
80008924:	8000a6b7          	lui	a3,0x8000a
80008928:	8000a5b7          	lui	a1,0x8000a
8000892c:	da85a703          	lw	a4,-600(a1) # 80009da8 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009da9>
80008930:	41f75513          	srai	a0,a4,0x1f
80008934:	d706a783          	lw	a5,-656(a3) # 80009d70 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009d71>
80008938:	d746a603          	lw	a2,-652(a3)
8000893c:	00e78733          	add	a4,a5,a4
80008940:	00f737b3          	sltu	a5,a4,a5
80008944:	00a60633          	add	a2,a2,a0
80008948:	00c787b3          	add	a5,a5,a2
8000894c:	d6e6a823          	sw	a4,-656(a3)
80008950:	d6f6aa23          	sw	a5,-652(a3)
	announce_remaining = 0;
80008954:	da05a423          	sw	zero,-600(a1)
	sys_clock_set_timeout(next_timeout(), false);
80008958:	b71ff0ef          	jal	ra,800084c8 <next_timeout>
8000895c:	00000593          	li	a1,0
80008960:	f89fd0ef          	jal	ra,800068e8 <sys_clock_set_timeout>
			  : "r" (key & MSTATUS_IEN)
80008964:	0084f493          	andi	s1,s1,8
	__asm__ volatile ("csrs mstatus, %0"
80008968:	3004a073          	csrs	mstatus,s1
}
8000896c:	00c12083          	lw	ra,12(sp)
80008970:	00812403          	lw	s0,8(sp)
80008974:	00412483          	lw	s1,4(sp)
80008978:	00012903          	lw	s2,0(sp)
8000897c:	01010113          	addi	sp,sp,16
80008980:	00008067          	ret

80008984 <boot_banner>:
80008984:	00308013          	addi	zero,ra,3
{
80008988:	ff010113          	addi	sp,sp,-16
8000898c:	00112623          	sw	ra,12(sp)
	printk("*** Booting Zephyr OS build %s %s ***\n",
80008990:	80009637          	lui	a2,0x80009
80008994:	0f460613          	addi	a2,a2,244 # 800090f4 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x800090f5>
80008998:	8000a5b7          	lui	a1,0x8000a
8000899c:	cd058593          	addi	a1,a1,-816 # 80009cd0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009cd1>
800089a0:	8000a537          	lui	a0,0x8000a
800089a4:	cf050513          	addi	a0,a0,-784 # 80009cf0 <CONFIG_SYSTEM_WORKQUEUE_PRIORITY+0x80009cf1>
800089a8:	9dcfc0ef          	jal	ra,80004b84 <printk>
}
800089ac:	00c12083          	lw	ra,12(sp)
800089b0:	01010113          	addi	sp,sp,16
800089b4:	00008067          	ret

800089b8 <_OffsetAbsSyms>:
800089b8:	00308013          	addi	zero,ra,3
GEN_ABS_SYM_END
800089bc:	00008067          	ret
