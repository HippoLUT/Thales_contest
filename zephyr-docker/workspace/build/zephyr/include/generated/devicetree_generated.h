/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /workdir/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /memory@80000000
 *   4   /soc
 *   5   /cpus
 *   6   /cpus/cpu@0
 *   7   /cpus/cpu@0/interrupt-controller
 *   8   /soc/clint@2000000
 *   9   /soc/debug-controller@0
 *   10  /soc/interrupt-controller@c000000
 *   11  /soc/uart@10000000
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"

/* Helper macros for child nodes of this node. */
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_cpus) fn(DT_N_S_memory_80000000) fn(DT_N_S_soc)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_80000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_80000000, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_80000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_cpus) fn(DT_N_S_memory_80000000) fn(DT_N_S_soc)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_80000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_80000000, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_80000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /memory@80000000 */ \
	4, /* /soc */ \
	5, /* /cpus */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_eth_cva6_bare_dev DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_eth_cva6_bare_dev 1
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"eth,cva6-bare-dev"}
#define DT_N_P_compatible_IDX_0 "eth,cva6-bare-dev"
#define DT_N_P_compatible_IDX_0_STRING_TOKEN eth_cva6_bare_dev
#define DT_N_P_compatible_IDX_0_STRING_UPPER_TOKEN ETH_CVA6_BARE_DEV
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /memory@80000000
 *
 * Node identifier: DT_N_S_memory_80000000
 */

/* Node's full path: */
#define DT_N_S_memory_80000000_PATH "/memory@80000000"

/* Node's name with unit-address: */
#define DT_N_S_memory_80000000_FULL_NAME "memory@80000000"

/* Node parent (/) identifier: */
#define DT_N_S_memory_80000000_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_memory_80000000_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_memory_80000000_FOREACH_CHILD(fn) 
#define DT_N_S_memory_80000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_memory_80000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_80000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_memory_80000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_80000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_memory_80000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_memory_80000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_memory_80000000_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_80000000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_80000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_80000000_EXISTS 1
#define DT_N_NODELABEL_ddr0 DT_N_S_memory_80000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_80000000_REG_NUM 1
#define DT_N_S_memory_80000000_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_80000000_REG_IDX_0_VAL_ADDRESS 2147483648 /* 0x80000000 */
#define DT_N_S_memory_80000000_REG_IDX_0_VAL_SIZE 1073741824 /* 0x40000000 */
#define DT_N_S_memory_80000000_RANGES_NUM 0
#define DT_N_S_memory_80000000_FOREACH_RANGE(fn) 
#define DT_N_S_memory_80000000_IRQ_NUM 0
#define DT_N_S_memory_80000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_80000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_80000000_P_reg {0 /* 0x0 */, 2147483648 /* 0x80000000 */, 0 /* 0x0 */, 1073741824 /* 0x40000000 */}
#define DT_N_S_memory_80000000_P_reg_IDX_0 0
#define DT_N_S_memory_80000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_80000000_P_reg_IDX_1 2147483648
#define DT_N_S_memory_80000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_80000000_P_reg_IDX_2 0
#define DT_N_S_memory_80000000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_memory_80000000_P_reg_IDX_3 1073741824
#define DT_N_S_memory_80000000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_memory_80000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_80000000, reg, 0) \
	fn(DT_N_S_memory_80000000, reg, 1) \
	fn(DT_N_S_memory_80000000, reg, 2) \
	fn(DT_N_S_memory_80000000, reg, 3)
#define DT_N_S_memory_80000000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_memory_80000000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_memory_80000000, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_memory_80000000, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_memory_80000000, reg, 3)
#define DT_N_S_memory_80000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_80000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_memory_80000000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_memory_80000000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_memory_80000000, reg, 3, __VA_ARGS__)
#define DT_N_S_memory_80000000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_memory_80000000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_memory_80000000, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_memory_80000000, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_memory_80000000, reg, 3, __VA_ARGS__)
#define DT_N_S_memory_80000000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_clint_2000000) fn(DT_N_S_soc_S_interrupt_controller_c000000) fn(DT_N_S_soc_S_debug_controller_0) fn(DT_N_S_soc_S_uart_10000000)
#define DT_N_S_soc_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_clint_2000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_c000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_debug_controller_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_10000000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_clint_2000000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_c000000, __VA_ARGS__) fn(DT_N_S_soc_S_debug_controller_0, __VA_ARGS__) fn(DT_N_S_soc_S_uart_10000000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clint_2000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_c000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_debug_controller_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_10000000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_clint_2000000) fn(DT_N_S_soc_S_interrupt_controller_c000000) fn(DT_N_S_soc_S_debug_controller_0) fn(DT_N_S_soc_S_uart_10000000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_clint_2000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_c000000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_debug_controller_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_10000000)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_clint_2000000, __VA_ARGS__) fn(DT_N_S_soc_S_interrupt_controller_c000000, __VA_ARGS__) fn(DT_N_S_soc_S_debug_controller_0, __VA_ARGS__) fn(DT_N_S_soc_S_uart_10000000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clint_2000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_interrupt_controller_c000000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_debug_controller_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_10000000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	8, /* /soc/clint@2000000 */ \
	9, /* /soc/debug-controller@0 */ \
	10, /* /soc/interrupt-controller@c000000 */ \
	11, /* /soc/uart@10000000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_eth_cva6_bare_soc DT_N_S_soc
#define DT_N_INST_0_simple_bus        DT_N_S_soc
#define DT_N_NODELABEL_l26            DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_eth_cva6_bare_soc 1
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"eth,cva6-bare-soc", "simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "eth,cva6-bare-soc"
#define DT_N_S_soc_P_compatible_IDX_0_STRING_TOKEN eth_cva6_bare_soc
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UPPER_TOKEN ETH_CVA6_BARE_SOC
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_IDX_1 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_1_STRING_TOKEN simple_bus
#define DT_N_S_soc_P_compatible_IDX_1_STRING_UPPER_TOKEN SIMPLE_BUS
#define DT_N_S_soc_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0) \
	fn(DT_N_S_soc, compatible, 1)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc, compatible, 1)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_soc, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 2
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	6, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller)
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller)
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller)
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller)
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	5, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS \
	7, /* /cpus/cpu@0/interrupt-controller */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_ohwg_cva6 DT_N_S_cpus_S_cpu_0
#define DT_N_INST_0_riscv     DT_N_S_cpus_S_cpu_0
#define DT_N_NODELABEL_cpu0   DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_ohwg_cva6 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_riscv 1
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_status "okay"
#define DT_N_S_cpus_S_cpu_0_P_status_STRING_TOKEN okay
#define DT_N_S_cpus_S_cpu_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_IDX 1
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_TOKEN okay
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, status, 0) \
	fn(DT_N_S_cpus_S_cpu_0, status, 1) \
	fn(DT_N_S_cpus_S_cpu_0, status, 2) \
	fn(DT_N_S_cpus_S_cpu_0, status, 3)
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 3)
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 3, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 3, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_status_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"ohwg,cva6", "riscv"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "ohwg,cva6"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN ohwg_cva6
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN OHWG_CVA6
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_1 "riscv"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_1_STRING_TOKEN riscv
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_1_STRING_UPPER_TOKEN RISCV
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0) \
	fn(DT_N_S_cpus_S_cpu_0, compatible, 1)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, compatible, 1)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, compatible, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, compatible, 1, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 2
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1

/*
 * Devicetree node: /cpus/cpu@0/interrupt-controller
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0_S_interrupt_controller
 *
 * Binding (compatible = riscv,cpu-intc):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/riscv,cpu-intc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_PATH "/cpus/cpu@0/interrupt-controller"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FULL_NAME "interrupt-controller"

/* Node parent (/cpus/cpu@0) identifier: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_PARENT DT_N_S_cpus_S_cpu_0

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_REQUIRES_ORDS \
	6, /* /cpus/cpu@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_SUPPORTS_ORDS \
	8, /* /soc/clint@2000000 */ \
	9, /* /soc/debug-controller@0 */ \
	10, /* /soc/interrupt-controller@c000000 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_EXISTS 1
#define DT_N_INST_0_riscv_cpu_intc DT_N_S_cpus_S_cpu_0_S_interrupt_controller
#define DT_N_NODELABEL_cpu0_intc   DT_N_S_cpus_S_cpu_0_S_interrupt_controller

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_REG_NUM 0
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_COMPAT_MATCHES_riscv_cpu_intc 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_COMPAT_VENDOR_IDX_0 "RISC-V Foundation"
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_COMPAT_MODEL_IDX_0 "cpu-intc"
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_interrupt_controller 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_interrupt_controller_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible {"riscv,cpu-intc"}
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_IDX_0 "riscv,cpu-intc"
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_IDX_0_STRING_TOKEN riscv_cpu_intc
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_IDX_0_STRING_UPPER_TOKEN RISCV_CPU_INTC
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_S_interrupt_controller_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/clint@2000000
 *
 * Node identifier: DT_N_S_soc_S_clint_2000000
 *
 * Binding (compatible = sifive,clint0):
 *   $ZEPHYR_BASE/dts/bindings/timer/sifive,clint0.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_clint_2000000_PATH "/soc/clint@2000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_clint_2000000_FULL_NAME "clint@2000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_clint_2000000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_clint_2000000_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_clint_2000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_clint_2000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_clint_2000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_clint_2000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_clint_2000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_clint_2000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_clint_2000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_clint_2000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_clint_2000000_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_clint_2000000_REQUIRES_ORDS \
	4, /* /soc */ \
	7, /* /cpus/cpu@0/interrupt-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_clint_2000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_clint_2000000_EXISTS 1
#define DT_N_INST_0_sifive_clint0 DT_N_S_soc_S_clint_2000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_clint_2000000_REG_NUM 1
#define DT_N_S_soc_S_clint_2000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_REG_IDX_0_VAL_ADDRESS 33554432 /* 0x2000000 */
#define DT_N_S_soc_S_clint_2000000_REG_IDX_0_VAL_SIZE 786432 /* 0xc0000 */
#define DT_N_S_soc_S_clint_2000000_REG_NAME_control_VAL_ADDRESS DT_N_S_soc_S_clint_2000000_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_clint_2000000_REG_NAME_control_VAL_SIZE DT_N_S_soc_S_clint_2000000_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_clint_2000000_RANGES_NUM 0
#define DT_N_S_soc_S_clint_2000000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_clint_2000000_IRQ_NUM 2
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_0_VAL_irq 3
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_1_VAL_irq 7
#define DT_N_S_soc_S_clint_2000000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_COMPAT_MATCHES_sifive_clint0 1
#define DT_N_S_soc_S_clint_2000000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_COMPAT_VENDOR_IDX_0 "SiFive, Inc."
#define DT_N_S_soc_S_clint_2000000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_COMPAT_MODEL_IDX_0 "clint0"
#define DT_N_S_soc_S_clint_2000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_clint_2000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_clint_2000000_P_reg {0 /* 0x0 */, 33554432 /* 0x2000000 */, 0 /* 0x0 */, 786432 /* 0xc0000 */}
#define DT_N_S_soc_S_clint_2000000_P_reg_IDX_0 0
#define DT_N_S_soc_S_clint_2000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_reg_IDX_1 33554432
#define DT_N_S_soc_S_clint_2000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_reg_IDX_2 0
#define DT_N_S_soc_S_clint_2000000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_reg_IDX_3 786432
#define DT_N_S_soc_S_clint_2000000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clint_2000000, reg, 0) \
	fn(DT_N_S_soc_S_clint_2000000, reg, 1) \
	fn(DT_N_S_soc_S_clint_2000000, reg, 2) \
	fn(DT_N_S_soc_S_clint_2000000, reg, 3)
#define DT_N_S_soc_S_clint_2000000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clint_2000000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clint_2000000, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clint_2000000, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clint_2000000, reg, 3)
#define DT_N_S_soc_S_clint_2000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clint_2000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clint_2000000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clint_2000000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clint_2000000, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_clint_2000000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clint_2000000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clint_2000000, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clint_2000000, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clint_2000000, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_clint_2000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_compatible {"sifive,clint0"}
#define DT_N_S_soc_S_clint_2000000_P_compatible_IDX_0 "sifive,clint0"
#define DT_N_S_soc_S_clint_2000000_P_compatible_IDX_0_STRING_TOKEN sifive_clint0
#define DT_N_S_soc_S_clint_2000000_P_compatible_IDX_0_STRING_UPPER_TOKEN SIFIVE_CLINT0
#define DT_N_S_soc_S_clint_2000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clint_2000000, compatible, 0)
#define DT_N_S_soc_S_clint_2000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clint_2000000, compatible, 0)
#define DT_N_S_soc_S_clint_2000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clint_2000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clint_2000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clint_2000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clint_2000000_P_compatible_LEN 1
#define DT_N_S_soc_S_clint_2000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_reg_names {"control"}
#define DT_N_S_soc_S_clint_2000000_P_reg_names_IDX_0 "control"
#define DT_N_S_soc_S_clint_2000000_P_reg_names_IDX_0_STRING_TOKEN control
#define DT_N_S_soc_S_clint_2000000_P_reg_names_IDX_0_STRING_UPPER_TOKEN CONTROL
#define DT_N_S_soc_S_clint_2000000_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clint_2000000, reg_names, 0)
#define DT_N_S_soc_S_clint_2000000_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clint_2000000, reg_names, 0)
#define DT_N_S_soc_S_clint_2000000_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clint_2000000, reg_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clint_2000000_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clint_2000000, reg_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clint_2000000_P_reg_names_LEN 1
#define DT_N_S_soc_S_clint_2000000_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_clint_2000000_P_wakeup_source 0
#define DT_N_S_soc_S_clint_2000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/debug-controller@0
 *
 * Node identifier: DT_N_S_soc_S_debug_controller_0
 */

/* Node's full path: */
#define DT_N_S_soc_S_debug_controller_0_PATH "/soc/debug-controller@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_debug_controller_0_FULL_NAME "debug-controller@0"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_debug_controller_0_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_debug_controller_0_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_debug_controller_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_debug_controller_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_debug_controller_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_debug_controller_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_debug_controller_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_debug_controller_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_debug_controller_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_debug_controller_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_debug_controller_0_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_debug_controller_0_REQUIRES_ORDS \
	4, /* /soc */ \
	7, /* /cpus/cpu@0/interrupt-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_debug_controller_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_debug_controller_0_EXISTS 1
#define DT_N_INST_0_riscv_debug_013 DT_N_S_soc_S_debug_controller_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_debug_controller_0_REG_NUM 1
#define DT_N_S_soc_S_debug_controller_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_debug_controller_0_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_debug_controller_0_REG_NAME_control_VAL_ADDRESS DT_N_S_soc_S_debug_controller_0_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_debug_controller_0_REG_NAME_control_VAL_SIZE DT_N_S_soc_S_debug_controller_0_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_debug_controller_0_RANGES_NUM 0
#define DT_N_S_soc_S_debug_controller_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_debug_controller_0_IRQ_NUM 1
#define DT_N_S_soc_S_debug_controller_0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_IRQ_IDX_0_VAL_irq 65535
#define DT_N_S_soc_S_debug_controller_0_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_COMPAT_MATCHES_riscv_debug_013 1
#define DT_N_S_soc_S_debug_controller_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_COMPAT_VENDOR_IDX_0 "RISC-V Foundation"
#define DT_N_S_soc_S_debug_controller_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_COMPAT_MODEL_IDX_0 "debug-013"
#define DT_N_S_soc_S_debug_controller_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_debug_controller_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_debug_controller_0_P_compatible {"riscv,debug-013"}
#define DT_N_S_soc_S_debug_controller_0_P_compatible_IDX_0 "riscv,debug-013"
#define DT_N_S_soc_S_debug_controller_0_P_compatible_IDX_0_STRING_TOKEN riscv_debug_013
#define DT_N_S_soc_S_debug_controller_0_P_compatible_IDX_0_STRING_UPPER_TOKEN RISCV_DEBUG_013
#define DT_N_S_soc_S_debug_controller_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_debug_controller_0, compatible, 0)
#define DT_N_S_soc_S_debug_controller_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_debug_controller_0, compatible, 0)
#define DT_N_S_soc_S_debug_controller_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_debug_controller_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_debug_controller_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_debug_controller_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_debug_controller_0_P_compatible_LEN 1
#define DT_N_S_soc_S_debug_controller_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_P_interrupts_extended_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_P_reg {0 /* 0x0 */, 0 /* 0x0 */, 0 /* 0x0 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_debug_controller_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_debug_controller_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_P_reg_IDX_1 0
#define DT_N_S_soc_S_debug_controller_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_P_reg_IDX_2 0
#define DT_N_S_soc_S_debug_controller_0_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_P_reg_IDX_3 4096
#define DT_N_S_soc_S_debug_controller_0_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_debug_controller_0, reg, 0) \
	fn(DT_N_S_soc_S_debug_controller_0, reg, 1) \
	fn(DT_N_S_soc_S_debug_controller_0, reg, 2) \
	fn(DT_N_S_soc_S_debug_controller_0, reg, 3)
#define DT_N_S_soc_S_debug_controller_0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_debug_controller_0, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_debug_controller_0, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_debug_controller_0, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_debug_controller_0, reg, 3)
#define DT_N_S_soc_S_debug_controller_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_debug_controller_0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_debug_controller_0, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_debug_controller_0, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_debug_controller_0, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_debug_controller_0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_debug_controller_0, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_debug_controller_0, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_debug_controller_0, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_debug_controller_0, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_debug_controller_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_P_reg_names {"control"}
#define DT_N_S_soc_S_debug_controller_0_P_reg_names_IDX_0 "control"
#define DT_N_S_soc_S_debug_controller_0_P_reg_names_IDX_0_STRING_TOKEN control
#define DT_N_S_soc_S_debug_controller_0_P_reg_names_IDX_0_STRING_UPPER_TOKEN CONTROL
#define DT_N_S_soc_S_debug_controller_0_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_debug_controller_0_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_debug_controller_0, reg_names, 0)
#define DT_N_S_soc_S_debug_controller_0_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_debug_controller_0, reg_names, 0)
#define DT_N_S_soc_S_debug_controller_0_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_debug_controller_0, reg_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_debug_controller_0_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_debug_controller_0, reg_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_debug_controller_0_P_reg_names_LEN 1
#define DT_N_S_soc_S_debug_controller_0_P_reg_names_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@c000000
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_c000000
 *
 * Binding (compatible = sifive,plic-1.0.0):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/sifive,plic-1.0.0.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_c000000_PATH "/soc/interrupt-controller@c000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_c000000_FULL_NAME "interrupt-controller@c000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_c000000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_interrupt_controller_c000000_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_c000000_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_c000000_REQUIRES_ORDS \
	4, /* /soc */ \
	7, /* /cpus/cpu@0/interrupt-controller */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_c000000_SUPPORTS_ORDS \
	11, /* /soc/uart@10000000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_c000000_EXISTS 1
#define DT_N_INST_0_sifive_plic_1_0_0 DT_N_S_soc_S_interrupt_controller_c000000
#define DT_N_NODELABEL_plic0          DT_N_S_soc_S_interrupt_controller_c000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NUM 3
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_0_VAL_ADDRESS 201326592 /* 0xc000000 */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_0_VAL_SIZE 8192 /* 0x2000 */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_1_VAL_ADDRESS 201334784 /* 0xc002000 */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_1_VAL_SIZE 2088960 /* 0x1fe000 */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_2_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_2_VAL_ADDRESS 203423744 /* 0xc200000 */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_2_VAL_SIZE 65011712 /* 0x3e00000 */
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NAME_prio_VAL_ADDRESS DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NAME_prio_VAL_SIZE DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NAME_irq_en_VAL_ADDRESS DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NAME_irq_en_VAL_SIZE DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_1_VAL_SIZE
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NAME_reg_VAL_ADDRESS DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_2_VAL_ADDRESS
#define DT_N_S_soc_S_interrupt_controller_c000000_REG_NAME_reg_VAL_SIZE DT_N_S_soc_S_interrupt_controller_c000000_REG_IDX_2_VAL_SIZE
#define DT_N_S_soc_S_interrupt_controller_c000000_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_c000000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_NUM 2
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_0_VAL_irq 11
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_1_VAL_irq 9
#define DT_N_S_soc_S_interrupt_controller_c000000_IRQ_IDX_1_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_COMPAT_MATCHES_sifive_plic_1_0_0 1
#define DT_N_S_soc_S_interrupt_controller_c000000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_COMPAT_VENDOR_IDX_0 "SiFive, Inc."
#define DT_N_S_soc_S_interrupt_controller_c000000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_COMPAT_MODEL_IDX_0 "plic-1.0.0"
#define DT_N_S_soc_S_interrupt_controller_c000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_c000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_c000000_P_riscv_ndev 30
#define DT_N_S_soc_S_interrupt_controller_c000000_P_riscv_ndev_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg {0 /* 0x0 */, 201326592 /* 0xc000000 */, 0 /* 0x0 */, 8192 /* 0x2000 */, 0 /* 0x0 */, 201334784 /* 0xc002000 */, 0 /* 0x0 */, 2088960 /* 0x1fe000 */, 0 /* 0x0 */, 203423744 /* 0xc200000 */, 0 /* 0x0 */, 65011712 /* 0x3e00000 */}
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_0 0
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_1 201326592
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_2 0
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_3 8192
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_4 0
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_4_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_5 201334784
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_5_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_6 0
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_6_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_7 2088960
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_7_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_8 0
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_8_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_9 203423744
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_9_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_10 0
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_10_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_11 65011712
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_IDX_11_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 1) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 2) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 3) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 4) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 5) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 6) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 7) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 8) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 9) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 10) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 11)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 9) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 10) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 11)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 11, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 9, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg, 11, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_riscv_max_priority 7
#define DT_N_S_soc_S_interrupt_controller_c000000_P_riscv_max_priority_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible {"sifive,plic-1.0.0"}
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_IDX_0 "sifive,plic-1.0.0"
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_IDX_0_STRING_TOKEN sifive_plic_1_0_0
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_IDX_0_STRING_UPPER_TOKEN SIFIVE_PLIC_1_0_0
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_c000000, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_c000000, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_c000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_c000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names {"prio", "irq_en", "reg"}
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_0 "prio"
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_0_STRING_TOKEN prio
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_0_STRING_UPPER_TOKEN PRIO
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_1 "irq_en"
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_1_STRING_TOKEN irq_en
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_1_STRING_UPPER_TOKEN IRQ_EN
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_2 "reg"
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_2_STRING_TOKEN reg
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_2_STRING_UPPER_TOKEN REG
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_IDX_2_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 1) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 2)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 2)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 2, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_c000000, reg_names, 2, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_LEN 3
#define DT_N_S_soc_S_interrupt_controller_c000000_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_c000000_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_c000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@10000000
 *
 * Node identifier: DT_N_S_soc_S_uart_10000000
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_10000000_PATH "/soc/uart@10000000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_10000000_FULL_NAME "uart@10000000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_10000000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_10000000_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_10000000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_10000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_10000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_10000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_10000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_10000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_10000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_10000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_10000000_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_10000000_REQUIRES_ORDS \
	4, /* /soc */ \
	10, /* /soc/interrupt-controller@c000000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_10000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_10000000_EXISTS 1
#define DT_N_INST_0_ns16750  DT_N_S_soc_S_uart_10000000
#define DT_N_INST_0_ns16550  DT_N_S_soc_S_uart_10000000
#define DT_N_NODELABEL_uart0 DT_N_S_soc_S_uart_10000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_10000000_REG_NUM 1
#define DT_N_S_soc_S_uart_10000000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_REG_IDX_0_VAL_ADDRESS 268435456 /* 0x10000000 */
#define DT_N_S_soc_S_uart_10000000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_uart_10000000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_10000000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_10000000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_10000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_IRQ_IDX_0_VAL_irq 523
#define DT_N_S_soc_S_uart_10000000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_IRQ_IDX_0_VAL_priority 1
#define DT_N_S_soc_S_uart_10000000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_COMPAT_MATCHES_ns16750 1
#define DT_N_S_soc_S_uart_10000000_COMPAT_MATCHES_ns16550 1
#define DT_N_S_soc_S_uart_10000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_10000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_10000000_P_reg {0 /* 0x0 */, 268435456 /* 0x10000000 */, 0 /* 0x0 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_uart_10000000_P_reg_IDX_0 0
#define DT_N_S_soc_S_uart_10000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_reg_IDX_1 268435456
#define DT_N_S_soc_S_uart_10000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_reg_IDX_2 0
#define DT_N_S_soc_S_uart_10000000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_reg_IDX_3 4096
#define DT_N_S_soc_S_uart_10000000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_10000000, reg, 0) \
	fn(DT_N_S_soc_S_uart_10000000, reg, 1) \
	fn(DT_N_S_soc_S_uart_10000000, reg, 2) \
	fn(DT_N_S_soc_S_uart_10000000, reg, 3)
#define DT_N_S_soc_S_uart_10000000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_10000000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_10000000, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_10000000, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_10000000, reg, 3)
#define DT_N_S_soc_S_uart_10000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_10000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_10000000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_10000000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_10000000, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_10000000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_10000000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_10000000, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_10000000, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_10000000, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_10000000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_reg_shift 2
#define DT_N_S_soc_S_uart_10000000_P_reg_shift_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_clock_frequency 25000000
#define DT_N_S_soc_S_uart_10000000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_current_speed 115200
#define DT_N_S_soc_S_uart_10000000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_10000000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_compatible {"ns16750", "ns16550"}
#define DT_N_S_soc_S_uart_10000000_P_compatible_IDX_0 "ns16750"
#define DT_N_S_soc_S_uart_10000000_P_compatible_IDX_0_STRING_TOKEN ns16750
#define DT_N_S_soc_S_uart_10000000_P_compatible_IDX_0_STRING_UPPER_TOKEN NS16750
#define DT_N_S_soc_S_uart_10000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_compatible_IDX_1 "ns16550"
#define DT_N_S_soc_S_uart_10000000_P_compatible_IDX_1_STRING_TOKEN ns16550
#define DT_N_S_soc_S_uart_10000000_P_compatible_IDX_1_STRING_UPPER_TOKEN NS16550
#define DT_N_S_soc_S_uart_10000000_P_compatible_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_10000000, compatible, 0) \
	fn(DT_N_S_soc_S_uart_10000000, compatible, 1)
#define DT_N_S_soc_S_uart_10000000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_10000000, compatible, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_10000000, compatible, 1)
#define DT_N_S_soc_S_uart_10000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_10000000, compatible, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_10000000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_10000000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_10000000, compatible, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_10000000, compatible, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_10000000_P_compatible_LEN 2
#define DT_N_S_soc_S_uart_10000000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_interrupts {1 /* 0x1 */, 1 /* 0x1 */}
#define DT_N_S_soc_S_uart_10000000_P_interrupts_IDX_0 1
#define DT_N_S_soc_S_uart_10000000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_interrupts_IDX_1 1
#define DT_N_S_soc_S_uart_10000000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_10000000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_10000000, interrupts, 1)
#define DT_N_S_soc_S_uart_10000000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_10000000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_10000000, interrupts, 1)
#define DT_N_S_soc_S_uart_10000000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_10000000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_10000000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_10000000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_10000000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_uart_10000000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_10000000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_c000000
#define DT_N_S_soc_S_uart_10000000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_c000000
#define DT_N_S_soc_S_uart_10000000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_c000000
#define DT_N_S_soc_S_uart_10000000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_10000000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_10000000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_10000000_P_wakeup_source_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_console           DT_N_S_soc_S_uart_10000000
#define DT_CHOSEN_zephyr_console_EXISTS    1
#define DT_CHOSEN_zephyr_shell_uart        DT_N_S_soc_S_uart_10000000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS 1
#define DT_CHOSEN_zephyr_sram              DT_N_S_memory_80000000
#define DT_CHOSEN_zephyr_sram_EXISTS       1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller) fn(DT_N_S_memory_80000000) fn(DT_N_S_soc) fn(DT_N_S_soc_S_clint_2000000) fn(DT_N_S_soc_S_interrupt_controller_c000000) fn(DT_N_S_soc_S_debug_controller_0) fn(DT_N_S_soc_S_uart_10000000)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller) fn(DT_N_S_memory_80000000) fn(DT_N_S_soc) fn(DT_N_S_soc_S_clint_2000000) fn(DT_N_S_soc_S_interrupt_controller_c000000) fn(DT_N_S_soc_S_debug_controller_0) fn(DT_N_S_soc_S_uart_10000000)

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_eth_cva6_bare_dev 1
#define DT_COMPAT_HAS_OKAY_ohwg_cva6 1
#define DT_COMPAT_HAS_OKAY_riscv 1
#define DT_COMPAT_HAS_OKAY_riscv_cpu_intc 1
#define DT_COMPAT_HAS_OKAY_eth_cva6_bare_soc 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_sifive_clint0 1
#define DT_COMPAT_HAS_OKAY_sifive_plic_1_0_0 1
#define DT_COMPAT_HAS_OKAY_riscv_debug_013 1
#define DT_COMPAT_HAS_OKAY_ns16750 1
#define DT_COMPAT_HAS_OKAY_ns16550 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_eth_cva6_bare_dev_NUM_OKAY 1
#define DT_N_INST_ohwg_cva6_NUM_OKAY 1
#define DT_N_INST_riscv_NUM_OKAY 1
#define DT_N_INST_riscv_cpu_intc_NUM_OKAY 1
#define DT_N_INST_eth_cva6_bare_soc_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_sifive_clint0_NUM_OKAY 1
#define DT_N_INST_sifive_plic_1_0_0_NUM_OKAY 1
#define DT_N_INST_riscv_debug_013_NUM_OKAY 1
#define DT_N_INST_ns16750_NUM_OKAY 1
#define DT_N_INST_ns16550_NUM_OKAY 1
#define DT_FOREACH_OKAY_eth_cva6_bare_dev(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_eth_cva6_bare_dev(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_eth_cva6_bare_dev(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_eth_cva6_bare_dev(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ohwg_cva6(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_ohwg_cva6(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ohwg_cva6(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_ohwg_cva6(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_riscv(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_riscv(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_riscv(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_riscv(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_riscv_cpu_intc(fn) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller)
#define DT_FOREACH_OKAY_VARGS_riscv_cpu_intc(fn, ...) fn(DT_N_S_cpus_S_cpu_0_S_interrupt_controller, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_riscv_cpu_intc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_riscv_cpu_intc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_eth_cva6_bare_soc(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_eth_cva6_bare_soc(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_eth_cva6_bare_soc(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_eth_cva6_bare_soc(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_sifive_clint0(fn) fn(DT_N_S_soc_S_clint_2000000)
#define DT_FOREACH_OKAY_VARGS_sifive_clint0(fn, ...) fn(DT_N_S_soc_S_clint_2000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_sifive_clint0(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_sifive_clint0(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_sifive_plic_1_0_0(fn) fn(DT_N_S_soc_S_interrupt_controller_c000000)
#define DT_FOREACH_OKAY_VARGS_sifive_plic_1_0_0(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_c000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_sifive_plic_1_0_0(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_sifive_plic_1_0_0(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_riscv_debug_013(fn) fn(DT_N_S_soc_S_debug_controller_0)
#define DT_FOREACH_OKAY_VARGS_riscv_debug_013(fn, ...) fn(DT_N_S_soc_S_debug_controller_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_riscv_debug_013(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_riscv_debug_013(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ns16750(fn) fn(DT_N_S_soc_S_uart_10000000)
#define DT_FOREACH_OKAY_VARGS_ns16750(fn, ...) fn(DT_N_S_soc_S_uart_10000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ns16750(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_ns16750(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ns16550(fn) fn(DT_N_S_soc_S_uart_10000000)
#define DT_FOREACH_OKAY_VARGS_ns16550(fn, ...) fn(DT_N_S_soc_S_uart_10000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ns16550(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_ns16550(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
